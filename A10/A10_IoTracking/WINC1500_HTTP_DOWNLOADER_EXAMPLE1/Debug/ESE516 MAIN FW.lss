
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00028ee0  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002f4  20000000  0003aee0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000055c4  20000300  0003b1e0  000302f4  2**4
                  ALLOC
  3 .stack        00002004  200058c4  000407a4  000302f4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0003031c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00132b57  00000000  00000000  00030375  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0001115b  00000000  00000000  00162ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00016ff1  00000000  00000000  00174027  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003db8  00000000  00000000  0018b018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003a10  00000000  00000000  0018edd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0004144a  00000000  00000000  001927e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005f00f  00000000  00000000  001d3c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c3e40  00000000  00000000  00232c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000e8d8  00000000  00000000  002f6a7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	c8 78 00 20 3d ba 02 00 35 bb 02 00 35 bb 02 00     .x. =...5...5...
	...
   1202c:	cd ab 01 00 00 00 00 00 00 00 00 00 f1 ac 01 00     ................
   1203c:	39 ad 01 00 35 bb 02 00 35 bb 02 00 35 bb 02 00     9...5...5...5...
   1204c:	8d 7b 02 00 b9 70 02 00 35 bb 02 00 b9 30 01 00     .{...p..5....0..
   1205c:	35 bb 02 00 fd 31 01 00 31 82 02 00 49 82 02 00     5....1..1...I...
   1206c:	61 82 02 00 79 82 02 00 91 82 02 00 a9 82 02 00     a...y...........
   1207c:	85 b9 02 00 99 b9 02 00 ad b9 02 00 b9 88 01 00     ................
   1208c:	cd 88 01 00 e1 88 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	41 2f 01 00 35 bb 02 00 7d 30 01 00 35 bb 02 00     A/..5...}0..5...
   120ac:	35 bb 02 00 00 00 00 00                             5.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003aee0 	.word	0x0003aee0

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003aee0 	.word	0x0003aee0
   1210c:	0003aee0 	.word	0x0003aee0
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223d      	movs	r2, #61	; 0x3d
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	200043a4 	.word	0x200043a4
   12224:	00014f4d 	.word	0x00014f4d

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223d      	movs	r2, #61	; 0x3d
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	200043a4 	.word	0x200043a4
   1227c:	00014f4d 	.word	0x00014f4d

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000031c 	.word	0x2000031c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b0a      	ldr	r3, [pc, #40]	; (122e4 <gfx_mono_framebuffer_put_byte+0x48>)
   122bc:	6819      	ldr	r1, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781a      	ldrb	r2, [r3, #0]
   122c2:	0013      	movs	r3, r2
   122c4:	011b      	lsls	r3, r3, #4
   122c6:	189b      	adds	r3, r3, r2
   122c8:	009b      	lsls	r3, r3, #2
   122ca:	001a      	movs	r2, r3
   122cc:	1dbb      	adds	r3, r7, #6
   122ce:	781b      	ldrb	r3, [r3, #0]
   122d0:	18d3      	adds	r3, r2, r3
   122d2:	18cb      	adds	r3, r1, r3
   122d4:	1d7a      	adds	r2, r7, #5
   122d6:	7812      	ldrb	r2, [r2, #0]
   122d8:	701a      	strb	r2, [r3, #0]
}
   122da:	46c0      	nop			; (mov r8, r8)
   122dc:	46bd      	mov	sp, r7
   122de:	b003      	add	sp, #12
   122e0:	bd90      	pop	{r4, r7, pc}
   122e2:	46c0      	nop			; (mov r8, r8)
   122e4:	2000031c 	.word	0x2000031c

000122e8 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	b082      	sub	sp, #8
   122ec:	af00      	add	r7, sp, #0
   122ee:	0002      	movs	r2, r0
   122f0:	1dfb      	adds	r3, r7, #7
   122f2:	701a      	strb	r2, [r3, #0]
   122f4:	1dbb      	adds	r3, r7, #6
   122f6:	1c0a      	adds	r2, r1, #0
   122f8:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122fa:	4b09      	ldr	r3, [pc, #36]	; (12320 <gfx_mono_framebuffer_get_byte+0x38>)
   122fc:	6819      	ldr	r1, [r3, #0]
   122fe:	1dfb      	adds	r3, r7, #7
   12300:	781a      	ldrb	r2, [r3, #0]
   12302:	0013      	movs	r3, r2
   12304:	011b      	lsls	r3, r3, #4
   12306:	189b      	adds	r3, r3, r2
   12308:	009b      	lsls	r3, r3, #2
   1230a:	001a      	movs	r2, r3
   1230c:	1dbb      	adds	r3, r7, #6
   1230e:	781b      	ldrb	r3, [r3, #0]
   12310:	18d3      	adds	r3, r2, r3
   12312:	18cb      	adds	r3, r1, r3
   12314:	781b      	ldrb	r3, [r3, #0]
}
   12316:	0018      	movs	r0, r3
   12318:	46bd      	mov	sp, r7
   1231a:	b002      	add	sp, #8
   1231c:	bd80      	pop	{r7, pc}
   1231e:	46c0      	nop			; (mov r8, r8)
   12320:	2000031c 	.word	0x2000031c

00012324 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12324:	b5b0      	push	{r4, r5, r7, lr}
   12326:	b084      	sub	sp, #16
   12328:	af00      	add	r7, sp, #0
   1232a:	0005      	movs	r5, r0
   1232c:	000c      	movs	r4, r1
   1232e:	0010      	movs	r0, r2
   12330:	0019      	movs	r1, r3
   12332:	1dfb      	adds	r3, r7, #7
   12334:	1c2a      	adds	r2, r5, #0
   12336:	701a      	strb	r2, [r3, #0]
   12338:	1dbb      	adds	r3, r7, #6
   1233a:	1c22      	adds	r2, r4, #0
   1233c:	701a      	strb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	1c02      	adds	r2, r0, #0
   12342:	701a      	strb	r2, [r3, #0]
   12344:	1d3b      	adds	r3, r7, #4
   12346:	1c0a      	adds	r2, r1, #0
   12348:	701a      	strb	r2, [r3, #0]
	if (length == 0) {
   1234a:	1d7b      	adds	r3, r7, #5
   1234c:	781b      	ldrb	r3, [r3, #0]
   1234e:	2b00      	cmp	r3, #0
   12350:	d100      	bne.n	12354 <gfx_mono_generic_draw_vertical_line+0x30>
   12352:	e0a7      	b.n	124a4 <gfx_mono_generic_draw_vertical_line+0x180>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
   12354:	1dba      	adds	r2, r7, #6
   12356:	1d7b      	adds	r3, r7, #5
   12358:	7812      	ldrb	r2, [r2, #0]
   1235a:	781b      	ldrb	r3, [r3, #0]
   1235c:	18d3      	adds	r3, r2, r3
   1235e:	b2da      	uxtb	r2, r3
   12360:	230f      	movs	r3, #15
   12362:	18fb      	adds	r3, r7, r3
   12364:	3a01      	subs	r2, #1
   12366:	701a      	strb	r2, [r3, #0]

	if (y == y2) {
   12368:	1dba      	adds	r2, r7, #6
   1236a:	230f      	movs	r3, #15
   1236c:	18fb      	adds	r3, r7, r3
   1236e:	7812      	ldrb	r2, [r2, #0]
   12370:	781b      	ldrb	r3, [r3, #0]
   12372:	429a      	cmp	r2, r3
   12374:	d109      	bne.n	1238a <gfx_mono_generic_draw_vertical_line+0x66>
		gfx_mono_draw_pixel(x, y, color);
   12376:	1d3b      	adds	r3, r7, #4
   12378:	781a      	ldrb	r2, [r3, #0]
   1237a:	1dbb      	adds	r3, r7, #6
   1237c:	7819      	ldrb	r1, [r3, #0]
   1237e:	1dfb      	adds	r3, r7, #7
   12380:	781b      	ldrb	r3, [r3, #0]
   12382:	0018      	movs	r0, r3
   12384:	4b49      	ldr	r3, [pc, #292]	; (124ac <gfx_mono_generic_draw_vertical_line+0x188>)
   12386:	4798      	blx	r3
		return;
   12388:	e08d      	b.n	124a6 <gfx_mono_generic_draw_vertical_line+0x182>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
   1238a:	230f      	movs	r3, #15
   1238c:	18fb      	adds	r3, r7, r3
   1238e:	781b      	ldrb	r3, [r3, #0]
   12390:	2b2e      	cmp	r3, #46	; 0x2e
   12392:	d903      	bls.n	1239c <gfx_mono_generic_draw_vertical_line+0x78>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
   12394:	230f      	movs	r3, #15
   12396:	18fb      	adds	r3, r7, r3
   12398:	222f      	movs	r2, #47	; 0x2f
   1239a:	701a      	strb	r2, [r3, #0]
	}

	gfx_coord_t y1page = y / 8;
   1239c:	230e      	movs	r3, #14
   1239e:	18fb      	adds	r3, r7, r3
   123a0:	1dba      	adds	r2, r7, #6
   123a2:	7812      	ldrb	r2, [r2, #0]
   123a4:	08d2      	lsrs	r2, r2, #3
   123a6:	701a      	strb	r2, [r3, #0]
	gfx_coord_t y2page = y2 / 8;
   123a8:	230d      	movs	r3, #13
   123aa:	18fb      	adds	r3, r7, r3
   123ac:	220f      	movs	r2, #15
   123ae:	18ba      	adds	r2, r7, r2
   123b0:	7812      	ldrb	r2, [r2, #0]
   123b2:	08d2      	lsrs	r2, r2, #3
   123b4:	701a      	strb	r2, [r3, #0]

	uint8_t y1bitpos = y & 0x07;
   123b6:	230c      	movs	r3, #12
   123b8:	18fb      	adds	r3, r7, r3
   123ba:	1dba      	adds	r2, r7, #6
   123bc:	7812      	ldrb	r2, [r2, #0]
   123be:	2107      	movs	r1, #7
   123c0:	400a      	ands	r2, r1
   123c2:	701a      	strb	r2, [r3, #0]
	uint8_t y2bitpos = y2 & 0x07;
   123c4:	230b      	movs	r3, #11
   123c6:	18fb      	adds	r3, r7, r3
   123c8:	220f      	movs	r2, #15
   123ca:	18ba      	adds	r2, r7, r2
   123cc:	7812      	ldrb	r2, [r2, #0]
   123ce:	2107      	movs	r1, #7
   123d0:	400a      	ands	r2, r1
   123d2:	701a      	strb	r2, [r3, #0]

	uint8_t y1pixelmask = 0xFF << y1bitpos;
   123d4:	230c      	movs	r3, #12
   123d6:	18fb      	adds	r3, r7, r3
   123d8:	781b      	ldrb	r3, [r3, #0]
   123da:	22ff      	movs	r2, #255	; 0xff
   123dc:	409a      	lsls	r2, r3
   123de:	230a      	movs	r3, #10
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	701a      	strb	r2, [r3, #0]
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
   123e4:	230b      	movs	r3, #11
   123e6:	18fb      	adds	r3, r7, r3
   123e8:	781b      	ldrb	r3, [r3, #0]
   123ea:	2207      	movs	r2, #7
   123ec:	1ad3      	subs	r3, r2, r3
   123ee:	22ff      	movs	r2, #255	; 0xff
   123f0:	411a      	asrs	r2, r3
   123f2:	2309      	movs	r3, #9
   123f4:	18fb      	adds	r3, r7, r3
   123f6:	701a      	strb	r2, [r3, #0]

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
   123f8:	230e      	movs	r3, #14
   123fa:	18fa      	adds	r2, r7, r3
   123fc:	230d      	movs	r3, #13
   123fe:	18fb      	adds	r3, r7, r3
   12400:	7812      	ldrb	r2, [r2, #0]
   12402:	781b      	ldrb	r3, [r3, #0]
   12404:	429a      	cmp	r2, r3
   12406:	d117      	bne.n	12438 <gfx_mono_generic_draw_vertical_line+0x114>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
   12408:	2308      	movs	r3, #8
   1240a:	18fb      	adds	r3, r7, r3
   1240c:	220a      	movs	r2, #10
   1240e:	18ba      	adds	r2, r7, r2
   12410:	2109      	movs	r1, #9
   12412:	1879      	adds	r1, r7, r1
   12414:	7812      	ldrb	r2, [r2, #0]
   12416:	7809      	ldrb	r1, [r1, #0]
   12418:	400a      	ands	r2, r1
   1241a:	701a      	strb	r2, [r3, #0]
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
   1241c:	1d3b      	adds	r3, r7, #4
   1241e:	781c      	ldrb	r4, [r3, #0]
   12420:	2308      	movs	r3, #8
   12422:	18fb      	adds	r3, r7, r3
   12424:	781a      	ldrb	r2, [r3, #0]
   12426:	1dfb      	adds	r3, r7, #7
   12428:	7819      	ldrb	r1, [r3, #0]
   1242a:	230e      	movs	r3, #14
   1242c:	18fb      	adds	r3, r7, r3
   1242e:	7818      	ldrb	r0, [r3, #0]
   12430:	0023      	movs	r3, r4
   12432:	4c1f      	ldr	r4, [pc, #124]	; (124b0 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12434:	47a0      	blx	r4
   12436:	e036      	b.n	124a6 <gfx_mono_generic_draw_vertical_line+0x182>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
   12438:	1d3b      	adds	r3, r7, #4
   1243a:	781c      	ldrb	r4, [r3, #0]
   1243c:	230a      	movs	r3, #10
   1243e:	18fb      	adds	r3, r7, r3
   12440:	781a      	ldrb	r2, [r3, #0]
   12442:	1dfb      	adds	r3, r7, #7
   12444:	7819      	ldrb	r1, [r3, #0]
   12446:	230e      	movs	r3, #14
   12448:	18fb      	adds	r3, r7, r3
   1244a:	7818      	ldrb	r0, [r3, #0]
   1244c:	0023      	movs	r3, r4
   1244e:	4c18      	ldr	r4, [pc, #96]	; (124b0 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12450:	47a0      	blx	r4

		while (++y1page < y2page) {
   12452:	e00a      	b.n	1246a <gfx_mono_generic_draw_vertical_line+0x146>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
   12454:	1d3b      	adds	r3, r7, #4
   12456:	781a      	ldrb	r2, [r3, #0]
   12458:	1dfb      	adds	r3, r7, #7
   1245a:	7819      	ldrb	r1, [r3, #0]
   1245c:	230e      	movs	r3, #14
   1245e:	18fb      	adds	r3, r7, r3
   12460:	7818      	ldrb	r0, [r3, #0]
   12462:	0013      	movs	r3, r2
   12464:	22ff      	movs	r2, #255	; 0xff
   12466:	4c12      	ldr	r4, [pc, #72]	; (124b0 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12468:	47a0      	blx	r4
		while (++y1page < y2page) {
   1246a:	230e      	movs	r3, #14
   1246c:	18fb      	adds	r3, r7, r3
   1246e:	220e      	movs	r2, #14
   12470:	18ba      	adds	r2, r7, r2
   12472:	7812      	ldrb	r2, [r2, #0]
   12474:	3201      	adds	r2, #1
   12476:	701a      	strb	r2, [r3, #0]
   12478:	230e      	movs	r3, #14
   1247a:	18fa      	adds	r2, r7, r3
   1247c:	230d      	movs	r3, #13
   1247e:	18fb      	adds	r3, r7, r3
   12480:	7812      	ldrb	r2, [r2, #0]
   12482:	781b      	ldrb	r3, [r3, #0]
   12484:	429a      	cmp	r2, r3
   12486:	d3e5      	bcc.n	12454 <gfx_mono_generic_draw_vertical_line+0x130>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
   12488:	1d3b      	adds	r3, r7, #4
   1248a:	781c      	ldrb	r4, [r3, #0]
   1248c:	2309      	movs	r3, #9
   1248e:	18fb      	adds	r3, r7, r3
   12490:	781a      	ldrb	r2, [r3, #0]
   12492:	1dfb      	adds	r3, r7, #7
   12494:	7819      	ldrb	r1, [r3, #0]
   12496:	230d      	movs	r3, #13
   12498:	18fb      	adds	r3, r7, r3
   1249a:	7818      	ldrb	r0, [r3, #0]
   1249c:	0023      	movs	r3, r4
   1249e:	4c04      	ldr	r4, [pc, #16]	; (124b0 <gfx_mono_generic_draw_vertical_line+0x18c>)
   124a0:	47a0      	blx	r4
   124a2:	e000      	b.n	124a6 <gfx_mono_generic_draw_vertical_line+0x182>
		return;
   124a4:	46c0      	nop			; (mov r8, r8)
	}
}
   124a6:	46bd      	mov	sp, r7
   124a8:	b004      	add	sp, #16
   124aa:	bdb0      	pop	{r4, r5, r7, pc}
   124ac:	00012aed 	.word	0x00012aed
   124b0:	00012cb1 	.word	0x00012cb1

000124b4 <gfx_mono_generic_draw_line>:
 * \param[in]  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
   124b4:	b5b0      	push	{r4, r5, r7, lr}
   124b6:	b084      	sub	sp, #16
   124b8:	af00      	add	r7, sp, #0
   124ba:	0005      	movs	r5, r0
   124bc:	000c      	movs	r4, r1
   124be:	0010      	movs	r0, r2
   124c0:	0019      	movs	r1, r3
   124c2:	1dfb      	adds	r3, r7, #7
   124c4:	1c2a      	adds	r2, r5, #0
   124c6:	701a      	strb	r2, [r3, #0]
   124c8:	1dbb      	adds	r3, r7, #6
   124ca:	1c22      	adds	r2, r4, #0
   124cc:	701a      	strb	r2, [r3, #0]
   124ce:	1d7b      	adds	r3, r7, #5
   124d0:	1c02      	adds	r2, r0, #0
   124d2:	701a      	strb	r2, [r3, #0]
   124d4:	1d3b      	adds	r3, r7, #4
   124d6:	1c0a      	adds	r2, r1, #0
   124d8:	701a      	strb	r2, [r3, #0]
	int8_t dx;
	int8_t dy;
	int8_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
   124da:	1dfa      	adds	r2, r7, #7
   124dc:	1d7b      	adds	r3, r7, #5
   124de:	7812      	ldrb	r2, [r2, #0]
   124e0:	781b      	ldrb	r3, [r3, #0]
   124e2:	429a      	cmp	r2, r3
   124e4:	d91b      	bls.n	1251e <gfx_mono_generic_draw_line+0x6a>
		dx = x1;
   124e6:	230a      	movs	r3, #10
   124e8:	18fb      	adds	r3, r7, r3
   124ea:	1dfa      	adds	r2, r7, #7
   124ec:	7812      	ldrb	r2, [r2, #0]
   124ee:	701a      	strb	r2, [r3, #0]
		x1 = x2;
   124f0:	1dfb      	adds	r3, r7, #7
   124f2:	1d7a      	adds	r2, r7, #5
   124f4:	7812      	ldrb	r2, [r2, #0]
   124f6:	701a      	strb	r2, [r3, #0]
		x2 = dx;
   124f8:	1d7b      	adds	r3, r7, #5
   124fa:	220a      	movs	r2, #10
   124fc:	18ba      	adds	r2, r7, r2
   124fe:	7812      	ldrb	r2, [r2, #0]
   12500:	701a      	strb	r2, [r3, #0]
		dy = y1;
   12502:	2309      	movs	r3, #9
   12504:	18fb      	adds	r3, r7, r3
   12506:	1dba      	adds	r2, r7, #6
   12508:	7812      	ldrb	r2, [r2, #0]
   1250a:	701a      	strb	r2, [r3, #0]
		y1 = y2;
   1250c:	1dbb      	adds	r3, r7, #6
   1250e:	1d3a      	adds	r2, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	701a      	strb	r2, [r3, #0]
		y2 = dy;
   12514:	1d3b      	adds	r3, r7, #4
   12516:	2209      	movs	r2, #9
   12518:	18ba      	adds	r2, r7, r2
   1251a:	7812      	ldrb	r2, [r2, #0]
   1251c:	701a      	strb	r2, [r3, #0]
	}

	dx = x2 - x1;
   1251e:	1d7a      	adds	r2, r7, #5
   12520:	1dfb      	adds	r3, r7, #7
   12522:	7812      	ldrb	r2, [r2, #0]
   12524:	781b      	ldrb	r3, [r3, #0]
   12526:	1ad3      	subs	r3, r2, r3
   12528:	b2da      	uxtb	r2, r3
   1252a:	230a      	movs	r3, #10
   1252c:	18fb      	adds	r3, r7, r3
   1252e:	701a      	strb	r2, [r3, #0]
	dy = y2 - y1;
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1dbb      	adds	r3, r7, #6
   12534:	7812      	ldrb	r2, [r2, #0]
   12536:	781b      	ldrb	r3, [r3, #0]
   12538:	1ad3      	subs	r3, r2, r3
   1253a:	b2da      	uxtb	r2, r3
   1253c:	2309      	movs	r3, #9
   1253e:	18fb      	adds	r3, r7, r3
   12540:	701a      	strb	r2, [r3, #0]

	x = x1;
   12542:	230e      	movs	r3, #14
   12544:	18fb      	adds	r3, r7, r3
   12546:	1dfa      	adds	r2, r7, #7
   12548:	7812      	ldrb	r2, [r2, #0]
   1254a:	701a      	strb	r2, [r3, #0]
	y = y1;
   1254c:	230d      	movs	r3, #13
   1254e:	18fb      	adds	r3, r7, r3
   12550:	1dba      	adds	r2, r7, #6
   12552:	7812      	ldrb	r2, [r2, #0]
   12554:	701a      	strb	r2, [r3, #0]

	if (dx < 0) {
   12556:	230a      	movs	r3, #10
   12558:	18fb      	adds	r3, r7, r3
   1255a:	781b      	ldrb	r3, [r3, #0]
   1255c:	2b7f      	cmp	r3, #127	; 0x7f
   1255e:	d90c      	bls.n	1257a <gfx_mono_generic_draw_line+0xc6>
		xinc = -1;
   12560:	230c      	movs	r3, #12
   12562:	18fb      	adds	r3, r7, r3
   12564:	22ff      	movs	r2, #255	; 0xff
   12566:	701a      	strb	r2, [r3, #0]
		dx = -dx;
   12568:	230a      	movs	r3, #10
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	781b      	ldrb	r3, [r3, #0]
   1256e:	425b      	negs	r3, r3
   12570:	b2da      	uxtb	r2, r3
   12572:	230a      	movs	r3, #10
   12574:	18fb      	adds	r3, r7, r3
   12576:	701a      	strb	r2, [r3, #0]
   12578:	e003      	b.n	12582 <gfx_mono_generic_draw_line+0xce>
	} else {
		xinc = 1;
   1257a:	230c      	movs	r3, #12
   1257c:	18fb      	adds	r3, r7, r3
   1257e:	2201      	movs	r2, #1
   12580:	701a      	strb	r2, [r3, #0]
	}

	if (dy < 0) {
   12582:	2309      	movs	r3, #9
   12584:	18fb      	adds	r3, r7, r3
   12586:	781b      	ldrb	r3, [r3, #0]
   12588:	2b7f      	cmp	r3, #127	; 0x7f
   1258a:	d90c      	bls.n	125a6 <gfx_mono_generic_draw_line+0xf2>
		yinc = -1;
   1258c:	230b      	movs	r3, #11
   1258e:	18fb      	adds	r3, r7, r3
   12590:	22ff      	movs	r2, #255	; 0xff
   12592:	701a      	strb	r2, [r3, #0]
		dy = -dy;
   12594:	2309      	movs	r3, #9
   12596:	18fb      	adds	r3, r7, r3
   12598:	781b      	ldrb	r3, [r3, #0]
   1259a:	425b      	negs	r3, r3
   1259c:	b2da      	uxtb	r2, r3
   1259e:	2309      	movs	r3, #9
   125a0:	18fb      	adds	r3, r7, r3
   125a2:	701a      	strb	r2, [r3, #0]
   125a4:	e003      	b.n	125ae <gfx_mono_generic_draw_line+0xfa>
	} else {
		yinc = 1;
   125a6:	230b      	movs	r3, #11
   125a8:	18fb      	adds	r3, r7, r3
   125aa:	2201      	movs	r2, #1
   125ac:	701a      	strb	r2, [r3, #0]
	}

	if (dx > dy) {
   125ae:	230a      	movs	r3, #10
   125b0:	18fa      	adds	r2, r7, r3
   125b2:	2309      	movs	r3, #9
   125b4:	18fb      	adds	r3, r7, r3
   125b6:	7812      	ldrb	r2, [r2, #0]
   125b8:	b252      	sxtb	r2, r2
   125ba:	781b      	ldrb	r3, [r3, #0]
   125bc:	b25b      	sxtb	r3, r3
   125be:	429a      	cmp	r2, r3
   125c0:	dd5b      	ble.n	1267a <gfx_mono_generic_draw_line+0x1c6>
		e = dy - dx;
   125c2:	2309      	movs	r3, #9
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	781a      	ldrb	r2, [r3, #0]
   125c8:	230a      	movs	r3, #10
   125ca:	18fb      	adds	r3, r7, r3
   125cc:	781b      	ldrb	r3, [r3, #0]
   125ce:	1ad3      	subs	r3, r2, r3
   125d0:	b2da      	uxtb	r2, r3
   125d2:	2308      	movs	r3, #8
   125d4:	18fb      	adds	r3, r7, r3
   125d6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   125d8:	230f      	movs	r3, #15
   125da:	18fb      	adds	r3, r7, r3
   125dc:	2200      	movs	r2, #0
   125de:	701a      	strb	r2, [r3, #0]
   125e0:	e041      	b.n	12666 <gfx_mono_generic_draw_line+0x1b2>
			gfx_mono_draw_pixel(x, y, color);
   125e2:	2320      	movs	r3, #32
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	781a      	ldrb	r2, [r3, #0]
   125e8:	230d      	movs	r3, #13
   125ea:	18fb      	adds	r3, r7, r3
   125ec:	7819      	ldrb	r1, [r3, #0]
   125ee:	230e      	movs	r3, #14
   125f0:	18fb      	adds	r3, r7, r3
   125f2:	781b      	ldrb	r3, [r3, #0]
   125f4:	0018      	movs	r0, r3
   125f6:	4b50      	ldr	r3, [pc, #320]	; (12738 <gfx_mono_generic_draw_line+0x284>)
   125f8:	4798      	blx	r3
			if (e >= 0) {
   125fa:	2308      	movs	r3, #8
   125fc:	18fb      	adds	r3, r7, r3
   125fe:	781b      	ldrb	r3, [r3, #0]
   12600:	2b7f      	cmp	r3, #127	; 0x7f
   12602:	d814      	bhi.n	1262e <gfx_mono_generic_draw_line+0x17a>
				e -= dx;
   12604:	2308      	movs	r3, #8
   12606:	18fb      	adds	r3, r7, r3
   12608:	781a      	ldrb	r2, [r3, #0]
   1260a:	230a      	movs	r3, #10
   1260c:	18fb      	adds	r3, r7, r3
   1260e:	781b      	ldrb	r3, [r3, #0]
   12610:	1ad3      	subs	r3, r2, r3
   12612:	b2da      	uxtb	r2, r3
   12614:	2308      	movs	r3, #8
   12616:	18fb      	adds	r3, r7, r3
   12618:	701a      	strb	r2, [r3, #0]
				y += yinc;
   1261a:	230b      	movs	r3, #11
   1261c:	18fb      	adds	r3, r7, r3
   1261e:	7819      	ldrb	r1, [r3, #0]
   12620:	230d      	movs	r3, #13
   12622:	18fb      	adds	r3, r7, r3
   12624:	220d      	movs	r2, #13
   12626:	18ba      	adds	r2, r7, r2
   12628:	7812      	ldrb	r2, [r2, #0]
   1262a:	188a      	adds	r2, r1, r2
   1262c:	701a      	strb	r2, [r3, #0]
			}

			e += dy;
   1262e:	2308      	movs	r3, #8
   12630:	18fb      	adds	r3, r7, r3
   12632:	781a      	ldrb	r2, [r3, #0]
   12634:	2309      	movs	r3, #9
   12636:	18fb      	adds	r3, r7, r3
   12638:	781b      	ldrb	r3, [r3, #0]
   1263a:	18d3      	adds	r3, r2, r3
   1263c:	b2da      	uxtb	r2, r3
   1263e:	2308      	movs	r3, #8
   12640:	18fb      	adds	r3, r7, r3
   12642:	701a      	strb	r2, [r3, #0]
			x += xinc;
   12644:	230c      	movs	r3, #12
   12646:	18fb      	adds	r3, r7, r3
   12648:	7819      	ldrb	r1, [r3, #0]
   1264a:	230e      	movs	r3, #14
   1264c:	18fb      	adds	r3, r7, r3
   1264e:	220e      	movs	r2, #14
   12650:	18ba      	adds	r2, r7, r2
   12652:	7812      	ldrb	r2, [r2, #0]
   12654:	188a      	adds	r2, r1, r2
   12656:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   12658:	230f      	movs	r3, #15
   1265a:	18fb      	adds	r3, r7, r3
   1265c:	781a      	ldrb	r2, [r3, #0]
   1265e:	230f      	movs	r3, #15
   12660:	18fb      	adds	r3, r7, r3
   12662:	3201      	adds	r2, #1
   12664:	701a      	strb	r2, [r3, #0]
   12666:	230f      	movs	r3, #15
   12668:	18fb      	adds	r3, r7, r3
   1266a:	781a      	ldrb	r2, [r3, #0]
   1266c:	230a      	movs	r3, #10
   1266e:	18fb      	adds	r3, r7, r3
   12670:	781b      	ldrb	r3, [r3, #0]
   12672:	b25b      	sxtb	r3, r3
   12674:	429a      	cmp	r2, r3
   12676:	ddb4      	ble.n	125e2 <gfx_mono_generic_draw_line+0x12e>

			e += dx;
			y += yinc;
		}
	}
}
   12678:	e05a      	b.n	12730 <gfx_mono_generic_draw_line+0x27c>
		e = dx - dy;
   1267a:	230a      	movs	r3, #10
   1267c:	18fb      	adds	r3, r7, r3
   1267e:	781a      	ldrb	r2, [r3, #0]
   12680:	2309      	movs	r3, #9
   12682:	18fb      	adds	r3, r7, r3
   12684:	781b      	ldrb	r3, [r3, #0]
   12686:	1ad3      	subs	r3, r2, r3
   12688:	b2da      	uxtb	r2, r3
   1268a:	2308      	movs	r3, #8
   1268c:	18fb      	adds	r3, r7, r3
   1268e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   12690:	230f      	movs	r3, #15
   12692:	18fb      	adds	r3, r7, r3
   12694:	2200      	movs	r2, #0
   12696:	701a      	strb	r2, [r3, #0]
   12698:	e041      	b.n	1271e <gfx_mono_generic_draw_line+0x26a>
			gfx_mono_draw_pixel(x, y, color);
   1269a:	2320      	movs	r3, #32
   1269c:	18fb      	adds	r3, r7, r3
   1269e:	781a      	ldrb	r2, [r3, #0]
   126a0:	230d      	movs	r3, #13
   126a2:	18fb      	adds	r3, r7, r3
   126a4:	7819      	ldrb	r1, [r3, #0]
   126a6:	230e      	movs	r3, #14
   126a8:	18fb      	adds	r3, r7, r3
   126aa:	781b      	ldrb	r3, [r3, #0]
   126ac:	0018      	movs	r0, r3
   126ae:	4b22      	ldr	r3, [pc, #136]	; (12738 <gfx_mono_generic_draw_line+0x284>)
   126b0:	4798      	blx	r3
			if (e >= 0) {
   126b2:	2308      	movs	r3, #8
   126b4:	18fb      	adds	r3, r7, r3
   126b6:	781b      	ldrb	r3, [r3, #0]
   126b8:	2b7f      	cmp	r3, #127	; 0x7f
   126ba:	d814      	bhi.n	126e6 <gfx_mono_generic_draw_line+0x232>
				e -= dy;
   126bc:	2308      	movs	r3, #8
   126be:	18fb      	adds	r3, r7, r3
   126c0:	781a      	ldrb	r2, [r3, #0]
   126c2:	2309      	movs	r3, #9
   126c4:	18fb      	adds	r3, r7, r3
   126c6:	781b      	ldrb	r3, [r3, #0]
   126c8:	1ad3      	subs	r3, r2, r3
   126ca:	b2da      	uxtb	r2, r3
   126cc:	2308      	movs	r3, #8
   126ce:	18fb      	adds	r3, r7, r3
   126d0:	701a      	strb	r2, [r3, #0]
				x += xinc;
   126d2:	230c      	movs	r3, #12
   126d4:	18fb      	adds	r3, r7, r3
   126d6:	7819      	ldrb	r1, [r3, #0]
   126d8:	230e      	movs	r3, #14
   126da:	18fb      	adds	r3, r7, r3
   126dc:	220e      	movs	r2, #14
   126de:	18ba      	adds	r2, r7, r2
   126e0:	7812      	ldrb	r2, [r2, #0]
   126e2:	188a      	adds	r2, r1, r2
   126e4:	701a      	strb	r2, [r3, #0]
			e += dx;
   126e6:	2308      	movs	r3, #8
   126e8:	18fb      	adds	r3, r7, r3
   126ea:	781a      	ldrb	r2, [r3, #0]
   126ec:	230a      	movs	r3, #10
   126ee:	18fb      	adds	r3, r7, r3
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	18d3      	adds	r3, r2, r3
   126f4:	b2da      	uxtb	r2, r3
   126f6:	2308      	movs	r3, #8
   126f8:	18fb      	adds	r3, r7, r3
   126fa:	701a      	strb	r2, [r3, #0]
			y += yinc;
   126fc:	230b      	movs	r3, #11
   126fe:	18fb      	adds	r3, r7, r3
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	230d      	movs	r3, #13
   12704:	18fb      	adds	r3, r7, r3
   12706:	220d      	movs	r2, #13
   12708:	18ba      	adds	r2, r7, r2
   1270a:	7812      	ldrb	r2, [r2, #0]
   1270c:	188a      	adds	r2, r1, r2
   1270e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   12710:	230f      	movs	r3, #15
   12712:	18fb      	adds	r3, r7, r3
   12714:	781a      	ldrb	r2, [r3, #0]
   12716:	230f      	movs	r3, #15
   12718:	18fb      	adds	r3, r7, r3
   1271a:	3201      	adds	r2, #1
   1271c:	701a      	strb	r2, [r3, #0]
   1271e:	230f      	movs	r3, #15
   12720:	18fb      	adds	r3, r7, r3
   12722:	781a      	ldrb	r2, [r3, #0]
   12724:	2309      	movs	r3, #9
   12726:	18fb      	adds	r3, r7, r3
   12728:	781b      	ldrb	r3, [r3, #0]
   1272a:	b25b      	sxtb	r3, r3
   1272c:	429a      	cmp	r2, r3
   1272e:	ddb4      	ble.n	1269a <gfx_mono_generic_draw_line+0x1e6>
}
   12730:	46c0      	nop			; (mov r8, r8)
   12732:	46bd      	mov	sp, r7
   12734:	b004      	add	sp, #16
   12736:	bdb0      	pop	{r4, r5, r7, pc}
   12738:	00012aed 	.word	0x00012aed

0001273c <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
   1273c:	b5b0      	push	{r4, r5, r7, lr}
   1273e:	b084      	sub	sp, #16
   12740:	af00      	add	r7, sp, #0
   12742:	0005      	movs	r5, r0
   12744:	000c      	movs	r4, r1
   12746:	0010      	movs	r0, r2
   12748:	0019      	movs	r1, r3
   1274a:	1dfb      	adds	r3, r7, #7
   1274c:	1c2a      	adds	r2, r5, #0
   1274e:	701a      	strb	r2, [r3, #0]
   12750:	1dbb      	adds	r3, r7, #6
   12752:	1c22      	adds	r2, r4, #0
   12754:	701a      	strb	r2, [r3, #0]
   12756:	1d7b      	adds	r3, r7, #5
   12758:	1c02      	adds	r2, r0, #0
   1275a:	701a      	strb	r2, [r3, #0]
   1275c:	1d3b      	adds	r3, r7, #4
   1275e:	1c0a      	adds	r2, r1, #0
   12760:	701a      	strb	r2, [r3, #0]
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
   12762:	1d7b      	adds	r3, r7, #5
   12764:	781b      	ldrb	r3, [r3, #0]
   12766:	2b00      	cmp	r3, #0
   12768:	d109      	bne.n	1277e <gfx_mono_generic_draw_filled_circle+0x42>
		gfx_mono_draw_pixel(x, y, color);
   1276a:	1d3b      	adds	r3, r7, #4
   1276c:	781a      	ldrb	r2, [r3, #0]
   1276e:	1dbb      	adds	r3, r7, #6
   12770:	7819      	ldrb	r1, [r3, #0]
   12772:	1dfb      	adds	r3, r7, #7
   12774:	781b      	ldrb	r3, [r3, #0]
   12776:	0018      	movs	r0, r3
   12778:	4b8f      	ldr	r3, [pc, #572]	; (129b8 <gfx_mono_generic_draw_filled_circle+0x27c>)
   1277a:	4798      	blx	r3
		return;
   1277c:	e118      	b.n	129b0 <gfx_mono_generic_draw_filled_circle+0x274>
	}

	/* Set up start iterators. */
	offset_x = 0;
   1277e:	230f      	movs	r3, #15
   12780:	18fb      	adds	r3, r7, r3
   12782:	2200      	movs	r2, #0
   12784:	701a      	strb	r2, [r3, #0]
	offset_y = radius;
   12786:	230e      	movs	r3, #14
   12788:	18fb      	adds	r3, r7, r3
   1278a:	1d7a      	adds	r2, r7, #5
   1278c:	7812      	ldrb	r2, [r2, #0]
   1278e:	701a      	strb	r2, [r3, #0]
	error = 3 - 2 * radius;
   12790:	1d7b      	adds	r3, r7, #5
   12792:	781b      	ldrb	r3, [r3, #0]
   12794:	b29b      	uxth	r3, r3
   12796:	18db      	adds	r3, r3, r3
   12798:	b29b      	uxth	r3, r3
   1279a:	2203      	movs	r2, #3
   1279c:	1ad3      	subs	r3, r2, r3
   1279e:	b29a      	uxth	r2, r3
   127a0:	230c      	movs	r3, #12
   127a2:	18fb      	adds	r3, r7, r3
   127a4:	801a      	strh	r2, [r3, #0]

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
   127a6:	e0fa      	b.n	1299e <gfx_mono_generic_draw_filled_circle+0x262>
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
   127a8:	2320      	movs	r3, #32
   127aa:	18fb      	adds	r3, r7, r3
   127ac:	781b      	ldrb	r3, [r3, #0]
   127ae:	2203      	movs	r2, #3
   127b0:	4013      	ands	r3, r2
   127b2:	d02d      	beq.n	12810 <gfx_mono_generic_draw_filled_circle+0xd4>
			gfx_mono_draw_vertical_line(x + offset_y,
   127b4:	1dfa      	adds	r2, r7, #7
   127b6:	230e      	movs	r3, #14
   127b8:	18fb      	adds	r3, r7, r3
   127ba:	7812      	ldrb	r2, [r2, #0]
   127bc:	781b      	ldrb	r3, [r3, #0]
   127be:	18d3      	adds	r3, r2, r3
   127c0:	b2d8      	uxtb	r0, r3
   127c2:	1dba      	adds	r2, r7, #6
   127c4:	230f      	movs	r3, #15
   127c6:	18fb      	adds	r3, r7, r3
   127c8:	7812      	ldrb	r2, [r2, #0]
   127ca:	781b      	ldrb	r3, [r3, #0]
   127cc:	1ad3      	subs	r3, r2, r3
   127ce:	b2d9      	uxtb	r1, r3
   127d0:	230f      	movs	r3, #15
   127d2:	18fb      	adds	r3, r7, r3
   127d4:	781b      	ldrb	r3, [r3, #0]
   127d6:	3301      	adds	r3, #1
   127d8:	b2da      	uxtb	r2, r3
   127da:	1d3b      	adds	r3, r7, #4
   127dc:	781b      	ldrb	r3, [r3, #0]
   127de:	4c77      	ldr	r4, [pc, #476]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   127e0:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   127e2:	1dfa      	adds	r2, r7, #7
   127e4:	230f      	movs	r3, #15
   127e6:	18fb      	adds	r3, r7, r3
   127e8:	7812      	ldrb	r2, [r2, #0]
   127ea:	781b      	ldrb	r3, [r3, #0]
   127ec:	18d3      	adds	r3, r2, r3
   127ee:	b2d8      	uxtb	r0, r3
   127f0:	1dba      	adds	r2, r7, #6
   127f2:	230e      	movs	r3, #14
   127f4:	18fb      	adds	r3, r7, r3
   127f6:	7812      	ldrb	r2, [r2, #0]
   127f8:	781b      	ldrb	r3, [r3, #0]
   127fa:	1ad3      	subs	r3, r2, r3
   127fc:	b2d9      	uxtb	r1, r3
   127fe:	230e      	movs	r3, #14
   12800:	18fb      	adds	r3, r7, r3
   12802:	781b      	ldrb	r3, [r3, #0]
   12804:	3301      	adds	r3, #1
   12806:	b2da      	uxtb	r2, r3
   12808:	1d3b      	adds	r3, r7, #4
   1280a:	781b      	ldrb	r3, [r3, #0]
   1280c:	4c6b      	ldr	r4, [pc, #428]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   1280e:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
   12810:	2320      	movs	r3, #32
   12812:	18fb      	adds	r3, r7, r3
   12814:	781b      	ldrb	r3, [r3, #0]
   12816:	220c      	movs	r2, #12
   12818:	4013      	ands	r3, r2
   1281a:	d02d      	beq.n	12878 <gfx_mono_generic_draw_filled_circle+0x13c>
			gfx_mono_draw_vertical_line(x - offset_y,
   1281c:	1dfa      	adds	r2, r7, #7
   1281e:	230e      	movs	r3, #14
   12820:	18fb      	adds	r3, r7, r3
   12822:	7812      	ldrb	r2, [r2, #0]
   12824:	781b      	ldrb	r3, [r3, #0]
   12826:	1ad3      	subs	r3, r2, r3
   12828:	b2d8      	uxtb	r0, r3
   1282a:	1dba      	adds	r2, r7, #6
   1282c:	230f      	movs	r3, #15
   1282e:	18fb      	adds	r3, r7, r3
   12830:	7812      	ldrb	r2, [r2, #0]
   12832:	781b      	ldrb	r3, [r3, #0]
   12834:	1ad3      	subs	r3, r2, r3
   12836:	b2d9      	uxtb	r1, r3
   12838:	230f      	movs	r3, #15
   1283a:	18fb      	adds	r3, r7, r3
   1283c:	781b      	ldrb	r3, [r3, #0]
   1283e:	3301      	adds	r3, #1
   12840:	b2da      	uxtb	r2, r3
   12842:	1d3b      	adds	r3, r7, #4
   12844:	781b      	ldrb	r3, [r3, #0]
   12846:	4c5d      	ldr	r4, [pc, #372]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   12848:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   1284a:	1dfa      	adds	r2, r7, #7
   1284c:	230f      	movs	r3, #15
   1284e:	18fb      	adds	r3, r7, r3
   12850:	7812      	ldrb	r2, [r2, #0]
   12852:	781b      	ldrb	r3, [r3, #0]
   12854:	1ad3      	subs	r3, r2, r3
   12856:	b2d8      	uxtb	r0, r3
   12858:	1dba      	adds	r2, r7, #6
   1285a:	230e      	movs	r3, #14
   1285c:	18fb      	adds	r3, r7, r3
   1285e:	7812      	ldrb	r2, [r2, #0]
   12860:	781b      	ldrb	r3, [r3, #0]
   12862:	1ad3      	subs	r3, r2, r3
   12864:	b2d9      	uxtb	r1, r3
   12866:	230e      	movs	r3, #14
   12868:	18fb      	adds	r3, r7, r3
   1286a:	781b      	ldrb	r3, [r3, #0]
   1286c:	3301      	adds	r3, #1
   1286e:	b2da      	uxtb	r2, r3
   12870:	1d3b      	adds	r3, r7, #4
   12872:	781b      	ldrb	r3, [r3, #0]
   12874:	4c51      	ldr	r4, [pc, #324]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   12876:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
   12878:	2320      	movs	r3, #32
   1287a:	18fb      	adds	r3, r7, r3
   1287c:	781b      	ldrb	r3, [r3, #0]
   1287e:	2230      	movs	r2, #48	; 0x30
   12880:	4013      	ands	r3, r2
   12882:	d025      	beq.n	128d0 <gfx_mono_generic_draw_filled_circle+0x194>
			gfx_mono_draw_vertical_line(x - offset_y,
   12884:	1dfa      	adds	r2, r7, #7
   12886:	230e      	movs	r3, #14
   12888:	18fb      	adds	r3, r7, r3
   1288a:	7812      	ldrb	r2, [r2, #0]
   1288c:	781b      	ldrb	r3, [r3, #0]
   1288e:	1ad3      	subs	r3, r2, r3
   12890:	b2d8      	uxtb	r0, r3
   12892:	230f      	movs	r3, #15
   12894:	18fb      	adds	r3, r7, r3
   12896:	781b      	ldrb	r3, [r3, #0]
   12898:	3301      	adds	r3, #1
   1289a:	b2da      	uxtb	r2, r3
   1289c:	1d3b      	adds	r3, r7, #4
   1289e:	781c      	ldrb	r4, [r3, #0]
   128a0:	1dbb      	adds	r3, r7, #6
   128a2:	7819      	ldrb	r1, [r3, #0]
   128a4:	0023      	movs	r3, r4
   128a6:	4c45      	ldr	r4, [pc, #276]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   128a8:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   128aa:	1dfa      	adds	r2, r7, #7
   128ac:	230f      	movs	r3, #15
   128ae:	18fb      	adds	r3, r7, r3
   128b0:	7812      	ldrb	r2, [r2, #0]
   128b2:	781b      	ldrb	r3, [r3, #0]
   128b4:	1ad3      	subs	r3, r2, r3
   128b6:	b2d8      	uxtb	r0, r3
   128b8:	230e      	movs	r3, #14
   128ba:	18fb      	adds	r3, r7, r3
   128bc:	781b      	ldrb	r3, [r3, #0]
   128be:	3301      	adds	r3, #1
   128c0:	b2da      	uxtb	r2, r3
   128c2:	1d3b      	adds	r3, r7, #4
   128c4:	781c      	ldrb	r4, [r3, #0]
   128c6:	1dbb      	adds	r3, r7, #6
   128c8:	7819      	ldrb	r1, [r3, #0]
   128ca:	0023      	movs	r3, r4
   128cc:	4c3b      	ldr	r4, [pc, #236]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   128ce:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
   128d0:	2320      	movs	r3, #32
   128d2:	18fb      	adds	r3, r7, r3
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	22c0      	movs	r2, #192	; 0xc0
   128d8:	4013      	ands	r3, r2
   128da:	d025      	beq.n	12928 <gfx_mono_generic_draw_filled_circle+0x1ec>
			gfx_mono_draw_vertical_line(x + offset_y,
   128dc:	1dfa      	adds	r2, r7, #7
   128de:	230e      	movs	r3, #14
   128e0:	18fb      	adds	r3, r7, r3
   128e2:	7812      	ldrb	r2, [r2, #0]
   128e4:	781b      	ldrb	r3, [r3, #0]
   128e6:	18d3      	adds	r3, r2, r3
   128e8:	b2d8      	uxtb	r0, r3
   128ea:	230f      	movs	r3, #15
   128ec:	18fb      	adds	r3, r7, r3
   128ee:	781b      	ldrb	r3, [r3, #0]
   128f0:	3301      	adds	r3, #1
   128f2:	b2da      	uxtb	r2, r3
   128f4:	1d3b      	adds	r3, r7, #4
   128f6:	781c      	ldrb	r4, [r3, #0]
   128f8:	1dbb      	adds	r3, r7, #6
   128fa:	7819      	ldrb	r1, [r3, #0]
   128fc:	0023      	movs	r3, r4
   128fe:	4c2f      	ldr	r4, [pc, #188]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   12900:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   12902:	1dfa      	adds	r2, r7, #7
   12904:	230f      	movs	r3, #15
   12906:	18fb      	adds	r3, r7, r3
   12908:	7812      	ldrb	r2, [r2, #0]
   1290a:	781b      	ldrb	r3, [r3, #0]
   1290c:	18d3      	adds	r3, r2, r3
   1290e:	b2d8      	uxtb	r0, r3
   12910:	230e      	movs	r3, #14
   12912:	18fb      	adds	r3, r7, r3
   12914:	781b      	ldrb	r3, [r3, #0]
   12916:	3301      	adds	r3, #1
   12918:	b2da      	uxtb	r2, r3
   1291a:	1d3b      	adds	r3, r7, #4
   1291c:	781c      	ldrb	r4, [r3, #0]
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	7819      	ldrb	r1, [r3, #0]
   12922:	0023      	movs	r3, r4
   12924:	4c25      	ldr	r4, [pc, #148]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   12926:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
   12928:	230c      	movs	r3, #12
   1292a:	18fb      	adds	r3, r7, r3
   1292c:	2200      	movs	r2, #0
   1292e:	5e9b      	ldrsh	r3, [r3, r2]
   12930:	2b00      	cmp	r3, #0
   12932:	da10      	bge.n	12956 <gfx_mono_generic_draw_filled_circle+0x21a>
			error += ((offset_x << 2) + 6);
   12934:	230f      	movs	r3, #15
   12936:	18fb      	adds	r3, r7, r3
   12938:	781b      	ldrb	r3, [r3, #0]
   1293a:	b29b      	uxth	r3, r3
   1293c:	009b      	lsls	r3, r3, #2
   1293e:	b29a      	uxth	r2, r3
   12940:	230c      	movs	r3, #12
   12942:	18fb      	adds	r3, r7, r3
   12944:	881b      	ldrh	r3, [r3, #0]
   12946:	18d3      	adds	r3, r2, r3
   12948:	b29b      	uxth	r3, r3
   1294a:	3306      	adds	r3, #6
   1294c:	b29a      	uxth	r2, r3
   1294e:	230c      	movs	r3, #12
   12950:	18fb      	adds	r3, r7, r3
   12952:	801a      	strh	r2, [r3, #0]
   12954:	e01c      	b.n	12990 <gfx_mono_generic_draw_filled_circle+0x254>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
   12956:	230f      	movs	r3, #15
   12958:	18fb      	adds	r3, r7, r3
   1295a:	781b      	ldrb	r3, [r3, #0]
   1295c:	b29a      	uxth	r2, r3
   1295e:	230e      	movs	r3, #14
   12960:	18fb      	adds	r3, r7, r3
   12962:	781b      	ldrb	r3, [r3, #0]
   12964:	b29b      	uxth	r3, r3
   12966:	1ad3      	subs	r3, r2, r3
   12968:	b29b      	uxth	r3, r3
   1296a:	009b      	lsls	r3, r3, #2
   1296c:	b29a      	uxth	r2, r3
   1296e:	230c      	movs	r3, #12
   12970:	18fb      	adds	r3, r7, r3
   12972:	881b      	ldrh	r3, [r3, #0]
   12974:	18d3      	adds	r3, r2, r3
   12976:	b29b      	uxth	r3, r3
   12978:	330a      	adds	r3, #10
   1297a:	b29a      	uxth	r2, r3
   1297c:	230c      	movs	r3, #12
   1297e:	18fb      	adds	r3, r7, r3
   12980:	801a      	strh	r2, [r3, #0]
			--offset_y;
   12982:	230e      	movs	r3, #14
   12984:	18fb      	adds	r3, r7, r3
   12986:	220e      	movs	r2, #14
   12988:	18ba      	adds	r2, r7, r2
   1298a:	7812      	ldrb	r2, [r2, #0]
   1298c:	3a01      	subs	r2, #1
   1298e:	701a      	strb	r2, [r3, #0]
		}

		/* Next X. */
		++offset_x;
   12990:	230f      	movs	r3, #15
   12992:	18fb      	adds	r3, r7, r3
   12994:	220f      	movs	r2, #15
   12996:	18ba      	adds	r2, r7, r2
   12998:	7812      	ldrb	r2, [r2, #0]
   1299a:	3201      	adds	r2, #1
   1299c:	701a      	strb	r2, [r3, #0]
	while (offset_x <= offset_y) {
   1299e:	230f      	movs	r3, #15
   129a0:	18fa      	adds	r2, r7, r3
   129a2:	230e      	movs	r3, #14
   129a4:	18fb      	adds	r3, r7, r3
   129a6:	7812      	ldrb	r2, [r2, #0]
   129a8:	781b      	ldrb	r3, [r3, #0]
   129aa:	429a      	cmp	r2, r3
   129ac:	d800      	bhi.n	129b0 <gfx_mono_generic_draw_filled_circle+0x274>
   129ae:	e6fb      	b.n	127a8 <gfx_mono_generic_draw_filled_circle+0x6c>
	}
}
   129b0:	46bd      	mov	sp, r7
   129b2:	b004      	add	sp, #16
   129b4:	bdb0      	pop	{r4, r5, r7, pc}
   129b6:	46c0      	nop			; (mov r8, r8)
   129b8:	00012aed 	.word	0x00012aed
   129bc:	00012325 	.word	0x00012325

000129c0 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   129c0:	b580      	push	{r7, lr}
   129c2:	b082      	sub	sp, #8
   129c4:	af00      	add	r7, sp, #0
   129c6:	0002      	movs	r2, r0
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   129cc:	1dfb      	adds	r3, r7, #7
   129ce:	1dfa      	adds	r2, r7, #7
   129d0:	7812      	ldrb	r2, [r2, #0]
   129d2:	210f      	movs	r1, #15
   129d4:	400a      	ands	r2, r1
   129d6:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   129d8:	1dfb      	adds	r3, r7, #7
   129da:	781b      	ldrb	r3, [r3, #0]
   129dc:	2250      	movs	r2, #80	; 0x50
   129de:	4252      	negs	r2, r2
   129e0:	4313      	orrs	r3, r2
   129e2:	b2db      	uxtb	r3, r3
   129e4:	0018      	movs	r0, r3
   129e6:	4b03      	ldr	r3, [pc, #12]	; (129f4 <ssd1306_set_page_address+0x34>)
   129e8:	4798      	blx	r3
}
   129ea:	46c0      	nop			; (mov r8, r8)
   129ec:	46bd      	mov	sp, r7
   129ee:	b002      	add	sp, #8
   129f0:	bd80      	pop	{r7, pc}
   129f2:	46c0      	nop			; (mov r8, r8)
   129f4:	000121d1 	.word	0x000121d1

000129f8 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   129f8:	b580      	push	{r7, lr}
   129fa:	b082      	sub	sp, #8
   129fc:	af00      	add	r7, sp, #0
   129fe:	0002      	movs	r2, r0
   12a00:	1dfb      	adds	r3, r7, #7
   12a02:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12a04:	1dfb      	adds	r3, r7, #7
   12a06:	1dfa      	adds	r2, r7, #7
   12a08:	7812      	ldrb	r2, [r2, #0]
   12a0a:	217f      	movs	r1, #127	; 0x7f
   12a0c:	400a      	ands	r2, r1
   12a0e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
   12a10:	1dfb      	adds	r3, r7, #7
   12a12:	781b      	ldrb	r3, [r3, #0]
   12a14:	091b      	lsrs	r3, r3, #4
   12a16:	b2db      	uxtb	r3, r3
   12a18:	2210      	movs	r2, #16
   12a1a:	4313      	orrs	r3, r2
   12a1c:	b2db      	uxtb	r3, r3
   12a1e:	0018      	movs	r0, r3
   12a20:	4b06      	ldr	r3, [pc, #24]	; (12a3c <ssd1306_set_column_address+0x44>)
   12a22:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	220f      	movs	r2, #15
   12a2a:	4013      	ands	r3, r2
   12a2c:	b2db      	uxtb	r3, r3
   12a2e:	0018      	movs	r0, r3
   12a30:	4b02      	ldr	r3, [pc, #8]	; (12a3c <ssd1306_set_column_address+0x44>)
   12a32:	4798      	blx	r3
}
   12a34:	46c0      	nop			; (mov r8, r8)
   12a36:	46bd      	mov	sp, r7
   12a38:	b002      	add	sp, #8
   12a3a:	bd80      	pop	{r7, pc}
   12a3c:	000121d1 	.word	0x000121d1

00012a40 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12a40:	b580      	push	{r7, lr}
   12a42:	b082      	sub	sp, #8
   12a44:	af00      	add	r7, sp, #0
   12a46:	0002      	movs	r2, r0
   12a48:	1dfb      	adds	r3, r7, #7
   12a4a:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12a4c:	1dfb      	adds	r3, r7, #7
   12a4e:	1dfa      	adds	r2, r7, #7
   12a50:	7812      	ldrb	r2, [r2, #0]
   12a52:	213f      	movs	r1, #63	; 0x3f
   12a54:	400a      	ands	r2, r1
   12a56:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12a58:	1dfb      	adds	r3, r7, #7
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	2240      	movs	r2, #64	; 0x40
   12a5e:	4313      	orrs	r3, r2
   12a60:	b2db      	uxtb	r3, r3
   12a62:	0018      	movs	r0, r3
   12a64:	4b02      	ldr	r3, [pc, #8]	; (12a70 <ssd1306_set_display_start_line_address+0x30>)
   12a66:	4798      	blx	r3
}
   12a68:	46c0      	nop			; (mov r8, r8)
   12a6a:	46bd      	mov	sp, r7
   12a6c:	b002      	add	sp, #8
   12a6e:	bd80      	pop	{r7, pc}
   12a70:	000121d1 	.word	0x000121d1

00012a74 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   12a74:	b590      	push	{r4, r7, lr}
   12a76:	b083      	sub	sp, #12
   12a78:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12a7a:	4b17      	ldr	r3, [pc, #92]	; (12ad8 <gfx_mono_ssd1306_init+0x64>)
   12a7c:	0018      	movs	r0, r3
   12a7e:	4b17      	ldr	r3, [pc, #92]	; (12adc <gfx_mono_ssd1306_init+0x68>)
   12a80:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   12a82:	4b17      	ldr	r3, [pc, #92]	; (12ae0 <gfx_mono_ssd1306_init+0x6c>)
   12a84:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   12a86:	2000      	movs	r0, #0
   12a88:	4b16      	ldr	r3, [pc, #88]	; (12ae4 <gfx_mono_ssd1306_init+0x70>)
   12a8a:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12a8c:	1dfb      	adds	r3, r7, #7
   12a8e:	2200      	movs	r2, #0
   12a90:	701a      	strb	r2, [r3, #0]
   12a92:	e019      	b.n	12ac8 <gfx_mono_ssd1306_init+0x54>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
   12a94:	1dbb      	adds	r3, r7, #6
   12a96:	2200      	movs	r2, #0
   12a98:	701a      	strb	r2, [r3, #0]
   12a9a:	e00c      	b.n	12ab6 <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0xFF, true);
   12a9c:	1dbb      	adds	r3, r7, #6
   12a9e:	7819      	ldrb	r1, [r3, #0]
   12aa0:	1dfb      	adds	r3, r7, #7
   12aa2:	7818      	ldrb	r0, [r3, #0]
   12aa4:	2301      	movs	r3, #1
   12aa6:	22ff      	movs	r2, #255	; 0xff
   12aa8:	4c0f      	ldr	r4, [pc, #60]	; (12ae8 <gfx_mono_ssd1306_init+0x74>)
   12aaa:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
   12aac:	1dbb      	adds	r3, r7, #6
   12aae:	781a      	ldrb	r2, [r3, #0]
   12ab0:	1dbb      	adds	r3, r7, #6
   12ab2:	3201      	adds	r2, #1
   12ab4:	701a      	strb	r2, [r3, #0]
   12ab6:	1dbb      	adds	r3, r7, #6
   12ab8:	781b      	ldrb	r3, [r3, #0]
   12aba:	2b43      	cmp	r3, #67	; 0x43
   12abc:	d9ee      	bls.n	12a9c <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12abe:	1dfb      	adds	r3, r7, #7
   12ac0:	781a      	ldrb	r2, [r3, #0]
   12ac2:	1dfb      	adds	r3, r7, #7
   12ac4:	3201      	adds	r2, #1
   12ac6:	701a      	strb	r2, [r3, #0]
   12ac8:	1dfb      	adds	r3, r7, #7
   12aca:	781b      	ldrb	r3, [r3, #0]
   12acc:	2b05      	cmp	r3, #5
   12ace:	d9e1      	bls.n	12a94 <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   12ad0:	46c0      	nop			; (mov r8, r8)
   12ad2:	46bd      	mov	sp, r7
   12ad4:	b003      	add	sp, #12
   12ad6:	bd90      	pop	{r4, r7, pc}
   12ad8:	20000320 	.word	0x20000320
   12adc:	00012281 	.word	0x00012281
   12ae0:	00012129 	.word	0x00012129
   12ae4:	00012a41 	.word	0x00012a41
   12ae8:	00012be1 	.word	0x00012be1

00012aec <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   12aec:	b590      	push	{r4, r7, lr}
   12aee:	b085      	sub	sp, #20
   12af0:	af00      	add	r7, sp, #0
   12af2:	0004      	movs	r4, r0
   12af4:	0008      	movs	r0, r1
   12af6:	0011      	movs	r1, r2
   12af8:	1dfb      	adds	r3, r7, #7
   12afa:	1c22      	adds	r2, r4, #0
   12afc:	701a      	strb	r2, [r3, #0]
   12afe:	1dbb      	adds	r3, r7, #6
   12b00:	1c02      	adds	r2, r0, #0
   12b02:	701a      	strb	r2, [r3, #0]
   12b04:	1d7b      	adds	r3, r7, #5
   12b06:	1c0a      	adds	r2, r1, #0
   12b08:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12b0a:	1dfb      	adds	r3, r7, #7
   12b0c:	781b      	ldrb	r3, [r3, #0]
   12b0e:	2b43      	cmp	r3, #67	; 0x43
   12b10:	d85d      	bhi.n	12bce <gfx_mono_ssd1306_draw_pixel+0xe2>
   12b12:	1dbb      	adds	r3, r7, #6
   12b14:	781b      	ldrb	r3, [r3, #0]
   12b16:	2b2f      	cmp	r3, #47	; 0x2f
   12b18:	d859      	bhi.n	12bce <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12b1a:	230e      	movs	r3, #14
   12b1c:	18fb      	adds	r3, r7, r3
   12b1e:	1dba      	adds	r2, r7, #6
   12b20:	7812      	ldrb	r2, [r2, #0]
   12b22:	08d2      	lsrs	r2, r2, #3
   12b24:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12b26:	1dbb      	adds	r3, r7, #6
   12b28:	781a      	ldrb	r2, [r3, #0]
   12b2a:	230e      	movs	r3, #14
   12b2c:	18fb      	adds	r3, r7, r3
   12b2e:	781b      	ldrb	r3, [r3, #0]
   12b30:	00db      	lsls	r3, r3, #3
   12b32:	1ad3      	subs	r3, r2, r3
   12b34:	2201      	movs	r2, #1
   12b36:	409a      	lsls	r2, r3
   12b38:	230d      	movs	r3, #13
   12b3a:	18fb      	adds	r3, r7, r3
   12b3c:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   12b3e:	230f      	movs	r3, #15
   12b40:	18fc      	adds	r4, r7, r3
   12b42:	1dfb      	adds	r3, r7, #7
   12b44:	781a      	ldrb	r2, [r3, #0]
   12b46:	230e      	movs	r3, #14
   12b48:	18fb      	adds	r3, r7, r3
   12b4a:	781b      	ldrb	r3, [r3, #0]
   12b4c:	0011      	movs	r1, r2
   12b4e:	0018      	movs	r0, r3
   12b50:	4b21      	ldr	r3, [pc, #132]	; (12bd8 <gfx_mono_ssd1306_draw_pixel+0xec>)
   12b52:	4798      	blx	r3
   12b54:	0003      	movs	r3, r0
   12b56:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12b58:	1d7b      	adds	r3, r7, #5
   12b5a:	781b      	ldrb	r3, [r3, #0]
   12b5c:	2b01      	cmp	r3, #1
   12b5e:	d004      	beq.n	12b6a <gfx_mono_ssd1306_draw_pixel+0x7e>
   12b60:	2b02      	cmp	r3, #2
   12b62:	d01d      	beq.n	12ba0 <gfx_mono_ssd1306_draw_pixel+0xb4>
   12b64:	2b00      	cmp	r3, #0
   12b66:	d00b      	beq.n	12b80 <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12b68:	e025      	b.n	12bb6 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12b6a:	230f      	movs	r3, #15
   12b6c:	18fb      	adds	r3, r7, r3
   12b6e:	220f      	movs	r2, #15
   12b70:	18b9      	adds	r1, r7, r2
   12b72:	220d      	movs	r2, #13
   12b74:	18ba      	adds	r2, r7, r2
   12b76:	7809      	ldrb	r1, [r1, #0]
   12b78:	7812      	ldrb	r2, [r2, #0]
   12b7a:	430a      	orrs	r2, r1
   12b7c:	701a      	strb	r2, [r3, #0]
		break;
   12b7e:	e01a      	b.n	12bb6 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   12b80:	230d      	movs	r3, #13
   12b82:	18fb      	adds	r3, r7, r3
   12b84:	781b      	ldrb	r3, [r3, #0]
   12b86:	b25b      	sxtb	r3, r3
   12b88:	43db      	mvns	r3, r3
   12b8a:	b25b      	sxtb	r3, r3
   12b8c:	220f      	movs	r2, #15
   12b8e:	18ba      	adds	r2, r7, r2
   12b90:	7812      	ldrb	r2, [r2, #0]
   12b92:	b252      	sxtb	r2, r2
   12b94:	4013      	ands	r3, r2
   12b96:	b25a      	sxtb	r2, r3
   12b98:	230f      	movs	r3, #15
   12b9a:	18fb      	adds	r3, r7, r3
   12b9c:	701a      	strb	r2, [r3, #0]
		break;
   12b9e:	e00a      	b.n	12bb6 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   12ba0:	230f      	movs	r3, #15
   12ba2:	18fb      	adds	r3, r7, r3
   12ba4:	220f      	movs	r2, #15
   12ba6:	18b9      	adds	r1, r7, r2
   12ba8:	220d      	movs	r2, #13
   12baa:	18ba      	adds	r2, r7, r2
   12bac:	7809      	ldrb	r1, [r1, #0]
   12bae:	7812      	ldrb	r2, [r2, #0]
   12bb0:	404a      	eors	r2, r1
   12bb2:	701a      	strb	r2, [r3, #0]
		break;
   12bb4:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   12bb6:	230f      	movs	r3, #15
   12bb8:	18fb      	adds	r3, r7, r3
   12bba:	781a      	ldrb	r2, [r3, #0]
   12bbc:	1dfb      	adds	r3, r7, #7
   12bbe:	7819      	ldrb	r1, [r3, #0]
   12bc0:	230e      	movs	r3, #14
   12bc2:	18fb      	adds	r3, r7, r3
   12bc4:	7818      	ldrb	r0, [r3, #0]
   12bc6:	2300      	movs	r3, #0
   12bc8:	4c04      	ldr	r4, [pc, #16]	; (12bdc <gfx_mono_ssd1306_draw_pixel+0xf0>)
   12bca:	47a0      	blx	r4
   12bcc:	e000      	b.n	12bd0 <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   12bce:	46c0      	nop			; (mov r8, r8)
}
   12bd0:	46bd      	mov	sp, r7
   12bd2:	b005      	add	sp, #20
   12bd4:	bd90      	pop	{r4, r7, pc}
   12bd6:	46c0      	nop			; (mov r8, r8)
   12bd8:	00012c81 	.word	0x00012c81
   12bdc:	00012be1 	.word	0x00012be1

00012be0 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   12be0:	b5b0      	push	{r4, r5, r7, lr}
   12be2:	b082      	sub	sp, #8
   12be4:	af00      	add	r7, sp, #0
   12be6:	0005      	movs	r5, r0
   12be8:	000c      	movs	r4, r1
   12bea:	0010      	movs	r0, r2
   12bec:	0019      	movs	r1, r3
   12bee:	1dfb      	adds	r3, r7, #7
   12bf0:	1c2a      	adds	r2, r5, #0
   12bf2:	701a      	strb	r2, [r3, #0]
   12bf4:	1dbb      	adds	r3, r7, #6
   12bf6:	1c22      	adds	r2, r4, #0
   12bf8:	701a      	strb	r2, [r3, #0]
   12bfa:	1d7b      	adds	r3, r7, #5
   12bfc:	1c02      	adds	r2, r0, #0
   12bfe:	701a      	strb	r2, [r3, #0]
   12c00:	1d3b      	adds	r3, r7, #4
   12c02:	1c0a      	adds	r2, r1, #0
   12c04:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12c06:	1d3b      	adds	r3, r7, #4
   12c08:	781b      	ldrb	r3, [r3, #0]
   12c0a:	2201      	movs	r2, #1
   12c0c:	4053      	eors	r3, r2
   12c0e:	b2db      	uxtb	r3, r3
   12c10:	2b00      	cmp	r3, #0
   12c12:	d00d      	beq.n	12c30 <gfx_mono_ssd1306_put_byte+0x50>
   12c14:	1dbb      	adds	r3, r7, #6
   12c16:	781a      	ldrb	r2, [r3, #0]
   12c18:	1dfb      	adds	r3, r7, #7
   12c1a:	781b      	ldrb	r3, [r3, #0]
   12c1c:	0011      	movs	r1, r2
   12c1e:	0018      	movs	r0, r3
   12c20:	4b12      	ldr	r3, [pc, #72]	; (12c6c <gfx_mono_ssd1306_put_byte+0x8c>)
   12c22:	4798      	blx	r3
   12c24:	0003      	movs	r3, r0
   12c26:	001a      	movs	r2, r3
   12c28:	1d7b      	adds	r3, r7, #5
   12c2a:	781b      	ldrb	r3, [r3, #0]
   12c2c:	4293      	cmp	r3, r2
   12c2e:	d018      	beq.n	12c62 <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12c30:	1d7b      	adds	r3, r7, #5
   12c32:	781a      	ldrb	r2, [r3, #0]
   12c34:	1dbb      	adds	r3, r7, #6
   12c36:	7819      	ldrb	r1, [r3, #0]
   12c38:	1dfb      	adds	r3, r7, #7
   12c3a:	781b      	ldrb	r3, [r3, #0]
   12c3c:	0018      	movs	r0, r3
   12c3e:	4b0c      	ldr	r3, [pc, #48]	; (12c70 <gfx_mono_ssd1306_put_byte+0x90>)
   12c40:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12c42:	1dfb      	adds	r3, r7, #7
   12c44:	781b      	ldrb	r3, [r3, #0]
   12c46:	0018      	movs	r0, r3
   12c48:	4b0a      	ldr	r3, [pc, #40]	; (12c74 <gfx_mono_ssd1306_put_byte+0x94>)
   12c4a:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12c4c:	1dbb      	adds	r3, r7, #6
   12c4e:	781b      	ldrb	r3, [r3, #0]
   12c50:	0018      	movs	r0, r3
   12c52:	4b09      	ldr	r3, [pc, #36]	; (12c78 <gfx_mono_ssd1306_put_byte+0x98>)
   12c54:	4798      	blx	r3

	ssd1306_write_data(data);
   12c56:	1d7b      	adds	r3, r7, #5
   12c58:	781b      	ldrb	r3, [r3, #0]
   12c5a:	0018      	movs	r0, r3
   12c5c:	4b07      	ldr	r3, [pc, #28]	; (12c7c <gfx_mono_ssd1306_put_byte+0x9c>)
   12c5e:	4798      	blx	r3
   12c60:	e000      	b.n	12c64 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12c62:	46c0      	nop			; (mov r8, r8)
}
   12c64:	46bd      	mov	sp, r7
   12c66:	b002      	add	sp, #8
   12c68:	bdb0      	pop	{r4, r5, r7, pc}
   12c6a:	46c0      	nop			; (mov r8, r8)
   12c6c:	000122e9 	.word	0x000122e9
   12c70:	0001229d 	.word	0x0001229d
   12c74:	000129c1 	.word	0x000129c1
   12c78:	000129f9 	.word	0x000129f9
   12c7c:	00012229 	.word	0x00012229

00012c80 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12c80:	b580      	push	{r7, lr}
   12c82:	b082      	sub	sp, #8
   12c84:	af00      	add	r7, sp, #0
   12c86:	0002      	movs	r2, r0
   12c88:	1dfb      	adds	r3, r7, #7
   12c8a:	701a      	strb	r2, [r3, #0]
   12c8c:	1dbb      	adds	r3, r7, #6
   12c8e:	1c0a      	adds	r2, r1, #0
   12c90:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12c92:	1dbb      	adds	r3, r7, #6
   12c94:	781a      	ldrb	r2, [r3, #0]
   12c96:	1dfb      	adds	r3, r7, #7
   12c98:	781b      	ldrb	r3, [r3, #0]
   12c9a:	0011      	movs	r1, r2
   12c9c:	0018      	movs	r0, r3
   12c9e:	4b03      	ldr	r3, [pc, #12]	; (12cac <gfx_mono_ssd1306_get_byte+0x2c>)
   12ca0:	4798      	blx	r3
   12ca2:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ca4:	0018      	movs	r0, r3
   12ca6:	46bd      	mov	sp, r7
   12ca8:	b002      	add	sp, #8
   12caa:	bd80      	pop	{r7, pc}
   12cac:	000122e9 	.word	0x000122e9

00012cb0 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
   12cb0:	b5b0      	push	{r4, r5, r7, lr}
   12cb2:	b084      	sub	sp, #16
   12cb4:	af00      	add	r7, sp, #0
   12cb6:	0005      	movs	r5, r0
   12cb8:	000c      	movs	r4, r1
   12cba:	0010      	movs	r0, r2
   12cbc:	0019      	movs	r1, r3
   12cbe:	1dfb      	adds	r3, r7, #7
   12cc0:	1c2a      	adds	r2, r5, #0
   12cc2:	701a      	strb	r2, [r3, #0]
   12cc4:	1dbb      	adds	r3, r7, #6
   12cc6:	1c22      	adds	r2, r4, #0
   12cc8:	701a      	strb	r2, [r3, #0]
   12cca:	1d7b      	adds	r3, r7, #5
   12ccc:	1c02      	adds	r2, r0, #0
   12cce:	701a      	strb	r2, [r3, #0]
   12cd0:	1d3b      	adds	r3, r7, #4
   12cd2:	1c0a      	adds	r2, r1, #0
   12cd4:	701a      	strb	r2, [r3, #0]
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);
   12cd6:	230f      	movs	r3, #15
   12cd8:	18fc      	adds	r4, r7, r3
   12cda:	1dbb      	adds	r3, r7, #6
   12cdc:	781a      	ldrb	r2, [r3, #0]
   12cde:	1dfb      	adds	r3, r7, #7
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	0011      	movs	r1, r2
   12ce4:	0018      	movs	r0, r3
   12ce6:	4b1f      	ldr	r3, [pc, #124]	; (12d64 <gfx_mono_ssd1306_mask_byte+0xb4>)
   12ce8:	4798      	blx	r3
   12cea:	0003      	movs	r3, r0
   12cec:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12cee:	1d3b      	adds	r3, r7, #4
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <gfx_mono_ssd1306_mask_byte+0x50>
   12cf6:	2b02      	cmp	r3, #2
   12cf8:	d01b      	beq.n	12d32 <gfx_mono_ssd1306_mask_byte+0x82>
   12cfa:	2b00      	cmp	r3, #0
   12cfc:	d00a      	beq.n	12d14 <gfx_mono_ssd1306_mask_byte+0x64>
	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
		break;

	default:
		break;
   12cfe:	e022      	b.n	12d46 <gfx_mono_ssd1306_mask_byte+0x96>
		temp |= pixel_mask;
   12d00:	230f      	movs	r3, #15
   12d02:	18fb      	adds	r3, r7, r3
   12d04:	220f      	movs	r2, #15
   12d06:	18b9      	adds	r1, r7, r2
   12d08:	1d7a      	adds	r2, r7, #5
   12d0a:	7809      	ldrb	r1, [r1, #0]
   12d0c:	7812      	ldrb	r2, [r2, #0]
   12d0e:	430a      	orrs	r2, r1
   12d10:	701a      	strb	r2, [r3, #0]
		break;
   12d12:	e018      	b.n	12d46 <gfx_mono_ssd1306_mask_byte+0x96>
		temp &= ~pixel_mask;
   12d14:	1d7b      	adds	r3, r7, #5
   12d16:	781b      	ldrb	r3, [r3, #0]
   12d18:	b25b      	sxtb	r3, r3
   12d1a:	43db      	mvns	r3, r3
   12d1c:	b25b      	sxtb	r3, r3
   12d1e:	220f      	movs	r2, #15
   12d20:	18ba      	adds	r2, r7, r2
   12d22:	7812      	ldrb	r2, [r2, #0]
   12d24:	b252      	sxtb	r2, r2
   12d26:	4013      	ands	r3, r2
   12d28:	b25a      	sxtb	r2, r3
   12d2a:	230f      	movs	r3, #15
   12d2c:	18fb      	adds	r3, r7, r3
   12d2e:	701a      	strb	r2, [r3, #0]
		break;
   12d30:	e009      	b.n	12d46 <gfx_mono_ssd1306_mask_byte+0x96>
		temp ^= pixel_mask;
   12d32:	230f      	movs	r3, #15
   12d34:	18fb      	adds	r3, r7, r3
   12d36:	220f      	movs	r2, #15
   12d38:	18b9      	adds	r1, r7, r2
   12d3a:	1d7a      	adds	r2, r7, #5
   12d3c:	7809      	ldrb	r1, [r1, #0]
   12d3e:	7812      	ldrb	r2, [r2, #0]
   12d40:	404a      	eors	r2, r1
   12d42:	701a      	strb	r2, [r3, #0]
		break;
   12d44:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, column, temp);
   12d46:	230f      	movs	r3, #15
   12d48:	18fb      	adds	r3, r7, r3
   12d4a:	781a      	ldrb	r2, [r3, #0]
   12d4c:	1dbb      	adds	r3, r7, #6
   12d4e:	7819      	ldrb	r1, [r3, #0]
   12d50:	1dfb      	adds	r3, r7, #7
   12d52:	7818      	ldrb	r0, [r3, #0]
   12d54:	2300      	movs	r3, #0
   12d56:	4c04      	ldr	r4, [pc, #16]	; (12d68 <gfx_mono_ssd1306_mask_byte+0xb8>)
   12d58:	47a0      	blx	r4
}
   12d5a:	46c0      	nop			; (mov r8, r8)
   12d5c:	46bd      	mov	sp, r7
   12d5e:	b004      	add	sp, #16
   12d60:	bdb0      	pop	{r4, r5, r7, pc}
   12d62:	46c0      	nop			; (mov r8, r8)
   12d64:	00012c81 	.word	0x00012c81
   12d68:	00012be1 	.word	0x00012be1

00012d6c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12d6c:	b580      	push	{r7, lr}
   12d6e:	b084      	sub	sp, #16
   12d70:	af00      	add	r7, sp, #0
   12d72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12d74:	687b      	ldr	r3, [r7, #4]
   12d76:	681b      	ldr	r3, [r3, #0]
   12d78:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12d7a:	68fb      	ldr	r3, [r7, #12]
   12d7c:	7e5b      	ldrb	r3, [r3, #25]
   12d7e:	b2db      	uxtb	r3, r3
   12d80:	b25b      	sxtb	r3, r3
   12d82:	2b00      	cmp	r3, #0
   12d84:	da01      	bge.n	12d8a <adc_is_syncing+0x1e>
		return true;
   12d86:	2301      	movs	r3, #1
   12d88:	e000      	b.n	12d8c <adc_is_syncing+0x20>
	}

	return false;
   12d8a:	2300      	movs	r3, #0
}
   12d8c:	0018      	movs	r0, r3
   12d8e:	46bd      	mov	sp, r7
   12d90:	b004      	add	sp, #16
   12d92:	bd80      	pop	{r7, pc}

00012d94 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12d94:	b580      	push	{r7, lr}
   12d96:	b084      	sub	sp, #16
   12d98:	af00      	add	r7, sp, #0
   12d9a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12d9c:	687b      	ldr	r3, [r7, #4]
   12d9e:	681b      	ldr	r3, [r3, #0]
   12da0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12da2:	46c0      	nop			; (mov r8, r8)
   12da4:	687b      	ldr	r3, [r7, #4]
   12da6:	0018      	movs	r0, r3
   12da8:	4b0b      	ldr	r3, [pc, #44]	; (12dd8 <adc_start_conversion+0x44>)
   12daa:	4798      	blx	r3
   12dac:	1e03      	subs	r3, r0, #0
   12dae:	d1f9      	bne.n	12da4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12db0:	68fb      	ldr	r3, [r7, #12]
   12db2:	7b1b      	ldrb	r3, [r3, #12]
   12db4:	b2db      	uxtb	r3, r3
   12db6:	2202      	movs	r2, #2
   12db8:	4313      	orrs	r3, r2
   12dba:	b2da      	uxtb	r2, r3
   12dbc:	68fb      	ldr	r3, [r7, #12]
   12dbe:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12dc0:	46c0      	nop			; (mov r8, r8)
   12dc2:	687b      	ldr	r3, [r7, #4]
   12dc4:	0018      	movs	r0, r3
   12dc6:	4b04      	ldr	r3, [pc, #16]	; (12dd8 <adc_start_conversion+0x44>)
   12dc8:	4798      	blx	r3
   12dca:	1e03      	subs	r3, r0, #0
   12dcc:	d1f9      	bne.n	12dc2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12dce:	46c0      	nop			; (mov r8, r8)
   12dd0:	46bd      	mov	sp, r7
   12dd2:	b004      	add	sp, #16
   12dd4:	bd80      	pop	{r7, pc}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	00012d6d 	.word	0x00012d6d

00012ddc <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12ddc:	b580      	push	{r7, lr}
   12dde:	b084      	sub	sp, #16
   12de0:	af00      	add	r7, sp, #0
   12de2:	6078      	str	r0, [r7, #4]
   12de4:	000a      	movs	r2, r1
   12de6:	1cfb      	adds	r3, r7, #3
   12de8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12dea:	687b      	ldr	r3, [r7, #4]
   12dec:	681b      	ldr	r3, [r3, #0]
   12dee:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12df0:	68fb      	ldr	r3, [r7, #12]
   12df2:	1cfa      	adds	r2, r7, #3
   12df4:	7812      	ldrb	r2, [r2, #0]
   12df6:	759a      	strb	r2, [r3, #22]
}
   12df8:	46c0      	nop			; (mov r8, r8)
   12dfa:	46bd      	mov	sp, r7
   12dfc:	b004      	add	sp, #16
   12dfe:	bd80      	pop	{r7, pc}

00012e00 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12e00:	b580      	push	{r7, lr}
   12e02:	b084      	sub	sp, #16
   12e04:	af00      	add	r7, sp, #0
   12e06:	0002      	movs	r2, r0
   12e08:	1dfb      	adds	r3, r7, #7
   12e0a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12e0c:	1dfb      	adds	r3, r7, #7
   12e0e:	781a      	ldrb	r2, [r3, #0]
   12e10:	4b47      	ldr	r3, [pc, #284]	; (12f30 <_adc_interrupt_handler+0x130>)
   12e12:	0092      	lsls	r2, r2, #2
   12e14:	58d3      	ldr	r3, [r2, r3]
   12e16:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12e18:	68fb      	ldr	r3, [r7, #12]
   12e1a:	681b      	ldr	r3, [r3, #0]
   12e1c:	7e1b      	ldrb	r3, [r3, #24]
   12e1e:	b2da      	uxtb	r2, r3
   12e20:	68fb      	ldr	r3, [r7, #12]
   12e22:	681b      	ldr	r3, [r3, #0]
   12e24:	7ddb      	ldrb	r3, [r3, #23]
   12e26:	b2db      	uxtb	r3, r3
   12e28:	4013      	ands	r3, r2
   12e2a:	b2db      	uxtb	r3, r3
   12e2c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12e2e:	68bb      	ldr	r3, [r7, #8]
   12e30:	2201      	movs	r2, #1
   12e32:	4013      	ands	r3, r2
   12e34:	d045      	beq.n	12ec2 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12e36:	68fb      	ldr	r3, [r7, #12]
   12e38:	681b      	ldr	r3, [r3, #0]
   12e3a:	2201      	movs	r2, #1
   12e3c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12e3e:	46c0      	nop			; (mov r8, r8)
   12e40:	68fb      	ldr	r3, [r7, #12]
   12e42:	0018      	movs	r0, r3
   12e44:	4b3b      	ldr	r3, [pc, #236]	; (12f34 <_adc_interrupt_handler+0x134>)
   12e46:	4798      	blx	r3
   12e48:	1e03      	subs	r3, r0, #0
   12e4a:	d1f9      	bne.n	12e40 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12e4c:	68fb      	ldr	r3, [r7, #12]
   12e4e:	695b      	ldr	r3, [r3, #20]
   12e50:	1c99      	adds	r1, r3, #2
   12e52:	68fa      	ldr	r2, [r7, #12]
   12e54:	6151      	str	r1, [r2, #20]
   12e56:	68fa      	ldr	r2, [r7, #12]
   12e58:	6812      	ldr	r2, [r2, #0]
   12e5a:	8b52      	ldrh	r2, [r2, #26]
   12e5c:	b292      	uxth	r2, r2
   12e5e:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12e60:	68fb      	ldr	r3, [r7, #12]
   12e62:	8b1b      	ldrh	r3, [r3, #24]
   12e64:	b29b      	uxth	r3, r3
   12e66:	3b01      	subs	r3, #1
   12e68:	b29b      	uxth	r3, r3
   12e6a:	68fa      	ldr	r2, [r7, #12]
   12e6c:	1c19      	adds	r1, r3, #0
   12e6e:	8311      	strh	r1, [r2, #24]
   12e70:	2b00      	cmp	r3, #0
   12e72:	d008      	beq.n	12e86 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12e74:	68fb      	ldr	r3, [r7, #12]
   12e76:	7f5b      	ldrb	r3, [r3, #29]
   12e78:	2b00      	cmp	r3, #0
   12e7a:	d022      	beq.n	12ec2 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12e7c:	68fb      	ldr	r3, [r7, #12]
   12e7e:	0018      	movs	r0, r3
   12e80:	4b2d      	ldr	r3, [pc, #180]	; (12f38 <_adc_interrupt_handler+0x138>)
   12e82:	4798      	blx	r3
   12e84:	e01d      	b.n	12ec2 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12e86:	68fb      	ldr	r3, [r7, #12]
   12e88:	2101      	movs	r1, #1
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b2b      	ldr	r3, [pc, #172]	; (12f3c <_adc_interrupt_handler+0x13c>)
   12e8e:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12e90:	68fb      	ldr	r3, [r7, #12]
   12e92:	7f1b      	ldrb	r3, [r3, #28]
   12e94:	b2db      	uxtb	r3, r3
   12e96:	2b05      	cmp	r3, #5
   12e98:	d113      	bne.n	12ec2 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12e9a:	68fb      	ldr	r3, [r7, #12]
   12e9c:	2200      	movs	r2, #0
   12e9e:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12ea0:	68fb      	ldr	r3, [r7, #12]
   12ea2:	7edb      	ldrb	r3, [r3, #27]
   12ea4:	001a      	movs	r2, r3
   12ea6:	2301      	movs	r3, #1
   12ea8:	4013      	ands	r3, r2
   12eaa:	d00a      	beq.n	12ec2 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12eac:	68fb      	ldr	r3, [r7, #12]
   12eae:	7e9b      	ldrb	r3, [r3, #26]
   12eb0:	001a      	movs	r2, r3
   12eb2:	2301      	movs	r3, #1
   12eb4:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12eb6:	d004      	beq.n	12ec2 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12eb8:	68fb      	ldr	r3, [r7, #12]
   12eba:	689b      	ldr	r3, [r3, #8]
   12ebc:	68fa      	ldr	r2, [r7, #12]
   12ebe:	0010      	movs	r0, r2
   12ec0:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12ec2:	68bb      	ldr	r3, [r7, #8]
   12ec4:	2204      	movs	r2, #4
   12ec6:	4013      	ands	r3, r2
   12ec8:	d014      	beq.n	12ef4 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12eca:	68fb      	ldr	r3, [r7, #12]
   12ecc:	681b      	ldr	r3, [r3, #0]
   12ece:	2204      	movs	r2, #4
   12ed0:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12ed2:	68fb      	ldr	r3, [r7, #12]
   12ed4:	7edb      	ldrb	r3, [r3, #27]
   12ed6:	001a      	movs	r2, r3
   12ed8:	2302      	movs	r3, #2
   12eda:	4013      	ands	r3, r2
   12edc:	d00a      	beq.n	12ef4 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12ede:	68fb      	ldr	r3, [r7, #12]
   12ee0:	7e9b      	ldrb	r3, [r3, #26]
   12ee2:	001a      	movs	r2, r3
   12ee4:	2302      	movs	r3, #2
   12ee6:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12ee8:	d004      	beq.n	12ef4 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12eea:	68fb      	ldr	r3, [r7, #12]
   12eec:	68db      	ldr	r3, [r3, #12]
   12eee:	68fa      	ldr	r2, [r7, #12]
   12ef0:	0010      	movs	r0, r2
   12ef2:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12ef4:	68bb      	ldr	r3, [r7, #8]
   12ef6:	2202      	movs	r2, #2
   12ef8:	4013      	ands	r3, r2
   12efa:	d014      	beq.n	12f26 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12efc:	68fb      	ldr	r3, [r7, #12]
   12efe:	681b      	ldr	r3, [r3, #0]
   12f00:	2202      	movs	r2, #2
   12f02:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12f04:	68fb      	ldr	r3, [r7, #12]
   12f06:	7edb      	ldrb	r3, [r3, #27]
   12f08:	001a      	movs	r2, r3
   12f0a:	2304      	movs	r3, #4
   12f0c:	4013      	ands	r3, r2
   12f0e:	d00a      	beq.n	12f26 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12f10:	68fb      	ldr	r3, [r7, #12]
   12f12:	7e9b      	ldrb	r3, [r3, #26]
   12f14:	001a      	movs	r2, r3
   12f16:	2304      	movs	r3, #4
   12f18:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12f1a:	d004      	beq.n	12f26 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12f1c:	68fb      	ldr	r3, [r7, #12]
   12f1e:	691b      	ldr	r3, [r3, #16]
   12f20:	68fa      	ldr	r2, [r7, #12]
   12f22:	0010      	movs	r0, r2
   12f24:	4798      	blx	r3
		}
	}
}
   12f26:	46c0      	nop			; (mov r8, r8)
   12f28:	46bd      	mov	sp, r7
   12f2a:	b004      	add	sp, #16
   12f2c:	bd80      	pop	{r7, pc}
   12f2e:	46c0      	nop			; (mov r8, r8)
   12f30:	200043b8 	.word	0x200043b8
   12f34:	00012d6d 	.word	0x00012d6d
   12f38:	00012d95 	.word	0x00012d95
   12f3c:	00012ddd 	.word	0x00012ddd

00012f40 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12f40:	b580      	push	{r7, lr}
   12f42:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12f44:	2000      	movs	r0, #0
   12f46:	4b02      	ldr	r3, [pc, #8]	; (12f50 <ADC_Handler+0x10>)
   12f48:	4798      	blx	r3
}
   12f4a:	46c0      	nop			; (mov r8, r8)
   12f4c:	46bd      	mov	sp, r7
   12f4e:	bd80      	pop	{r7, pc}
   12f50:	00012e01 	.word	0x00012e01

00012f54 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12f54:	b580      	push	{r7, lr}
   12f56:	b082      	sub	sp, #8
   12f58:	af00      	add	r7, sp, #0
   12f5a:	0002      	movs	r2, r0
   12f5c:	1dfb      	adds	r3, r7, #7
   12f5e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12f60:	4a07      	ldr	r2, [pc, #28]	; (12f80 <system_interrupt_disable+0x2c>)
   12f62:	1dfb      	adds	r3, r7, #7
   12f64:	781b      	ldrb	r3, [r3, #0]
   12f66:	0019      	movs	r1, r3
   12f68:	231f      	movs	r3, #31
   12f6a:	400b      	ands	r3, r1
   12f6c:	2101      	movs	r1, #1
   12f6e:	4099      	lsls	r1, r3
   12f70:	000b      	movs	r3, r1
   12f72:	0019      	movs	r1, r3
   12f74:	2380      	movs	r3, #128	; 0x80
   12f76:	50d1      	str	r1, [r2, r3]
}
   12f78:	46c0      	nop			; (mov r8, r8)
   12f7a:	46bd      	mov	sp, r7
   12f7c:	b002      	add	sp, #8
   12f7e:	bd80      	pop	{r7, pc}
   12f80:	e000e100 	.word	0xe000e100

00012f84 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12f84:	b580      	push	{r7, lr}
   12f86:	b084      	sub	sp, #16
   12f88:	af00      	add	r7, sp, #0
   12f8a:	0002      	movs	r2, r0
   12f8c:	1dfb      	adds	r3, r7, #7
   12f8e:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12f90:	1dfb      	adds	r3, r7, #7
   12f92:	781a      	ldrb	r2, [r3, #0]
   12f94:	4b37      	ldr	r3, [pc, #220]	; (13074 <_dac_interrupt_handler+0xf0>)
   12f96:	0092      	lsls	r2, r2, #2
   12f98:	58d3      	ldr	r3, [r2, r3]
   12f9a:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12f9c:	68fb      	ldr	r3, [r7, #12]
   12f9e:	681b      	ldr	r3, [r3, #0]
   12fa0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12fa2:	68bb      	ldr	r3, [r7, #8]
   12fa4:	799b      	ldrb	r3, [r3, #6]
   12fa6:	b2db      	uxtb	r3, r3
   12fa8:	001a      	movs	r2, r3
   12faa:	2301      	movs	r3, #1
   12fac:	4013      	ands	r3, r2
   12fae:	d00e      	beq.n	12fce <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12fb0:	68bb      	ldr	r3, [r7, #8]
   12fb2:	2201      	movs	r2, #1
   12fb4:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12fb6:	68fb      	ldr	r3, [r7, #12]
   12fb8:	3314      	adds	r3, #20
   12fba:	2b00      	cmp	r3, #0
   12fbc:	d007      	beq.n	12fce <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12fbe:	68fb      	ldr	r3, [r7, #12]
   12fc0:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12fc2:	2b00      	cmp	r3, #0
   12fc4:	d003      	beq.n	12fce <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12fc6:	68fb      	ldr	r3, [r7, #12]
   12fc8:	699b      	ldr	r3, [r3, #24]
   12fca:	2000      	movs	r0, #0
   12fcc:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12fce:	68bb      	ldr	r3, [r7, #8]
   12fd0:	799b      	ldrb	r3, [r3, #6]
   12fd2:	b2db      	uxtb	r3, r3
   12fd4:	001a      	movs	r2, r3
   12fd6:	2302      	movs	r3, #2
   12fd8:	4013      	ands	r3, r2
   12fda:	d047      	beq.n	1306c <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12fdc:	68bb      	ldr	r3, [r7, #8]
   12fde:	2202      	movs	r2, #2
   12fe0:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12fe2:	68fb      	ldr	r3, [r7, #12]
   12fe4:	899b      	ldrh	r3, [r3, #12]
   12fe6:	b29b      	uxth	r3, r3
   12fe8:	2b00      	cmp	r3, #0
   12fea:	d033      	beq.n	13054 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12fec:	68fb      	ldr	r3, [r7, #12]
   12fee:	689a      	ldr	r2, [r3, #8]
   12ff0:	68fb      	ldr	r3, [r7, #12]
   12ff2:	89db      	ldrh	r3, [r3, #14]
   12ff4:	b29b      	uxth	r3, r3
   12ff6:	1c59      	adds	r1, r3, #1
   12ff8:	b288      	uxth	r0, r1
   12ffa:	68f9      	ldr	r1, [r7, #12]
   12ffc:	81c8      	strh	r0, [r1, #14]
   12ffe:	005b      	lsls	r3, r3, #1
   13000:	18d3      	adds	r3, r2, r3
   13002:	881b      	ldrh	r3, [r3, #0]
   13004:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   13006:	68bb      	ldr	r3, [r7, #8]
   13008:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   1300a:	68fb      	ldr	r3, [r7, #12]
   1300c:	899b      	ldrh	r3, [r3, #12]
   1300e:	b29b      	uxth	r3, r3
   13010:	3b01      	subs	r3, #1
   13012:	b29a      	uxth	r2, r3
   13014:	68fb      	ldr	r3, [r7, #12]
   13016:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   13018:	68fb      	ldr	r3, [r7, #12]
   1301a:	899b      	ldrh	r3, [r3, #12]
   1301c:	b29b      	uxth	r3, r3
   1301e:	2b00      	cmp	r3, #0
   13020:	d118      	bne.n	13054 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   13022:	68fb      	ldr	r3, [r7, #12]
   13024:	2220      	movs	r2, #32
   13026:	2100      	movs	r1, #0
   13028:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   1302a:	68bb      	ldr	r3, [r7, #8]
   1302c:	2202      	movs	r2, #2
   1302e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   13030:	68bb      	ldr	r3, [r7, #8]
   13032:	2202      	movs	r2, #2
   13034:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   13036:	2019      	movs	r0, #25
   13038:	4b0f      	ldr	r3, [pc, #60]	; (13078 <_dac_interrupt_handler+0xf4>)
   1303a:	4798      	blx	r3

				if ((module->callback) &&
   1303c:	68fb      	ldr	r3, [r7, #12]
   1303e:	3314      	adds	r3, #20
   13040:	2b00      	cmp	r3, #0
   13042:	d007      	beq.n	13054 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   13044:	68fb      	ldr	r3, [r7, #12]
   13046:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   13048:	2b00      	cmp	r3, #0
   1304a:	d003      	beq.n	13054 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   1304c:	68fb      	ldr	r3, [r7, #12]
   1304e:	69db      	ldr	r3, [r3, #28]
   13050:	2000      	movs	r0, #0
   13052:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   13054:	68fb      	ldr	r3, [r7, #12]
   13056:	3314      	adds	r3, #20
   13058:	2b00      	cmp	r3, #0
   1305a:	d007      	beq.n	1306c <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   1305c:	68fb      	ldr	r3, [r7, #12]
   1305e:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   13060:	2b00      	cmp	r3, #0
   13062:	d003      	beq.n	1306c <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   13064:	68fb      	ldr	r3, [r7, #12]
   13066:	695b      	ldr	r3, [r3, #20]
   13068:	2000      	movs	r0, #0
   1306a:	4798      	blx	r3
		}
	}
}
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	46bd      	mov	sp, r7
   13070:	b004      	add	sp, #16
   13072:	bd80      	pop	{r7, pc}
   13074:	200043bc 	.word	0x200043bc
   13078:	00012f55 	.word	0x00012f55

0001307c <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   1307c:	b580      	push	{r7, lr}
   1307e:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   13080:	2000      	movs	r0, #0
   13082:	4b02      	ldr	r3, [pc, #8]	; (1308c <DAC_Handler+0x10>)
   13084:	4798      	blx	r3
}
   13086:	46c0      	nop			; (mov r8, r8)
   13088:	46bd      	mov	sp, r7
   1308a:	bd80      	pop	{r7, pc}
   1308c:	00012f85 	.word	0x00012f85

00013090 <system_interrupt_enter_critical_section>:
{
   13090:	b580      	push	{r7, lr}
   13092:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   13094:	4b02      	ldr	r3, [pc, #8]	; (130a0 <system_interrupt_enter_critical_section+0x10>)
   13096:	4798      	blx	r3
}
   13098:	46c0      	nop			; (mov r8, r8)
   1309a:	46bd      	mov	sp, r7
   1309c:	bd80      	pop	{r7, pc}
   1309e:	46c0      	nop			; (mov r8, r8)
   130a0:	00026d19 	.word	0x00026d19

000130a4 <system_interrupt_leave_critical_section>:
{
   130a4:	b580      	push	{r7, lr}
   130a6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   130a8:	4b02      	ldr	r3, [pc, #8]	; (130b4 <system_interrupt_leave_critical_section+0x10>)
   130aa:	4798      	blx	r3
}
   130ac:	46c0      	nop			; (mov r8, r8)
   130ae:	46bd      	mov	sp, r7
   130b0:	bd80      	pop	{r7, pc}
   130b2:	46c0      	nop			; (mov r8, r8)
   130b4:	00026d6d 	.word	0x00026d6d

000130b8 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   130b8:	b580      	push	{r7, lr}
   130ba:	b086      	sub	sp, #24
   130bc:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   130be:	4b49      	ldr	r3, [pc, #292]	; (131e4 <DMAC_Handler+0x12c>)
   130c0:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   130c2:	4b49      	ldr	r3, [pc, #292]	; (131e8 <DMAC_Handler+0x130>)
   130c4:	8c1b      	ldrh	r3, [r3, #32]
   130c6:	b29b      	uxth	r3, r3
   130c8:	b2da      	uxtb	r2, r3
   130ca:	2317      	movs	r3, #23
   130cc:	18fb      	adds	r3, r7, r3
   130ce:	210f      	movs	r1, #15
   130d0:	400a      	ands	r2, r1
   130d2:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   130d4:	2317      	movs	r3, #23
   130d6:	18fb      	adds	r3, r7, r3
   130d8:	781a      	ldrb	r2, [r3, #0]
   130da:	4b44      	ldr	r3, [pc, #272]	; (131ec <DMAC_Handler+0x134>)
   130dc:	0092      	lsls	r2, r2, #2
   130de:	58d3      	ldr	r3, [r2, r3]
   130e0:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   130e2:	4a41      	ldr	r2, [pc, #260]	; (131e8 <DMAC_Handler+0x130>)
   130e4:	693b      	ldr	r3, [r7, #16]
   130e6:	781b      	ldrb	r3, [r3, #0]
   130e8:	210f      	movs	r1, #15
   130ea:	400b      	ands	r3, r1
   130ec:	b2d9      	uxtb	r1, r3
   130ee:	233f      	movs	r3, #63	; 0x3f
   130f0:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   130f2:	493d      	ldr	r1, [pc, #244]	; (131e8 <DMAC_Handler+0x130>)
   130f4:	230f      	movs	r3, #15
   130f6:	18fb      	adds	r3, r7, r3
   130f8:	224e      	movs	r2, #78	; 0x4e
   130fa:	5c8a      	ldrb	r2, [r1, r2]
   130fc:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   130fe:	693b      	ldr	r3, [r7, #16]
   13100:	781b      	ldrb	r3, [r3, #0]
   13102:	4a3b      	ldr	r2, [pc, #236]	; (131f0 <DMAC_Handler+0x138>)
   13104:	011b      	lsls	r3, r3, #4
   13106:	18d3      	adds	r3, r2, r3
   13108:	3302      	adds	r3, #2
   1310a:	881b      	ldrh	r3, [r3, #0]
   1310c:	b29b      	uxth	r3, r3
   1310e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   13110:	693b      	ldr	r3, [r7, #16]
   13112:	781b      	ldrb	r3, [r3, #0]
   13114:	4a37      	ldr	r2, [pc, #220]	; (131f4 <DMAC_Handler+0x13c>)
   13116:	011b      	lsls	r3, r3, #4
   13118:	18d3      	adds	r3, r2, r3
   1311a:	3302      	adds	r3, #2
   1311c:	881b      	ldrh	r3, [r3, #0]
   1311e:	b29b      	uxth	r3, r3
   13120:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   13122:	68ba      	ldr	r2, [r7, #8]
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	1ad2      	subs	r2, r2, r3
   13128:	693b      	ldr	r3, [r7, #16]
   1312a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1312c:	230f      	movs	r3, #15
   1312e:	18fb      	adds	r3, r7, r3
   13130:	781b      	ldrb	r3, [r3, #0]
   13132:	2201      	movs	r2, #1
   13134:	4013      	ands	r3, r2
   13136:	d016      	beq.n	13166 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   13138:	4a2b      	ldr	r2, [pc, #172]	; (131e8 <DMAC_Handler+0x130>)
   1313a:	234e      	movs	r3, #78	; 0x4e
   1313c:	2101      	movs	r1, #1
   1313e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   13140:	693b      	ldr	r3, [r7, #16]
   13142:	2210      	movs	r2, #16
   13144:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   13146:	693b      	ldr	r3, [r7, #16]
   13148:	7c1b      	ldrb	r3, [r3, #16]
   1314a:	001a      	movs	r2, r3
   1314c:	2301      	movs	r3, #1
   1314e:	4013      	ands	r3, r2
   13150:	d042      	beq.n	131d8 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   13152:	693b      	ldr	r3, [r7, #16]
   13154:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   13156:	2b00      	cmp	r3, #0
   13158:	d03e      	beq.n	131d8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   1315a:	693b      	ldr	r3, [r7, #16]
   1315c:	685b      	ldr	r3, [r3, #4]
   1315e:	693a      	ldr	r2, [r7, #16]
   13160:	0010      	movs	r0, r2
   13162:	4798      	blx	r3
   13164:	e038      	b.n	131d8 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   13166:	230f      	movs	r3, #15
   13168:	18fb      	adds	r3, r7, r3
   1316a:	781b      	ldrb	r3, [r3, #0]
   1316c:	2202      	movs	r2, #2
   1316e:	4013      	ands	r3, r2
   13170:	d016      	beq.n	131a0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   13172:	4a1d      	ldr	r2, [pc, #116]	; (131e8 <DMAC_Handler+0x130>)
   13174:	234e      	movs	r3, #78	; 0x4e
   13176:	2102      	movs	r1, #2
   13178:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   1317a:	693b      	ldr	r3, [r7, #16]
   1317c:	2200      	movs	r2, #0
   1317e:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   13180:	693b      	ldr	r3, [r7, #16]
   13182:	7c1b      	ldrb	r3, [r3, #16]
   13184:	001a      	movs	r2, r3
   13186:	2302      	movs	r3, #2
   13188:	4013      	ands	r3, r2
   1318a:	d025      	beq.n	131d8 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   1318c:	693b      	ldr	r3, [r7, #16]
   1318e:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   13190:	2b00      	cmp	r3, #0
   13192:	d021      	beq.n	131d8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   13194:	693b      	ldr	r3, [r7, #16]
   13196:	689b      	ldr	r3, [r3, #8]
   13198:	693a      	ldr	r2, [r7, #16]
   1319a:	0010      	movs	r0, r2
   1319c:	4798      	blx	r3
   1319e:	e01b      	b.n	131d8 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   131a0:	230f      	movs	r3, #15
   131a2:	18fb      	adds	r3, r7, r3
   131a4:	781b      	ldrb	r3, [r3, #0]
   131a6:	2204      	movs	r2, #4
   131a8:	4013      	ands	r3, r2
   131aa:	d015      	beq.n	131d8 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   131ac:	4a0e      	ldr	r2, [pc, #56]	; (131e8 <DMAC_Handler+0x130>)
   131ae:	234e      	movs	r3, #78	; 0x4e
   131b0:	2104      	movs	r1, #4
   131b2:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   131b4:	693b      	ldr	r3, [r7, #16]
   131b6:	2206      	movs	r2, #6
   131b8:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   131ba:	693b      	ldr	r3, [r7, #16]
   131bc:	7c1b      	ldrb	r3, [r3, #16]
   131be:	001a      	movs	r2, r3
   131c0:	2304      	movs	r3, #4
   131c2:	4013      	ands	r3, r2
   131c4:	d008      	beq.n	131d8 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   131c6:	693b      	ldr	r3, [r7, #16]
   131c8:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   131ca:	2b00      	cmp	r3, #0
   131cc:	d004      	beq.n	131d8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   131ce:	693b      	ldr	r3, [r7, #16]
   131d0:	68db      	ldr	r3, [r3, #12]
   131d2:	693a      	ldr	r2, [r7, #16]
   131d4:	0010      	movs	r0, r2
   131d6:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   131d8:	4b07      	ldr	r3, [pc, #28]	; (131f8 <DMAC_Handler+0x140>)
   131da:	4798      	blx	r3
}
   131dc:	46c0      	nop			; (mov r8, r8)
   131de:	46bd      	mov	sp, r7
   131e0:	b006      	add	sp, #24
   131e2:	bd80      	pop	{r7, pc}
   131e4:	00013091 	.word	0x00013091
   131e8:	41004800 	.word	0x41004800
   131ec:	20000510 	.word	0x20000510
   131f0:	200043c0 	.word	0x200043c0
   131f4:	200004c0 	.word	0x200004c0
   131f8:	000130a5 	.word	0x000130a5

000131fc <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   131fc:	b580      	push	{r7, lr}
   131fe:	b082      	sub	sp, #8
   13200:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   13202:	4b15      	ldr	r3, [pc, #84]	; (13258 <EVSYS_Handler+0x5c>)
   13204:	691b      	ldr	r3, [r3, #16]
   13206:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   13208:	4b14      	ldr	r3, [pc, #80]	; (1325c <EVSYS_Handler+0x60>)
   1320a:	699b      	ldr	r3, [r3, #24]
   1320c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   1320e:	4b12      	ldr	r3, [pc, #72]	; (13258 <EVSYS_Handler+0x5c>)
   13210:	689a      	ldr	r2, [r3, #8]
   13212:	683b      	ldr	r3, [r7, #0]
   13214:	431a      	orrs	r2, r3
   13216:	4b10      	ldr	r3, [pc, #64]	; (13258 <EVSYS_Handler+0x5c>)
   13218:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   1321a:	4b10      	ldr	r3, [pc, #64]	; (1325c <EVSYS_Handler+0x60>)
   1321c:	4a10      	ldr	r2, [pc, #64]	; (13260 <EVSYS_Handler+0x64>)
   1321e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   13220:	e008      	b.n	13234 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   13222:	687b      	ldr	r3, [r7, #4]
   13224:	685a      	ldr	r2, [r3, #4]
   13226:	687b      	ldr	r3, [r7, #4]
   13228:	681b      	ldr	r3, [r3, #0]
   1322a:	0018      	movs	r0, r3
   1322c:	4790      	blx	r2
		current_hook = current_hook->next;
   1322e:	687b      	ldr	r3, [r7, #4]
   13230:	689b      	ldr	r3, [r3, #8]
   13232:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   13234:	687b      	ldr	r3, [r7, #4]
   13236:	2b00      	cmp	r3, #0
   13238:	d1f3      	bne.n	13222 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   1323a:	4b07      	ldr	r3, [pc, #28]	; (13258 <EVSYS_Handler+0x5c>)
   1323c:	68db      	ldr	r3, [r3, #12]
   1323e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   13240:	4b05      	ldr	r3, [pc, #20]	; (13258 <EVSYS_Handler+0x5c>)
   13242:	689b      	ldr	r3, [r3, #8]
   13244:	683a      	ldr	r2, [r7, #0]
   13246:	43d2      	mvns	r2, r2
   13248:	401a      	ands	r2, r3
   1324a:	4b03      	ldr	r3, [pc, #12]	; (13258 <EVSYS_Handler+0x5c>)
   1324c:	609a      	str	r2, [r3, #8]
}
   1324e:	46c0      	nop			; (mov r8, r8)
   13250:	46bd      	mov	sp, r7
   13252:	b002      	add	sp, #8
   13254:	bd80      	pop	{r7, pc}
   13256:	46c0      	nop			; (mov r8, r8)
   13258:	20000000 	.word	0x20000000
   1325c:	42000400 	.word	0x42000400
   13260:	0f0fffff 	.word	0x0f0fffff

00013264 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   13264:	b580      	push	{r7, lr}
   13266:	b082      	sub	sp, #8
   13268:	af00      	add	r7, sp, #0
   1326a:	0002      	movs	r2, r0
   1326c:	6039      	str	r1, [r7, #0]
   1326e:	1dfb      	adds	r3, r7, #7
   13270:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13272:	1dfb      	adds	r3, r7, #7
   13274:	781b      	ldrb	r3, [r3, #0]
   13276:	2b01      	cmp	r3, #1
   13278:	d00a      	beq.n	13290 <system_apb_clock_set_mask+0x2c>
   1327a:	2b02      	cmp	r3, #2
   1327c:	d00f      	beq.n	1329e <system_apb_clock_set_mask+0x3a>
   1327e:	2b00      	cmp	r3, #0
   13280:	d114      	bne.n	132ac <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   13282:	4b0e      	ldr	r3, [pc, #56]	; (132bc <system_apb_clock_set_mask+0x58>)
   13284:	4a0d      	ldr	r2, [pc, #52]	; (132bc <system_apb_clock_set_mask+0x58>)
   13286:	6991      	ldr	r1, [r2, #24]
   13288:	683a      	ldr	r2, [r7, #0]
   1328a:	430a      	orrs	r2, r1
   1328c:	619a      	str	r2, [r3, #24]
			break;
   1328e:	e00f      	b.n	132b0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   13290:	4b0a      	ldr	r3, [pc, #40]	; (132bc <system_apb_clock_set_mask+0x58>)
   13292:	4a0a      	ldr	r2, [pc, #40]	; (132bc <system_apb_clock_set_mask+0x58>)
   13294:	69d1      	ldr	r1, [r2, #28]
   13296:	683a      	ldr	r2, [r7, #0]
   13298:	430a      	orrs	r2, r1
   1329a:	61da      	str	r2, [r3, #28]
			break;
   1329c:	e008      	b.n	132b0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1329e:	4b07      	ldr	r3, [pc, #28]	; (132bc <system_apb_clock_set_mask+0x58>)
   132a0:	4a06      	ldr	r2, [pc, #24]	; (132bc <system_apb_clock_set_mask+0x58>)
   132a2:	6a11      	ldr	r1, [r2, #32]
   132a4:	683a      	ldr	r2, [r7, #0]
   132a6:	430a      	orrs	r2, r1
   132a8:	621a      	str	r2, [r3, #32]
			break;
   132aa:	e001      	b.n	132b0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   132ac:	2317      	movs	r3, #23
   132ae:	e000      	b.n	132b2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   132b0:	2300      	movs	r3, #0
}
   132b2:	0018      	movs	r0, r3
   132b4:	46bd      	mov	sp, r7
   132b6:	b002      	add	sp, #8
   132b8:	bd80      	pop	{r7, pc}
   132ba:	46c0      	nop			; (mov r8, r8)
   132bc:	40000400 	.word	0x40000400

000132c0 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   132c0:	b580      	push	{r7, lr}
   132c2:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   132c4:	2102      	movs	r1, #2
   132c6:	2002      	movs	r0, #2
   132c8:	4b07      	ldr	r3, [pc, #28]	; (132e8 <_system_events_init+0x28>)
   132ca:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   132cc:	4b07      	ldr	r3, [pc, #28]	; (132ec <_system_events_init+0x2c>)
   132ce:	2201      	movs	r2, #1
   132d0:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   132d2:	46c0      	nop			; (mov r8, r8)
   132d4:	4b05      	ldr	r3, [pc, #20]	; (132ec <_system_events_init+0x2c>)
   132d6:	781b      	ldrb	r3, [r3, #0]
   132d8:	b2db      	uxtb	r3, r3
   132da:	001a      	movs	r2, r3
   132dc:	2301      	movs	r3, #1
   132de:	4013      	ands	r3, r2
   132e0:	d1f8      	bne.n	132d4 <_system_events_init+0x14>
	}
}
   132e2:	46c0      	nop			; (mov r8, r8)
   132e4:	46bd      	mov	sp, r7
   132e6:	bd80      	pop	{r7, pc}
   132e8:	00013265 	.word	0x00013265
   132ec:	42000400 	.word	0x42000400

000132f0 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   132f0:	b580      	push	{r7, lr}
   132f2:	b084      	sub	sp, #16
   132f4:	af00      	add	r7, sp, #0
   132f6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   132f8:	687b      	ldr	r3, [r7, #4]
   132fa:	681b      	ldr	r3, [r3, #0]
   132fc:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   132fe:	68fb      	ldr	r3, [r7, #12]
   13300:	69db      	ldr	r3, [r3, #28]
   13302:	2207      	movs	r2, #7
   13304:	4013      	ands	r3, r2
   13306:	1e5a      	subs	r2, r3, #1
   13308:	4193      	sbcs	r3, r2
   1330a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1330c:	0018      	movs	r0, r3
   1330e:	46bd      	mov	sp, r7
   13310:	b004      	add	sp, #16
   13312:	bd80      	pop	{r7, pc}

00013314 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13314:	b580      	push	{r7, lr}
   13316:	b082      	sub	sp, #8
   13318:	af00      	add	r7, sp, #0
   1331a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1331c:	46c0      	nop			; (mov r8, r8)
   1331e:	687b      	ldr	r3, [r7, #4]
   13320:	0018      	movs	r0, r3
   13322:	4b04      	ldr	r3, [pc, #16]	; (13334 <_i2c_master_wait_for_sync+0x20>)
   13324:	4798      	blx	r3
   13326:	1e03      	subs	r3, r0, #0
   13328:	d1f9      	bne.n	1331e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1332a:	46c0      	nop			; (mov r8, r8)
   1332c:	46bd      	mov	sp, r7
   1332e:	b002      	add	sp, #8
   13330:	bd80      	pop	{r7, pc}
   13332:	46c0      	nop			; (mov r8, r8)
   13334:	000132f1 	.word	0x000132f1

00013338 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13338:	b580      	push	{r7, lr}
   1333a:	b084      	sub	sp, #16
   1333c:	af00      	add	r7, sp, #0
   1333e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13340:	687b      	ldr	r3, [r7, #4]
   13342:	681b      	ldr	r3, [r3, #0]
   13344:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13346:	68fb      	ldr	r3, [r7, #12]
   13348:	681b      	ldr	r3, [r3, #0]
   1334a:	011b      	lsls	r3, r3, #4
   1334c:	0fdb      	lsrs	r3, r3, #31
   1334e:	b2db      	uxtb	r3, r3
   13350:	001a      	movs	r2, r3
   13352:	230b      	movs	r3, #11
   13354:	18fb      	adds	r3, r7, r3
   13356:	1e51      	subs	r1, r2, #1
   13358:	418a      	sbcs	r2, r1
   1335a:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   1335c:	2308      	movs	r3, #8
   1335e:	18fb      	adds	r3, r7, r3
   13360:	687a      	ldr	r2, [r7, #4]
   13362:	8b52      	ldrh	r2, [r2, #26]
   13364:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   13366:	687b      	ldr	r3, [r7, #4]
   13368:	8b9b      	ldrh	r3, [r3, #28]
   1336a:	b29a      	uxth	r2, r3
   1336c:	2308      	movs	r3, #8
   1336e:	18fb      	adds	r3, r7, r3
   13370:	2108      	movs	r1, #8
   13372:	1879      	adds	r1, r7, r1
   13374:	8809      	ldrh	r1, [r1, #0]
   13376:	1a8a      	subs	r2, r1, r2
   13378:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   1337a:	687b      	ldr	r3, [r7, #4]
   1337c:	8b9b      	ldrh	r3, [r3, #28]
   1337e:	b29b      	uxth	r3, r3
   13380:	3b01      	subs	r3, #1
   13382:	b29a      	uxth	r2, r3
   13384:	687b      	ldr	r3, [r7, #4]
   13386:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   13388:	230b      	movs	r3, #11
   1338a:	18fb      	adds	r3, r7, r3
   1338c:	781b      	ldrb	r3, [r3, #0]
   1338e:	2b00      	cmp	r3, #0
   13390:	d010      	beq.n	133b4 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   13392:	687b      	ldr	r3, [r7, #4]
   13394:	7adb      	ldrb	r3, [r3, #11]
   13396:	2b00      	cmp	r3, #0
   13398:	d01c      	beq.n	133d4 <_i2c_master_read+0x9c>
   1339a:	687b      	ldr	r3, [r7, #4]
   1339c:	8b9b      	ldrh	r3, [r3, #28]
   1339e:	b29b      	uxth	r3, r3
   133a0:	2b01      	cmp	r3, #1
   133a2:	d117      	bne.n	133d4 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   133a4:	68fb      	ldr	r3, [r7, #12]
   133a6:	685b      	ldr	r3, [r3, #4]
   133a8:	2280      	movs	r2, #128	; 0x80
   133aa:	02d2      	lsls	r2, r2, #11
   133ac:	431a      	orrs	r2, r3
   133ae:	68fb      	ldr	r3, [r7, #12]
   133b0:	605a      	str	r2, [r3, #4]
   133b2:	e00f      	b.n	133d4 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   133b4:	687b      	ldr	r3, [r7, #4]
   133b6:	7adb      	ldrb	r3, [r3, #11]
   133b8:	2b00      	cmp	r3, #0
   133ba:	d00b      	beq.n	133d4 <_i2c_master_read+0x9c>
   133bc:	687b      	ldr	r3, [r7, #4]
   133be:	8b9b      	ldrh	r3, [r3, #28]
   133c0:	b29b      	uxth	r3, r3
   133c2:	2b00      	cmp	r3, #0
   133c4:	d106      	bne.n	133d4 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   133c6:	68fb      	ldr	r3, [r7, #12]
   133c8:	685b      	ldr	r3, [r3, #4]
   133ca:	2280      	movs	r2, #128	; 0x80
   133cc:	02d2      	lsls	r2, r2, #11
   133ce:	431a      	orrs	r2, r3
   133d0:	68fb      	ldr	r3, [r7, #12]
   133d2:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   133d4:	687b      	ldr	r3, [r7, #4]
   133d6:	8b9b      	ldrh	r3, [r3, #28]
   133d8:	b29b      	uxth	r3, r3
   133da:	2b00      	cmp	r3, #0
   133dc:	d10e      	bne.n	133fc <_i2c_master_read+0xc4>
		if (module->send_stop) {
   133de:	687b      	ldr	r3, [r7, #4]
   133e0:	7a9b      	ldrb	r3, [r3, #10]
   133e2:	2b00      	cmp	r3, #0
   133e4:	d00a      	beq.n	133fc <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   133e6:	687b      	ldr	r3, [r7, #4]
   133e8:	0018      	movs	r0, r3
   133ea:	4b0e      	ldr	r3, [pc, #56]	; (13424 <_i2c_master_read+0xec>)
   133ec:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   133ee:	68fb      	ldr	r3, [r7, #12]
   133f0:	685b      	ldr	r3, [r3, #4]
   133f2:	22c0      	movs	r2, #192	; 0xc0
   133f4:	0292      	lsls	r2, r2, #10
   133f6:	431a      	orrs	r2, r3
   133f8:	68fb      	ldr	r3, [r7, #12]
   133fa:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   133fc:	687b      	ldr	r3, [r7, #4]
   133fe:	0018      	movs	r0, r3
   13400:	4b08      	ldr	r3, [pc, #32]	; (13424 <_i2c_master_read+0xec>)
   13402:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13404:	687b      	ldr	r3, [r7, #4]
   13406:	6a1a      	ldr	r2, [r3, #32]
   13408:	2308      	movs	r3, #8
   1340a:	18fb      	adds	r3, r7, r3
   1340c:	881b      	ldrh	r3, [r3, #0]
   1340e:	18d3      	adds	r3, r2, r3
   13410:	68fa      	ldr	r2, [r7, #12]
   13412:	2128      	movs	r1, #40	; 0x28
   13414:	5c52      	ldrb	r2, [r2, r1]
   13416:	b2d2      	uxtb	r2, r2
   13418:	701a      	strb	r2, [r3, #0]
}
   1341a:	46c0      	nop			; (mov r8, r8)
   1341c:	46bd      	mov	sp, r7
   1341e:	b004      	add	sp, #16
   13420:	bd80      	pop	{r7, pc}
   13422:	46c0      	nop			; (mov r8, r8)
   13424:	00013315 	.word	0x00013315

00013428 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13428:	b580      	push	{r7, lr}
   1342a:	b084      	sub	sp, #16
   1342c:	af00      	add	r7, sp, #0
   1342e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13430:	687b      	ldr	r3, [r7, #4]
   13432:	681b      	ldr	r3, [r3, #0]
   13434:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13436:	68fb      	ldr	r3, [r7, #12]
   13438:	8b5b      	ldrh	r3, [r3, #26]
   1343a:	b29b      	uxth	r3, r3
   1343c:	001a      	movs	r2, r3
   1343e:	2304      	movs	r3, #4
   13440:	4013      	ands	r3, r2
   13442:	d004      	beq.n	1344e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13444:	687b      	ldr	r3, [r7, #4]
   13446:	2225      	movs	r2, #37	; 0x25
   13448:	211e      	movs	r1, #30
   1344a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1344c:	e024      	b.n	13498 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1344e:	230a      	movs	r3, #10
   13450:	18fb      	adds	r3, r7, r3
   13452:	687a      	ldr	r2, [r7, #4]
   13454:	8b52      	ldrh	r2, [r2, #26]
   13456:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   13458:	687b      	ldr	r3, [r7, #4]
   1345a:	8b9b      	ldrh	r3, [r3, #28]
   1345c:	b29a      	uxth	r2, r3
   1345e:	230a      	movs	r3, #10
   13460:	18fb      	adds	r3, r7, r3
   13462:	210a      	movs	r1, #10
   13464:	1879      	adds	r1, r7, r1
   13466:	8809      	ldrh	r1, [r1, #0]
   13468:	1a8a      	subs	r2, r1, r2
   1346a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   1346c:	687b      	ldr	r3, [r7, #4]
   1346e:	8b9b      	ldrh	r3, [r3, #28]
   13470:	b29b      	uxth	r3, r3
   13472:	3b01      	subs	r3, #1
   13474:	b29a      	uxth	r2, r3
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   1347a:	687b      	ldr	r3, [r7, #4]
   1347c:	0018      	movs	r0, r3
   1347e:	4b08      	ldr	r3, [pc, #32]	; (134a0 <_i2c_master_write+0x78>)
   13480:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   13482:	687b      	ldr	r3, [r7, #4]
   13484:	6a1a      	ldr	r2, [r3, #32]
   13486:	230a      	movs	r3, #10
   13488:	18fb      	adds	r3, r7, r3
   1348a:	881b      	ldrh	r3, [r3, #0]
   1348c:	18d3      	adds	r3, r2, r3
   1348e:	781b      	ldrb	r3, [r3, #0]
   13490:	b2d9      	uxtb	r1, r3
   13492:	68fb      	ldr	r3, [r7, #12]
   13494:	2228      	movs	r2, #40	; 0x28
   13496:	5499      	strb	r1, [r3, r2]
}
   13498:	46bd      	mov	sp, r7
   1349a:	b004      	add	sp, #16
   1349c:	bd80      	pop	{r7, pc}
   1349e:	46c0      	nop			; (mov r8, r8)
   134a0:	00013315 	.word	0x00013315

000134a4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   134a4:	b580      	push	{r7, lr}
   134a6:	b084      	sub	sp, #16
   134a8:	af00      	add	r7, sp, #0
   134aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	681b      	ldr	r3, [r3, #0]
   134b0:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   134b2:	68fb      	ldr	r3, [r7, #12]
   134b4:	7e1b      	ldrb	r3, [r3, #24]
   134b6:	b2db      	uxtb	r3, r3
   134b8:	001a      	movs	r2, r3
   134ba:	2301      	movs	r3, #1
   134bc:	4013      	ands	r3, r2
   134be:	d02b      	beq.n	13518 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   134c0:	68fb      	ldr	r3, [r7, #12]
   134c2:	2201      	movs	r2, #1
   134c4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   134c6:	68fb      	ldr	r3, [r7, #12]
   134c8:	8b5b      	ldrh	r3, [r3, #26]
   134ca:	b29b      	uxth	r3, r3
   134cc:	001a      	movs	r2, r3
   134ce:	2302      	movs	r3, #2
   134d0:	4013      	ands	r3, r2
   134d2:	d004      	beq.n	134de <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   134d4:	687b      	ldr	r3, [r7, #4]
   134d6:	2225      	movs	r2, #37	; 0x25
   134d8:	2141      	movs	r1, #65	; 0x41
   134da:	5499      	strb	r1, [r3, r2]
   134dc:	e01c      	b.n	13518 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   134de:	68fb      	ldr	r3, [r7, #12]
   134e0:	8b5b      	ldrh	r3, [r3, #26]
   134e2:	b29b      	uxth	r3, r3
   134e4:	001a      	movs	r2, r3
   134e6:	2304      	movs	r3, #4
   134e8:	4013      	ands	r3, r2
   134ea:	d015      	beq.n	13518 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   134ec:	687b      	ldr	r3, [r7, #4]
   134ee:	2225      	movs	r2, #37	; 0x25
   134f0:	2118      	movs	r1, #24
   134f2:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   134f4:	687b      	ldr	r3, [r7, #4]
   134f6:	2200      	movs	r2, #0
   134f8:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   134fa:	687b      	ldr	r3, [r7, #4]
   134fc:	7a9b      	ldrb	r3, [r3, #10]
   134fe:	2b00      	cmp	r3, #0
   13500:	d00a      	beq.n	13518 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13502:	687b      	ldr	r3, [r7, #4]
   13504:	0018      	movs	r0, r3
   13506:	4b13      	ldr	r3, [pc, #76]	; (13554 <_i2c_master_async_address_response+0xb0>)
   13508:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1350a:	68fb      	ldr	r3, [r7, #12]
   1350c:	685b      	ldr	r3, [r3, #4]
   1350e:	22c0      	movs	r2, #192	; 0xc0
   13510:	0292      	lsls	r2, r2, #10
   13512:	431a      	orrs	r2, r3
   13514:	68fb      	ldr	r3, [r7, #12]
   13516:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13518:	687b      	ldr	r3, [r7, #4]
   1351a:	8b9b      	ldrh	r3, [r3, #28]
   1351c:	b29a      	uxth	r2, r3
   1351e:	687b      	ldr	r3, [r7, #4]
   13520:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13522:	687b      	ldr	r3, [r7, #4]
   13524:	2225      	movs	r2, #37	; 0x25
   13526:	5c9b      	ldrb	r3, [r3, r2]
   13528:	b2db      	uxtb	r3, r3
   1352a:	2b05      	cmp	r3, #5
   1352c:	d10e      	bne.n	1354c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1352e:	687b      	ldr	r3, [r7, #4]
   13530:	2224      	movs	r2, #36	; 0x24
   13532:	5c9b      	ldrb	r3, [r3, r2]
   13534:	b2db      	uxtb	r3, r3
   13536:	2b00      	cmp	r3, #0
   13538:	d104      	bne.n	13544 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1353a:	687b      	ldr	r3, [r7, #4]
   1353c:	0018      	movs	r0, r3
   1353e:	4b06      	ldr	r3, [pc, #24]	; (13558 <_i2c_master_async_address_response+0xb4>)
   13540:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13542:	e003      	b.n	1354c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13544:	687b      	ldr	r3, [r7, #4]
   13546:	0018      	movs	r0, r3
   13548:	4b04      	ldr	r3, [pc, #16]	; (1355c <_i2c_master_async_address_response+0xb8>)
   1354a:	4798      	blx	r3
}
   1354c:	46c0      	nop			; (mov r8, r8)
   1354e:	46bd      	mov	sp, r7
   13550:	b004      	add	sp, #16
   13552:	bd80      	pop	{r7, pc}
   13554:	00013315 	.word	0x00013315
   13558:	00013429 	.word	0x00013429
   1355c:	00013339 	.word	0x00013339

00013560 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   13560:	b580      	push	{r7, lr}
   13562:	b084      	sub	sp, #16
   13564:	af00      	add	r7, sp, #0
   13566:	60f8      	str	r0, [r7, #12]
   13568:	60b9      	str	r1, [r7, #8]
   1356a:	1dfb      	adds	r3, r7, #7
   1356c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   1356e:	1dfb      	adds	r3, r7, #7
   13570:	781b      	ldrb	r3, [r3, #0]
   13572:	68fa      	ldr	r2, [r7, #12]
   13574:	3302      	adds	r3, #2
   13576:	009b      	lsls	r3, r3, #2
   13578:	18d3      	adds	r3, r2, r3
   1357a:	3304      	adds	r3, #4
   1357c:	68ba      	ldr	r2, [r7, #8]
   1357e:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   13580:	68fb      	ldr	r3, [r7, #12]
   13582:	7e1b      	ldrb	r3, [r3, #24]
   13584:	b2db      	uxtb	r3, r3
   13586:	b25a      	sxtb	r2, r3
   13588:	1dfb      	adds	r3, r7, #7
   1358a:	781b      	ldrb	r3, [r3, #0]
   1358c:	2101      	movs	r1, #1
   1358e:	4099      	lsls	r1, r3
   13590:	000b      	movs	r3, r1
   13592:	b25b      	sxtb	r3, r3
   13594:	4313      	orrs	r3, r2
   13596:	b25b      	sxtb	r3, r3
   13598:	b2da      	uxtb	r2, r3
   1359a:	68fb      	ldr	r3, [r7, #12]
   1359c:	761a      	strb	r2, [r3, #24]
}
   1359e:	46c0      	nop			; (mov r8, r8)
   135a0:	46bd      	mov	sp, r7
   135a2:	b004      	add	sp, #16
   135a4:	bd80      	pop	{r7, pc}
	...

000135a8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   135a8:	b590      	push	{r4, r7, lr}
   135aa:	b087      	sub	sp, #28
   135ac:	af00      	add	r7, sp, #0
   135ae:	6078      	str	r0, [r7, #4]
   135b0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   135b2:	687b      	ldr	r3, [r7, #4]
   135b4:	681b      	ldr	r3, [r3, #0]
   135b6:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   135b8:	683b      	ldr	r3, [r7, #0]
   135ba:	685a      	ldr	r2, [r3, #4]
   135bc:	687b      	ldr	r3, [r7, #4]
   135be:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   135c0:	683b      	ldr	r3, [r7, #0]
   135c2:	885a      	ldrh	r2, [r3, #2]
   135c4:	687b      	ldr	r3, [r7, #4]
   135c6:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   135c8:	687b      	ldr	r3, [r7, #4]
   135ca:	2224      	movs	r2, #36	; 0x24
   135cc:	2101      	movs	r1, #1
   135ce:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   135d0:	687b      	ldr	r3, [r7, #4]
   135d2:	2225      	movs	r2, #37	; 0x25
   135d4:	2105      	movs	r1, #5
   135d6:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   135d8:	693b      	ldr	r3, [r7, #16]
   135da:	681b      	ldr	r3, [r3, #0]
   135dc:	011b      	lsls	r3, r3, #4
   135de:	0fdb      	lsrs	r3, r3, #31
   135e0:	b2db      	uxtb	r3, r3
   135e2:	001a      	movs	r2, r3
   135e4:	230f      	movs	r3, #15
   135e6:	18fb      	adds	r3, r7, r3
   135e8:	1e51      	subs	r1, r2, #1
   135ea:	418a      	sbcs	r2, r1
   135ec:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   135ee:	683b      	ldr	r3, [r7, #0]
   135f0:	7a5b      	ldrb	r3, [r3, #9]
   135f2:	2b00      	cmp	r3, #0
   135f4:	d006      	beq.n	13604 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   135f6:	683b      	ldr	r3, [r7, #0]
   135f8:	7a9a      	ldrb	r2, [r3, #10]
   135fa:	687b      	ldr	r3, [r7, #4]
   135fc:	0011      	movs	r1, r2
   135fe:	0018      	movs	r0, r3
   13600:	4b3b      	ldr	r3, [pc, #236]	; (136f0 <_i2c_master_read_packet+0x148>)
   13602:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13604:	230f      	movs	r3, #15
   13606:	18fb      	adds	r3, r7, r3
   13608:	781b      	ldrb	r3, [r3, #0]
   1360a:	2b00      	cmp	r3, #0
   1360c:	d00b      	beq.n	13626 <_i2c_master_read_packet+0x7e>
   1360e:	683b      	ldr	r3, [r7, #0]
   13610:	885b      	ldrh	r3, [r3, #2]
   13612:	2b01      	cmp	r3, #1
   13614:	d107      	bne.n	13626 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13616:	693b      	ldr	r3, [r7, #16]
   13618:	685b      	ldr	r3, [r3, #4]
   1361a:	2280      	movs	r2, #128	; 0x80
   1361c:	02d2      	lsls	r2, r2, #11
   1361e:	431a      	orrs	r2, r3
   13620:	693b      	ldr	r3, [r7, #16]
   13622:	605a      	str	r2, [r3, #4]
   13624:	e005      	b.n	13632 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13626:	693b      	ldr	r3, [r7, #16]
   13628:	685b      	ldr	r3, [r3, #4]
   1362a:	4a32      	ldr	r2, [pc, #200]	; (136f4 <_i2c_master_read_packet+0x14c>)
   1362c:	401a      	ands	r2, r3
   1362e:	693b      	ldr	r3, [r7, #16]
   13630:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13632:	683b      	ldr	r3, [r7, #0]
   13634:	7a1b      	ldrb	r3, [r3, #8]
   13636:	2b00      	cmp	r3, #0
   13638:	d045      	beq.n	136c6 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1363a:	683b      	ldr	r3, [r7, #0]
   1363c:	881b      	ldrh	r3, [r3, #0]
   1363e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13640:	683b      	ldr	r3, [r7, #0]
   13642:	7a5b      	ldrb	r3, [r3, #9]
   13644:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13646:	4313      	orrs	r3, r2
   13648:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1364a:	2380      	movs	r3, #128	; 0x80
   1364c:	021b      	lsls	r3, r3, #8
   1364e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   13650:	693b      	ldr	r3, [r7, #16]
   13652:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   13654:	2317      	movs	r3, #23
   13656:	18fc      	adds	r4, r7, r3
   13658:	687b      	ldr	r3, [r7, #4]
   1365a:	0018      	movs	r0, r3
   1365c:	4b26      	ldr	r3, [pc, #152]	; (136f8 <_i2c_master_read_packet+0x150>)
   1365e:	4798      	blx	r3
   13660:	0003      	movs	r3, r0
   13662:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13664:	693b      	ldr	r3, [r7, #16]
   13666:	685b      	ldr	r3, [r3, #4]
   13668:	4a22      	ldr	r2, [pc, #136]	; (136f4 <_i2c_master_read_packet+0x14c>)
   1366a:	401a      	ands	r2, r3
   1366c:	693b      	ldr	r3, [r7, #16]
   1366e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   13670:	2317      	movs	r3, #23
   13672:	18fb      	adds	r3, r7, r3
   13674:	781b      	ldrb	r3, [r3, #0]
   13676:	2b00      	cmp	r3, #0
   13678:	d107      	bne.n	1368a <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   1367a:	2317      	movs	r3, #23
   1367c:	18fc      	adds	r4, r7, r3
   1367e:	687b      	ldr	r3, [r7, #4]
   13680:	0018      	movs	r0, r3
   13682:	4b1e      	ldr	r3, [pc, #120]	; (136fc <_i2c_master_read_packet+0x154>)
   13684:	4798      	blx	r3
   13686:	0003      	movs	r3, r0
   13688:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   1368a:	2317      	movs	r3, #23
   1368c:	18fb      	adds	r3, r7, r3
   1368e:	781b      	ldrb	r3, [r3, #0]
   13690:	2b00      	cmp	r3, #0
   13692:	d114      	bne.n	136be <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   13694:	693b      	ldr	r3, [r7, #16]
   13696:	2203      	movs	r2, #3
   13698:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   1369a:	683b      	ldr	r3, [r7, #0]
   1369c:	881b      	ldrh	r3, [r3, #0]
   1369e:	0a1b      	lsrs	r3, r3, #8
   136a0:	b29b      	uxth	r3, r3
   136a2:	2278      	movs	r2, #120	; 0x78
   136a4:	4313      	orrs	r3, r2
   136a6:	b29b      	uxth	r3, r3
   136a8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   136aa:	683b      	ldr	r3, [r7, #0]
   136ac:	7a5b      	ldrb	r3, [r3, #9]
   136ae:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   136b0:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   136b2:	2201      	movs	r2, #1
   136b4:	4313      	orrs	r3, r2
   136b6:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   136b8:	693b      	ldr	r3, [r7, #16]
   136ba:	625a      	str	r2, [r3, #36]	; 0x24
   136bc:	e012      	b.n	136e4 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   136be:	2317      	movs	r3, #23
   136c0:	18fb      	adds	r3, r7, r3
   136c2:	781b      	ldrb	r3, [r3, #0]
   136c4:	e00f      	b.n	136e6 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   136c6:	693b      	ldr	r3, [r7, #16]
   136c8:	2203      	movs	r2, #3
   136ca:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   136cc:	683b      	ldr	r3, [r7, #0]
   136ce:	881b      	ldrh	r3, [r3, #0]
   136d0:	005b      	lsls	r3, r3, #1
   136d2:	2201      	movs	r2, #1
   136d4:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   136d6:	683b      	ldr	r3, [r7, #0]
   136d8:	7a5b      	ldrb	r3, [r3, #9]
   136da:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   136dc:	4313      	orrs	r3, r2
   136de:	001a      	movs	r2, r3
   136e0:	693b      	ldr	r3, [r7, #16]
   136e2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   136e4:	2300      	movs	r3, #0
}
   136e6:	0018      	movs	r0, r3
   136e8:	46bd      	mov	sp, r7
   136ea:	b007      	add	sp, #28
   136ec:	bd90      	pop	{r4, r7, pc}
   136ee:	46c0      	nop			; (mov r8, r8)
   136f0:	00018865 	.word	0x00018865
   136f4:	fffbffff 	.word	0xfffbffff
   136f8:	00018807 	.word	0x00018807
   136fc:	000187a9 	.word	0x000187a9

00013700 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13700:	b580      	push	{r7, lr}
   13702:	b082      	sub	sp, #8
   13704:	af00      	add	r7, sp, #0
   13706:	6078      	str	r0, [r7, #4]
   13708:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1370a:	687b      	ldr	r3, [r7, #4]
   1370c:	8b9b      	ldrh	r3, [r3, #28]
   1370e:	b29b      	uxth	r3, r3
   13710:	2b00      	cmp	r3, #0
   13712:	d001      	beq.n	13718 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13714:	2305      	movs	r3, #5
   13716:	e00c      	b.n	13732 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13718:	687b      	ldr	r3, [r7, #4]
   1371a:	2201      	movs	r2, #1
   1371c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1371e:	687b      	ldr	r3, [r7, #4]
   13720:	2201      	movs	r2, #1
   13722:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13724:	683a      	ldr	r2, [r7, #0]
   13726:	687b      	ldr	r3, [r7, #4]
   13728:	0011      	movs	r1, r2
   1372a:	0018      	movs	r0, r3
   1372c:	4b03      	ldr	r3, [pc, #12]	; (1373c <i2c_master_read_packet_job+0x3c>)
   1372e:	4798      	blx	r3
   13730:	0003      	movs	r3, r0
}
   13732:	0018      	movs	r0, r3
   13734:	46bd      	mov	sp, r7
   13736:	b002      	add	sp, #8
   13738:	bd80      	pop	{r7, pc}
   1373a:	46c0      	nop			; (mov r8, r8)
   1373c:	000135a9 	.word	0x000135a9

00013740 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13740:	b580      	push	{r7, lr}
   13742:	b084      	sub	sp, #16
   13744:	af00      	add	r7, sp, #0
   13746:	6078      	str	r0, [r7, #4]
   13748:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1374a:	687b      	ldr	r3, [r7, #4]
   1374c:	681b      	ldr	r3, [r3, #0]
   1374e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   13750:	683b      	ldr	r3, [r7, #0]
   13752:	7a5b      	ldrb	r3, [r3, #9]
   13754:	2b00      	cmp	r3, #0
   13756:	d006      	beq.n	13766 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13758:	683b      	ldr	r3, [r7, #0]
   1375a:	7a9a      	ldrb	r2, [r3, #10]
   1375c:	687b      	ldr	r3, [r7, #4]
   1375e:	0011      	movs	r1, r2
   13760:	0018      	movs	r0, r3
   13762:	4b1e      	ldr	r3, [pc, #120]	; (137dc <_i2c_master_write_packet+0x9c>)
   13764:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13766:	68fb      	ldr	r3, [r7, #12]
   13768:	685b      	ldr	r3, [r3, #4]
   1376a:	4a1d      	ldr	r2, [pc, #116]	; (137e0 <_i2c_master_write_packet+0xa0>)
   1376c:	401a      	ands	r2, r3
   1376e:	68fb      	ldr	r3, [r7, #12]
   13770:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   13772:	683b      	ldr	r3, [r7, #0]
   13774:	685a      	ldr	r2, [r3, #4]
   13776:	687b      	ldr	r3, [r7, #4]
   13778:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   1377a:	683b      	ldr	r3, [r7, #0]
   1377c:	885a      	ldrh	r2, [r3, #2]
   1377e:	687b      	ldr	r3, [r7, #4]
   13780:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   13782:	687b      	ldr	r3, [r7, #4]
   13784:	2224      	movs	r2, #36	; 0x24
   13786:	2100      	movs	r1, #0
   13788:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   1378a:	687b      	ldr	r3, [r7, #4]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	2105      	movs	r1, #5
   13790:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   13792:	68fb      	ldr	r3, [r7, #12]
   13794:	2203      	movs	r2, #3
   13796:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   13798:	683b      	ldr	r3, [r7, #0]
   1379a:	7a1b      	ldrb	r3, [r3, #8]
   1379c:	2b00      	cmp	r3, #0
   1379e:	d00d      	beq.n	137bc <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137a0:	683b      	ldr	r3, [r7, #0]
   137a2:	881b      	ldrh	r3, [r3, #0]
   137a4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   137a6:	683b      	ldr	r3, [r7, #0]
   137a8:	7a5b      	ldrb	r3, [r3, #9]
   137aa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137ac:	4313      	orrs	r3, r2
   137ae:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   137b0:	2380      	movs	r3, #128	; 0x80
   137b2:	021b      	lsls	r3, r3, #8
   137b4:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137b6:	68fb      	ldr	r3, [r7, #12]
   137b8:	625a      	str	r2, [r3, #36]	; 0x24
   137ba:	e009      	b.n	137d0 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137bc:	683b      	ldr	r3, [r7, #0]
   137be:	881b      	ldrh	r3, [r3, #0]
   137c0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   137c2:	683b      	ldr	r3, [r7, #0]
   137c4:	7a5b      	ldrb	r3, [r3, #9]
   137c6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137c8:	4313      	orrs	r3, r2
   137ca:	001a      	movs	r2, r3
   137cc:	68fb      	ldr	r3, [r7, #12]
   137ce:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   137d0:	2300      	movs	r3, #0
}
   137d2:	0018      	movs	r0, r3
   137d4:	46bd      	mov	sp, r7
   137d6:	b004      	add	sp, #16
   137d8:	bd80      	pop	{r7, pc}
   137da:	46c0      	nop			; (mov r8, r8)
   137dc:	00018865 	.word	0x00018865
   137e0:	fffbffff 	.word	0xfffbffff

000137e4 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   137e4:	b580      	push	{r7, lr}
   137e6:	b082      	sub	sp, #8
   137e8:	af00      	add	r7, sp, #0
   137ea:	6078      	str	r0, [r7, #4]
   137ec:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   137ee:	687b      	ldr	r3, [r7, #4]
   137f0:	8b9b      	ldrh	r3, [r3, #28]
   137f2:	b29b      	uxth	r3, r3
   137f4:	2b00      	cmp	r3, #0
   137f6:	d001      	beq.n	137fc <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   137f8:	2305      	movs	r3, #5
   137fa:	e00c      	b.n	13816 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   137fc:	687b      	ldr	r3, [r7, #4]
   137fe:	2201      	movs	r2, #1
   13800:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13802:	687b      	ldr	r3, [r7, #4]
   13804:	2201      	movs	r2, #1
   13806:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13808:	683a      	ldr	r2, [r7, #0]
   1380a:	687b      	ldr	r3, [r7, #4]
   1380c:	0011      	movs	r1, r2
   1380e:	0018      	movs	r0, r3
   13810:	4b03      	ldr	r3, [pc, #12]	; (13820 <i2c_master_write_packet_job+0x3c>)
   13812:	4798      	blx	r3
   13814:	0003      	movs	r3, r0
}
   13816:	0018      	movs	r0, r3
   13818:	46bd      	mov	sp, r7
   1381a:	b002      	add	sp, #8
   1381c:	bd80      	pop	{r7, pc}
   1381e:	46c0      	nop			; (mov r8, r8)
   13820:	00013741 	.word	0x00013741

00013824 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13824:	b580      	push	{r7, lr}
   13826:	b086      	sub	sp, #24
   13828:	af00      	add	r7, sp, #0
   1382a:	0002      	movs	r2, r0
   1382c:	1dfb      	adds	r3, r7, #7
   1382e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13830:	1dfb      	adds	r3, r7, #7
   13832:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13834:	4b93      	ldr	r3, [pc, #588]	; (13a84 <_i2c_master_interrupt_handler+0x260>)
   13836:	0092      	lsls	r2, r2, #2
   13838:	58d3      	ldr	r3, [r2, r3]
   1383a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1383c:	697b      	ldr	r3, [r7, #20]
   1383e:	681b      	ldr	r3, [r3, #0]
   13840:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13842:	693b      	ldr	r3, [r7, #16]
   13844:	681b      	ldr	r3, [r3, #0]
   13846:	011b      	lsls	r3, r3, #4
   13848:	0fdb      	lsrs	r3, r3, #31
   1384a:	b2db      	uxtb	r3, r3
   1384c:	001a      	movs	r2, r3
   1384e:	230f      	movs	r3, #15
   13850:	18fb      	adds	r3, r7, r3
   13852:	1e51      	subs	r1, r2, #1
   13854:	418a      	sbcs	r2, r1
   13856:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   13858:	230e      	movs	r3, #14
   1385a:	18fb      	adds	r3, r7, r3
   1385c:	697a      	ldr	r2, [r7, #20]
   1385e:	7e52      	ldrb	r2, [r2, #25]
   13860:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   13862:	697b      	ldr	r3, [r7, #20]
   13864:	7e1b      	ldrb	r3, [r3, #24]
   13866:	b2da      	uxtb	r2, r3
   13868:	230e      	movs	r3, #14
   1386a:	18fb      	adds	r3, r7, r3
   1386c:	210e      	movs	r1, #14
   1386e:	1879      	adds	r1, r7, r1
   13870:	7809      	ldrb	r1, [r1, #0]
   13872:	400a      	ands	r2, r1
   13874:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   13876:	697b      	ldr	r3, [r7, #20]
   13878:	8b5b      	ldrh	r3, [r3, #26]
   1387a:	b29b      	uxth	r3, r3
   1387c:	2b00      	cmp	r3, #0
   1387e:	d109      	bne.n	13894 <_i2c_master_interrupt_handler+0x70>
   13880:	697b      	ldr	r3, [r7, #20]
   13882:	8b9b      	ldrh	r3, [r3, #28]
   13884:	b29b      	uxth	r3, r3
   13886:	2b00      	cmp	r3, #0
   13888:	d004      	beq.n	13894 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   1388a:	697b      	ldr	r3, [r7, #20]
   1388c:	0018      	movs	r0, r3
   1388e:	4b7e      	ldr	r3, [pc, #504]	; (13a88 <_i2c_master_interrupt_handler+0x264>)
   13890:	4798      	blx	r3
   13892:	e070      	b.n	13976 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13894:	697b      	ldr	r3, [r7, #20]
   13896:	8b5b      	ldrh	r3, [r3, #26]
   13898:	b29b      	uxth	r3, r3
   1389a:	2b00      	cmp	r3, #0
   1389c:	d039      	beq.n	13912 <_i2c_master_interrupt_handler+0xee>
   1389e:	697b      	ldr	r3, [r7, #20]
   138a0:	8b9b      	ldrh	r3, [r3, #28]
   138a2:	b29b      	uxth	r3, r3
   138a4:	2b00      	cmp	r3, #0
   138a6:	d134      	bne.n	13912 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   138a8:	697b      	ldr	r3, [r7, #20]
   138aa:	2225      	movs	r2, #37	; 0x25
   138ac:	5c9b      	ldrb	r3, [r3, r2]
   138ae:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   138b0:	2b05      	cmp	r3, #5
   138b2:	d12e      	bne.n	13912 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   138b4:	697b      	ldr	r3, [r7, #20]
   138b6:	2224      	movs	r2, #36	; 0x24
   138b8:	5c9b      	ldrb	r3, [r3, r2]
   138ba:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   138bc:	2b00      	cmp	r3, #0
   138be:	d128      	bne.n	13912 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   138c0:	693b      	ldr	r3, [r7, #16]
   138c2:	2203      	movs	r2, #3
   138c4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   138c6:	697b      	ldr	r3, [r7, #20]
   138c8:	2200      	movs	r2, #0
   138ca:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   138cc:	697b      	ldr	r3, [r7, #20]
   138ce:	2225      	movs	r2, #37	; 0x25
   138d0:	2100      	movs	r1, #0
   138d2:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   138d4:	697b      	ldr	r3, [r7, #20]
   138d6:	7a9b      	ldrb	r3, [r3, #10]
   138d8:	2b00      	cmp	r3, #0
   138da:	d00b      	beq.n	138f4 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   138dc:	697b      	ldr	r3, [r7, #20]
   138de:	0018      	movs	r0, r3
   138e0:	4b6a      	ldr	r3, [pc, #424]	; (13a8c <_i2c_master_interrupt_handler+0x268>)
   138e2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   138e4:	693b      	ldr	r3, [r7, #16]
   138e6:	685b      	ldr	r3, [r3, #4]
   138e8:	22c0      	movs	r2, #192	; 0xc0
   138ea:	0292      	lsls	r2, r2, #10
   138ec:	431a      	orrs	r2, r3
   138ee:	693b      	ldr	r3, [r7, #16]
   138f0:	605a      	str	r2, [r3, #4]
   138f2:	e002      	b.n	138fa <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   138f4:	693b      	ldr	r3, [r7, #16]
   138f6:	2201      	movs	r2, #1
   138f8:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   138fa:	230e      	movs	r3, #14
   138fc:	18fb      	adds	r3, r7, r3
   138fe:	781b      	ldrb	r3, [r3, #0]
   13900:	2201      	movs	r2, #1
   13902:	4013      	ands	r3, r2
   13904:	d037      	beq.n	13976 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13906:	697b      	ldr	r3, [r7, #20]
   13908:	68db      	ldr	r3, [r3, #12]
   1390a:	697a      	ldr	r2, [r7, #20]
   1390c:	0010      	movs	r0, r2
   1390e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13910:	e031      	b.n	13976 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13912:	697b      	ldr	r3, [r7, #20]
   13914:	8b5b      	ldrh	r3, [r3, #26]
   13916:	b29b      	uxth	r3, r3
   13918:	2b00      	cmp	r3, #0
   1391a:	d02c      	beq.n	13976 <_i2c_master_interrupt_handler+0x152>
   1391c:	697b      	ldr	r3, [r7, #20]
   1391e:	8b9b      	ldrh	r3, [r3, #28]
   13920:	b29b      	uxth	r3, r3
   13922:	2b00      	cmp	r3, #0
   13924:	d027      	beq.n	13976 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13926:	693b      	ldr	r3, [r7, #16]
   13928:	8b5b      	ldrh	r3, [r3, #26]
   1392a:	b29b      	uxth	r3, r3
   1392c:	001a      	movs	r2, r3
   1392e:	2320      	movs	r3, #32
   13930:	4013      	ands	r3, r2
   13932:	d111      	bne.n	13958 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13934:	230f      	movs	r3, #15
   13936:	18fb      	adds	r3, r7, r3
   13938:	781b      	ldrb	r3, [r3, #0]
   1393a:	2201      	movs	r2, #1
   1393c:	4053      	eors	r3, r2
   1393e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13940:	2b00      	cmp	r3, #0
   13942:	d104      	bne.n	1394e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13944:	697b      	ldr	r3, [r7, #20]
   13946:	8b9b      	ldrh	r3, [r3, #28]
   13948:	b29b      	uxth	r3, r3
   1394a:	2b01      	cmp	r3, #1
   1394c:	d004      	beq.n	13958 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1394e:	697b      	ldr	r3, [r7, #20]
   13950:	2225      	movs	r2, #37	; 0x25
   13952:	2141      	movs	r1, #65	; 0x41
   13954:	5499      	strb	r1, [r3, r2]
   13956:	e00e      	b.n	13976 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   13958:	697b      	ldr	r3, [r7, #20]
   1395a:	2224      	movs	r2, #36	; 0x24
   1395c:	5c9b      	ldrb	r3, [r3, r2]
   1395e:	b2db      	uxtb	r3, r3
   13960:	2b00      	cmp	r3, #0
   13962:	d104      	bne.n	1396e <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   13964:	697b      	ldr	r3, [r7, #20]
   13966:	0018      	movs	r0, r3
   13968:	4b49      	ldr	r3, [pc, #292]	; (13a90 <_i2c_master_interrupt_handler+0x26c>)
   1396a:	4798      	blx	r3
   1396c:	e003      	b.n	13976 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   1396e:	697b      	ldr	r3, [r7, #20]
   13970:	0018      	movs	r0, r3
   13972:	4b48      	ldr	r3, [pc, #288]	; (13a94 <_i2c_master_interrupt_handler+0x270>)
   13974:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13976:	697b      	ldr	r3, [r7, #20]
   13978:	8b5b      	ldrh	r3, [r3, #26]
   1397a:	b29b      	uxth	r3, r3
   1397c:	2b00      	cmp	r3, #0
   1397e:	d047      	beq.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
   13980:	697b      	ldr	r3, [r7, #20]
   13982:	8b9b      	ldrh	r3, [r3, #28]
   13984:	b29b      	uxth	r3, r3
   13986:	2b00      	cmp	r3, #0
   13988:	d142      	bne.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   1398a:	697b      	ldr	r3, [r7, #20]
   1398c:	2225      	movs	r2, #37	; 0x25
   1398e:	5c9b      	ldrb	r3, [r3, r2]
   13990:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13992:	2b05      	cmp	r3, #5
   13994:	d13c      	bne.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   13996:	697b      	ldr	r3, [r7, #20]
   13998:	2224      	movs	r2, #36	; 0x24
   1399a:	5c9b      	ldrb	r3, [r3, r2]
   1399c:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1399e:	2b01      	cmp	r3, #1
   139a0:	d136      	bne.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   139a2:	693b      	ldr	r3, [r7, #16]
   139a4:	7e1b      	ldrb	r3, [r3, #24]
   139a6:	b2db      	uxtb	r3, r3
   139a8:	001a      	movs	r2, r3
   139aa:	2302      	movs	r3, #2
   139ac:	4013      	ands	r3, r2
   139ae:	d002      	beq.n	139b6 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   139b0:	693b      	ldr	r3, [r7, #16]
   139b2:	2202      	movs	r2, #2
   139b4:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   139b6:	693b      	ldr	r3, [r7, #16]
   139b8:	2203      	movs	r2, #3
   139ba:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   139bc:	697b      	ldr	r3, [r7, #20]
   139be:	2200      	movs	r2, #0
   139c0:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   139c2:	697b      	ldr	r3, [r7, #20]
   139c4:	2225      	movs	r2, #37	; 0x25
   139c6:	2100      	movs	r1, #0
   139c8:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   139ca:	230e      	movs	r3, #14
   139cc:	18fb      	adds	r3, r7, r3
   139ce:	781b      	ldrb	r3, [r3, #0]
   139d0:	2202      	movs	r2, #2
   139d2:	4013      	ands	r3, r2
   139d4:	d00b      	beq.n	139ee <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   139d6:	697b      	ldr	r3, [r7, #20]
   139d8:	2224      	movs	r2, #36	; 0x24
   139da:	5c9b      	ldrb	r3, [r3, r2]
   139dc:	b2db      	uxtb	r3, r3
   139de:	2b01      	cmp	r3, #1
   139e0:	d105      	bne.n	139ee <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   139e2:	697b      	ldr	r3, [r7, #20]
   139e4:	691b      	ldr	r3, [r3, #16]
   139e6:	697a      	ldr	r2, [r7, #20]
   139e8:	0010      	movs	r0, r2
   139ea:	4798      	blx	r3
   139ec:	e010      	b.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   139ee:	230e      	movs	r3, #14
   139f0:	18fb      	adds	r3, r7, r3
   139f2:	781b      	ldrb	r3, [r3, #0]
   139f4:	2201      	movs	r2, #1
   139f6:	4013      	ands	r3, r2
   139f8:	d00a      	beq.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   139fa:	697b      	ldr	r3, [r7, #20]
   139fc:	2224      	movs	r2, #36	; 0x24
   139fe:	5c9b      	ldrb	r3, [r3, r2]
   13a00:	b2db      	uxtb	r3, r3
   13a02:	2b00      	cmp	r3, #0
   13a04:	d104      	bne.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13a06:	697b      	ldr	r3, [r7, #20]
   13a08:	68db      	ldr	r3, [r3, #12]
   13a0a:	697a      	ldr	r2, [r7, #20]
   13a0c:	0010      	movs	r0, r2
   13a0e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13a10:	697b      	ldr	r3, [r7, #20]
   13a12:	2225      	movs	r2, #37	; 0x25
   13a14:	5c9b      	ldrb	r3, [r3, r2]
   13a16:	b2db      	uxtb	r3, r3
   13a18:	2b05      	cmp	r3, #5
   13a1a:	d02e      	beq.n	13a7a <_i2c_master_interrupt_handler+0x256>
   13a1c:	697b      	ldr	r3, [r7, #20]
   13a1e:	2225      	movs	r2, #37	; 0x25
   13a20:	5c9b      	ldrb	r3, [r3, r2]
   13a22:	b2db      	uxtb	r3, r3
   13a24:	2b00      	cmp	r3, #0
   13a26:	d028      	beq.n	13a7a <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13a28:	693b      	ldr	r3, [r7, #16]
   13a2a:	2203      	movs	r2, #3
   13a2c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13a2e:	697b      	ldr	r3, [r7, #20]
   13a30:	2200      	movs	r2, #0
   13a32:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13a34:	697b      	ldr	r3, [r7, #20]
   13a36:	2200      	movs	r2, #0
   13a38:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   13a3a:	697b      	ldr	r3, [r7, #20]
   13a3c:	2225      	movs	r2, #37	; 0x25
   13a3e:	5c9b      	ldrb	r3, [r3, r2]
   13a40:	b2db      	uxtb	r3, r3
   13a42:	2b41      	cmp	r3, #65	; 0x41
   13a44:	d00e      	beq.n	13a64 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13a46:	697b      	ldr	r3, [r7, #20]
   13a48:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   13a4a:	2b00      	cmp	r3, #0
   13a4c:	d00a      	beq.n	13a64 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   13a4e:	697b      	ldr	r3, [r7, #20]
   13a50:	0018      	movs	r0, r3
   13a52:	4b0e      	ldr	r3, [pc, #56]	; (13a8c <_i2c_master_interrupt_handler+0x268>)
   13a54:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   13a56:	693b      	ldr	r3, [r7, #16]
   13a58:	685b      	ldr	r3, [r3, #4]
   13a5a:	22e0      	movs	r2, #224	; 0xe0
   13a5c:	02d2      	lsls	r2, r2, #11
   13a5e:	431a      	orrs	r2, r3
   13a60:	693b      	ldr	r3, [r7, #16]
   13a62:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   13a64:	230e      	movs	r3, #14
   13a66:	18fb      	adds	r3, r7, r3
   13a68:	781b      	ldrb	r3, [r3, #0]
   13a6a:	2204      	movs	r2, #4
   13a6c:	4013      	ands	r3, r2
   13a6e:	d004      	beq.n	13a7a <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   13a70:	697b      	ldr	r3, [r7, #20]
   13a72:	695b      	ldr	r3, [r3, #20]
   13a74:	697a      	ldr	r2, [r7, #20]
   13a76:	0010      	movs	r0, r2
   13a78:	4798      	blx	r3
		}
	}
}
   13a7a:	46c0      	nop			; (mov r8, r8)
   13a7c:	46bd      	mov	sp, r7
   13a7e:	b006      	add	sp, #24
   13a80:	bd80      	pop	{r7, pc}
   13a82:	46c0      	nop			; (mov r8, r8)
   13a84:	20005838 	.word	0x20005838
   13a88:	000134a5 	.word	0x000134a5
   13a8c:	00013315 	.word	0x00013315
   13a90:	00013429 	.word	0x00013429
   13a94:	00013339 	.word	0x00013339

00013a98 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   13a98:	b580      	push	{r7, lr}
   13a9a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   13a9c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   13aa0:	4b02      	ldr	r3, [pc, #8]	; (13aac <NVIC_SystemReset+0x14>)
   13aa2:	4a03      	ldr	r2, [pc, #12]	; (13ab0 <NVIC_SystemReset+0x18>)
   13aa4:	60da      	str	r2, [r3, #12]
   13aa6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   13aaa:	e7fe      	b.n	13aaa <NVIC_SystemReset+0x12>
   13aac:	e000ed00 	.word	0xe000ed00
   13ab0:	05fa0004 	.word	0x05fa0004

00013ab4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13ab4:	b580      	push	{r7, lr}
   13ab6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13ab8:	4b02      	ldr	r3, [pc, #8]	; (13ac4 <system_reset+0x10>)
   13aba:	4798      	blx	r3
}
   13abc:	46c0      	nop			; (mov r8, r8)
   13abe:	46bd      	mov	sp, r7
   13ac0:	bd80      	pop	{r7, pc}
   13ac2:	46c0      	nop			; (mov r8, r8)
   13ac4:	00013a99 	.word	0x00013a99

00013ac8 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13ac8:	b580      	push	{r7, lr}
   13aca:	b086      	sub	sp, #24
   13acc:	af00      	add	r7, sp, #0
   13ace:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13ad0:	4b9e      	ldr	r3, [pc, #632]	; (13d4c <vCommandConsoleTask+0x284>)
   13ad2:	0018      	movs	r0, r3
   13ad4:	4b9e      	ldr	r3, [pc, #632]	; (13d50 <vCommandConsoleTask+0x288>)
   13ad6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   13ad8:	4b9e      	ldr	r3, [pc, #632]	; (13d54 <vCommandConsoleTask+0x28c>)
   13ada:	0018      	movs	r0, r3
   13adc:	4b9c      	ldr	r3, [pc, #624]	; (13d50 <vCommandConsoleTask+0x288>)
   13ade:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13ae0:	4b9d      	ldr	r3, [pc, #628]	; (13d58 <vCommandConsoleTask+0x290>)
   13ae2:	0018      	movs	r0, r3
   13ae4:	4b9a      	ldr	r3, [pc, #616]	; (13d50 <vCommandConsoleTask+0x288>)
   13ae6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13ae8:	4b9c      	ldr	r3, [pc, #624]	; (13d5c <vCommandConsoleTask+0x294>)
   13aea:	0018      	movs	r0, r3
   13aec:	4b98      	ldr	r3, [pc, #608]	; (13d50 <vCommandConsoleTask+0x288>)
   13aee:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   13af0:	4b9b      	ldr	r3, [pc, #620]	; (13d60 <vCommandConsoleTask+0x298>)
   13af2:	0018      	movs	r0, r3
   13af4:	4b96      	ldr	r3, [pc, #600]	; (13d50 <vCommandConsoleTask+0x288>)
   13af6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   13af8:	4b9a      	ldr	r3, [pc, #616]	; (13d64 <vCommandConsoleTask+0x29c>)
   13afa:	0018      	movs	r0, r3
   13afc:	4b94      	ldr	r3, [pc, #592]	; (13d50 <vCommandConsoleTask+0x288>)
   13afe:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   13b00:	4b99      	ldr	r3, [pc, #612]	; (13d68 <vCommandConsoleTask+0x2a0>)
   13b02:	0018      	movs	r0, r3
   13b04:	4b92      	ldr	r3, [pc, #584]	; (13d50 <vCommandConsoleTask+0x288>)
   13b06:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
   13b08:	4b98      	ldr	r3, [pc, #608]	; (13d6c <vCommandConsoleTask+0x2a4>)
   13b0a:	0018      	movs	r0, r3
   13b0c:	4b90      	ldr	r3, [pc, #576]	; (13d50 <vCommandConsoleTask+0x288>)
   13b0e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13b10:	4b97      	ldr	r3, [pc, #604]	; (13d70 <vCommandConsoleTask+0x2a8>)
   13b12:	0018      	movs	r0, r3
   13b14:	4b8e      	ldr	r3, [pc, #568]	; (13d50 <vCommandConsoleTask+0x288>)
   13b16:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13b18:	2317      	movs	r3, #23
   13b1a:	18fb      	adds	r3, r7, r3
   13b1c:	2200      	movs	r2, #0
   13b1e:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13b20:	4b94      	ldr	r3, [pc, #592]	; (13d74 <vCommandConsoleTask+0x2ac>)
   13b22:	0018      	movs	r0, r3
   13b24:	4b94      	ldr	r3, [pc, #592]	; (13d78 <vCommandConsoleTask+0x2b0>)
   13b26:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13b28:	2203      	movs	r2, #3
   13b2a:	2100      	movs	r1, #0
   13b2c:	2001      	movs	r0, #1
   13b2e:	4b93      	ldr	r3, [pc, #588]	; (13d7c <vCommandConsoleTask+0x2b4>)
   13b30:	4798      	blx	r3
   13b32:	0002      	movs	r2, r0
   13b34:	4b92      	ldr	r3, [pc, #584]	; (13d80 <vCommandConsoleTask+0x2b8>)
   13b36:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13b38:	4b91      	ldr	r3, [pc, #580]	; (13d80 <vCommandConsoleTask+0x2b8>)
   13b3a:	681b      	ldr	r3, [r3, #0]
   13b3c:	2b00      	cmp	r3, #0
   13b3e:	d107      	bne.n	13b50 <vCommandConsoleTask+0x88>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13b40:	4b90      	ldr	r3, [pc, #576]	; (13d84 <vCommandConsoleTask+0x2bc>)
   13b42:	0019      	movs	r1, r3
   13b44:	2003      	movs	r0, #3
   13b46:	4b90      	ldr	r3, [pc, #576]	; (13d88 <vCommandConsoleTask+0x2c0>)
   13b48:	4798      	blx	r3
        vTaskSuspend(NULL);
   13b4a:	2000      	movs	r0, #0
   13b4c:	4b8f      	ldr	r3, [pc, #572]	; (13d8c <vCommandConsoleTask+0x2c4>)
   13b4e:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13b50:	230c      	movs	r3, #12
   13b52:	18fb      	adds	r3, r7, r3
   13b54:	0018      	movs	r0, r3
   13b56:	4b8e      	ldr	r3, [pc, #568]	; (13d90 <vCommandConsoleTask+0x2c8>)
   13b58:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   13b5a:	230c      	movs	r3, #12
   13b5c:	18fb      	adds	r3, r7, r3
   13b5e:	781b      	ldrb	r3, [r3, #0]
   13b60:	2b0a      	cmp	r3, #10
   13b62:	d004      	beq.n	13b6e <vCommandConsoleTask+0xa6>
   13b64:	230c      	movs	r3, #12
   13b66:	18fb      	adds	r3, r7, r3
   13b68:	781b      	ldrb	r3, [r3, #0]
   13b6a:	2b0d      	cmp	r3, #13
   13b6c:	d137      	bne.n	13bde <vCommandConsoleTask+0x116>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   13b6e:	4b89      	ldr	r3, [pc, #548]	; (13d94 <vCommandConsoleTask+0x2cc>)
   13b70:	0018      	movs	r0, r3
   13b72:	4b81      	ldr	r3, [pc, #516]	; (13d78 <vCommandConsoleTask+0x2b0>)
   13b74:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   13b76:	4b88      	ldr	r3, [pc, #544]	; (13d98 <vCommandConsoleTask+0x2d0>)
   13b78:	2200      	movs	r2, #0
   13b7a:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   13b7c:	4b87      	ldr	r3, [pc, #540]	; (13d9c <vCommandConsoleTask+0x2d4>)
   13b7e:	2200      	movs	r2, #0
   13b80:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   13b82:	4987      	ldr	r1, [pc, #540]	; (13da0 <vCommandConsoleTask+0x2d8>)
   13b84:	4b87      	ldr	r3, [pc, #540]	; (13da4 <vCommandConsoleTask+0x2dc>)
   13b86:	2231      	movs	r2, #49	; 0x31
   13b88:	0018      	movs	r0, r3
   13b8a:	4b87      	ldr	r3, [pc, #540]	; (13da8 <vCommandConsoleTask+0x2e0>)
   13b8c:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   13b8e:	4b85      	ldr	r3, [pc, #532]	; (13da4 <vCommandConsoleTask+0x2dc>)
   13b90:	2231      	movs	r2, #49	; 0x31
   13b92:	2100      	movs	r1, #0
   13b94:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   13b96:	4985      	ldr	r1, [pc, #532]	; (13dac <vCommandConsoleTask+0x2e4>)
   13b98:	4b81      	ldr	r3, [pc, #516]	; (13da0 <vCommandConsoleTask+0x2d8>)
   13b9a:	2264      	movs	r2, #100	; 0x64
   13b9c:	0018      	movs	r0, r3
   13b9e:	4b84      	ldr	r3, [pc, #528]	; (13db0 <vCommandConsoleTask+0x2e8>)
   13ba0:	4798      	blx	r3
   13ba2:	0003      	movs	r3, r0
   13ba4:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   13ba6:	4b81      	ldr	r3, [pc, #516]	; (13dac <vCommandConsoleTask+0x2e4>)
   13ba8:	2263      	movs	r2, #99	; 0x63
   13baa:	2100      	movs	r1, #0
   13bac:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   13bae:	4b7f      	ldr	r3, [pc, #508]	; (13dac <vCommandConsoleTask+0x2e4>)
   13bb0:	0018      	movs	r0, r3
   13bb2:	4b71      	ldr	r3, [pc, #452]	; (13d78 <vCommandConsoleTask+0x2b0>)
   13bb4:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   13bb6:	693b      	ldr	r3, [r7, #16]
   13bb8:	2b00      	cmp	r3, #0
   13bba:	d1ec      	bne.n	13b96 <vCommandConsoleTask+0xce>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   13bbc:	2317      	movs	r3, #23
   13bbe:	18fb      	adds	r3, r7, r3
   13bc0:	2200      	movs	r2, #0
   13bc2:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13bc4:	4b76      	ldr	r3, [pc, #472]	; (13da0 <vCommandConsoleTask+0x2d8>)
   13bc6:	2232      	movs	r2, #50	; 0x32
   13bc8:	2100      	movs	r1, #0
   13bca:	0018      	movs	r0, r3
   13bcc:	4b79      	ldr	r3, [pc, #484]	; (13db4 <vCommandConsoleTask+0x2ec>)
   13bce:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13bd0:	4b76      	ldr	r3, [pc, #472]	; (13dac <vCommandConsoleTask+0x2e4>)
   13bd2:	2264      	movs	r2, #100	; 0x64
   13bd4:	2100      	movs	r1, #0
   13bd6:	0018      	movs	r0, r3
   13bd8:	4b76      	ldr	r3, [pc, #472]	; (13db4 <vCommandConsoleTask+0x2ec>)
   13bda:	4798      	blx	r3
   13bdc:	e0b5      	b.n	13d4a <vCommandConsoleTask+0x282>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   13bde:	4b6e      	ldr	r3, [pc, #440]	; (13d98 <vCommandConsoleTask+0x2d0>)
   13be0:	781b      	ldrb	r3, [r3, #0]
   13be2:	2b00      	cmp	r3, #0
   13be4:	d059      	beq.n	13c9a <vCommandConsoleTask+0x1d2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   13be6:	4b6d      	ldr	r3, [pc, #436]	; (13d9c <vCommandConsoleTask+0x2d4>)
   13be8:	781b      	ldrb	r3, [r3, #0]
   13bea:	2b03      	cmp	r3, #3
   13bec:	d80c      	bhi.n	13c08 <vCommandConsoleTask+0x140>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   13bee:	4b6b      	ldr	r3, [pc, #428]	; (13d9c <vCommandConsoleTask+0x2d4>)
   13bf0:	781b      	ldrb	r3, [r3, #0]
   13bf2:	1c5a      	adds	r2, r3, #1
   13bf4:	b2d1      	uxtb	r1, r2
   13bf6:	4a69      	ldr	r2, [pc, #420]	; (13d9c <vCommandConsoleTask+0x2d4>)
   13bf8:	7011      	strb	r1, [r2, #0]
   13bfa:	001a      	movs	r2, r3
   13bfc:	230c      	movs	r3, #12
   13bfe:	18fb      	adds	r3, r7, r3
   13c00:	7819      	ldrb	r1, [r3, #0]
   13c02:	4b6d      	ldr	r3, [pc, #436]	; (13db8 <vCommandConsoleTask+0x2f0>)
   13c04:	5499      	strb	r1, [r3, r2]
   13c06:	e005      	b.n	13c14 <vCommandConsoleTask+0x14c>
                } else {
                    isEscapeCode = false;
   13c08:	4b63      	ldr	r3, [pc, #396]	; (13d98 <vCommandConsoleTask+0x2d0>)
   13c0a:	2200      	movs	r2, #0
   13c0c:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13c0e:	4b63      	ldr	r3, [pc, #396]	; (13d9c <vCommandConsoleTask+0x2d4>)
   13c10:	2200      	movs	r2, #0
   13c12:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   13c14:	4b61      	ldr	r3, [pc, #388]	; (13d9c <vCommandConsoleTask+0x2d4>)
   13c16:	781b      	ldrb	r3, [r3, #0]
   13c18:	2b01      	cmp	r3, #1
   13c1a:	d999      	bls.n	13b50 <vCommandConsoleTask+0x88>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   13c1c:	4a67      	ldr	r2, [pc, #412]	; (13dbc <vCommandConsoleTask+0x2f4>)
   13c1e:	4b66      	ldr	r3, [pc, #408]	; (13db8 <vCommandConsoleTask+0x2f0>)
   13c20:	0011      	movs	r1, r2
   13c22:	0018      	movs	r0, r3
   13c24:	4b66      	ldr	r3, [pc, #408]	; (13dc0 <vCommandConsoleTask+0x2f8>)
   13c26:	4798      	blx	r3
   13c28:	1e03      	subs	r3, r0, #0
   13c2a:	d02f      	beq.n	13c8c <vCommandConsoleTask+0x1c4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   13c2c:	4965      	ldr	r1, [pc, #404]	; (13dc4 <vCommandConsoleTask+0x2fc>)
   13c2e:	4b5c      	ldr	r3, [pc, #368]	; (13da0 <vCommandConsoleTask+0x2d8>)
   13c30:	221b      	movs	r2, #27
   13c32:	0018      	movs	r0, r3
   13c34:	4b64      	ldr	r3, [pc, #400]	; (13dc8 <vCommandConsoleTask+0x300>)
   13c36:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13c38:	4b59      	ldr	r3, [pc, #356]	; (13da0 <vCommandConsoleTask+0x2d8>)
   13c3a:	0018      	movs	r0, r3
   13c3c:	4b4e      	ldr	r3, [pc, #312]	; (13d78 <vCommandConsoleTask+0x2b0>)
   13c3e:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13c40:	2317      	movs	r3, #23
   13c42:	18fb      	adds	r3, r7, r3
   13c44:	2200      	movs	r2, #0
   13c46:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13c48:	4b55      	ldr	r3, [pc, #340]	; (13da0 <vCommandConsoleTask+0x2d8>)
   13c4a:	2232      	movs	r2, #50	; 0x32
   13c4c:	2100      	movs	r1, #0
   13c4e:	0018      	movs	r0, r3
   13c50:	4b58      	ldr	r3, [pc, #352]	; (13db4 <vCommandConsoleTask+0x2ec>)
   13c52:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   13c54:	4953      	ldr	r1, [pc, #332]	; (13da4 <vCommandConsoleTask+0x2dc>)
   13c56:	4b52      	ldr	r3, [pc, #328]	; (13da0 <vCommandConsoleTask+0x2d8>)
   13c58:	2231      	movs	r2, #49	; 0x31
   13c5a:	0018      	movs	r0, r3
   13c5c:	4b52      	ldr	r3, [pc, #328]	; (13da8 <vCommandConsoleTask+0x2e0>)
   13c5e:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13c60:	4b4f      	ldr	r3, [pc, #316]	; (13da0 <vCommandConsoleTask+0x2d8>)
   13c62:	0018      	movs	r0, r3
   13c64:	4b59      	ldr	r3, [pc, #356]	; (13dcc <vCommandConsoleTask+0x304>)
   13c66:	4798      	blx	r3
   13c68:	0003      	movs	r3, r0
   13c6a:	2b30      	cmp	r3, #48	; 0x30
   13c6c:	d806      	bhi.n	13c7c <vCommandConsoleTask+0x1b4>
   13c6e:	4b4d      	ldr	r3, [pc, #308]	; (13da4 <vCommandConsoleTask+0x2dc>)
   13c70:	0018      	movs	r0, r3
   13c72:	4b56      	ldr	r3, [pc, #344]	; (13dcc <vCommandConsoleTask+0x304>)
   13c74:	4798      	blx	r3
   13c76:	0003      	movs	r3, r0
   13c78:	b2da      	uxtb	r2, r3
   13c7a:	e000      	b.n	13c7e <vCommandConsoleTask+0x1b6>
   13c7c:	2231      	movs	r2, #49	; 0x31
   13c7e:	2317      	movs	r3, #23
   13c80:	18fb      	adds	r3, r7, r3
   13c82:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   13c84:	4b46      	ldr	r3, [pc, #280]	; (13da0 <vCommandConsoleTask+0x2d8>)
   13c86:	0018      	movs	r0, r3
   13c88:	4b3b      	ldr	r3, [pc, #236]	; (13d78 <vCommandConsoleTask+0x2b0>)
   13c8a:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   13c8c:	4b42      	ldr	r3, [pc, #264]	; (13d98 <vCommandConsoleTask+0x2d0>)
   13c8e:	2200      	movs	r2, #0
   13c90:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13c92:	4b42      	ldr	r3, [pc, #264]	; (13d9c <vCommandConsoleTask+0x2d4>)
   13c94:	2200      	movs	r2, #0
   13c96:	701a      	strb	r2, [r3, #0]
   13c98:	e75a      	b.n	13b50 <vCommandConsoleTask+0x88>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13c9a:	230c      	movs	r3, #12
   13c9c:	18fb      	adds	r3, r7, r3
   13c9e:	781b      	ldrb	r3, [r3, #0]
   13ca0:	2b0d      	cmp	r3, #13
   13ca2:	d100      	bne.n	13ca6 <vCommandConsoleTask+0x1de>
   13ca4:	e754      	b.n	13b50 <vCommandConsoleTask+0x88>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13ca6:	230c      	movs	r3, #12
   13ca8:	18fb      	adds	r3, r7, r3
   13caa:	781b      	ldrb	r3, [r3, #0]
   13cac:	2b08      	cmp	r3, #8
   13cae:	d004      	beq.n	13cba <vCommandConsoleTask+0x1f2>
   13cb0:	230c      	movs	r3, #12
   13cb2:	18fb      	adds	r3, r7, r3
   13cb4:	781b      	ldrb	r3, [r3, #0]
   13cb6:	2b7f      	cmp	r3, #127	; 0x7f
   13cb8:	d11c      	bne.n	13cf4 <vCommandConsoleTask+0x22c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13cba:	2308      	movs	r3, #8
   13cbc:	18fb      	adds	r3, r7, r3
   13cbe:	4a44      	ldr	r2, [pc, #272]	; (13dd0 <vCommandConsoleTask+0x308>)
   13cc0:	6812      	ldr	r2, [r2, #0]
   13cc2:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13cc4:	2308      	movs	r3, #8
   13cc6:	18fb      	adds	r3, r7, r3
   13cc8:	0018      	movs	r0, r3
   13cca:	4b2b      	ldr	r3, [pc, #172]	; (13d78 <vCommandConsoleTask+0x2b0>)
   13ccc:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13cce:	2317      	movs	r3, #23
   13cd0:	18fb      	adds	r3, r7, r3
   13cd2:	781b      	ldrb	r3, [r3, #0]
   13cd4:	2b00      	cmp	r3, #0
   13cd6:	d037      	beq.n	13d48 <vCommandConsoleTask+0x280>
                    cInputIndex--;
   13cd8:	2317      	movs	r3, #23
   13cda:	18fb      	adds	r3, r7, r3
   13cdc:	781a      	ldrb	r2, [r3, #0]
   13cde:	2317      	movs	r3, #23
   13ce0:	18fb      	adds	r3, r7, r3
   13ce2:	3a01      	subs	r2, #1
   13ce4:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13ce6:	2317      	movs	r3, #23
   13ce8:	18fb      	adds	r3, r7, r3
   13cea:	781b      	ldrb	r3, [r3, #0]
   13cec:	4a2c      	ldr	r2, [pc, #176]	; (13da0 <vCommandConsoleTask+0x2d8>)
   13cee:	2100      	movs	r1, #0
   13cf0:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13cf2:	e029      	b.n	13d48 <vCommandConsoleTask+0x280>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13cf4:	230c      	movs	r3, #12
   13cf6:	18fb      	adds	r3, r7, r3
   13cf8:	781b      	ldrb	r3, [r3, #0]
   13cfa:	2b1b      	cmp	r3, #27
   13cfc:	d106      	bne.n	13d0c <vCommandConsoleTask+0x244>
                isEscapeCode = true;  // Next characters will be code arguments
   13cfe:	4b26      	ldr	r3, [pc, #152]	; (13d98 <vCommandConsoleTask+0x2d0>)
   13d00:	2201      	movs	r2, #1
   13d02:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13d04:	4b25      	ldr	r3, [pc, #148]	; (13d9c <vCommandConsoleTask+0x2d4>)
   13d06:	2200      	movs	r2, #0
   13d08:	701a      	strb	r2, [r3, #0]
   13d0a:	e721      	b.n	13b50 <vCommandConsoleTask+0x88>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13d0c:	2317      	movs	r3, #23
   13d0e:	18fb      	adds	r3, r7, r3
   13d10:	781b      	ldrb	r3, [r3, #0]
   13d12:	2b31      	cmp	r3, #49	; 0x31
   13d14:	d80e      	bhi.n	13d34 <vCommandConsoleTask+0x26c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13d16:	2317      	movs	r3, #23
   13d18:	18fb      	adds	r3, r7, r3
   13d1a:	781b      	ldrb	r3, [r3, #0]
   13d1c:	220c      	movs	r2, #12
   13d1e:	18ba      	adds	r2, r7, r2
   13d20:	7811      	ldrb	r1, [r2, #0]
   13d22:	4a1f      	ldr	r2, [pc, #124]	; (13da0 <vCommandConsoleTask+0x2d8>)
   13d24:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13d26:	2317      	movs	r3, #23
   13d28:	18fb      	adds	r3, r7, r3
   13d2a:	781a      	ldrb	r2, [r3, #0]
   13d2c:	2317      	movs	r3, #23
   13d2e:	18fb      	adds	r3, r7, r3
   13d30:	3201      	adds	r2, #1
   13d32:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13d34:	230c      	movs	r3, #12
   13d36:	18fb      	adds	r3, r7, r3
   13d38:	2200      	movs	r2, #0
   13d3a:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13d3c:	230c      	movs	r3, #12
   13d3e:	18fb      	adds	r3, r7, r3
   13d40:	0018      	movs	r0, r3
   13d42:	4b0d      	ldr	r3, [pc, #52]	; (13d78 <vCommandConsoleTask+0x2b0>)
   13d44:	4798      	blx	r3
   13d46:	e703      	b.n	13b50 <vCommandConsoleTask+0x88>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13d48:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13d4a:	e701      	b.n	13b50 <vCommandConsoleTask+0x88>
   13d4c:	00036cac 	.word	0x00036cac
   13d50:	000189ad 	.word	0x000189ad
   13d54:	00036c9c 	.word	0x00036c9c
   13d58:	00036d1c 	.word	0x00036d1c
   13d5c:	00036cbc 	.word	0x00036cbc
   13d60:	00036ccc 	.word	0x00036ccc
   13d64:	00036cdc 	.word	0x00036cdc
   13d68:	00036cec 	.word	0x00036cec
   13d6c:	00036cfc 	.word	0x00036cfc
   13d70:	00036d0c 	.word	0x00036d0c
   13d74:	00036920 	.word	0x00036920
   13d78:	0001e8d9 	.word	0x0001e8d9
   13d7c:	0001af79 	.word	0x0001af79
   13d80:	20004410 	.word	0x20004410
   13d84:	00036b3c 	.word	0x00036b3c
   13d88:	0001e9c5 	.word	0x0001e9c5
   13d8c:	0001cd65 	.word	0x0001cd65
   13d90:	00013dd5 	.word	0x00013dd5
   13d94:	00036b5c 	.word	0x00036b5c
   13d98:	20000534 	.word	0x20000534
   13d9c:	20000535 	.word	0x20000535
   13da0:	2000056c 	.word	0x2000056c
   13da4:	20000538 	.word	0x20000538
   13da8:	0003592b 	.word	0x0003592b
   13dac:	200005a0 	.word	0x200005a0
   13db0:	00018a1d 	.word	0x00018a1d
   13db4:	00035543 	.word	0x00035543
   13db8:	20000604 	.word	0x20000604
   13dbc:	00036b60 	.word	0x00036b60
   13dc0:	00035845 	.word	0x00035845
   13dc4:	00036b64 	.word	0x00036b64
   13dc8:	00035801 	.word	0x00035801
   13dcc:	000358fb 	.word	0x000358fb
   13dd0:	00036b6c 	.word	0x00036b6c

00013dd4 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13dd4:	b580      	push	{r7, lr}
   13dd6:	b084      	sub	sp, #16
   13dd8:	af00      	add	r7, sp, #0
   13dda:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13ddc:	687b      	ldr	r3, [r7, #4]
   13dde:	0018      	movs	r0, r3
   13de0:	4b0c      	ldr	r3, [pc, #48]	; (13e14 <FreeRTOS_read+0x40>)
   13de2:	4798      	blx	r3
   13de4:	0003      	movs	r3, r0
   13de6:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13de8:	e00d      	b.n	13e06 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13dea:	4b0b      	ldr	r3, [pc, #44]	; (13e18 <FreeRTOS_read+0x44>)
   13dec:	681a      	ldr	r2, [r3, #0]
   13dee:	2301      	movs	r3, #1
   13df0:	425b      	negs	r3, r3
   13df2:	0019      	movs	r1, r3
   13df4:	0010      	movs	r0, r2
   13df6:	4b09      	ldr	r3, [pc, #36]	; (13e1c <FreeRTOS_read+0x48>)
   13df8:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13dfa:	687b      	ldr	r3, [r7, #4]
   13dfc:	0018      	movs	r0, r3
   13dfe:	4b05      	ldr	r3, [pc, #20]	; (13e14 <FreeRTOS_read+0x40>)
   13e00:	4798      	blx	r3
   13e02:	0003      	movs	r3, r0
   13e04:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13e06:	68fb      	ldr	r3, [r7, #12]
   13e08:	3301      	adds	r3, #1
   13e0a:	d0ee      	beq.n	13dea <FreeRTOS_read+0x16>
    }
}
   13e0c:	46c0      	nop			; (mov r8, r8)
   13e0e:	46bd      	mov	sp, r7
   13e10:	b004      	add	sp, #16
   13e12:	bd80      	pop	{r7, pc}
   13e14:	0001e975 	.word	0x0001e975
   13e18:	20004410 	.word	0x20004410
   13e1c:	0001bf31 	.word	0x0001bf31

00013e20 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13e20:	b580      	push	{r7, lr}
   13e22:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13e24:	4b0a      	ldr	r3, [pc, #40]	; (13e50 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13e26:	2200      	movs	r2, #0
   13e28:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13e2a:	4b0a      	ldr	r3, [pc, #40]	; (13e54 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13e2c:	681b      	ldr	r3, [r3, #0]
   13e2e:	4a08      	ldr	r2, [pc, #32]	; (13e50 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13e30:	0011      	movs	r1, r2
   13e32:	0018      	movs	r0, r3
   13e34:	4b08      	ldr	r3, [pc, #32]	; (13e58 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13e36:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13e38:	4b05      	ldr	r3, [pc, #20]	; (13e50 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13e3a:	681b      	ldr	r3, [r3, #0]
   13e3c:	2b00      	cmp	r3, #0
   13e3e:	d003      	beq.n	13e48 <CliCharReadySemaphoreGiveFromISR+0x28>
   13e40:	4b06      	ldr	r3, [pc, #24]	; (13e5c <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13e42:	2280      	movs	r2, #128	; 0x80
   13e44:	0552      	lsls	r2, r2, #21
   13e46:	601a      	str	r2, [r3, #0]
}
   13e48:	46c0      	nop			; (mov r8, r8)
   13e4a:	46bd      	mov	sp, r7
   13e4c:	bd80      	pop	{r7, pc}
   13e4e:	46c0      	nop			; (mov r8, r8)
   13e50:	20000608 	.word	0x20000608
   13e54:	20004410 	.word	0x20004410
   13e58:	0001b8a9 	.word	0x0001b8a9
   13e5c:	e000ed04 	.word	0xe000ed04

00013e60 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13e60:	b5b0      	push	{r4, r5, r7, lr}
   13e62:	b088      	sub	sp, #32
   13e64:	af02      	add	r7, sp, #8
   13e66:	60f8      	str	r0, [r7, #12]
   13e68:	60b9      	str	r1, [r7, #8]
   13e6a:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13e6c:	4b2e      	ldr	r3, [pc, #184]	; (13f28 <CLI_GetImuData+0xc8>)
   13e6e:	4798      	blx	r3
   13e70:	0003      	movs	r3, r0
   13e72:	617b      	str	r3, [r7, #20]

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13e74:	2313      	movs	r3, #19
   13e76:	18fa      	adds	r2, r7, r3
   13e78:	697b      	ldr	r3, [r7, #20]
   13e7a:	0011      	movs	r1, r2
   13e7c:	0018      	movs	r0, r3
   13e7e:	4b2b      	ldr	r3, [pc, #172]	; (13f2c <CLI_GetImuData+0xcc>)
   13e80:	4798      	blx	r3

    if (reg) {
   13e82:	2313      	movs	r3, #19
   13e84:	18fb      	adds	r3, r7, r3
   13e86:	781b      	ldrb	r3, [r3, #0]
   13e88:	2b00      	cmp	r3, #0
   13e8a:	d041      	beq.n	13f10 <CLI_GetImuData+0xb0>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13e8c:	4b28      	ldr	r3, [pc, #160]	; (13f30 <CLI_GetImuData+0xd0>)
   13e8e:	2206      	movs	r2, #6
   13e90:	2100      	movs	r1, #0
   13e92:	0018      	movs	r0, r3
   13e94:	4b27      	ldr	r3, [pc, #156]	; (13f34 <CLI_GetImuData+0xd4>)
   13e96:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13e98:	4a25      	ldr	r2, [pc, #148]	; (13f30 <CLI_GetImuData+0xd0>)
   13e9a:	697b      	ldr	r3, [r7, #20]
   13e9c:	0011      	movs	r1, r2
   13e9e:	0018      	movs	r0, r3
   13ea0:	4b25      	ldr	r3, [pc, #148]	; (13f38 <CLI_GetImuData+0xd8>)
   13ea2:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13ea4:	4b22      	ldr	r3, [pc, #136]	; (13f30 <CLI_GetImuData+0xd0>)
   13ea6:	2200      	movs	r2, #0
   13ea8:	5e9b      	ldrsh	r3, [r3, r2]
   13eaa:	0018      	movs	r0, r3
   13eac:	4b23      	ldr	r3, [pc, #140]	; (13f3c <CLI_GetImuData+0xdc>)
   13eae:	4798      	blx	r3
   13eb0:	1c02      	adds	r2, r0, #0
   13eb2:	4b23      	ldr	r3, [pc, #140]	; (13f40 <CLI_GetImuData+0xe0>)
   13eb4:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13eb6:	4b1e      	ldr	r3, [pc, #120]	; (13f30 <CLI_GetImuData+0xd0>)
   13eb8:	2202      	movs	r2, #2
   13eba:	5e9b      	ldrsh	r3, [r3, r2]
   13ebc:	0018      	movs	r0, r3
   13ebe:	4b1f      	ldr	r3, [pc, #124]	; (13f3c <CLI_GetImuData+0xdc>)
   13ec0:	4798      	blx	r3
   13ec2:	1c02      	adds	r2, r0, #0
   13ec4:	4b1e      	ldr	r3, [pc, #120]	; (13f40 <CLI_GetImuData+0xe0>)
   13ec6:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13ec8:	4b19      	ldr	r3, [pc, #100]	; (13f30 <CLI_GetImuData+0xd0>)
   13eca:	2204      	movs	r2, #4
   13ecc:	5e9b      	ldrsh	r3, [r3, r2]
   13ece:	0018      	movs	r0, r3
   13ed0:	4b1a      	ldr	r3, [pc, #104]	; (13f3c <CLI_GetImuData+0xdc>)
   13ed2:	4798      	blx	r3
   13ed4:	1c02      	adds	r2, r0, #0
   13ed6:	4b1a      	ldr	r3, [pc, #104]	; (13f40 <CLI_GetImuData+0xe0>)
   13ed8:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13eda:	4b19      	ldr	r3, [pc, #100]	; (13f40 <CLI_GetImuData+0xe0>)
   13edc:	681a      	ldr	r2, [r3, #0]
   13ede:	4b19      	ldr	r3, [pc, #100]	; (13f44 <CLI_GetImuData+0xe4>)
   13ee0:	1c10      	adds	r0, r2, #0
   13ee2:	4798      	blx	r3
   13ee4:	0005      	movs	r5, r0
   13ee6:	4b16      	ldr	r3, [pc, #88]	; (13f40 <CLI_GetImuData+0xe0>)
   13ee8:	685a      	ldr	r2, [r3, #4]
   13eea:	4b16      	ldr	r3, [pc, #88]	; (13f44 <CLI_GetImuData+0xe4>)
   13eec:	1c10      	adds	r0, r2, #0
   13eee:	4798      	blx	r3
   13ef0:	0004      	movs	r4, r0
   13ef2:	4b13      	ldr	r3, [pc, #76]	; (13f40 <CLI_GetImuData+0xe0>)
   13ef4:	689a      	ldr	r2, [r3, #8]
   13ef6:	4b13      	ldr	r3, [pc, #76]	; (13f44 <CLI_GetImuData+0xe4>)
   13ef8:	1c10      	adds	r0, r2, #0
   13efa:	4798      	blx	r3
   13efc:	0003      	movs	r3, r0
   13efe:	4a12      	ldr	r2, [pc, #72]	; (13f48 <CLI_GetImuData+0xe8>)
   13f00:	68b9      	ldr	r1, [r7, #8]
   13f02:	68f8      	ldr	r0, [r7, #12]
   13f04:	9301      	str	r3, [sp, #4]
   13f06:	9400      	str	r4, [sp, #0]
   13f08:	002b      	movs	r3, r5
   13f0a:	4c10      	ldr	r4, [pc, #64]	; (13f4c <CLI_GetImuData+0xec>)
   13f0c:	47a0      	blx	r4
   13f0e:	e005      	b.n	13f1c <CLI_GetImuData+0xbc>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! \r\n");
   13f10:	4a0f      	ldr	r2, [pc, #60]	; (13f50 <CLI_GetImuData+0xf0>)
   13f12:	68b9      	ldr	r1, [r7, #8]
   13f14:	68fb      	ldr	r3, [r7, #12]
   13f16:	0018      	movs	r0, r3
   13f18:	4b0c      	ldr	r3, [pc, #48]	; (13f4c <CLI_GetImuData+0xec>)
   13f1a:	4798      	blx	r3
    }
    return pdFALSE;
   13f1c:	2300      	movs	r3, #0
}
   13f1e:	0018      	movs	r0, r3
   13f20:	46bd      	mov	sp, r7
   13f22:	b006      	add	sp, #24
   13f24:	bdb0      	pop	{r4, r5, r7, pc}
   13f26:	46c0      	nop			; (mov r8, r8)
   13f28:	00015e8d 	.word	0x00015e8d
   13f2c:	00015939 	.word	0x00015939
   13f30:	2000060c 	.word	0x2000060c
   13f34:	00035543 	.word	0x00035543
   13f38:	00015975 	.word	0x00015975
   13f3c:	000151c9 	.word	0x000151c9
   13f40:	20000614 	.word	0x20000614
   13f44:	00033ae9 	.word	0x00033ae9
   13f48:	00036b70 	.word	0x00036b70
   13f4c:	0003579d 	.word	0x0003579d
   13f50:	00036b94 	.word	0x00036b94

00013f54 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13f54:	b590      	push	{r4, r7, lr}
   13f56:	b087      	sub	sp, #28
   13f58:	af00      	add	r7, sp, #0
   13f5a:	60f8      	str	r0, [r7, #12]
   13f5c:	60b9      	str	r1, [r7, #8]
   13f5e:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13f60:	2317      	movs	r3, #23
   13f62:	18fb      	adds	r3, r7, r3
   13f64:	221b      	movs	r2, #27
   13f66:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13f68:	2317      	movs	r3, #23
   13f6a:	18fb      	adds	r3, r7, r3
   13f6c:	781b      	ldrb	r3, [r3, #0]
   13f6e:	4a08      	ldr	r2, [pc, #32]	; (13f90 <xCliClearTerminalScreen+0x3c>)
   13f70:	4808      	ldr	r0, [pc, #32]	; (13f94 <xCliClearTerminalScreen+0x40>)
   13f72:	210f      	movs	r1, #15
   13f74:	4c08      	ldr	r4, [pc, #32]	; (13f98 <xCliClearTerminalScreen+0x44>)
   13f76:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13f78:	4a06      	ldr	r2, [pc, #24]	; (13f94 <xCliClearTerminalScreen+0x40>)
   13f7a:	68b9      	ldr	r1, [r7, #8]
   13f7c:	68fb      	ldr	r3, [r7, #12]
   13f7e:	0018      	movs	r0, r3
   13f80:	4b05      	ldr	r3, [pc, #20]	; (13f98 <xCliClearTerminalScreen+0x44>)
   13f82:	4798      	blx	r3
    return pdFALSE;
   13f84:	2300      	movs	r3, #0
}
   13f86:	0018      	movs	r0, r3
   13f88:	46bd      	mov	sp, r7
   13f8a:	b007      	add	sp, #28
   13f8c:	bd90      	pop	{r4, r7, pc}
   13f8e:	46c0      	nop			; (mov r8, r8)
   13f90:	00036ba8 	.word	0x00036ba8
   13f94:	20000524 	.word	0x20000524
   13f98:	0003579d 	.word	0x0003579d

00013f9c <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13f9c:	b580      	push	{r7, lr}
   13f9e:	b084      	sub	sp, #16
   13fa0:	af00      	add	r7, sp, #0
   13fa2:	60f8      	str	r0, [r7, #12]
   13fa4:	60b9      	str	r1, [r7, #8]
   13fa6:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13fa8:	2002      	movs	r0, #2
   13faa:	4b03      	ldr	r3, [pc, #12]	; (13fb8 <CLI_OTAU+0x1c>)
   13fac:	4798      	blx	r3

    return pdFALSE;
   13fae:	2300      	movs	r3, #0
}
   13fb0:	0018      	movs	r0, r3
   13fb2:	46bd      	mov	sp, r7
   13fb4:	b004      	add	sp, #16
   13fb6:	bd80      	pop	{r7, pc}
   13fb8:	00017fbd 	.word	0x00017fbd

00013fbc <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13fbc:	b580      	push	{r7, lr}
   13fbe:	b084      	sub	sp, #16
   13fc0:	af00      	add	r7, sp, #0
   13fc2:	60f8      	str	r0, [r7, #12]
   13fc4:	60b9      	str	r1, [r7, #8]
   13fc6:	607a      	str	r2, [r7, #4]
    system_reset();
   13fc8:	4b03      	ldr	r3, [pc, #12]	; (13fd8 <CLI_ResetDevice+0x1c>)
   13fca:	4798      	blx	r3
    return pdFALSE;
   13fcc:	2300      	movs	r3, #0
}
   13fce:	0018      	movs	r0, r3
   13fd0:	46bd      	mov	sp, r7
   13fd2:	b004      	add	sp, #16
   13fd4:	bd80      	pop	{r7, pc}
   13fd6:	46c0      	nop			; (mov r8, r8)
   13fd8:	00013ab5 	.word	0x00013ab5

00013fdc <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13fdc:	b580      	push	{r7, lr}
   13fde:	b084      	sub	sp, #16
   13fe0:	af00      	add	r7, sp, #0
   13fe2:	60f8      	str	r0, [r7, #12]
   13fe4:	60b9      	str	r1, [r7, #8]
   13fe6:	607a      	str	r2, [r7, #4]
    snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Students to fill out!");
   13fe8:	4a05      	ldr	r2, [pc, #20]	; (14000 <CLI_NeotrellisSetLed+0x24>)
   13fea:	68b9      	ldr	r1, [r7, #8]
   13fec:	68fb      	ldr	r3, [r7, #12]
   13fee:	0018      	movs	r0, r3
   13ff0:	4b04      	ldr	r3, [pc, #16]	; (14004 <CLI_NeotrellisSetLed+0x28>)
   13ff2:	4798      	blx	r3
    // Check code SeesawSetLed and SeesawSetLed
    // How do you get parameters? Checl link in comments!
    // Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
    // return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
    // This function expects 4 arguments inside pcCommandString: key, R, G, B.
    return pdFALSE;
   13ff4:	2300      	movs	r3, #0
}
   13ff6:	0018      	movs	r0, r3
   13ff8:	46bd      	mov	sp, r7
   13ffa:	b004      	add	sp, #16
   13ffc:	bd80      	pop	{r7, pc}
   13ffe:	46c0      	nop			; (mov r8, r8)
   14000:	00036bb0 	.word	0x00036bb0
   14004:	0003579d 	.word	0x0003579d

00014008 <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14008:	b590      	push	{r4, r7, lr}
   1400a:	b099      	sub	sp, #100	; 0x64
   1400c:	af00      	add	r7, sp, #0
   1400e:	60f8      	str	r0, [r7, #12]
   14010:	60b9      	str	r1, [r7, #8]
   14012:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   14014:	235f      	movs	r3, #95	; 0x5f
   14016:	18fc      	adds	r4, r7, r3
   14018:	4b36      	ldr	r3, [pc, #216]	; (140f4 <CLI_NeotrellProcessButtonBuffer+0xec>)
   1401a:	4798      	blx	r3
   1401c:	0003      	movs	r3, r0
   1401e:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   14020:	235f      	movs	r3, #95	; 0x5f
   14022:	18fb      	adds	r3, r7, r3
   14024:	781b      	ldrb	r3, [r3, #0]
   14026:	2b00      	cmp	r3, #0
   14028:	d05d      	beq.n	140e6 <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   1402a:	2310      	movs	r3, #16
   1402c:	18fb      	adds	r3, r7, r3
   1402e:	2101      	movs	r1, #1
   14030:	0018      	movs	r0, r3
   14032:	4b31      	ldr	r3, [pc, #196]	; (140f8 <CLI_NeotrellProcessButtonBuffer+0xf0>)
   14034:	4798      	blx	r3
   14036:	0003      	movs	r3, r0
   14038:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   1403a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1403c:	2b00      	cmp	r3, #0
   1403e:	d150      	bne.n	140e2 <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   14040:	2310      	movs	r3, #16
   14042:	18fb      	adds	r3, r7, r3
   14044:	781a      	ldrb	r2, [r3, #0]
   14046:	2357      	movs	r3, #87	; 0x57
   14048:	18fb      	adds	r3, r7, r3
   1404a:	2103      	movs	r1, #3
   1404c:	400a      	ands	r2, r1
   1404e:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   14050:	2310      	movs	r3, #16
   14052:	18fb      	adds	r3, r7, r3
   14054:	781a      	ldrb	r2, [r3, #0]
   14056:	2356      	movs	r3, #86	; 0x56
   14058:	18fb      	adds	r3, r7, r3
   1405a:	0892      	lsrs	r2, r2, #2
   1405c:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   1405e:	2356      	movs	r3, #86	; 0x56
   14060:	18fb      	adds	r3, r7, r3
   14062:	781b      	ldrb	r3, [r3, #0]
   14064:	08db      	lsrs	r3, r3, #3
   14066:	b2db      	uxtb	r3, r3
   14068:	009a      	lsls	r2, r3, #2
   1406a:	2356      	movs	r3, #86	; 0x56
   1406c:	18fb      	adds	r3, r7, r3
   1406e:	781b      	ldrb	r3, [r3, #0]
   14070:	2107      	movs	r1, #7
   14072:	400b      	ands	r3, r1
   14074:	18d3      	adds	r3, r2, r3
   14076:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   14078:	2357      	movs	r3, #87	; 0x57
   1407a:	18fb      	adds	r3, r7, r3
   1407c:	781b      	ldrb	r3, [r3, #0]
   1407e:	2b02      	cmp	r3, #2
   14080:	d115      	bne.n	140ae <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   14082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14084:	2b00      	cmp	r3, #0
   14086:	da00      	bge.n	1408a <CLI_NeotrellProcessButtonBuffer+0x82>
   14088:	3307      	adds	r3, #7
   1408a:	10db      	asrs	r3, r3, #3
   1408c:	009a      	lsls	r2, r3, #2
   1408e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14090:	491a      	ldr	r1, [pc, #104]	; (140fc <CLI_NeotrellProcessButtonBuffer+0xf4>)
   14092:	400b      	ands	r3, r1
   14094:	d504      	bpl.n	140a0 <CLI_NeotrellProcessButtonBuffer+0x98>
   14096:	3b01      	subs	r3, #1
   14098:	2108      	movs	r1, #8
   1409a:	4249      	negs	r1, r1
   1409c:	430b      	orrs	r3, r1
   1409e:	3301      	adds	r3, #1
   140a0:	18d3      	adds	r3, r2, r3
   140a2:	4a17      	ldr	r2, [pc, #92]	; (14100 <CLI_NeotrellProcessButtonBuffer+0xf8>)
   140a4:	68b9      	ldr	r1, [r7, #8]
   140a6:	68f8      	ldr	r0, [r7, #12]
   140a8:	4c16      	ldr	r4, [pc, #88]	; (14104 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   140aa:	47a0      	blx	r4
   140ac:	e019      	b.n	140e2 <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   140ae:	2357      	movs	r3, #87	; 0x57
   140b0:	18fb      	adds	r3, r7, r3
   140b2:	781b      	ldrb	r3, [r3, #0]
   140b4:	2b03      	cmp	r3, #3
   140b6:	d114      	bne.n	140e2 <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   140b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   140ba:	2b00      	cmp	r3, #0
   140bc:	da00      	bge.n	140c0 <CLI_NeotrellProcessButtonBuffer+0xb8>
   140be:	3307      	adds	r3, #7
   140c0:	10db      	asrs	r3, r3, #3
   140c2:	009a      	lsls	r2, r3, #2
   140c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   140c6:	490d      	ldr	r1, [pc, #52]	; (140fc <CLI_NeotrellProcessButtonBuffer+0xf4>)
   140c8:	400b      	ands	r3, r1
   140ca:	d504      	bpl.n	140d6 <CLI_NeotrellProcessButtonBuffer+0xce>
   140cc:	3b01      	subs	r3, #1
   140ce:	2108      	movs	r1, #8
   140d0:	4249      	negs	r1, r1
   140d2:	430b      	orrs	r3, r1
   140d4:	3301      	adds	r3, #1
   140d6:	18d3      	adds	r3, r2, r3
   140d8:	4a0b      	ldr	r2, [pc, #44]	; (14108 <CLI_NeotrellProcessButtonBuffer+0x100>)
   140da:	68b9      	ldr	r1, [r7, #8]
   140dc:	68f8      	ldr	r0, [r7, #12]
   140de:	4c09      	ldr	r4, [pc, #36]	; (14104 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   140e0:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   140e2:	2301      	movs	r3, #1
   140e4:	e002      	b.n	140ec <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   140e6:	2300      	movs	r3, #0
   140e8:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   140ea:	2300      	movs	r3, #0
    }
}
   140ec:	0018      	movs	r0, r3
   140ee:	46bd      	mov	sp, r7
   140f0:	b019      	add	sp, #100	; 0x64
   140f2:	bd90      	pop	{r4, r7, pc}
   140f4:	0001608d 	.word	0x0001608d
   140f8:	000160f5 	.word	0x000160f5
   140fc:	80000007 	.word	0x80000007
   14100:	00036bc8 	.word	0x00036bc8
   14104:	0003579d 	.word	0x0003579d
   14108:	00036be4 	.word	0x00036be4

0001410c <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1410c:	b590      	push	{r4, r7, lr}
   1410e:	b087      	sub	sp, #28
   14110:	af00      	add	r7, sp, #0
   14112:	60f8      	str	r0, [r7, #12]
   14114:	60b9      	str	r1, [r7, #8]
   14116:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   14118:	2312      	movs	r3, #18
   1411a:	18fb      	adds	r3, r7, r3
   1411c:	2200      	movs	r2, #0
   1411e:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   14120:	2312      	movs	r3, #18
   14122:	18fb      	adds	r3, r7, r3
   14124:	2164      	movs	r1, #100	; 0x64
   14126:	0018      	movs	r0, r3
   14128:	4b19      	ldr	r3, [pc, #100]	; (14190 <CLI_DistanceSensorGetDistance+0x84>)
   1412a:	4798      	blx	r3
   1412c:	0003      	movs	r3, r0
   1412e:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   14130:	697b      	ldr	r3, [r7, #20]
   14132:	2b00      	cmp	r3, #0
   14134:	d006      	beq.n	14144 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   14136:	697b      	ldr	r3, [r7, #20]
   14138:	4a16      	ldr	r2, [pc, #88]	; (14194 <CLI_DistanceSensorGetDistance+0x88>)
   1413a:	68b9      	ldr	r1, [r7, #8]
   1413c:	68f8      	ldr	r0, [r7, #12]
   1413e:	4c16      	ldr	r4, [pc, #88]	; (14198 <CLI_DistanceSensorGetDistance+0x8c>)
   14140:	47a0      	blx	r4
   14142:	e007      	b.n	14154 <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   14144:	2312      	movs	r3, #18
   14146:	18fb      	adds	r3, r7, r3
   14148:	881b      	ldrh	r3, [r3, #0]
   1414a:	4a14      	ldr	r2, [pc, #80]	; (1419c <CLI_DistanceSensorGetDistance+0x90>)
   1414c:	68b9      	ldr	r1, [r7, #8]
   1414e:	68f8      	ldr	r0, [r7, #12]
   14150:	4c11      	ldr	r4, [pc, #68]	; (14198 <CLI_DistanceSensorGetDistance+0x8c>)
   14152:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   14154:	2312      	movs	r3, #18
   14156:	18fb      	adds	r3, r7, r3
   14158:	0018      	movs	r0, r3
   1415a:	4b11      	ldr	r3, [pc, #68]	; (141a0 <CLI_DistanceSensorGetDistance+0x94>)
   1415c:	4798      	blx	r3
   1415e:	0003      	movs	r3, r0
   14160:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   14162:	697b      	ldr	r3, [r7, #20]
   14164:	2b01      	cmp	r3, #1
   14166:	d10e      	bne.n	14186 <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   14168:	68fb      	ldr	r3, [r7, #12]
   1416a:	0018      	movs	r0, r3
   1416c:	4b0d      	ldr	r3, [pc, #52]	; (141a4 <CLI_DistanceSensorGetDistance+0x98>)
   1416e:	4798      	blx	r3
   14170:	0003      	movs	r3, r0
   14172:	001a      	movs	r2, r3
   14174:	68fb      	ldr	r3, [r7, #12]
   14176:	189a      	adds	r2, r3, r2
   14178:	4b0b      	ldr	r3, [pc, #44]	; (141a8 <CLI_DistanceSensorGetDistance+0x9c>)
   1417a:	0010      	movs	r0, r2
   1417c:	0019      	movs	r1, r3
   1417e:	231a      	movs	r3, #26
   14180:	001a      	movs	r2, r3
   14182:	4b0a      	ldr	r3, [pc, #40]	; (141ac <CLI_DistanceSensorGetDistance+0xa0>)
   14184:	4798      	blx	r3
    }
    return pdFALSE;
   14186:	2300      	movs	r3, #0
}
   14188:	0018      	movs	r0, r3
   1418a:	46bd      	mov	sp, r7
   1418c:	b007      	add	sp, #28
   1418e:	bd90      	pop	{r4, r7, pc}
   14190:	00014755 	.word	0x00014755
   14194:	00036bfc 	.word	0x00036bfc
   14198:	0003579d 	.word	0x0003579d
   1419c:	00036c10 	.word	0x00036c10
   141a0:	00017ff1 	.word	0x00017ff1
   141a4:	000358fb 	.word	0x000358fb
   141a8:	00036c24 	.word	0x00036c24
   141ac:	0003550d 	.word	0x0003550d

000141b0 <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   141b0:	b580      	push	{r7, lr}
   141b2:	b08a      	sub	sp, #40	; 0x28
   141b4:	af00      	add	r7, sp, #0
   141b6:	60f8      	str	r0, [r7, #12]
   141b8:	60b9      	str	r1, [r7, #8]
   141ba:	607a      	str	r2, [r7, #4]
    struct GameDataPacket gamevar;

    gamevar.game[0] = 0;
   141bc:	2310      	movs	r3, #16
   141be:	18fb      	adds	r3, r7, r3
   141c0:	2200      	movs	r2, #0
   141c2:	701a      	strb	r2, [r3, #0]
    gamevar.game[1] = 1;
   141c4:	2310      	movs	r3, #16
   141c6:	18fb      	adds	r3, r7, r3
   141c8:	2201      	movs	r2, #1
   141ca:	705a      	strb	r2, [r3, #1]
    gamevar.game[2] = 2;
   141cc:	2310      	movs	r3, #16
   141ce:	18fb      	adds	r3, r7, r3
   141d0:	2202      	movs	r2, #2
   141d2:	709a      	strb	r2, [r3, #2]
    gamevar.game[3] = 3;
   141d4:	2310      	movs	r3, #16
   141d6:	18fb      	adds	r3, r7, r3
   141d8:	2203      	movs	r2, #3
   141da:	70da      	strb	r2, [r3, #3]
    gamevar.game[4] = 4;
   141dc:	2310      	movs	r3, #16
   141de:	18fb      	adds	r3, r7, r3
   141e0:	2204      	movs	r2, #4
   141e2:	711a      	strb	r2, [r3, #4]
    gamevar.game[5] = 5;
   141e4:	2310      	movs	r3, #16
   141e6:	18fb      	adds	r3, r7, r3
   141e8:	2205      	movs	r2, #5
   141ea:	715a      	strb	r2, [r3, #5]
    gamevar.game[6] = 6;
   141ec:	2310      	movs	r3, #16
   141ee:	18fb      	adds	r3, r7, r3
   141f0:	2206      	movs	r2, #6
   141f2:	719a      	strb	r2, [r3, #6]
    gamevar.game[7] = 7;
   141f4:	2310      	movs	r3, #16
   141f6:	18fb      	adds	r3, r7, r3
   141f8:	2207      	movs	r2, #7
   141fa:	71da      	strb	r2, [r3, #7]
    gamevar.game[8] = 8;
   141fc:	2310      	movs	r3, #16
   141fe:	18fb      	adds	r3, r7, r3
   14200:	2208      	movs	r2, #8
   14202:	721a      	strb	r2, [r3, #8]
    gamevar.game[9] = 9;
   14204:	2310      	movs	r3, #16
   14206:	18fb      	adds	r3, r7, r3
   14208:	2209      	movs	r2, #9
   1420a:	725a      	strb	r2, [r3, #9]
    gamevar.game[10] = 0xFF;
   1420c:	2310      	movs	r3, #16
   1420e:	18fb      	adds	r3, r7, r3
   14210:	22ff      	movs	r2, #255	; 0xff
   14212:	729a      	strb	r2, [r3, #10]

    int error = WifiAddGameDataToQueue(&gamevar);
   14214:	2310      	movs	r3, #16
   14216:	18fb      	adds	r3, r7, r3
   14218:	0018      	movs	r0, r3
   1421a:	4b09      	ldr	r3, [pc, #36]	; (14240 <CLI_SendDummyGameData+0x90>)
   1421c:	4798      	blx	r3
   1421e:	0003      	movs	r3, r0
   14220:	627b      	str	r3, [r7, #36]	; 0x24
    if (error == pdTRUE) {
   14222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14224:	2b01      	cmp	r3, #1
   14226:	d105      	bne.n	14234 <CLI_SendDummyGameData+0x84>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   14228:	4a06      	ldr	r2, [pc, #24]	; (14244 <CLI_SendDummyGameData+0x94>)
   1422a:	68b9      	ldr	r1, [r7, #8]
   1422c:	68fb      	ldr	r3, [r7, #12]
   1422e:	0018      	movs	r0, r3
   14230:	4b05      	ldr	r3, [pc, #20]	; (14248 <CLI_SendDummyGameData+0x98>)
   14232:	4798      	blx	r3
    }
    return pdFALSE;
   14234:	2300      	movs	r3, #0
}
   14236:	0018      	movs	r0, r3
   14238:	46bd      	mov	sp, r7
   1423a:	b00a      	add	sp, #40	; 0x28
   1423c:	bd80      	pop	{r7, pc}
   1423e:	46c0      	nop			; (mov r8, r8)
   14240:	0001801d 	.word	0x0001801d
   14244:	00036c40 	.word	0x00036c40
   14248:	0003579d 	.word	0x0003579d

0001424c <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1424c:	b590      	push	{r4, r7, lr}
   1424e:	b08f      	sub	sp, #60	; 0x3c
   14250:	af00      	add	r7, sp, #0
   14252:	60f8      	str	r0, [r7, #12]
   14254:	60b9      	str	r1, [r7, #8]
   14256:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   14258:	2318      	movs	r3, #24
   1425a:	18fb      	adds	r3, r7, r3
   1425c:	2200      	movs	r2, #0
   1425e:	701a      	strb	r2, [r3, #0]
   14260:	2318      	movs	r3, #24
   14262:	18fb      	adds	r3, r7, r3
   14264:	2200      	movs	r2, #0
   14266:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   14268:	2318      	movs	r3, #24
   1426a:	18fb      	adds	r3, r7, r3
   1426c:	2200      	movs	r2, #0
   1426e:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   14270:	2318      	movs	r3, #24
   14272:	18fb      	adds	r3, r7, r3
   14274:	2200      	movs	r2, #0
   14276:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   14278:	231c      	movs	r3, #28
   1427a:	18fb      	adds	r3, r7, r3
   1427c:	2200      	movs	r2, #0
   1427e:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   14280:	231c      	movs	r3, #28
   14282:	18fb      	adds	r3, r7, r3
   14284:	2214      	movs	r2, #20
   14286:	18ba      	adds	r2, r7, r2
   14288:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   1428a:	231c      	movs	r3, #28
   1428c:	18fb      	adds	r3, r7, r3
   1428e:	2201      	movs	r2, #1
   14290:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   14292:	231c      	movs	r3, #28
   14294:	18fb      	adds	r3, r7, r3
   14296:	2218      	movs	r2, #24
   14298:	18ba      	adds	r2, r7, r2
   1429a:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   1429c:	231c      	movs	r3, #28
   1429e:	18fb      	adds	r3, r7, r3
   142a0:	2201      	movs	r2, #1
   142a2:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   142a4:	4b2c      	ldr	r3, [pc, #176]	; (14358 <CLI_i2cScan+0x10c>)
   142a6:	0018      	movs	r0, r3
   142a8:	4b2c      	ldr	r3, [pc, #176]	; (1435c <CLI_i2cScan+0x110>)
   142aa:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   142ac:	2300      	movs	r3, #0
   142ae:	637b      	str	r3, [r7, #52]	; 0x34
   142b0:	e046      	b.n	14340 <CLI_i2cScan+0xf4>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   142b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   142b4:	4a2a      	ldr	r2, [pc, #168]	; (14360 <CLI_i2cScan+0x114>)
   142b6:	482b      	ldr	r0, [pc, #172]	; (14364 <CLI_i2cScan+0x118>)
   142b8:	210f      	movs	r1, #15
   142ba:	4c2b      	ldr	r4, [pc, #172]	; (14368 <CLI_i2cScan+0x11c>)
   142bc:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   142be:	4b29      	ldr	r3, [pc, #164]	; (14364 <CLI_i2cScan+0x118>)
   142c0:	0018      	movs	r0, r3
   142c2:	4b26      	ldr	r3, [pc, #152]	; (1435c <CLI_i2cScan+0x110>)
   142c4:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   142c6:	2300      	movs	r3, #0
   142c8:	633b      	str	r3, [r7, #48]	; 0x30
   142ca:	e02f      	b.n	1432c <CLI_i2cScan+0xe0>
                {

                    i2cOled.address = (i + j) << 1;
   142cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   142ce:	b2da      	uxtb	r2, r3
   142d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   142d2:	b2db      	uxtb	r3, r3
   142d4:	18d3      	adds	r3, r2, r3
   142d6:	b2db      	uxtb	r3, r3
   142d8:	18db      	adds	r3, r3, r3
   142da:	b2da      	uxtb	r2, r3
   142dc:	231c      	movs	r3, #28
   142de:	18fb      	adds	r3, r7, r3
   142e0:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cWriteDataWait(&i2cOled, 100);
   142e2:	231c      	movs	r3, #28
   142e4:	18fb      	adds	r3, r7, r3
   142e6:	2164      	movs	r1, #100	; 0x64
   142e8:	0018      	movs	r0, r3
   142ea:	4b20      	ldr	r3, [pc, #128]	; (1436c <CLI_i2cScan+0x120>)
   142ec:	4798      	blx	r3
   142ee:	0003      	movs	r3, r0
   142f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   142f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   142f4:	2b00      	cmp	r3, #0
   142f6:	d10c      	bne.n	14312 <CLI_i2cScan+0xc6>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cOled.address);
   142f8:	231c      	movs	r3, #28
   142fa:	18fb      	adds	r3, r7, r3
   142fc:	781b      	ldrb	r3, [r3, #0]
   142fe:	4a18      	ldr	r2, [pc, #96]	; (14360 <CLI_i2cScan+0x114>)
   14300:	4818      	ldr	r0, [pc, #96]	; (14364 <CLI_i2cScan+0x118>)
   14302:	210f      	movs	r1, #15
   14304:	4c18      	ldr	r4, [pc, #96]	; (14368 <CLI_i2cScan+0x11c>)
   14306:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   14308:	4b16      	ldr	r3, [pc, #88]	; (14364 <CLI_i2cScan+0x118>)
   1430a:	0018      	movs	r0, r3
   1430c:	4b13      	ldr	r3, [pc, #76]	; (1435c <CLI_i2cScan+0x110>)
   1430e:	4798      	blx	r3
   14310:	e009      	b.n	14326 <CLI_i2cScan+0xda>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   14312:	4b14      	ldr	r3, [pc, #80]	; (14364 <CLI_i2cScan+0x118>)
   14314:	4a16      	ldr	r2, [pc, #88]	; (14370 <CLI_i2cScan+0x124>)
   14316:	8811      	ldrh	r1, [r2, #0]
   14318:	8019      	strh	r1, [r3, #0]
   1431a:	7892      	ldrb	r2, [r2, #2]
   1431c:	709a      	strb	r2, [r3, #2]
						SerialConsoleWriteString(bufCli);
   1431e:	4b11      	ldr	r3, [pc, #68]	; (14364 <CLI_i2cScan+0x118>)
   14320:	0018      	movs	r0, r3
   14322:	4b0e      	ldr	r3, [pc, #56]	; (1435c <CLI_i2cScan+0x110>)
   14324:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   14326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14328:	3301      	adds	r3, #1
   1432a:	633b      	str	r3, [r7, #48]	; 0x30
   1432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1432e:	2b0f      	cmp	r3, #15
   14330:	ddcc      	ble.n	142cc <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   14332:	4b10      	ldr	r3, [pc, #64]	; (14374 <CLI_i2cScan+0x128>)
   14334:	0018      	movs	r0, r3
   14336:	4b09      	ldr	r3, [pc, #36]	; (1435c <CLI_i2cScan+0x110>)
   14338:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   1433a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1433c:	3310      	adds	r3, #16
   1433e:	637b      	str	r3, [r7, #52]	; 0x34
   14340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14342:	2b7f      	cmp	r3, #127	; 0x7f
   14344:	ddb5      	ble.n	142b2 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   14346:	4b0b      	ldr	r3, [pc, #44]	; (14374 <CLI_i2cScan+0x128>)
   14348:	0018      	movs	r0, r3
   1434a:	4b04      	ldr	r3, [pc, #16]	; (1435c <CLI_i2cScan+0x110>)
   1434c:	4798      	blx	r3
			return pdFALSE;
   1434e:	2300      	movs	r3, #0

}
   14350:	0018      	movs	r0, r3
   14352:	46bd      	mov	sp, r7
   14354:	b00f      	add	sp, #60	; 0x3c
   14356:	bd90      	pop	{r4, r7, pc}
   14358:	00036c5c 	.word	0x00036c5c
   1435c:	0001e8d9 	.word	0x0001e8d9
   14360:	00036c90 	.word	0x00036c90
   14364:	20000524 	.word	0x20000524
   14368:	0003579d 	.word	0x0003579d
   1436c:	00014f4d 	.word	0x00014f4d
   14370:	00036c98 	.word	0x00036c98
   14374:	00036b5c 	.word	0x00036b5c

00014378 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   14378:	b580      	push	{r7, lr}
   1437a:	b088      	sub	sp, #32
   1437c:	af00      	add	r7, sp, #0
   1437e:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   14380:	4b33      	ldr	r3, [pc, #204]	; (14450 <vControlHandlerTask+0xd8>)
   14382:	0018      	movs	r0, r3
   14384:	4b33      	ldr	r3, [pc, #204]	; (14454 <vControlHandlerTask+0xdc>)
   14386:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   14388:	2200      	movs	r2, #0
   1438a:	2114      	movs	r1, #20
   1438c:	2002      	movs	r0, #2
   1438e:	4b32      	ldr	r3, [pc, #200]	; (14458 <vControlHandlerTask+0xe0>)
   14390:	4798      	blx	r3
   14392:	0002      	movs	r2, r0
   14394:	4b31      	ldr	r3, [pc, #196]	; (1445c <vControlHandlerTask+0xe4>)
   14396:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   14398:	2200      	movs	r2, #0
   1439a:	2103      	movs	r1, #3
   1439c:	2002      	movs	r0, #2
   1439e:	4b2e      	ldr	r3, [pc, #184]	; (14458 <vControlHandlerTask+0xe0>)
   143a0:	4798      	blx	r3
   143a2:	0002      	movs	r2, r0
   143a4:	4b2e      	ldr	r3, [pc, #184]	; (14460 <vControlHandlerTask+0xe8>)
   143a6:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   143a8:	4b2c      	ldr	r3, [pc, #176]	; (1445c <vControlHandlerTask+0xe4>)
   143aa:	681b      	ldr	r3, [r3, #0]
   143ac:	2b00      	cmp	r3, #0
   143ae:	d003      	beq.n	143b8 <vControlHandlerTask+0x40>
   143b0:	4b2b      	ldr	r3, [pc, #172]	; (14460 <vControlHandlerTask+0xe8>)
   143b2:	681b      	ldr	r3, [r3, #0]
   143b4:	2b00      	cmp	r3, #0
   143b6:	d103      	bne.n	143c0 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   143b8:	4b2a      	ldr	r3, [pc, #168]	; (14464 <vControlHandlerTask+0xec>)
   143ba:	0018      	movs	r0, r3
   143bc:	4b25      	ldr	r3, [pc, #148]	; (14454 <vControlHandlerTask+0xdc>)
   143be:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   143c0:	4b29      	ldr	r3, [pc, #164]	; (14468 <vControlHandlerTask+0xf0>)
   143c2:	2200      	movs	r2, #0
   143c4:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   143c6:	4b28      	ldr	r3, [pc, #160]	; (14468 <vControlHandlerTask+0xf0>)
   143c8:	781b      	ldrb	r3, [r3, #0]
   143ca:	2b01      	cmp	r3, #1
   143cc:	d01d      	beq.n	1440a <vControlHandlerTask+0x92>
   143ce:	2b02      	cmp	r3, #2
   143d0:	d035      	beq.n	1443e <vControlHandlerTask+0xc6>
   143d2:	2b00      	cmp	r3, #0
   143d4:	d12f      	bne.n	14436 <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   143d6:	4b21      	ldr	r3, [pc, #132]	; (1445c <vControlHandlerTask+0xe4>)
   143d8:	681b      	ldr	r3, [r3, #0]
   143da:	220c      	movs	r2, #12
   143dc:	18b9      	adds	r1, r7, r2
   143de:	2200      	movs	r2, #0
   143e0:	0018      	movs	r0, r3
   143e2:	4b22      	ldr	r3, [pc, #136]	; (1446c <vControlHandlerTask+0xf4>)
   143e4:	4798      	blx	r3
   143e6:	0003      	movs	r3, r0
   143e8:	2b01      	cmp	r3, #1
   143ea:	d12a      	bne.n	14442 <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   143ec:	4b20      	ldr	r3, [pc, #128]	; (14470 <vControlHandlerTask+0xf8>)
   143ee:	0019      	movs	r1, r3
   143f0:	2001      	movs	r0, #1
   143f2:	4b20      	ldr	r3, [pc, #128]	; (14474 <vControlHandlerTask+0xfc>)
   143f4:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   143f6:	230c      	movs	r3, #12
   143f8:	18fb      	adds	r3, r7, r3
   143fa:	0018      	movs	r0, r3
   143fc:	4b1e      	ldr	r3, [pc, #120]	; (14478 <vControlHandlerTask+0x100>)
   143fe:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   14400:	4b19      	ldr	r3, [pc, #100]	; (14468 <vControlHandlerTask+0xf0>)
   14402:	2201      	movs	r2, #1
   14404:	701a      	strb	r2, [r3, #0]
                }

                break;
   14406:	46c0      	nop			; (mov r8, r8)
   14408:	e01b      	b.n	14442 <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   1440a:	4b1c      	ldr	r3, [pc, #112]	; (1447c <vControlHandlerTask+0x104>)
   1440c:	4798      	blx	r3
   1440e:	1e03      	subs	r3, r0, #0
   14410:	d019      	beq.n	14446 <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   14412:	4b1b      	ldr	r3, [pc, #108]	; (14480 <vControlHandlerTask+0x108>)
   14414:	4798      	blx	r3
   14416:	0003      	movs	r3, r0
   14418:	0018      	movs	r0, r3
   1441a:	4b1a      	ldr	r3, [pc, #104]	; (14484 <vControlHandlerTask+0x10c>)
   1441c:	4798      	blx	r3
   1441e:	0003      	movs	r3, r0
   14420:	2b01      	cmp	r3, #1
   14422:	d004      	beq.n	1442e <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   14424:	4b18      	ldr	r3, [pc, #96]	; (14488 <vControlHandlerTask+0x110>)
   14426:	0019      	movs	r1, r3
   14428:	2001      	movs	r0, #1
   1442a:	4b12      	ldr	r3, [pc, #72]	; (14474 <vControlHandlerTask+0xfc>)
   1442c:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   1442e:	4b0e      	ldr	r3, [pc, #56]	; (14468 <vControlHandlerTask+0xf0>)
   14430:	2200      	movs	r2, #0
   14432:	701a      	strb	r2, [r3, #0]
                }

                break;
   14434:	e007      	b.n	14446 <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   14436:	4b0c      	ldr	r3, [pc, #48]	; (14468 <vControlHandlerTask+0xf0>)
   14438:	2200      	movs	r2, #0
   1443a:	701a      	strb	r2, [r3, #0]
                break;
   1443c:	e004      	b.n	14448 <vControlHandlerTask+0xd0>
                break;
   1443e:	46c0      	nop			; (mov r8, r8)
   14440:	e002      	b.n	14448 <vControlHandlerTask+0xd0>
                break;
   14442:	46c0      	nop			; (mov r8, r8)
   14444:	e000      	b.n	14448 <vControlHandlerTask+0xd0>
                break;
   14446:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   14448:	2028      	movs	r0, #40	; 0x28
   1444a:	4b10      	ldr	r3, [pc, #64]	; (1448c <vControlHandlerTask+0x114>)
   1444c:	4798      	blx	r3
        switch (controlState) {
   1444e:	e7ba      	b.n	143c6 <vControlHandlerTask+0x4e>
   14450:	00036d2c 	.word	0x00036d2c
   14454:	0001e8d9 	.word	0x0001e8d9
   14458:	0001af79 	.word	0x0001af79
   1445c:	20000620 	.word	0x20000620
   14460:	20000624 	.word	0x20000624
   14464:	00036d4c 	.word	0x00036d4c
   14468:	20004414 	.word	0x20004414
   1446c:	0001bad9 	.word	0x0001bad9
   14470:	00036d78 	.word	0x00036d78
   14474:	0001e9c5 	.word	0x0001e9c5
   14478:	0001672d 	.word	0x0001672d
   1447c:	00016769 	.word	0x00016769
   14480:	0001677d 	.word	0x0001677d
   14484:	0001801d 	.word	0x0001801d
   14488:	00036da0 	.word	0x00036da0
   1448c:	0001cc85 	.word	0x0001cc85

00014490 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   14490:	b590      	push	{r4, r7, lr}
   14492:	b085      	sub	sp, #20
   14494:	af00      	add	r7, sp, #0
   14496:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   14498:	4b06      	ldr	r3, [pc, #24]	; (144b4 <ControlAddGameData+0x24>)
   1449a:	6818      	ldr	r0, [r3, #0]
   1449c:	6879      	ldr	r1, [r7, #4]
   1449e:	2300      	movs	r3, #0
   144a0:	220a      	movs	r2, #10
   144a2:	4c05      	ldr	r4, [pc, #20]	; (144b8 <ControlAddGameData+0x28>)
   144a4:	47a0      	blx	r4
   144a6:	0003      	movs	r3, r0
   144a8:	60fb      	str	r3, [r7, #12]
    return error;
   144aa:	68fb      	ldr	r3, [r7, #12]
}
   144ac:	0018      	movs	r0, r3
   144ae:	46bd      	mov	sp, r7
   144b0:	b005      	add	sp, #20
   144b2:	bd90      	pop	{r4, r7, pc}
   144b4:	20000620 	.word	0x20000620
   144b8:	0001b221 	.word	0x0001b221

000144bc <system_interrupt_enable>:
{
   144bc:	b580      	push	{r7, lr}
   144be:	b082      	sub	sp, #8
   144c0:	af00      	add	r7, sp, #0
   144c2:	0002      	movs	r2, r0
   144c4:	1dfb      	adds	r3, r7, #7
   144c6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   144c8:	4b06      	ldr	r3, [pc, #24]	; (144e4 <system_interrupt_enable+0x28>)
   144ca:	1dfa      	adds	r2, r7, #7
   144cc:	7812      	ldrb	r2, [r2, #0]
   144ce:	0011      	movs	r1, r2
   144d0:	221f      	movs	r2, #31
   144d2:	400a      	ands	r2, r1
   144d4:	2101      	movs	r1, #1
   144d6:	4091      	lsls	r1, r2
   144d8:	000a      	movs	r2, r1
   144da:	601a      	str	r2, [r3, #0]
}
   144dc:	46c0      	nop			; (mov r8, r8)
   144de:	46bd      	mov	sp, r7
   144e0:	b002      	add	sp, #8
   144e2:	bd80      	pop	{r7, pc}
   144e4:	e000e100 	.word	0xe000e100

000144e8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   144e8:	b580      	push	{r7, lr}
   144ea:	b084      	sub	sp, #16
   144ec:	af00      	add	r7, sp, #0
   144ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   144f0:	687b      	ldr	r3, [r7, #4]
   144f2:	681b      	ldr	r3, [r3, #0]
   144f4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   144f6:	68fb      	ldr	r3, [r7, #12]
   144f8:	69db      	ldr	r3, [r3, #28]
   144fa:	1e5a      	subs	r2, r3, #1
   144fc:	4193      	sbcs	r3, r2
   144fe:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   14500:	0018      	movs	r0, r3
   14502:	46bd      	mov	sp, r7
   14504:	b004      	add	sp, #16
   14506:	bd80      	pop	{r7, pc}

00014508 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   14508:	b580      	push	{r7, lr}
   1450a:	b082      	sub	sp, #8
   1450c:	af00      	add	r7, sp, #0
   1450e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   14510:	46c0      	nop			; (mov r8, r8)
   14512:	687b      	ldr	r3, [r7, #4]
   14514:	0018      	movs	r0, r3
   14516:	4b04      	ldr	r3, [pc, #16]	; (14528 <_usart_wait_for_sync+0x20>)
   14518:	4798      	blx	r3
   1451a:	1e03      	subs	r3, r0, #0
   1451c:	d1f9      	bne.n	14512 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1451e:	46c0      	nop			; (mov r8, r8)
   14520:	46bd      	mov	sp, r7
   14522:	b002      	add	sp, #8
   14524:	bd80      	pop	{r7, pc}
   14526:	46c0      	nop			; (mov r8, r8)
   14528:	000144e9 	.word	0x000144e9

0001452c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1452c:	b580      	push	{r7, lr}
   1452e:	b082      	sub	sp, #8
   14530:	af00      	add	r7, sp, #0
   14532:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   14534:	687b      	ldr	r3, [r7, #4]
   14536:	2280      	movs	r2, #128	; 0x80
   14538:	05d2      	lsls	r2, r2, #23
   1453a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1453c:	687b      	ldr	r3, [r7, #4]
   1453e:	2200      	movs	r2, #0
   14540:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   14542:	687b      	ldr	r3, [r7, #4]
   14544:	22ff      	movs	r2, #255	; 0xff
   14546:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   14548:	687b      	ldr	r3, [r7, #4]
   1454a:	2200      	movs	r2, #0
   1454c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1454e:	687b      	ldr	r3, [r7, #4]
   14550:	2200      	movs	r2, #0
   14552:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   14554:	687b      	ldr	r3, [r7, #4]
   14556:	2296      	movs	r2, #150	; 0x96
   14558:	0192      	lsls	r2, r2, #6
   1455a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1455c:	687b      	ldr	r3, [r7, #4]
   1455e:	2224      	movs	r2, #36	; 0x24
   14560:	2101      	movs	r1, #1
   14562:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   14564:	687b      	ldr	r3, [r7, #4]
   14566:	2225      	movs	r2, #37	; 0x25
   14568:	2101      	movs	r1, #1
   1456a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1456c:	687b      	ldr	r3, [r7, #4]
   1456e:	2226      	movs	r2, #38	; 0x26
   14570:	2100      	movs	r1, #0
   14572:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   14574:	687b      	ldr	r3, [r7, #4]
   14576:	2227      	movs	r2, #39	; 0x27
   14578:	2100      	movs	r1, #0
   1457a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1457c:	687b      	ldr	r3, [r7, #4]
   1457e:	2200      	movs	r2, #0
   14580:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   14582:	687b      	ldr	r3, [r7, #4]
   14584:	2288      	movs	r2, #136	; 0x88
   14586:	0352      	lsls	r2, r2, #13
   14588:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1458a:	687b      	ldr	r3, [r7, #4]
   1458c:	222c      	movs	r2, #44	; 0x2c
   1458e:	2100      	movs	r1, #0
   14590:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   14592:	687b      	ldr	r3, [r7, #4]
   14594:	222d      	movs	r2, #45	; 0x2d
   14596:	2100      	movs	r1, #0
   14598:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1459a:	687b      	ldr	r3, [r7, #4]
   1459c:	2200      	movs	r2, #0
   1459e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   145a0:	687b      	ldr	r3, [r7, #4]
   145a2:	2200      	movs	r2, #0
   145a4:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   145a6:	687b      	ldr	r3, [r7, #4]
   145a8:	2200      	movs	r2, #0
   145aa:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   145ac:	687b      	ldr	r3, [r7, #4]
   145ae:	2200      	movs	r2, #0
   145b0:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   145b2:	687b      	ldr	r3, [r7, #4]
   145b4:	2200      	movs	r2, #0
   145b6:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   145b8:	687b      	ldr	r3, [r7, #4]
   145ba:	2200      	movs	r2, #0
   145bc:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   145be:	687b      	ldr	r3, [r7, #4]
   145c0:	2200      	movs	r2, #0
   145c2:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   145c4:	687b      	ldr	r3, [r7, #4]
   145c6:	2200      	movs	r2, #0
   145c8:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   145ca:	687b      	ldr	r3, [r7, #4]
   145cc:	2200      	movs	r2, #0
   145ce:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   145d0:	687b      	ldr	r3, [r7, #4]
   145d2:	2200      	movs	r2, #0
   145d4:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   145d6:	687b      	ldr	r3, [r7, #4]
   145d8:	2213      	movs	r2, #19
   145da:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   145dc:	687b      	ldr	r3, [r7, #4]
   145de:	2200      	movs	r2, #0
   145e0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   145e2:	46c0      	nop			; (mov r8, r8)
   145e4:	46bd      	mov	sp, r7
   145e6:	b002      	add	sp, #8
   145e8:	bd80      	pop	{r7, pc}
	...

000145ec <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   145ec:	b580      	push	{r7, lr}
   145ee:	b084      	sub	sp, #16
   145f0:	af00      	add	r7, sp, #0
   145f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   145f4:	687b      	ldr	r3, [r7, #4]
   145f6:	681b      	ldr	r3, [r3, #0]
   145f8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   145fa:	687b      	ldr	r3, [r7, #4]
   145fc:	681b      	ldr	r3, [r3, #0]
   145fe:	0018      	movs	r0, r3
   14600:	4b09      	ldr	r3, [pc, #36]	; (14628 <usart_enable+0x3c>)
   14602:	4798      	blx	r3
   14604:	0003      	movs	r3, r0
   14606:	0018      	movs	r0, r3
   14608:	4b08      	ldr	r3, [pc, #32]	; (1462c <usart_enable+0x40>)
   1460a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1460c:	687b      	ldr	r3, [r7, #4]
   1460e:	0018      	movs	r0, r3
   14610:	4b07      	ldr	r3, [pc, #28]	; (14630 <usart_enable+0x44>)
   14612:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   14614:	68fb      	ldr	r3, [r7, #12]
   14616:	681b      	ldr	r3, [r3, #0]
   14618:	2202      	movs	r2, #2
   1461a:	431a      	orrs	r2, r3
   1461c:	68fb      	ldr	r3, [r7, #12]
   1461e:	601a      	str	r2, [r3, #0]
}
   14620:	46c0      	nop			; (mov r8, r8)
   14622:	46bd      	mov	sp, r7
   14624:	b004      	add	sp, #16
   14626:	bd80      	pop	{r7, pc}
   14628:	000281ed 	.word	0x000281ed
   1462c:	000144bd 	.word	0x000144bd
   14630:	00014509 	.word	0x00014509

00014634 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   14634:	b580      	push	{r7, lr}
   14636:	b082      	sub	sp, #8
   14638:	af00      	add	r7, sp, #0
   1463a:	6078      	str	r0, [r7, #4]
   1463c:	000a      	movs	r2, r1
   1463e:	1cfb      	adds	r3, r7, #3
   14640:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   14642:	687b      	ldr	r3, [r7, #4]
   14644:	2231      	movs	r2, #49	; 0x31
   14646:	5c9b      	ldrb	r3, [r3, r2]
   14648:	b25a      	sxtb	r2, r3
   1464a:	1cfb      	adds	r3, r7, #3
   1464c:	781b      	ldrb	r3, [r3, #0]
   1464e:	2101      	movs	r1, #1
   14650:	4099      	lsls	r1, r3
   14652:	000b      	movs	r3, r1
   14654:	b25b      	sxtb	r3, r3
   14656:	4313      	orrs	r3, r2
   14658:	b25b      	sxtb	r3, r3
   1465a:	b2d9      	uxtb	r1, r3
   1465c:	687b      	ldr	r3, [r7, #4]
   1465e:	2231      	movs	r2, #49	; 0x31
   14660:	5499      	strb	r1, [r3, r2]

}
   14662:	46c0      	nop			; (mov r8, r8)
   14664:	46bd      	mov	sp, r7
   14666:	b002      	add	sp, #8
   14668:	bd80      	pop	{r7, pc}
	...

0001466c <distUsartWritecallback>:
/******************************************************************************
 *  Callback Declaration
 ******************************************************************************/
// Callback for when we finish writing characters to UART
void distUsartWritecallback(struct usart_module *const usart_module)
{
   1466c:	b580      	push	{r7, lr}
   1466e:	b084      	sub	sp, #16
   14670:	af00      	add	r7, sp, #0
   14672:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14674:	2300      	movs	r3, #0
   14676:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
   14678:	4b09      	ldr	r3, [pc, #36]	; (146a0 <distUsartWritecallback+0x34>)
   1467a:	681b      	ldr	r3, [r3, #0]
   1467c:	220c      	movs	r2, #12
   1467e:	18ba      	adds	r2, r7, r2
   14680:	0011      	movs	r1, r2
   14682:	0018      	movs	r0, r3
   14684:	4b07      	ldr	r3, [pc, #28]	; (146a4 <distUsartWritecallback+0x38>)
   14686:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14688:	68fb      	ldr	r3, [r7, #12]
   1468a:	2b00      	cmp	r3, #0
   1468c:	d003      	beq.n	14696 <distUsartWritecallback+0x2a>
   1468e:	4b06      	ldr	r3, [pc, #24]	; (146a8 <distUsartWritecallback+0x3c>)
   14690:	2280      	movs	r2, #128	; 0x80
   14692:	0552      	lsls	r2, r2, #21
   14694:	601a      	str	r2, [r3, #0]
}
   14696:	46c0      	nop			; (mov r8, r8)
   14698:	46bd      	mov	sp, r7
   1469a:	b004      	add	sp, #16
   1469c:	bd80      	pop	{r7, pc}
   1469e:	46c0      	nop			; (mov r8, r8)
   146a0:	2000441c 	.word	0x2000441c
   146a4:	0001b8a9 	.word	0x0001b8a9
   146a8:	e000ed04 	.word	0xe000ed04

000146ac <distUsartReadcallback>:
// Callback for when we finish writing characters to UART

void distUsartReadcallback(struct usart_module *const usart_module)
{
   146ac:	b580      	push	{r7, lr}
   146ae:	b084      	sub	sp, #16
   146b0:	af00      	add	r7, sp, #0
   146b2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   146b4:	2300      	movs	r3, #0
   146b6:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
   146b8:	4b09      	ldr	r3, [pc, #36]	; (146e0 <distUsartReadcallback+0x34>)
   146ba:	681b      	ldr	r3, [r3, #0]
   146bc:	220c      	movs	r2, #12
   146be:	18ba      	adds	r2, r7, r2
   146c0:	0011      	movs	r1, r2
   146c2:	0018      	movs	r0, r3
   146c4:	4b07      	ldr	r3, [pc, #28]	; (146e4 <distUsartReadcallback+0x38>)
   146c6:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   146c8:	68fb      	ldr	r3, [r7, #12]
   146ca:	2b00      	cmp	r3, #0
   146cc:	d003      	beq.n	146d6 <distUsartReadcallback+0x2a>
   146ce:	4b06      	ldr	r3, [pc, #24]	; (146e8 <distUsartReadcallback+0x3c>)
   146d0:	2280      	movs	r2, #128	; 0x80
   146d2:	0552      	lsls	r2, r2, #21
   146d4:	601a      	str	r2, [r3, #0]
}
   146d6:	46c0      	nop			; (mov r8, r8)
   146d8:	46bd      	mov	sp, r7
   146da:	b004      	add	sp, #16
   146dc:	bd80      	pop	{r7, pc}
   146de:	46c0      	nop			; (mov r8, r8)
   146e0:	2000441c 	.word	0x2000441c
   146e4:	0001b8a9 	.word	0x0001b8a9
   146e8:	e000ed04 	.word	0xe000ed04

000146ec <InitializeDistanceSensor>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeDistanceSensor(void)
{
   146ec:	b580      	push	{r7, lr}
   146ee:	af00      	add	r7, sp, #0
    // Configure USART and Callbacks
    configure_usart();
   146f0:	4b10      	ldr	r3, [pc, #64]	; (14734 <InitializeDistanceSensor+0x48>)
   146f2:	4798      	blx	r3
    configure_usart_callbacks();
   146f4:	4b10      	ldr	r3, [pc, #64]	; (14738 <InitializeDistanceSensor+0x4c>)
   146f6:	4798      	blx	r3

    sensorDistanceMutexHandle = xSemaphoreCreateMutex();
   146f8:	2001      	movs	r0, #1
   146fa:	4b10      	ldr	r3, [pc, #64]	; (1473c <InitializeDistanceSensor+0x50>)
   146fc:	4798      	blx	r3
   146fe:	0002      	movs	r2, r0
   14700:	4b0f      	ldr	r3, [pc, #60]	; (14740 <InitializeDistanceSensor+0x54>)
   14702:	601a      	str	r2, [r3, #0]
    sensorDistanceSemaphoreHandle = xSemaphoreCreateBinary();
   14704:	2203      	movs	r2, #3
   14706:	2100      	movs	r1, #0
   14708:	2001      	movs	r0, #1
   1470a:	4b0e      	ldr	r3, [pc, #56]	; (14744 <InitializeDistanceSensor+0x58>)
   1470c:	4798      	blx	r3
   1470e:	0002      	movs	r2, r0
   14710:	4b0d      	ldr	r3, [pc, #52]	; (14748 <InitializeDistanceSensor+0x5c>)
   14712:	601a      	str	r2, [r3, #0]

    if (NULL == sensorDistanceMutexHandle || NULL == sensorDistanceSemaphoreHandle) {
   14714:	4b0a      	ldr	r3, [pc, #40]	; (14740 <InitializeDistanceSensor+0x54>)
   14716:	681b      	ldr	r3, [r3, #0]
   14718:	2b00      	cmp	r3, #0
   1471a:	d003      	beq.n	14724 <InitializeDistanceSensor+0x38>
   1471c:	4b0a      	ldr	r3, [pc, #40]	; (14748 <InitializeDistanceSensor+0x5c>)
   1471e:	681b      	ldr	r3, [r3, #0]
   14720:	2b00      	cmp	r3, #0
   14722:	d103      	bne.n	1472c <InitializeDistanceSensor+0x40>
        SerialConsoleWriteString((char *)"Could not initialize Distance Sensor!");
   14724:	4b09      	ldr	r3, [pc, #36]	; (1474c <InitializeDistanceSensor+0x60>)
   14726:	0018      	movs	r0, r3
   14728:	4b09      	ldr	r3, [pc, #36]	; (14750 <InitializeDistanceSensor+0x64>)
   1472a:	4798      	blx	r3
    }
}
   1472c:	46c0      	nop			; (mov r8, r8)
   1472e:	46bd      	mov	sp, r7
   14730:	bd80      	pop	{r7, pc}
   14732:	46c0      	nop			; (mov r8, r8)
   14734:	00014825 	.word	0x00014825
   14738:	0001489d 	.word	0x0001489d
   1473c:	0001b1e1 	.word	0x0001b1e1
   14740:	20004420 	.word	0x20004420
   14744:	0001af79 	.word	0x0001af79
   14748:	2000441c 	.word	0x2000441c
   1474c:	00036dd0 	.word	0x00036dd0
   14750:	0001e8d9 	.word	0x0001e8d9

00014754 <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   14754:	b580      	push	{r7, lr}
   14756:	b084      	sub	sp, #16
   14758:	af00      	add	r7, sp, #0
   1475a:	6078      	str	r0, [r7, #4]
   1475c:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   1475e:	2300      	movs	r3, #0
   14760:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   14762:	2396      	movs	r3, #150	; 0x96
   14764:	005b      	lsls	r3, r3, #1
   14766:	0018      	movs	r0, r3
   14768:	4b25      	ldr	r3, [pc, #148]	; (14800 <DistanceSensorGetDistance+0xac>)
   1476a:	4798      	blx	r3
   1476c:	0003      	movs	r3, r0
   1476e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   14770:	68fb      	ldr	r3, [r7, #12]
   14772:	2b00      	cmp	r3, #0
   14774:	d139      	bne.n	147ea <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   14776:	4b23      	ldr	r3, [pc, #140]	; (14804 <DistanceSensorGetDistance+0xb0>)
   14778:	2255      	movs	r2, #85	; 0x55
   1477a:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   1477c:	4921      	ldr	r1, [pc, #132]	; (14804 <DistanceSensorGetDistance+0xb0>)
   1477e:	4b22      	ldr	r3, [pc, #136]	; (14808 <DistanceSensorGetDistance+0xb4>)
   14780:	2201      	movs	r2, #1
   14782:	0018      	movs	r0, r3
   14784:	4b21      	ldr	r3, [pc, #132]	; (1480c <DistanceSensorGetDistance+0xb8>)
   14786:	4798      	blx	r3
   14788:	1e03      	subs	r3, r0, #0
   1478a:	d130      	bne.n	147ee <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   1478c:	4b20      	ldr	r3, [pc, #128]	; (14810 <DistanceSensorGetDistance+0xbc>)
   1478e:	681b      	ldr	r3, [r3, #0]
   14790:	683a      	ldr	r2, [r7, #0]
   14792:	0011      	movs	r1, r2
   14794:	0018      	movs	r0, r3
   14796:	4b1f      	ldr	r3, [pc, #124]	; (14814 <DistanceSensorGetDistance+0xc0>)
   14798:	4798      	blx	r3
   1479a:	0003      	movs	r3, r0
   1479c:	2b01      	cmp	r3, #1
   1479e:	d003      	beq.n	147a8 <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   147a0:	2303      	movs	r3, #3
   147a2:	425b      	negs	r3, r3
   147a4:	60fb      	str	r3, [r7, #12]
        goto exitf;
   147a6:	e023      	b.n	147f0 <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   147a8:	491b      	ldr	r1, [pc, #108]	; (14818 <DistanceSensorGetDistance+0xc4>)
   147aa:	4b17      	ldr	r3, [pc, #92]	; (14808 <DistanceSensorGetDistance+0xb4>)
   147ac:	2202      	movs	r2, #2
   147ae:	0018      	movs	r0, r3
   147b0:	4b1a      	ldr	r3, [pc, #104]	; (1481c <DistanceSensorGetDistance+0xc8>)
   147b2:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   147b4:	4b16      	ldr	r3, [pc, #88]	; (14810 <DistanceSensorGetDistance+0xbc>)
   147b6:	681b      	ldr	r3, [r3, #0]
   147b8:	683a      	ldr	r2, [r7, #0]
   147ba:	0011      	movs	r1, r2
   147bc:	0018      	movs	r0, r3
   147be:	4b15      	ldr	r3, [pc, #84]	; (14814 <DistanceSensorGetDistance+0xc0>)
   147c0:	4798      	blx	r3
   147c2:	0003      	movs	r3, r0
   147c4:	2b01      	cmp	r3, #1
   147c6:	d10c      	bne.n	147e2 <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   147c8:	4b13      	ldr	r3, [pc, #76]	; (14818 <DistanceSensorGetDistance+0xc4>)
   147ca:	781b      	ldrb	r3, [r3, #0]
   147cc:	b29b      	uxth	r3, r3
   147ce:	021b      	lsls	r3, r3, #8
   147d0:	b29a      	uxth	r2, r3
   147d2:	4b11      	ldr	r3, [pc, #68]	; (14818 <DistanceSensorGetDistance+0xc4>)
   147d4:	785b      	ldrb	r3, [r3, #1]
   147d6:	b29b      	uxth	r3, r3
   147d8:	18d3      	adds	r3, r2, r3
   147da:	b29a      	uxth	r2, r3
   147dc:	687b      	ldr	r3, [r7, #4]
   147de:	801a      	strh	r2, [r3, #0]
   147e0:	e006      	b.n	147f0 <DistanceSensorGetDistance+0x9c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   147e2:	2303      	movs	r3, #3
   147e4:	425b      	negs	r3, r3
   147e6:	60fb      	str	r3, [r7, #12]
        goto exitf;
   147e8:	e002      	b.n	147f0 <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   147ea:	46c0      	nop			; (mov r8, r8)
   147ec:	e000      	b.n	147f0 <DistanceSensorGetDistance+0x9c>
        goto exitf;
   147ee:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   147f0:	4b0b      	ldr	r3, [pc, #44]	; (14820 <DistanceSensorGetDistance+0xcc>)
   147f2:	4798      	blx	r3

    return error;
   147f4:	68fb      	ldr	r3, [r7, #12]
}
   147f6:	0018      	movs	r0, r3
   147f8:	46bd      	mov	sp, r7
   147fa:	b004      	add	sp, #16
   147fc:	bd80      	pop	{r7, pc}
   147fe:	46c0      	nop			; (mov r8, r8)
   14800:	00014921 	.word	0x00014921
   14804:	2000441a 	.word	0x2000441a
   14808:	20004424 	.word	0x20004424
   1480c:	00029a4d 	.word	0x00029a4d
   14810:	2000441c 	.word	0x2000441c
   14814:	0001bf31 	.word	0x0001bf31
   14818:	20004418 	.word	0x20004418
   1481c:	00029a95 	.word	0x00029a95
   14820:	000148e9 	.word	0x000148e9

00014824 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   14824:	b580      	push	{r7, lr}
   14826:	b090      	sub	sp, #64	; 0x40
   14828:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1482a:	003b      	movs	r3, r7
   1482c:	0018      	movs	r0, r3
   1482e:	4b14      	ldr	r3, [pc, #80]	; (14880 <configure_usart+0x5c>)
   14830:	4798      	blx	r3

    config_usart.baudrate = 9600;
   14832:	003b      	movs	r3, r7
   14834:	2296      	movs	r2, #150	; 0x96
   14836:	0192      	lsls	r2, r2, #6
   14838:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   1483a:	003b      	movs	r3, r7
   1483c:	2280      	movs	r2, #128	; 0x80
   1483e:	0352      	lsls	r2, r2, #13
   14840:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;
   14842:	003b      	movs	r3, r7
   14844:	4a0f      	ldr	r2, [pc, #60]	; (14884 <configure_usart+0x60>)
   14846:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;
   14848:	003b      	movs	r3, r7
   1484a:	4a0f      	ldr	r2, [pc, #60]	; (14888 <configure_usart+0x64>)
   1484c:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
   1484e:	003b      	movs	r3, r7
   14850:	2201      	movs	r2, #1
   14852:	4252      	negs	r2, r2
   14854:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
   14856:	003b      	movs	r3, r7
   14858:	2201      	movs	r2, #1
   1485a:	4252      	negs	r2, r2
   1485c:	63da      	str	r2, [r3, #60]	; 0x3c

    while (usart_init(&usart_instance_dist, SERCOM5, &config_usart) != STATUS_OK) {
   1485e:	46c0      	nop			; (mov r8, r8)
   14860:	003a      	movs	r2, r7
   14862:	490a      	ldr	r1, [pc, #40]	; (1488c <configure_usart+0x68>)
   14864:	4b0a      	ldr	r3, [pc, #40]	; (14890 <configure_usart+0x6c>)
   14866:	0018      	movs	r0, r3
   14868:	4b0a      	ldr	r3, [pc, #40]	; (14894 <configure_usart+0x70>)
   1486a:	4798      	blx	r3
   1486c:	1e03      	subs	r3, r0, #0
   1486e:	d1f7      	bne.n	14860 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance_dist);
   14870:	4b07      	ldr	r3, [pc, #28]	; (14890 <configure_usart+0x6c>)
   14872:	0018      	movs	r0, r3
   14874:	4b08      	ldr	r3, [pc, #32]	; (14898 <configure_usart+0x74>)
   14876:	4798      	blx	r3
}
   14878:	46c0      	nop			; (mov r8, r8)
   1487a:	46bd      	mov	sp, r7
   1487c:	b010      	add	sp, #64	; 0x40
   1487e:	bd80      	pop	{r7, pc}
   14880:	0001452d 	.word	0x0001452d
   14884:	00220003 	.word	0x00220003
   14888:	00230003 	.word	0x00230003
   1488c:	42001c00 	.word	0x42001c00
   14890:	20004424 	.word	0x20004424
   14894:	00029651 	.word	0x00029651
   14898:	000145ed 	.word	0x000145ed

0001489c <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1489c:	b580      	push	{r7, lr}
   1489e:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance_dist, distUsartWritecallback, USART_CALLBACK_BUFFER_TRANSMITTED);
   148a0:	490c      	ldr	r1, [pc, #48]	; (148d4 <configure_usart_callbacks+0x38>)
   148a2:	4b0d      	ldr	r3, [pc, #52]	; (148d8 <configure_usart_callbacks+0x3c>)
   148a4:	2200      	movs	r2, #0
   148a6:	0018      	movs	r0, r3
   148a8:	4b0c      	ldr	r3, [pc, #48]	; (148dc <configure_usart_callbacks+0x40>)
   148aa:	4798      	blx	r3
    usart_register_callback(&usart_instance_dist, distUsartReadcallback, USART_CALLBACK_BUFFER_RECEIVED);
   148ac:	490c      	ldr	r1, [pc, #48]	; (148e0 <configure_usart_callbacks+0x44>)
   148ae:	4b0a      	ldr	r3, [pc, #40]	; (148d8 <configure_usart_callbacks+0x3c>)
   148b0:	2201      	movs	r2, #1
   148b2:	0018      	movs	r0, r3
   148b4:	4b09      	ldr	r3, [pc, #36]	; (148dc <configure_usart_callbacks+0x40>)
   148b6:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_TRANSMITTED);
   148b8:	4b07      	ldr	r3, [pc, #28]	; (148d8 <configure_usart_callbacks+0x3c>)
   148ba:	2100      	movs	r1, #0
   148bc:	0018      	movs	r0, r3
   148be:	4b09      	ldr	r3, [pc, #36]	; (148e4 <configure_usart_callbacks+0x48>)
   148c0:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_RECEIVED);
   148c2:	4b05      	ldr	r3, [pc, #20]	; (148d8 <configure_usart_callbacks+0x3c>)
   148c4:	2101      	movs	r1, #1
   148c6:	0018      	movs	r0, r3
   148c8:	4b06      	ldr	r3, [pc, #24]	; (148e4 <configure_usart_callbacks+0x48>)
   148ca:	4798      	blx	r3
}
   148cc:	46c0      	nop			; (mov r8, r8)
   148ce:	46bd      	mov	sp, r7
   148d0:	bd80      	pop	{r7, pc}
   148d2:	46c0      	nop			; (mov r8, r8)
   148d4:	0001466d 	.word	0x0001466d
   148d8:	20004424 	.word	0x20004424
   148dc:	00029a05 	.word	0x00029a05
   148e0:	000146ad 	.word	0x000146ad
   148e4:	00014635 	.word	0x00014635

000148e8 <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   148e8:	b590      	push	{r4, r7, lr}
   148ea:	b083      	sub	sp, #12
   148ec:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   148ee:	2300      	movs	r3, #0
   148f0:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   148f2:	4b09      	ldr	r3, [pc, #36]	; (14918 <DistanceSensorFreeMutex+0x30>)
   148f4:	6818      	ldr	r0, [r3, #0]
   148f6:	2300      	movs	r3, #0
   148f8:	2200      	movs	r2, #0
   148fa:	2100      	movs	r1, #0
   148fc:	4c07      	ldr	r4, [pc, #28]	; (1491c <DistanceSensorFreeMutex+0x34>)
   148fe:	47a0      	blx	r4
   14900:	0003      	movs	r3, r0
   14902:	2b01      	cmp	r3, #1
   14904:	d002      	beq.n	1490c <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14906:	2314      	movs	r3, #20
   14908:	425b      	negs	r3, r3
   1490a:	607b      	str	r3, [r7, #4]
    }
    return error;
   1490c:	687b      	ldr	r3, [r7, #4]
}
   1490e:	0018      	movs	r0, r3
   14910:	46bd      	mov	sp, r7
   14912:	b003      	add	sp, #12
   14914:	bd90      	pop	{r4, r7, pc}
   14916:	46c0      	nop			; (mov r8, r8)
   14918:	20004420 	.word	0x20004420
   1491c:	0001b221 	.word	0x0001b221

00014920 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   14920:	b580      	push	{r7, lr}
   14922:	b084      	sub	sp, #16
   14924:	af00      	add	r7, sp, #0
   14926:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14928:	2300      	movs	r3, #0
   1492a:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   1492c:	4b08      	ldr	r3, [pc, #32]	; (14950 <DistanceSensorGetMutex+0x30>)
   1492e:	681b      	ldr	r3, [r3, #0]
   14930:	687a      	ldr	r2, [r7, #4]
   14932:	0011      	movs	r1, r2
   14934:	0018      	movs	r0, r3
   14936:	4b07      	ldr	r3, [pc, #28]	; (14954 <DistanceSensorGetMutex+0x34>)
   14938:	4798      	blx	r3
   1493a:	0003      	movs	r3, r0
   1493c:	2b01      	cmp	r3, #1
   1493e:	d002      	beq.n	14946 <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   14940:	231d      	movs	r3, #29
   14942:	425b      	negs	r3, r3
   14944:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14946:	68fb      	ldr	r3, [r7, #12]
   14948:	0018      	movs	r0, r3
   1494a:	46bd      	mov	sp, r7
   1494c:	b004      	add	sp, #16
   1494e:	bd80      	pop	{r7, pc}
   14950:	20004420 	.word	0x20004420
   14954:	0001bf31 	.word	0x0001bf31

00014958 <system_interrupt_enable>:
{
   14958:	b580      	push	{r7, lr}
   1495a:	b082      	sub	sp, #8
   1495c:	af00      	add	r7, sp, #0
   1495e:	0002      	movs	r2, r0
   14960:	1dfb      	adds	r3, r7, #7
   14962:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14964:	4b06      	ldr	r3, [pc, #24]	; (14980 <system_interrupt_enable+0x28>)
   14966:	1dfa      	adds	r2, r7, #7
   14968:	7812      	ldrb	r2, [r2, #0]
   1496a:	0011      	movs	r1, r2
   1496c:	221f      	movs	r2, #31
   1496e:	400a      	ands	r2, r1
   14970:	2101      	movs	r1, #1
   14972:	4091      	lsls	r1, r2
   14974:	000a      	movs	r2, r1
   14976:	601a      	str	r2, [r3, #0]
}
   14978:	46c0      	nop			; (mov r8, r8)
   1497a:	46bd      	mov	sp, r7
   1497c:	b002      	add	sp, #8
   1497e:	bd80      	pop	{r7, pc}
   14980:	e000e100 	.word	0xe000e100

00014984 <i2c_master_is_syncing>:
{
   14984:	b580      	push	{r7, lr}
   14986:	b084      	sub	sp, #16
   14988:	af00      	add	r7, sp, #0
   1498a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1498c:	687b      	ldr	r3, [r7, #4]
   1498e:	681b      	ldr	r3, [r3, #0]
   14990:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   14992:	68fb      	ldr	r3, [r7, #12]
   14994:	69db      	ldr	r3, [r3, #28]
   14996:	2207      	movs	r2, #7
   14998:	4013      	ands	r3, r2
   1499a:	1e5a      	subs	r2, r3, #1
   1499c:	4193      	sbcs	r3, r2
   1499e:	b2db      	uxtb	r3, r3
}
   149a0:	0018      	movs	r0, r3
   149a2:	46bd      	mov	sp, r7
   149a4:	b004      	add	sp, #16
   149a6:	bd80      	pop	{r7, pc}

000149a8 <_i2c_master_wait_for_sync>:
{
   149a8:	b580      	push	{r7, lr}
   149aa:	b082      	sub	sp, #8
   149ac:	af00      	add	r7, sp, #0
   149ae:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   149b0:	46c0      	nop			; (mov r8, r8)
   149b2:	687b      	ldr	r3, [r7, #4]
   149b4:	0018      	movs	r0, r3
   149b6:	4b04      	ldr	r3, [pc, #16]	; (149c8 <_i2c_master_wait_for_sync+0x20>)
   149b8:	4798      	blx	r3
   149ba:	1e03      	subs	r3, r0, #0
   149bc:	d1f9      	bne.n	149b2 <_i2c_master_wait_for_sync+0xa>
}
   149be:	46c0      	nop			; (mov r8, r8)
   149c0:	46bd      	mov	sp, r7
   149c2:	b002      	add	sp, #8
   149c4:	bd80      	pop	{r7, pc}
   149c6:	46c0      	nop			; (mov r8, r8)
   149c8:	00014985 	.word	0x00014985

000149cc <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   149cc:	b580      	push	{r7, lr}
   149ce:	b082      	sub	sp, #8
   149d0:	af00      	add	r7, sp, #0
   149d2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   149d4:	687b      	ldr	r3, [r7, #4]
   149d6:	2264      	movs	r2, #100	; 0x64
   149d8:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   149da:	687b      	ldr	r3, [r7, #4]
   149dc:	4a1b      	ldr	r2, [pc, #108]	; (14a4c <i2c_master_get_config_defaults+0x80>)
   149de:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   149e0:	687b      	ldr	r3, [r7, #4]
   149e2:	2200      	movs	r2, #0
   149e4:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   149e6:	687b      	ldr	r3, [r7, #4]
   149e8:	2200      	movs	r2, #0
   149ea:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   149ec:	687b      	ldr	r3, [r7, #4]
   149ee:	2200      	movs	r2, #0
   149f0:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   149f2:	687b      	ldr	r3, [r7, #4]
   149f4:	2280      	movs	r2, #128	; 0x80
   149f6:	0392      	lsls	r2, r2, #14
   149f8:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   149fa:	687b      	ldr	r3, [r7, #4]
   149fc:	2201      	movs	r2, #1
   149fe:	4252      	negs	r2, r2
   14a00:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   14a02:	687b      	ldr	r3, [r7, #4]
   14a04:	2201      	movs	r2, #1
   14a06:	4252      	negs	r2, r2
   14a08:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   14a0a:	687b      	ldr	r3, [r7, #4]
   14a0c:	2200      	movs	r2, #0
   14a0e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14a10:	687b      	ldr	r3, [r7, #4]
   14a12:	2200      	movs	r2, #0
   14a14:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   14a16:	687b      	ldr	r3, [r7, #4]
   14a18:	2224      	movs	r2, #36	; 0x24
   14a1a:	2100      	movs	r1, #0
   14a1c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   14a1e:	687b      	ldr	r3, [r7, #4]
   14a20:	2200      	movs	r2, #0
   14a22:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   14a24:	687b      	ldr	r3, [r7, #4]
   14a26:	222c      	movs	r2, #44	; 0x2c
   14a28:	2100      	movs	r1, #0
   14a2a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   14a2c:	687b      	ldr	r3, [r7, #4]
   14a2e:	222d      	movs	r2, #45	; 0x2d
   14a30:	2100      	movs	r1, #0
   14a32:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   14a34:	687b      	ldr	r3, [r7, #4]
   14a36:	222e      	movs	r2, #46	; 0x2e
   14a38:	2100      	movs	r1, #0
   14a3a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   14a3c:	687b      	ldr	r3, [r7, #4]
   14a3e:	22d7      	movs	r2, #215	; 0xd7
   14a40:	861a      	strh	r2, [r3, #48]	; 0x30
}
   14a42:	46c0      	nop			; (mov r8, r8)
   14a44:	46bd      	mov	sp, r7
   14a46:	b002      	add	sp, #8
   14a48:	bd80      	pop	{r7, pc}
   14a4a:	46c0      	nop			; (mov r8, r8)
   14a4c:	00000d48 	.word	0x00000d48

00014a50 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   14a50:	b580      	push	{r7, lr}
   14a52:	b084      	sub	sp, #16
   14a54:	af00      	add	r7, sp, #0
   14a56:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14a58:	687b      	ldr	r3, [r7, #4]
   14a5a:	681b      	ldr	r3, [r3, #0]
   14a5c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   14a5e:	2300      	movs	r3, #0
   14a60:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14a62:	687b      	ldr	r3, [r7, #4]
   14a64:	0018      	movs	r0, r3
   14a66:	4b14      	ldr	r3, [pc, #80]	; (14ab8 <i2c_master_enable+0x68>)
   14a68:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   14a6a:	68bb      	ldr	r3, [r7, #8]
   14a6c:	681b      	ldr	r3, [r3, #0]
   14a6e:	2202      	movs	r2, #2
   14a70:	431a      	orrs	r2, r3
   14a72:	68bb      	ldr	r3, [r7, #8]
   14a74:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14a76:	687b      	ldr	r3, [r7, #4]
   14a78:	681b      	ldr	r3, [r3, #0]
   14a7a:	0018      	movs	r0, r3
   14a7c:	4b0f      	ldr	r3, [pc, #60]	; (14abc <i2c_master_enable+0x6c>)
   14a7e:	4798      	blx	r3
   14a80:	0003      	movs	r3, r0
   14a82:	0018      	movs	r0, r3
   14a84:	4b0e      	ldr	r3, [pc, #56]	; (14ac0 <i2c_master_enable+0x70>)
   14a86:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14a88:	e00c      	b.n	14aa4 <i2c_master_enable+0x54>
		timeout_counter++;
   14a8a:	68fb      	ldr	r3, [r7, #12]
   14a8c:	3301      	adds	r3, #1
   14a8e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14a90:	687b      	ldr	r3, [r7, #4]
   14a92:	88db      	ldrh	r3, [r3, #6]
   14a94:	001a      	movs	r2, r3
   14a96:	68fb      	ldr	r3, [r7, #12]
   14a98:	429a      	cmp	r2, r3
   14a9a:	d803      	bhi.n	14aa4 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   14a9c:	68bb      	ldr	r3, [r7, #8]
   14a9e:	2210      	movs	r2, #16
   14aa0:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14aa2:	e006      	b.n	14ab2 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14aa4:	68bb      	ldr	r3, [r7, #8]
   14aa6:	8b5b      	ldrh	r3, [r3, #26]
   14aa8:	b29b      	uxth	r3, r3
   14aaa:	001a      	movs	r2, r3
   14aac:	2310      	movs	r3, #16
   14aae:	4013      	ands	r3, r2
   14ab0:	d0eb      	beq.n	14a8a <i2c_master_enable+0x3a>
		}
	}
}
   14ab2:	46bd      	mov	sp, r7
   14ab4:	b004      	add	sp, #16
   14ab6:	bd80      	pop	{r7, pc}
   14ab8:	000149a9 	.word	0x000149a9
   14abc:	000281ed 	.word	0x000281ed
   14ac0:	00014959 	.word	0x00014959

00014ac4 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14ac4:	b580      	push	{r7, lr}
   14ac6:	b082      	sub	sp, #8
   14ac8:	af00      	add	r7, sp, #0
   14aca:	6078      	str	r0, [r7, #4]
   14acc:	000a      	movs	r2, r1
   14ace:	1cfb      	adds	r3, r7, #3
   14ad0:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14ad2:	687b      	ldr	r3, [r7, #4]
   14ad4:	7e5b      	ldrb	r3, [r3, #25]
   14ad6:	b2db      	uxtb	r3, r3
   14ad8:	b25a      	sxtb	r2, r3
   14ada:	1cfb      	adds	r3, r7, #3
   14adc:	781b      	ldrb	r3, [r3, #0]
   14ade:	2101      	movs	r1, #1
   14ae0:	4099      	lsls	r1, r3
   14ae2:	000b      	movs	r3, r1
   14ae4:	b25b      	sxtb	r3, r3
   14ae6:	4313      	orrs	r3, r2
   14ae8:	b25b      	sxtb	r3, r3
   14aea:	b2da      	uxtb	r2, r3
   14aec:	687b      	ldr	r3, [r7, #4]
   14aee:	765a      	strb	r2, [r3, #25]
}
   14af0:	46c0      	nop			; (mov r8, r8)
   14af2:	46bd      	mov	sp, r7
   14af4:	b002      	add	sp, #8
   14af6:	bd80      	pop	{r7, pc}

00014af8 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   14af8:	b590      	push	{r4, r7, lr}
   14afa:	b091      	sub	sp, #68	; 0x44
   14afc:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14afe:	2300      	movs	r3, #0
   14b00:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   14b02:	233a      	movs	r3, #58	; 0x3a
   14b04:	18fb      	adds	r3, r7, r3
   14b06:	2200      	movs	r2, #0
   14b08:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   14b0a:	1d3b      	adds	r3, r7, #4
   14b0c:	0018      	movs	r0, r3
   14b0e:	4b21      	ldr	r3, [pc, #132]	; (14b94 <I2cDriverConfigureSensorBus+0x9c>)
   14b10:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   14b12:	1d3b      	adds	r3, r7, #4
   14b14:	4a20      	ldr	r2, [pc, #128]	; (14b98 <I2cDriverConfigureSensorBus+0xa0>)
   14b16:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   14b18:	1d3b      	adds	r3, r7, #4
   14b1a:	4a20      	ldr	r2, [pc, #128]	; (14b9c <I2cDriverConfigureSensorBus+0xa4>)
   14b1c:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   14b1e:	1d3b      	adds	r3, r7, #4
   14b20:	22fa      	movs	r2, #250	; 0xfa
   14b22:	0092      	lsls	r2, r2, #2
   14b24:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14b26:	233b      	movs	r3, #59	; 0x3b
   14b28:	18fb      	adds	r3, r7, r3
   14b2a:	2203      	movs	r2, #3
   14b2c:	701a      	strb	r2, [r3, #0]
   14b2e:	e01e      	b.n	14b6e <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   14b30:	233a      	movs	r3, #58	; 0x3a
   14b32:	18fc      	adds	r4, r7, r3
   14b34:	1d3a      	adds	r2, r7, #4
   14b36:	491a      	ldr	r1, [pc, #104]	; (14ba0 <I2cDriverConfigureSensorBus+0xa8>)
   14b38:	4b1a      	ldr	r3, [pc, #104]	; (14ba4 <I2cDriverConfigureSensorBus+0xac>)
   14b3a:	0018      	movs	r0, r3
   14b3c:	4b1a      	ldr	r3, [pc, #104]	; (14ba8 <I2cDriverConfigureSensorBus+0xb0>)
   14b3e:	4798      	blx	r3
   14b40:	0003      	movs	r3, r0
   14b42:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   14b44:	233a      	movs	r3, #58	; 0x3a
   14b46:	18fb      	adds	r3, r7, r3
   14b48:	781b      	ldrb	r3, [r3, #0]
   14b4a:	2b00      	cmp	r3, #0
   14b4c:	d104      	bne.n	14b58 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   14b4e:	233a      	movs	r3, #58	; 0x3a
   14b50:	18fb      	adds	r3, r7, r3
   14b52:	781b      	ldrb	r3, [r3, #0]
   14b54:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   14b56:	e00f      	b.n	14b78 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   14b58:	4b12      	ldr	r3, [pc, #72]	; (14ba4 <I2cDriverConfigureSensorBus+0xac>)
   14b5a:	0018      	movs	r0, r3
   14b5c:	4b13      	ldr	r3, [pc, #76]	; (14bac <I2cDriverConfigureSensorBus+0xb4>)
   14b5e:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14b60:	233b      	movs	r3, #59	; 0x3b
   14b62:	18fb      	adds	r3, r7, r3
   14b64:	781a      	ldrb	r2, [r3, #0]
   14b66:	233b      	movs	r3, #59	; 0x3b
   14b68:	18fb      	adds	r3, r7, r3
   14b6a:	3a01      	subs	r2, #1
   14b6c:	701a      	strb	r2, [r3, #0]
   14b6e:	233b      	movs	r3, #59	; 0x3b
   14b70:	18fb      	adds	r3, r7, r3
   14b72:	781b      	ldrb	r3, [r3, #0]
   14b74:	2b00      	cmp	r3, #0
   14b76:	d1db      	bne.n	14b30 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   14b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b7a:	2b00      	cmp	r3, #0
   14b7c:	d104      	bne.n	14b88 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   14b7e:	4b09      	ldr	r3, [pc, #36]	; (14ba4 <I2cDriverConfigureSensorBus+0xac>)
   14b80:	0018      	movs	r0, r3
   14b82:	4b0b      	ldr	r3, [pc, #44]	; (14bb0 <I2cDriverConfigureSensorBus+0xb8>)
   14b84:	4798      	blx	r3
   14b86:	e000      	b.n	14b8a <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   14b88:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   14b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   14b8c:	0018      	movs	r0, r3
   14b8e:	46bd      	mov	sp, r7
   14b90:	b011      	add	sp, #68	; 0x44
   14b92:	bd90      	pop	{r4, r7, pc}
   14b94:	000149cd 	.word	0x000149cd
   14b98:	00080002 	.word	0x00080002
   14b9c:	00090002 	.word	0x00090002
   14ba0:	42000800 	.word	0x42000800
   14ba4:	2000445c 	.word	0x2000445c
   14ba8:	0001860d 	.word	0x0001860d
   14bac:	00018741 	.word	0x00018741
   14bb0:	00014a51 	.word	0x00014a51

00014bb4 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14bb4:	b580      	push	{r7, lr}
   14bb6:	b084      	sub	sp, #16
   14bb8:	af00      	add	r7, sp, #0
   14bba:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14bbc:	4b0e      	ldr	r3, [pc, #56]	; (14bf8 <I2cSensorsTxComplete+0x44>)
   14bbe:	2200      	movs	r2, #0
   14bc0:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14bc2:	4b0d      	ldr	r3, [pc, #52]	; (14bf8 <I2cSensorsTxComplete+0x44>)
   14bc4:	2201      	movs	r2, #1
   14bc6:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14bc8:	2300      	movs	r3, #0
   14bca:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14bcc:	4b0b      	ldr	r3, [pc, #44]	; (14bfc <I2cSensorsTxComplete+0x48>)
   14bce:	681b      	ldr	r3, [r3, #0]
   14bd0:	220c      	movs	r2, #12
   14bd2:	18ba      	adds	r2, r7, r2
   14bd4:	0011      	movs	r1, r2
   14bd6:	0018      	movs	r0, r3
   14bd8:	4b09      	ldr	r3, [pc, #36]	; (14c00 <I2cSensorsTxComplete+0x4c>)
   14bda:	4798      	blx	r3
    sensorTransmitError = false;
   14bdc:	4b09      	ldr	r3, [pc, #36]	; (14c04 <I2cSensorsTxComplete+0x50>)
   14bde:	2200      	movs	r2, #0
   14be0:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14be2:	68fb      	ldr	r3, [r7, #12]
   14be4:	2b00      	cmp	r3, #0
   14be6:	d003      	beq.n	14bf0 <I2cSensorsTxComplete+0x3c>
   14be8:	4b07      	ldr	r3, [pc, #28]	; (14c08 <I2cSensorsTxComplete+0x54>)
   14bea:	2280      	movs	r2, #128	; 0x80
   14bec:	0552      	lsls	r2, r2, #21
   14bee:	601a      	str	r2, [r3, #0]
}
   14bf0:	46c0      	nop			; (mov r8, r8)
   14bf2:	46bd      	mov	sp, r7
   14bf4:	b004      	add	sp, #16
   14bf6:	bd80      	pop	{r7, pc}
   14bf8:	2000062c 	.word	0x2000062c
   14bfc:	20004484 	.word	0x20004484
   14c00:	0001b8a9 	.word	0x0001b8a9
   14c04:	20000628 	.word	0x20000628
   14c08:	e000ed04 	.word	0xe000ed04

00014c0c <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   14c0c:	b580      	push	{r7, lr}
   14c0e:	b084      	sub	sp, #16
   14c10:	af00      	add	r7, sp, #0
   14c12:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14c14:	4b0e      	ldr	r3, [pc, #56]	; (14c50 <I2cSensorsRxComplete+0x44>)
   14c16:	2200      	movs	r2, #0
   14c18:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14c1a:	4b0d      	ldr	r3, [pc, #52]	; (14c50 <I2cSensorsRxComplete+0x44>)
   14c1c:	2201      	movs	r2, #1
   14c1e:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14c20:	2300      	movs	r3, #0
   14c22:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14c24:	4b0b      	ldr	r3, [pc, #44]	; (14c54 <I2cSensorsRxComplete+0x48>)
   14c26:	681b      	ldr	r3, [r3, #0]
   14c28:	220c      	movs	r2, #12
   14c2a:	18ba      	adds	r2, r7, r2
   14c2c:	0011      	movs	r1, r2
   14c2e:	0018      	movs	r0, r3
   14c30:	4b09      	ldr	r3, [pc, #36]	; (14c58 <I2cSensorsRxComplete+0x4c>)
   14c32:	4798      	blx	r3
    sensorTransmitError = false;
   14c34:	4b09      	ldr	r3, [pc, #36]	; (14c5c <I2cSensorsRxComplete+0x50>)
   14c36:	2200      	movs	r2, #0
   14c38:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14c3a:	68fb      	ldr	r3, [r7, #12]
   14c3c:	2b00      	cmp	r3, #0
   14c3e:	d003      	beq.n	14c48 <I2cSensorsRxComplete+0x3c>
   14c40:	4b07      	ldr	r3, [pc, #28]	; (14c60 <I2cSensorsRxComplete+0x54>)
   14c42:	2280      	movs	r2, #128	; 0x80
   14c44:	0552      	lsls	r2, r2, #21
   14c46:	601a      	str	r2, [r3, #0]
}
   14c48:	46c0      	nop			; (mov r8, r8)
   14c4a:	46bd      	mov	sp, r7
   14c4c:	b004      	add	sp, #16
   14c4e:	bd80      	pop	{r7, pc}
   14c50:	2000062c 	.word	0x2000062c
   14c54:	20004484 	.word	0x20004484
   14c58:	0001b8a9 	.word	0x0001b8a9
   14c5c:	20000628 	.word	0x20000628
   14c60:	e000ed04 	.word	0xe000ed04

00014c64 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14c64:	b580      	push	{r7, lr}
   14c66:	b084      	sub	sp, #16
   14c68:	af00      	add	r7, sp, #0
   14c6a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14c6c:	4b0e      	ldr	r3, [pc, #56]	; (14ca8 <I2cSensorsError+0x44>)
   14c6e:	2200      	movs	r2, #0
   14c70:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   14c72:	4b0d      	ldr	r3, [pc, #52]	; (14ca8 <I2cSensorsError+0x44>)
   14c74:	2201      	movs	r2, #1
   14c76:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14c78:	2300      	movs	r3, #0
   14c7a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14c7c:	4b0b      	ldr	r3, [pc, #44]	; (14cac <I2cSensorsError+0x48>)
   14c7e:	681b      	ldr	r3, [r3, #0]
   14c80:	220c      	movs	r2, #12
   14c82:	18ba      	adds	r2, r7, r2
   14c84:	0011      	movs	r1, r2
   14c86:	0018      	movs	r0, r3
   14c88:	4b09      	ldr	r3, [pc, #36]	; (14cb0 <I2cSensorsError+0x4c>)
   14c8a:	4798      	blx	r3
    sensorTransmitError = true;
   14c8c:	4b09      	ldr	r3, [pc, #36]	; (14cb4 <I2cSensorsError+0x50>)
   14c8e:	2201      	movs	r2, #1
   14c90:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14c92:	68fb      	ldr	r3, [r7, #12]
   14c94:	2b00      	cmp	r3, #0
   14c96:	d003      	beq.n	14ca0 <I2cSensorsError+0x3c>
   14c98:	4b07      	ldr	r3, [pc, #28]	; (14cb8 <I2cSensorsError+0x54>)
   14c9a:	2280      	movs	r2, #128	; 0x80
   14c9c:	0552      	lsls	r2, r2, #21
   14c9e:	601a      	str	r2, [r3, #0]
}
   14ca0:	46c0      	nop			; (mov r8, r8)
   14ca2:	46bd      	mov	sp, r7
   14ca4:	b004      	add	sp, #16
   14ca6:	bd80      	pop	{r7, pc}
   14ca8:	2000062c 	.word	0x2000062c
   14cac:	20004484 	.word	0x20004484
   14cb0:	0001b8a9 	.word	0x0001b8a9
   14cb4:	20000628 	.word	0x20000628
   14cb8:	e000ed04 	.word	0xe000ed04

00014cbc <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14cbc:	b580      	push	{r7, lr}
   14cbe:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14cc0:	4911      	ldr	r1, [pc, #68]	; (14d08 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   14cc2:	4b12      	ldr	r3, [pc, #72]	; (14d0c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14cc4:	2200      	movs	r2, #0
   14cc6:	0018      	movs	r0, r3
   14cc8:	4b11      	ldr	r3, [pc, #68]	; (14d10 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14cca:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14ccc:	4b0f      	ldr	r3, [pc, #60]	; (14d0c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14cce:	2100      	movs	r1, #0
   14cd0:	0018      	movs	r0, r3
   14cd2:	4b10      	ldr	r3, [pc, #64]	; (14d14 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14cd4:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14cd6:	4910      	ldr	r1, [pc, #64]	; (14d18 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   14cd8:	4b0c      	ldr	r3, [pc, #48]	; (14d0c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14cda:	2201      	movs	r2, #1
   14cdc:	0018      	movs	r0, r3
   14cde:	4b0c      	ldr	r3, [pc, #48]	; (14d10 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14ce0:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14ce2:	4b0a      	ldr	r3, [pc, #40]	; (14d0c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14ce4:	2101      	movs	r1, #1
   14ce6:	0018      	movs	r0, r3
   14ce8:	4b0a      	ldr	r3, [pc, #40]	; (14d14 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14cea:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14cec:	490b      	ldr	r1, [pc, #44]	; (14d1c <I2cDriverRegisterSensorBusCallbacks+0x60>)
   14cee:	4b07      	ldr	r3, [pc, #28]	; (14d0c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14cf0:	2202      	movs	r2, #2
   14cf2:	0018      	movs	r0, r3
   14cf4:	4b06      	ldr	r3, [pc, #24]	; (14d10 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14cf6:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   14cf8:	4b04      	ldr	r3, [pc, #16]	; (14d0c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14cfa:	2102      	movs	r1, #2
   14cfc:	0018      	movs	r0, r3
   14cfe:	4b05      	ldr	r3, [pc, #20]	; (14d14 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14d00:	4798      	blx	r3
}
   14d02:	46c0      	nop			; (mov r8, r8)
   14d04:	46bd      	mov	sp, r7
   14d06:	bd80      	pop	{r7, pc}
   14d08:	00014bb5 	.word	0x00014bb5
   14d0c:	2000445c 	.word	0x2000445c
   14d10:	00013561 	.word	0x00013561
   14d14:	00014ac5 	.word	0x00014ac5
   14d18:	00014c0d 	.word	0x00014c0d
   14d1c:	00014c65 	.word	0x00014c65

00014d20 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   14d20:	b580      	push	{r7, lr}
   14d22:	b082      	sub	sp, #8
   14d24:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14d26:	2300      	movs	r3, #0
   14d28:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   14d2a:	4b14      	ldr	r3, [pc, #80]	; (14d7c <I2cInitializeDriver+0x5c>)
   14d2c:	4798      	blx	r3
   14d2e:	0003      	movs	r3, r0
   14d30:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   14d32:	687b      	ldr	r3, [r7, #4]
   14d34:	2b00      	cmp	r3, #0
   14d36:	d11a      	bne.n	14d6e <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   14d38:	4b11      	ldr	r3, [pc, #68]	; (14d80 <I2cInitializeDriver+0x60>)
   14d3a:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   14d3c:	2001      	movs	r0, #1
   14d3e:	4b11      	ldr	r3, [pc, #68]	; (14d84 <I2cInitializeDriver+0x64>)
   14d40:	4798      	blx	r3
   14d42:	0002      	movs	r2, r0
   14d44:	4b10      	ldr	r3, [pc, #64]	; (14d88 <I2cInitializeDriver+0x68>)
   14d46:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   14d48:	2203      	movs	r2, #3
   14d4a:	2100      	movs	r1, #0
   14d4c:	2001      	movs	r0, #1
   14d4e:	4b0f      	ldr	r3, [pc, #60]	; (14d8c <I2cInitializeDriver+0x6c>)
   14d50:	4798      	blx	r3
   14d52:	0002      	movs	r2, r0
   14d54:	4b0e      	ldr	r3, [pc, #56]	; (14d90 <I2cInitializeDriver+0x70>)
   14d56:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   14d58:	4b0b      	ldr	r3, [pc, #44]	; (14d88 <I2cInitializeDriver+0x68>)
   14d5a:	681b      	ldr	r3, [r3, #0]
   14d5c:	2b00      	cmp	r3, #0
   14d5e:	d003      	beq.n	14d68 <I2cInitializeDriver+0x48>
   14d60:	4b0b      	ldr	r3, [pc, #44]	; (14d90 <I2cInitializeDriver+0x70>)
   14d62:	681b      	ldr	r3, [r3, #0]
   14d64:	2b00      	cmp	r3, #0
   14d66:	d103      	bne.n	14d70 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   14d68:	2306      	movs	r3, #6
   14d6a:	607b      	str	r3, [r7, #4]
        goto exit;
   14d6c:	e000      	b.n	14d70 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   14d6e:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14d70:	687b      	ldr	r3, [r7, #4]
}
   14d72:	0018      	movs	r0, r3
   14d74:	46bd      	mov	sp, r7
   14d76:	b002      	add	sp, #8
   14d78:	bd80      	pop	{r7, pc}
   14d7a:	46c0      	nop			; (mov r8, r8)
   14d7c:	00014af9 	.word	0x00014af9
   14d80:	00014cbd 	.word	0x00014cbd
   14d84:	0001b1e1 	.word	0x0001b1e1
   14d88:	20004458 	.word	0x20004458
   14d8c:	0001af79 	.word	0x0001af79
   14d90:	20004484 	.word	0x20004484

00014d94 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14d94:	b590      	push	{r4, r7, lr}
   14d96:	b085      	sub	sp, #20
   14d98:	af00      	add	r7, sp, #0
   14d9a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14d9c:	2300      	movs	r3, #0
   14d9e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14da0:	687b      	ldr	r3, [r7, #4]
   14da2:	2b00      	cmp	r3, #0
   14da4:	d003      	beq.n	14dae <I2cWriteData+0x1a>
   14da6:	687b      	ldr	r3, [r7, #4]
   14da8:	685b      	ldr	r3, [r3, #4]
   14daa:	2b00      	cmp	r3, #0
   14dac:	d103      	bne.n	14db6 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   14dae:	2308      	movs	r3, #8
   14db0:	425b      	negs	r3, r3
   14db2:	60fb      	str	r3, [r7, #12]
        goto exit;
   14db4:	e01f      	b.n	14df6 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   14db6:	687b      	ldr	r3, [r7, #4]
   14db8:	781b      	ldrb	r3, [r3, #0]
   14dba:	b29a      	uxth	r2, r3
   14dbc:	4b10      	ldr	r3, [pc, #64]	; (14e00 <I2cWriteData+0x6c>)
   14dbe:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   14dc0:	687b      	ldr	r3, [r7, #4]
   14dc2:	685a      	ldr	r2, [r3, #4]
   14dc4:	4b0e      	ldr	r3, [pc, #56]	; (14e00 <I2cWriteData+0x6c>)
   14dc6:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   14dc8:	687b      	ldr	r3, [r7, #4]
   14dca:	89da      	ldrh	r2, [r3, #14]
   14dcc:	4b0c      	ldr	r3, [pc, #48]	; (14e00 <I2cWriteData+0x6c>)
   14dce:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14dd0:	230b      	movs	r3, #11
   14dd2:	18fc      	adds	r4, r7, r3
   14dd4:	4a0a      	ldr	r2, [pc, #40]	; (14e00 <I2cWriteData+0x6c>)
   14dd6:	4b0b      	ldr	r3, [pc, #44]	; (14e04 <I2cWriteData+0x70>)
   14dd8:	0011      	movs	r1, r2
   14dda:	0018      	movs	r0, r3
   14ddc:	4b0a      	ldr	r3, [pc, #40]	; (14e08 <I2cWriteData+0x74>)
   14dde:	4798      	blx	r3
   14de0:	0003      	movs	r3, r0
   14de2:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14de4:	230b      	movs	r3, #11
   14de6:	18fb      	adds	r3, r7, r3
   14de8:	781b      	ldrb	r3, [r3, #0]
   14dea:	2b00      	cmp	r3, #0
   14dec:	d003      	beq.n	14df6 <I2cWriteData+0x62>
        error = ERROR_IO;
   14dee:	2306      	movs	r3, #6
   14df0:	425b      	negs	r3, r3
   14df2:	60fb      	str	r3, [r7, #12]
        goto exit;
   14df4:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14df6:	68fb      	ldr	r3, [r7, #12]
}
   14df8:	0018      	movs	r0, r3
   14dfa:	46bd      	mov	sp, r7
   14dfc:	b005      	add	sp, #20
   14dfe:	bd90      	pop	{r4, r7, pc}
   14e00:	20004488 	.word	0x20004488
   14e04:	2000445c 	.word	0x2000445c
   14e08:	000137e5 	.word	0x000137e5

00014e0c <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   14e0c:	b590      	push	{r4, r7, lr}
   14e0e:	b085      	sub	sp, #20
   14e10:	af00      	add	r7, sp, #0
   14e12:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14e14:	2300      	movs	r3, #0
   14e16:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14e18:	687b      	ldr	r3, [r7, #4]
   14e1a:	2b00      	cmp	r3, #0
   14e1c:	d003      	beq.n	14e26 <I2cReadData+0x1a>
   14e1e:	687b      	ldr	r3, [r7, #4]
   14e20:	685b      	ldr	r3, [r3, #4]
   14e22:	2b00      	cmp	r3, #0
   14e24:	d103      	bne.n	14e2e <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   14e26:	2308      	movs	r3, #8
   14e28:	425b      	negs	r3, r3
   14e2a:	60fb      	str	r3, [r7, #12]
        goto exit;
   14e2c:	e01f      	b.n	14e6e <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   14e2e:	687b      	ldr	r3, [r7, #4]
   14e30:	781b      	ldrb	r3, [r3, #0]
   14e32:	b29a      	uxth	r2, r3
   14e34:	4b10      	ldr	r3, [pc, #64]	; (14e78 <I2cReadData+0x6c>)
   14e36:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   14e38:	687b      	ldr	r3, [r7, #4]
   14e3a:	689a      	ldr	r2, [r3, #8]
   14e3c:	4b0e      	ldr	r3, [pc, #56]	; (14e78 <I2cReadData+0x6c>)
   14e3e:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   14e40:	687b      	ldr	r3, [r7, #4]
   14e42:	899a      	ldrh	r2, [r3, #12]
   14e44:	4b0c      	ldr	r3, [pc, #48]	; (14e78 <I2cReadData+0x6c>)
   14e46:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14e48:	230b      	movs	r3, #11
   14e4a:	18fc      	adds	r4, r7, r3
   14e4c:	4a0a      	ldr	r2, [pc, #40]	; (14e78 <I2cReadData+0x6c>)
   14e4e:	4b0b      	ldr	r3, [pc, #44]	; (14e7c <I2cReadData+0x70>)
   14e50:	0011      	movs	r1, r2
   14e52:	0018      	movs	r0, r3
   14e54:	4b0a      	ldr	r3, [pc, #40]	; (14e80 <I2cReadData+0x74>)
   14e56:	4798      	blx	r3
   14e58:	0003      	movs	r3, r0
   14e5a:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14e5c:	230b      	movs	r3, #11
   14e5e:	18fb      	adds	r3, r7, r3
   14e60:	781b      	ldrb	r3, [r3, #0]
   14e62:	2b00      	cmp	r3, #0
   14e64:	d003      	beq.n	14e6e <I2cReadData+0x62>
        error = ERROR_IO;
   14e66:	2306      	movs	r3, #6
   14e68:	425b      	negs	r3, r3
   14e6a:	60fb      	str	r3, [r7, #12]
        goto exit;
   14e6c:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14e6e:	68fb      	ldr	r3, [r7, #12]
}
   14e70:	0018      	movs	r0, r3
   14e72:	46bd      	mov	sp, r7
   14e74:	b005      	add	sp, #20
   14e76:	bd90      	pop	{r4, r7, pc}
   14e78:	20004488 	.word	0x20004488
   14e7c:	2000445c 	.word	0x2000445c
   14e80:	00013701 	.word	0x00013701

00014e84 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14e84:	b590      	push	{r4, r7, lr}
   14e86:	b083      	sub	sp, #12
   14e88:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14e8a:	2300      	movs	r3, #0
   14e8c:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   14e8e:	4b09      	ldr	r3, [pc, #36]	; (14eb4 <I2cFreeMutex+0x30>)
   14e90:	6818      	ldr	r0, [r3, #0]
   14e92:	2300      	movs	r3, #0
   14e94:	2200      	movs	r2, #0
   14e96:	2100      	movs	r1, #0
   14e98:	4c07      	ldr	r4, [pc, #28]	; (14eb8 <I2cFreeMutex+0x34>)
   14e9a:	47a0      	blx	r4
   14e9c:	0003      	movs	r3, r0
   14e9e:	2b01      	cmp	r3, #1
   14ea0:	d002      	beq.n	14ea8 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14ea2:	2314      	movs	r3, #20
   14ea4:	425b      	negs	r3, r3
   14ea6:	607b      	str	r3, [r7, #4]
    }
    return error;
   14ea8:	687b      	ldr	r3, [r7, #4]
}
   14eaa:	0018      	movs	r0, r3
   14eac:	46bd      	mov	sp, r7
   14eae:	b003      	add	sp, #12
   14eb0:	bd90      	pop	{r4, r7, pc}
   14eb2:	46c0      	nop			; (mov r8, r8)
   14eb4:	20004458 	.word	0x20004458
   14eb8:	0001b221 	.word	0x0001b221

00014ebc <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14ebc:	b580      	push	{r7, lr}
   14ebe:	b084      	sub	sp, #16
   14ec0:	af00      	add	r7, sp, #0
   14ec2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14ec4:	2300      	movs	r3, #0
   14ec6:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   14ec8:	4b08      	ldr	r3, [pc, #32]	; (14eec <I2cGetMutex+0x30>)
   14eca:	681b      	ldr	r3, [r3, #0]
   14ecc:	687a      	ldr	r2, [r7, #4]
   14ece:	0011      	movs	r1, r2
   14ed0:	0018      	movs	r0, r3
   14ed2:	4b07      	ldr	r3, [pc, #28]	; (14ef0 <I2cGetMutex+0x34>)
   14ed4:	4798      	blx	r3
   14ed6:	0003      	movs	r3, r0
   14ed8:	2b01      	cmp	r3, #1
   14eda:	d002      	beq.n	14ee2 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14edc:	231d      	movs	r3, #29
   14ede:	425b      	negs	r3, r3
   14ee0:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14ee2:	68fb      	ldr	r3, [r7, #12]
}
   14ee4:	0018      	movs	r0, r3
   14ee6:	46bd      	mov	sp, r7
   14ee8:	b004      	add	sp, #16
   14eea:	bd80      	pop	{r7, pc}
   14eec:	20004458 	.word	0x20004458
   14ef0:	0001bf31 	.word	0x0001bf31

00014ef4 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14ef4:	b580      	push	{r7, lr}
   14ef6:	b084      	sub	sp, #16
   14ef8:	af00      	add	r7, sp, #0
   14efa:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14efc:	2300      	movs	r3, #0
   14efe:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   14f00:	4b04      	ldr	r3, [pc, #16]	; (14f14 <I2cGetSemaphoreHandle+0x20>)
   14f02:	681a      	ldr	r2, [r3, #0]
   14f04:	687b      	ldr	r3, [r7, #4]
   14f06:	601a      	str	r2, [r3, #0]
    return error;
   14f08:	68fb      	ldr	r3, [r7, #12]
}
   14f0a:	0018      	movs	r0, r3
   14f0c:	46bd      	mov	sp, r7
   14f0e:	b004      	add	sp, #16
   14f10:	bd80      	pop	{r7, pc}
   14f12:	46c0      	nop			; (mov r8, r8)
   14f14:	20004484 	.word	0x20004484

00014f18 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   14f18:	b580      	push	{r7, lr}
   14f1a:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   14f1c:	4b02      	ldr	r3, [pc, #8]	; (14f28 <I2cGetTaskErrorStatus+0x10>)
   14f1e:	781b      	ldrb	r3, [r3, #0]
}
   14f20:	0018      	movs	r0, r3
   14f22:	46bd      	mov	sp, r7
   14f24:	bd80      	pop	{r7, pc}
   14f26:	46c0      	nop			; (mov r8, r8)
   14f28:	20000628 	.word	0x20000628

00014f2c <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   14f2c:	b580      	push	{r7, lr}
   14f2e:	b082      	sub	sp, #8
   14f30:	af00      	add	r7, sp, #0
   14f32:	0002      	movs	r2, r0
   14f34:	1dfb      	adds	r3, r7, #7
   14f36:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   14f38:	4b03      	ldr	r3, [pc, #12]	; (14f48 <I2cSetTaskErrorStatus+0x1c>)
   14f3a:	1dfa      	adds	r2, r7, #7
   14f3c:	7812      	ldrb	r2, [r2, #0]
   14f3e:	701a      	strb	r2, [r3, #0]
}
   14f40:	46c0      	nop			; (mov r8, r8)
   14f42:	46bd      	mov	sp, r7
   14f44:	b002      	add	sp, #8
   14f46:	bd80      	pop	{r7, pc}
   14f48:	20000628 	.word	0x20000628

00014f4c <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   14f4c:	b580      	push	{r7, lr}
   14f4e:	b084      	sub	sp, #16
   14f50:	af00      	add	r7, sp, #0
   14f52:	6078      	str	r0, [r7, #4]
   14f54:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   14f56:	2300      	movs	r3, #0
   14f58:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   14f5a:	2300      	movs	r3, #0
   14f5c:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14f5e:	2396      	movs	r3, #150	; 0x96
   14f60:	005b      	lsls	r3, r3, #1
   14f62:	0018      	movs	r0, r3
   14f64:	4b28      	ldr	r3, [pc, #160]	; (15008 <I2cWriteDataWait+0xbc>)
   14f66:	4798      	blx	r3
   14f68:	0003      	movs	r3, r0
   14f6a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14f6c:	68fb      	ldr	r3, [r7, #12]
   14f6e:	2b00      	cmp	r3, #0
   14f70:	d138      	bne.n	14fe4 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14f72:	2308      	movs	r3, #8
   14f74:	18fb      	adds	r3, r7, r3
   14f76:	0018      	movs	r0, r3
   14f78:	4b24      	ldr	r3, [pc, #144]	; (1500c <I2cWriteDataWait+0xc0>)
   14f7a:	4798      	blx	r3
   14f7c:	0003      	movs	r3, r0
   14f7e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14f80:	68fb      	ldr	r3, [r7, #12]
   14f82:	2b00      	cmp	r3, #0
   14f84:	d130      	bne.n	14fe8 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14f86:	687b      	ldr	r3, [r7, #4]
   14f88:	0018      	movs	r0, r3
   14f8a:	4b21      	ldr	r3, [pc, #132]	; (15010 <I2cWriteDataWait+0xc4>)
   14f8c:	4798      	blx	r3
   14f8e:	0003      	movs	r3, r0
   14f90:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   14f92:	68fb      	ldr	r3, [r7, #12]
   14f94:	2b00      	cmp	r3, #0
   14f96:	d12a      	bne.n	14fee <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14f98:	68bb      	ldr	r3, [r7, #8]
   14f9a:	683a      	ldr	r2, [r7, #0]
   14f9c:	0011      	movs	r1, r2
   14f9e:	0018      	movs	r0, r3
   14fa0:	4b1c      	ldr	r3, [pc, #112]	; (15014 <I2cWriteDataWait+0xc8>)
   14fa2:	4798      	blx	r3
   14fa4:	0003      	movs	r3, r0
   14fa6:	2b01      	cmp	r3, #1
   14fa8:	d111      	bne.n	14fce <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14faa:	4b1b      	ldr	r3, [pc, #108]	; (15018 <I2cWriteDataWait+0xcc>)
   14fac:	4798      	blx	r3
   14fae:	1e03      	subs	r3, r0, #0
   14fb0:	d011      	beq.n	14fd6 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   14fb2:	2000      	movs	r0, #0
   14fb4:	4b19      	ldr	r3, [pc, #100]	; (1501c <I2cWriteDataWait+0xd0>)
   14fb6:	4798      	blx	r3
            if (error != ERROR_NONE) {
   14fb8:	68fb      	ldr	r3, [r7, #12]
   14fba:	2b00      	cmp	r3, #0
   14fbc:	d003      	beq.n	14fc6 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   14fbe:	2321      	movs	r3, #33	; 0x21
   14fc0:	425b      	negs	r3, r3
   14fc2:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   14fc4:	e014      	b.n	14ff0 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   14fc6:	2303      	movs	r3, #3
   14fc8:	425b      	negs	r3, r3
   14fca:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14fcc:	e010      	b.n	14ff0 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14fce:	2303      	movs	r3, #3
   14fd0:	425b      	negs	r3, r3
   14fd2:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   14fd4:	e00c      	b.n	14ff0 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   14fd6:	4b12      	ldr	r3, [pc, #72]	; (15020 <I2cWriteDataWait+0xd4>)
   14fd8:	4798      	blx	r3
   14fda:	0002      	movs	r2, r0
   14fdc:	68fb      	ldr	r3, [r7, #12]
   14fde:	4313      	orrs	r3, r2
   14fe0:	60fb      	str	r3, [r7, #12]
   14fe2:	e002      	b.n	14fea <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14fe4:	46c0      	nop			; (mov r8, r8)
   14fe6:	e000      	b.n	14fea <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14fe8:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14fea:	68fb      	ldr	r3, [r7, #12]
   14fec:	e007      	b.n	14ffe <I2cWriteDataWait+0xb2>
        goto exitError0;
   14fee:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   14ff0:	4b0b      	ldr	r3, [pc, #44]	; (15020 <I2cWriteDataWait+0xd4>)
   14ff2:	4798      	blx	r3
   14ff4:	0002      	movs	r2, r0
   14ff6:	68fb      	ldr	r3, [r7, #12]
   14ff8:	4313      	orrs	r3, r2
   14ffa:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   14ffc:	68fb      	ldr	r3, [r7, #12]
}
   14ffe:	0018      	movs	r0, r3
   15000:	46bd      	mov	sp, r7
   15002:	b004      	add	sp, #16
   15004:	bd80      	pop	{r7, pc}
   15006:	46c0      	nop			; (mov r8, r8)
   15008:	00014ebd 	.word	0x00014ebd
   1500c:	00014ef5 	.word	0x00014ef5
   15010:	00014d95 	.word	0x00014d95
   15014:	0001bf31 	.word	0x0001bf31
   15018:	00014f19 	.word	0x00014f19
   1501c:	00014f2d 	.word	0x00014f2d
   15020:	00014e85 	.word	0x00014e85

00015024 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   15024:	b580      	push	{r7, lr}
   15026:	b086      	sub	sp, #24
   15028:	af00      	add	r7, sp, #0
   1502a:	60f8      	str	r0, [r7, #12]
   1502c:	60b9      	str	r1, [r7, #8]
   1502e:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   15030:	2300      	movs	r3, #0
   15032:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   15034:	2300      	movs	r3, #0
   15036:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   15038:	2396      	movs	r3, #150	; 0x96
   1503a:	005b      	lsls	r3, r3, #1
   1503c:	0018      	movs	r0, r3
   1503e:	4b36      	ldr	r3, [pc, #216]	; (15118 <I2cReadDataWait+0xf4>)
   15040:	4798      	blx	r3
   15042:	0003      	movs	r3, r0
   15044:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   15046:	697b      	ldr	r3, [r7, #20]
   15048:	2b00      	cmp	r3, #0
   1504a:	d155      	bne.n	150f8 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   1504c:	2310      	movs	r3, #16
   1504e:	18fb      	adds	r3, r7, r3
   15050:	0018      	movs	r0, r3
   15052:	4b32      	ldr	r3, [pc, #200]	; (1511c <I2cReadDataWait+0xf8>)
   15054:	4798      	blx	r3
   15056:	0003      	movs	r3, r0
   15058:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1505a:	697b      	ldr	r3, [r7, #20]
   1505c:	2b00      	cmp	r3, #0
   1505e:	d14d      	bne.n	150fc <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   15060:	68fb      	ldr	r3, [r7, #12]
   15062:	0018      	movs	r0, r3
   15064:	4b2e      	ldr	r3, [pc, #184]	; (15120 <I2cReadDataWait+0xfc>)
   15066:	4798      	blx	r3
   15068:	0003      	movs	r3, r0
   1506a:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   1506c:	697b      	ldr	r3, [r7, #20]
   1506e:	2b00      	cmp	r3, #0
   15070:	d147      	bne.n	15102 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15072:	693b      	ldr	r3, [r7, #16]
   15074:	687a      	ldr	r2, [r7, #4]
   15076:	0011      	movs	r1, r2
   15078:	0018      	movs	r0, r3
   1507a:	4b2a      	ldr	r3, [pc, #168]	; (15124 <I2cReadDataWait+0x100>)
   1507c:	4798      	blx	r3
   1507e:	0003      	movs	r3, r0
   15080:	2b01      	cmp	r3, #1
   15082:	d118      	bne.n	150b6 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15084:	4b28      	ldr	r3, [pc, #160]	; (15128 <I2cReadDataWait+0x104>)
   15086:	4798      	blx	r3
   15088:	1e03      	subs	r3, r0, #0
   1508a:	d006      	beq.n	1509a <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   1508c:	2000      	movs	r0, #0
   1508e:	4b27      	ldr	r3, [pc, #156]	; (1512c <I2cReadDataWait+0x108>)
   15090:	4798      	blx	r3
            error = ERROR_ABORTED;
   15092:	2303      	movs	r3, #3
   15094:	425b      	negs	r3, r3
   15096:	617b      	str	r3, [r7, #20]
            goto exitError0;
   15098:	e034      	b.n	15104 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   1509a:	68bb      	ldr	r3, [r7, #8]
   1509c:	0018      	movs	r0, r3
   1509e:	4b24      	ldr	r3, [pc, #144]	; (15130 <I2cReadDataWait+0x10c>)
   150a0:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   150a2:	68fb      	ldr	r3, [r7, #12]
   150a4:	0018      	movs	r0, r3
   150a6:	4b23      	ldr	r3, [pc, #140]	; (15134 <I2cReadDataWait+0x110>)
   150a8:	4798      	blx	r3
   150aa:	0003      	movs	r3, r0
   150ac:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   150ae:	697b      	ldr	r3, [r7, #20]
   150b0:	2b00      	cmp	r3, #0
   150b2:	d004      	beq.n	150be <I2cReadDataWait+0x9a>
        goto exitError0;
   150b4:	e026      	b.n	15104 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   150b6:	2303      	movs	r3, #3
   150b8:	425b      	negs	r3, r3
   150ba:	617b      	str	r3, [r7, #20]
        goto exitError0;
   150bc:	e022      	b.n	15104 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   150be:	693b      	ldr	r3, [r7, #16]
   150c0:	687a      	ldr	r2, [r7, #4]
   150c2:	0011      	movs	r1, r2
   150c4:	0018      	movs	r0, r3
   150c6:	4b17      	ldr	r3, [pc, #92]	; (15124 <I2cReadDataWait+0x100>)
   150c8:	4798      	blx	r3
   150ca:	0003      	movs	r3, r0
   150cc:	2b01      	cmp	r3, #1
   150ce:	d10a      	bne.n	150e6 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   150d0:	4b15      	ldr	r3, [pc, #84]	; (15128 <I2cReadDataWait+0x104>)
   150d2:	4798      	blx	r3
   150d4:	1e03      	subs	r3, r0, #0
   150d6:	d00a      	beq.n	150ee <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   150d8:	2000      	movs	r0, #0
   150da:	4b14      	ldr	r3, [pc, #80]	; (1512c <I2cReadDataWait+0x108>)
   150dc:	4798      	blx	r3
            error = ERROR_ABORTED;
   150de:	2303      	movs	r3, #3
   150e0:	425b      	negs	r3, r3
   150e2:	617b      	str	r3, [r7, #20]
            goto exitError0;
   150e4:	e00e      	b.n	15104 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   150e6:	2303      	movs	r3, #3
   150e8:	425b      	negs	r3, r3
   150ea:	617b      	str	r3, [r7, #20]
        goto exitError0;
   150ec:	e00a      	b.n	15104 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   150ee:	4b12      	ldr	r3, [pc, #72]	; (15138 <I2cReadDataWait+0x114>)
   150f0:	4798      	blx	r3
   150f2:	0003      	movs	r3, r0
   150f4:	617b      	str	r3, [r7, #20]
   150f6:	e002      	b.n	150fe <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   150f8:	46c0      	nop			; (mov r8, r8)
   150fa:	e000      	b.n	150fe <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   150fc:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   150fe:	697b      	ldr	r3, [r7, #20]
   15100:	e005      	b.n	1510e <I2cReadDataWait+0xea>
        goto exitError0;
   15102:	46c0      	nop			; (mov r8, r8)

exitError0:
    error = I2cFreeMutex();
   15104:	4b0c      	ldr	r3, [pc, #48]	; (15138 <I2cReadDataWait+0x114>)
   15106:	4798      	blx	r3
   15108:	0003      	movs	r3, r0
   1510a:	617b      	str	r3, [r7, #20]
    // xSemaphoreGive(semHandle);
    return error;
   1510c:	697b      	ldr	r3, [r7, #20]
}
   1510e:	0018      	movs	r0, r3
   15110:	46bd      	mov	sp, r7
   15112:	b006      	add	sp, #24
   15114:	bd80      	pop	{r7, pc}
   15116:	46c0      	nop			; (mov r8, r8)
   15118:	00014ebd 	.word	0x00014ebd
   1511c:	00014ef5 	.word	0x00014ef5
   15120:	00014d95 	.word	0x00014d95
   15124:	0001bf31 	.word	0x0001bf31
   15128:	00014f19 	.word	0x00014f19
   1512c:	00014f2d 	.word	0x00014f2d
   15130:	0001cc85 	.word	0x0001cc85
   15134:	00014e0d 	.word	0x00014e0d
   15138:	00014e85 	.word	0x00014e85

0001513c <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   1513c:	b5b0      	push	{r4, r5, r7, lr}
   1513e:	b086      	sub	sp, #24
   15140:	af00      	add	r7, sp, #0
   15142:	60f8      	str	r0, [r7, #12]
   15144:	0008      	movs	r0, r1
   15146:	607a      	str	r2, [r7, #4]
   15148:	0019      	movs	r1, r3
   1514a:	230b      	movs	r3, #11
   1514c:	18fb      	adds	r3, r7, r3
   1514e:	1c02      	adds	r2, r0, #0
   15150:	701a      	strb	r2, [r3, #0]
   15152:	2308      	movs	r3, #8
   15154:	18fb      	adds	r3, r7, r3
   15156:	1c0a      	adds	r2, r1, #0
   15158:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   1515a:	68fb      	ldr	r3, [r7, #12]
   1515c:	685c      	ldr	r4, [r3, #4]
   1515e:	68fb      	ldr	r3, [r7, #12]
   15160:	6898      	ldr	r0, [r3, #8]
   15162:	2308      	movs	r3, #8
   15164:	18fb      	adds	r3, r7, r3
   15166:	881d      	ldrh	r5, [r3, #0]
   15168:	687a      	ldr	r2, [r7, #4]
   1516a:	230b      	movs	r3, #11
   1516c:	18fb      	adds	r3, r7, r3
   1516e:	7819      	ldrb	r1, [r3, #0]
   15170:	002b      	movs	r3, r5
   15172:	47a0      	blx	r4
   15174:	0003      	movs	r3, r0
   15176:	617b      	str	r3, [r7, #20]

  return ret;
   15178:	697b      	ldr	r3, [r7, #20]
}
   1517a:	0018      	movs	r0, r3
   1517c:	46bd      	mov	sp, r7
   1517e:	b006      	add	sp, #24
   15180:	bdb0      	pop	{r4, r5, r7, pc}

00015182 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   15182:	b5b0      	push	{r4, r5, r7, lr}
   15184:	b086      	sub	sp, #24
   15186:	af00      	add	r7, sp, #0
   15188:	60f8      	str	r0, [r7, #12]
   1518a:	0008      	movs	r0, r1
   1518c:	607a      	str	r2, [r7, #4]
   1518e:	0019      	movs	r1, r3
   15190:	230b      	movs	r3, #11
   15192:	18fb      	adds	r3, r7, r3
   15194:	1c02      	adds	r2, r0, #0
   15196:	701a      	strb	r2, [r3, #0]
   15198:	2308      	movs	r3, #8
   1519a:	18fb      	adds	r3, r7, r3
   1519c:	1c0a      	adds	r2, r1, #0
   1519e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   151a0:	68fb      	ldr	r3, [r7, #12]
   151a2:	681c      	ldr	r4, [r3, #0]
   151a4:	68fb      	ldr	r3, [r7, #12]
   151a6:	6898      	ldr	r0, [r3, #8]
   151a8:	2308      	movs	r3, #8
   151aa:	18fb      	adds	r3, r7, r3
   151ac:	881d      	ldrh	r5, [r3, #0]
   151ae:	687a      	ldr	r2, [r7, #4]
   151b0:	230b      	movs	r3, #11
   151b2:	18fb      	adds	r3, r7, r3
   151b4:	7819      	ldrb	r1, [r3, #0]
   151b6:	002b      	movs	r3, r5
   151b8:	47a0      	blx	r4
   151ba:	0003      	movs	r3, r0
   151bc:	617b      	str	r3, [r7, #20]

  return ret;
   151be:	697b      	ldr	r3, [r7, #20]
}
   151c0:	0018      	movs	r0, r3
   151c2:	46bd      	mov	sp, r7
   151c4:	b006      	add	sp, #24
   151c6:	bdb0      	pop	{r4, r5, r7, pc}

000151c8 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   151c8:	b580      	push	{r7, lr}
   151ca:	b082      	sub	sp, #8
   151cc:	af00      	add	r7, sp, #0
   151ce:	0002      	movs	r2, r0
   151d0:	1dbb      	adds	r3, r7, #6
   151d2:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   151d4:	1dbb      	adds	r3, r7, #6
   151d6:	2200      	movs	r2, #0
   151d8:	5e9a      	ldrsh	r2, [r3, r2]
   151da:	4b06      	ldr	r3, [pc, #24]	; (151f4 <lsm6dso_from_fs2_to_mg+0x2c>)
   151dc:	0010      	movs	r0, r2
   151de:	4798      	blx	r3
   151e0:	1c02      	adds	r2, r0, #0
   151e2:	4b05      	ldr	r3, [pc, #20]	; (151f8 <lsm6dso_from_fs2_to_mg+0x30>)
   151e4:	4905      	ldr	r1, [pc, #20]	; (151fc <lsm6dso_from_fs2_to_mg+0x34>)
   151e6:	1c10      	adds	r0, r2, #0
   151e8:	4798      	blx	r3
   151ea:	1c03      	adds	r3, r0, #0
}
   151ec:	1c18      	adds	r0, r3, #0
   151ee:	46bd      	mov	sp, r7
   151f0:	b002      	add	sp, #8
   151f2:	bd80      	pop	{r7, pc}
   151f4:	00033b29 	.word	0x00033b29
   151f8:	000338a9 	.word	0x000338a9
   151fc:	3d79db23 	.word	0x3d79db23

00015200 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   15200:	b590      	push	{r4, r7, lr}
   15202:	b085      	sub	sp, #20
   15204:	af00      	add	r7, sp, #0
   15206:	6078      	str	r0, [r7, #4]
   15208:	000a      	movs	r2, r1
   1520a:	1cfb      	adds	r3, r7, #3
   1520c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1520e:	2308      	movs	r3, #8
   15210:	18fa      	adds	r2, r7, r3
   15212:	6878      	ldr	r0, [r7, #4]
   15214:	2301      	movs	r3, #1
   15216:	2110      	movs	r1, #16
   15218:	4c12      	ldr	r4, [pc, #72]	; (15264 <lsm6dso_xl_full_scale_set+0x64>)
   1521a:	47a0      	blx	r4
   1521c:	0003      	movs	r3, r0
   1521e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15220:	68fb      	ldr	r3, [r7, #12]
   15222:	2b00      	cmp	r3, #0
   15224:	d119      	bne.n	1525a <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   15226:	1cfb      	adds	r3, r7, #3
   15228:	781b      	ldrb	r3, [r3, #0]
   1522a:	2203      	movs	r2, #3
   1522c:	4013      	ands	r3, r2
   1522e:	b2da      	uxtb	r2, r3
   15230:	2308      	movs	r3, #8
   15232:	18fb      	adds	r3, r7, r3
   15234:	2103      	movs	r1, #3
   15236:	400a      	ands	r2, r1
   15238:	0090      	lsls	r0, r2, #2
   1523a:	781a      	ldrb	r2, [r3, #0]
   1523c:	210c      	movs	r1, #12
   1523e:	438a      	bics	r2, r1
   15240:	1c11      	adds	r1, r2, #0
   15242:	1c02      	adds	r2, r0, #0
   15244:	430a      	orrs	r2, r1
   15246:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15248:	2308      	movs	r3, #8
   1524a:	18fa      	adds	r2, r7, r3
   1524c:	6878      	ldr	r0, [r7, #4]
   1524e:	2301      	movs	r3, #1
   15250:	2110      	movs	r1, #16
   15252:	4c05      	ldr	r4, [pc, #20]	; (15268 <lsm6dso_xl_full_scale_set+0x68>)
   15254:	47a0      	blx	r4
   15256:	0003      	movs	r3, r0
   15258:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1525a:	68fb      	ldr	r3, [r7, #12]
}
   1525c:	0018      	movs	r0, r3
   1525e:	46bd      	mov	sp, r7
   15260:	b005      	add	sp, #20
   15262:	bd90      	pop	{r4, r7, pc}
   15264:	0001513d 	.word	0x0001513d
   15268:	00015183 	.word	0x00015183

0001526c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   1526c:	b590      	push	{r4, r7, lr}
   1526e:	b087      	sub	sp, #28
   15270:	af00      	add	r7, sp, #0
   15272:	6078      	str	r0, [r7, #4]
   15274:	000a      	movs	r2, r1
   15276:	1cfb      	adds	r3, r7, #3
   15278:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   1527a:	2317      	movs	r3, #23
   1527c:	18fb      	adds	r3, r7, r3
   1527e:	1cfa      	adds	r2, r7, #3
   15280:	7812      	ldrb	r2, [r2, #0]
   15282:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15284:	230c      	movs	r3, #12
   15286:	18fa      	adds	r2, r7, r3
   15288:	687b      	ldr	r3, [r7, #4]
   1528a:	0011      	movs	r1, r2
   1528c:	0018      	movs	r0, r3
   1528e:	4ba4      	ldr	r3, [pc, #656]	; (15520 <lsm6dso_xl_data_rate_set+0x2b4>)
   15290:	4798      	blx	r3
   15292:	0003      	movs	r3, r0
   15294:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15296:	693b      	ldr	r3, [r7, #16]
   15298:	2b00      	cmp	r3, #0
   1529a:	d000      	beq.n	1529e <lsm6dso_xl_data_rate_set+0x32>
   1529c:	e113      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1529e:	230c      	movs	r3, #12
   152a0:	18fb      	adds	r3, r7, r3
   152a2:	781b      	ldrb	r3, [r3, #0]
   152a4:	07db      	lsls	r3, r3, #31
   152a6:	0fdb      	lsrs	r3, r3, #31
   152a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   152aa:	230c      	movs	r3, #12
   152ac:	18fb      	adds	r3, r7, r3
   152ae:	781b      	ldrb	r3, [r3, #0]
   152b0:	079b      	lsls	r3, r3, #30
   152b2:	0fdb      	lsrs	r3, r3, #31
   152b4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   152b6:	4313      	orrs	r3, r2
   152b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   152ba:	230c      	movs	r3, #12
   152bc:	18fb      	adds	r3, r7, r3
   152be:	781b      	ldrb	r3, [r3, #0]
   152c0:	075b      	lsls	r3, r3, #29
   152c2:	0fdb      	lsrs	r3, r3, #31
   152c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   152c6:	4313      	orrs	r3, r2
   152c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   152ca:	230c      	movs	r3, #12
   152cc:	18fb      	adds	r3, r7, r3
   152ce:	781b      	ldrb	r3, [r3, #0]
   152d0:	071b      	lsls	r3, r3, #28
   152d2:	0fdb      	lsrs	r3, r3, #31
   152d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   152d6:	4313      	orrs	r3, r2
   152d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   152da:	230c      	movs	r3, #12
   152dc:	18fb      	adds	r3, r7, r3
   152de:	781b      	ldrb	r3, [r3, #0]
   152e0:	06db      	lsls	r3, r3, #27
   152e2:	0fdb      	lsrs	r3, r3, #31
   152e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   152e6:	4313      	orrs	r3, r2
   152e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   152ea:	230c      	movs	r3, #12
   152ec:	18fb      	adds	r3, r7, r3
   152ee:	781b      	ldrb	r3, [r3, #0]
   152f0:	069b      	lsls	r3, r3, #26
   152f2:	0fdb      	lsrs	r3, r3, #31
   152f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   152f6:	4313      	orrs	r3, r2
   152f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   152fa:	230c      	movs	r3, #12
   152fc:	18fb      	adds	r3, r7, r3
   152fe:	781b      	ldrb	r3, [r3, #0]
   15300:	065b      	lsls	r3, r3, #25
   15302:	0fdb      	lsrs	r3, r3, #31
   15304:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15306:	4313      	orrs	r3, r2
   15308:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1530a:	230c      	movs	r3, #12
   1530c:	18fb      	adds	r3, r7, r3
   1530e:	781b      	ldrb	r3, [r3, #0]
   15310:	061b      	lsls	r3, r3, #24
   15312:	0fdb      	lsrs	r3, r3, #31
   15314:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15316:	4313      	orrs	r3, r2
   15318:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1531a:	230c      	movs	r3, #12
   1531c:	18fb      	adds	r3, r7, r3
   1531e:	785b      	ldrb	r3, [r3, #1]
   15320:	07db      	lsls	r3, r3, #31
   15322:	0fdb      	lsrs	r3, r3, #31
   15324:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15326:	4313      	orrs	r3, r2
   15328:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1532a:	230c      	movs	r3, #12
   1532c:	18fb      	adds	r3, r7, r3
   1532e:	785b      	ldrb	r3, [r3, #1]
   15330:	079b      	lsls	r3, r3, #30
   15332:	0fdb      	lsrs	r3, r3, #31
   15334:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15336:	4313      	orrs	r3, r2
   15338:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1533a:	230c      	movs	r3, #12
   1533c:	18fb      	adds	r3, r7, r3
   1533e:	785b      	ldrb	r3, [r3, #1]
   15340:	075b      	lsls	r3, r3, #29
   15342:	0fdb      	lsrs	r3, r3, #31
   15344:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15346:	4313      	orrs	r3, r2
   15348:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1534a:	230c      	movs	r3, #12
   1534c:	18fb      	adds	r3, r7, r3
   1534e:	785b      	ldrb	r3, [r3, #1]
   15350:	071b      	lsls	r3, r3, #28
   15352:	0fdb      	lsrs	r3, r3, #31
   15354:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15356:	4313      	orrs	r3, r2
   15358:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1535a:	230c      	movs	r3, #12
   1535c:	18fb      	adds	r3, r7, r3
   1535e:	785b      	ldrb	r3, [r3, #1]
   15360:	06db      	lsls	r3, r3, #27
   15362:	0fdb      	lsrs	r3, r3, #31
   15364:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15366:	4313      	orrs	r3, r2
   15368:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1536a:	230c      	movs	r3, #12
   1536c:	18fb      	adds	r3, r7, r3
   1536e:	785b      	ldrb	r3, [r3, #1]
   15370:	069b      	lsls	r3, r3, #26
   15372:	0fdb      	lsrs	r3, r3, #31
   15374:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15376:	4313      	orrs	r3, r2
   15378:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1537a:	230c      	movs	r3, #12
   1537c:	18fb      	adds	r3, r7, r3
   1537e:	785b      	ldrb	r3, [r3, #1]
   15380:	065b      	lsls	r3, r3, #25
   15382:	0fdb      	lsrs	r3, r3, #31
   15384:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15386:	4313      	orrs	r3, r2
   15388:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   1538a:	230c      	movs	r3, #12
   1538c:	18fb      	adds	r3, r7, r3
   1538e:	785b      	ldrb	r3, [r3, #1]
   15390:	061b      	lsls	r3, r3, #24
   15392:	0fdb      	lsrs	r3, r3, #31
   15394:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15396:	4313      	orrs	r3, r2
   15398:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1539a:	2b01      	cmp	r3, #1
   1539c:	d000      	beq.n	153a0 <lsm6dso_xl_data_rate_set+0x134>
   1539e:	e092      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   153a0:	230b      	movs	r3, #11
   153a2:	18fa      	adds	r2, r7, r3
   153a4:	687b      	ldr	r3, [r7, #4]
   153a6:	0011      	movs	r1, r2
   153a8:	0018      	movs	r0, r3
   153aa:	4b5e      	ldr	r3, [pc, #376]	; (15524 <lsm6dso_xl_data_rate_set+0x2b8>)
   153ac:	4798      	blx	r3
   153ae:	0003      	movs	r3, r0
   153b0:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   153b2:	693b      	ldr	r3, [r7, #16]
   153b4:	2b00      	cmp	r3, #0
   153b6:	d000      	beq.n	153ba <lsm6dso_xl_data_rate_set+0x14e>
   153b8:	e085      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   153ba:	230b      	movs	r3, #11
   153bc:	18fb      	adds	r3, r7, r3
   153be:	781b      	ldrb	r3, [r3, #0]
   153c0:	2b01      	cmp	r3, #1
   153c2:	d017      	beq.n	153f4 <lsm6dso_xl_data_rate_set+0x188>
   153c4:	dc02      	bgt.n	153cc <lsm6dso_xl_data_rate_set+0x160>
   153c6:	2b00      	cmp	r3, #0
   153c8:	d005      	beq.n	153d6 <lsm6dso_xl_data_rate_set+0x16a>
   153ca:	e076      	b.n	154ba <lsm6dso_xl_data_rate_set+0x24e>
   153cc:	2b02      	cmp	r3, #2
   153ce:	d029      	beq.n	15424 <lsm6dso_xl_data_rate_set+0x1b8>
   153d0:	2b03      	cmp	r3, #3
   153d2:	d048      	beq.n	15466 <lsm6dso_xl_data_rate_set+0x1fa>
   153d4:	e071      	b.n	154ba <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   153d6:	1cfb      	adds	r3, r7, #3
   153d8:	781b      	ldrb	r3, [r3, #0]
   153da:	2b00      	cmp	r3, #0
   153dc:	d104      	bne.n	153e8 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   153de:	2317      	movs	r3, #23
   153e0:	18fb      	adds	r3, r7, r3
   153e2:	2201      	movs	r2, #1
   153e4:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   153e6:	e06e      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   153e8:	2317      	movs	r3, #23
   153ea:	18fb      	adds	r3, r7, r3
   153ec:	1cfa      	adds	r2, r7, #3
   153ee:	7812      	ldrb	r2, [r2, #0]
   153f0:	701a      	strb	r2, [r3, #0]
            break;
   153f2:	e068      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   153f4:	1cfb      	adds	r3, r7, #3
   153f6:	781b      	ldrb	r3, [r3, #0]
   153f8:	2b00      	cmp	r3, #0
   153fa:	d104      	bne.n	15406 <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   153fc:	2317      	movs	r3, #23
   153fe:	18fb      	adds	r3, r7, r3
   15400:	2202      	movs	r2, #2
   15402:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15404:	e05f      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15406:	1cfb      	adds	r3, r7, #3
   15408:	781b      	ldrb	r3, [r3, #0]
   1540a:	2b01      	cmp	r3, #1
   1540c:	d104      	bne.n	15418 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   1540e:	2317      	movs	r3, #23
   15410:	18fb      	adds	r3, r7, r3
   15412:	2202      	movs	r2, #2
   15414:	701a      	strb	r2, [r3, #0]
            break;
   15416:	e056      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15418:	2317      	movs	r3, #23
   1541a:	18fb      	adds	r3, r7, r3
   1541c:	1cfa      	adds	r2, r7, #3
   1541e:	7812      	ldrb	r2, [r2, #0]
   15420:	701a      	strb	r2, [r3, #0]
            break;
   15422:	e050      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   15424:	1cfb      	adds	r3, r7, #3
   15426:	781b      	ldrb	r3, [r3, #0]
   15428:	2b00      	cmp	r3, #0
   1542a:	d104      	bne.n	15436 <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   1542c:	2317      	movs	r3, #23
   1542e:	18fb      	adds	r3, r7, r3
   15430:	2203      	movs	r2, #3
   15432:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15434:	e047      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15436:	1cfb      	adds	r3, r7, #3
   15438:	781b      	ldrb	r3, [r3, #0]
   1543a:	2b01      	cmp	r3, #1
   1543c:	d104      	bne.n	15448 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   1543e:	2317      	movs	r3, #23
   15440:	18fb      	adds	r3, r7, r3
   15442:	2203      	movs	r2, #3
   15444:	701a      	strb	r2, [r3, #0]
            break;
   15446:	e03e      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   15448:	1cfb      	adds	r3, r7, #3
   1544a:	781b      	ldrb	r3, [r3, #0]
   1544c:	2b02      	cmp	r3, #2
   1544e:	d104      	bne.n	1545a <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   15450:	2317      	movs	r3, #23
   15452:	18fb      	adds	r3, r7, r3
   15454:	2203      	movs	r2, #3
   15456:	701a      	strb	r2, [r3, #0]
            break;
   15458:	e035      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1545a:	2317      	movs	r3, #23
   1545c:	18fb      	adds	r3, r7, r3
   1545e:	1cfa      	adds	r2, r7, #3
   15460:	7812      	ldrb	r2, [r2, #0]
   15462:	701a      	strb	r2, [r3, #0]
            break;
   15464:	e02f      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   15466:	1cfb      	adds	r3, r7, #3
   15468:	781b      	ldrb	r3, [r3, #0]
   1546a:	2b00      	cmp	r3, #0
   1546c:	d104      	bne.n	15478 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   1546e:	2317      	movs	r3, #23
   15470:	18fb      	adds	r3, r7, r3
   15472:	2204      	movs	r2, #4
   15474:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15476:	e026      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15478:	1cfb      	adds	r3, r7, #3
   1547a:	781b      	ldrb	r3, [r3, #0]
   1547c:	2b01      	cmp	r3, #1
   1547e:	d104      	bne.n	1548a <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15480:	2317      	movs	r3, #23
   15482:	18fb      	adds	r3, r7, r3
   15484:	2204      	movs	r2, #4
   15486:	701a      	strb	r2, [r3, #0]
            break;
   15488:	e01d      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   1548a:	1cfb      	adds	r3, r7, #3
   1548c:	781b      	ldrb	r3, [r3, #0]
   1548e:	2b02      	cmp	r3, #2
   15490:	d104      	bne.n	1549c <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15492:	2317      	movs	r3, #23
   15494:	18fb      	adds	r3, r7, r3
   15496:	2204      	movs	r2, #4
   15498:	701a      	strb	r2, [r3, #0]
            break;
   1549a:	e014      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   1549c:	1cfb      	adds	r3, r7, #3
   1549e:	781b      	ldrb	r3, [r3, #0]
   154a0:	2b03      	cmp	r3, #3
   154a2:	d104      	bne.n	154ae <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   154a4:	2317      	movs	r3, #23
   154a6:	18fb      	adds	r3, r7, r3
   154a8:	2204      	movs	r2, #4
   154aa:	701a      	strb	r2, [r3, #0]
            break;
   154ac:	e00b      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   154ae:	2317      	movs	r3, #23
   154b0:	18fb      	adds	r3, r7, r3
   154b2:	1cfa      	adds	r2, r7, #3
   154b4:	7812      	ldrb	r2, [r2, #0]
   154b6:	701a      	strb	r2, [r3, #0]
            break;
   154b8:	e005      	b.n	154c6 <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   154ba:	2317      	movs	r3, #23
   154bc:	18fb      	adds	r3, r7, r3
   154be:	1cfa      	adds	r2, r7, #3
   154c0:	7812      	ldrb	r2, [r2, #0]
   154c2:	701a      	strb	r2, [r3, #0]
            break;
   154c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   154c6:	693b      	ldr	r3, [r7, #16]
   154c8:	2b00      	cmp	r3, #0
   154ca:	d108      	bne.n	154de <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   154cc:	2308      	movs	r3, #8
   154ce:	18fa      	adds	r2, r7, r3
   154d0:	6878      	ldr	r0, [r7, #4]
   154d2:	2301      	movs	r3, #1
   154d4:	2110      	movs	r1, #16
   154d6:	4c14      	ldr	r4, [pc, #80]	; (15528 <lsm6dso_xl_data_rate_set+0x2bc>)
   154d8:	47a0      	blx	r4
   154da:	0003      	movs	r3, r0
   154dc:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   154de:	693b      	ldr	r3, [r7, #16]
   154e0:	2b00      	cmp	r3, #0
   154e2:	d118      	bne.n	15516 <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   154e4:	2317      	movs	r3, #23
   154e6:	18fb      	adds	r3, r7, r3
   154e8:	781b      	ldrb	r3, [r3, #0]
   154ea:	220f      	movs	r2, #15
   154ec:	4013      	ands	r3, r2
   154ee:	b2da      	uxtb	r2, r3
   154f0:	2308      	movs	r3, #8
   154f2:	18fb      	adds	r3, r7, r3
   154f4:	0110      	lsls	r0, r2, #4
   154f6:	781a      	ldrb	r2, [r3, #0]
   154f8:	210f      	movs	r1, #15
   154fa:	400a      	ands	r2, r1
   154fc:	1c11      	adds	r1, r2, #0
   154fe:	1c02      	adds	r2, r0, #0
   15500:	430a      	orrs	r2, r1
   15502:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15504:	2308      	movs	r3, #8
   15506:	18fa      	adds	r2, r7, r3
   15508:	6878      	ldr	r0, [r7, #4]
   1550a:	2301      	movs	r3, #1
   1550c:	2110      	movs	r1, #16
   1550e:	4c07      	ldr	r4, [pc, #28]	; (1552c <lsm6dso_xl_data_rate_set+0x2c0>)
   15510:	47a0      	blx	r4
   15512:	0003      	movs	r3, r0
   15514:	613b      	str	r3, [r7, #16]
  }

  return ret;
   15516:	693b      	ldr	r3, [r7, #16]
}
   15518:	0018      	movs	r0, r3
   1551a:	46bd      	mov	sp, r7
   1551c:	b007      	add	sp, #28
   1551e:	bd90      	pop	{r4, r7, pc}
   15520:	00015d49 	.word	0x00015d49
   15524:	00015d9d 	.word	0x00015d9d
   15528:	0001513d 	.word	0x0001513d
   1552c:	00015183 	.word	0x00015183

00015530 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   15530:	b590      	push	{r4, r7, lr}
   15532:	b085      	sub	sp, #20
   15534:	af00      	add	r7, sp, #0
   15536:	6078      	str	r0, [r7, #4]
   15538:	000a      	movs	r2, r1
   1553a:	1cfb      	adds	r3, r7, #3
   1553c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1553e:	2308      	movs	r3, #8
   15540:	18fa      	adds	r2, r7, r3
   15542:	6878      	ldr	r0, [r7, #4]
   15544:	2301      	movs	r3, #1
   15546:	2111      	movs	r1, #17
   15548:	4c12      	ldr	r4, [pc, #72]	; (15594 <lsm6dso_gy_full_scale_set+0x64>)
   1554a:	47a0      	blx	r4
   1554c:	0003      	movs	r3, r0
   1554e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15550:	68fb      	ldr	r3, [r7, #12]
   15552:	2b00      	cmp	r3, #0
   15554:	d119      	bne.n	1558a <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   15556:	1cfb      	adds	r3, r7, #3
   15558:	781b      	ldrb	r3, [r3, #0]
   1555a:	2207      	movs	r2, #7
   1555c:	4013      	ands	r3, r2
   1555e:	b2da      	uxtb	r2, r3
   15560:	2308      	movs	r3, #8
   15562:	18fb      	adds	r3, r7, r3
   15564:	2107      	movs	r1, #7
   15566:	400a      	ands	r2, r1
   15568:	1890      	adds	r0, r2, r2
   1556a:	781a      	ldrb	r2, [r3, #0]
   1556c:	210e      	movs	r1, #14
   1556e:	438a      	bics	r2, r1
   15570:	1c11      	adds	r1, r2, #0
   15572:	1c02      	adds	r2, r0, #0
   15574:	430a      	orrs	r2, r1
   15576:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15578:	2308      	movs	r3, #8
   1557a:	18fa      	adds	r2, r7, r3
   1557c:	6878      	ldr	r0, [r7, #4]
   1557e:	2301      	movs	r3, #1
   15580:	2111      	movs	r1, #17
   15582:	4c05      	ldr	r4, [pc, #20]	; (15598 <lsm6dso_gy_full_scale_set+0x68>)
   15584:	47a0      	blx	r4
   15586:	0003      	movs	r3, r0
   15588:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1558a:	68fb      	ldr	r3, [r7, #12]
}
   1558c:	0018      	movs	r0, r3
   1558e:	46bd      	mov	sp, r7
   15590:	b005      	add	sp, #20
   15592:	bd90      	pop	{r4, r7, pc}
   15594:	0001513d 	.word	0x0001513d
   15598:	00015183 	.word	0x00015183

0001559c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   1559c:	b590      	push	{r4, r7, lr}
   1559e:	b087      	sub	sp, #28
   155a0:	af00      	add	r7, sp, #0
   155a2:	6078      	str	r0, [r7, #4]
   155a4:	000a      	movs	r2, r1
   155a6:	1cfb      	adds	r3, r7, #3
   155a8:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   155aa:	2317      	movs	r3, #23
   155ac:	18fb      	adds	r3, r7, r3
   155ae:	1cfa      	adds	r2, r7, #3
   155b0:	7812      	ldrb	r2, [r2, #0]
   155b2:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   155b4:	230c      	movs	r3, #12
   155b6:	18fa      	adds	r2, r7, r3
   155b8:	687b      	ldr	r3, [r7, #4]
   155ba:	0011      	movs	r1, r2
   155bc:	0018      	movs	r0, r3
   155be:	4ba4      	ldr	r3, [pc, #656]	; (15850 <lsm6dso_gy_data_rate_set+0x2b4>)
   155c0:	4798      	blx	r3
   155c2:	0003      	movs	r3, r0
   155c4:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   155c6:	693b      	ldr	r3, [r7, #16]
   155c8:	2b00      	cmp	r3, #0
   155ca:	d000      	beq.n	155ce <lsm6dso_gy_data_rate_set+0x32>
   155cc:	e113      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   155ce:	230c      	movs	r3, #12
   155d0:	18fb      	adds	r3, r7, r3
   155d2:	781b      	ldrb	r3, [r3, #0]
   155d4:	07db      	lsls	r3, r3, #31
   155d6:	0fdb      	lsrs	r3, r3, #31
   155d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   155da:	230c      	movs	r3, #12
   155dc:	18fb      	adds	r3, r7, r3
   155de:	781b      	ldrb	r3, [r3, #0]
   155e0:	079b      	lsls	r3, r3, #30
   155e2:	0fdb      	lsrs	r3, r3, #31
   155e4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   155e6:	4313      	orrs	r3, r2
   155e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   155ea:	230c      	movs	r3, #12
   155ec:	18fb      	adds	r3, r7, r3
   155ee:	781b      	ldrb	r3, [r3, #0]
   155f0:	075b      	lsls	r3, r3, #29
   155f2:	0fdb      	lsrs	r3, r3, #31
   155f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   155f6:	4313      	orrs	r3, r2
   155f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   155fa:	230c      	movs	r3, #12
   155fc:	18fb      	adds	r3, r7, r3
   155fe:	781b      	ldrb	r3, [r3, #0]
   15600:	071b      	lsls	r3, r3, #28
   15602:	0fdb      	lsrs	r3, r3, #31
   15604:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15606:	4313      	orrs	r3, r2
   15608:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1560a:	230c      	movs	r3, #12
   1560c:	18fb      	adds	r3, r7, r3
   1560e:	781b      	ldrb	r3, [r3, #0]
   15610:	06db      	lsls	r3, r3, #27
   15612:	0fdb      	lsrs	r3, r3, #31
   15614:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15616:	4313      	orrs	r3, r2
   15618:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1561a:	230c      	movs	r3, #12
   1561c:	18fb      	adds	r3, r7, r3
   1561e:	781b      	ldrb	r3, [r3, #0]
   15620:	069b      	lsls	r3, r3, #26
   15622:	0fdb      	lsrs	r3, r3, #31
   15624:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15626:	4313      	orrs	r3, r2
   15628:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1562a:	230c      	movs	r3, #12
   1562c:	18fb      	adds	r3, r7, r3
   1562e:	781b      	ldrb	r3, [r3, #0]
   15630:	065b      	lsls	r3, r3, #25
   15632:	0fdb      	lsrs	r3, r3, #31
   15634:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15636:	4313      	orrs	r3, r2
   15638:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1563a:	230c      	movs	r3, #12
   1563c:	18fb      	adds	r3, r7, r3
   1563e:	781b      	ldrb	r3, [r3, #0]
   15640:	061b      	lsls	r3, r3, #24
   15642:	0fdb      	lsrs	r3, r3, #31
   15644:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15646:	4313      	orrs	r3, r2
   15648:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1564a:	230c      	movs	r3, #12
   1564c:	18fb      	adds	r3, r7, r3
   1564e:	785b      	ldrb	r3, [r3, #1]
   15650:	07db      	lsls	r3, r3, #31
   15652:	0fdb      	lsrs	r3, r3, #31
   15654:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15656:	4313      	orrs	r3, r2
   15658:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1565a:	230c      	movs	r3, #12
   1565c:	18fb      	adds	r3, r7, r3
   1565e:	785b      	ldrb	r3, [r3, #1]
   15660:	079b      	lsls	r3, r3, #30
   15662:	0fdb      	lsrs	r3, r3, #31
   15664:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15666:	4313      	orrs	r3, r2
   15668:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1566a:	230c      	movs	r3, #12
   1566c:	18fb      	adds	r3, r7, r3
   1566e:	785b      	ldrb	r3, [r3, #1]
   15670:	075b      	lsls	r3, r3, #29
   15672:	0fdb      	lsrs	r3, r3, #31
   15674:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15676:	4313      	orrs	r3, r2
   15678:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1567a:	230c      	movs	r3, #12
   1567c:	18fb      	adds	r3, r7, r3
   1567e:	785b      	ldrb	r3, [r3, #1]
   15680:	071b      	lsls	r3, r3, #28
   15682:	0fdb      	lsrs	r3, r3, #31
   15684:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15686:	4313      	orrs	r3, r2
   15688:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1568a:	230c      	movs	r3, #12
   1568c:	18fb      	adds	r3, r7, r3
   1568e:	785b      	ldrb	r3, [r3, #1]
   15690:	06db      	lsls	r3, r3, #27
   15692:	0fdb      	lsrs	r3, r3, #31
   15694:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15696:	4313      	orrs	r3, r2
   15698:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1569a:	230c      	movs	r3, #12
   1569c:	18fb      	adds	r3, r7, r3
   1569e:	785b      	ldrb	r3, [r3, #1]
   156a0:	069b      	lsls	r3, r3, #26
   156a2:	0fdb      	lsrs	r3, r3, #31
   156a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   156a6:	4313      	orrs	r3, r2
   156a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   156aa:	230c      	movs	r3, #12
   156ac:	18fb      	adds	r3, r7, r3
   156ae:	785b      	ldrb	r3, [r3, #1]
   156b0:	065b      	lsls	r3, r3, #25
   156b2:	0fdb      	lsrs	r3, r3, #31
   156b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   156b6:	4313      	orrs	r3, r2
   156b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   156ba:	230c      	movs	r3, #12
   156bc:	18fb      	adds	r3, r7, r3
   156be:	785b      	ldrb	r3, [r3, #1]
   156c0:	061b      	lsls	r3, r3, #24
   156c2:	0fdb      	lsrs	r3, r3, #31
   156c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   156c6:	4313      	orrs	r3, r2
   156c8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   156ca:	2b01      	cmp	r3, #1
   156cc:	d000      	beq.n	156d0 <lsm6dso_gy_data_rate_set+0x134>
   156ce:	e092      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   156d0:	230b      	movs	r3, #11
   156d2:	18fa      	adds	r2, r7, r3
   156d4:	687b      	ldr	r3, [r7, #4]
   156d6:	0011      	movs	r1, r2
   156d8:	0018      	movs	r0, r3
   156da:	4b5e      	ldr	r3, [pc, #376]	; (15854 <lsm6dso_gy_data_rate_set+0x2b8>)
   156dc:	4798      	blx	r3
   156de:	0003      	movs	r3, r0
   156e0:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   156e2:	693b      	ldr	r3, [r7, #16]
   156e4:	2b00      	cmp	r3, #0
   156e6:	d000      	beq.n	156ea <lsm6dso_gy_data_rate_set+0x14e>
   156e8:	e085      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   156ea:	230b      	movs	r3, #11
   156ec:	18fb      	adds	r3, r7, r3
   156ee:	781b      	ldrb	r3, [r3, #0]
   156f0:	2b01      	cmp	r3, #1
   156f2:	d017      	beq.n	15724 <lsm6dso_gy_data_rate_set+0x188>
   156f4:	dc02      	bgt.n	156fc <lsm6dso_gy_data_rate_set+0x160>
   156f6:	2b00      	cmp	r3, #0
   156f8:	d005      	beq.n	15706 <lsm6dso_gy_data_rate_set+0x16a>
   156fa:	e076      	b.n	157ea <lsm6dso_gy_data_rate_set+0x24e>
   156fc:	2b02      	cmp	r3, #2
   156fe:	d029      	beq.n	15754 <lsm6dso_gy_data_rate_set+0x1b8>
   15700:	2b03      	cmp	r3, #3
   15702:	d048      	beq.n	15796 <lsm6dso_gy_data_rate_set+0x1fa>
   15704:	e071      	b.n	157ea <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   15706:	1cfb      	adds	r3, r7, #3
   15708:	781b      	ldrb	r3, [r3, #0]
   1570a:	2b00      	cmp	r3, #0
   1570c:	d104      	bne.n	15718 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   1570e:	2317      	movs	r3, #23
   15710:	18fb      	adds	r3, r7, r3
   15712:	2201      	movs	r2, #1
   15714:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15716:	e06e      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15718:	2317      	movs	r3, #23
   1571a:	18fb      	adds	r3, r7, r3
   1571c:	1cfa      	adds	r2, r7, #3
   1571e:	7812      	ldrb	r2, [r2, #0]
   15720:	701a      	strb	r2, [r3, #0]
            break;
   15722:	e068      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15724:	1cfb      	adds	r3, r7, #3
   15726:	781b      	ldrb	r3, [r3, #0]
   15728:	2b00      	cmp	r3, #0
   1572a:	d104      	bne.n	15736 <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   1572c:	2317      	movs	r3, #23
   1572e:	18fb      	adds	r3, r7, r3
   15730:	2202      	movs	r2, #2
   15732:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15734:	e05f      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15736:	1cfb      	adds	r3, r7, #3
   15738:	781b      	ldrb	r3, [r3, #0]
   1573a:	2b01      	cmp	r3, #1
   1573c:	d104      	bne.n	15748 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   1573e:	2317      	movs	r3, #23
   15740:	18fb      	adds	r3, r7, r3
   15742:	2202      	movs	r2, #2
   15744:	701a      	strb	r2, [r3, #0]
            break;
   15746:	e056      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15748:	2317      	movs	r3, #23
   1574a:	18fb      	adds	r3, r7, r3
   1574c:	1cfa      	adds	r2, r7, #3
   1574e:	7812      	ldrb	r2, [r2, #0]
   15750:	701a      	strb	r2, [r3, #0]
            break;
   15752:	e050      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15754:	1cfb      	adds	r3, r7, #3
   15756:	781b      	ldrb	r3, [r3, #0]
   15758:	2b00      	cmp	r3, #0
   1575a:	d104      	bne.n	15766 <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   1575c:	2317      	movs	r3, #23
   1575e:	18fb      	adds	r3, r7, r3
   15760:	2203      	movs	r2, #3
   15762:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15764:	e047      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15766:	1cfb      	adds	r3, r7, #3
   15768:	781b      	ldrb	r3, [r3, #0]
   1576a:	2b01      	cmp	r3, #1
   1576c:	d104      	bne.n	15778 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   1576e:	2317      	movs	r3, #23
   15770:	18fb      	adds	r3, r7, r3
   15772:	2203      	movs	r2, #3
   15774:	701a      	strb	r2, [r3, #0]
            break;
   15776:	e03e      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15778:	1cfb      	adds	r3, r7, #3
   1577a:	781b      	ldrb	r3, [r3, #0]
   1577c:	2b02      	cmp	r3, #2
   1577e:	d104      	bne.n	1578a <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15780:	2317      	movs	r3, #23
   15782:	18fb      	adds	r3, r7, r3
   15784:	2203      	movs	r2, #3
   15786:	701a      	strb	r2, [r3, #0]
            break;
   15788:	e035      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1578a:	2317      	movs	r3, #23
   1578c:	18fb      	adds	r3, r7, r3
   1578e:	1cfa      	adds	r2, r7, #3
   15790:	7812      	ldrb	r2, [r2, #0]
   15792:	701a      	strb	r2, [r3, #0]
            break;
   15794:	e02f      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15796:	1cfb      	adds	r3, r7, #3
   15798:	781b      	ldrb	r3, [r3, #0]
   1579a:	2b00      	cmp	r3, #0
   1579c:	d104      	bne.n	157a8 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1579e:	2317      	movs	r3, #23
   157a0:	18fb      	adds	r3, r7, r3
   157a2:	2204      	movs	r2, #4
   157a4:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   157a6:	e026      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   157a8:	1cfb      	adds	r3, r7, #3
   157aa:	781b      	ldrb	r3, [r3, #0]
   157ac:	2b01      	cmp	r3, #1
   157ae:	d104      	bne.n	157ba <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   157b0:	2317      	movs	r3, #23
   157b2:	18fb      	adds	r3, r7, r3
   157b4:	2204      	movs	r2, #4
   157b6:	701a      	strb	r2, [r3, #0]
            break;
   157b8:	e01d      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   157ba:	1cfb      	adds	r3, r7, #3
   157bc:	781b      	ldrb	r3, [r3, #0]
   157be:	2b02      	cmp	r3, #2
   157c0:	d104      	bne.n	157cc <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   157c2:	2317      	movs	r3, #23
   157c4:	18fb      	adds	r3, r7, r3
   157c6:	2204      	movs	r2, #4
   157c8:	701a      	strb	r2, [r3, #0]
            break;
   157ca:	e014      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   157cc:	1cfb      	adds	r3, r7, #3
   157ce:	781b      	ldrb	r3, [r3, #0]
   157d0:	2b03      	cmp	r3, #3
   157d2:	d104      	bne.n	157de <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   157d4:	2317      	movs	r3, #23
   157d6:	18fb      	adds	r3, r7, r3
   157d8:	2204      	movs	r2, #4
   157da:	701a      	strb	r2, [r3, #0]
            break;
   157dc:	e00b      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   157de:	2317      	movs	r3, #23
   157e0:	18fb      	adds	r3, r7, r3
   157e2:	1cfa      	adds	r2, r7, #3
   157e4:	7812      	ldrb	r2, [r2, #0]
   157e6:	701a      	strb	r2, [r3, #0]
            break;
   157e8:	e005      	b.n	157f6 <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   157ea:	2317      	movs	r3, #23
   157ec:	18fb      	adds	r3, r7, r3
   157ee:	1cfa      	adds	r2, r7, #3
   157f0:	7812      	ldrb	r2, [r2, #0]
   157f2:	701a      	strb	r2, [r3, #0]
            break;
   157f4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   157f6:	693b      	ldr	r3, [r7, #16]
   157f8:	2b00      	cmp	r3, #0
   157fa:	d108      	bne.n	1580e <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   157fc:	2308      	movs	r3, #8
   157fe:	18fa      	adds	r2, r7, r3
   15800:	6878      	ldr	r0, [r7, #4]
   15802:	2301      	movs	r3, #1
   15804:	2111      	movs	r1, #17
   15806:	4c14      	ldr	r4, [pc, #80]	; (15858 <lsm6dso_gy_data_rate_set+0x2bc>)
   15808:	47a0      	blx	r4
   1580a:	0003      	movs	r3, r0
   1580c:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   1580e:	693b      	ldr	r3, [r7, #16]
   15810:	2b00      	cmp	r3, #0
   15812:	d118      	bne.n	15846 <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   15814:	2317      	movs	r3, #23
   15816:	18fb      	adds	r3, r7, r3
   15818:	781b      	ldrb	r3, [r3, #0]
   1581a:	220f      	movs	r2, #15
   1581c:	4013      	ands	r3, r2
   1581e:	b2da      	uxtb	r2, r3
   15820:	2308      	movs	r3, #8
   15822:	18fb      	adds	r3, r7, r3
   15824:	0110      	lsls	r0, r2, #4
   15826:	781a      	ldrb	r2, [r3, #0]
   15828:	210f      	movs	r1, #15
   1582a:	400a      	ands	r2, r1
   1582c:	1c11      	adds	r1, r2, #0
   1582e:	1c02      	adds	r2, r0, #0
   15830:	430a      	orrs	r2, r1
   15832:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15834:	2308      	movs	r3, #8
   15836:	18fa      	adds	r2, r7, r3
   15838:	6878      	ldr	r0, [r7, #4]
   1583a:	2301      	movs	r3, #1
   1583c:	2111      	movs	r1, #17
   1583e:	4c07      	ldr	r4, [pc, #28]	; (1585c <lsm6dso_gy_data_rate_set+0x2c0>)
   15840:	47a0      	blx	r4
   15842:	0003      	movs	r3, r0
   15844:	613b      	str	r3, [r7, #16]
  }

  return ret;
   15846:	693b      	ldr	r3, [r7, #16]
}
   15848:	0018      	movs	r0, r3
   1584a:	46bd      	mov	sp, r7
   1584c:	b007      	add	sp, #28
   1584e:	bd90      	pop	{r4, r7, pc}
   15850:	00015d49 	.word	0x00015d49
   15854:	00015d9d 	.word	0x00015d9d
   15858:	0001513d 	.word	0x0001513d
   1585c:	00015183 	.word	0x00015183

00015860 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15860:	b590      	push	{r4, r7, lr}
   15862:	b085      	sub	sp, #20
   15864:	af00      	add	r7, sp, #0
   15866:	6078      	str	r0, [r7, #4]
   15868:	000a      	movs	r2, r1
   1586a:	1cfb      	adds	r3, r7, #3
   1586c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1586e:	2308      	movs	r3, #8
   15870:	18fa      	adds	r2, r7, r3
   15872:	6878      	ldr	r0, [r7, #4]
   15874:	2301      	movs	r3, #1
   15876:	2112      	movs	r1, #18
   15878:	4c12      	ldr	r4, [pc, #72]	; (158c4 <lsm6dso_block_data_update_set+0x64>)
   1587a:	47a0      	blx	r4
   1587c:	0003      	movs	r3, r0
   1587e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15880:	68fb      	ldr	r3, [r7, #12]
   15882:	2b00      	cmp	r3, #0
   15884:	d119      	bne.n	158ba <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   15886:	1cfb      	adds	r3, r7, #3
   15888:	781b      	ldrb	r3, [r3, #0]
   1588a:	2201      	movs	r2, #1
   1588c:	4013      	ands	r3, r2
   1588e:	b2da      	uxtb	r2, r3
   15890:	2308      	movs	r3, #8
   15892:	18fb      	adds	r3, r7, r3
   15894:	2101      	movs	r1, #1
   15896:	400a      	ands	r2, r1
   15898:	0190      	lsls	r0, r2, #6
   1589a:	781a      	ldrb	r2, [r3, #0]
   1589c:	2140      	movs	r1, #64	; 0x40
   1589e:	438a      	bics	r2, r1
   158a0:	1c11      	adds	r1, r2, #0
   158a2:	1c02      	adds	r2, r0, #0
   158a4:	430a      	orrs	r2, r1
   158a6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   158a8:	2308      	movs	r3, #8
   158aa:	18fa      	adds	r2, r7, r3
   158ac:	6878      	ldr	r0, [r7, #4]
   158ae:	2301      	movs	r3, #1
   158b0:	2112      	movs	r1, #18
   158b2:	4c05      	ldr	r4, [pc, #20]	; (158c8 <lsm6dso_block_data_update_set+0x68>)
   158b4:	47a0      	blx	r4
   158b6:	0003      	movs	r3, r0
   158b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   158ba:	68fb      	ldr	r3, [r7, #12]
}
   158bc:	0018      	movs	r0, r3
   158be:	46bd      	mov	sp, r7
   158c0:	b005      	add	sp, #20
   158c2:	bd90      	pop	{r4, r7, pc}
   158c4:	0001513d 	.word	0x0001513d
   158c8:	00015183 	.word	0x00015183

000158cc <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   158cc:	b590      	push	{r4, r7, lr}
   158ce:	b085      	sub	sp, #20
   158d0:	af00      	add	r7, sp, #0
   158d2:	6078      	str	r0, [r7, #4]
   158d4:	000a      	movs	r2, r1
   158d6:	1cfb      	adds	r3, r7, #3
   158d8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   158da:	2308      	movs	r3, #8
   158dc:	18fa      	adds	r2, r7, r3
   158de:	6878      	ldr	r0, [r7, #4]
   158e0:	2301      	movs	r3, #1
   158e2:	2115      	movs	r1, #21
   158e4:	4c12      	ldr	r4, [pc, #72]	; (15930 <lsm6dso_xl_offset_weight_set+0x64>)
   158e6:	47a0      	blx	r4
   158e8:	0003      	movs	r3, r0
   158ea:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   158ec:	68fb      	ldr	r3, [r7, #12]
   158ee:	2b00      	cmp	r3, #0
   158f0:	d119      	bne.n	15926 <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   158f2:	1cfb      	adds	r3, r7, #3
   158f4:	781b      	ldrb	r3, [r3, #0]
   158f6:	2201      	movs	r2, #1
   158f8:	4013      	ands	r3, r2
   158fa:	b2da      	uxtb	r2, r3
   158fc:	2308      	movs	r3, #8
   158fe:	18fb      	adds	r3, r7, r3
   15900:	2101      	movs	r1, #1
   15902:	400a      	ands	r2, r1
   15904:	00d0      	lsls	r0, r2, #3
   15906:	781a      	ldrb	r2, [r3, #0]
   15908:	2108      	movs	r1, #8
   1590a:	438a      	bics	r2, r1
   1590c:	1c11      	adds	r1, r2, #0
   1590e:	1c02      	adds	r2, r0, #0
   15910:	430a      	orrs	r2, r1
   15912:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15914:	2308      	movs	r3, #8
   15916:	18fa      	adds	r2, r7, r3
   15918:	6878      	ldr	r0, [r7, #4]
   1591a:	2301      	movs	r3, #1
   1591c:	2115      	movs	r1, #21
   1591e:	4c05      	ldr	r4, [pc, #20]	; (15934 <lsm6dso_xl_offset_weight_set+0x68>)
   15920:	47a0      	blx	r4
   15922:	0003      	movs	r3, r0
   15924:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15926:	68fb      	ldr	r3, [r7, #12]
}
   15928:	0018      	movs	r0, r3
   1592a:	46bd      	mov	sp, r7
   1592c:	b005      	add	sp, #20
   1592e:	bd90      	pop	{r4, r7, pc}
   15930:	0001513d 	.word	0x0001513d
   15934:	00015183 	.word	0x00015183

00015938 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   15938:	b590      	push	{r4, r7, lr}
   1593a:	b085      	sub	sp, #20
   1593c:	af00      	add	r7, sp, #0
   1593e:	6078      	str	r0, [r7, #4]
   15940:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   15942:	2308      	movs	r3, #8
   15944:	18fa      	adds	r2, r7, r3
   15946:	6878      	ldr	r0, [r7, #4]
   15948:	2301      	movs	r3, #1
   1594a:	211e      	movs	r1, #30
   1594c:	4c08      	ldr	r4, [pc, #32]	; (15970 <lsm6dso_xl_flag_data_ready_get+0x38>)
   1594e:	47a0      	blx	r4
   15950:	0003      	movs	r3, r0
   15952:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   15954:	2308      	movs	r3, #8
   15956:	18fb      	adds	r3, r7, r3
   15958:	781b      	ldrb	r3, [r3, #0]
   1595a:	07db      	lsls	r3, r3, #31
   1595c:	0fdb      	lsrs	r3, r3, #31
   1595e:	b2db      	uxtb	r3, r3
   15960:	001a      	movs	r2, r3
   15962:	683b      	ldr	r3, [r7, #0]
   15964:	701a      	strb	r2, [r3, #0]

  return ret;
   15966:	68fb      	ldr	r3, [r7, #12]
}
   15968:	0018      	movs	r0, r3
   1596a:	46bd      	mov	sp, r7
   1596c:	b005      	add	sp, #20
   1596e:	bd90      	pop	{r4, r7, pc}
   15970:	0001513d 	.word	0x0001513d

00015974 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   15974:	b590      	push	{r4, r7, lr}
   15976:	b087      	sub	sp, #28
   15978:	af00      	add	r7, sp, #0
   1597a:	6078      	str	r0, [r7, #4]
   1597c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   1597e:	230c      	movs	r3, #12
   15980:	18fa      	adds	r2, r7, r3
   15982:	6878      	ldr	r0, [r7, #4]
   15984:	2306      	movs	r3, #6
   15986:	2128      	movs	r1, #40	; 0x28
   15988:	4c26      	ldr	r4, [pc, #152]	; (15a24 <lsm6dso_acceleration_raw_get+0xb0>)
   1598a:	47a0      	blx	r4
   1598c:	0003      	movs	r3, r0
   1598e:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   15990:	230c      	movs	r3, #12
   15992:	18fb      	adds	r3, r7, r3
   15994:	785b      	ldrb	r3, [r3, #1]
   15996:	b21a      	sxth	r2, r3
   15998:	683b      	ldr	r3, [r7, #0]
   1599a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   1599c:	683b      	ldr	r3, [r7, #0]
   1599e:	2200      	movs	r2, #0
   159a0:	5e9b      	ldrsh	r3, [r3, r2]
   159a2:	b29b      	uxth	r3, r3
   159a4:	021b      	lsls	r3, r3, #8
   159a6:	b29a      	uxth	r2, r3
   159a8:	230c      	movs	r3, #12
   159aa:	18fb      	adds	r3, r7, r3
   159ac:	781b      	ldrb	r3, [r3, #0]
   159ae:	b29b      	uxth	r3, r3
   159b0:	18d3      	adds	r3, r2, r3
   159b2:	b29b      	uxth	r3, r3
   159b4:	b21a      	sxth	r2, r3
   159b6:	683b      	ldr	r3, [r7, #0]
   159b8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   159ba:	683b      	ldr	r3, [r7, #0]
   159bc:	3302      	adds	r3, #2
   159be:	220c      	movs	r2, #12
   159c0:	18ba      	adds	r2, r7, r2
   159c2:	78d2      	ldrb	r2, [r2, #3]
   159c4:	b212      	sxth	r2, r2
   159c6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   159c8:	683b      	ldr	r3, [r7, #0]
   159ca:	3302      	adds	r3, #2
   159cc:	683a      	ldr	r2, [r7, #0]
   159ce:	3202      	adds	r2, #2
   159d0:	2100      	movs	r1, #0
   159d2:	5e52      	ldrsh	r2, [r2, r1]
   159d4:	b292      	uxth	r2, r2
   159d6:	0212      	lsls	r2, r2, #8
   159d8:	b291      	uxth	r1, r2
   159da:	220c      	movs	r2, #12
   159dc:	18ba      	adds	r2, r7, r2
   159de:	7892      	ldrb	r2, [r2, #2]
   159e0:	b292      	uxth	r2, r2
   159e2:	188a      	adds	r2, r1, r2
   159e4:	b292      	uxth	r2, r2
   159e6:	b212      	sxth	r2, r2
   159e8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   159ea:	683b      	ldr	r3, [r7, #0]
   159ec:	3304      	adds	r3, #4
   159ee:	220c      	movs	r2, #12
   159f0:	18ba      	adds	r2, r7, r2
   159f2:	7952      	ldrb	r2, [r2, #5]
   159f4:	b212      	sxth	r2, r2
   159f6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   159f8:	683b      	ldr	r3, [r7, #0]
   159fa:	3304      	adds	r3, #4
   159fc:	683a      	ldr	r2, [r7, #0]
   159fe:	3204      	adds	r2, #4
   15a00:	2100      	movs	r1, #0
   15a02:	5e52      	ldrsh	r2, [r2, r1]
   15a04:	b292      	uxth	r2, r2
   15a06:	0212      	lsls	r2, r2, #8
   15a08:	b291      	uxth	r1, r2
   15a0a:	220c      	movs	r2, #12
   15a0c:	18ba      	adds	r2, r7, r2
   15a0e:	7912      	ldrb	r2, [r2, #4]
   15a10:	b292      	uxth	r2, r2
   15a12:	188a      	adds	r2, r1, r2
   15a14:	b292      	uxth	r2, r2
   15a16:	b212      	sxth	r2, r2
   15a18:	801a      	strh	r2, [r3, #0]

  return ret;
   15a1a:	697b      	ldr	r3, [r7, #20]
}
   15a1c:	0018      	movs	r0, r3
   15a1e:	46bd      	mov	sp, r7
   15a20:	b007      	add	sp, #28
   15a22:	bd90      	pop	{r4, r7, pc}
   15a24:	0001513d 	.word	0x0001513d

00015a28 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   15a28:	b590      	push	{r4, r7, lr}
   15a2a:	b085      	sub	sp, #20
   15a2c:	af00      	add	r7, sp, #0
   15a2e:	6078      	str	r0, [r7, #4]
   15a30:	000a      	movs	r2, r1
   15a32:	1cfb      	adds	r3, r7, #3
   15a34:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15a36:	2308      	movs	r3, #8
   15a38:	18fa      	adds	r2, r7, r3
   15a3a:	6878      	ldr	r0, [r7, #4]
   15a3c:	2301      	movs	r3, #1
   15a3e:	2101      	movs	r1, #1
   15a40:	4c11      	ldr	r4, [pc, #68]	; (15a88 <lsm6dso_mem_bank_set+0x60>)
   15a42:	47a0      	blx	r4
   15a44:	0003      	movs	r3, r0
   15a46:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15a48:	68fb      	ldr	r3, [r7, #12]
   15a4a:	2b00      	cmp	r3, #0
   15a4c:	d117      	bne.n	15a7e <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   15a4e:	1cfb      	adds	r3, r7, #3
   15a50:	781b      	ldrb	r3, [r3, #0]
   15a52:	2203      	movs	r2, #3
   15a54:	4013      	ands	r3, r2
   15a56:	b2da      	uxtb	r2, r3
   15a58:	2308      	movs	r3, #8
   15a5a:	18fb      	adds	r3, r7, r3
   15a5c:	0190      	lsls	r0, r2, #6
   15a5e:	781a      	ldrb	r2, [r3, #0]
   15a60:	213f      	movs	r1, #63	; 0x3f
   15a62:	400a      	ands	r2, r1
   15a64:	1c11      	adds	r1, r2, #0
   15a66:	1c02      	adds	r2, r0, #0
   15a68:	430a      	orrs	r2, r1
   15a6a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15a6c:	2308      	movs	r3, #8
   15a6e:	18fa      	adds	r2, r7, r3
   15a70:	6878      	ldr	r0, [r7, #4]
   15a72:	2301      	movs	r3, #1
   15a74:	2101      	movs	r1, #1
   15a76:	4c05      	ldr	r4, [pc, #20]	; (15a8c <lsm6dso_mem_bank_set+0x64>)
   15a78:	47a0      	blx	r4
   15a7a:	0003      	movs	r3, r0
   15a7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15a7e:	68fb      	ldr	r3, [r7, #12]
}
   15a80:	0018      	movs	r0, r3
   15a82:	46bd      	mov	sp, r7
   15a84:	b005      	add	sp, #20
   15a86:	bd90      	pop	{r4, r7, pc}
   15a88:	0001513d 	.word	0x0001513d
   15a8c:	00015183 	.word	0x00015183

00015a90 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   15a90:	b590      	push	{r4, r7, lr}
   15a92:	b085      	sub	sp, #20
   15a94:	af00      	add	r7, sp, #0
   15a96:	6078      	str	r0, [r7, #4]
   15a98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   15a9a:	683a      	ldr	r2, [r7, #0]
   15a9c:	6878      	ldr	r0, [r7, #4]
   15a9e:	2301      	movs	r3, #1
   15aa0:	210f      	movs	r1, #15
   15aa2:	4c04      	ldr	r4, [pc, #16]	; (15ab4 <lsm6dso_device_id_get+0x24>)
   15aa4:	47a0      	blx	r4
   15aa6:	0003      	movs	r3, r0
   15aa8:	60fb      	str	r3, [r7, #12]

  return ret;
   15aaa:	68fb      	ldr	r3, [r7, #12]
}
   15aac:	0018      	movs	r0, r3
   15aae:	46bd      	mov	sp, r7
   15ab0:	b005      	add	sp, #20
   15ab2:	bd90      	pop	{r4, r7, pc}
   15ab4:	0001513d 	.word	0x0001513d

00015ab8 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15ab8:	b590      	push	{r4, r7, lr}
   15aba:	b085      	sub	sp, #20
   15abc:	af00      	add	r7, sp, #0
   15abe:	6078      	str	r0, [r7, #4]
   15ac0:	000a      	movs	r2, r1
   15ac2:	1cfb      	adds	r3, r7, #3
   15ac4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15ac6:	2308      	movs	r3, #8
   15ac8:	18fa      	adds	r2, r7, r3
   15aca:	6878      	ldr	r0, [r7, #4]
   15acc:	2301      	movs	r3, #1
   15ace:	2112      	movs	r1, #18
   15ad0:	4c12      	ldr	r4, [pc, #72]	; (15b1c <lsm6dso_reset_set+0x64>)
   15ad2:	47a0      	blx	r4
   15ad4:	0003      	movs	r3, r0
   15ad6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15ad8:	68fb      	ldr	r3, [r7, #12]
   15ada:	2b00      	cmp	r3, #0
   15adc:	d119      	bne.n	15b12 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   15ade:	1cfb      	adds	r3, r7, #3
   15ae0:	781b      	ldrb	r3, [r3, #0]
   15ae2:	2201      	movs	r2, #1
   15ae4:	4013      	ands	r3, r2
   15ae6:	b2da      	uxtb	r2, r3
   15ae8:	2308      	movs	r3, #8
   15aea:	18fb      	adds	r3, r7, r3
   15aec:	2101      	movs	r1, #1
   15aee:	400a      	ands	r2, r1
   15af0:	0010      	movs	r0, r2
   15af2:	781a      	ldrb	r2, [r3, #0]
   15af4:	2101      	movs	r1, #1
   15af6:	438a      	bics	r2, r1
   15af8:	1c11      	adds	r1, r2, #0
   15afa:	1c02      	adds	r2, r0, #0
   15afc:	430a      	orrs	r2, r1
   15afe:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15b00:	2308      	movs	r3, #8
   15b02:	18fa      	adds	r2, r7, r3
   15b04:	6878      	ldr	r0, [r7, #4]
   15b06:	2301      	movs	r3, #1
   15b08:	2112      	movs	r1, #18
   15b0a:	4c05      	ldr	r4, [pc, #20]	; (15b20 <lsm6dso_reset_set+0x68>)
   15b0c:	47a0      	blx	r4
   15b0e:	0003      	movs	r3, r0
   15b10:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15b12:	68fb      	ldr	r3, [r7, #12]
}
   15b14:	0018      	movs	r0, r3
   15b16:	46bd      	mov	sp, r7
   15b18:	b005      	add	sp, #20
   15b1a:	bd90      	pop	{r4, r7, pc}
   15b1c:	0001513d 	.word	0x0001513d
   15b20:	00015183 	.word	0x00015183

00015b24 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   15b24:	b590      	push	{r4, r7, lr}
   15b26:	b085      	sub	sp, #20
   15b28:	af00      	add	r7, sp, #0
   15b2a:	6078      	str	r0, [r7, #4]
   15b2c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15b2e:	2308      	movs	r3, #8
   15b30:	18fa      	adds	r2, r7, r3
   15b32:	6878      	ldr	r0, [r7, #4]
   15b34:	2301      	movs	r3, #1
   15b36:	2112      	movs	r1, #18
   15b38:	4c08      	ldr	r4, [pc, #32]	; (15b5c <lsm6dso_reset_get+0x38>)
   15b3a:	47a0      	blx	r4
   15b3c:	0003      	movs	r3, r0
   15b3e:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   15b40:	2308      	movs	r3, #8
   15b42:	18fb      	adds	r3, r7, r3
   15b44:	781b      	ldrb	r3, [r3, #0]
   15b46:	07db      	lsls	r3, r3, #31
   15b48:	0fdb      	lsrs	r3, r3, #31
   15b4a:	b2db      	uxtb	r3, r3
   15b4c:	001a      	movs	r2, r3
   15b4e:	683b      	ldr	r3, [r7, #0]
   15b50:	701a      	strb	r2, [r3, #0]

  return ret;
   15b52:	68fb      	ldr	r3, [r7, #12]
}
   15b54:	0018      	movs	r0, r3
   15b56:	46bd      	mov	sp, r7
   15b58:	b005      	add	sp, #20
   15b5a:	bd90      	pop	{r4, r7, pc}
   15b5c:	0001513d 	.word	0x0001513d

00015b60 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15b60:	b590      	push	{r4, r7, lr}
   15b62:	b085      	sub	sp, #20
   15b64:	af00      	add	r7, sp, #0
   15b66:	6078      	str	r0, [r7, #4]
   15b68:	000a      	movs	r2, r1
   15b6a:	1cfb      	adds	r3, r7, #3
   15b6c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15b6e:	2308      	movs	r3, #8
   15b70:	18fa      	adds	r2, r7, r3
   15b72:	6878      	ldr	r0, [r7, #4]
   15b74:	2301      	movs	r3, #1
   15b76:	2110      	movs	r1, #16
   15b78:	4c12      	ldr	r4, [pc, #72]	; (15bc4 <lsm6dso_xl_filter_lp2_set+0x64>)
   15b7a:	47a0      	blx	r4
   15b7c:	0003      	movs	r3, r0
   15b7e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15b80:	68fb      	ldr	r3, [r7, #12]
   15b82:	2b00      	cmp	r3, #0
   15b84:	d119      	bne.n	15bba <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   15b86:	1cfb      	adds	r3, r7, #3
   15b88:	781b      	ldrb	r3, [r3, #0]
   15b8a:	2201      	movs	r2, #1
   15b8c:	4013      	ands	r3, r2
   15b8e:	b2da      	uxtb	r2, r3
   15b90:	2308      	movs	r3, #8
   15b92:	18fb      	adds	r3, r7, r3
   15b94:	2101      	movs	r1, #1
   15b96:	400a      	ands	r2, r1
   15b98:	1890      	adds	r0, r2, r2
   15b9a:	781a      	ldrb	r2, [r3, #0]
   15b9c:	2102      	movs	r1, #2
   15b9e:	438a      	bics	r2, r1
   15ba0:	1c11      	adds	r1, r2, #0
   15ba2:	1c02      	adds	r2, r0, #0
   15ba4:	430a      	orrs	r2, r1
   15ba6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15ba8:	2308      	movs	r3, #8
   15baa:	18fa      	adds	r2, r7, r3
   15bac:	6878      	ldr	r0, [r7, #4]
   15bae:	2301      	movs	r3, #1
   15bb0:	2110      	movs	r1, #16
   15bb2:	4c05      	ldr	r4, [pc, #20]	; (15bc8 <lsm6dso_xl_filter_lp2_set+0x68>)
   15bb4:	47a0      	blx	r4
   15bb6:	0003      	movs	r3, r0
   15bb8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15bba:	68fb      	ldr	r3, [r7, #12]
}
   15bbc:	0018      	movs	r0, r3
   15bbe:	46bd      	mov	sp, r7
   15bc0:	b005      	add	sp, #20
   15bc2:	bd90      	pop	{r4, r7, pc}
   15bc4:	0001513d 	.word	0x0001513d
   15bc8:	00015183 	.word	0x00015183

00015bcc <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   15bcc:	b590      	push	{r4, r7, lr}
   15bce:	b085      	sub	sp, #20
   15bd0:	af00      	add	r7, sp, #0
   15bd2:	6078      	str	r0, [r7, #4]
   15bd4:	000a      	movs	r2, r1
   15bd6:	1cfb      	adds	r3, r7, #3
   15bd8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15bda:	2308      	movs	r3, #8
   15bdc:	18fa      	adds	r2, r7, r3
   15bde:	6878      	ldr	r0, [r7, #4]
   15be0:	2301      	movs	r3, #1
   15be2:	2117      	movs	r1, #23
   15be4:	4c25      	ldr	r4, [pc, #148]	; (15c7c <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   15be6:	47a0      	blx	r4
   15be8:	0003      	movs	r3, r0
   15bea:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15bec:	68fb      	ldr	r3, [r7, #12]
   15bee:	2b00      	cmp	r3, #0
   15bf0:	d13f      	bne.n	15c72 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   15bf2:	1cfb      	adds	r3, r7, #3
   15bf4:	781b      	ldrb	r3, [r3, #0]
   15bf6:	091b      	lsrs	r3, r3, #4
   15bf8:	b2db      	uxtb	r3, r3
   15bfa:	1c1a      	adds	r2, r3, #0
   15bfc:	2301      	movs	r3, #1
   15bfe:	4013      	ands	r3, r2
   15c00:	b2da      	uxtb	r2, r3
   15c02:	2308      	movs	r3, #8
   15c04:	18fb      	adds	r3, r7, r3
   15c06:	2101      	movs	r1, #1
   15c08:	400a      	ands	r2, r1
   15c0a:	0090      	lsls	r0, r2, #2
   15c0c:	781a      	ldrb	r2, [r3, #0]
   15c0e:	2104      	movs	r1, #4
   15c10:	438a      	bics	r2, r1
   15c12:	1c11      	adds	r1, r2, #0
   15c14:	1c02      	adds	r2, r0, #0
   15c16:	430a      	orrs	r2, r1
   15c18:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   15c1a:	1cfb      	adds	r3, r7, #3
   15c1c:	781b      	ldrb	r3, [r3, #0]
   15c1e:	095b      	lsrs	r3, r3, #5
   15c20:	b2db      	uxtb	r3, r3
   15c22:	1c1a      	adds	r2, r3, #0
   15c24:	2301      	movs	r3, #1
   15c26:	4013      	ands	r3, r2
   15c28:	b2da      	uxtb	r2, r3
   15c2a:	2308      	movs	r3, #8
   15c2c:	18fb      	adds	r3, r7, r3
   15c2e:	2101      	movs	r1, #1
   15c30:	400a      	ands	r2, r1
   15c32:	0110      	lsls	r0, r2, #4
   15c34:	781a      	ldrb	r2, [r3, #0]
   15c36:	2110      	movs	r1, #16
   15c38:	438a      	bics	r2, r1
   15c3a:	1c11      	adds	r1, r2, #0
   15c3c:	1c02      	adds	r2, r0, #0
   15c3e:	430a      	orrs	r2, r1
   15c40:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   15c42:	1cfb      	adds	r3, r7, #3
   15c44:	781b      	ldrb	r3, [r3, #0]
   15c46:	2207      	movs	r2, #7
   15c48:	4013      	ands	r3, r2
   15c4a:	b2da      	uxtb	r2, r3
   15c4c:	2308      	movs	r3, #8
   15c4e:	18fb      	adds	r3, r7, r3
   15c50:	0150      	lsls	r0, r2, #5
   15c52:	781a      	ldrb	r2, [r3, #0]
   15c54:	211f      	movs	r1, #31
   15c56:	400a      	ands	r2, r1
   15c58:	1c11      	adds	r1, r2, #0
   15c5a:	1c02      	adds	r2, r0, #0
   15c5c:	430a      	orrs	r2, r1
   15c5e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15c60:	2308      	movs	r3, #8
   15c62:	18fa      	adds	r2, r7, r3
   15c64:	6878      	ldr	r0, [r7, #4]
   15c66:	2301      	movs	r3, #1
   15c68:	2117      	movs	r1, #23
   15c6a:	4c05      	ldr	r4, [pc, #20]	; (15c80 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   15c6c:	47a0      	blx	r4
   15c6e:	0003      	movs	r3, r0
   15c70:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15c72:	68fb      	ldr	r3, [r7, #12]
}
   15c74:	0018      	movs	r0, r3
   15c76:	46bd      	mov	sp, r7
   15c78:	b005      	add	sp, #20
   15c7a:	bd90      	pop	{r4, r7, pc}
   15c7c:	0001513d 	.word	0x0001513d
   15c80:	00015183 	.word	0x00015183

00015c84 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   15c84:	b590      	push	{r4, r7, lr}
   15c86:	b087      	sub	sp, #28
   15c88:	af00      	add	r7, sp, #0
   15c8a:	6078      	str	r0, [r7, #4]
   15c8c:	000a      	movs	r2, r1
   15c8e:	1cfb      	adds	r3, r7, #3
   15c90:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   15c92:	230c      	movs	r3, #12
   15c94:	18fa      	adds	r2, r7, r3
   15c96:	6878      	ldr	r0, [r7, #4]
   15c98:	2301      	movs	r3, #1
   15c9a:	2118      	movs	r1, #24
   15c9c:	4c28      	ldr	r4, [pc, #160]	; (15d40 <lsm6dso_i3c_disable_set+0xbc>)
   15c9e:	47a0      	blx	r4
   15ca0:	0003      	movs	r3, r0
   15ca2:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   15ca4:	697b      	ldr	r3, [r7, #20]
   15ca6:	2b00      	cmp	r3, #0
   15ca8:	d11c      	bne.n	15ce4 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   15caa:	1cfb      	adds	r3, r7, #3
   15cac:	781b      	ldrb	r3, [r3, #0]
   15cae:	09db      	lsrs	r3, r3, #7
   15cb0:	b2db      	uxtb	r3, r3
   15cb2:	1c1a      	adds	r2, r3, #0
   15cb4:	2301      	movs	r3, #1
   15cb6:	4013      	ands	r3, r2
   15cb8:	b2da      	uxtb	r2, r3
   15cba:	230c      	movs	r3, #12
   15cbc:	18fb      	adds	r3, r7, r3
   15cbe:	2101      	movs	r1, #1
   15cc0:	400a      	ands	r2, r1
   15cc2:	1890      	adds	r0, r2, r2
   15cc4:	781a      	ldrb	r2, [r3, #0]
   15cc6:	2102      	movs	r1, #2
   15cc8:	438a      	bics	r2, r1
   15cca:	1c11      	adds	r1, r2, #0
   15ccc:	1c02      	adds	r2, r0, #0
   15cce:	430a      	orrs	r2, r1
   15cd0:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   15cd2:	230c      	movs	r3, #12
   15cd4:	18fa      	adds	r2, r7, r3
   15cd6:	6878      	ldr	r0, [r7, #4]
   15cd8:	2301      	movs	r3, #1
   15cda:	2118      	movs	r1, #24
   15cdc:	4c19      	ldr	r4, [pc, #100]	; (15d44 <lsm6dso_i3c_disable_set+0xc0>)
   15cde:	47a0      	blx	r4
   15ce0:	0003      	movs	r3, r0
   15ce2:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   15ce4:	697b      	ldr	r3, [r7, #20]
   15ce6:	2b00      	cmp	r3, #0
   15ce8:	d108      	bne.n	15cfc <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15cea:	2310      	movs	r3, #16
   15cec:	18fa      	adds	r2, r7, r3
   15cee:	6878      	ldr	r0, [r7, #4]
   15cf0:	2301      	movs	r3, #1
   15cf2:	2162      	movs	r1, #98	; 0x62
   15cf4:	4c12      	ldr	r4, [pc, #72]	; (15d40 <lsm6dso_i3c_disable_set+0xbc>)
   15cf6:	47a0      	blx	r4
   15cf8:	0003      	movs	r3, r0
   15cfa:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   15cfc:	697b      	ldr	r3, [r7, #20]
   15cfe:	2b00      	cmp	r3, #0
   15d00:	d119      	bne.n	15d36 <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   15d02:	1cfb      	adds	r3, r7, #3
   15d04:	781b      	ldrb	r3, [r3, #0]
   15d06:	2203      	movs	r2, #3
   15d08:	4013      	ands	r3, r2
   15d0a:	b2da      	uxtb	r2, r3
   15d0c:	2310      	movs	r3, #16
   15d0e:	18fb      	adds	r3, r7, r3
   15d10:	2103      	movs	r1, #3
   15d12:	400a      	ands	r2, r1
   15d14:	00d0      	lsls	r0, r2, #3
   15d16:	781a      	ldrb	r2, [r3, #0]
   15d18:	2118      	movs	r1, #24
   15d1a:	438a      	bics	r2, r1
   15d1c:	1c11      	adds	r1, r2, #0
   15d1e:	1c02      	adds	r2, r0, #0
   15d20:	430a      	orrs	r2, r1
   15d22:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15d24:	2310      	movs	r3, #16
   15d26:	18fa      	adds	r2, r7, r3
   15d28:	6878      	ldr	r0, [r7, #4]
   15d2a:	2301      	movs	r3, #1
   15d2c:	2162      	movs	r1, #98	; 0x62
   15d2e:	4c05      	ldr	r4, [pc, #20]	; (15d44 <lsm6dso_i3c_disable_set+0xc0>)
   15d30:	47a0      	blx	r4
   15d32:	0003      	movs	r3, r0
   15d34:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   15d36:	697b      	ldr	r3, [r7, #20]
}
   15d38:	0018      	movs	r0, r3
   15d3a:	46bd      	mov	sp, r7
   15d3c:	b007      	add	sp, #28
   15d3e:	bd90      	pop	{r4, r7, pc}
   15d40:	0001513d 	.word	0x0001513d
   15d44:	00015183 	.word	0x00015183

00015d48 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   15d48:	b590      	push	{r4, r7, lr}
   15d4a:	b085      	sub	sp, #20
   15d4c:	af00      	add	r7, sp, #0
   15d4e:	6078      	str	r0, [r7, #4]
   15d50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15d52:	687b      	ldr	r3, [r7, #4]
   15d54:	2102      	movs	r1, #2
   15d56:	0018      	movs	r0, r3
   15d58:	4b0e      	ldr	r3, [pc, #56]	; (15d94 <lsm6dso_fsm_enable_get+0x4c>)
   15d5a:	4798      	blx	r3
   15d5c:	0003      	movs	r3, r0
   15d5e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15d60:	68fb      	ldr	r3, [r7, #12]
   15d62:	2b00      	cmp	r3, #0
   15d64:	d107      	bne.n	15d76 <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   15d66:	683a      	ldr	r2, [r7, #0]
   15d68:	6878      	ldr	r0, [r7, #4]
   15d6a:	2302      	movs	r3, #2
   15d6c:	2146      	movs	r1, #70	; 0x46
   15d6e:	4c0a      	ldr	r4, [pc, #40]	; (15d98 <lsm6dso_fsm_enable_get+0x50>)
   15d70:	47a0      	blx	r4
   15d72:	0003      	movs	r3, r0
   15d74:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   15d76:	68fb      	ldr	r3, [r7, #12]
   15d78:	2b00      	cmp	r3, #0
   15d7a:	d106      	bne.n	15d8a <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15d7c:	687b      	ldr	r3, [r7, #4]
   15d7e:	2100      	movs	r1, #0
   15d80:	0018      	movs	r0, r3
   15d82:	4b04      	ldr	r3, [pc, #16]	; (15d94 <lsm6dso_fsm_enable_get+0x4c>)
   15d84:	4798      	blx	r3
   15d86:	0003      	movs	r3, r0
   15d88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15d8a:	68fb      	ldr	r3, [r7, #12]
}
   15d8c:	0018      	movs	r0, r3
   15d8e:	46bd      	mov	sp, r7
   15d90:	b005      	add	sp, #20
   15d92:	bd90      	pop	{r4, r7, pc}
   15d94:	00015a29 	.word	0x00015a29
   15d98:	0001513d 	.word	0x0001513d

00015d9c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   15d9c:	b590      	push	{r4, r7, lr}
   15d9e:	b085      	sub	sp, #20
   15da0:	af00      	add	r7, sp, #0
   15da2:	6078      	str	r0, [r7, #4]
   15da4:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15da6:	687b      	ldr	r3, [r7, #4]
   15da8:	2102      	movs	r1, #2
   15daa:	0018      	movs	r0, r3
   15dac:	4b21      	ldr	r3, [pc, #132]	; (15e34 <lsm6dso_fsm_data_rate_get+0x98>)
   15dae:	4798      	blx	r3
   15db0:	0003      	movs	r3, r0
   15db2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15db4:	68fb      	ldr	r3, [r7, #12]
   15db6:	2b00      	cmp	r3, #0
   15db8:	d108      	bne.n	15dcc <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   15dba:	2308      	movs	r3, #8
   15dbc:	18fa      	adds	r2, r7, r3
   15dbe:	6878      	ldr	r0, [r7, #4]
   15dc0:	2301      	movs	r3, #1
   15dc2:	215f      	movs	r1, #95	; 0x5f
   15dc4:	4c1c      	ldr	r4, [pc, #112]	; (15e38 <lsm6dso_fsm_data_rate_get+0x9c>)
   15dc6:	47a0      	blx	r4
   15dc8:	0003      	movs	r3, r0
   15dca:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   15dcc:	68fb      	ldr	r3, [r7, #12]
   15dce:	2b00      	cmp	r3, #0
   15dd0:	d12b      	bne.n	15e2a <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   15dd2:	2308      	movs	r3, #8
   15dd4:	18fb      	adds	r3, r7, r3
   15dd6:	781b      	ldrb	r3, [r3, #0]
   15dd8:	06db      	lsls	r3, r3, #27
   15dda:	0f9b      	lsrs	r3, r3, #30
   15ddc:	b2db      	uxtb	r3, r3
   15dde:	2b01      	cmp	r3, #1
   15de0:	d00c      	beq.n	15dfc <lsm6dso_fsm_data_rate_get+0x60>
   15de2:	dc02      	bgt.n	15dea <lsm6dso_fsm_data_rate_get+0x4e>
   15de4:	2b00      	cmp	r3, #0
   15de6:	d005      	beq.n	15df4 <lsm6dso_fsm_data_rate_get+0x58>
   15de8:	e014      	b.n	15e14 <lsm6dso_fsm_data_rate_get+0x78>
   15dea:	2b02      	cmp	r3, #2
   15dec:	d00a      	beq.n	15e04 <lsm6dso_fsm_data_rate_get+0x68>
   15dee:	2b03      	cmp	r3, #3
   15df0:	d00c      	beq.n	15e0c <lsm6dso_fsm_data_rate_get+0x70>
   15df2:	e00f      	b.n	15e14 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15df4:	683b      	ldr	r3, [r7, #0]
   15df6:	2200      	movs	r2, #0
   15df8:	701a      	strb	r2, [r3, #0]
        break;
   15dfa:	e00f      	b.n	15e1c <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   15dfc:	683b      	ldr	r3, [r7, #0]
   15dfe:	2201      	movs	r2, #1
   15e00:	701a      	strb	r2, [r3, #0]
        break;
   15e02:	e00b      	b.n	15e1c <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   15e04:	683b      	ldr	r3, [r7, #0]
   15e06:	2202      	movs	r2, #2
   15e08:	701a      	strb	r2, [r3, #0]
        break;
   15e0a:	e007      	b.n	15e1c <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   15e0c:	683b      	ldr	r3, [r7, #0]
   15e0e:	2203      	movs	r2, #3
   15e10:	701a      	strb	r2, [r3, #0]
        break;
   15e12:	e003      	b.n	15e1c <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15e14:	683b      	ldr	r3, [r7, #0]
   15e16:	2200      	movs	r2, #0
   15e18:	701a      	strb	r2, [r3, #0]
        break;
   15e1a:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15e1c:	687b      	ldr	r3, [r7, #4]
   15e1e:	2100      	movs	r1, #0
   15e20:	0018      	movs	r0, r3
   15e22:	4b04      	ldr	r3, [pc, #16]	; (15e34 <lsm6dso_fsm_data_rate_get+0x98>)
   15e24:	4798      	blx	r3
   15e26:	0003      	movs	r3, r0
   15e28:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15e2a:	68fb      	ldr	r3, [r7, #12]
}
   15e2c:	0018      	movs	r0, r3
   15e2e:	46bd      	mov	sp, r7
   15e30:	b005      	add	sp, #20
   15e32:	bd90      	pop	{r4, r7, pc}
   15e34:	00015a29 	.word	0x00015a29
   15e38:	0001513d 	.word	0x0001513d

00015e3c <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15e3c:	b580      	push	{r7, lr}
   15e3e:	b084      	sub	sp, #16
   15e40:	af00      	add	r7, sp, #0
   15e42:	60f8      	str	r0, [r7, #12]
   15e44:	0008      	movs	r0, r1
   15e46:	607a      	str	r2, [r7, #4]
   15e48:	0019      	movs	r1, r3
   15e4a:	230b      	movs	r3, #11
   15e4c:	18fb      	adds	r3, r7, r3
   15e4e:	1c02      	adds	r2, r0, #0
   15e50:	701a      	strb	r2, [r3, #0]
   15e52:	2308      	movs	r3, #8
   15e54:	18fb      	adds	r3, r7, r3
   15e56:	1c0a      	adds	r2, r1, #0
   15e58:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
   15e5a:	2300      	movs	r3, #0

}
   15e5c:	0018      	movs	r0, r3
   15e5e:	46bd      	mov	sp, r7
   15e60:	b004      	add	sp, #16
   15e62:	bd80      	pop	{r7, pc}

00015e64 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   15e64:	b580      	push	{r7, lr}
   15e66:	b084      	sub	sp, #16
   15e68:	af00      	add	r7, sp, #0
   15e6a:	60f8      	str	r0, [r7, #12]
   15e6c:	0008      	movs	r0, r1
   15e6e:	607a      	str	r2, [r7, #4]
   15e70:	0019      	movs	r1, r3
   15e72:	230b      	movs	r3, #11
   15e74:	18fb      	adds	r3, r7, r3
   15e76:	1c02      	adds	r2, r0, #0
   15e78:	701a      	strb	r2, [r3, #0]
   15e7a:	2308      	movs	r3, #8
   15e7c:	18fb      	adds	r3, r7, r3
   15e7e:	1c0a      	adds	r2, r1, #0
   15e80:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
   15e82:	2300      	movs	r3, #0


}
   15e84:	0018      	movs	r0, r3
   15e86:	46bd      	mov	sp, r7
   15e88:	b004      	add	sp, #16
   15e8a:	bd80      	pop	{r7, pc}

00015e8c <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   15e8c:	b580      	push	{r7, lr}
   15e8e:	af00      	add	r7, sp, #0
return &dev_ctx;
   15e90:	4b01      	ldr	r3, [pc, #4]	; (15e98 <GetImuStruct+0xc>)
}
   15e92:	0018      	movs	r0, r3
   15e94:	46bd      	mov	sp, r7
   15e96:	bd80      	pop	{r7, pc}
   15e98:	20000014 	.word	0x20000014

00015e9c <InitImu>:



int32_t InitImu(void)
{
   15e9c:	b580      	push	{r7, lr}
   15e9e:	b082      	sub	sp, #8
   15ea0:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   15ea2:	2300      	movs	r3, #0
   15ea4:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   15ea6:	4b23      	ldr	r3, [pc, #140]	; (15f34 <InitImu+0x98>)
   15ea8:	2101      	movs	r1, #1
   15eaa:	0018      	movs	r0, r3
   15eac:	4b22      	ldr	r3, [pc, #136]	; (15f38 <InitImu+0x9c>)
   15eae:	4798      	blx	r3
   15eb0:	0003      	movs	r3, r0
   15eb2:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   15eb4:	1cfa      	adds	r2, r7, #3
   15eb6:	4b1f      	ldr	r3, [pc, #124]	; (15f34 <InitImu+0x98>)
   15eb8:	0011      	movs	r1, r2
   15eba:	0018      	movs	r0, r3
   15ebc:	4b1f      	ldr	r3, [pc, #124]	; (15f3c <InitImu+0xa0>)
   15ebe:	4798      	blx	r3
   15ec0:	0002      	movs	r2, r0
   15ec2:	687b      	ldr	r3, [r7, #4]
   15ec4:	4313      	orrs	r3, r2
   15ec6:	607b      	str	r3, [r7, #4]
  } while (rst);
   15ec8:	1cfb      	adds	r3, r7, #3
   15eca:	781b      	ldrb	r3, [r3, #0]
   15ecc:	2b00      	cmp	r3, #0
   15ece:	d1f1      	bne.n	15eb4 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   15ed0:	4b18      	ldr	r3, [pc, #96]	; (15f34 <InitImu+0x98>)
   15ed2:	2180      	movs	r1, #128	; 0x80
   15ed4:	0018      	movs	r0, r3
   15ed6:	4b1a      	ldr	r3, [pc, #104]	; (15f40 <InitImu+0xa4>)
   15ed8:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   15eda:	4b16      	ldr	r3, [pc, #88]	; (15f34 <InitImu+0x98>)
   15edc:	2101      	movs	r1, #1
   15ede:	0018      	movs	r0, r3
   15ee0:	4b18      	ldr	r3, [pc, #96]	; (15f44 <InitImu+0xa8>)
   15ee2:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   15ee4:	4b13      	ldr	r3, [pc, #76]	; (15f34 <InitImu+0x98>)
   15ee6:	2100      	movs	r1, #0
   15ee8:	0018      	movs	r0, r3
   15eea:	4b17      	ldr	r3, [pc, #92]	; (15f48 <InitImu+0xac>)
   15eec:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   15eee:	4b11      	ldr	r3, [pc, #68]	; (15f34 <InitImu+0x98>)
   15ef0:	2101      	movs	r1, #1
   15ef2:	0018      	movs	r0, r3
   15ef4:	4b15      	ldr	r3, [pc, #84]	; (15f4c <InitImu+0xb0>)
   15ef6:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   15ef8:	4b0e      	ldr	r3, [pc, #56]	; (15f34 <InitImu+0x98>)
   15efa:	2101      	movs	r1, #1
   15efc:	0018      	movs	r0, r3
   15efe:	4b14      	ldr	r3, [pc, #80]	; (15f50 <InitImu+0xb4>)
   15f00:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   15f02:	4b0c      	ldr	r3, [pc, #48]	; (15f34 <InitImu+0x98>)
   15f04:	2100      	movs	r1, #0
   15f06:	0018      	movs	r0, r3
   15f08:	4b12      	ldr	r3, [pc, #72]	; (15f54 <InitImu+0xb8>)
   15f0a:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   15f0c:	4b09      	ldr	r3, [pc, #36]	; (15f34 <InitImu+0x98>)
   15f0e:	2106      	movs	r1, #6
   15f10:	0018      	movs	r0, r3
   15f12:	4b11      	ldr	r3, [pc, #68]	; (15f58 <InitImu+0xbc>)
   15f14:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   15f16:	4b07      	ldr	r3, [pc, #28]	; (15f34 <InitImu+0x98>)
   15f18:	2104      	movs	r1, #4
   15f1a:	0018      	movs	r0, r3
   15f1c:	4b0f      	ldr	r3, [pc, #60]	; (15f5c <InitImu+0xc0>)
   15f1e:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   15f20:	4b04      	ldr	r3, [pc, #16]	; (15f34 <InitImu+0x98>)
   15f22:	2101      	movs	r1, #1
   15f24:	0018      	movs	r0, r3
   15f26:	4b0e      	ldr	r3, [pc, #56]	; (15f60 <InitImu+0xc4>)
   15f28:	4798      	blx	r3

  return error;
   15f2a:	687b      	ldr	r3, [r7, #4]
}
   15f2c:	0018      	movs	r0, r3
   15f2e:	46bd      	mov	sp, r7
   15f30:	b002      	add	sp, #8
   15f32:	bd80      	pop	{r7, pc}
   15f34:	20000014 	.word	0x20000014
   15f38:	00015ab9 	.word	0x00015ab9
   15f3c:	00015b25 	.word	0x00015b25
   15f40:	00015c85 	.word	0x00015c85
   15f44:	00015861 	.word	0x00015861
   15f48:	000158cd 	.word	0x000158cd
   15f4c:	0001526d 	.word	0x0001526d
   15f50:	0001559d 	.word	0x0001559d
   15f54:	00015201 	.word	0x00015201
   15f58:	00015531 	.word	0x00015531
   15f5c:	00015bcd 	.word	0x00015bcd
   15f60:	00015b61 	.word	0x00015b61

00015f64 <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   15f64:	b580      	push	{r7, lr}
   15f66:	b082      	sub	sp, #8
   15f68:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   15f6a:	4b38      	ldr	r3, [pc, #224]	; (1604c <InitializeSeesaw+0xe8>)
   15f6c:	222e      	movs	r2, #46	; 0x2e
   15f6e:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   15f70:	4b36      	ldr	r3, [pc, #216]	; (1604c <InitializeSeesaw+0xe8>)
   15f72:	4a37      	ldr	r2, [pc, #220]	; (16050 <InitializeSeesaw+0xec>)
   15f74:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   15f76:	4b35      	ldr	r3, [pc, #212]	; (1604c <InitializeSeesaw+0xe8>)
   15f78:	2202      	movs	r2, #2
   15f7a:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   15f7c:	4b33      	ldr	r3, [pc, #204]	; (1604c <InitializeSeesaw+0xe8>)
   15f7e:	003a      	movs	r2, r7
   15f80:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15f82:	4b32      	ldr	r3, [pc, #200]	; (1604c <InitializeSeesaw+0xe8>)
   15f84:	2201      	movs	r2, #1
   15f86:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15f88:	4b30      	ldr	r3, [pc, #192]	; (1604c <InitializeSeesaw+0xe8>)
   15f8a:	2264      	movs	r2, #100	; 0x64
   15f8c:	2100      	movs	r1, #0
   15f8e:	0018      	movs	r0, r3
   15f90:	4b30      	ldr	r3, [pc, #192]	; (16054 <InitializeSeesaw+0xf0>)
   15f92:	4798      	blx	r3
   15f94:	0003      	movs	r3, r0
   15f96:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   15f98:	687b      	ldr	r3, [r7, #4]
   15f9a:	2b00      	cmp	r3, #0
   15f9c:	d004      	beq.n	15fa8 <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   15f9e:	4b2e      	ldr	r3, [pc, #184]	; (16058 <InitializeSeesaw+0xf4>)
   15fa0:	0018      	movs	r0, r3
   15fa2:	4b2e      	ldr	r3, [pc, #184]	; (1605c <InitializeSeesaw+0xf8>)
   15fa4:	4798      	blx	r3
   15fa6:	e00c      	b.n	15fc2 <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   15fa8:	003b      	movs	r3, r7
   15faa:	781b      	ldrb	r3, [r3, #0]
   15fac:	2b55      	cmp	r3, #85	; 0x55
   15fae:	d004      	beq.n	15fba <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   15fb0:	4b2b      	ldr	r3, [pc, #172]	; (16060 <InitializeSeesaw+0xfc>)
   15fb2:	0018      	movs	r0, r3
   15fb4:	4b29      	ldr	r3, [pc, #164]	; (1605c <InitializeSeesaw+0xf8>)
   15fb6:	4798      	blx	r3
   15fb8:	e003      	b.n	15fc2 <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   15fba:	4b2a      	ldr	r3, [pc, #168]	; (16064 <InitializeSeesaw+0x100>)
   15fbc:	0018      	movs	r0, r3
   15fbe:	4b27      	ldr	r3, [pc, #156]	; (1605c <InitializeSeesaw+0xf8>)
   15fc0:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   15fc2:	4b22      	ldr	r3, [pc, #136]	; (1604c <InitializeSeesaw+0xe8>)
   15fc4:	4a28      	ldr	r2, [pc, #160]	; (16068 <InitializeSeesaw+0x104>)
   15fc6:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   15fc8:	4b20      	ldr	r3, [pc, #128]	; (1604c <InitializeSeesaw+0xe8>)
   15fca:	2203      	movs	r2, #3
   15fcc:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15fce:	4b1f      	ldr	r3, [pc, #124]	; (1604c <InitializeSeesaw+0xe8>)
   15fd0:	2164      	movs	r1, #100	; 0x64
   15fd2:	0018      	movs	r0, r3
   15fd4:	4b25      	ldr	r3, [pc, #148]	; (1606c <InitializeSeesaw+0x108>)
   15fd6:	4798      	blx	r3
   15fd8:	0003      	movs	r3, r0
   15fda:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15fdc:	687b      	ldr	r3, [r7, #4]
   15fde:	2b00      	cmp	r3, #0
   15fe0:	d003      	beq.n	15fea <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   15fe2:	4b23      	ldr	r3, [pc, #140]	; (16070 <InitializeSeesaw+0x10c>)
   15fe4:	0018      	movs	r0, r3
   15fe6:	4b1d      	ldr	r3, [pc, #116]	; (1605c <InitializeSeesaw+0xf8>)
   15fe8:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   15fea:	4b18      	ldr	r3, [pc, #96]	; (1604c <InitializeSeesaw+0xe8>)
   15fec:	4a21      	ldr	r2, [pc, #132]	; (16074 <InitializeSeesaw+0x110>)
   15fee:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   15ff0:	4b16      	ldr	r3, [pc, #88]	; (1604c <InitializeSeesaw+0xe8>)
   15ff2:	2203      	movs	r2, #3
   15ff4:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15ff6:	4b15      	ldr	r3, [pc, #84]	; (1604c <InitializeSeesaw+0xe8>)
   15ff8:	2164      	movs	r1, #100	; 0x64
   15ffa:	0018      	movs	r0, r3
   15ffc:	4b1b      	ldr	r3, [pc, #108]	; (1606c <InitializeSeesaw+0x108>)
   15ffe:	4798      	blx	r3
   16000:	0003      	movs	r3, r0
   16002:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   16004:	687b      	ldr	r3, [r7, #4]
   16006:	2b00      	cmp	r3, #0
   16008:	d003      	beq.n	16012 <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   1600a:	4b1b      	ldr	r3, [pc, #108]	; (16078 <InitializeSeesaw+0x114>)
   1600c:	0018      	movs	r0, r3
   1600e:	4b13      	ldr	r3, [pc, #76]	; (1605c <InitializeSeesaw+0xf8>)
   16010:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   16012:	4b0e      	ldr	r3, [pc, #56]	; (1604c <InitializeSeesaw+0xe8>)
   16014:	4a19      	ldr	r2, [pc, #100]	; (1607c <InitializeSeesaw+0x118>)
   16016:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   16018:	4b0c      	ldr	r3, [pc, #48]	; (1604c <InitializeSeesaw+0xe8>)
   1601a:	2204      	movs	r2, #4
   1601c:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   1601e:	4b0b      	ldr	r3, [pc, #44]	; (1604c <InitializeSeesaw+0xe8>)
   16020:	2164      	movs	r1, #100	; 0x64
   16022:	0018      	movs	r0, r3
   16024:	4b11      	ldr	r3, [pc, #68]	; (1606c <InitializeSeesaw+0x108>)
   16026:	4798      	blx	r3
   16028:	0003      	movs	r3, r0
   1602a:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   1602c:	687b      	ldr	r3, [r7, #4]
   1602e:	2b00      	cmp	r3, #0
   16030:	d003      	beq.n	1603a <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   16032:	4b13      	ldr	r3, [pc, #76]	; (16080 <InitializeSeesaw+0x11c>)
   16034:	0018      	movs	r0, r3
   16036:	4b09      	ldr	r3, [pc, #36]	; (1605c <InitializeSeesaw+0xf8>)
   16038:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   1603a:	4b12      	ldr	r3, [pc, #72]	; (16084 <InitializeSeesaw+0x120>)
   1603c:	4798      	blx	r3

    SeesawInitializeKeypad();
   1603e:	4b12      	ldr	r3, [pc, #72]	; (16088 <InitializeSeesaw+0x124>)
   16040:	4798      	blx	r3
    return error;
   16042:	687b      	ldr	r3, [r7, #4]
}
   16044:	0018      	movs	r0, r3
   16046:	46bd      	mov	sp, r7
   16048:	b002      	add	sp, #8
   1604a:	bd80      	pop	{r7, pc}
   1604c:	20004494 	.word	0x20004494
   16050:	00036df8 	.word	0x00036df8
   16054:	00015025 	.word	0x00015025
   16058:	00036e10 	.word	0x00036e10
   1605c:	0001e8d9 	.word	0x0001e8d9
   16060:	00036e30 	.word	0x00036e30
   16064:	00036e3c 	.word	0x00036e3c
   16068:	00036dfc 	.word	0x00036dfc
   1606c:	00014f4d 	.word	0x00014f4d
   16070:	00036e50 	.word	0x00036e50
   16074:	00036e00 	.word	0x00036e00
   16078:	00036e70 	.word	0x00036e70
   1607c:	00036e04 	.word	0x00036e04
   16080:	00036e9c 	.word	0x00036e9c
   16084:	00016439 	.word	0x00016439
   16088:	00016349 	.word	0x00016349

0001608c <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   1608c:	b580      	push	{r7, lr}
   1608e:	b082      	sub	sp, #8
   16090:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   16092:	1cfb      	adds	r3, r7, #3
   16094:	2200      	movs	r2, #0
   16096:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16098:	4b11      	ldr	r3, [pc, #68]	; (160e0 <SeesawGetKeypadCount+0x54>)
   1609a:	222e      	movs	r2, #46	; 0x2e
   1609c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   1609e:	4b10      	ldr	r3, [pc, #64]	; (160e0 <SeesawGetKeypadCount+0x54>)
   160a0:	4a10      	ldr	r2, [pc, #64]	; (160e4 <SeesawGetKeypadCount+0x58>)
   160a2:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   160a4:	4b0e      	ldr	r3, [pc, #56]	; (160e0 <SeesawGetKeypadCount+0x54>)
   160a6:	2202      	movs	r2, #2
   160a8:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   160aa:	4b0d      	ldr	r3, [pc, #52]	; (160e0 <SeesawGetKeypadCount+0x54>)
   160ac:	1cfa      	adds	r2, r7, #3
   160ae:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   160b0:	4b0b      	ldr	r3, [pc, #44]	; (160e0 <SeesawGetKeypadCount+0x54>)
   160b2:	2201      	movs	r2, #1
   160b4:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   160b6:	4b0a      	ldr	r3, [pc, #40]	; (160e0 <SeesawGetKeypadCount+0x54>)
   160b8:	2264      	movs	r2, #100	; 0x64
   160ba:	2100      	movs	r1, #0
   160bc:	0018      	movs	r0, r3
   160be:	4b0a      	ldr	r3, [pc, #40]	; (160e8 <SeesawGetKeypadCount+0x5c>)
   160c0:	4798      	blx	r3
   160c2:	0003      	movs	r3, r0
   160c4:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   160c6:	687b      	ldr	r3, [r7, #4]
   160c8:	2b00      	cmp	r3, #0
   160ca:	d003      	beq.n	160d4 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   160cc:	4b07      	ldr	r3, [pc, #28]	; (160ec <SeesawGetKeypadCount+0x60>)
   160ce:	0018      	movs	r0, r3
   160d0:	4b07      	ldr	r3, [pc, #28]	; (160f0 <SeesawGetKeypadCount+0x64>)
   160d2:	4798      	blx	r3
    }
    return count;
   160d4:	1cfb      	adds	r3, r7, #3
   160d6:	781b      	ldrb	r3, [r3, #0]
}
   160d8:	0018      	movs	r0, r3
   160da:	46bd      	mov	sp, r7
   160dc:	b002      	add	sp, #8
   160de:	bd80      	pop	{r7, pc}
   160e0:	20004494 	.word	0x20004494
   160e4:	00036e0c 	.word	0x00036e0c
   160e8:	00015025 	.word	0x00015025
   160ec:	00036ed0 	.word	0x00036ed0
   160f0:	0001e8d9 	.word	0x0001e8d9

000160f4 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   160f4:	b580      	push	{r7, lr}
   160f6:	b084      	sub	sp, #16
   160f8:	af00      	add	r7, sp, #0
   160fa:	6078      	str	r0, [r7, #4]
   160fc:	000a      	movs	r2, r1
   160fe:	1cfb      	adds	r3, r7, #3
   16100:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   16102:	1cfb      	adds	r3, r7, #3
   16104:	781b      	ldrb	r3, [r3, #0]
   16106:	2b00      	cmp	r3, #0
   16108:	d101      	bne.n	1610e <SeesawReadKeypad+0x1a>
   1610a:	2300      	movs	r3, #0
   1610c:	e026      	b.n	1615c <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   1610e:	2308      	movs	r3, #8
   16110:	18fb      	adds	r3, r7, r3
   16112:	4a14      	ldr	r2, [pc, #80]	; (16164 <SeesawReadKeypad+0x70>)
   16114:	8812      	ldrh	r2, [r2, #0]
   16116:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16118:	4b13      	ldr	r3, [pc, #76]	; (16168 <SeesawReadKeypad+0x74>)
   1611a:	222e      	movs	r2, #46	; 0x2e
   1611c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   1611e:	4b12      	ldr	r3, [pc, #72]	; (16168 <SeesawReadKeypad+0x74>)
   16120:	2208      	movs	r2, #8
   16122:	18ba      	adds	r2, r7, r2
   16124:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   16126:	4b10      	ldr	r3, [pc, #64]	; (16168 <SeesawReadKeypad+0x74>)
   16128:	2202      	movs	r2, #2
   1612a:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   1612c:	4b0e      	ldr	r3, [pc, #56]	; (16168 <SeesawReadKeypad+0x74>)
   1612e:	687a      	ldr	r2, [r7, #4]
   16130:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   16132:	1cfb      	adds	r3, r7, #3
   16134:	781b      	ldrb	r3, [r3, #0]
   16136:	b29a      	uxth	r2, r3
   16138:	4b0b      	ldr	r3, [pc, #44]	; (16168 <SeesawReadKeypad+0x74>)
   1613a:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1613c:	4b0a      	ldr	r3, [pc, #40]	; (16168 <SeesawReadKeypad+0x74>)
   1613e:	2264      	movs	r2, #100	; 0x64
   16140:	2100      	movs	r1, #0
   16142:	0018      	movs	r0, r3
   16144:	4b09      	ldr	r3, [pc, #36]	; (1616c <SeesawReadKeypad+0x78>)
   16146:	4798      	blx	r3
   16148:	0003      	movs	r3, r0
   1614a:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   1614c:	68fb      	ldr	r3, [r7, #12]
   1614e:	2b00      	cmp	r3, #0
   16150:	d003      	beq.n	1615a <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16152:	4b07      	ldr	r3, [pc, #28]	; (16170 <SeesawReadKeypad+0x7c>)
   16154:	0018      	movs	r0, r3
   16156:	4b07      	ldr	r3, [pc, #28]	; (16174 <SeesawReadKeypad+0x80>)
   16158:	4798      	blx	r3
    }
    return error;
   1615a:	68fb      	ldr	r3, [r7, #12]
}
   1615c:	0018      	movs	r0, r3
   1615e:	46bd      	mov	sp, r7
   16160:	b004      	add	sp, #16
   16162:	bd80      	pop	{r7, pc}
   16164:	00036ef4 	.word	0x00036ef4
   16168:	20004494 	.word	0x20004494
   1616c:	00015025 	.word	0x00015025
   16170:	00036ed0 	.word	0x00036ed0
   16174:	0001e8d9 	.word	0x0001e8d9

00016178 <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   16178:	b590      	push	{r4, r7, lr}
   1617a:	b087      	sub	sp, #28
   1617c:	af00      	add	r7, sp, #0
   1617e:	0004      	movs	r4, r0
   16180:	0008      	movs	r0, r1
   16182:	0011      	movs	r1, r2
   16184:	1dfb      	adds	r3, r7, #7
   16186:	1c22      	adds	r2, r4, #0
   16188:	701a      	strb	r2, [r3, #0]
   1618a:	1dbb      	adds	r3, r7, #6
   1618c:	1c02      	adds	r2, r0, #0
   1618e:	701a      	strb	r2, [r3, #0]
   16190:	1d7b      	adds	r3, r7, #5
   16192:	1c0a      	adds	r2, r1, #0
   16194:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   16196:	2310      	movs	r3, #16
   16198:	18fb      	adds	r3, r7, r3
   1619a:	1d7a      	adds	r2, r7, #5
   1619c:	7812      	ldrb	r2, [r2, #0]
   1619e:	2101      	movs	r1, #1
   161a0:	0010      	movs	r0, r2
   161a2:	4008      	ands	r0, r1
   161a4:	781a      	ldrb	r2, [r3, #0]
   161a6:	2101      	movs	r1, #1
   161a8:	438a      	bics	r2, r1
   161aa:	1c11      	adds	r1, r2, #0
   161ac:	1c02      	adds	r2, r0, #0
   161ae:	430a      	orrs	r2, r1
   161b0:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   161b2:	1dbb      	adds	r3, r7, #6
   161b4:	781b      	ldrb	r3, [r3, #0]
   161b6:	2201      	movs	r2, #1
   161b8:	409a      	lsls	r2, r3
   161ba:	0013      	movs	r3, r2
   161bc:	b2db      	uxtb	r3, r3
   161be:	1c1a      	adds	r2, r3, #0
   161c0:	230f      	movs	r3, #15
   161c2:	4013      	ands	r3, r2
   161c4:	b2da      	uxtb	r2, r3
   161c6:	2310      	movs	r3, #16
   161c8:	18fb      	adds	r3, r7, r3
   161ca:	210f      	movs	r1, #15
   161cc:	400a      	ands	r2, r1
   161ce:	1890      	adds	r0, r2, r2
   161d0:	781a      	ldrb	r2, [r3, #0]
   161d2:	211e      	movs	r1, #30
   161d4:	438a      	bics	r2, r1
   161d6:	1c11      	adds	r1, r2, #0
   161d8:	1c02      	adds	r2, r0, #0
   161da:	430a      	orrs	r2, r1
   161dc:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   161de:	230c      	movs	r3, #12
   161e0:	18fb      	adds	r3, r7, r3
   161e2:	2210      	movs	r2, #16
   161e4:	701a      	strb	r2, [r3, #0]
   161e6:	230c      	movs	r3, #12
   161e8:	18fb      	adds	r3, r7, r3
   161ea:	2201      	movs	r2, #1
   161ec:	705a      	strb	r2, [r3, #1]
   161ee:	230c      	movs	r3, #12
   161f0:	18fb      	adds	r3, r7, r3
   161f2:	1dfa      	adds	r2, r7, #7
   161f4:	7812      	ldrb	r2, [r2, #0]
   161f6:	709a      	strb	r2, [r3, #2]
   161f8:	2310      	movs	r3, #16
   161fa:	18fb      	adds	r3, r7, r3
   161fc:	781a      	ldrb	r2, [r3, #0]
   161fe:	230c      	movs	r3, #12
   16200:	18fb      	adds	r3, r7, r3
   16202:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   16204:	4b0c      	ldr	r3, [pc, #48]	; (16238 <SeesawActivateKey+0xc0>)
   16206:	222e      	movs	r2, #46	; 0x2e
   16208:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   1620a:	4b0b      	ldr	r3, [pc, #44]	; (16238 <SeesawActivateKey+0xc0>)
   1620c:	220c      	movs	r2, #12
   1620e:	18ba      	adds	r2, r7, r2
   16210:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   16212:	4b09      	ldr	r3, [pc, #36]	; (16238 <SeesawActivateKey+0xc0>)
   16214:	2204      	movs	r2, #4
   16216:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   16218:	4b07      	ldr	r3, [pc, #28]	; (16238 <SeesawActivateKey+0xc0>)
   1621a:	2200      	movs	r2, #0
   1621c:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   1621e:	4b06      	ldr	r3, [pc, #24]	; (16238 <SeesawActivateKey+0xc0>)
   16220:	2164      	movs	r1, #100	; 0x64
   16222:	0018      	movs	r0, r3
   16224:	4b05      	ldr	r3, [pc, #20]	; (1623c <SeesawActivateKey+0xc4>)
   16226:	4798      	blx	r3
   16228:	0003      	movs	r3, r0
   1622a:	617b      	str	r3, [r7, #20]
    return error;
   1622c:	697b      	ldr	r3, [r7, #20]
}
   1622e:	0018      	movs	r0, r3
   16230:	46bd      	mov	sp, r7
   16232:	b007      	add	sp, #28
   16234:	bd90      	pop	{r4, r7, pc}
   16236:	46c0      	nop			; (mov r8, r8)
   16238:	20004494 	.word	0x20004494
   1623c:	00014f4d 	.word	0x00014f4d

00016240 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   16240:	b5b0      	push	{r4, r5, r7, lr}
   16242:	b086      	sub	sp, #24
   16244:	af00      	add	r7, sp, #0
   16246:	0005      	movs	r5, r0
   16248:	000c      	movs	r4, r1
   1624a:	0010      	movs	r0, r2
   1624c:	0019      	movs	r1, r3
   1624e:	1dfb      	adds	r3, r7, #7
   16250:	1c2a      	adds	r2, r5, #0
   16252:	701a      	strb	r2, [r3, #0]
   16254:	1dbb      	adds	r3, r7, #6
   16256:	1c22      	adds	r2, r4, #0
   16258:	701a      	strb	r2, [r3, #0]
   1625a:	1d7b      	adds	r3, r7, #5
   1625c:	1c02      	adds	r2, r0, #0
   1625e:	701a      	strb	r2, [r3, #0]
   16260:	1d3b      	adds	r3, r7, #4
   16262:	1c0a      	adds	r2, r1, #0
   16264:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   16266:	2308      	movs	r3, #8
   16268:	18fb      	adds	r3, r7, r3
   1626a:	220e      	movs	r2, #14
   1626c:	701a      	strb	r2, [r3, #0]
   1626e:	2308      	movs	r3, #8
   16270:	18fb      	adds	r3, r7, r3
   16272:	2204      	movs	r2, #4
   16274:	705a      	strb	r2, [r3, #1]
   16276:	2308      	movs	r3, #8
   16278:	18fb      	adds	r3, r7, r3
   1627a:	2200      	movs	r2, #0
   1627c:	709a      	strb	r2, [r3, #2]
   1627e:	2308      	movs	r3, #8
   16280:	18fb      	adds	r3, r7, r3
   16282:	2200      	movs	r2, #0
   16284:	70da      	strb	r2, [r3, #3]
   16286:	2308      	movs	r3, #8
   16288:	18fb      	adds	r3, r7, r3
   1628a:	1d7a      	adds	r2, r7, #5
   1628c:	7812      	ldrb	r2, [r2, #0]
   1628e:	711a      	strb	r2, [r3, #4]
   16290:	2308      	movs	r3, #8
   16292:	18fb      	adds	r3, r7, r3
   16294:	1dba      	adds	r2, r7, #6
   16296:	7812      	ldrb	r2, [r2, #0]
   16298:	715a      	strb	r2, [r3, #5]
   1629a:	2308      	movs	r3, #8
   1629c:	18fb      	adds	r3, r7, r3
   1629e:	1d3a      	adds	r2, r7, #4
   162a0:	7812      	ldrb	r2, [r2, #0]
   162a2:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   162a4:	1dfb      	adds	r3, r7, #7
   162a6:	781b      	ldrb	r3, [r3, #0]
   162a8:	b29b      	uxth	r3, r3
   162aa:	2216      	movs	r2, #22
   162ac:	18ba      	adds	r2, r7, r2
   162ae:	1c19      	adds	r1, r3, #0
   162b0:	1c0b      	adds	r3, r1, #0
   162b2:	18db      	adds	r3, r3, r3
   162b4:	185b      	adds	r3, r3, r1
   162b6:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   162b8:	2316      	movs	r3, #22
   162ba:	18fb      	adds	r3, r7, r3
   162bc:	881b      	ldrh	r3, [r3, #0]
   162be:	0a1b      	lsrs	r3, r3, #8
   162c0:	b29b      	uxth	r3, r3
   162c2:	b2da      	uxtb	r2, r3
   162c4:	2308      	movs	r3, #8
   162c6:	18fb      	adds	r3, r7, r3
   162c8:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   162ca:	2316      	movs	r3, #22
   162cc:	18fb      	adds	r3, r7, r3
   162ce:	881b      	ldrh	r3, [r3, #0]
   162d0:	b2da      	uxtb	r2, r3
   162d2:	2308      	movs	r3, #8
   162d4:	18fb      	adds	r3, r7, r3
   162d6:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   162d8:	4b09      	ldr	r3, [pc, #36]	; (16300 <SeesawSetLed+0xc0>)
   162da:	2208      	movs	r2, #8
   162dc:	18ba      	adds	r2, r7, r2
   162de:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   162e0:	4b07      	ldr	r3, [pc, #28]	; (16300 <SeesawSetLed+0xc0>)
   162e2:	2207      	movs	r2, #7
   162e4:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   162e6:	4b06      	ldr	r3, [pc, #24]	; (16300 <SeesawSetLed+0xc0>)
   162e8:	2164      	movs	r1, #100	; 0x64
   162ea:	0018      	movs	r0, r3
   162ec:	4b05      	ldr	r3, [pc, #20]	; (16304 <SeesawSetLed+0xc4>)
   162ee:	4798      	blx	r3
   162f0:	0003      	movs	r3, r0
   162f2:	613b      	str	r3, [r7, #16]
    return error;
   162f4:	693b      	ldr	r3, [r7, #16]
}
   162f6:	0018      	movs	r0, r3
   162f8:	46bd      	mov	sp, r7
   162fa:	b006      	add	sp, #24
   162fc:	bdb0      	pop	{r4, r5, r7, pc}
   162fe:	46c0      	nop			; (mov r8, r8)
   16300:	20004494 	.word	0x20004494
   16304:	00014f4d 	.word	0x00014f4d

00016308 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   16308:	b580      	push	{r7, lr}
   1630a:	b082      	sub	sp, #8
   1630c:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   1630e:	003b      	movs	r3, r7
   16310:	4a0a      	ldr	r2, [pc, #40]	; (1633c <SeesawOrderLedUpdate+0x34>)
   16312:	8812      	ldrh	r2, [r2, #0]
   16314:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   16316:	4b0a      	ldr	r3, [pc, #40]	; (16340 <SeesawOrderLedUpdate+0x38>)
   16318:	003a      	movs	r2, r7
   1631a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   1631c:	4b08      	ldr	r3, [pc, #32]	; (16340 <SeesawOrderLedUpdate+0x38>)
   1631e:	2202      	movs	r2, #2
   16320:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16322:	4b07      	ldr	r3, [pc, #28]	; (16340 <SeesawOrderLedUpdate+0x38>)
   16324:	2164      	movs	r1, #100	; 0x64
   16326:	0018      	movs	r0, r3
   16328:	4b06      	ldr	r3, [pc, #24]	; (16344 <SeesawOrderLedUpdate+0x3c>)
   1632a:	4798      	blx	r3
   1632c:	0003      	movs	r3, r0
   1632e:	607b      	str	r3, [r7, #4]
    return error;
   16330:	687b      	ldr	r3, [r7, #4]
}
   16332:	0018      	movs	r0, r3
   16334:	46bd      	mov	sp, r7
   16336:	b002      	add	sp, #8
   16338:	bd80      	pop	{r7, pc}
   1633a:	46c0      	nop			; (mov r8, r8)
   1633c:	00036ef8 	.word	0x00036ef8
   16340:	20004494 	.word	0x20004494
   16344:	00014f4d 	.word	0x00014f4d

00016348 <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   16348:	b580      	push	{r7, lr}
   1634a:	b082      	sub	sp, #8
   1634c:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   1634e:	4b33      	ldr	r3, [pc, #204]	; (1641c <SeesawInitializeKeypad+0xd4>)
   16350:	222e      	movs	r2, #46	; 0x2e
   16352:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   16354:	4b31      	ldr	r3, [pc, #196]	; (1641c <SeesawInitializeKeypad+0xd4>)
   16356:	4a32      	ldr	r2, [pc, #200]	; (16420 <SeesawInitializeKeypad+0xd8>)
   16358:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   1635a:	4b30      	ldr	r3, [pc, #192]	; (1641c <SeesawInitializeKeypad+0xd4>)
   1635c:	2203      	movs	r2, #3
   1635e:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   16360:	4b2e      	ldr	r3, [pc, #184]	; (1641c <SeesawInitializeKeypad+0xd4>)
   16362:	2200      	movs	r2, #0
   16364:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   16366:	4b2d      	ldr	r3, [pc, #180]	; (1641c <SeesawInitializeKeypad+0xd4>)
   16368:	2164      	movs	r1, #100	; 0x64
   1636a:	0018      	movs	r0, r3
   1636c:	4b2d      	ldr	r3, [pc, #180]	; (16424 <SeesawInitializeKeypad+0xdc>)
   1636e:	4798      	blx	r3
   16370:	0003      	movs	r3, r0
   16372:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   16374:	683b      	ldr	r3, [r7, #0]
   16376:	2b00      	cmp	r3, #0
   16378:	d003      	beq.n	16382 <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   1637a:	4b2b      	ldr	r3, [pc, #172]	; (16428 <SeesawInitializeKeypad+0xe0>)
   1637c:	0018      	movs	r0, r3
   1637e:	4b2b      	ldr	r3, [pc, #172]	; (1642c <SeesawInitializeKeypad+0xe4>)
   16380:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   16382:	2300      	movs	r3, #0
   16384:	607b      	str	r3, [r7, #4]
   16386:	e041      	b.n	1640c <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   16388:	687b      	ldr	r3, [r7, #4]
   1638a:	2b00      	cmp	r3, #0
   1638c:	da00      	bge.n	16390 <SeesawInitializeKeypad+0x48>
   1638e:	3303      	adds	r3, #3
   16390:	109b      	asrs	r3, r3, #2
   16392:	b2db      	uxtb	r3, r3
   16394:	00db      	lsls	r3, r3, #3
   16396:	b2da      	uxtb	r2, r3
   16398:	687b      	ldr	r3, [r7, #4]
   1639a:	4925      	ldr	r1, [pc, #148]	; (16430 <SeesawInitializeKeypad+0xe8>)
   1639c:	400b      	ands	r3, r1
   1639e:	d504      	bpl.n	163aa <SeesawInitializeKeypad+0x62>
   163a0:	3b01      	subs	r3, #1
   163a2:	2104      	movs	r1, #4
   163a4:	4249      	negs	r1, r1
   163a6:	430b      	orrs	r3, r1
   163a8:	3301      	adds	r3, #1
   163aa:	b2db      	uxtb	r3, r3
   163ac:	18d3      	adds	r3, r2, r3
   163ae:	b2db      	uxtb	r3, r3
   163b0:	2201      	movs	r2, #1
   163b2:	2103      	movs	r1, #3
   163b4:	0018      	movs	r0, r3
   163b6:	4b1f      	ldr	r3, [pc, #124]	; (16434 <SeesawInitializeKeypad+0xec>)
   163b8:	4798      	blx	r3
   163ba:	0003      	movs	r3, r0
   163bc:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   163be:	687b      	ldr	r3, [r7, #4]
   163c0:	2b00      	cmp	r3, #0
   163c2:	da00      	bge.n	163c6 <SeesawInitializeKeypad+0x7e>
   163c4:	3303      	adds	r3, #3
   163c6:	109b      	asrs	r3, r3, #2
   163c8:	b2db      	uxtb	r3, r3
   163ca:	00db      	lsls	r3, r3, #3
   163cc:	b2da      	uxtb	r2, r3
   163ce:	687b      	ldr	r3, [r7, #4]
   163d0:	4917      	ldr	r1, [pc, #92]	; (16430 <SeesawInitializeKeypad+0xe8>)
   163d2:	400b      	ands	r3, r1
   163d4:	d504      	bpl.n	163e0 <SeesawInitializeKeypad+0x98>
   163d6:	3b01      	subs	r3, #1
   163d8:	2104      	movs	r1, #4
   163da:	4249      	negs	r1, r1
   163dc:	430b      	orrs	r3, r1
   163de:	3301      	adds	r3, #1
   163e0:	b2db      	uxtb	r3, r3
   163e2:	18d3      	adds	r3, r2, r3
   163e4:	b2db      	uxtb	r3, r3
   163e6:	2201      	movs	r2, #1
   163e8:	2102      	movs	r1, #2
   163ea:	0018      	movs	r0, r3
   163ec:	4b11      	ldr	r3, [pc, #68]	; (16434 <SeesawInitializeKeypad+0xec>)
   163ee:	4798      	blx	r3
   163f0:	0002      	movs	r2, r0
   163f2:	683b      	ldr	r3, [r7, #0]
   163f4:	4313      	orrs	r3, r2
   163f6:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   163f8:	683b      	ldr	r3, [r7, #0]
   163fa:	2b00      	cmp	r3, #0
   163fc:	d003      	beq.n	16406 <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   163fe:	4b0a      	ldr	r3, [pc, #40]	; (16428 <SeesawInitializeKeypad+0xe0>)
   16400:	0018      	movs	r0, r3
   16402:	4b0a      	ldr	r3, [pc, #40]	; (1642c <SeesawInitializeKeypad+0xe4>)
   16404:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   16406:	687b      	ldr	r3, [r7, #4]
   16408:	3301      	adds	r3, #1
   1640a:	607b      	str	r3, [r7, #4]
   1640c:	687b      	ldr	r3, [r7, #4]
   1640e:	2b0f      	cmp	r3, #15
   16410:	ddba      	ble.n	16388 <SeesawInitializeKeypad+0x40>
        }
    }
}
   16412:	46c0      	nop			; (mov r8, r8)
   16414:	46bd      	mov	sp, r7
   16416:	b002      	add	sp, #8
   16418:	bd80      	pop	{r7, pc}
   1641a:	46c0      	nop			; (mov r8, r8)
   1641c:	20004494 	.word	0x20004494
   16420:	00036e08 	.word	0x00036e08
   16424:	00014f4d 	.word	0x00014f4d
   16428:	00036efc 	.word	0x00036efc
   1642c:	0001e8d9 	.word	0x0001e8d9
   16430:	80000003 	.word	0x80000003
   16434:	00016179 	.word	0x00016179

00016438 <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   16438:	b5b0      	push	{r4, r5, r7, lr}
   1643a:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   1643c:	23ff      	movs	r3, #255	; 0xff
   1643e:	22ff      	movs	r2, #255	; 0xff
   16440:	21ff      	movs	r1, #255	; 0xff
   16442:	200f      	movs	r0, #15
   16444:	4c09      	ldr	r4, [pc, #36]	; (1646c <SeesawTurnOnLedTest+0x34>)
   16446:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   16448:	4b09      	ldr	r3, [pc, #36]	; (16470 <SeesawTurnOnLedTest+0x38>)
   1644a:	4798      	blx	r3
    vTaskDelay(400);
   1644c:	23c8      	movs	r3, #200	; 0xc8
   1644e:	005b      	lsls	r3, r3, #1
   16450:	0018      	movs	r0, r3
   16452:	4b08      	ldr	r3, [pc, #32]	; (16474 <SeesawTurnOnLedTest+0x3c>)
   16454:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   16456:	2300      	movs	r3, #0
   16458:	2200      	movs	r2, #0
   1645a:	2100      	movs	r1, #0
   1645c:	200f      	movs	r0, #15
   1645e:	4c03      	ldr	r4, [pc, #12]	; (1646c <SeesawTurnOnLedTest+0x34>)
   16460:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   16462:	4b03      	ldr	r3, [pc, #12]	; (16470 <SeesawTurnOnLedTest+0x38>)
   16464:	4798      	blx	r3
   16466:	46c0      	nop			; (mov r8, r8)
   16468:	46bd      	mov	sp, r7
   1646a:	bdb0      	pop	{r4, r5, r7, pc}
   1646c:	00016241 	.word	0x00016241
   16470:	00016309 	.word	0x00016309
   16474:	0001cc85 	.word	0x0001cc85

00016478 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   16478:	b590      	push	{r4, r7, lr}
   1647a:	b089      	sub	sp, #36	; 0x24
   1647c:	af02      	add	r7, sp, #8
   1647e:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   16480:	4b96      	ldr	r3, [pc, #600]	; (166dc <vUiHandlerTask+0x264>)
   16482:	0018      	movs	r0, r3
   16484:	4b96      	ldr	r3, [pc, #600]	; (166e0 <vUiHandlerTask+0x268>)
   16486:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   16488:	4b96      	ldr	r3, [pc, #600]	; (166e4 <vUiHandlerTask+0x26c>)
   1648a:	2201      	movs	r2, #1
   1648c:	701a      	strb	r2, [r3, #0]

    // Graphics Test - Remove if not using
    gfx_mono_init();
   1648e:	4b96      	ldr	r3, [pc, #600]	; (166e8 <vUiHandlerTask+0x270>)
   16490:	4798      	blx	r3
    gfx_mono_draw_line(1, 1, 62, 46, GFX_PIXEL_SET);
   16492:	2301      	movs	r3, #1
   16494:	9300      	str	r3, [sp, #0]
   16496:	232e      	movs	r3, #46	; 0x2e
   16498:	223e      	movs	r2, #62	; 0x3e
   1649a:	2101      	movs	r1, #1
   1649c:	2001      	movs	r0, #1
   1649e:	4c93      	ldr	r4, [pc, #588]	; (166ec <vUiHandlerTask+0x274>)
   164a0:	47a0      	blx	r4
    // Draw a filled circle with all quadrant drawn
    gfx_mono_draw_filled_circle(36, 20, 20, GFX_PIXEL_SET, GFX_WHOLE);
   164a2:	23ff      	movs	r3, #255	; 0xff
   164a4:	9300      	str	r3, [sp, #0]
   164a6:	2301      	movs	r3, #1
   164a8:	2214      	movs	r2, #20
   164aa:	2114      	movs	r1, #20
   164ac:	2024      	movs	r0, #36	; 0x24
   164ae:	4c90      	ldr	r4, [pc, #576]	; (166f0 <vUiHandlerTask+0x278>)
   164b0:	47a0      	blx	r4

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   164b2:	4b8c      	ldr	r3, [pc, #560]	; (166e4 <vUiHandlerTask+0x26c>)
   164b4:	781b      	ldrb	r3, [r3, #0]
   164b6:	2b01      	cmp	r3, #1
   164b8:	d100      	bne.n	164bc <vUiHandlerTask+0x44>
   164ba:	e107      	b.n	166cc <vUiHandlerTask+0x254>
   164bc:	2b02      	cmp	r3, #2
   164be:	d002      	beq.n	164c6 <vUiHandlerTask+0x4e>
   164c0:	2b00      	cmp	r3, #0
   164c2:	d06e      	beq.n	165a2 <vUiHandlerTask+0x12a>
   164c4:	e0fe      	b.n	166c4 <vUiHandlerTask+0x24c>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   164c6:	4b8b      	ldr	r3, [pc, #556]	; (166f4 <vUiHandlerTask+0x27c>)
   164c8:	2200      	movs	r2, #0
   164ca:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   164cc:	4b8a      	ldr	r3, [pc, #552]	; (166f8 <vUiHandlerTask+0x280>)
   164ce:	2201      	movs	r2, #1
   164d0:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   164d2:	4b8a      	ldr	r3, [pc, #552]	; (166fc <vUiHandlerTask+0x284>)
   164d4:	2214      	movs	r2, #20
   164d6:	21ff      	movs	r1, #255	; 0xff
   164d8:	0018      	movs	r0, r3
   164da:	4b89      	ldr	r3, [pc, #548]	; (16700 <vUiHandlerTask+0x288>)
   164dc:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   164de:	4b89      	ldr	r3, [pc, #548]	; (16704 <vUiHandlerTask+0x28c>)
   164e0:	2200      	movs	r2, #0
   164e2:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   164e4:	2317      	movs	r3, #23
   164e6:	18fc      	adds	r4, r7, r3
   164e8:	4b87      	ldr	r3, [pc, #540]	; (16708 <vUiHandlerTask+0x290>)
   164ea:	4798      	blx	r3
   164ec:	0003      	movs	r3, r0
   164ee:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   164f0:	2317      	movs	r3, #23
   164f2:	18fb      	adds	r3, r7, r3
   164f4:	781b      	ldrb	r3, [r3, #0]
   164f6:	2b0f      	cmp	r3, #15
   164f8:	d903      	bls.n	16502 <vUiHandlerTask+0x8a>
   164fa:	2317      	movs	r3, #23
   164fc:	18fb      	adds	r3, r7, r3
   164fe:	2210      	movs	r2, #16
   16500:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   16502:	2317      	movs	r3, #23
   16504:	18fb      	adds	r3, r7, r3
   16506:	781b      	ldrb	r3, [r3, #0]
   16508:	2b00      	cmp	r3, #0
   1650a:	d007      	beq.n	1651c <vUiHandlerTask+0xa4>
                    SeesawReadKeypad(buttons,
   1650c:	2317      	movs	r3, #23
   1650e:	18fb      	adds	r3, r7, r3
   16510:	781a      	ldrb	r2, [r3, #0]
   16512:	4b7e      	ldr	r3, [pc, #504]	; (1670c <vUiHandlerTask+0x294>)
   16514:	0011      	movs	r1, r2
   16516:	0018      	movs	r0, r3
   16518:	4b7d      	ldr	r3, [pc, #500]	; (16710 <vUiHandlerTask+0x298>)
   1651a:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   1651c:	4b7b      	ldr	r3, [pc, #492]	; (1670c <vUiHandlerTask+0x294>)
   1651e:	2210      	movs	r2, #16
   16520:	2100      	movs	r1, #0
   16522:	0018      	movs	r0, r3
   16524:	4b76      	ldr	r3, [pc, #472]	; (16700 <vUiHandlerTask+0x288>)
   16526:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   16528:	4b7a      	ldr	r3, [pc, #488]	; (16714 <vUiHandlerTask+0x29c>)
   1652a:	781b      	ldrb	r3, [r3, #0]
   1652c:	b2d9      	uxtb	r1, r3
   1652e:	4b7a      	ldr	r3, [pc, #488]	; (16718 <vUiHandlerTask+0x2a0>)
   16530:	781b      	ldrb	r3, [r3, #0]
   16532:	b2da      	uxtb	r2, r3
   16534:	4b79      	ldr	r3, [pc, #484]	; (1671c <vUiHandlerTask+0x2a4>)
   16536:	781b      	ldrb	r3, [r3, #0]
   16538:	b2db      	uxtb	r3, r3
   1653a:	2000      	movs	r0, #0
   1653c:	4c78      	ldr	r4, [pc, #480]	; (16720 <vUiHandlerTask+0x2a8>)
   1653e:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   16540:	4b78      	ldr	r3, [pc, #480]	; (16724 <vUiHandlerTask+0x2ac>)
   16542:	4798      	blx	r3
                vTaskDelay(1000);
   16544:	23fa      	movs	r3, #250	; 0xfa
   16546:	009b      	lsls	r3, r3, #2
   16548:	0018      	movs	r0, r3
   1654a:	4b77      	ldr	r3, [pc, #476]	; (16728 <vUiHandlerTask+0x2b0>)
   1654c:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 1 off
   1654e:	2300      	movs	r3, #0
   16550:	2200      	movs	r2, #0
   16552:	2100      	movs	r1, #0
   16554:	2000      	movs	r0, #0
   16556:	4c72      	ldr	r4, [pc, #456]	; (16720 <vUiHandlerTask+0x2a8>)
   16558:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   1655a:	4b6e      	ldr	r3, [pc, #440]	; (16714 <vUiHandlerTask+0x29c>)
   1655c:	781b      	ldrb	r3, [r3, #0]
   1655e:	b2d9      	uxtb	r1, r3
   16560:	4b6d      	ldr	r3, [pc, #436]	; (16718 <vUiHandlerTask+0x2a0>)
   16562:	781b      	ldrb	r3, [r3, #0]
   16564:	b2da      	uxtb	r2, r3
   16566:	4b6d      	ldr	r3, [pc, #436]	; (1671c <vUiHandlerTask+0x2a4>)
   16568:	781b      	ldrb	r3, [r3, #0]
   1656a:	b2db      	uxtb	r3, r3
   1656c:	200f      	movs	r0, #15
   1656e:	4c6c      	ldr	r4, [pc, #432]	; (16720 <vUiHandlerTask+0x2a8>)
   16570:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   16572:	4b6c      	ldr	r3, [pc, #432]	; (16724 <vUiHandlerTask+0x2ac>)
   16574:	4798      	blx	r3
                vTaskDelay(1000);
   16576:	23fa      	movs	r3, #250	; 0xfa
   16578:	009b      	lsls	r3, r3, #2
   1657a:	0018      	movs	r0, r3
   1657c:	4b6a      	ldr	r3, [pc, #424]	; (16728 <vUiHandlerTask+0x2b0>)
   1657e:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   16580:	2300      	movs	r3, #0
   16582:	2200      	movs	r2, #0
   16584:	2100      	movs	r1, #0
   16586:	200f      	movs	r0, #15
   16588:	4c65      	ldr	r4, [pc, #404]	; (16720 <vUiHandlerTask+0x2a8>)
   1658a:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   1658c:	4b65      	ldr	r3, [pc, #404]	; (16724 <vUiHandlerTask+0x2ac>)
   1658e:	4798      	blx	r3
                vTaskDelay(1000);
   16590:	23fa      	movs	r3, #250	; 0xfa
   16592:	009b      	lsls	r3, r3, #2
   16594:	0018      	movs	r0, r3
   16596:	4b64      	ldr	r3, [pc, #400]	; (16728 <vUiHandlerTask+0x2b0>)
   16598:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   1659a:	4b52      	ldr	r3, [pc, #328]	; (166e4 <vUiHandlerTask+0x26c>)
   1659c:	2200      	movs	r2, #0
   1659e:	701a      	strb	r2, [r3, #0]

                break;
   165a0:	e097      	b.n	166d2 <vUiHandlerTask+0x25a>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   165a2:	2316      	movs	r3, #22
   165a4:	18fc      	adds	r4, r7, r3
   165a6:	4b58      	ldr	r3, [pc, #352]	; (16708 <vUiHandlerTask+0x290>)
   165a8:	4798      	blx	r3
   165aa:	0003      	movs	r3, r0
   165ac:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   165ae:	4b57      	ldr	r3, [pc, #348]	; (1670c <vUiHandlerTask+0x294>)
   165b0:	2210      	movs	r2, #16
   165b2:	2100      	movs	r1, #0
   165b4:	0018      	movs	r0, r3
   165b6:	4b52      	ldr	r3, [pc, #328]	; (16700 <vUiHandlerTask+0x288>)
   165b8:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   165ba:	2316      	movs	r3, #22
   165bc:	18fb      	adds	r3, r7, r3
   165be:	781b      	ldrb	r3, [r3, #0]
   165c0:	2b0f      	cmp	r3, #15
   165c2:	d903      	bls.n	165cc <vUiHandlerTask+0x154>
                    numPresses = BUTTON_PRESSES_MAX;
   165c4:	2316      	movs	r3, #22
   165c6:	18fb      	adds	r3, r7, r3
   165c8:	2210      	movs	r2, #16
   165ca:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   165cc:	2316      	movs	r3, #22
   165ce:	18fb      	adds	r3, r7, r3
   165d0:	781b      	ldrb	r3, [r3, #0]
   165d2:	2b00      	cmp	r3, #0
   165d4:	d065      	beq.n	166a2 <vUiHandlerTask+0x22a>
   165d6:	2316      	movs	r3, #22
   165d8:	18fb      	adds	r3, r7, r3
   165da:	781a      	ldrb	r2, [r3, #0]
   165dc:	4b4b      	ldr	r3, [pc, #300]	; (1670c <vUiHandlerTask+0x294>)
   165de:	0011      	movs	r1, r2
   165e0:	0018      	movs	r0, r3
   165e2:	4b4b      	ldr	r3, [pc, #300]	; (16710 <vUiHandlerTask+0x298>)
   165e4:	4798      	blx	r3
   165e6:	1e03      	subs	r3, r0, #0
   165e8:	d15b      	bne.n	166a2 <vUiHandlerTask+0x22a>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   165ea:	2300      	movs	r3, #0
   165ec:	613b      	str	r3, [r7, #16]
   165ee:	e050      	b.n	16692 <vUiHandlerTask+0x21a>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   165f0:	4a46      	ldr	r2, [pc, #280]	; (1670c <vUiHandlerTask+0x294>)
   165f2:	693b      	ldr	r3, [r7, #16]
   165f4:	18d3      	adds	r3, r2, r3
   165f6:	781b      	ldrb	r3, [r3, #0]
   165f8:	089b      	lsrs	r3, r3, #2
   165fa:	b2db      	uxtb	r3, r3
   165fc:	2b00      	cmp	r3, #0
   165fe:	da00      	bge.n	16602 <vUiHandlerTask+0x18a>
   16600:	3307      	adds	r3, #7
   16602:	10db      	asrs	r3, r3, #3
   16604:	b2db      	uxtb	r3, r3
   16606:	009b      	lsls	r3, r3, #2
   16608:	b2d9      	uxtb	r1, r3
   1660a:	4a40      	ldr	r2, [pc, #256]	; (1670c <vUiHandlerTask+0x294>)
   1660c:	693b      	ldr	r3, [r7, #16]
   1660e:	18d3      	adds	r3, r2, r3
   16610:	781b      	ldrb	r3, [r3, #0]
   16612:	089b      	lsrs	r3, r3, #2
   16614:	b2db      	uxtb	r3, r3
   16616:	2207      	movs	r2, #7
   16618:	4013      	ands	r3, r2
   1661a:	b2da      	uxtb	r2, r3
   1661c:	230f      	movs	r3, #15
   1661e:	18fb      	adds	r3, r7, r3
   16620:	188a      	adds	r2, r1, r2
   16622:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   16624:	4a39      	ldr	r2, [pc, #228]	; (1670c <vUiHandlerTask+0x294>)
   16626:	693b      	ldr	r3, [r7, #16]
   16628:	18d3      	adds	r3, r2, r3
   1662a:	781a      	ldrb	r2, [r3, #0]
   1662c:	230e      	movs	r3, #14
   1662e:	18fb      	adds	r3, r7, r3
   16630:	2103      	movs	r1, #3
   16632:	400a      	ands	r2, r1
   16634:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   16636:	230e      	movs	r3, #14
   16638:	18fb      	adds	r3, r7, r3
   1663a:	781b      	ldrb	r3, [r3, #0]
   1663c:	2b03      	cmp	r3, #3
   1663e:	d10f      	bne.n	16660 <vUiHandlerTask+0x1e8>
                            SeesawSetLed(keynum, red, green, blue);
   16640:	4b34      	ldr	r3, [pc, #208]	; (16714 <vUiHandlerTask+0x29c>)
   16642:	781b      	ldrb	r3, [r3, #0]
   16644:	b2d9      	uxtb	r1, r3
   16646:	4b34      	ldr	r3, [pc, #208]	; (16718 <vUiHandlerTask+0x2a0>)
   16648:	781b      	ldrb	r3, [r3, #0]
   1664a:	b2da      	uxtb	r2, r3
   1664c:	4b33      	ldr	r3, [pc, #204]	; (1671c <vUiHandlerTask+0x2a4>)
   1664e:	781b      	ldrb	r3, [r3, #0]
   16650:	b2dc      	uxtb	r4, r3
   16652:	230f      	movs	r3, #15
   16654:	18fb      	adds	r3, r7, r3
   16656:	7818      	ldrb	r0, [r3, #0]
   16658:	0023      	movs	r3, r4
   1665a:	4c31      	ldr	r4, [pc, #196]	; (16720 <vUiHandlerTask+0x2a8>)
   1665c:	47a0      	blx	r4
   1665e:	e015      	b.n	1668c <vUiHandlerTask+0x214>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   16660:	230f      	movs	r3, #15
   16662:	18fb      	adds	r3, r7, r3
   16664:	7818      	ldrb	r0, [r3, #0]
   16666:	2300      	movs	r3, #0
   16668:	2200      	movs	r2, #0
   1666a:	2100      	movs	r1, #0
   1666c:	4c2c      	ldr	r4, [pc, #176]	; (16720 <vUiHandlerTask+0x2a8>)
   1666e:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   16670:	4b20      	ldr	r3, [pc, #128]	; (166f4 <vUiHandlerTask+0x27c>)
   16672:	781b      	ldrb	r3, [r3, #0]
   16674:	0019      	movs	r1, r3
   16676:	4b21      	ldr	r3, [pc, #132]	; (166fc <vUiHandlerTask+0x284>)
   16678:	220f      	movs	r2, #15
   1667a:	18ba      	adds	r2, r7, r2
   1667c:	7812      	ldrb	r2, [r2, #0]
   1667e:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   16680:	4b1c      	ldr	r3, [pc, #112]	; (166f4 <vUiHandlerTask+0x27c>)
   16682:	781b      	ldrb	r3, [r3, #0]
   16684:	3301      	adds	r3, #1
   16686:	b2da      	uxtb	r2, r3
   16688:	4b1a      	ldr	r3, [pc, #104]	; (166f4 <vUiHandlerTask+0x27c>)
   1668a:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   1668c:	693b      	ldr	r3, [r7, #16]
   1668e:	3301      	adds	r3, #1
   16690:	613b      	str	r3, [r7, #16]
   16692:	2316      	movs	r3, #22
   16694:	18fb      	adds	r3, r7, r3
   16696:	781a      	ldrb	r2, [r3, #0]
   16698:	693b      	ldr	r3, [r7, #16]
   1669a:	429a      	cmp	r2, r3
   1669c:	dca8      	bgt.n	165f0 <vUiHandlerTask+0x178>
                        }
                    }
                    SeesawOrderLedUpdate();
   1669e:	4b21      	ldr	r3, [pc, #132]	; (16724 <vUiHandlerTask+0x2ac>)
   166a0:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   166a2:	4b14      	ldr	r3, [pc, #80]	; (166f4 <vUiHandlerTask+0x27c>)
   166a4:	781a      	ldrb	r2, [r3, #0]
   166a6:	4b14      	ldr	r3, [pc, #80]	; (166f8 <vUiHandlerTask+0x280>)
   166a8:	781b      	ldrb	r3, [r3, #0]
   166aa:	429a      	cmp	r2, r3
   166ac:	d203      	bcs.n	166b6 <vUiHandlerTask+0x23e>
   166ae:	4b11      	ldr	r3, [pc, #68]	; (166f4 <vUiHandlerTask+0x27c>)
   166b0:	781b      	ldrb	r3, [r3, #0]
   166b2:	2b13      	cmp	r3, #19
   166b4:	d90c      	bls.n	166d0 <vUiHandlerTask+0x258>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   166b6:	4b13      	ldr	r3, [pc, #76]	; (16704 <vUiHandlerTask+0x28c>)
   166b8:	2201      	movs	r2, #1
   166ba:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   166bc:	4b09      	ldr	r3, [pc, #36]	; (166e4 <vUiHandlerTask+0x26c>)
   166be:	2201      	movs	r2, #1
   166c0:	701a      	strb	r2, [r3, #0]
                }

                break;
   166c2:	e005      	b.n	166d0 <vUiHandlerTask+0x258>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   166c4:	4b07      	ldr	r3, [pc, #28]	; (166e4 <vUiHandlerTask+0x26c>)
   166c6:	2200      	movs	r2, #0
   166c8:	701a      	strb	r2, [r3, #0]
                break;
   166ca:	e002      	b.n	166d2 <vUiHandlerTask+0x25a>
                break;
   166cc:	46c0      	nop			; (mov r8, r8)
   166ce:	e000      	b.n	166d2 <vUiHandlerTask+0x25a>
                break;
   166d0:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   166d2:	2032      	movs	r0, #50	; 0x32
   166d4:	4b14      	ldr	r3, [pc, #80]	; (16728 <vUiHandlerTask+0x2b0>)
   166d6:	4798      	blx	r3
        switch (uiState) {
   166d8:	e6eb      	b.n	164b2 <vUiHandlerTask+0x3a>
   166da:	46c0      	nop			; (mov r8, r8)
   166dc:	00036f20 	.word	0x00036f20
   166e0:	0001e8d9 	.word	0x0001e8d9
   166e4:	200044dc 	.word	0x200044dc
   166e8:	00012a75 	.word	0x00012a75
   166ec:	000124b5 	.word	0x000124b5
   166f0:	0001273d 	.word	0x0001273d
   166f4:	20000641 	.word	0x20000641
   166f8:	20000642 	.word	0x20000642
   166fc:	200044a4 	.word	0x200044a4
   16700:	00035543 	.word	0x00035543
   16704:	20000643 	.word	0x20000643
   16708:	0001608d 	.word	0x0001608d
   1670c:	200044cc 	.word	0x200044cc
   16710:	000160f5 	.word	0x000160f5
   16714:	20000640 	.word	0x20000640
   16718:	20000020 	.word	0x20000020
   1671c:	20000021 	.word	0x20000021
   16720:	00016241 	.word	0x00016241
   16724:	00016309 	.word	0x00016309
   16728:	0001cc85 	.word	0x0001cc85

0001672c <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   1672c:	b580      	push	{r7, lr}
   1672e:	b082      	sub	sp, #8
   16730:	af00      	add	r7, sp, #0
   16732:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   16734:	4a08      	ldr	r2, [pc, #32]	; (16758 <UiOrderShowMoves+0x2c>)
   16736:	687b      	ldr	r3, [r7, #4]
   16738:	0010      	movs	r0, r2
   1673a:	0019      	movs	r1, r3
   1673c:	2314      	movs	r3, #20
   1673e:	001a      	movs	r2, r3
   16740:	4b06      	ldr	r3, [pc, #24]	; (1675c <UiOrderShowMoves+0x30>)
   16742:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   16744:	4b06      	ldr	r3, [pc, #24]	; (16760 <UiOrderShowMoves+0x34>)
   16746:	2202      	movs	r2, #2
   16748:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   1674a:	4b06      	ldr	r3, [pc, #24]	; (16764 <UiOrderShowMoves+0x38>)
   1674c:	2200      	movs	r2, #0
   1674e:	701a      	strb	r2, [r3, #0]
}
   16750:	46c0      	nop			; (mov r8, r8)
   16752:	46bd      	mov	sp, r7
   16754:	b002      	add	sp, #8
   16756:	bd80      	pop	{r7, pc}
   16758:	200044b8 	.word	0x200044b8
   1675c:	0003550d 	.word	0x0003550d
   16760:	200044dc 	.word	0x200044dc
   16764:	20000643 	.word	0x20000643

00016768 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   16768:	b580      	push	{r7, lr}
   1676a:	af00      	add	r7, sp, #0
    return playIsDone;
   1676c:	4b02      	ldr	r3, [pc, #8]	; (16778 <UiPlayIsDone+0x10>)
   1676e:	781b      	ldrb	r3, [r3, #0]
}
   16770:	0018      	movs	r0, r3
   16772:	46bd      	mov	sp, r7
   16774:	bd80      	pop	{r7, pc}
   16776:	46c0      	nop			; (mov r8, r8)
   16778:	20000643 	.word	0x20000643

0001677c <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   1677c:	b580      	push	{r7, lr}
   1677e:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   16780:	4b01      	ldr	r3, [pc, #4]	; (16788 <UiGetGamePacketOut+0xc>)
}
   16782:	0018      	movs	r0, r3
   16784:	46bd      	mov	sp, r7
   16786:	bd80      	pop	{r7, pc}
   16788:	200044a4 	.word	0x200044a4

0001678c <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   1678c:	b590      	push	{r4, r7, lr}
   1678e:	b083      	sub	sp, #12
   16790:	af00      	add	r7, sp, #0
   16792:	0004      	movs	r4, r0
   16794:	0008      	movs	r0, r1
   16796:	0011      	movs	r1, r2
   16798:	1dfb      	adds	r3, r7, #7
   1679a:	1c22      	adds	r2, r4, #0
   1679c:	701a      	strb	r2, [r3, #0]
   1679e:	1dbb      	adds	r3, r7, #6
   167a0:	1c02      	adds	r2, r0, #0
   167a2:	701a      	strb	r2, [r3, #0]
   167a4:	1d7b      	adds	r3, r7, #5
   167a6:	1c0a      	adds	r2, r1, #0
   167a8:	701a      	strb	r2, [r3, #0]
    red = r;
   167aa:	4b08      	ldr	r3, [pc, #32]	; (167cc <UIChangeColors+0x40>)
   167ac:	1dfa      	adds	r2, r7, #7
   167ae:	7812      	ldrb	r2, [r2, #0]
   167b0:	701a      	strb	r2, [r3, #0]
    green = g;
   167b2:	4b07      	ldr	r3, [pc, #28]	; (167d0 <UIChangeColors+0x44>)
   167b4:	1dba      	adds	r2, r7, #6
   167b6:	7812      	ldrb	r2, [r2, #0]
   167b8:	701a      	strb	r2, [r3, #0]
    blue = b;
   167ba:	4b06      	ldr	r3, [pc, #24]	; (167d4 <UIChangeColors+0x48>)
   167bc:	1d7a      	adds	r2, r7, #5
   167be:	7812      	ldrb	r2, [r2, #0]
   167c0:	701a      	strb	r2, [r3, #0]
}
   167c2:	46c0      	nop			; (mov r8, r8)
   167c4:	46bd      	mov	sp, r7
   167c6:	b003      	add	sp, #12
   167c8:	bd90      	pop	{r4, r7, pc}
   167ca:	46c0      	nop			; (mov r8, r8)
   167cc:	20000640 	.word	0x20000640
   167d0:	20000020 	.word	0x20000020
   167d4:	20000021 	.word	0x20000021

000167d8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   167d8:	b580      	push	{r7, lr}
   167da:	b084      	sub	sp, #16
   167dc:	af00      	add	r7, sp, #0
   167de:	0002      	movs	r2, r0
   167e0:	1dfb      	adds	r3, r7, #7
   167e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   167e4:	230f      	movs	r3, #15
   167e6:	18fb      	adds	r3, r7, r3
   167e8:	1dfa      	adds	r2, r7, #7
   167ea:	7812      	ldrb	r2, [r2, #0]
   167ec:	09d2      	lsrs	r2, r2, #7
   167ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   167f0:	230e      	movs	r3, #14
   167f2:	18fb      	adds	r3, r7, r3
   167f4:	1dfa      	adds	r2, r7, #7
   167f6:	7812      	ldrb	r2, [r2, #0]
   167f8:	0952      	lsrs	r2, r2, #5
   167fa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   167fc:	4b0d      	ldr	r3, [pc, #52]	; (16834 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   167fe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16800:	230f      	movs	r3, #15
   16802:	18fb      	adds	r3, r7, r3
   16804:	781b      	ldrb	r3, [r3, #0]
   16806:	2b00      	cmp	r3, #0
   16808:	d10f      	bne.n	1682a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1680a:	230f      	movs	r3, #15
   1680c:	18fb      	adds	r3, r7, r3
   1680e:	781b      	ldrb	r3, [r3, #0]
   16810:	009b      	lsls	r3, r3, #2
   16812:	2210      	movs	r2, #16
   16814:	4694      	mov	ip, r2
   16816:	44bc      	add	ip, r7
   16818:	4463      	add	r3, ip
   1681a:	3b08      	subs	r3, #8
   1681c:	681a      	ldr	r2, [r3, #0]
   1681e:	230e      	movs	r3, #14
   16820:	18fb      	adds	r3, r7, r3
   16822:	781b      	ldrb	r3, [r3, #0]
   16824:	01db      	lsls	r3, r3, #7
   16826:	18d3      	adds	r3, r2, r3
   16828:	e000      	b.n	1682c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1682a:	2300      	movs	r3, #0
	}
}
   1682c:	0018      	movs	r0, r3
   1682e:	46bd      	mov	sp, r7
   16830:	b004      	add	sp, #16
   16832:	bd80      	pop	{r7, pc}
   16834:	41004400 	.word	0x41004400

00016838 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16838:	b580      	push	{r7, lr}
   1683a:	b082      	sub	sp, #8
   1683c:	af00      	add	r7, sp, #0
   1683e:	0002      	movs	r2, r0
   16840:	1dfb      	adds	r3, r7, #7
   16842:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16844:	1dfb      	adds	r3, r7, #7
   16846:	781b      	ldrb	r3, [r3, #0]
   16848:	0018      	movs	r0, r3
   1684a:	4b03      	ldr	r3, [pc, #12]	; (16858 <port_get_group_from_gpio_pin+0x20>)
   1684c:	4798      	blx	r3
   1684e:	0003      	movs	r3, r0
}
   16850:	0018      	movs	r0, r3
   16852:	46bd      	mov	sp, r7
   16854:	b002      	add	sp, #8
   16856:	bd80      	pop	{r7, pc}
   16858:	000167d9 	.word	0x000167d9

0001685c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   1685c:	b580      	push	{r7, lr}
   1685e:	b084      	sub	sp, #16
   16860:	af00      	add	r7, sp, #0
   16862:	0002      	movs	r2, r0
   16864:	1dfb      	adds	r3, r7, #7
   16866:	701a      	strb	r2, [r3, #0]
   16868:	1dbb      	adds	r3, r7, #6
   1686a:	1c0a      	adds	r2, r1, #0
   1686c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1686e:	1dfb      	adds	r3, r7, #7
   16870:	781b      	ldrb	r3, [r3, #0]
   16872:	0018      	movs	r0, r3
   16874:	4b0d      	ldr	r3, [pc, #52]	; (168ac <port_pin_set_output_level+0x50>)
   16876:	4798      	blx	r3
   16878:	0003      	movs	r3, r0
   1687a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1687c:	1dfb      	adds	r3, r7, #7
   1687e:	781b      	ldrb	r3, [r3, #0]
   16880:	221f      	movs	r2, #31
   16882:	4013      	ands	r3, r2
   16884:	2201      	movs	r2, #1
   16886:	409a      	lsls	r2, r3
   16888:	0013      	movs	r3, r2
   1688a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   1688c:	1dbb      	adds	r3, r7, #6
   1688e:	781b      	ldrb	r3, [r3, #0]
   16890:	2b00      	cmp	r3, #0
   16892:	d003      	beq.n	1689c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16894:	68fb      	ldr	r3, [r7, #12]
   16896:	68ba      	ldr	r2, [r7, #8]
   16898:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   1689a:	e002      	b.n	168a2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1689c:	68fb      	ldr	r3, [r7, #12]
   1689e:	68ba      	ldr	r2, [r7, #8]
   168a0:	615a      	str	r2, [r3, #20]
}
   168a2:	46c0      	nop			; (mov r8, r8)
   168a4:	46bd      	mov	sp, r7
   168a6:	b004      	add	sp, #16
   168a8:	bd80      	pop	{r7, pc}
   168aa:	46c0      	nop			; (mov r8, r8)
   168ac:	00016839 	.word	0x00016839

000168b0 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   168b0:	b580      	push	{r7, lr}
   168b2:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   168b4:	4b02      	ldr	r3, [pc, #8]	; (168c0 <init_state+0x10>)
   168b6:	2200      	movs	r2, #0
   168b8:	701a      	strb	r2, [r3, #0]
}
   168ba:	46c0      	nop			; (mov r8, r8)
   168bc:	46bd      	mov	sp, r7
   168be:	bd80      	pop	{r7, pc}
   168c0:	20000659 	.word	0x20000659

000168c4 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   168c4:	b580      	push	{r7, lr}
   168c6:	b082      	sub	sp, #8
   168c8:	af00      	add	r7, sp, #0
   168ca:	0002      	movs	r2, r0
   168cc:	1dfb      	adds	r3, r7, #7
   168ce:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   168d0:	1dfb      	adds	r3, r7, #7
   168d2:	781b      	ldrb	r3, [r3, #0]
   168d4:	b25b      	sxtb	r3, r3
   168d6:	43db      	mvns	r3, r3
   168d8:	b25b      	sxtb	r3, r3
   168da:	4a06      	ldr	r2, [pc, #24]	; (168f4 <clear_state+0x30>)
   168dc:	7812      	ldrb	r2, [r2, #0]
   168de:	b252      	sxtb	r2, r2
   168e0:	4013      	ands	r3, r2
   168e2:	b25b      	sxtb	r3, r3
   168e4:	b2da      	uxtb	r2, r3
   168e6:	4b03      	ldr	r3, [pc, #12]	; (168f4 <clear_state+0x30>)
   168e8:	701a      	strb	r2, [r3, #0]
}
   168ea:	46c0      	nop			; (mov r8, r8)
   168ec:	46bd      	mov	sp, r7
   168ee:	b002      	add	sp, #8
   168f0:	bd80      	pop	{r7, pc}
   168f2:	46c0      	nop			; (mov r8, r8)
   168f4:	20000659 	.word	0x20000659

000168f8 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   168f8:	b580      	push	{r7, lr}
   168fa:	b082      	sub	sp, #8
   168fc:	af00      	add	r7, sp, #0
   168fe:	0002      	movs	r2, r0
   16900:	1dfb      	adds	r3, r7, #7
   16902:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   16904:	4b05      	ldr	r3, [pc, #20]	; (1691c <add_state+0x24>)
   16906:	781a      	ldrb	r2, [r3, #0]
   16908:	1dfb      	adds	r3, r7, #7
   1690a:	781b      	ldrb	r3, [r3, #0]
   1690c:	4313      	orrs	r3, r2
   1690e:	b2da      	uxtb	r2, r3
   16910:	4b02      	ldr	r3, [pc, #8]	; (1691c <add_state+0x24>)
   16912:	701a      	strb	r2, [r3, #0]
}
   16914:	46c0      	nop			; (mov r8, r8)
   16916:	46bd      	mov	sp, r7
   16918:	b002      	add	sp, #8
   1691a:	bd80      	pop	{r7, pc}
   1691c:	20000659 	.word	0x20000659

00016920 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   16920:	b580      	push	{r7, lr}
   16922:	b082      	sub	sp, #8
   16924:	af00      	add	r7, sp, #0
   16926:	0002      	movs	r2, r0
   16928:	1dfb      	adds	r3, r7, #7
   1692a:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   1692c:	4b06      	ldr	r3, [pc, #24]	; (16948 <is_state_set+0x28>)
   1692e:	781b      	ldrb	r3, [r3, #0]
   16930:	1dfa      	adds	r2, r7, #7
   16932:	7812      	ldrb	r2, [r2, #0]
   16934:	4013      	ands	r3, r2
   16936:	b2db      	uxtb	r3, r3
   16938:	1e5a      	subs	r2, r3, #1
   1693a:	4193      	sbcs	r3, r2
   1693c:	b2db      	uxtb	r3, r3
}
   1693e:	0018      	movs	r0, r3
   16940:	46bd      	mov	sp, r7
   16942:	b002      	add	sp, #8
   16944:	bd80      	pop	{r7, pc}
   16946:	46c0      	nop			; (mov r8, r8)
   16948:	20000659 	.word	0x20000659

0001694c <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   1694c:	b590      	push	{r4, r7, lr}
   1694e:	b085      	sub	sp, #20
   16950:	af00      	add	r7, sp, #0
   16952:	6078      	str	r0, [r7, #4]
   16954:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   16956:	687b      	ldr	r3, [r7, #4]
   16958:	2b00      	cmp	r3, #0
   1695a:	d002      	beq.n	16962 <is_exist_file+0x16>
   1695c:	683b      	ldr	r3, [r7, #0]
   1695e:	2b00      	cmp	r3, #0
   16960:	d101      	bne.n	16966 <is_exist_file+0x1a>
        return false;
   16962:	2300      	movs	r3, #0
   16964:	e013      	b.n	1698e <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   16966:	230f      	movs	r3, #15
   16968:	18fc      	adds	r4, r7, r3
   1696a:	6839      	ldr	r1, [r7, #0]
   1696c:	4b0a      	ldr	r3, [pc, #40]	; (16998 <is_exist_file+0x4c>)
   1696e:	2200      	movs	r2, #0
   16970:	0018      	movs	r0, r3
   16972:	4b0a      	ldr	r3, [pc, #40]	; (1699c <is_exist_file+0x50>)
   16974:	4798      	blx	r3
   16976:	0003      	movs	r3, r0
   16978:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   1697a:	4b07      	ldr	r3, [pc, #28]	; (16998 <is_exist_file+0x4c>)
   1697c:	0018      	movs	r0, r3
   1697e:	4b08      	ldr	r3, [pc, #32]	; (169a0 <is_exist_file+0x54>)
   16980:	4798      	blx	r3
    return (ret == FR_OK);
   16982:	230f      	movs	r3, #15
   16984:	18fb      	adds	r3, r7, r3
   16986:	781b      	ldrb	r3, [r3, #0]
   16988:	425a      	negs	r2, r3
   1698a:	4153      	adcs	r3, r2
   1698c:	b2db      	uxtb	r3, r3
}
   1698e:	0018      	movs	r0, r3
   16990:	46bd      	mov	sp, r7
   16992:	b005      	add	sp, #20
   16994:	bd90      	pop	{r4, r7, pc}
   16996:	46c0      	nop			; (mov r8, r8)
   16998:	2000088c 	.word	0x2000088c
   1699c:	0002e471 	.word	0x0002e471
   169a0:	0002ee71 	.word	0x0002ee71

000169a4 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   169a4:	b580      	push	{r7, lr}
   169a6:	b09e      	sub	sp, #120	; 0x78
   169a8:	af00      	add	r7, sp, #0
   169aa:	60f8      	str	r0, [r7, #12]
   169ac:	60b9      	str	r1, [r7, #8]
   169ae:	1dfb      	adds	r3, r7, #7
   169b0:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   169b2:	2376      	movs	r3, #118	; 0x76
   169b4:	18fb      	adds	r3, r7, r3
   169b6:	2201      	movs	r2, #1
   169b8:	801a      	strh	r2, [r3, #0]
   169ba:	2374      	movs	r3, #116	; 0x74
   169bc:	18fb      	adds	r3, r7, r3
   169be:	2200      	movs	r2, #0
   169c0:	801a      	strh	r2, [r3, #0]
   169c2:	236e      	movs	r3, #110	; 0x6e
   169c4:	18fb      	adds	r3, r7, r3
   169c6:	2200      	movs	r2, #0
   169c8:	801a      	strh	r2, [r3, #0]
   169ca:	2372      	movs	r3, #114	; 0x72
   169cc:	18fb      	adds	r3, r7, r3
   169ce:	2200      	movs	r2, #0
   169d0:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   169d2:	2324      	movs	r3, #36	; 0x24
   169d4:	18fb      	adds	r3, r7, r3
   169d6:	0018      	movs	r0, r3
   169d8:	2341      	movs	r3, #65	; 0x41
   169da:	001a      	movs	r2, r3
   169dc:	2100      	movs	r1, #0
   169de:	4b92      	ldr	r3, [pc, #584]	; (16c28 <rename_to_unique+0x284>)
   169e0:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   169e2:	2318      	movs	r3, #24
   169e4:	18fb      	adds	r3, r7, r3
   169e6:	0018      	movs	r0, r3
   169e8:	2309      	movs	r3, #9
   169ea:	001a      	movs	r2, r3
   169ec:	2100      	movs	r1, #0
   169ee:	4b8e      	ldr	r3, [pc, #568]	; (16c28 <rename_to_unique+0x284>)
   169f0:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   169f2:	2314      	movs	r3, #20
   169f4:	18fb      	adds	r3, r7, r3
   169f6:	2200      	movs	r2, #0
   169f8:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   169fa:	2300      	movs	r3, #0
   169fc:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   169fe:	2371      	movs	r3, #113	; 0x71
   16a00:	18fb      	adds	r3, r7, r3
   16a02:	2200      	movs	r2, #0
   16a04:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   16a06:	68bb      	ldr	r3, [r7, #8]
   16a08:	2b00      	cmp	r3, #0
   16a0a:	d101      	bne.n	16a10 <rename_to_unique+0x6c>
        return false;
   16a0c:	2300      	movs	r3, #0
   16a0e:	e106      	b.n	16c1e <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   16a10:	68ba      	ldr	r2, [r7, #8]
   16a12:	68fb      	ldr	r3, [r7, #12]
   16a14:	0011      	movs	r1, r2
   16a16:	0018      	movs	r0, r3
   16a18:	4b84      	ldr	r3, [pc, #528]	; (16c2c <rename_to_unique+0x288>)
   16a1a:	4798      	blx	r3
   16a1c:	0003      	movs	r3, r0
   16a1e:	001a      	movs	r2, r3
   16a20:	2301      	movs	r3, #1
   16a22:	4053      	eors	r3, r2
   16a24:	b2db      	uxtb	r3, r3
   16a26:	2b00      	cmp	r3, #0
   16a28:	d001      	beq.n	16a2e <rename_to_unique+0x8a>
        return true;
   16a2a:	2301      	movs	r3, #1
   16a2c:	e0f7      	b.n	16c1e <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   16a2e:	68bb      	ldr	r3, [r7, #8]
   16a30:	0018      	movs	r0, r3
   16a32:	4b7f      	ldr	r3, [pc, #508]	; (16c30 <rename_to_unique+0x28c>)
   16a34:	4798      	blx	r3
   16a36:	0003      	movs	r3, r0
   16a38:	2b40      	cmp	r3, #64	; 0x40
   16a3a:	d901      	bls.n	16a40 <rename_to_unique+0x9c>
        return false;
   16a3c:	2300      	movs	r3, #0
   16a3e:	e0ee      	b.n	16c1e <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   16a40:	68bb      	ldr	r3, [r7, #8]
   16a42:	212e      	movs	r1, #46	; 0x2e
   16a44:	0018      	movs	r0, r3
   16a46:	4b7b      	ldr	r3, [pc, #492]	; (16c34 <rename_to_unique+0x290>)
   16a48:	4798      	blx	r3
   16a4a:	0003      	movs	r3, r0
   16a4c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   16a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16a50:	2b00      	cmp	r3, #0
   16a52:	d052      	beq.n	16afa <rename_to_unique+0x156>
        ext_len = strlen(p);
   16a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16a56:	0018      	movs	r0, r3
   16a58:	4b75      	ldr	r3, [pc, #468]	; (16c30 <rename_to_unique+0x28c>)
   16a5a:	4798      	blx	r3
   16a5c:	0002      	movs	r2, r0
   16a5e:	236e      	movs	r3, #110	; 0x6e
   16a60:	18fb      	adds	r3, r7, r3
   16a62:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16a64:	236e      	movs	r3, #110	; 0x6e
   16a66:	18fb      	adds	r3, r7, r3
   16a68:	881b      	ldrh	r3, [r3, #0]
   16a6a:	2b07      	cmp	r3, #7
   16a6c:	d837      	bhi.n	16ade <rename_to_unique+0x13a>
            valid_ext = true;
   16a6e:	2371      	movs	r3, #113	; 0x71
   16a70:	18fb      	adds	r3, r7, r3
   16a72:	2201      	movs	r2, #1
   16a74:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   16a76:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16a78:	2318      	movs	r3, #24
   16a7a:	18fb      	adds	r3, r7, r3
   16a7c:	0011      	movs	r1, r2
   16a7e:	0018      	movs	r0, r3
   16a80:	4b6d      	ldr	r3, [pc, #436]	; (16c38 <rename_to_unique+0x294>)
   16a82:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   16a84:	68bb      	ldr	r3, [r7, #8]
   16a86:	0018      	movs	r0, r3
   16a88:	4b69      	ldr	r3, [pc, #420]	; (16c30 <rename_to_unique+0x28c>)
   16a8a:	4798      	blx	r3
   16a8c:	0002      	movs	r2, r0
   16a8e:	236e      	movs	r3, #110	; 0x6e
   16a90:	18fb      	adds	r3, r7, r3
   16a92:	881b      	ldrh	r3, [r3, #0]
   16a94:	1ad3      	subs	r3, r2, r3
   16a96:	2b3c      	cmp	r3, #60	; 0x3c
   16a98:	d911      	bls.n	16abe <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   16a9a:	2374      	movs	r3, #116	; 0x74
   16a9c:	18fb      	adds	r3, r7, r3
   16a9e:	226e      	movs	r2, #110	; 0x6e
   16aa0:	18ba      	adds	r2, r7, r2
   16aa2:	8812      	ldrh	r2, [r2, #0]
   16aa4:	213c      	movs	r1, #60	; 0x3c
   16aa6:	1a8a      	subs	r2, r1, r2
   16aa8:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16aaa:	2374      	movs	r3, #116	; 0x74
   16aac:	18fb      	adds	r3, r7, r3
   16aae:	881a      	ldrh	r2, [r3, #0]
   16ab0:	68b9      	ldr	r1, [r7, #8]
   16ab2:	2324      	movs	r3, #36	; 0x24
   16ab4:	18fb      	adds	r3, r7, r3
   16ab6:	0018      	movs	r0, r3
   16ab8:	4b60      	ldr	r3, [pc, #384]	; (16c3c <rename_to_unique+0x298>)
   16aba:	4798      	blx	r3
   16abc:	e02a      	b.n	16b14 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   16abe:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16ac0:	68bb      	ldr	r3, [r7, #8]
   16ac2:	1ad2      	subs	r2, r2, r3
   16ac4:	2374      	movs	r3, #116	; 0x74
   16ac6:	18fb      	adds	r3, r7, r3
   16ac8:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16aca:	2374      	movs	r3, #116	; 0x74
   16acc:	18fb      	adds	r3, r7, r3
   16ace:	881a      	ldrh	r2, [r3, #0]
   16ad0:	68b9      	ldr	r1, [r7, #8]
   16ad2:	2324      	movs	r3, #36	; 0x24
   16ad4:	18fb      	adds	r3, r7, r3
   16ad6:	0018      	movs	r0, r3
   16ad8:	4b58      	ldr	r3, [pc, #352]	; (16c3c <rename_to_unique+0x298>)
   16ada:	4798      	blx	r3
   16adc:	e01a      	b.n	16b14 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16ade:	2374      	movs	r3, #116	; 0x74
   16ae0:	18fb      	adds	r3, r7, r3
   16ae2:	223c      	movs	r2, #60	; 0x3c
   16ae4:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   16ae6:	2374      	movs	r3, #116	; 0x74
   16ae8:	18fb      	adds	r3, r7, r3
   16aea:	881a      	ldrh	r2, [r3, #0]
   16aec:	68b9      	ldr	r1, [r7, #8]
   16aee:	2324      	movs	r3, #36	; 0x24
   16af0:	18fb      	adds	r3, r7, r3
   16af2:	0018      	movs	r0, r3
   16af4:	4b51      	ldr	r3, [pc, #324]	; (16c3c <rename_to_unique+0x298>)
   16af6:	4798      	blx	r3
   16af8:	e00c      	b.n	16b14 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16afa:	2374      	movs	r3, #116	; 0x74
   16afc:	18fb      	adds	r3, r7, r3
   16afe:	223c      	movs	r2, #60	; 0x3c
   16b00:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   16b02:	2374      	movs	r3, #116	; 0x74
   16b04:	18fb      	adds	r3, r7, r3
   16b06:	881a      	ldrh	r2, [r3, #0]
   16b08:	68b9      	ldr	r1, [r7, #8]
   16b0a:	2324      	movs	r3, #36	; 0x24
   16b0c:	18fb      	adds	r3, r7, r3
   16b0e:	0018      	movs	r0, r3
   16b10:	4b4a      	ldr	r3, [pc, #296]	; (16c3c <rename_to_unique+0x298>)
   16b12:	4798      	blx	r3
    }

    name[name_len++] = '-';
   16b14:	2374      	movs	r3, #116	; 0x74
   16b16:	18fb      	adds	r3, r7, r3
   16b18:	881b      	ldrh	r3, [r3, #0]
   16b1a:	2274      	movs	r2, #116	; 0x74
   16b1c:	18ba      	adds	r2, r7, r2
   16b1e:	1c59      	adds	r1, r3, #1
   16b20:	8011      	strh	r1, [r2, #0]
   16b22:	001a      	movs	r2, r3
   16b24:	2324      	movs	r3, #36	; 0x24
   16b26:	18fb      	adds	r3, r7, r3
   16b28:	212d      	movs	r1, #45	; 0x2d
   16b2a:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16b2c:	2376      	movs	r3, #118	; 0x76
   16b2e:	18fb      	adds	r3, r7, r3
   16b30:	2200      	movs	r2, #0
   16b32:	801a      	strh	r2, [r3, #0]
   16b34:	2372      	movs	r3, #114	; 0x72
   16b36:	18fb      	adds	r3, r7, r3
   16b38:	2201      	movs	r2, #1
   16b3a:	801a      	strh	r2, [r3, #0]
   16b3c:	e010      	b.n	16b60 <rename_to_unique+0x1bc>
        count *= 10;
   16b3e:	2372      	movs	r3, #114	; 0x72
   16b40:	18fa      	adds	r2, r7, r3
   16b42:	2372      	movs	r3, #114	; 0x72
   16b44:	18fb      	adds	r3, r7, r3
   16b46:	881b      	ldrh	r3, [r3, #0]
   16b48:	1c19      	adds	r1, r3, #0
   16b4a:	0089      	lsls	r1, r1, #2
   16b4c:	18cb      	adds	r3, r1, r3
   16b4e:	18db      	adds	r3, r3, r3
   16b50:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16b52:	2376      	movs	r3, #118	; 0x76
   16b54:	18fb      	adds	r3, r7, r3
   16b56:	881a      	ldrh	r2, [r3, #0]
   16b58:	2376      	movs	r3, #118	; 0x76
   16b5a:	18fb      	adds	r3, r7, r3
   16b5c:	3201      	adds	r2, #1
   16b5e:	801a      	strh	r2, [r3, #0]
   16b60:	2376      	movs	r3, #118	; 0x76
   16b62:	18fb      	adds	r3, r7, r3
   16b64:	881b      	ldrh	r3, [r3, #0]
   16b66:	2b02      	cmp	r3, #2
   16b68:	d9e9      	bls.n	16b3e <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   16b6a:	2376      	movs	r3, #118	; 0x76
   16b6c:	18fb      	adds	r3, r7, r3
   16b6e:	2201      	movs	r2, #1
   16b70:	801a      	strh	r2, [r3, #0]
   16b72:	e04b      	b.n	16c0c <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16b74:	2376      	movs	r3, #118	; 0x76
   16b76:	18fb      	adds	r3, r7, r3
   16b78:	881a      	ldrh	r2, [r3, #0]
   16b7a:	4931      	ldr	r1, [pc, #196]	; (16c40 <rename_to_unique+0x29c>)
   16b7c:	2314      	movs	r3, #20
   16b7e:	18fb      	adds	r3, r7, r3
   16b80:	0018      	movs	r0, r3
   16b82:	4b30      	ldr	r3, [pc, #192]	; (16c44 <rename_to_unique+0x2a0>)
   16b84:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   16b86:	2374      	movs	r3, #116	; 0x74
   16b88:	18fb      	adds	r3, r7, r3
   16b8a:	881b      	ldrh	r3, [r3, #0]
   16b8c:	2224      	movs	r2, #36	; 0x24
   16b8e:	18ba      	adds	r2, r7, r2
   16b90:	18d3      	adds	r3, r2, r3
   16b92:	2214      	movs	r2, #20
   16b94:	18b9      	adds	r1, r7, r2
   16b96:	2203      	movs	r2, #3
   16b98:	0018      	movs	r0, r3
   16b9a:	4b28      	ldr	r3, [pc, #160]	; (16c3c <rename_to_unique+0x298>)
   16b9c:	4798      	blx	r3
        if (valid_ext) {
   16b9e:	2371      	movs	r3, #113	; 0x71
   16ba0:	18fb      	adds	r3, r7, r3
   16ba2:	781b      	ldrb	r3, [r3, #0]
   16ba4:	2b00      	cmp	r3, #0
   16ba6:	d00c      	beq.n	16bc2 <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   16ba8:	2374      	movs	r3, #116	; 0x74
   16baa:	18fb      	adds	r3, r7, r3
   16bac:	881b      	ldrh	r3, [r3, #0]
   16bae:	3303      	adds	r3, #3
   16bb0:	2224      	movs	r2, #36	; 0x24
   16bb2:	18ba      	adds	r2, r7, r2
   16bb4:	18d3      	adds	r3, r2, r3
   16bb6:	2218      	movs	r2, #24
   16bb8:	18ba      	adds	r2, r7, r2
   16bba:	0011      	movs	r1, r2
   16bbc:	0018      	movs	r0, r3
   16bbe:	4b1e      	ldr	r3, [pc, #120]	; (16c38 <rename_to_unique+0x294>)
   16bc0:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   16bc2:	2324      	movs	r3, #36	; 0x24
   16bc4:	18fa      	adds	r2, r7, r3
   16bc6:	68fb      	ldr	r3, [r7, #12]
   16bc8:	0011      	movs	r1, r2
   16bca:	0018      	movs	r0, r3
   16bcc:	4b17      	ldr	r3, [pc, #92]	; (16c2c <rename_to_unique+0x288>)
   16bce:	4798      	blx	r3
   16bd0:	0003      	movs	r3, r0
   16bd2:	001a      	movs	r2, r3
   16bd4:	2301      	movs	r3, #1
   16bd6:	4053      	eors	r3, r2
   16bd8:	b2db      	uxtb	r3, r3
   16bda:	2b00      	cmp	r3, #0
   16bdc:	d00f      	beq.n	16bfe <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   16bde:	1dfb      	adds	r3, r7, #7
   16be0:	781a      	ldrb	r2, [r3, #0]
   16be2:	68bb      	ldr	r3, [r7, #8]
   16be4:	2100      	movs	r1, #0
   16be6:	0018      	movs	r0, r3
   16be8:	4b0f      	ldr	r3, [pc, #60]	; (16c28 <rename_to_unique+0x284>)
   16bea:	4798      	blx	r3
            strcpy(file_path_name, name);
   16bec:	2324      	movs	r3, #36	; 0x24
   16bee:	18fa      	adds	r2, r7, r3
   16bf0:	68bb      	ldr	r3, [r7, #8]
   16bf2:	0011      	movs	r1, r2
   16bf4:	0018      	movs	r0, r3
   16bf6:	4b10      	ldr	r3, [pc, #64]	; (16c38 <rename_to_unique+0x294>)
   16bf8:	4798      	blx	r3
            return true;
   16bfa:	2301      	movs	r3, #1
   16bfc:	e00f      	b.n	16c1e <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   16bfe:	2376      	movs	r3, #118	; 0x76
   16c00:	18fb      	adds	r3, r7, r3
   16c02:	881a      	ldrh	r2, [r3, #0]
   16c04:	2376      	movs	r3, #118	; 0x76
   16c06:	18fb      	adds	r3, r7, r3
   16c08:	3201      	adds	r2, #1
   16c0a:	801a      	strh	r2, [r3, #0]
   16c0c:	2376      	movs	r3, #118	; 0x76
   16c0e:	18fa      	adds	r2, r7, r3
   16c10:	2372      	movs	r3, #114	; 0x72
   16c12:	18fb      	adds	r3, r7, r3
   16c14:	8812      	ldrh	r2, [r2, #0]
   16c16:	881b      	ldrh	r3, [r3, #0]
   16c18:	429a      	cmp	r2, r3
   16c1a:	d3ab      	bcc.n	16b74 <rename_to_unique+0x1d0>
        }
    }
    return false;
   16c1c:	2300      	movs	r3, #0
}
   16c1e:	0018      	movs	r0, r3
   16c20:	46bd      	mov	sp, r7
   16c22:	b01e      	add	sp, #120	; 0x78
   16c24:	bd80      	pop	{r7, pc}
   16c26:	46c0      	nop			; (mov r8, r8)
   16c28:	00035543 	.word	0x00035543
   16c2c:	0001694d 	.word	0x0001694d
   16c30:	000358fb 	.word	0x000358fb
   16c34:	00035955 	.word	0x00035955
   16c38:	000358af 	.word	0x000358af
   16c3c:	0003592b 	.word	0x0003592b
   16c40:	00036f48 	.word	0x00036f48
   16c44:	00035801 	.word	0x00035801

00016c48 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   16c48:	b590      	push	{r4, r7, lr}
   16c4a:	b083      	sub	sp, #12
   16c4c:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   16c4e:	2001      	movs	r0, #1
   16c50:	4b22      	ldr	r3, [pc, #136]	; (16cdc <start_download+0x94>)
   16c52:	4798      	blx	r3
   16c54:	0003      	movs	r3, r0
   16c56:	001a      	movs	r2, r3
   16c58:	2301      	movs	r3, #1
   16c5a:	4053      	eors	r3, r2
   16c5c:	b2db      	uxtb	r3, r3
   16c5e:	2b00      	cmp	r3, #0
   16c60:	d005      	beq.n	16c6e <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   16c62:	4b1f      	ldr	r3, [pc, #124]	; (16ce0 <start_download+0x98>)
   16c64:	0019      	movs	r1, r3
   16c66:	2001      	movs	r0, #1
   16c68:	4b1e      	ldr	r3, [pc, #120]	; (16ce4 <start_download+0x9c>)
   16c6a:	4798      	blx	r3
        return;
   16c6c:	e032      	b.n	16cd4 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   16c6e:	2002      	movs	r0, #2
   16c70:	4b1a      	ldr	r3, [pc, #104]	; (16cdc <start_download+0x94>)
   16c72:	4798      	blx	r3
   16c74:	0003      	movs	r3, r0
   16c76:	001a      	movs	r2, r3
   16c78:	2301      	movs	r3, #1
   16c7a:	4053      	eors	r3, r2
   16c7c:	b2db      	uxtb	r3, r3
   16c7e:	2b00      	cmp	r3, #0
   16c80:	d005      	beq.n	16c8e <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   16c82:	4b19      	ldr	r3, [pc, #100]	; (16ce8 <start_download+0xa0>)
   16c84:	0019      	movs	r1, r3
   16c86:	2001      	movs	r0, #1
   16c88:	4b16      	ldr	r3, [pc, #88]	; (16ce4 <start_download+0x9c>)
   16c8a:	4798      	blx	r3
        return;
   16c8c:	e022      	b.n	16cd4 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   16c8e:	2004      	movs	r0, #4
   16c90:	4b12      	ldr	r3, [pc, #72]	; (16cdc <start_download+0x94>)
   16c92:	4798      	blx	r3
   16c94:	1e03      	subs	r3, r0, #0
   16c96:	d005      	beq.n	16ca4 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   16c98:	4b14      	ldr	r3, [pc, #80]	; (16cec <start_download+0xa4>)
   16c9a:	0019      	movs	r1, r3
   16c9c:	2001      	movs	r0, #1
   16c9e:	4b11      	ldr	r3, [pc, #68]	; (16ce4 <start_download+0x9c>)
   16ca0:	4798      	blx	r3
        return;
   16ca2:	e017      	b.n	16cd4 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   16ca4:	2008      	movs	r0, #8
   16ca6:	4b0d      	ldr	r3, [pc, #52]	; (16cdc <start_download+0x94>)
   16ca8:	4798      	blx	r3
   16caa:	1e03      	subs	r3, r0, #0
   16cac:	d005      	beq.n	16cba <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   16cae:	4b10      	ldr	r3, [pc, #64]	; (16cf0 <start_download+0xa8>)
   16cb0:	0019      	movs	r1, r3
   16cb2:	2001      	movs	r0, #1
   16cb4:	4b0b      	ldr	r3, [pc, #44]	; (16ce4 <start_download+0x9c>)
   16cb6:	4798      	blx	r3
        return;
   16cb8:	e00c      	b.n	16cd4 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   16cba:	4b0e      	ldr	r3, [pc, #56]	; (16cf4 <start_download+0xac>)
   16cbc:	0019      	movs	r1, r3
   16cbe:	2001      	movs	r0, #1
   16cc0:	4b08      	ldr	r3, [pc, #32]	; (16ce4 <start_download+0x9c>)
   16cc2:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16cc4:	490c      	ldr	r1, [pc, #48]	; (16cf8 <start_download+0xb0>)
   16cc6:	480d      	ldr	r0, [pc, #52]	; (16cfc <start_download+0xb4>)
   16cc8:	2300      	movs	r3, #0
   16cca:	9300      	str	r3, [sp, #0]
   16ccc:	2300      	movs	r3, #0
   16cce:	2201      	movs	r2, #1
   16cd0:	4c0b      	ldr	r4, [pc, #44]	; (16d00 <start_download+0xb8>)
   16cd2:	47a0      	blx	r4
}
   16cd4:	46bd      	mov	sp, r7
   16cd6:	b001      	add	sp, #4
   16cd8:	bd90      	pop	{r4, r7, pc}
   16cda:	46c0      	nop			; (mov r8, r8)
   16cdc:	00016921 	.word	0x00016921
   16ce0:	00036f50 	.word	0x00036f50
   16ce4:	0001e9c5 	.word	0x0001e9c5
   16ce8:	00036f7c 	.word	0x00036f7c
   16cec:	00036fa8 	.word	0x00036fa8
   16cf0:	00036fd4 	.word	0x00036fd4
   16cf4:	00037000 	.word	0x00037000
   16cf8:	0003702c 	.word	0x0003702c
   16cfc:	20004538 	.word	0x20004538
   16d00:	00031ac5 	.word	0x00031ac5

00016d04 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   16d04:	b5b0      	push	{r4, r5, r7, lr}
   16d06:	b086      	sub	sp, #24
   16d08:	af00      	add	r7, sp, #0
   16d0a:	6078      	str	r0, [r7, #4]
   16d0c:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   16d0e:	687b      	ldr	r3, [r7, #4]
   16d10:	2b00      	cmp	r3, #0
   16d12:	d002      	beq.n	16d1a <store_file_packet+0x16>
   16d14:	683b      	ldr	r3, [r7, #0]
   16d16:	2b00      	cmp	r3, #0
   16d18:	d105      	bne.n	16d26 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   16d1a:	4b58      	ldr	r3, [pc, #352]	; (16e7c <store_file_packet+0x178>)
   16d1c:	0019      	movs	r1, r3
   16d1e:	2001      	movs	r0, #1
   16d20:	4b57      	ldr	r3, [pc, #348]	; (16e80 <store_file_packet+0x17c>)
   16d22:	4798      	blx	r3
        return;
   16d24:	e0a6      	b.n	16e74 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   16d26:	2008      	movs	r0, #8
   16d28:	4b56      	ldr	r3, [pc, #344]	; (16e84 <store_file_packet+0x180>)
   16d2a:	4798      	blx	r3
   16d2c:	0003      	movs	r3, r0
   16d2e:	001a      	movs	r2, r3
   16d30:	2301      	movs	r3, #1
   16d32:	4053      	eors	r3, r2
   16d34:	b2db      	uxtb	r3, r3
   16d36:	2b00      	cmp	r3, #0
   16d38:	d055      	beq.n	16de6 <store_file_packet+0xe2>
        char *cp = NULL;
   16d3a:	2300      	movs	r3, #0
   16d3c:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16d3e:	4b52      	ldr	r3, [pc, #328]	; (16e88 <store_file_packet+0x184>)
   16d40:	2230      	movs	r2, #48	; 0x30
   16d42:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   16d44:	4b50      	ldr	r3, [pc, #320]	; (16e88 <store_file_packet+0x184>)
   16d46:	223a      	movs	r2, #58	; 0x3a
   16d48:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16d4a:	4b50      	ldr	r3, [pc, #320]	; (16e8c <store_file_packet+0x188>)
   16d4c:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16d4e:	e002      	b.n	16d56 <store_file_packet+0x52>
            cp--;
   16d50:	697b      	ldr	r3, [r7, #20]
   16d52:	3b01      	subs	r3, #1
   16d54:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16d56:	697b      	ldr	r3, [r7, #20]
   16d58:	781b      	ldrb	r3, [r3, #0]
   16d5a:	2b2f      	cmp	r3, #47	; 0x2f
   16d5c:	d1f8      	bne.n	16d50 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   16d5e:	697b      	ldr	r3, [r7, #20]
   16d60:	0018      	movs	r0, r3
   16d62:	4b4b      	ldr	r3, [pc, #300]	; (16e90 <store_file_packet+0x18c>)
   16d64:	4798      	blx	r3
   16d66:	0003      	movs	r3, r0
   16d68:	2b01      	cmp	r3, #1
   16d6a:	d924      	bls.n	16db6 <store_file_packet+0xb2>
            cp++;
   16d6c:	697b      	ldr	r3, [r7, #20]
   16d6e:	3301      	adds	r3, #1
   16d70:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   16d72:	697a      	ldr	r2, [r7, #20]
   16d74:	4b47      	ldr	r3, [pc, #284]	; (16e94 <store_file_packet+0x190>)
   16d76:	0011      	movs	r1, r2
   16d78:	0018      	movs	r0, r3
   16d7a:	4b47      	ldr	r3, [pc, #284]	; (16e98 <store_file_packet+0x194>)
   16d7c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   16d7e:	4942      	ldr	r1, [pc, #264]	; (16e88 <store_file_packet+0x184>)
   16d80:	4b46      	ldr	r3, [pc, #280]	; (16e9c <store_file_packet+0x198>)
   16d82:	2240      	movs	r2, #64	; 0x40
   16d84:	0018      	movs	r0, r3
   16d86:	4b46      	ldr	r3, [pc, #280]	; (16ea0 <store_file_packet+0x19c>)
   16d88:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   16d8a:	4a3f      	ldr	r2, [pc, #252]	; (16e88 <store_file_packet+0x184>)
   16d8c:	4b45      	ldr	r3, [pc, #276]	; (16ea4 <store_file_packet+0x1a0>)
   16d8e:	0019      	movs	r1, r3
   16d90:	2001      	movs	r0, #1
   16d92:	4b3b      	ldr	r3, [pc, #236]	; (16e80 <store_file_packet+0x17c>)
   16d94:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16d96:	2313      	movs	r3, #19
   16d98:	18fc      	adds	r4, r7, r3
   16d9a:	493b      	ldr	r1, [pc, #236]	; (16e88 <store_file_packet+0x184>)
   16d9c:	4b3f      	ldr	r3, [pc, #252]	; (16e9c <store_file_packet+0x198>)
   16d9e:	220a      	movs	r2, #10
   16da0:	0018      	movs	r0, r3
   16da2:	4b41      	ldr	r3, [pc, #260]	; (16ea8 <store_file_packet+0x1a4>)
   16da4:	4798      	blx	r3
   16da6:	0003      	movs	r3, r0
   16da8:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16daa:	2313      	movs	r3, #19
   16dac:	18fb      	adds	r3, r7, r3
   16dae:	781b      	ldrb	r3, [r3, #0]
   16db0:	2b00      	cmp	r3, #0
   16db2:	d012      	beq.n	16dda <store_file_packet+0xd6>
   16db4:	e008      	b.n	16dc8 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   16db6:	4b3d      	ldr	r3, [pc, #244]	; (16eac <store_file_packet+0x1a8>)
   16db8:	0019      	movs	r1, r3
   16dba:	2001      	movs	r0, #1
   16dbc:	4b30      	ldr	r3, [pc, #192]	; (16e80 <store_file_packet+0x17c>)
   16dbe:	4798      	blx	r3
            add_state(CANCELED);
   16dc0:	2020      	movs	r0, #32
   16dc2:	4b3b      	ldr	r3, [pc, #236]	; (16eb0 <store_file_packet+0x1ac>)
   16dc4:	4798      	blx	r3
            return;
   16dc6:	e055      	b.n	16e74 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   16dc8:	2313      	movs	r3, #19
   16dca:	18fb      	adds	r3, r7, r3
   16dcc:	781a      	ldrb	r2, [r3, #0]
   16dce:	4b39      	ldr	r3, [pc, #228]	; (16eb4 <store_file_packet+0x1b0>)
   16dd0:	0019      	movs	r1, r3
   16dd2:	2001      	movs	r0, #1
   16dd4:	4b2a      	ldr	r3, [pc, #168]	; (16e80 <store_file_packet+0x17c>)
   16dd6:	4798      	blx	r3
            return;
   16dd8:	e04c      	b.n	16e74 <store_file_packet+0x170>
        }

        received_file_size = 0;
   16dda:	4b37      	ldr	r3, [pc, #220]	; (16eb8 <store_file_packet+0x1b4>)
   16ddc:	2200      	movs	r2, #0
   16dde:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   16de0:	2008      	movs	r0, #8
   16de2:	4b33      	ldr	r3, [pc, #204]	; (16eb0 <store_file_packet+0x1ac>)
   16de4:	4798      	blx	r3
    }

    if (data != NULL) {
   16de6:	687b      	ldr	r3, [r7, #4]
   16de8:	2b00      	cmp	r3, #0
   16dea:	d043      	beq.n	16e74 <store_file_packet+0x170>
        UINT wsize = 0;
   16dec:	2300      	movs	r3, #0
   16dee:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   16df0:	2313      	movs	r3, #19
   16df2:	18fc      	adds	r4, r7, r3
   16df4:	230c      	movs	r3, #12
   16df6:	18fb      	adds	r3, r7, r3
   16df8:	683a      	ldr	r2, [r7, #0]
   16dfa:	6879      	ldr	r1, [r7, #4]
   16dfc:	4827      	ldr	r0, [pc, #156]	; (16e9c <store_file_packet+0x198>)
   16dfe:	4d2f      	ldr	r5, [pc, #188]	; (16ebc <store_file_packet+0x1b8>)
   16e00:	47a8      	blx	r5
   16e02:	0003      	movs	r3, r0
   16e04:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16e06:	2313      	movs	r3, #19
   16e08:	18fb      	adds	r3, r7, r3
   16e0a:	781b      	ldrb	r3, [r3, #0]
   16e0c:	2b00      	cmp	r3, #0
   16e0e:	d00c      	beq.n	16e2a <store_file_packet+0x126>
            f_close(&file_object);
   16e10:	4b22      	ldr	r3, [pc, #136]	; (16e9c <store_file_packet+0x198>)
   16e12:	0018      	movs	r0, r3
   16e14:	4b2a      	ldr	r3, [pc, #168]	; (16ec0 <store_file_packet+0x1bc>)
   16e16:	4798      	blx	r3
            add_state(CANCELED);
   16e18:	2020      	movs	r0, #32
   16e1a:	4b25      	ldr	r3, [pc, #148]	; (16eb0 <store_file_packet+0x1ac>)
   16e1c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   16e1e:	4b29      	ldr	r3, [pc, #164]	; (16ec4 <store_file_packet+0x1c0>)
   16e20:	0019      	movs	r1, r3
   16e22:	2001      	movs	r0, #1
   16e24:	4b16      	ldr	r3, [pc, #88]	; (16e80 <store_file_packet+0x17c>)
   16e26:	4798      	blx	r3
            return;
   16e28:	e024      	b.n	16e74 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   16e2a:	4b23      	ldr	r3, [pc, #140]	; (16eb8 <store_file_packet+0x1b4>)
   16e2c:	681a      	ldr	r2, [r3, #0]
   16e2e:	68fb      	ldr	r3, [r7, #12]
   16e30:	18d2      	adds	r2, r2, r3
   16e32:	4b21      	ldr	r3, [pc, #132]	; (16eb8 <store_file_packet+0x1b4>)
   16e34:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   16e36:	4b20      	ldr	r3, [pc, #128]	; (16eb8 <store_file_packet+0x1b4>)
   16e38:	681a      	ldr	r2, [r3, #0]
   16e3a:	4b23      	ldr	r3, [pc, #140]	; (16ec8 <store_file_packet+0x1c4>)
   16e3c:	681b      	ldr	r3, [r3, #0]
   16e3e:	4923      	ldr	r1, [pc, #140]	; (16ecc <store_file_packet+0x1c8>)
   16e40:	2001      	movs	r0, #1
   16e42:	4c0f      	ldr	r4, [pc, #60]	; (16e80 <store_file_packet+0x17c>)
   16e44:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   16e46:	4b1c      	ldr	r3, [pc, #112]	; (16eb8 <store_file_packet+0x1b4>)
   16e48:	681a      	ldr	r2, [r3, #0]
   16e4a:	4b1f      	ldr	r3, [pc, #124]	; (16ec8 <store_file_packet+0x1c4>)
   16e4c:	681b      	ldr	r3, [r3, #0]
   16e4e:	429a      	cmp	r2, r3
   16e50:	d310      	bcc.n	16e74 <store_file_packet+0x170>
            f_close(&file_object);
   16e52:	4b12      	ldr	r3, [pc, #72]	; (16e9c <store_file_packet+0x198>)
   16e54:	0018      	movs	r0, r3
   16e56:	4b1a      	ldr	r3, [pc, #104]	; (16ec0 <store_file_packet+0x1bc>)
   16e58:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   16e5a:	4b1d      	ldr	r3, [pc, #116]	; (16ed0 <store_file_packet+0x1cc>)
   16e5c:	0019      	movs	r1, r3
   16e5e:	2001      	movs	r0, #1
   16e60:	4b07      	ldr	r3, [pc, #28]	; (16e80 <store_file_packet+0x17c>)
   16e62:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   16e64:	2100      	movs	r1, #0
   16e66:	2017      	movs	r0, #23
   16e68:	4b1a      	ldr	r3, [pc, #104]	; (16ed4 <store_file_packet+0x1d0>)
   16e6a:	4798      	blx	r3
            add_state(COMPLETED);
   16e6c:	2010      	movs	r0, #16
   16e6e:	4b10      	ldr	r3, [pc, #64]	; (16eb0 <store_file_packet+0x1ac>)
   16e70:	4798      	blx	r3
            return;
   16e72:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   16e74:	46bd      	mov	sp, r7
   16e76:	b006      	add	sp, #24
   16e78:	bdb0      	pop	{r4, r5, r7, pc}
   16e7a:	46c0      	nop			; (mov r8, r8)
   16e7c:	00037058 	.word	0x00037058
   16e80:	0001e9c5 	.word	0x0001e9c5
   16e84:	00016921 	.word	0x00016921
   16e88:	200000a8 	.word	0x200000a8
   16e8c:	00037056 	.word	0x00037056
   16e90:	000358fb 	.word	0x000358fb
   16e94:	200000aa 	.word	0x200000aa
   16e98:	000358af 	.word	0x000358af
   16e9c:	2000088c 	.word	0x2000088c
   16ea0:	000169a5 	.word	0x000169a5
   16ea4:	000370bc 	.word	0x000370bc
   16ea8:	0002e471 	.word	0x0002e471
   16eac:	0003707c 	.word	0x0003707c
   16eb0:	000168f9 	.word	0x000168f9
   16eb4:	000370e4 	.word	0x000370e4
   16eb8:	200008b4 	.word	0x200008b4
   16ebc:	0002e9a1 	.word	0x0002e9a1
   16ec0:	0002ee71 	.word	0x0002ee71
   16ec4:	00037118 	.word	0x00037118
   16ec8:	200008b0 	.word	0x200008b0
   16ecc:	00037154 	.word	0x00037154
   16ed0:	00037188 	.word	0x00037188
   16ed4:	0001685d 	.word	0x0001685d

00016ed8 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   16ed8:	b590      	push	{r4, r7, lr}
   16eda:	b085      	sub	sp, #20
   16edc:	af00      	add	r7, sp, #0
   16ede:	60f8      	str	r0, [r7, #12]
   16ee0:	60b9      	str	r1, [r7, #8]
   16ee2:	607a      	str	r2, [r7, #4]
    switch (type) {
   16ee4:	68bb      	ldr	r3, [r7, #8]
   16ee6:	2b04      	cmp	r3, #4
   16ee8:	d900      	bls.n	16eec <http_client_callback+0x14>
   16eea:	e077      	b.n	16fdc <http_client_callback+0x104>
   16eec:	68bb      	ldr	r3, [r7, #8]
   16eee:	009a      	lsls	r2, r3, #2
   16ef0:	4b3c      	ldr	r3, [pc, #240]	; (16fe4 <http_client_callback+0x10c>)
   16ef2:	18d3      	adds	r3, r2, r3
   16ef4:	681b      	ldr	r3, [r3, #0]
   16ef6:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   16ef8:	4b3b      	ldr	r3, [pc, #236]	; (16fe8 <http_client_callback+0x110>)
   16efa:	0019      	movs	r1, r3
   16efc:	2001      	movs	r0, #1
   16efe:	4b3b      	ldr	r3, [pc, #236]	; (16fec <http_client_callback+0x114>)
   16f00:	4798      	blx	r3
            break;
   16f02:	e06b      	b.n	16fdc <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   16f04:	4b3a      	ldr	r3, [pc, #232]	; (16ff0 <http_client_callback+0x118>)
   16f06:	0019      	movs	r1, r3
   16f08:	2001      	movs	r0, #1
   16f0a:	4b38      	ldr	r3, [pc, #224]	; (16fec <http_client_callback+0x114>)
   16f0c:	4798      	blx	r3
            add_state(GET_REQUESTED);
   16f0e:	2004      	movs	r0, #4
   16f10:	4b38      	ldr	r3, [pc, #224]	; (16ff4 <http_client_callback+0x11c>)
   16f12:	4798      	blx	r3
            break;
   16f14:	e062      	b.n	16fdc <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   16f16:	687b      	ldr	r3, [r7, #4]
   16f18:	881b      	ldrh	r3, [r3, #0]
   16f1a:	001a      	movs	r2, r3
   16f1c:	687b      	ldr	r3, [r7, #4]
   16f1e:	685b      	ldr	r3, [r3, #4]
   16f20:	4935      	ldr	r1, [pc, #212]	; (16ff8 <http_client_callback+0x120>)
   16f22:	2001      	movs	r0, #1
   16f24:	4c31      	ldr	r4, [pc, #196]	; (16fec <http_client_callback+0x114>)
   16f26:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   16f28:	687b      	ldr	r3, [r7, #4]
   16f2a:	881b      	ldrh	r3, [r3, #0]
   16f2c:	2bc8      	cmp	r3, #200	; 0xc8
   16f2e:	d10d      	bne.n	16f4c <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   16f30:	687b      	ldr	r3, [r7, #4]
   16f32:	685a      	ldr	r2, [r3, #4]
   16f34:	4b31      	ldr	r3, [pc, #196]	; (16ffc <http_client_callback+0x124>)
   16f36:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   16f38:	4b31      	ldr	r3, [pc, #196]	; (17000 <http_client_callback+0x128>)
   16f3a:	2200      	movs	r2, #0
   16f3c:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16f3e:	687b      	ldr	r3, [r7, #4]
   16f40:	685a      	ldr	r2, [r3, #4]
   16f42:	2380      	movs	r3, #128	; 0x80
   16f44:	009b      	lsls	r3, r3, #2
   16f46:	429a      	cmp	r2, r3
   16f48:	d843      	bhi.n	16fd2 <http_client_callback+0xfa>
   16f4a:	e003      	b.n	16f54 <http_client_callback+0x7c>
                add_state(CANCELED);
   16f4c:	2020      	movs	r0, #32
   16f4e:	4b29      	ldr	r3, [pc, #164]	; (16ff4 <http_client_callback+0x11c>)
   16f50:	4798      	blx	r3
                return;
   16f52:	e043      	b.n	16fdc <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   16f54:	687b      	ldr	r3, [r7, #4]
   16f56:	689a      	ldr	r2, [r3, #8]
   16f58:	687b      	ldr	r3, [r7, #4]
   16f5a:	685b      	ldr	r3, [r3, #4]
   16f5c:	0019      	movs	r1, r3
   16f5e:	0010      	movs	r0, r2
   16f60:	4b28      	ldr	r3, [pc, #160]	; (17004 <http_client_callback+0x12c>)
   16f62:	4798      	blx	r3
                add_state(COMPLETED);
   16f64:	2010      	movs	r0, #16
   16f66:	4b23      	ldr	r3, [pc, #140]	; (16ff4 <http_client_callback+0x11c>)
   16f68:	4798      	blx	r3
            }
            break;
   16f6a:	e032      	b.n	16fd2 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   16f6c:	687b      	ldr	r3, [r7, #4]
   16f6e:	685a      	ldr	r2, [r3, #4]
   16f70:	687b      	ldr	r3, [r7, #4]
   16f72:	681b      	ldr	r3, [r3, #0]
   16f74:	0019      	movs	r1, r3
   16f76:	0010      	movs	r0, r2
   16f78:	4b22      	ldr	r3, [pc, #136]	; (17004 <http_client_callback+0x12c>)
   16f7a:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   16f7c:	687b      	ldr	r3, [r7, #4]
   16f7e:	7a1b      	ldrb	r3, [r3, #8]
   16f80:	2b00      	cmp	r3, #0
   16f82:	d028      	beq.n	16fd6 <http_client_callback+0xfe>
                add_state(COMPLETED);
   16f84:	2010      	movs	r0, #16
   16f86:	4b1b      	ldr	r3, [pc, #108]	; (16ff4 <http_client_callback+0x11c>)
   16f88:	4798      	blx	r3
            }

            break;
   16f8a:	e024      	b.n	16fd6 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16f8c:	687b      	ldr	r3, [r7, #4]
   16f8e:	681a      	ldr	r2, [r3, #0]
   16f90:	4b1d      	ldr	r3, [pc, #116]	; (17008 <http_client_callback+0x130>)
   16f92:	0019      	movs	r1, r3
   16f94:	2001      	movs	r0, #1
   16f96:	4b15      	ldr	r3, [pc, #84]	; (16fec <http_client_callback+0x114>)
   16f98:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   16f9a:	687b      	ldr	r3, [r7, #4]
   16f9c:	681b      	ldr	r3, [r3, #0]
   16f9e:	330b      	adds	r3, #11
   16fa0:	d11b      	bne.n	16fda <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   16fa2:	2008      	movs	r0, #8
   16fa4:	4b19      	ldr	r3, [pc, #100]	; (1700c <http_client_callback+0x134>)
   16fa6:	4798      	blx	r3
   16fa8:	1e03      	subs	r3, r0, #0
   16faa:	d006      	beq.n	16fba <http_client_callback+0xe2>
                    f_close(&file_object);
   16fac:	4b18      	ldr	r3, [pc, #96]	; (17010 <http_client_callback+0x138>)
   16fae:	0018      	movs	r0, r3
   16fb0:	4b18      	ldr	r3, [pc, #96]	; (17014 <http_client_callback+0x13c>)
   16fb2:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16fb4:	2008      	movs	r0, #8
   16fb6:	4b18      	ldr	r3, [pc, #96]	; (17018 <http_client_callback+0x140>)
   16fb8:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   16fba:	2004      	movs	r0, #4
   16fbc:	4b13      	ldr	r3, [pc, #76]	; (1700c <http_client_callback+0x134>)
   16fbe:	4798      	blx	r3
   16fc0:	1e03      	subs	r3, r0, #0
   16fc2:	d002      	beq.n	16fca <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   16fc4:	2004      	movs	r0, #4
   16fc6:	4b14      	ldr	r3, [pc, #80]	; (17018 <http_client_callback+0x140>)
   16fc8:	4798      	blx	r3
                }

                start_download();
   16fca:	4b14      	ldr	r3, [pc, #80]	; (1701c <http_client_callback+0x144>)
   16fcc:	4798      	blx	r3
            }

            break;
   16fce:	46c0      	nop			; (mov r8, r8)
   16fd0:	e003      	b.n	16fda <http_client_callback+0x102>
            break;
   16fd2:	46c0      	nop			; (mov r8, r8)
   16fd4:	e002      	b.n	16fdc <http_client_callback+0x104>
            break;
   16fd6:	46c0      	nop			; (mov r8, r8)
   16fd8:	e000      	b.n	16fdc <http_client_callback+0x104>
            break;
   16fda:	46c0      	nop			; (mov r8, r8)
    }
}
   16fdc:	46bd      	mov	sp, r7
   16fde:	b005      	add	sp, #20
   16fe0:	bd90      	pop	{r4, r7, pc}
   16fe2:	46c0      	nop			; (mov r8, r8)
   16fe4:	0003789c 	.word	0x0003789c
   16fe8:	000371bc 	.word	0x000371bc
   16fec:	0001e9c5 	.word	0x0001e9c5
   16ff0:	000371f4 	.word	0x000371f4
   16ff4:	000168f9 	.word	0x000168f9
   16ff8:	00037220 	.word	0x00037220
   16ffc:	200008b0 	.word	0x200008b0
   17000:	200008b4 	.word	0x200008b4
   17004:	00016d05 	.word	0x00016d05
   17008:	0003725c 	.word	0x0003725c
   1700c:	00016921 	.word	0x00016921
   17010:	2000088c 	.word	0x2000088c
   17014:	0002ee71 	.word	0x0002ee71
   17018:	000168c5 	.word	0x000168c5
   1701c:	00016c49 	.word	0x00016c49

00017020 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   17020:	b580      	push	{r7, lr}
   17022:	b082      	sub	sp, #8
   17024:	af00      	add	r7, sp, #0
   17026:	603a      	str	r2, [r7, #0]
   17028:	1dfb      	adds	r3, r7, #7
   1702a:	1c02      	adds	r2, r0, #0
   1702c:	701a      	strb	r2, [r3, #0]
   1702e:	1dbb      	adds	r3, r7, #6
   17030:	1c0a      	adds	r2, r1, #0
   17032:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   17034:	683a      	ldr	r2, [r7, #0]
   17036:	1dbb      	adds	r3, r7, #6
   17038:	7819      	ldrb	r1, [r3, #0]
   1703a:	1dfb      	adds	r3, r7, #7
   1703c:	781b      	ldrb	r3, [r3, #0]
   1703e:	b25b      	sxtb	r3, r3
   17040:	0018      	movs	r0, r3
   17042:	4b03      	ldr	r3, [pc, #12]	; (17050 <socket_cb+0x30>)
   17044:	4798      	blx	r3
}
   17046:	46c0      	nop			; (mov r8, r8)
   17048:	46bd      	mov	sp, r7
   1704a:	b002      	add	sp, #8
   1704c:	bd80      	pop	{r7, pc}
   1704e:	46c0      	nop			; (mov r8, r8)
   17050:	000317d5 	.word	0x000317d5

00017054 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   17054:	b5b0      	push	{r4, r5, r7, lr}
   17056:	b086      	sub	sp, #24
   17058:	af04      	add	r7, sp, #16
   1705a:	6078      	str	r0, [r7, #4]
   1705c:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   1705e:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   17060:	22ff      	movs	r2, #255	; 0xff
   17062:	4013      	ands	r3, r2
   17064:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   17066:	683b      	ldr	r3, [r7, #0]
   17068:	0a1b      	lsrs	r3, r3, #8
   1706a:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   1706c:	23ff      	movs	r3, #255	; 0xff
   1706e:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   17070:	683a      	ldr	r2, [r7, #0]
   17072:	0c12      	lsrs	r2, r2, #16
   17074:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   17076:	22ff      	movs	r2, #255	; 0xff
   17078:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   1707a:	6839      	ldr	r1, [r7, #0]
   1707c:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   1707e:	000d      	movs	r5, r1
   17080:	6878      	ldr	r0, [r7, #4]
   17082:	4909      	ldr	r1, [pc, #36]	; (170a8 <resolve_cb+0x54>)
   17084:	9502      	str	r5, [sp, #8]
   17086:	9201      	str	r2, [sp, #4]
   17088:	9300      	str	r3, [sp, #0]
   1708a:	0023      	movs	r3, r4
   1708c:	0002      	movs	r2, r0
   1708e:	2001      	movs	r0, #1
   17090:	4c06      	ldr	r4, [pc, #24]	; (170ac <resolve_cb+0x58>)
   17092:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   17094:	683a      	ldr	r2, [r7, #0]
   17096:	687b      	ldr	r3, [r7, #4]
   17098:	0011      	movs	r1, r2
   1709a:	0018      	movs	r0, r3
   1709c:	4b04      	ldr	r3, [pc, #16]	; (170b0 <resolve_cb+0x5c>)
   1709e:	4798      	blx	r3
}
   170a0:	46c0      	nop			; (mov r8, r8)
   170a2:	46bd      	mov	sp, r7
   170a4:	b002      	add	sp, #8
   170a6:	bdb0      	pop	{r4, r5, r7, pc}
   170a8:	0003728c 	.word	0x0003728c
   170ac:	0001e9c5 	.word	0x0001e9c5
   170b0:	00031939 	.word	0x00031939

000170b4 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   170b4:	b590      	push	{r4, r7, lr}
   170b6:	b087      	sub	sp, #28
   170b8:	af02      	add	r7, sp, #8
   170ba:	0002      	movs	r2, r0
   170bc:	6039      	str	r1, [r7, #0]
   170be:	1dfb      	adds	r3, r7, #7
   170c0:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   170c2:	1dfb      	adds	r3, r7, #7
   170c4:	781b      	ldrb	r3, [r3, #0]
   170c6:	2b2c      	cmp	r3, #44	; 0x2c
   170c8:	d002      	beq.n	170d0 <wifi_cb+0x1c>
   170ca:	2b32      	cmp	r3, #50	; 0x32
   170cc:	d03d      	beq.n	1714a <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   170ce:	e06f      	b.n	171b0 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   170d0:	683b      	ldr	r3, [r7, #0]
   170d2:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   170d4:	68fb      	ldr	r3, [r7, #12]
   170d6:	781b      	ldrb	r3, [r3, #0]
   170d8:	2b01      	cmp	r3, #1
   170da:	d107      	bne.n	170ec <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   170dc:	4b36      	ldr	r3, [pc, #216]	; (171b8 <wifi_cb+0x104>)
   170de:	0019      	movs	r1, r3
   170e0:	2001      	movs	r0, #1
   170e2:	4b36      	ldr	r3, [pc, #216]	; (171bc <wifi_cb+0x108>)
   170e4:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   170e6:	4b36      	ldr	r3, [pc, #216]	; (171c0 <wifi_cb+0x10c>)
   170e8:	4798      	blx	r3
            break;
   170ea:	e05e      	b.n	171aa <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   170ec:	68fb      	ldr	r3, [r7, #12]
   170ee:	781b      	ldrb	r3, [r3, #0]
   170f0:	2b00      	cmp	r3, #0
   170f2:	d15a      	bne.n	171aa <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   170f4:	4b33      	ldr	r3, [pc, #204]	; (171c4 <wifi_cb+0x110>)
   170f6:	0019      	movs	r1, r3
   170f8:	2001      	movs	r0, #1
   170fa:	4b30      	ldr	r3, [pc, #192]	; (171bc <wifi_cb+0x108>)
   170fc:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   170fe:	2002      	movs	r0, #2
   17100:	4b31      	ldr	r3, [pc, #196]	; (171c8 <wifi_cb+0x114>)
   17102:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   17104:	2008      	movs	r0, #8
   17106:	4b31      	ldr	r3, [pc, #196]	; (171cc <wifi_cb+0x118>)
   17108:	4798      	blx	r3
   1710a:	1e03      	subs	r3, r0, #0
   1710c:	d006      	beq.n	1711c <wifi_cb+0x68>
                    f_close(&file_object);
   1710e:	4b30      	ldr	r3, [pc, #192]	; (171d0 <wifi_cb+0x11c>)
   17110:	0018      	movs	r0, r3
   17112:	4b30      	ldr	r3, [pc, #192]	; (171d4 <wifi_cb+0x120>)
   17114:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   17116:	2008      	movs	r0, #8
   17118:	4b2b      	ldr	r3, [pc, #172]	; (171c8 <wifi_cb+0x114>)
   1711a:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   1711c:	2004      	movs	r0, #4
   1711e:	4b2b      	ldr	r3, [pc, #172]	; (171cc <wifi_cb+0x118>)
   17120:	4798      	blx	r3
   17122:	1e03      	subs	r3, r0, #0
   17124:	d002      	beq.n	1712c <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   17126:	2004      	movs	r0, #4
   17128:	4b27      	ldr	r3, [pc, #156]	; (171c8 <wifi_cb+0x114>)
   1712a:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   1712c:	4b2a      	ldr	r3, [pc, #168]	; (171d8 <wifi_cb+0x124>)
   1712e:	2101      	movs	r1, #1
   17130:	0018      	movs	r0, r3
   17132:	4b2a      	ldr	r3, [pc, #168]	; (171dc <wifi_cb+0x128>)
   17134:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   17136:	4a2a      	ldr	r2, [pc, #168]	; (171e0 <wifi_cb+0x12c>)
   17138:	482a      	ldr	r0, [pc, #168]	; (171e4 <wifi_cb+0x130>)
   1713a:	23ff      	movs	r3, #255	; 0xff
   1713c:	9300      	str	r3, [sp, #0]
   1713e:	0013      	movs	r3, r2
   17140:	2202      	movs	r2, #2
   17142:	2107      	movs	r1, #7
   17144:	4c28      	ldr	r4, [pc, #160]	; (171e8 <wifi_cb+0x134>)
   17146:	47a0      	blx	r4
            break;
   17148:	e02f      	b.n	171aa <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   1714a:	683b      	ldr	r3, [r7, #0]
   1714c:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   1714e:	68bb      	ldr	r3, [r7, #8]
   17150:	781b      	ldrb	r3, [r3, #0]
   17152:	0018      	movs	r0, r3
   17154:	68bb      	ldr	r3, [r7, #8]
   17156:	3301      	adds	r3, #1
   17158:	781b      	ldrb	r3, [r3, #0]
   1715a:	001c      	movs	r4, r3
   1715c:	68bb      	ldr	r3, [r7, #8]
   1715e:	3302      	adds	r3, #2
   17160:	781b      	ldrb	r3, [r3, #0]
   17162:	001a      	movs	r2, r3
   17164:	68bb      	ldr	r3, [r7, #8]
   17166:	3303      	adds	r3, #3
   17168:	781b      	ldrb	r3, [r3, #0]
   1716a:	4920      	ldr	r1, [pc, #128]	; (171ec <wifi_cb+0x138>)
   1716c:	9301      	str	r3, [sp, #4]
   1716e:	9200      	str	r2, [sp, #0]
   17170:	0023      	movs	r3, r4
   17172:	0002      	movs	r2, r0
   17174:	2001      	movs	r0, #1
   17176:	4c11      	ldr	r4, [pc, #68]	; (171bc <wifi_cb+0x108>)
   17178:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   1717a:	2002      	movs	r0, #2
   1717c:	4b1c      	ldr	r3, [pc, #112]	; (171f0 <wifi_cb+0x13c>)
   1717e:	4798      	blx	r3
            if (do_download_flag == 1) {
   17180:	4b1c      	ldr	r3, [pc, #112]	; (171f4 <wifi_cb+0x140>)
   17182:	781b      	ldrb	r3, [r3, #0]
   17184:	2b01      	cmp	r3, #1
   17186:	d102      	bne.n	1718e <wifi_cb+0xda>
                start_download();
   17188:	4b1b      	ldr	r3, [pc, #108]	; (171f8 <wifi_cb+0x144>)
   1718a:	4798      	blx	r3
        } break;
   1718c:	e00f      	b.n	171ae <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   1718e:	4a1b      	ldr	r2, [pc, #108]	; (171fc <wifi_cb+0x148>)
   17190:	4b11      	ldr	r3, [pc, #68]	; (171d8 <wifi_cb+0x124>)
   17192:	0011      	movs	r1, r2
   17194:	0018      	movs	r0, r3
   17196:	4b1a      	ldr	r3, [pc, #104]	; (17200 <wifi_cb+0x14c>)
   17198:	4798      	blx	r3
   1719a:	1e03      	subs	r3, r0, #0
   1719c:	d007      	beq.n	171ae <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   1719e:	4b19      	ldr	r3, [pc, #100]	; (17204 <wifi_cb+0x150>)
   171a0:	0019      	movs	r1, r3
   171a2:	2001      	movs	r0, #1
   171a4:	4b05      	ldr	r3, [pc, #20]	; (171bc <wifi_cb+0x108>)
   171a6:	4798      	blx	r3
        } break;
   171a8:	e001      	b.n	171ae <wifi_cb+0xfa>
            break;
   171aa:	46c0      	nop			; (mov r8, r8)
   171ac:	e000      	b.n	171b0 <wifi_cb+0xfc>
        } break;
   171ae:	46c0      	nop			; (mov r8, r8)
    }
}
   171b0:	46c0      	nop			; (mov r8, r8)
   171b2:	46bd      	mov	sp, r7
   171b4:	b005      	add	sp, #20
   171b6:	bd90      	pop	{r4, r7, pc}
   171b8:	000372bc 	.word	0x000372bc
   171bc:	0001e9c5 	.word	0x0001e9c5
   171c0:	00022fa5 	.word	0x00022fa5
   171c4:	000372dc 	.word	0x000372dc
   171c8:	000168c5 	.word	0x000168c5
   171cc:	00016921 	.word	0x00016921
   171d0:	2000088c 	.word	0x2000088c
   171d4:	0002ee71 	.word	0x0002ee71
   171d8:	200008b8 	.word	0x200008b8
   171dc:	00030481 	.word	0x00030481
   171e0:	00037300 	.word	0x00037300
   171e4:	0003730c 	.word	0x0003730c
   171e8:	00022ad1 	.word	0x00022ad1
   171ec:	00037314 	.word	0x00037314
   171f0:	000168f9 	.word	0x000168f9
   171f4:	20000658 	.word	0x20000658
   171f8:	00016c49 	.word	0x00016c49
   171fc:	00036f34 	.word	0x00036f34
   17200:	0003034d 	.word	0x0003034d
   17204:	0003733c 	.word	0x0003733c

00017208 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   17208:	b590      	push	{r4, r7, lr}
   1720a:	b083      	sub	sp, #12
   1720c:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   1720e:	4b29      	ldr	r3, [pc, #164]	; (172b4 <init_storage+0xac>)
   17210:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   17212:	4b29      	ldr	r3, [pc, #164]	; (172b8 <init_storage+0xb0>)
   17214:	0019      	movs	r1, r3
   17216:	2001      	movs	r0, #1
   17218:	4b28      	ldr	r3, [pc, #160]	; (172bc <init_storage+0xb4>)
   1721a:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   1721c:	1dfc      	adds	r4, r7, #7
   1721e:	2000      	movs	r0, #0
   17220:	4b27      	ldr	r3, [pc, #156]	; (172c0 <init_storage+0xb8>)
   17222:	4798      	blx	r3
   17224:	0003      	movs	r3, r0
   17226:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   17228:	1dfb      	adds	r3, r7, #7
   1722a:	781b      	ldrb	r3, [r3, #0]
   1722c:	2b01      	cmp	r3, #1
   1722e:	d110      	bne.n	17252 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   17230:	4b24      	ldr	r3, [pc, #144]	; (172c4 <init_storage+0xbc>)
   17232:	0019      	movs	r1, r3
   17234:	2001      	movs	r0, #1
   17236:	4b21      	ldr	r3, [pc, #132]	; (172bc <init_storage+0xb4>)
   17238:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   1723a:	4b23      	ldr	r3, [pc, #140]	; (172c8 <init_storage+0xc0>)
   1723c:	0019      	movs	r1, r3
   1723e:	2001      	movs	r0, #1
   17240:	4b1e      	ldr	r3, [pc, #120]	; (172bc <init_storage+0xb4>)
   17242:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   17244:	46c0      	nop			; (mov r8, r8)
   17246:	2000      	movs	r0, #0
   17248:	4b20      	ldr	r3, [pc, #128]	; (172cc <init_storage+0xc4>)
   1724a:	4798      	blx	r3
   1724c:	0003      	movs	r3, r0
   1724e:	2b02      	cmp	r3, #2
   17250:	d1f9      	bne.n	17246 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   17252:	1dfb      	adds	r3, r7, #7
   17254:	781b      	ldrb	r3, [r3, #0]
   17256:	2b00      	cmp	r3, #0
   17258:	d1e0      	bne.n	1721c <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   1725a:	4b1d      	ldr	r3, [pc, #116]	; (172d0 <init_storage+0xc8>)
   1725c:	0019      	movs	r1, r3
   1725e:	2001      	movs	r0, #1
   17260:	4b16      	ldr	r3, [pc, #88]	; (172bc <init_storage+0xb4>)
   17262:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   17264:	238c      	movs	r3, #140	; 0x8c
   17266:	009a      	lsls	r2, r3, #2
   17268:	4b1a      	ldr	r3, [pc, #104]	; (172d4 <init_storage+0xcc>)
   1726a:	2100      	movs	r1, #0
   1726c:	0018      	movs	r0, r3
   1726e:	4b1a      	ldr	r3, [pc, #104]	; (172d8 <init_storage+0xd0>)
   17270:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   17272:	1dbc      	adds	r4, r7, #6
   17274:	4b17      	ldr	r3, [pc, #92]	; (172d4 <init_storage+0xcc>)
   17276:	0019      	movs	r1, r3
   17278:	2000      	movs	r0, #0
   1727a:	4b18      	ldr	r3, [pc, #96]	; (172dc <init_storage+0xd4>)
   1727c:	4798      	blx	r3
   1727e:	0003      	movs	r3, r0
   17280:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   17282:	1dbb      	adds	r3, r7, #6
   17284:	781b      	ldrb	r3, [r3, #0]
   17286:	2b0b      	cmp	r3, #11
   17288:	d107      	bne.n	1729a <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   1728a:	1dbb      	adds	r3, r7, #6
   1728c:	781a      	ldrb	r2, [r3, #0]
   1728e:	4b14      	ldr	r3, [pc, #80]	; (172e0 <init_storage+0xd8>)
   17290:	0019      	movs	r1, r3
   17292:	2001      	movs	r0, #1
   17294:	4b09      	ldr	r3, [pc, #36]	; (172bc <init_storage+0xb4>)
   17296:	4798      	blx	r3
            return;
   17298:	e008      	b.n	172ac <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   1729a:	4b12      	ldr	r3, [pc, #72]	; (172e4 <init_storage+0xdc>)
   1729c:	0019      	movs	r1, r3
   1729e:	2001      	movs	r0, #1
   172a0:	4b06      	ldr	r3, [pc, #24]	; (172bc <init_storage+0xb4>)
   172a2:	4798      	blx	r3
        add_state(STORAGE_READY);
   172a4:	2001      	movs	r0, #1
   172a6:	4b10      	ldr	r3, [pc, #64]	; (172e8 <init_storage+0xe0>)
   172a8:	4798      	blx	r3
        return;
   172aa:	46c0      	nop			; (mov r8, r8)
    }
}
   172ac:	46bd      	mov	sp, r7
   172ae:	b003      	add	sp, #12
   172b0:	bd90      	pop	{r4, r7, pc}
   172b2:	46c0      	nop			; (mov r8, r8)
   172b4:	0001f7dd 	.word	0x0001f7dd
   172b8:	00037360 	.word	0x00037360
   172bc:	0001e9c5 	.word	0x0001e9c5
   172c0:	0001fcb9 	.word	0x0001fcb9
   172c4:	00037398 	.word	0x00037398
   172c8:	000373c0 	.word	0x000373c0
   172cc:	0001f82d 	.word	0x0001f82d
   172d0:	000373f4 	.word	0x000373f4
   172d4:	2000065c 	.word	0x2000065c
   172d8:	00035543 	.word	0x00035543
   172dc:	0002e419 	.word	0x0002e419
   172e0:	00037418 	.word	0x00037418
   172e4:	00037448 	.word	0x00037448
   172e8:	000168f9 	.word	0x000168f9

000172ec <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   172ec:	b580      	push	{r7, lr}
   172ee:	b082      	sub	sp, #8
   172f0:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   172f2:	1d3b      	adds	r3, r7, #4
   172f4:	0018      	movs	r0, r3
   172f6:	4b08      	ldr	r3, [pc, #32]	; (17318 <configure_timer+0x2c>)
   172f8:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   172fa:	1d3a      	adds	r2, r7, #4
   172fc:	4b07      	ldr	r3, [pc, #28]	; (1731c <configure_timer+0x30>)
   172fe:	0011      	movs	r1, r2
   17300:	0018      	movs	r0, r3
   17302:	4b07      	ldr	r3, [pc, #28]	; (17320 <configure_timer+0x34>)
   17304:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   17306:	4b05      	ldr	r3, [pc, #20]	; (1731c <configure_timer+0x30>)
   17308:	0018      	movs	r0, r3
   1730a:	4b06      	ldr	r3, [pc, #24]	; (17324 <configure_timer+0x38>)
   1730c:	4798      	blx	r3
}
   1730e:	46c0      	nop			; (mov r8, r8)
   17310:	46bd      	mov	sp, r7
   17312:	b002      	add	sp, #8
   17314:	bd80      	pop	{r7, pc}
   17316:	46c0      	nop			; (mov r8, r8)
   17318:	00032f69 	.word	0x00032f69
   1731c:	200044e0 	.word	0x200044e0
   17320:	00032f8d 	.word	0x00032f8d
   17324:	00033079 	.word	0x00033079

00017328 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   17328:	b580      	push	{r7, lr}
   1732a:	b088      	sub	sp, #32
   1732c:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   1732e:	003b      	movs	r3, r7
   17330:	0018      	movs	r0, r3
   17332:	4b16      	ldr	r3, [pc, #88]	; (1738c <configure_http_client+0x64>)
   17334:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   17336:	003b      	movs	r3, r7
   17338:	2280      	movs	r2, #128	; 0x80
   1733a:	0092      	lsls	r2, r2, #2
   1733c:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   1733e:	003b      	movs	r3, r7
   17340:	4a13      	ldr	r2, [pc, #76]	; (17390 <configure_http_client+0x68>)
   17342:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   17344:	003b      	movs	r3, r7
   17346:	22bc      	movs	r2, #188	; 0xbc
   17348:	32ff      	adds	r2, #255	; 0xff
   1734a:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   1734c:	003b      	movs	r3, r7
   1734e:	2201      	movs	r2, #1
   17350:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   17352:	003a      	movs	r2, r7
   17354:	4b0f      	ldr	r3, [pc, #60]	; (17394 <configure_http_client+0x6c>)
   17356:	0011      	movs	r1, r2
   17358:	0018      	movs	r0, r3
   1735a:	4b0f      	ldr	r3, [pc, #60]	; (17398 <configure_http_client+0x70>)
   1735c:	4798      	blx	r3
   1735e:	0003      	movs	r3, r0
   17360:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   17362:	69fb      	ldr	r3, [r7, #28]
   17364:	2b00      	cmp	r3, #0
   17366:	da06      	bge.n	17376 <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   17368:	69fa      	ldr	r2, [r7, #28]
   1736a:	4b0c      	ldr	r3, [pc, #48]	; (1739c <configure_http_client+0x74>)
   1736c:	0019      	movs	r1, r3
   1736e:	2001      	movs	r0, #1
   17370:	4b0b      	ldr	r3, [pc, #44]	; (173a0 <configure_http_client+0x78>)
   17372:	4798      	blx	r3
        while (1) {
   17374:	e7fe      	b.n	17374 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   17376:	4a0b      	ldr	r2, [pc, #44]	; (173a4 <configure_http_client+0x7c>)
   17378:	4b06      	ldr	r3, [pc, #24]	; (17394 <configure_http_client+0x6c>)
   1737a:	0011      	movs	r1, r2
   1737c:	0018      	movs	r0, r3
   1737e:	4b0a      	ldr	r3, [pc, #40]	; (173a8 <configure_http_client+0x80>)
   17380:	4798      	blx	r3
}
   17382:	46c0      	nop			; (mov r8, r8)
   17384:	46bd      	mov	sp, r7
   17386:	b008      	add	sp, #32
   17388:	bd80      	pop	{r7, pc}
   1738a:	46c0      	nop			; (mov r8, r8)
   1738c:	000315fd 	.word	0x000315fd
   17390:	200044e0 	.word	0x200044e0
   17394:	20004538 	.word	0x20004538
   17398:	00031649 	.word	0x00031649
   1739c:	0003746c 	.word	0x0003746c
   173a0:	0001e9c5 	.word	0x0001e9c5
   173a4:	00016ed9 	.word	0x00016ed9
   173a8:	00031735 	.word	0x00031735

000173ac <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   173ac:	b580      	push	{r7, lr}
   173ae:	b082      	sub	sp, #8
   173b0:	af00      	add	r7, sp, #0
   173b2:	603a      	str	r2, [r7, #0]
   173b4:	1dfb      	adds	r3, r7, #7
   173b6:	1c02      	adds	r2, r0, #0
   173b8:	701a      	strb	r2, [r3, #0]
   173ba:	1dbb      	adds	r3, r7, #6
   173bc:	1c0a      	adds	r2, r1, #0
   173be:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   173c0:	683a      	ldr	r2, [r7, #0]
   173c2:	1dbb      	adds	r3, r7, #6
   173c4:	7819      	ldrb	r1, [r3, #0]
   173c6:	1dfb      	adds	r3, r7, #7
   173c8:	781b      	ldrb	r3, [r3, #0]
   173ca:	b25b      	sxtb	r3, r3
   173cc:	0018      	movs	r0, r3
   173ce:	4b03      	ldr	r3, [pc, #12]	; (173dc <socket_event_handler+0x30>)
   173d0:	4798      	blx	r3
}
   173d2:	46c0      	nop			; (mov r8, r8)
   173d4:	46bd      	mov	sp, r7
   173d6:	b002      	add	sp, #8
   173d8:	bd80      	pop	{r7, pc}
   173da:	46c0      	nop			; (mov r8, r8)
   173dc:	000302f5 	.word	0x000302f5

000173e0 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   173e0:	b580      	push	{r7, lr}
   173e2:	b082      	sub	sp, #8
   173e4:	af00      	add	r7, sp, #0
   173e6:	6078      	str	r0, [r7, #4]
   173e8:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   173ea:	683a      	ldr	r2, [r7, #0]
   173ec:	687b      	ldr	r3, [r7, #4]
   173ee:	0011      	movs	r1, r2
   173f0:	0018      	movs	r0, r3
   173f2:	4b03      	ldr	r3, [pc, #12]	; (17400 <socket_resolve_handler+0x20>)
   173f4:	4798      	blx	r3
}
   173f6:	46c0      	nop			; (mov r8, r8)
   173f8:	46bd      	mov	sp, r7
   173fa:	b002      	add	sp, #8
   173fc:	bd80      	pop	{r7, pc}
   173fe:	46c0      	nop			; (mov r8, r8)
   17400:	00030329 	.word	0x00030329

00017404 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   17404:	b590      	push	{r4, r7, lr}
   17406:	b089      	sub	sp, #36	; 0x24
   17408:	af02      	add	r7, sp, #8
   1740a:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   1740c:	2310      	movs	r3, #16
   1740e:	18fb      	adds	r3, r7, r3
   17410:	2200      	movs	r2, #0
   17412:	701a      	strb	r2, [r3, #0]
   17414:	2310      	movs	r3, #16
   17416:	18fb      	adds	r3, r7, r3
   17418:	2200      	movs	r2, #0
   1741a:	705a      	strb	r2, [r3, #1]
   1741c:	2310      	movs	r3, #16
   1741e:	18fb      	adds	r3, r7, r3
   17420:	2200      	movs	r2, #0
   17422:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   17424:	687b      	ldr	r3, [r7, #4]
   17426:	685b      	ldr	r3, [r3, #4]
   17428:	685a      	ldr	r2, [r3, #4]
   1742a:	687b      	ldr	r3, [r7, #4]
   1742c:	685b      	ldr	r3, [r3, #4]
   1742e:	689b      	ldr	r3, [r3, #8]
   17430:	492a      	ldr	r1, [pc, #168]	; (174dc <SubscribeHandlerLedTopic+0xd8>)
   17432:	2001      	movs	r0, #1
   17434:	4c2a      	ldr	r4, [pc, #168]	; (174e0 <SubscribeHandlerLedTopic+0xdc>)
   17436:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   17438:	687b      	ldr	r3, [r7, #4]
   1743a:	681b      	ldr	r3, [r3, #0]
   1743c:	689b      	ldr	r3, [r3, #8]
   1743e:	4929      	ldr	r1, [pc, #164]	; (174e4 <SubscribeHandlerLedTopic+0xe0>)
   17440:	2204      	movs	r2, #4
   17442:	0018      	movs	r0, r3
   17444:	4b28      	ldr	r3, [pc, #160]	; (174e8 <SubscribeHandlerLedTopic+0xe4>)
   17446:	4798      	blx	r3
   17448:	1e03      	subs	r3, r0, #0
   1744a:	d143      	bne.n	174d4 <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   1744c:	687b      	ldr	r3, [r7, #4]
   1744e:	681b      	ldr	r3, [r3, #0]
   17450:	689b      	ldr	r3, [r3, #8]
   17452:	3304      	adds	r3, #4
   17454:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   17456:	2300      	movs	r3, #0
   17458:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   1745a:	e015      	b.n	17488 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   1745c:	697c      	ldr	r4, [r7, #20]
   1745e:	1c63      	adds	r3, r4, #1
   17460:	617b      	str	r3, [r7, #20]
   17462:	68fb      	ldr	r3, [r7, #12]
   17464:	220c      	movs	r2, #12
   17466:	18b9      	adds	r1, r7, r2
   17468:	220a      	movs	r2, #10
   1746a:	0018      	movs	r0, r3
   1746c:	4b1f      	ldr	r3, [pc, #124]	; (174ec <SubscribeHandlerLedTopic+0xe8>)
   1746e:	4798      	blx	r3
   17470:	0003      	movs	r3, r0
   17472:	b2da      	uxtb	r2, r3
   17474:	2310      	movs	r3, #16
   17476:	18fb      	adds	r3, r7, r3
   17478:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   1747a:	68fb      	ldr	r3, [r7, #12]
   1747c:	781b      	ldrb	r3, [r3, #0]
   1747e:	2b2c      	cmp	r3, #44	; 0x2c
   17480:	d10a      	bne.n	17498 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   17482:	68fb      	ldr	r3, [r7, #12]
   17484:	3301      	adds	r3, #1
   17486:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   17488:	697b      	ldr	r3, [r7, #20]
   1748a:	2b02      	cmp	r3, #2
   1748c:	dc05      	bgt.n	1749a <SubscribeHandlerLedTopic+0x96>
   1748e:	68fb      	ldr	r3, [r7, #12]
   17490:	781b      	ldrb	r3, [r3, #0]
   17492:	2b00      	cmp	r3, #0
   17494:	d1e2      	bne.n	1745c <SubscribeHandlerLedTopic+0x58>
   17496:	e000      	b.n	1749a <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   17498:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   1749a:	2310      	movs	r3, #16
   1749c:	18fb      	adds	r3, r7, r3
   1749e:	781b      	ldrb	r3, [r3, #0]
   174a0:	001a      	movs	r2, r3
   174a2:	2310      	movs	r3, #16
   174a4:	18fb      	adds	r3, r7, r3
   174a6:	785b      	ldrb	r3, [r3, #1]
   174a8:	0018      	movs	r0, r3
   174aa:	2310      	movs	r3, #16
   174ac:	18fb      	adds	r3, r7, r3
   174ae:	789b      	ldrb	r3, [r3, #2]
   174b0:	490f      	ldr	r1, [pc, #60]	; (174f0 <SubscribeHandlerLedTopic+0xec>)
   174b2:	9300      	str	r3, [sp, #0]
   174b4:	0003      	movs	r3, r0
   174b6:	2001      	movs	r0, #1
   174b8:	4c09      	ldr	r4, [pc, #36]	; (174e0 <SubscribeHandlerLedTopic+0xdc>)
   174ba:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   174bc:	2310      	movs	r3, #16
   174be:	18fb      	adds	r3, r7, r3
   174c0:	7818      	ldrb	r0, [r3, #0]
   174c2:	2310      	movs	r3, #16
   174c4:	18fb      	adds	r3, r7, r3
   174c6:	7859      	ldrb	r1, [r3, #1]
   174c8:	2310      	movs	r3, #16
   174ca:	18fb      	adds	r3, r7, r3
   174cc:	789b      	ldrb	r3, [r3, #2]
   174ce:	001a      	movs	r2, r3
   174d0:	4b08      	ldr	r3, [pc, #32]	; (174f4 <SubscribeHandlerLedTopic+0xf0>)
   174d2:	4798      	blx	r3
    }
}
   174d4:	46c0      	nop			; (mov r8, r8)
   174d6:	46bd      	mov	sp, r7
   174d8:	b007      	add	sp, #28
   174da:	bd90      	pop	{r4, r7, pc}
   174dc:	000374b4 	.word	0x000374b4
   174e0:	0001e9c5 	.word	0x0001e9c5
   174e4:	000374bc 	.word	0x000374bc
   174e8:	00035909 	.word	0x00035909
   174ec:	00035ab5 	.word	0x00035ab5
   174f0:	000374c4 	.word	0x000374c4
   174f4:	0001678d 	.word	0x0001678d

000174f8 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   174f8:	b590      	push	{r4, r7, lr}
   174fa:	b08b      	sub	sp, #44	; 0x2c
   174fc:	af00      	add	r7, sp, #0
   174fe:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   17500:	230c      	movs	r3, #12
   17502:	18fb      	adds	r3, r7, r3
   17504:	2214      	movs	r2, #20
   17506:	21ff      	movs	r1, #255	; 0xff
   17508:	0018      	movs	r0, r3
   1750a:	4b48      	ldr	r3, [pc, #288]	; (1762c <SubscribeHandlerGameTopic+0x134>)
   1750c:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   1750e:	687b      	ldr	r3, [r7, #4]
   17510:	681b      	ldr	r3, [r3, #0]
   17512:	689b      	ldr	r3, [r3, #8]
   17514:	4946      	ldr	r1, [pc, #280]	; (17630 <SubscribeHandlerGameTopic+0x138>)
   17516:	2209      	movs	r2, #9
   17518:	0018      	movs	r0, r3
   1751a:	4b46      	ldr	r3, [pc, #280]	; (17634 <SubscribeHandlerGameTopic+0x13c>)
   1751c:	4798      	blx	r3
   1751e:	1e03      	subs	r3, r0, #0
   17520:	d166      	bne.n	175f0 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   17522:	4b45      	ldr	r3, [pc, #276]	; (17638 <SubscribeHandlerGameTopic+0x140>)
   17524:	0019      	movs	r1, r3
   17526:	2001      	movs	r0, #1
   17528:	4b44      	ldr	r3, [pc, #272]	; (1763c <SubscribeHandlerGameTopic+0x144>)
   1752a:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1752c:	687b      	ldr	r3, [r7, #4]
   1752e:	685b      	ldr	r3, [r3, #4]
   17530:	685a      	ldr	r2, [r3, #4]
   17532:	687b      	ldr	r3, [r7, #4]
   17534:	685b      	ldr	r3, [r3, #4]
   17536:	689b      	ldr	r3, [r3, #8]
   17538:	4941      	ldr	r1, [pc, #260]	; (17640 <SubscribeHandlerGameTopic+0x148>)
   1753a:	2001      	movs	r0, #1
   1753c:	4c3f      	ldr	r4, [pc, #252]	; (1763c <SubscribeHandlerGameTopic+0x144>)
   1753e:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   17540:	687b      	ldr	r3, [r7, #4]
   17542:	681b      	ldr	r3, [r3, #0]
   17544:	68da      	ldr	r2, [r3, #12]
   17546:	687b      	ldr	r3, [r7, #4]
   17548:	681b      	ldr	r3, [r3, #0]
   1754a:	689b      	ldr	r3, [r3, #8]
   1754c:	493d      	ldr	r1, [pc, #244]	; (17644 <SubscribeHandlerGameTopic+0x14c>)
   1754e:	2001      	movs	r0, #1
   17550:	4c3a      	ldr	r4, [pc, #232]	; (1763c <SubscribeHandlerGameTopic+0x144>)
   17552:	47a0      	blx	r4

        int nb = 0;
   17554:	2300      	movs	r3, #0
   17556:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   17558:	687b      	ldr	r3, [r7, #4]
   1755a:	681b      	ldr	r3, [r3, #0]
   1755c:	689b      	ldr	r3, [r3, #8]
   1755e:	3309      	adds	r3, #9
   17560:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   17562:	e015      	b.n	17590 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   17564:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   17566:	1c63      	adds	r3, r4, #1
   17568:	627b      	str	r3, [r7, #36]	; 0x24
   1756a:	68bb      	ldr	r3, [r7, #8]
   1756c:	2208      	movs	r2, #8
   1756e:	18b9      	adds	r1, r7, r2
   17570:	220a      	movs	r2, #10
   17572:	0018      	movs	r0, r3
   17574:	4b34      	ldr	r3, [pc, #208]	; (17648 <SubscribeHandlerGameTopic+0x150>)
   17576:	4798      	blx	r3
   17578:	0003      	movs	r3, r0
   1757a:	b2da      	uxtb	r2, r3
   1757c:	230c      	movs	r3, #12
   1757e:	18fb      	adds	r3, r7, r3
   17580:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   17582:	68bb      	ldr	r3, [r7, #8]
   17584:	781b      	ldrb	r3, [r3, #0]
   17586:	2b2c      	cmp	r3, #44	; 0x2c
   17588:	d10a      	bne.n	175a0 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   1758a:	68bb      	ldr	r3, [r7, #8]
   1758c:	3301      	adds	r3, #1
   1758e:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   17590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17592:	2b13      	cmp	r3, #19
   17594:	dc05      	bgt.n	175a2 <SubscribeHandlerGameTopic+0xaa>
   17596:	68bb      	ldr	r3, [r7, #8]
   17598:	781b      	ldrb	r3, [r3, #0]
   1759a:	2b00      	cmp	r3, #0
   1759c:	d1e2      	bne.n	17564 <SubscribeHandlerGameTopic+0x6c>
   1759e:	e000      	b.n	175a2 <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   175a0:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   175a2:	4b2a      	ldr	r3, [pc, #168]	; (1764c <SubscribeHandlerGameTopic+0x154>)
   175a4:	0019      	movs	r1, r3
   175a6:	2001      	movs	r0, #1
   175a8:	4b24      	ldr	r3, [pc, #144]	; (1763c <SubscribeHandlerGameTopic+0x144>)
   175aa:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   175ac:	2300      	movs	r3, #0
   175ae:	623b      	str	r3, [r7, #32]
   175b0:	e00d      	b.n	175ce <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   175b2:	230c      	movs	r3, #12
   175b4:	18fa      	adds	r2, r7, r3
   175b6:	6a3b      	ldr	r3, [r7, #32]
   175b8:	18d3      	adds	r3, r2, r3
   175ba:	781b      	ldrb	r3, [r3, #0]
   175bc:	001a      	movs	r2, r3
   175be:	4b24      	ldr	r3, [pc, #144]	; (17650 <SubscribeHandlerGameTopic+0x158>)
   175c0:	0019      	movs	r1, r3
   175c2:	2001      	movs	r0, #1
   175c4:	4b1d      	ldr	r3, [pc, #116]	; (1763c <SubscribeHandlerGameTopic+0x144>)
   175c6:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   175c8:	6a3b      	ldr	r3, [r7, #32]
   175ca:	3301      	adds	r3, #1
   175cc:	623b      	str	r3, [r7, #32]
   175ce:	6a3b      	ldr	r3, [r7, #32]
   175d0:	2b13      	cmp	r3, #19
   175d2:	ddee      	ble.n	175b2 <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   175d4:	230c      	movs	r3, #12
   175d6:	18fb      	adds	r3, r7, r3
   175d8:	0018      	movs	r0, r3
   175da:	4b1e      	ldr	r3, [pc, #120]	; (17654 <SubscribeHandlerGameTopic+0x15c>)
   175dc:	4798      	blx	r3
   175de:	0003      	movs	r3, r0
   175e0:	2b01      	cmp	r3, #1
   175e2:	d11e      	bne.n	17622 <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   175e4:	4b1c      	ldr	r3, [pc, #112]	; (17658 <SubscribeHandlerGameTopic+0x160>)
   175e6:	0019      	movs	r1, r3
   175e8:	2001      	movs	r0, #1
   175ea:	4b14      	ldr	r3, [pc, #80]	; (1763c <SubscribeHandlerGameTopic+0x144>)
   175ec:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   175ee:	e018      	b.n	17622 <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   175f0:	4b1a      	ldr	r3, [pc, #104]	; (1765c <SubscribeHandlerGameTopic+0x164>)
   175f2:	0019      	movs	r1, r3
   175f4:	2001      	movs	r0, #1
   175f6:	4b11      	ldr	r3, [pc, #68]	; (1763c <SubscribeHandlerGameTopic+0x144>)
   175f8:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   175fa:	687b      	ldr	r3, [r7, #4]
   175fc:	685b      	ldr	r3, [r3, #4]
   175fe:	685a      	ldr	r2, [r3, #4]
   17600:	687b      	ldr	r3, [r7, #4]
   17602:	685b      	ldr	r3, [r3, #4]
   17604:	689b      	ldr	r3, [r3, #8]
   17606:	490e      	ldr	r1, [pc, #56]	; (17640 <SubscribeHandlerGameTopic+0x148>)
   17608:	2001      	movs	r0, #1
   1760a:	4c0c      	ldr	r4, [pc, #48]	; (1763c <SubscribeHandlerGameTopic+0x144>)
   1760c:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   1760e:	687b      	ldr	r3, [r7, #4]
   17610:	681b      	ldr	r3, [r3, #0]
   17612:	68da      	ldr	r2, [r3, #12]
   17614:	687b      	ldr	r3, [r7, #4]
   17616:	681b      	ldr	r3, [r3, #0]
   17618:	689b      	ldr	r3, [r3, #8]
   1761a:	490a      	ldr	r1, [pc, #40]	; (17644 <SubscribeHandlerGameTopic+0x14c>)
   1761c:	2001      	movs	r0, #1
   1761e:	4c07      	ldr	r4, [pc, #28]	; (1763c <SubscribeHandlerGameTopic+0x144>)
   17620:	47a0      	blx	r4
}
   17622:	46c0      	nop			; (mov r8, r8)
   17624:	46bd      	mov	sp, r7
   17626:	b00b      	add	sp, #44	; 0x2c
   17628:	bd90      	pop	{r4, r7, pc}
   1762a:	46c0      	nop			; (mov r8, r8)
   1762c:	00035543 	.word	0x00035543
   17630:	000374d8 	.word	0x000374d8
   17634:	00035909 	.word	0x00035909
   17638:	000374e4 	.word	0x000374e4
   1763c:	0001e9c5 	.word	0x0001e9c5
   17640:	000374b4 	.word	0x000374b4
   17644:	00037500 	.word	0x00037500
   17648:	00035ab5 	.word	0x00035ab5
   1764c:	00037508 	.word	0x00037508
   17650:	0003751c 	.word	0x0003751c
   17654:	00014491 	.word	0x00014491
   17658:	00037520 	.word	0x00037520
   1765c:	0003753c 	.word	0x0003753c

00017660 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   17660:	b590      	push	{r4, r7, lr}
   17662:	b08b      	sub	sp, #44	; 0x2c
   17664:	af06      	add	r7, sp, #24
   17666:	60f8      	str	r0, [r7, #12]
   17668:	60b9      	str	r1, [r7, #8]
   1766a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1766c:	68bb      	ldr	r3, [r7, #8]
   1766e:	2b01      	cmp	r3, #1
   17670:	d03b      	beq.n	176ea <mqtt_callback+0x8a>
   17672:	2b05      	cmp	r3, #5
   17674:	d058      	beq.n	17728 <mqtt_callback+0xc8>
   17676:	2b00      	cmp	r3, #0
   17678:	d000      	beq.n	1767c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   1767a:	e05b      	b.n	17734 <mqtt_callback+0xd4>
            if (data->sock_connected.result >= 0) {
   1767c:	687b      	ldr	r3, [r7, #4]
   1767e:	681b      	ldr	r3, [r3, #0]
   17680:	2b00      	cmp	r3, #0
   17682:	db25      	blt.n	176d0 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   17684:	4b2d      	ldr	r3, [pc, #180]	; (1773c <mqtt_callback+0xdc>)
   17686:	0019      	movs	r1, r3
   17688:	2001      	movs	r0, #1
   1768a:	4b2d      	ldr	r3, [pc, #180]	; (17740 <mqtt_callback+0xe0>)
   1768c:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   1768e:	492d      	ldr	r1, [pc, #180]	; (17744 <mqtt_callback+0xe4>)
   17690:	4a2d      	ldr	r2, [pc, #180]	; (17748 <mqtt_callback+0xe8>)
   17692:	68f8      	ldr	r0, [r7, #12]
   17694:	2300      	movs	r3, #0
   17696:	9305      	str	r3, [sp, #20]
   17698:	2300      	movs	r3, #0
   1769a:	9304      	str	r3, [sp, #16]
   1769c:	2300      	movs	r3, #0
   1769e:	9303      	str	r3, [sp, #12]
   176a0:	2300      	movs	r3, #0
   176a2:	9302      	str	r3, [sp, #8]
   176a4:	2300      	movs	r3, #0
   176a6:	9301      	str	r3, [sp, #4]
   176a8:	4b27      	ldr	r3, [pc, #156]	; (17748 <mqtt_callback+0xe8>)
   176aa:	9300      	str	r3, [sp, #0]
   176ac:	000b      	movs	r3, r1
   176ae:	2101      	movs	r1, #1
   176b0:	4c26      	ldr	r4, [pc, #152]	; (1774c <mqtt_callback+0xec>)
   176b2:	47a0      	blx	r4
   176b4:	1e03      	subs	r3, r0, #0
   176b6:	d005      	beq.n	176c4 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   176b8:	4b25      	ldr	r3, [pc, #148]	; (17750 <mqtt_callback+0xf0>)
   176ba:	0019      	movs	r1, r3
   176bc:	2001      	movs	r0, #1
   176be:	4b20      	ldr	r3, [pc, #128]	; (17740 <mqtt_callback+0xe0>)
   176c0:	4798      	blx	r3
        } break;
   176c2:	e037      	b.n	17734 <mqtt_callback+0xd4>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   176c4:	4b23      	ldr	r3, [pc, #140]	; (17754 <mqtt_callback+0xf4>)
   176c6:	0019      	movs	r1, r3
   176c8:	2001      	movs	r0, #1
   176ca:	4b1d      	ldr	r3, [pc, #116]	; (17740 <mqtt_callback+0xe0>)
   176cc:	4798      	blx	r3
        } break;
   176ce:	e031      	b.n	17734 <mqtt_callback+0xd4>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   176d0:	4a21      	ldr	r2, [pc, #132]	; (17758 <mqtt_callback+0xf8>)
   176d2:	4b22      	ldr	r3, [pc, #136]	; (1775c <mqtt_callback+0xfc>)
   176d4:	0019      	movs	r1, r3
   176d6:	2001      	movs	r0, #1
   176d8:	4b19      	ldr	r3, [pc, #100]	; (17740 <mqtt_callback+0xe0>)
   176da:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   176dc:	4a1e      	ldr	r2, [pc, #120]	; (17758 <mqtt_callback+0xf8>)
   176de:	68fb      	ldr	r3, [r7, #12]
   176e0:	0011      	movs	r1, r2
   176e2:	0018      	movs	r0, r3
   176e4:	4b1e      	ldr	r3, [pc, #120]	; (17760 <mqtt_callback+0x100>)
   176e6:	4798      	blx	r3
        } break;
   176e8:	e024      	b.n	17734 <mqtt_callback+0xd4>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   176ea:	687b      	ldr	r3, [r7, #4]
   176ec:	781b      	ldrb	r3, [r3, #0]
   176ee:	2b00      	cmp	r3, #0
   176f0:	d111      	bne.n	17716 <mqtt_callback+0xb6>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   176f2:	4b1c      	ldr	r3, [pc, #112]	; (17764 <mqtt_callback+0x104>)
   176f4:	491c      	ldr	r1, [pc, #112]	; (17768 <mqtt_callback+0x108>)
   176f6:	68f8      	ldr	r0, [r7, #12]
   176f8:	2202      	movs	r2, #2
   176fa:	4c1c      	ldr	r4, [pc, #112]	; (1776c <mqtt_callback+0x10c>)
   176fc:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   176fe:	4b1c      	ldr	r3, [pc, #112]	; (17770 <mqtt_callback+0x110>)
   17700:	491c      	ldr	r1, [pc, #112]	; (17774 <mqtt_callback+0x114>)
   17702:	68f8      	ldr	r0, [r7, #12]
   17704:	2202      	movs	r2, #2
   17706:	4c19      	ldr	r4, [pc, #100]	; (1776c <mqtt_callback+0x10c>)
   17708:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   1770a:	4b1b      	ldr	r3, [pc, #108]	; (17778 <mqtt_callback+0x118>)
   1770c:	0019      	movs	r1, r3
   1770e:	2001      	movs	r0, #1
   17710:	4b0b      	ldr	r3, [pc, #44]	; (17740 <mqtt_callback+0xe0>)
   17712:	4798      	blx	r3
            break;
   17714:	e00e      	b.n	17734 <mqtt_callback+0xd4>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   17716:	687b      	ldr	r3, [r7, #4]
   17718:	781b      	ldrb	r3, [r3, #0]
   1771a:	001a      	movs	r2, r3
   1771c:	4b17      	ldr	r3, [pc, #92]	; (1777c <mqtt_callback+0x11c>)
   1771e:	0019      	movs	r1, r3
   17720:	2001      	movs	r0, #1
   17722:	4b07      	ldr	r3, [pc, #28]	; (17740 <mqtt_callback+0xe0>)
   17724:	4798      	blx	r3
            break;
   17726:	e005      	b.n	17734 <mqtt_callback+0xd4>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   17728:	4b15      	ldr	r3, [pc, #84]	; (17780 <mqtt_callback+0x120>)
   1772a:	0019      	movs	r1, r3
   1772c:	2001      	movs	r0, #1
   1772e:	4b04      	ldr	r3, [pc, #16]	; (17740 <mqtt_callback+0xe0>)
   17730:	4798      	blx	r3
            break;
   17732:	46c0      	nop			; (mov r8, r8)
}
   17734:	46c0      	nop			; (mov r8, r8)
   17736:	46bd      	mov	sp, r7
   17738:	b005      	add	sp, #20
   1773a:	bd90      	pop	{r4, r7, pc}
   1773c:	00037598 	.word	0x00037598
   17740:	0001e9c5 	.word	0x0001e9c5
   17744:	000375b4 	.word	0x000375b4
   17748:	000375c4 	.word	0x000375c4
   1774c:	00030395 	.word	0x00030395
   17750:	000375d0 	.word	0x000375d0
   17754:	000375f8 	.word	0x000375f8
   17758:	00036f34 	.word	0x00036f34
   1775c:	00037614 	.word	0x00037614
   17760:	0003034d 	.word	0x0003034d
   17764:	000174f9 	.word	0x000174f9
   17768:	0003764c 	.word	0x0003764c
   1776c:	00030535 	.word	0x00030535
   17770:	00017405 	.word	0x00017405
   17774:	00037574 	.word	0x00037574
   17778:	00037660 	.word	0x00037660
   1777c:	00037674 	.word	0x00037674
   17780:	000376a8 	.word	0x000376a8

00017784 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   17784:	b580      	push	{r7, lr}
   17786:	b088      	sub	sp, #32
   17788:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   1778a:	1d3b      	adds	r3, r7, #4
   1778c:	0018      	movs	r0, r3
   1778e:	4b1f      	ldr	r3, [pc, #124]	; (1780c <configure_mqtt+0x88>)
   17790:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   17792:	1d3b      	adds	r3, r7, #4
   17794:	4a1e      	ldr	r2, [pc, #120]	; (17810 <configure_mqtt+0x8c>)
   17796:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17798:	1d3b      	adds	r3, r7, #4
   1779a:	2280      	movs	r2, #128	; 0x80
   1779c:	0092      	lsls	r2, r2, #2
   1779e:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   177a0:	1d3b      	adds	r3, r7, #4
   177a2:	4a1c      	ldr	r2, [pc, #112]	; (17814 <configure_mqtt+0x90>)
   177a4:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   177a6:	1d3b      	adds	r3, r7, #4
   177a8:	2280      	movs	r2, #128	; 0x80
   177aa:	0092      	lsls	r2, r2, #2
   177ac:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   177ae:	1d3b      	adds	r3, r7, #4
   177b0:	4a19      	ldr	r2, [pc, #100]	; (17818 <configure_mqtt+0x94>)
   177b2:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   177b4:	1d3b      	adds	r3, r7, #4
   177b6:	4a19      	ldr	r2, [pc, #100]	; (1781c <configure_mqtt+0x98>)
   177b8:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   177ba:	1d3a      	adds	r2, r7, #4
   177bc:	4b18      	ldr	r3, [pc, #96]	; (17820 <configure_mqtt+0x9c>)
   177be:	0011      	movs	r1, r2
   177c0:	0018      	movs	r0, r3
   177c2:	4b18      	ldr	r3, [pc, #96]	; (17824 <configure_mqtt+0xa0>)
   177c4:	4798      	blx	r3
   177c6:	0003      	movs	r3, r0
   177c8:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   177ca:	69fb      	ldr	r3, [r7, #28]
   177cc:	2b00      	cmp	r3, #0
   177ce:	da06      	bge.n	177de <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   177d0:	69fa      	ldr	r2, [r7, #28]
   177d2:	4b15      	ldr	r3, [pc, #84]	; (17828 <configure_mqtt+0xa4>)
   177d4:	0019      	movs	r1, r3
   177d6:	2001      	movs	r0, #1
   177d8:	4b14      	ldr	r3, [pc, #80]	; (1782c <configure_mqtt+0xa8>)
   177da:	4798      	blx	r3
        while (1) {
   177dc:	e7fe      	b.n	177dc <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   177de:	4a14      	ldr	r2, [pc, #80]	; (17830 <configure_mqtt+0xac>)
   177e0:	4b0f      	ldr	r3, [pc, #60]	; (17820 <configure_mqtt+0x9c>)
   177e2:	0011      	movs	r1, r2
   177e4:	0018      	movs	r0, r3
   177e6:	4b13      	ldr	r3, [pc, #76]	; (17834 <configure_mqtt+0xb0>)
   177e8:	4798      	blx	r3
   177ea:	0003      	movs	r3, r0
   177ec:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   177ee:	69fb      	ldr	r3, [r7, #28]
   177f0:	2b00      	cmp	r3, #0
   177f2:	da06      	bge.n	17802 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   177f4:	69fa      	ldr	r2, [r7, #28]
   177f6:	4b10      	ldr	r3, [pc, #64]	; (17838 <configure_mqtt+0xb4>)
   177f8:	0019      	movs	r1, r3
   177fa:	2001      	movs	r0, #1
   177fc:	4b0b      	ldr	r3, [pc, #44]	; (1782c <configure_mqtt+0xa8>)
   177fe:	4798      	blx	r3
        while (1) {
   17800:	e7fe      	b.n	17800 <configure_mqtt+0x7c>
        }
    }
}
   17802:	46c0      	nop			; (mov r8, r8)
   17804:	46bd      	mov	sp, r7
   17806:	b008      	add	sp, #32
   17808:	bd80      	pop	{r7, pc}
   1780a:	46c0      	nop			; (mov r8, r8)
   1780c:	0003028d 	.word	0x0003028d
   17810:	200008f0 	.word	0x200008f0
   17814:	20000af0 	.word	0x20000af0
   17818:	0000075b 	.word	0x0000075b
   1781c:	00001770 	.word	0x00001770
   17820:	200008b8 	.word	0x200008b8
   17824:	000301dd 	.word	0x000301dd
   17828:	000376bc 	.word	0x000376bc
   1782c:	0001e9c5 	.word	0x0001e9c5
   17830:	00017661 	.word	0x00017661
   17834:	000302cd 	.word	0x000302cd
   17838:	000376f0 	.word	0x000376f0

0001783c <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   1783c:	b580      	push	{r7, lr}
   1783e:	b084      	sub	sp, #16
   17840:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   17842:	1d3b      	adds	r3, r7, #4
   17844:	0018      	movs	r0, r3
   17846:	4b0b      	ldr	r3, [pc, #44]	; (17874 <configure_extint_channel+0x38>)
   17848:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   1784a:	1d3b      	adds	r3, r7, #4
   1784c:	2237      	movs	r2, #55	; 0x37
   1784e:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   17850:	1d3b      	adds	r3, r7, #4
   17852:	2200      	movs	r2, #0
   17854:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   17856:	1d3b      	adds	r3, r7, #4
   17858:	2201      	movs	r2, #1
   1785a:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1785c:	1d3b      	adds	r3, r7, #4
   1785e:	2202      	movs	r2, #2
   17860:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   17862:	1d3b      	adds	r3, r7, #4
   17864:	0019      	movs	r1, r3
   17866:	2007      	movs	r0, #7
   17868:	4b03      	ldr	r3, [pc, #12]	; (17878 <configure_extint_channel+0x3c>)
   1786a:	4798      	blx	r3
}
   1786c:	46c0      	nop			; (mov r8, r8)
   1786e:	46bd      	mov	sp, r7
   17870:	b004      	add	sp, #16
   17872:	bd80      	pop	{r7, pc}
   17874:	000273c5 	.word	0x000273c5
   17878:	000273f9 	.word	0x000273f9

0001787c <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   1787c:	b580      	push	{r7, lr}
   1787e:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17880:	4b06      	ldr	r3, [pc, #24]	; (1789c <configure_extint_callbacks+0x20>)
   17882:	2200      	movs	r2, #0
   17884:	2107      	movs	r1, #7
   17886:	0018      	movs	r0, r3
   17888:	4b05      	ldr	r3, [pc, #20]	; (178a0 <configure_extint_callbacks+0x24>)
   1788a:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1788c:	2100      	movs	r1, #0
   1788e:	2007      	movs	r0, #7
   17890:	4b04      	ldr	r3, [pc, #16]	; (178a4 <configure_extint_callbacks+0x28>)
   17892:	4798      	blx	r3
}
   17894:	46c0      	nop			; (mov r8, r8)
   17896:	46bd      	mov	sp, r7
   17898:	bd80      	pop	{r7, pc}
   1789a:	46c0      	nop			; (mov r8, r8)
   1789c:	000178a9 	.word	0x000178a9
   178a0:	00026fc5 	.word	0x00026fc5
   178a4:	00027029 	.word	0x00027029

000178a8 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   178a8:	b5b0      	push	{r4, r5, r7, lr}
   178aa:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   178ac:	4b0c      	ldr	r3, [pc, #48]	; (178e0 <extint_detection_callback+0x38>)
   178ae:	681b      	ldr	r3, [r3, #0]
   178b0:	1c5a      	adds	r2, r3, #1
   178b2:	4b0b      	ldr	r3, [pc, #44]	; (178e0 <extint_detection_callback+0x38>)
   178b4:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   178b6:	4b0a      	ldr	r3, [pc, #40]	; (178e0 <extint_detection_callback+0x38>)
   178b8:	681b      	ldr	r3, [r3, #0]
   178ba:	2b28      	cmp	r3, #40	; 0x28
   178bc:	d902      	bls.n	178c4 <extint_detection_callback+0x1c>
   178be:	4b08      	ldr	r3, [pc, #32]	; (178e0 <extint_detection_callback+0x38>)
   178c0:	2201      	movs	r2, #1
   178c2:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   178c4:	4b06      	ldr	r3, [pc, #24]	; (178e0 <extint_detection_callback+0x38>)
   178c6:	681b      	ldr	r3, [r3, #0]
   178c8:	4a06      	ldr	r2, [pc, #24]	; (178e4 <extint_detection_callback+0x3c>)
   178ca:	4807      	ldr	r0, [pc, #28]	; (178e8 <extint_detection_callback+0x40>)
   178cc:	213f      	movs	r1, #63	; 0x3f
   178ce:	4c07      	ldr	r4, [pc, #28]	; (178ec <extint_detection_callback+0x44>)
   178d0:	47a0      	blx	r4
    isPressed = true;
   178d2:	4b07      	ldr	r3, [pc, #28]	; (178f0 <extint_detection_callback+0x48>)
   178d4:	2201      	movs	r2, #1
   178d6:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   178d8:	46c0      	nop			; (mov r8, r8)
   178da:	46bd      	mov	sp, r7
   178dc:	bdb0      	pop	{r4, r5, r7, pc}
   178de:	46c0      	nop			; (mov r8, r8)
   178e0:	200000a4 	.word	0x200000a4
   178e4:	00037724 	.word	0x00037724
   178e8:	20000064 	.word	0x20000064
   178ec:	0003579d 	.word	0x0003579d
   178f0:	20000cf0 	.word	0x20000cf0

000178f4 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   178f4:	b580      	push	{r7, lr}
   178f6:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   178f8:	4a15      	ldr	r2, [pc, #84]	; (17950 <HTTP_DownloadFileInit+0x5c>)
   178fa:	4b16      	ldr	r3, [pc, #88]	; (17954 <HTTP_DownloadFileInit+0x60>)
   178fc:	0011      	movs	r1, r2
   178fe:	0018      	movs	r0, r3
   17900:	4b15      	ldr	r3, [pc, #84]	; (17958 <HTTP_DownloadFileInit+0x64>)
   17902:	4798      	blx	r3
   17904:	1e03      	subs	r3, r0, #0
   17906:	d008      	beq.n	1791a <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17908:	4b14      	ldr	r3, [pc, #80]	; (1795c <HTTP_DownloadFileInit+0x68>)
   1790a:	0019      	movs	r1, r3
   1790c:	2001      	movs	r0, #1
   1790e:	4b14      	ldr	r3, [pc, #80]	; (17960 <HTTP_DownloadFileInit+0x6c>)
   17910:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   17912:	e002      	b.n	1791a <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   17914:	2000      	movs	r0, #0
   17916:	4b13      	ldr	r3, [pc, #76]	; (17964 <HTTP_DownloadFileInit+0x70>)
   17918:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   1791a:	4b0e      	ldr	r3, [pc, #56]	; (17954 <HTTP_DownloadFileInit+0x60>)
   1791c:	2234      	movs	r2, #52	; 0x34
   1791e:	5c9b      	ldrb	r3, [r3, r2]
   17920:	2b00      	cmp	r3, #0
   17922:	d1f7      	bne.n	17914 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   17924:	4b10      	ldr	r3, [pc, #64]	; (17968 <HTTP_DownloadFileInit+0x74>)
   17926:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   17928:	4b10      	ldr	r3, [pc, #64]	; (1796c <HTTP_DownloadFileInit+0x78>)
   1792a:	2201      	movs	r2, #1
   1792c:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   1792e:	4a10      	ldr	r2, [pc, #64]	; (17970 <HTTP_DownloadFileInit+0x7c>)
   17930:	4b10      	ldr	r3, [pc, #64]	; (17974 <HTTP_DownloadFileInit+0x80>)
   17932:	0011      	movs	r1, r2
   17934:	0018      	movs	r0, r3
   17936:	4b10      	ldr	r3, [pc, #64]	; (17978 <HTTP_DownloadFileInit+0x84>)
   17938:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   1793a:	4b10      	ldr	r3, [pc, #64]	; (1797c <HTTP_DownloadFileInit+0x88>)
   1793c:	4798      	blx	r3

    start_download();
   1793e:	4b10      	ldr	r3, [pc, #64]	; (17980 <HTTP_DownloadFileInit+0x8c>)
   17940:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   17942:	4b10      	ldr	r3, [pc, #64]	; (17984 <HTTP_DownloadFileInit+0x90>)
   17944:	2203      	movs	r2, #3
   17946:	701a      	strb	r2, [r3, #0]
}
   17948:	46c0      	nop			; (mov r8, r8)
   1794a:	46bd      	mov	sp, r7
   1794c:	bd80      	pop	{r7, pc}
   1794e:	46c0      	nop			; (mov r8, r8)
   17950:	00036f34 	.word	0x00036f34
   17954:	200008b8 	.word	0x200008b8
   17958:	00030481 	.word	0x00030481
   1795c:	0003733c 	.word	0x0003733c
   17960:	0001e9c5 	.word	0x0001e9c5
   17964:	00022ab5 	.word	0x00022ab5
   17968:	00026071 	.word	0x00026071
   1796c:	20000658 	.word	0x20000658
   17970:	00017055 	.word	0x00017055
   17974:	00017021 	.word	0x00017021
   17978:	000260b9 	.word	0x000260b9
   1797c:	00026021 	.word	0x00026021
   17980:	00016c49 	.word	0x00016c49
   17984:	20000644 	.word	0x20000644

00017988 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   17988:	b590      	push	{r4, r7, lr}
   1798a:	b085      	sub	sp, #20
   1798c:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1798e:	e009      	b.n	179a4 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17990:	2000      	movs	r0, #0
   17992:	4b28      	ldr	r3, [pc, #160]	; (17a34 <HTTP_DownloadFileTransaction+0xac>)
   17994:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17996:	4b28      	ldr	r3, [pc, #160]	; (17a38 <HTTP_DownloadFileTransaction+0xb0>)
   17998:	0018      	movs	r0, r3
   1799a:	4b28      	ldr	r3, [pc, #160]	; (17a3c <HTTP_DownloadFileTransaction+0xb4>)
   1799c:	4798      	blx	r3
        vTaskDelay(5);
   1799e:	2005      	movs	r0, #5
   179a0:	4b27      	ldr	r3, [pc, #156]	; (17a40 <HTTP_DownloadFileTransaction+0xb8>)
   179a2:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   179a4:	2010      	movs	r0, #16
   179a6:	4b27      	ldr	r3, [pc, #156]	; (17a44 <HTTP_DownloadFileTransaction+0xbc>)
   179a8:	4798      	blx	r3
   179aa:	0003      	movs	r3, r0
   179ac:	001a      	movs	r2, r3
   179ae:	2301      	movs	r3, #1
   179b0:	4053      	eors	r3, r2
   179b2:	b2db      	uxtb	r3, r3
   179b4:	2b00      	cmp	r3, #0
   179b6:	d009      	beq.n	179cc <HTTP_DownloadFileTransaction+0x44>
   179b8:	2020      	movs	r0, #32
   179ba:	4b22      	ldr	r3, [pc, #136]	; (17a44 <HTTP_DownloadFileTransaction+0xbc>)
   179bc:	4798      	blx	r3
   179be:	0003      	movs	r3, r0
   179c0:	001a      	movs	r2, r3
   179c2:	2301      	movs	r3, #1
   179c4:	4053      	eors	r3, r2
   179c6:	b2db      	uxtb	r3, r3
   179c8:	2b00      	cmp	r3, #0
   179ca:	d1e1      	bne.n	17990 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   179cc:	4b1e      	ldr	r3, [pc, #120]	; (17a48 <HTTP_DownloadFileTransaction+0xc0>)
   179ce:	4798      	blx	r3
    vTaskDelay(1000);
   179d0:	23fa      	movs	r3, #250	; 0xfa
   179d2:	009b      	lsls	r3, r3, #2
   179d4:	0018      	movs	r0, r3
   179d6:	4b1a      	ldr	r3, [pc, #104]	; (17a40 <HTTP_DownloadFileTransaction+0xb8>)
   179d8:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   179da:	4b1c      	ldr	r3, [pc, #112]	; (17a4c <HTTP_DownloadFileTransaction+0xc4>)
   179dc:	2200      	movs	r2, #0
   179de:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   179e0:	003b      	movs	r3, r7
   179e2:	4a1b      	ldr	r2, [pc, #108]	; (17a50 <HTTP_DownloadFileTransaction+0xc8>)
   179e4:	ca13      	ldmia	r2!, {r0, r1, r4}
   179e6:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   179e8:	003b      	movs	r3, r7
   179ea:	2230      	movs	r2, #48	; 0x30
   179ec:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   179ee:	230f      	movs	r3, #15
   179f0:	18fc      	adds	r4, r7, r3
   179f2:	0039      	movs	r1, r7
   179f4:	4b17      	ldr	r3, [pc, #92]	; (17a54 <HTTP_DownloadFileTransaction+0xcc>)
   179f6:	220a      	movs	r2, #10
   179f8:	0018      	movs	r0, r3
   179fa:	4b17      	ldr	r3, [pc, #92]	; (17a58 <HTTP_DownloadFileTransaction+0xd0>)
   179fc:	4798      	blx	r3
   179fe:	0003      	movs	r3, r0
   17a00:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   17a02:	230f      	movs	r3, #15
   17a04:	18fb      	adds	r3, r7, r3
   17a06:	781b      	ldrb	r3, [r3, #0]
   17a08:	2b00      	cmp	r3, #0
   17a0a:	d008      	beq.n	17a1e <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   17a0c:	230f      	movs	r3, #15
   17a0e:	18fb      	adds	r3, r7, r3
   17a10:	781a      	ldrb	r2, [r3, #0]
   17a12:	4b12      	ldr	r3, [pc, #72]	; (17a5c <HTTP_DownloadFileTransaction+0xd4>)
   17a14:	0019      	movs	r1, r3
   17a16:	2000      	movs	r0, #0
   17a18:	4b11      	ldr	r3, [pc, #68]	; (17a60 <HTTP_DownloadFileTransaction+0xd8>)
   17a1a:	4798      	blx	r3
   17a1c:	e003      	b.n	17a26 <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   17a1e:	4b11      	ldr	r3, [pc, #68]	; (17a64 <HTTP_DownloadFileTransaction+0xdc>)
   17a20:	0018      	movs	r0, r3
   17a22:	4b11      	ldr	r3, [pc, #68]	; (17a68 <HTTP_DownloadFileTransaction+0xe0>)
   17a24:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_INIT;
   17a26:	4b11      	ldr	r3, [pc, #68]	; (17a6c <HTTP_DownloadFileTransaction+0xe4>)
   17a28:	2200      	movs	r2, #0
   17a2a:	701a      	strb	r2, [r3, #0]
}
   17a2c:	46c0      	nop			; (mov r8, r8)
   17a2e:	46bd      	mov	sp, r7
   17a30:	b005      	add	sp, #20
   17a32:	bd90      	pop	{r4, r7, pc}
   17a34:	00022ab5 	.word	0x00022ab5
   17a38:	200044e0 	.word	0x200044e0
   17a3c:	000331a9 	.word	0x000331a9
   17a40:	0001cc85 	.word	0x0001cc85
   17a44:	00016921 	.word	0x00016921
   17a48:	00026071 	.word	0x00026071
   17a4c:	20000658 	.word	0x20000658
   17a50:	0003775c 	.word	0x0003775c
   17a54:	2000088c 	.word	0x2000088c
   17a58:	0002e471 	.word	0x0002e471
   17a5c:	00037738 	.word	0x00037738
   17a60:	0001e9c5 	.word	0x0001e9c5
   17a64:	00037748 	.word	0x00037748
   17a68:	0001e8d9 	.word	0x0001e8d9
   17a6c:	20000644 	.word	0x20000644

00017a70 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   17a70:	b580      	push	{r7, lr}
   17a72:	af00      	add	r7, sp, #0
    socketDeinit();
   17a74:	4b18      	ldr	r3, [pc, #96]	; (17ad8 <MQTT_InitRoutine+0x68>)
   17a76:	4798      	blx	r3
    configure_mqtt();
   17a78:	4b18      	ldr	r3, [pc, #96]	; (17adc <MQTT_InitRoutine+0x6c>)
   17a7a:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17a7c:	4a18      	ldr	r2, [pc, #96]	; (17ae0 <MQTT_InitRoutine+0x70>)
   17a7e:	4b19      	ldr	r3, [pc, #100]	; (17ae4 <MQTT_InitRoutine+0x74>)
   17a80:	0011      	movs	r1, r2
   17a82:	0018      	movs	r0, r3
   17a84:	4b18      	ldr	r3, [pc, #96]	; (17ae8 <MQTT_InitRoutine+0x78>)
   17a86:	4798      	blx	r3
    socketInit();
   17a88:	4b18      	ldr	r3, [pc, #96]	; (17aec <MQTT_InitRoutine+0x7c>)
   17a8a:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   17a8c:	4b18      	ldr	r3, [pc, #96]	; (17af0 <MQTT_InitRoutine+0x80>)
   17a8e:	2234      	movs	r2, #52	; 0x34
   17a90:	5c9b      	ldrb	r3, [r3, r2]
   17a92:	2201      	movs	r2, #1
   17a94:	4053      	eors	r3, r2
   17a96:	b2db      	uxtb	r3, r3
   17a98:	2b00      	cmp	r3, #0
   17a9a:	d00c      	beq.n	17ab6 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17a9c:	4a15      	ldr	r2, [pc, #84]	; (17af4 <MQTT_InitRoutine+0x84>)
   17a9e:	4b14      	ldr	r3, [pc, #80]	; (17af0 <MQTT_InitRoutine+0x80>)
   17aa0:	0011      	movs	r1, r2
   17aa2:	0018      	movs	r0, r3
   17aa4:	4b14      	ldr	r3, [pc, #80]	; (17af8 <MQTT_InitRoutine+0x88>)
   17aa6:	4798      	blx	r3
   17aa8:	1e03      	subs	r3, r0, #0
   17aaa:	d004      	beq.n	17ab6 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17aac:	4b13      	ldr	r3, [pc, #76]	; (17afc <MQTT_InitRoutine+0x8c>)
   17aae:	0019      	movs	r1, r3
   17ab0:	2001      	movs	r0, #1
   17ab2:	4b13      	ldr	r3, [pc, #76]	; (17b00 <MQTT_InitRoutine+0x90>)
   17ab4:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   17ab6:	4b0e      	ldr	r3, [pc, #56]	; (17af0 <MQTT_InitRoutine+0x80>)
   17ab8:	2234      	movs	r2, #52	; 0x34
   17aba:	5c9b      	ldrb	r3, [r3, r2]
   17abc:	2b00      	cmp	r3, #0
   17abe:	d004      	beq.n	17aca <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   17ac0:	4b10      	ldr	r3, [pc, #64]	; (17b04 <MQTT_InitRoutine+0x94>)
   17ac2:	0019      	movs	r1, r3
   17ac4:	2001      	movs	r0, #1
   17ac6:	4b0e      	ldr	r3, [pc, #56]	; (17b00 <MQTT_InitRoutine+0x90>)
   17ac8:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   17aca:	4b0f      	ldr	r3, [pc, #60]	; (17b08 <MQTT_InitRoutine+0x98>)
   17acc:	2201      	movs	r2, #1
   17ace:	701a      	strb	r2, [r3, #0]
}
   17ad0:	46c0      	nop			; (mov r8, r8)
   17ad2:	46bd      	mov	sp, r7
   17ad4:	bd80      	pop	{r7, pc}
   17ad6:	46c0      	nop			; (mov r8, r8)
   17ad8:	00026071 	.word	0x00026071
   17adc:	00017785 	.word	0x00017785
   17ae0:	000173e1 	.word	0x000173e1
   17ae4:	000173ad 	.word	0x000173ad
   17ae8:	000260b9 	.word	0x000260b9
   17aec:	00026021 	.word	0x00026021
   17af0:	200008b8 	.word	0x200008b8
   17af4:	00036f34 	.word	0x00036f34
   17af8:	0003034d 	.word	0x0003034d
   17afc:	0003733c 	.word	0x0003733c
   17b00:	0001e9c5 	.word	0x0001e9c5
   17b04:	00037768 	.word	0x00037768
   17b08:	20000644 	.word	0x20000644

00017b0c <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   17b0c:	b580      	push	{r7, lr}
   17b0e:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   17b10:	2000      	movs	r0, #0
   17b12:	4b0b      	ldr	r3, [pc, #44]	; (17b40 <MQTT_HandleTransactions+0x34>)
   17b14:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   17b16:	4b0b      	ldr	r3, [pc, #44]	; (17b44 <MQTT_HandleTransactions+0x38>)
   17b18:	0018      	movs	r0, r3
   17b1a:	4b0b      	ldr	r3, [pc, #44]	; (17b48 <MQTT_HandleTransactions+0x3c>)
   17b1c:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   17b1e:	4b0b      	ldr	r3, [pc, #44]	; (17b4c <MQTT_HandleTransactions+0x40>)
   17b20:	4798      	blx	r3
    MQTT_HandleImuMessages();
   17b22:	4b0b      	ldr	r3, [pc, #44]	; (17b50 <MQTT_HandleTransactions+0x44>)
   17b24:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   17b26:	4b0b      	ldr	r3, [pc, #44]	; (17b54 <MQTT_HandleTransactions+0x48>)
   17b28:	2234      	movs	r2, #52	; 0x34
   17b2a:	5c9b      	ldrb	r3, [r3, r2]
   17b2c:	2b00      	cmp	r3, #0
   17b2e:	d004      	beq.n	17b3a <MQTT_HandleTransactions+0x2e>
   17b30:	4b08      	ldr	r3, [pc, #32]	; (17b54 <MQTT_HandleTransactions+0x48>)
   17b32:	2164      	movs	r1, #100	; 0x64
   17b34:	0018      	movs	r0, r3
   17b36:	4b08      	ldr	r3, [pc, #32]	; (17b58 <MQTT_HandleTransactions+0x4c>)
   17b38:	4798      	blx	r3
}
   17b3a:	46c0      	nop			; (mov r8, r8)
   17b3c:	46bd      	mov	sp, r7
   17b3e:	bd80      	pop	{r7, pc}
   17b40:	00022ab5 	.word	0x00022ab5
   17b44:	200044e0 	.word	0x200044e0
   17b48:	000331a9 	.word	0x000331a9
   17b4c:	00017be9 	.word	0x00017be9
   17b50:	00017b5d 	.word	0x00017b5d
   17b54:	200008b8 	.word	0x200008b8
   17b58:	0003057d 	.word	0x0003057d

00017b5c <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   17b5c:	b590      	push	{r4, r7, lr}
   17b5e:	b085      	sub	sp, #20
   17b60:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   17b62:	4b18      	ldr	r3, [pc, #96]	; (17bc4 <MQTT_HandleImuMessages+0x68>)
   17b64:	681b      	ldr	r3, [r3, #0]
   17b66:	0039      	movs	r1, r7
   17b68:	2200      	movs	r2, #0
   17b6a:	0018      	movs	r0, r3
   17b6c:	4b16      	ldr	r3, [pc, #88]	; (17bc8 <MQTT_HandleImuMessages+0x6c>)
   17b6e:	4798      	blx	r3
   17b70:	0003      	movs	r3, r0
   17b72:	2b01      	cmp	r3, #1
   17b74:	d121      	bne.n	17bba <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   17b76:	003b      	movs	r3, r7
   17b78:	2200      	movs	r2, #0
   17b7a:	5e9b      	ldrsh	r3, [r3, r2]
   17b7c:	001c      	movs	r4, r3
   17b7e:	003b      	movs	r3, r7
   17b80:	2202      	movs	r2, #2
   17b82:	5e9b      	ldrsh	r3, [r3, r2]
   17b84:	0019      	movs	r1, r3
   17b86:	003b      	movs	r3, r7
   17b88:	2204      	movs	r2, #4
   17b8a:	5e9b      	ldrsh	r3, [r3, r2]
   17b8c:	4a0f      	ldr	r2, [pc, #60]	; (17bcc <MQTT_HandleImuMessages+0x70>)
   17b8e:	4810      	ldr	r0, [pc, #64]	; (17bd0 <MQTT_HandleImuMessages+0x74>)
   17b90:	9301      	str	r3, [sp, #4]
   17b92:	9100      	str	r1, [sp, #0]
   17b94:	0023      	movs	r3, r4
   17b96:	213f      	movs	r1, #63	; 0x3f
   17b98:	4c0e      	ldr	r4, [pc, #56]	; (17bd4 <MQTT_HandleImuMessages+0x78>)
   17b9a:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17b9c:	4b0c      	ldr	r3, [pc, #48]	; (17bd0 <MQTT_HandleImuMessages+0x74>)
   17b9e:	0018      	movs	r0, r3
   17ba0:	4b0d      	ldr	r3, [pc, #52]	; (17bd8 <MQTT_HandleImuMessages+0x7c>)
   17ba2:	4798      	blx	r3
   17ba4:	0004      	movs	r4, r0
   17ba6:	4a0a      	ldr	r2, [pc, #40]	; (17bd0 <MQTT_HandleImuMessages+0x74>)
   17ba8:	490c      	ldr	r1, [pc, #48]	; (17bdc <MQTT_HandleImuMessages+0x80>)
   17baa:	480d      	ldr	r0, [pc, #52]	; (17be0 <MQTT_HandleImuMessages+0x84>)
   17bac:	2300      	movs	r3, #0
   17bae:	9301      	str	r3, [sp, #4]
   17bb0:	2301      	movs	r3, #1
   17bb2:	9300      	str	r3, [sp, #0]
   17bb4:	0023      	movs	r3, r4
   17bb6:	4c0b      	ldr	r4, [pc, #44]	; (17be4 <MQTT_HandleImuMessages+0x88>)
   17bb8:	47a0      	blx	r4
    }
}
   17bba:	46c0      	nop			; (mov r8, r8)
   17bbc:	46bd      	mov	sp, r7
   17bbe:	b003      	add	sp, #12
   17bc0:	bd90      	pop	{r4, r7, pc}
   17bc2:	46c0      	nop			; (mov r8, r8)
   17bc4:	20000650 	.word	0x20000650
   17bc8:	0001bad9 	.word	0x0001bad9
   17bcc:	00037784 	.word	0x00037784
   17bd0:	20000024 	.word	0x20000024
   17bd4:	0003579d 	.word	0x0003579d
   17bd8:	000358fb 	.word	0x000358fb
   17bdc:	000377a8 	.word	0x000377a8
   17be0:	200008b8 	.word	0x200008b8
   17be4:	000304c9 	.word	0x000304c9

00017be8 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   17be8:	b590      	push	{r4, r7, lr}
   17bea:	b08b      	sub	sp, #44	; 0x2c
   17bec:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17bee:	4b39      	ldr	r3, [pc, #228]	; (17cd4 <MQTT_HandleGameMessages+0xec>)
   17bf0:	681b      	ldr	r3, [r3, #0]
   17bf2:	2208      	movs	r2, #8
   17bf4:	18b9      	adds	r1, r7, r2
   17bf6:	2200      	movs	r2, #0
   17bf8:	0018      	movs	r0, r3
   17bfa:	4b37      	ldr	r3, [pc, #220]	; (17cd8 <MQTT_HandleGameMessages+0xf0>)
   17bfc:	4798      	blx	r3
   17bfe:	0003      	movs	r3, r0
   17c00:	2b01      	cmp	r3, #1
   17c02:	d163      	bne.n	17ccc <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   17c04:	4b35      	ldr	r3, [pc, #212]	; (17cdc <MQTT_HandleGameMessages+0xf4>)
   17c06:	4a36      	ldr	r2, [pc, #216]	; (17ce0 <MQTT_HandleGameMessages+0xf8>)
   17c08:	ca03      	ldmia	r2!, {r0, r1}
   17c0a:	c303      	stmia	r3!, {r0, r1}
   17c0c:	8812      	ldrh	r2, [r2, #0]
   17c0e:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17c10:	2300      	movs	r3, #0
   17c12:	61fb      	str	r3, [r7, #28]
   17c14:	e02d      	b.n	17c72 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   17c16:	2308      	movs	r3, #8
   17c18:	18fa      	adds	r2, r7, r3
   17c1a:	69fb      	ldr	r3, [r7, #28]
   17c1c:	18d3      	adds	r3, r2, r3
   17c1e:	781b      	ldrb	r3, [r3, #0]
   17c20:	2bff      	cmp	r3, #255	; 0xff
   17c22:	d02a      	beq.n	17c7a <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   17c24:	2308      	movs	r3, #8
   17c26:	18fa      	adds	r2, r7, r3
   17c28:	69fb      	ldr	r3, [r7, #28]
   17c2a:	18d3      	adds	r3, r2, r3
   17c2c:	781b      	ldrb	r3, [r3, #0]
   17c2e:	4a2d      	ldr	r2, [pc, #180]	; (17ce4 <MQTT_HandleGameMessages+0xfc>)
   17c30:	0038      	movs	r0, r7
   17c32:	2103      	movs	r1, #3
   17c34:	4c2c      	ldr	r4, [pc, #176]	; (17ce8 <MQTT_HandleGameMessages+0x100>)
   17c36:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   17c38:	003a      	movs	r2, r7
   17c3a:	4b28      	ldr	r3, [pc, #160]	; (17cdc <MQTT_HandleGameMessages+0xf4>)
   17c3c:	0011      	movs	r1, r2
   17c3e:	0018      	movs	r0, r3
   17c40:	4b2a      	ldr	r3, [pc, #168]	; (17cec <MQTT_HandleGameMessages+0x104>)
   17c42:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   17c44:	69fb      	ldr	r3, [r7, #28]
   17c46:	3301      	adds	r3, #1
   17c48:	2208      	movs	r2, #8
   17c4a:	18ba      	adds	r2, r7, r2
   17c4c:	5cd3      	ldrb	r3, [r2, r3]
   17c4e:	2bff      	cmp	r3, #255	; 0xff
   17c50:	d00c      	beq.n	17c6c <MQTT_HandleGameMessages+0x84>
   17c52:	69fb      	ldr	r3, [r7, #28]
   17c54:	3301      	adds	r3, #1
   17c56:	2b13      	cmp	r3, #19
   17c58:	dc08      	bgt.n	17c6c <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   17c5a:	003b      	movs	r3, r7
   17c5c:	222c      	movs	r2, #44	; 0x2c
   17c5e:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   17c60:	003a      	movs	r2, r7
   17c62:	4b1e      	ldr	r3, [pc, #120]	; (17cdc <MQTT_HandleGameMessages+0xf4>)
   17c64:	0011      	movs	r1, r2
   17c66:	0018      	movs	r0, r3
   17c68:	4b20      	ldr	r3, [pc, #128]	; (17cec <MQTT_HandleGameMessages+0x104>)
   17c6a:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17c6c:	69fb      	ldr	r3, [r7, #28]
   17c6e:	3301      	adds	r3, #1
   17c70:	61fb      	str	r3, [r7, #28]
   17c72:	69fb      	ldr	r3, [r7, #28]
   17c74:	2b13      	cmp	r3, #19
   17c76:	ddce      	ble.n	17c16 <MQTT_HandleGameMessages+0x2e>
   17c78:	e000      	b.n	17c7c <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   17c7a:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   17c7c:	4b17      	ldr	r3, [pc, #92]	; (17cdc <MQTT_HandleGameMessages+0xf4>)
   17c7e:	0018      	movs	r0, r3
   17c80:	4b1b      	ldr	r3, [pc, #108]	; (17cf0 <MQTT_HandleGameMessages+0x108>)
   17c82:	4798      	blx	r3
   17c84:	0003      	movs	r3, r0
   17c86:	001a      	movs	r2, r3
   17c88:	4b14      	ldr	r3, [pc, #80]	; (17cdc <MQTT_HandleGameMessages+0xf4>)
   17c8a:	18d2      	adds	r2, r2, r3
   17c8c:	4b19      	ldr	r3, [pc, #100]	; (17cf4 <MQTT_HandleGameMessages+0x10c>)
   17c8e:	0010      	movs	r0, r2
   17c90:	0019      	movs	r1, r3
   17c92:	2303      	movs	r3, #3
   17c94:	001a      	movs	r2, r3
   17c96:	4b18      	ldr	r3, [pc, #96]	; (17cf8 <MQTT_HandleGameMessages+0x110>)
   17c98:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   17c9a:	4b10      	ldr	r3, [pc, #64]	; (17cdc <MQTT_HandleGameMessages+0xf4>)
   17c9c:	0019      	movs	r1, r3
   17c9e:	2001      	movs	r0, #1
   17ca0:	4b16      	ldr	r3, [pc, #88]	; (17cfc <MQTT_HandleGameMessages+0x114>)
   17ca2:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   17ca4:	4b16      	ldr	r3, [pc, #88]	; (17d00 <MQTT_HandleGameMessages+0x118>)
   17ca6:	0019      	movs	r1, r3
   17ca8:	2001      	movs	r0, #1
   17caa:	4b14      	ldr	r3, [pc, #80]	; (17cfc <MQTT_HandleGameMessages+0x114>)
   17cac:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17cae:	4b0b      	ldr	r3, [pc, #44]	; (17cdc <MQTT_HandleGameMessages+0xf4>)
   17cb0:	0018      	movs	r0, r3
   17cb2:	4b0f      	ldr	r3, [pc, #60]	; (17cf0 <MQTT_HandleGameMessages+0x108>)
   17cb4:	4798      	blx	r3
   17cb6:	0004      	movs	r4, r0
   17cb8:	4a08      	ldr	r2, [pc, #32]	; (17cdc <MQTT_HandleGameMessages+0xf4>)
   17cba:	4912      	ldr	r1, [pc, #72]	; (17d04 <MQTT_HandleGameMessages+0x11c>)
   17cbc:	4812      	ldr	r0, [pc, #72]	; (17d08 <MQTT_HandleGameMessages+0x120>)
   17cbe:	2300      	movs	r3, #0
   17cc0:	9301      	str	r3, [sp, #4]
   17cc2:	2301      	movs	r3, #1
   17cc4:	9300      	str	r3, [sp, #0]
   17cc6:	0023      	movs	r3, r4
   17cc8:	4c10      	ldr	r4, [pc, #64]	; (17d0c <MQTT_HandleGameMessages+0x124>)
   17cca:	47a0      	blx	r4
    }
}
   17ccc:	46c0      	nop			; (mov r8, r8)
   17cce:	46bd      	mov	sp, r7
   17cd0:	b009      	add	sp, #36	; 0x24
   17cd2:	bd90      	pop	{r4, r7, pc}
   17cd4:	2000064c 	.word	0x2000064c
   17cd8:	0001bad9 	.word	0x0001bad9
   17cdc:	20000024 	.word	0x20000024
   17ce0:	000374d8 	.word	0x000374d8
   17ce4:	000377bc 	.word	0x000377bc
   17ce8:	0003579d 	.word	0x0003579d
   17cec:	00035881 	.word	0x00035881
   17cf0:	000358fb 	.word	0x000358fb
   17cf4:	000377c0 	.word	0x000377c0
   17cf8:	0003550d 	.word	0x0003550d
   17cfc:	0001e9c5 	.word	0x0001e9c5
   17d00:	000377c4 	.word	0x000377c4
   17d04:	000377c8 	.word	0x000377c8
   17d08:	200008b8 	.word	0x200008b8
   17d0c:	000304c9 	.word	0x000304c9

00017d10 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   17d10:	b590      	push	{r4, r7, lr}
   17d12:	b08d      	sub	sp, #52	; 0x34
   17d14:	af02      	add	r7, sp, #8
   17d16:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   17d18:	2064      	movs	r0, #100	; 0x64
   17d1a:	4b79      	ldr	r3, [pc, #484]	; (17f00 <vWifiTask+0x1f0>)
   17d1c:	4798      	blx	r3
    init_state();
   17d1e:	4b79      	ldr	r3, [pc, #484]	; (17f04 <vWifiTask+0x1f4>)
   17d20:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   17d22:	2200      	movs	r2, #0
   17d24:	2104      	movs	r1, #4
   17d26:	2005      	movs	r0, #5
   17d28:	4b77      	ldr	r3, [pc, #476]	; (17f08 <vWifiTask+0x1f8>)
   17d2a:	4798      	blx	r3
   17d2c:	0002      	movs	r2, r0
   17d2e:	4b77      	ldr	r3, [pc, #476]	; (17f0c <vWifiTask+0x1fc>)
   17d30:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   17d32:	2200      	movs	r2, #0
   17d34:	2106      	movs	r1, #6
   17d36:	2005      	movs	r0, #5
   17d38:	4b73      	ldr	r3, [pc, #460]	; (17f08 <vWifiTask+0x1f8>)
   17d3a:	4798      	blx	r3
   17d3c:	0002      	movs	r2, r0
   17d3e:	4b74      	ldr	r3, [pc, #464]	; (17f10 <vWifiTask+0x200>)
   17d40:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   17d42:	2200      	movs	r2, #0
   17d44:	2114      	movs	r1, #20
   17d46:	2002      	movs	r0, #2
   17d48:	4b6f      	ldr	r3, [pc, #444]	; (17f08 <vWifiTask+0x1f8>)
   17d4a:	4798      	blx	r3
   17d4c:	0002      	movs	r2, r0
   17d4e:	4b71      	ldr	r3, [pc, #452]	; (17f14 <vWifiTask+0x204>)
   17d50:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   17d52:	2200      	movs	r2, #0
   17d54:	2102      	movs	r1, #2
   17d56:	2005      	movs	r0, #5
   17d58:	4b6b      	ldr	r3, [pc, #428]	; (17f08 <vWifiTask+0x1f8>)
   17d5a:	4798      	blx	r3
   17d5c:	0002      	movs	r2, r0
   17d5e:	4b6e      	ldr	r3, [pc, #440]	; (17f18 <vWifiTask+0x208>)
   17d60:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   17d62:	4b6a      	ldr	r3, [pc, #424]	; (17f0c <vWifiTask+0x1fc>)
   17d64:	681b      	ldr	r3, [r3, #0]
   17d66:	2b00      	cmp	r3, #0
   17d68:	d00b      	beq.n	17d82 <vWifiTask+0x72>
   17d6a:	4b69      	ldr	r3, [pc, #420]	; (17f10 <vWifiTask+0x200>)
   17d6c:	681b      	ldr	r3, [r3, #0]
   17d6e:	2b00      	cmp	r3, #0
   17d70:	d007      	beq.n	17d82 <vWifiTask+0x72>
   17d72:	4b68      	ldr	r3, [pc, #416]	; (17f14 <vWifiTask+0x204>)
   17d74:	681b      	ldr	r3, [r3, #0]
   17d76:	2b00      	cmp	r3, #0
   17d78:	d003      	beq.n	17d82 <vWifiTask+0x72>
   17d7a:	4b67      	ldr	r3, [pc, #412]	; (17f18 <vWifiTask+0x208>)
   17d7c:	681b      	ldr	r3, [r3, #0]
   17d7e:	2b00      	cmp	r3, #0
   17d80:	d103      	bne.n	17d8a <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   17d82:	4b66      	ldr	r3, [pc, #408]	; (17f1c <vWifiTask+0x20c>)
   17d84:	0018      	movs	r0, r3
   17d86:	4b66      	ldr	r3, [pc, #408]	; (17f20 <vWifiTask+0x210>)
   17d88:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   17d8a:	4b66      	ldr	r3, [pc, #408]	; (17f24 <vWifiTask+0x214>)
   17d8c:	0018      	movs	r0, r3
   17d8e:	4b64      	ldr	r3, [pc, #400]	; (17f20 <vWifiTask+0x210>)
   17d90:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   17d92:	4b65      	ldr	r3, [pc, #404]	; (17f28 <vWifiTask+0x218>)
   17d94:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   17d96:	4b65      	ldr	r3, [pc, #404]	; (17f2c <vWifiTask+0x21c>)
   17d98:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   17d9a:	4b65      	ldr	r3, [pc, #404]	; (17f30 <vWifiTask+0x220>)
   17d9c:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   17d9e:	4b65      	ldr	r3, [pc, #404]	; (17f34 <vWifiTask+0x224>)
   17da0:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   17da2:	4b65      	ldr	r3, [pc, #404]	; (17f38 <vWifiTask+0x228>)
   17da4:	4798      	blx	r3
    configure_extint_callbacks();
   17da6:	4b65      	ldr	r3, [pc, #404]	; (17f3c <vWifiTask+0x22c>)
   17da8:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   17daa:	230c      	movs	r3, #12
   17dac:	18fb      	adds	r3, r7, r3
   17dae:	2218      	movs	r2, #24
   17db0:	2100      	movs	r1, #0
   17db2:	0018      	movs	r0, r3
   17db4:	4b62      	ldr	r3, [pc, #392]	; (17f40 <vWifiTask+0x230>)
   17db6:	4798      	blx	r3

    nm_bsp_init();
   17db8:	4b62      	ldr	r3, [pc, #392]	; (17f44 <vWifiTask+0x234>)
   17dba:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   17dbc:	230c      	movs	r3, #12
   17dbe:	18fb      	adds	r3, r7, r3
   17dc0:	4a61      	ldr	r2, [pc, #388]	; (17f48 <vWifiTask+0x238>)
   17dc2:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   17dc4:	2327      	movs	r3, #39	; 0x27
   17dc6:	18fc      	adds	r4, r7, r3
   17dc8:	230c      	movs	r3, #12
   17dca:	18fb      	adds	r3, r7, r3
   17dcc:	0018      	movs	r0, r3
   17dce:	4b5f      	ldr	r3, [pc, #380]	; (17f4c <vWifiTask+0x23c>)
   17dd0:	4798      	blx	r3
   17dd2:	0003      	movs	r3, r0
   17dd4:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   17dd6:	2327      	movs	r3, #39	; 0x27
   17dd8:	18fb      	adds	r3, r7, r3
   17dda:	781b      	ldrb	r3, [r3, #0]
   17ddc:	b25b      	sxtb	r3, r3
   17dde:	2b00      	cmp	r3, #0
   17de0:	d009      	beq.n	17df6 <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   17de2:	2327      	movs	r3, #39	; 0x27
   17de4:	18fb      	adds	r3, r7, r3
   17de6:	2200      	movs	r2, #0
   17de8:	569a      	ldrsb	r2, [r3, r2]
   17dea:	4b59      	ldr	r3, [pc, #356]	; (17f50 <vWifiTask+0x240>)
   17dec:	0019      	movs	r1, r3
   17dee:	2001      	movs	r0, #1
   17df0:	4b58      	ldr	r3, [pc, #352]	; (17f54 <vWifiTask+0x244>)
   17df2:	4798      	blx	r3
        while (1) {
   17df4:	e7fe      	b.n	17df4 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   17df6:	4a58      	ldr	r2, [pc, #352]	; (17f58 <vWifiTask+0x248>)
   17df8:	4b58      	ldr	r3, [pc, #352]	; (17f5c <vWifiTask+0x24c>)
   17dfa:	0019      	movs	r1, r3
   17dfc:	2001      	movs	r0, #1
   17dfe:	4b55      	ldr	r3, [pc, #340]	; (17f54 <vWifiTask+0x244>)
   17e00:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   17e02:	4b57      	ldr	r3, [pc, #348]	; (17f60 <vWifiTask+0x250>)
   17e04:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17e06:	4a57      	ldr	r2, [pc, #348]	; (17f64 <vWifiTask+0x254>)
   17e08:	4b57      	ldr	r3, [pc, #348]	; (17f68 <vWifiTask+0x258>)
   17e0a:	0011      	movs	r1, r2
   17e0c:	0018      	movs	r0, r3
   17e0e:	4b57      	ldr	r3, [pc, #348]	; (17f6c <vWifiTask+0x25c>)
   17e10:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   17e12:	4a57      	ldr	r2, [pc, #348]	; (17f70 <vWifiTask+0x260>)
   17e14:	4850      	ldr	r0, [pc, #320]	; (17f58 <vWifiTask+0x248>)
   17e16:	23ff      	movs	r3, #255	; 0xff
   17e18:	9300      	str	r3, [sp, #0]
   17e1a:	0013      	movs	r3, r2
   17e1c:	2202      	movs	r2, #2
   17e1e:	2107      	movs	r1, #7
   17e20:	4c54      	ldr	r4, [pc, #336]	; (17f74 <vWifiTask+0x264>)
   17e22:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   17e24:	e006      	b.n	17e34 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17e26:	2000      	movs	r0, #0
   17e28:	4b53      	ldr	r3, [pc, #332]	; (17f78 <vWifiTask+0x268>)
   17e2a:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17e2c:	4b53      	ldr	r3, [pc, #332]	; (17f7c <vWifiTask+0x26c>)
   17e2e:	0018      	movs	r0, r3
   17e30:	4b53      	ldr	r3, [pc, #332]	; (17f80 <vWifiTask+0x270>)
   17e32:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   17e34:	2002      	movs	r0, #2
   17e36:	4b53      	ldr	r3, [pc, #332]	; (17f84 <vWifiTask+0x274>)
   17e38:	4798      	blx	r3
   17e3a:	0003      	movs	r3, r0
   17e3c:	001a      	movs	r2, r3
   17e3e:	2301      	movs	r3, #1
   17e40:	4053      	eors	r3, r2
   17e42:	b2db      	uxtb	r3, r3
   17e44:	2b00      	cmp	r3, #0
   17e46:	d1ee      	bne.n	17e26 <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   17e48:	23fa      	movs	r3, #250	; 0xfa
   17e4a:	009b      	lsls	r3, r3, #2
   17e4c:	0018      	movs	r0, r3
   17e4e:	4b2c      	ldr	r3, [pc, #176]	; (17f00 <vWifiTask+0x1f0>)
   17e50:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   17e52:	4b4d      	ldr	r3, [pc, #308]	; (17f88 <vWifiTask+0x278>)
   17e54:	2201      	movs	r2, #1
   17e56:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   17e58:	4b4b      	ldr	r3, [pc, #300]	; (17f88 <vWifiTask+0x278>)
   17e5a:	781b      	ldrb	r3, [r3, #0]
   17e5c:	b25b      	sxtb	r3, r3
   17e5e:	2b01      	cmp	r3, #1
   17e60:	d00b      	beq.n	17e7a <vWifiTask+0x16a>
   17e62:	dc02      	bgt.n	17e6a <vWifiTask+0x15a>
   17e64:	2b00      	cmp	r3, #0
   17e66:	d005      	beq.n	17e74 <vWifiTask+0x164>
   17e68:	e010      	b.n	17e8c <vWifiTask+0x17c>
   17e6a:	2b02      	cmp	r3, #2
   17e6c:	d008      	beq.n	17e80 <vWifiTask+0x170>
   17e6e:	2b03      	cmp	r3, #3
   17e70:	d009      	beq.n	17e86 <vWifiTask+0x176>
   17e72:	e00b      	b.n	17e8c <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   17e74:	4b45      	ldr	r3, [pc, #276]	; (17f8c <vWifiTask+0x27c>)
   17e76:	4798      	blx	r3

                break;
   17e78:	e00c      	b.n	17e94 <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   17e7a:	4b45      	ldr	r3, [pc, #276]	; (17f90 <vWifiTask+0x280>)
   17e7c:	4798      	blx	r3
                break;
   17e7e:	e009      	b.n	17e94 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   17e80:	4b44      	ldr	r3, [pc, #272]	; (17f94 <vWifiTask+0x284>)
   17e82:	4798      	blx	r3
                break;
   17e84:	e006      	b.n	17e94 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   17e86:	4b44      	ldr	r3, [pc, #272]	; (17f98 <vWifiTask+0x288>)
   17e88:	4798      	blx	r3
                break;
   17e8a:	e003      	b.n	17e94 <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   17e8c:	4b3e      	ldr	r3, [pc, #248]	; (17f88 <vWifiTask+0x278>)
   17e8e:	2200      	movs	r2, #0
   17e90:	701a      	strb	r2, [r3, #0]
                break;
   17e92:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   17e94:	230b      	movs	r3, #11
   17e96:	18fb      	adds	r3, r7, r3
   17e98:	2200      	movs	r2, #0
   17e9a:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   17e9c:	4b1b      	ldr	r3, [pc, #108]	; (17f0c <vWifiTask+0x1fc>)
   17e9e:	681b      	ldr	r3, [r3, #0]
   17ea0:	220b      	movs	r2, #11
   17ea2:	18b9      	adds	r1, r7, r2
   17ea4:	2200      	movs	r2, #0
   17ea6:	0018      	movs	r0, r3
   17ea8:	4b3c      	ldr	r3, [pc, #240]	; (17f9c <vWifiTask+0x28c>)
   17eaa:	4798      	blx	r3
   17eac:	0003      	movs	r3, r0
   17eae:	2b01      	cmp	r3, #1
   17eb0:	d105      	bne.n	17ebe <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
   17eb2:	230b      	movs	r3, #11
   17eb4:	18fb      	adds	r3, r7, r3
   17eb6:	781b      	ldrb	r3, [r3, #0]
   17eb8:	b25a      	sxtb	r2, r3
   17eba:	4b33      	ldr	r3, [pc, #204]	; (17f88 <vWifiTask+0x278>)
   17ebc:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publis something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   17ebe:	4b38      	ldr	r3, [pc, #224]	; (17fa0 <vWifiTask+0x290>)
   17ec0:	781b      	ldrb	r3, [r3, #0]
   17ec2:	b2db      	uxtb	r3, r3
   17ec4:	2b00      	cmp	r3, #0
   17ec6:	d017      	beq.n	17ef8 <vWifiTask+0x1e8>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   17ec8:	4b36      	ldr	r3, [pc, #216]	; (17fa4 <vWifiTask+0x294>)
   17eca:	0018      	movs	r0, r3
   17ecc:	4b36      	ldr	r3, [pc, #216]	; (17fa8 <vWifiTask+0x298>)
   17ece:	4798      	blx	r3
   17ed0:	0004      	movs	r4, r0
   17ed2:	4a34      	ldr	r2, [pc, #208]	; (17fa4 <vWifiTask+0x294>)
   17ed4:	4935      	ldr	r1, [pc, #212]	; (17fac <vWifiTask+0x29c>)
   17ed6:	4836      	ldr	r0, [pc, #216]	; (17fb0 <vWifiTask+0x2a0>)
   17ed8:	2300      	movs	r3, #0
   17eda:	9301      	str	r3, [sp, #4]
   17edc:	2301      	movs	r3, #1
   17ede:	9300      	str	r3, [sp, #0]
   17ee0:	0023      	movs	r3, r4
   17ee2:	4c34      	ldr	r4, [pc, #208]	; (17fb4 <vWifiTask+0x2a4>)
   17ee4:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   17ee6:	4a2f      	ldr	r2, [pc, #188]	; (17fa4 <vWifiTask+0x294>)
   17ee8:	4b33      	ldr	r3, [pc, #204]	; (17fb8 <vWifiTask+0x2a8>)
   17eea:	0019      	movs	r1, r3
   17eec:	2001      	movs	r0, #1
   17eee:	4b19      	ldr	r3, [pc, #100]	; (17f54 <vWifiTask+0x244>)
   17ef0:	4798      	blx	r3
            isPressed = false;
   17ef2:	4b2b      	ldr	r3, [pc, #172]	; (17fa0 <vWifiTask+0x290>)
   17ef4:	2200      	movs	r2, #0
   17ef6:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   17ef8:	2064      	movs	r0, #100	; 0x64
   17efa:	4b01      	ldr	r3, [pc, #4]	; (17f00 <vWifiTask+0x1f0>)
   17efc:	4798      	blx	r3
    while (1) {
   17efe:	e7ab      	b.n	17e58 <vWifiTask+0x148>
   17f00:	0001cc85 	.word	0x0001cc85
   17f04:	000168b1 	.word	0x000168b1
   17f08:	0001af79 	.word	0x0001af79
   17f0c:	20000648 	.word	0x20000648
   17f10:	20000650 	.word	0x20000650
   17f14:	2000064c 	.word	0x2000064c
   17f18:	20000654 	.word	0x20000654
   17f1c:	000377dc 	.word	0x000377dc
   17f20:	0001e8d9 	.word	0x0001e8d9
   17f24:	00037804 	.word	0x00037804
   17f28:	000172ed 	.word	0x000172ed
   17f2c:	00017329 	.word	0x00017329
   17f30:	00017785 	.word	0x00017785
   17f34:	00017209 	.word	0x00017209
   17f38:	0001783d 	.word	0x0001783d
   17f3c:	0001787d 	.word	0x0001787d
   17f40:	00035543 	.word	0x00035543
   17f44:	00020de9 	.word	0x00020de9
   17f48:	000170b5 	.word	0x000170b5
   17f4c:	000228c1 	.word	0x000228c1
   17f50:	00037820 	.word	0x00037820
   17f54:	0001e9c5 	.word	0x0001e9c5
   17f58:	0003730c 	.word	0x0003730c
   17f5c:	0003784c 	.word	0x0003784c
   17f60:	00026021 	.word	0x00026021
   17f64:	000173e1 	.word	0x000173e1
   17f68:	000173ad 	.word	0x000173ad
   17f6c:	000260b9 	.word	0x000260b9
   17f70:	00037300 	.word	0x00037300
   17f74:	00022ad1 	.word	0x00022ad1
   17f78:	00022ab5 	.word	0x00022ab5
   17f7c:	200044e0 	.word	0x200044e0
   17f80:	000331a9 	.word	0x000331a9
   17f84:	00016921 	.word	0x00016921
   17f88:	20000644 	.word	0x20000644
   17f8c:	00017a71 	.word	0x00017a71
   17f90:	00017b0d 	.word	0x00017b0d
   17f94:	000178f5 	.word	0x000178f5
   17f98:	00017989 	.word	0x00017989
   17f9c:	0001bad9 	.word	0x0001bad9
   17fa0:	20000cf0 	.word	0x20000cf0
   17fa4:	20000064 	.word	0x20000064
   17fa8:	000358fb 	.word	0x000358fb
   17fac:	00037870 	.word	0x00037870
   17fb0:	200008b8 	.word	0x200008b8
   17fb4:	000304c9 	.word	0x000304c9
   17fb8:	0003788c 	.word	0x0003788c

00017fbc <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   17fbc:	b590      	push	{r4, r7, lr}
   17fbe:	b083      	sub	sp, #12
   17fc0:	af00      	add	r7, sp, #0
   17fc2:	0002      	movs	r2, r0
   17fc4:	1dfb      	adds	r3, r7, #7
   17fc6:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   17fc8:	1dfb      	adds	r3, r7, #7
   17fca:	781b      	ldrb	r3, [r3, #0]
   17fcc:	2b03      	cmp	r3, #3
   17fce:	d806      	bhi.n	17fde <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   17fd0:	4b05      	ldr	r3, [pc, #20]	; (17fe8 <WifiHandlerSetState+0x2c>)
   17fd2:	6818      	ldr	r0, [r3, #0]
   17fd4:	1df9      	adds	r1, r7, #7
   17fd6:	2300      	movs	r3, #0
   17fd8:	220a      	movs	r2, #10
   17fda:	4c04      	ldr	r4, [pc, #16]	; (17fec <WifiHandlerSetState+0x30>)
   17fdc:	47a0      	blx	r4
    }
}
   17fde:	46c0      	nop			; (mov r8, r8)
   17fe0:	46bd      	mov	sp, r7
   17fe2:	b003      	add	sp, #12
   17fe4:	bd90      	pop	{r4, r7, pc}
   17fe6:	46c0      	nop			; (mov r8, r8)
   17fe8:	20000648 	.word	0x20000648
   17fec:	0001b221 	.word	0x0001b221

00017ff0 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   17ff0:	b590      	push	{r4, r7, lr}
   17ff2:	b085      	sub	sp, #20
   17ff4:	af00      	add	r7, sp, #0
   17ff6:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   17ff8:	4b06      	ldr	r3, [pc, #24]	; (18014 <WifiAddDistanceDataToQueue+0x24>)
   17ffa:	6818      	ldr	r0, [r3, #0]
   17ffc:	6879      	ldr	r1, [r7, #4]
   17ffe:	2300      	movs	r3, #0
   18000:	220a      	movs	r2, #10
   18002:	4c05      	ldr	r4, [pc, #20]	; (18018 <WifiAddDistanceDataToQueue+0x28>)
   18004:	47a0      	blx	r4
   18006:	0003      	movs	r3, r0
   18008:	60fb      	str	r3, [r7, #12]
    return error;
   1800a:	68fb      	ldr	r3, [r7, #12]
}
   1800c:	0018      	movs	r0, r3
   1800e:	46bd      	mov	sp, r7
   18010:	b005      	add	sp, #20
   18012:	bd90      	pop	{r4, r7, pc}
   18014:	20000654 	.word	0x20000654
   18018:	0001b221 	.word	0x0001b221

0001801c <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   1801c:	b590      	push	{r4, r7, lr}
   1801e:	b085      	sub	sp, #20
   18020:	af00      	add	r7, sp, #0
   18022:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   18024:	4b06      	ldr	r3, [pc, #24]	; (18040 <WifiAddGameDataToQueue+0x24>)
   18026:	6818      	ldr	r0, [r3, #0]
   18028:	6879      	ldr	r1, [r7, #4]
   1802a:	2300      	movs	r3, #0
   1802c:	220a      	movs	r2, #10
   1802e:	4c05      	ldr	r4, [pc, #20]	; (18044 <WifiAddGameDataToQueue+0x28>)
   18030:	47a0      	blx	r4
   18032:	0003      	movs	r3, r0
   18034:	60fb      	str	r3, [r7, #12]
    return error;
   18036:	68fb      	ldr	r3, [r7, #12]
}
   18038:	0018      	movs	r0, r3
   1803a:	46bd      	mov	sp, r7
   1803c:	b005      	add	sp, #20
   1803e:	bd90      	pop	{r4, r7, pc}
   18040:	2000064c 	.word	0x2000064c
   18044:	0001b221 	.word	0x0001b221

00018048 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   18048:	b580      	push	{r7, lr}
   1804a:	b082      	sub	sp, #8
   1804c:	af00      	add	r7, sp, #0
   1804e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   18050:	687b      	ldr	r3, [r7, #4]
   18052:	2200      	movs	r2, #0
   18054:	701a      	strb	r2, [r3, #0]
}
   18056:	46c0      	nop			; (mov r8, r8)
   18058:	46bd      	mov	sp, r7
   1805a:	b002      	add	sp, #8
   1805c:	bd80      	pop	{r7, pc}
	...

00018060 <system_apb_clock_set_mask>:
{
   18060:	b580      	push	{r7, lr}
   18062:	b082      	sub	sp, #8
   18064:	af00      	add	r7, sp, #0
   18066:	0002      	movs	r2, r0
   18068:	6039      	str	r1, [r7, #0]
   1806a:	1dfb      	adds	r3, r7, #7
   1806c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1806e:	1dfb      	adds	r3, r7, #7
   18070:	781b      	ldrb	r3, [r3, #0]
   18072:	2b01      	cmp	r3, #1
   18074:	d00a      	beq.n	1808c <system_apb_clock_set_mask+0x2c>
   18076:	2b02      	cmp	r3, #2
   18078:	d00f      	beq.n	1809a <system_apb_clock_set_mask+0x3a>
   1807a:	2b00      	cmp	r3, #0
   1807c:	d114      	bne.n	180a8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1807e:	4b0e      	ldr	r3, [pc, #56]	; (180b8 <system_apb_clock_set_mask+0x58>)
   18080:	4a0d      	ldr	r2, [pc, #52]	; (180b8 <system_apb_clock_set_mask+0x58>)
   18082:	6991      	ldr	r1, [r2, #24]
   18084:	683a      	ldr	r2, [r7, #0]
   18086:	430a      	orrs	r2, r1
   18088:	619a      	str	r2, [r3, #24]
			break;
   1808a:	e00f      	b.n	180ac <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1808c:	4b0a      	ldr	r3, [pc, #40]	; (180b8 <system_apb_clock_set_mask+0x58>)
   1808e:	4a0a      	ldr	r2, [pc, #40]	; (180b8 <system_apb_clock_set_mask+0x58>)
   18090:	69d1      	ldr	r1, [r2, #28]
   18092:	683a      	ldr	r2, [r7, #0]
   18094:	430a      	orrs	r2, r1
   18096:	61da      	str	r2, [r3, #28]
			break;
   18098:	e008      	b.n	180ac <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1809a:	4b07      	ldr	r3, [pc, #28]	; (180b8 <system_apb_clock_set_mask+0x58>)
   1809c:	4a06      	ldr	r2, [pc, #24]	; (180b8 <system_apb_clock_set_mask+0x58>)
   1809e:	6a11      	ldr	r1, [r2, #32]
   180a0:	683a      	ldr	r2, [r7, #0]
   180a2:	430a      	orrs	r2, r1
   180a4:	621a      	str	r2, [r3, #32]
			break;
   180a6:	e001      	b.n	180ac <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   180a8:	2317      	movs	r3, #23
   180aa:	e000      	b.n	180ae <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   180ac:	2300      	movs	r3, #0
}
   180ae:	0018      	movs	r0, r3
   180b0:	46bd      	mov	sp, r7
   180b2:	b002      	add	sp, #8
   180b4:	bd80      	pop	{r7, pc}
   180b6:	46c0      	nop			; (mov r8, r8)
   180b8:	40000400 	.word	0x40000400

000180bc <system_pinmux_get_config_defaults>:
{
   180bc:	b580      	push	{r7, lr}
   180be:	b082      	sub	sp, #8
   180c0:	af00      	add	r7, sp, #0
   180c2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   180c4:	687b      	ldr	r3, [r7, #4]
   180c6:	2280      	movs	r2, #128	; 0x80
   180c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   180ca:	687b      	ldr	r3, [r7, #4]
   180cc:	2200      	movs	r2, #0
   180ce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   180d0:	687b      	ldr	r3, [r7, #4]
   180d2:	2201      	movs	r2, #1
   180d4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   180d6:	687b      	ldr	r3, [r7, #4]
   180d8:	2200      	movs	r2, #0
   180da:	70da      	strb	r2, [r3, #3]
}
   180dc:	46c0      	nop			; (mov r8, r8)
   180de:	46bd      	mov	sp, r7
   180e0:	b002      	add	sp, #8
   180e2:	bd80      	pop	{r7, pc}

000180e4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   180e4:	b580      	push	{r7, lr}
   180e6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   180e8:	4b05      	ldr	r3, [pc, #20]	; (18100 <system_is_debugger_present+0x1c>)
   180ea:	789b      	ldrb	r3, [r3, #2]
   180ec:	b2db      	uxtb	r3, r3
   180ee:	001a      	movs	r2, r3
   180f0:	2302      	movs	r3, #2
   180f2:	4013      	ands	r3, r2
   180f4:	1e5a      	subs	r2, r3, #1
   180f6:	4193      	sbcs	r3, r2
   180f8:	b2db      	uxtb	r3, r3
}
   180fa:	0018      	movs	r0, r3
   180fc:	46bd      	mov	sp, r7
   180fe:	bd80      	pop	{r7, pc}
   18100:	41002000 	.word	0x41002000

00018104 <system_interrupt_enter_critical_section>:
{
   18104:	b580      	push	{r7, lr}
   18106:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   18108:	4b02      	ldr	r3, [pc, #8]	; (18114 <system_interrupt_enter_critical_section+0x10>)
   1810a:	4798      	blx	r3
}
   1810c:	46c0      	nop			; (mov r8, r8)
   1810e:	46bd      	mov	sp, r7
   18110:	bd80      	pop	{r7, pc}
   18112:	46c0      	nop			; (mov r8, r8)
   18114:	00026d19 	.word	0x00026d19

00018118 <system_interrupt_leave_critical_section>:
{
   18118:	b580      	push	{r7, lr}
   1811a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1811c:	4b02      	ldr	r3, [pc, #8]	; (18128 <system_interrupt_leave_critical_section+0x10>)
   1811e:	4798      	blx	r3
}
   18120:	46c0      	nop			; (mov r8, r8)
   18122:	46bd      	mov	sp, r7
   18124:	bd80      	pop	{r7, pc}
   18126:	46c0      	nop			; (mov r8, r8)
   18128:	00026d6d 	.word	0x00026d6d

0001812c <system_interrupt_disable>:
{
   1812c:	b580      	push	{r7, lr}
   1812e:	b082      	sub	sp, #8
   18130:	af00      	add	r7, sp, #0
   18132:	0002      	movs	r2, r0
   18134:	1dfb      	adds	r3, r7, #7
   18136:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   18138:	4a07      	ldr	r2, [pc, #28]	; (18158 <system_interrupt_disable+0x2c>)
   1813a:	1dfb      	adds	r3, r7, #7
   1813c:	781b      	ldrb	r3, [r3, #0]
   1813e:	0019      	movs	r1, r3
   18140:	231f      	movs	r3, #31
   18142:	400b      	ands	r3, r1
   18144:	2101      	movs	r1, #1
   18146:	4099      	lsls	r1, r3
   18148:	000b      	movs	r3, r1
   1814a:	0019      	movs	r1, r3
   1814c:	2380      	movs	r3, #128	; 0x80
   1814e:	50d1      	str	r1, [r2, r3]
}
   18150:	46c0      	nop			; (mov r8, r8)
   18152:	46bd      	mov	sp, r7
   18154:	b002      	add	sp, #8
   18156:	bd80      	pop	{r7, pc}
   18158:	e000e100 	.word	0xe000e100

0001815c <i2c_master_is_syncing>:
{
   1815c:	b580      	push	{r7, lr}
   1815e:	b084      	sub	sp, #16
   18160:	af00      	add	r7, sp, #0
   18162:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   18164:	687b      	ldr	r3, [r7, #4]
   18166:	681b      	ldr	r3, [r3, #0]
   18168:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1816a:	68fb      	ldr	r3, [r7, #12]
   1816c:	69db      	ldr	r3, [r3, #28]
   1816e:	2207      	movs	r2, #7
   18170:	4013      	ands	r3, r2
   18172:	1e5a      	subs	r2, r3, #1
   18174:	4193      	sbcs	r3, r2
   18176:	b2db      	uxtb	r3, r3
}
   18178:	0018      	movs	r0, r3
   1817a:	46bd      	mov	sp, r7
   1817c:	b004      	add	sp, #16
   1817e:	bd80      	pop	{r7, pc}

00018180 <_i2c_master_wait_for_sync>:
{
   18180:	b580      	push	{r7, lr}
   18182:	b082      	sub	sp, #8
   18184:	af00      	add	r7, sp, #0
   18186:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   18188:	46c0      	nop			; (mov r8, r8)
   1818a:	687b      	ldr	r3, [r7, #4]
   1818c:	0018      	movs	r0, r3
   1818e:	4b04      	ldr	r3, [pc, #16]	; (181a0 <_i2c_master_wait_for_sync+0x20>)
   18190:	4798      	blx	r3
   18192:	1e03      	subs	r3, r0, #0
   18194:	d1f9      	bne.n	1818a <_i2c_master_wait_for_sync+0xa>
}
   18196:	46c0      	nop			; (mov r8, r8)
   18198:	46bd      	mov	sp, r7
   1819a:	b002      	add	sp, #8
   1819c:	bd80      	pop	{r7, pc}
   1819e:	46c0      	nop			; (mov r8, r8)
   181a0:	0001815d 	.word	0x0001815d

000181a4 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   181a4:	b580      	push	{r7, lr}
   181a6:	b084      	sub	sp, #16
   181a8:	af00      	add	r7, sp, #0
   181aa:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   181ac:	687b      	ldr	r3, [r7, #4]
   181ae:	681b      	ldr	r3, [r3, #0]
   181b0:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   181b2:	687b      	ldr	r3, [r7, #4]
   181b4:	681b      	ldr	r3, [r3, #0]
   181b6:	0018      	movs	r0, r3
   181b8:	4b0d      	ldr	r3, [pc, #52]	; (181f0 <i2c_master_disable+0x4c>)
   181ba:	4798      	blx	r3
   181bc:	0003      	movs	r3, r0
   181be:	0018      	movs	r0, r3
   181c0:	4b0c      	ldr	r3, [pc, #48]	; (181f4 <i2c_master_disable+0x50>)
   181c2:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   181c4:	687b      	ldr	r3, [r7, #4]
   181c6:	0018      	movs	r0, r3
   181c8:	4b0b      	ldr	r3, [pc, #44]	; (181f8 <i2c_master_disable+0x54>)
   181ca:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   181cc:	68fb      	ldr	r3, [r7, #12]
   181ce:	2283      	movs	r2, #131	; 0x83
   181d0:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   181d2:	68fb      	ldr	r3, [r7, #12]
   181d4:	2283      	movs	r2, #131	; 0x83
   181d6:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   181d8:	68fb      	ldr	r3, [r7, #12]
   181da:	681b      	ldr	r3, [r3, #0]
   181dc:	2202      	movs	r2, #2
   181de:	4393      	bics	r3, r2
   181e0:	001a      	movs	r2, r3
   181e2:	68fb      	ldr	r3, [r7, #12]
   181e4:	601a      	str	r2, [r3, #0]

}
   181e6:	46c0      	nop			; (mov r8, r8)
   181e8:	46bd      	mov	sp, r7
   181ea:	b004      	add	sp, #16
   181ec:	bd80      	pop	{r7, pc}
   181ee:	46c0      	nop			; (mov r8, r8)
   181f0:	000281ed 	.word	0x000281ed
   181f4:	0001812d 	.word	0x0001812d
   181f8:	00018181 	.word	0x00018181

000181fc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   181fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   181fe:	b097      	sub	sp, #92	; 0x5c
   18200:	af00      	add	r7, sp, #0
   18202:	6178      	str	r0, [r7, #20]
   18204:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   18206:	2300      	movs	r3, #0
   18208:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   1820a:	2300      	movs	r3, #0
   1820c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   1820e:	2300      	movs	r3, #0
   18210:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   18212:	233b      	movs	r3, #59	; 0x3b
   18214:	2210      	movs	r2, #16
   18216:	4694      	mov	ip, r2
   18218:	44bc      	add	ip, r7
   1821a:	4463      	add	r3, ip
   1821c:	2200      	movs	r2, #0
   1821e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18220:	697b      	ldr	r3, [r7, #20]
   18222:	681b      	ldr	r3, [r3, #0]
   18224:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   18226:	697b      	ldr	r3, [r7, #20]
   18228:	681b      	ldr	r3, [r3, #0]
   1822a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   1822c:	2323      	movs	r3, #35	; 0x23
   1822e:	2210      	movs	r2, #16
   18230:	18ba      	adds	r2, r7, r2
   18232:	18d4      	adds	r4, r2, r3
   18234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18236:	0018      	movs	r0, r3
   18238:	4bc0      	ldr	r3, [pc, #768]	; (1853c <_i2c_master_set_config+0x340>)
   1823a:	4798      	blx	r3
   1823c:	0003      	movs	r3, r0
   1823e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   18240:	230c      	movs	r3, #12
   18242:	2210      	movs	r2, #16
   18244:	4694      	mov	ip, r2
   18246:	44bc      	add	ip, r7
   18248:	4463      	add	r3, ip
   1824a:	0018      	movs	r0, r3
   1824c:	4bbc      	ldr	r3, [pc, #752]	; (18540 <_i2c_master_set_config+0x344>)
   1824e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   18250:	693b      	ldr	r3, [r7, #16]
   18252:	69db      	ldr	r3, [r3, #28]
   18254:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   18256:	693b      	ldr	r3, [r7, #16]
   18258:	6a1b      	ldr	r3, [r3, #32]
   1825a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   1825c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1825e:	2b00      	cmp	r3, #0
   18260:	d106      	bne.n	18270 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   18262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18264:	2100      	movs	r1, #0
   18266:	0018      	movs	r0, r3
   18268:	4bb6      	ldr	r3, [pc, #728]	; (18544 <_i2c_master_set_config+0x348>)
   1826a:	4798      	blx	r3
   1826c:	0003      	movs	r3, r0
   1826e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   18270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18272:	b2da      	uxtb	r2, r3
   18274:	230c      	movs	r3, #12
   18276:	2110      	movs	r1, #16
   18278:	468c      	mov	ip, r1
   1827a:	44bc      	add	ip, r7
   1827c:	4463      	add	r3, ip
   1827e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   18280:	230c      	movs	r3, #12
   18282:	2210      	movs	r2, #16
   18284:	4694      	mov	ip, r2
   18286:	44bc      	add	ip, r7
   18288:	4463      	add	r3, ip
   1828a:	2202      	movs	r2, #2
   1828c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1828e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18290:	0c1b      	lsrs	r3, r3, #16
   18292:	b2db      	uxtb	r3, r3
   18294:	220c      	movs	r2, #12
   18296:	2110      	movs	r1, #16
   18298:	468c      	mov	ip, r1
   1829a:	44bc      	add	ip, r7
   1829c:	4462      	add	r2, ip
   1829e:	0011      	movs	r1, r2
   182a0:	0018      	movs	r0, r3
   182a2:	4ba9      	ldr	r3, [pc, #676]	; (18548 <_i2c_master_set_config+0x34c>)
   182a4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   182a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   182a8:	2b00      	cmp	r3, #0
   182aa:	d106      	bne.n	182ba <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   182ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   182ae:	2101      	movs	r1, #1
   182b0:	0018      	movs	r0, r3
   182b2:	4ba4      	ldr	r3, [pc, #656]	; (18544 <_i2c_master_set_config+0x348>)
   182b4:	4798      	blx	r3
   182b6:	0003      	movs	r3, r0
   182b8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   182ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   182bc:	b2da      	uxtb	r2, r3
   182be:	230c      	movs	r3, #12
   182c0:	2110      	movs	r1, #16
   182c2:	468c      	mov	ip, r1
   182c4:	44bc      	add	ip, r7
   182c6:	4463      	add	r3, ip
   182c8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   182ca:	230c      	movs	r3, #12
   182cc:	2210      	movs	r2, #16
   182ce:	4694      	mov	ip, r2
   182d0:	44bc      	add	ip, r7
   182d2:	4463      	add	r3, ip
   182d4:	2202      	movs	r2, #2
   182d6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   182d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   182da:	0c1b      	lsrs	r3, r3, #16
   182dc:	b2db      	uxtb	r3, r3
   182de:	220c      	movs	r2, #12
   182e0:	2110      	movs	r1, #16
   182e2:	468c      	mov	ip, r1
   182e4:	44bc      	add	ip, r7
   182e6:	4462      	add	r2, ip
   182e8:	0011      	movs	r1, r2
   182ea:	0018      	movs	r0, r3
   182ec:	4b96      	ldr	r3, [pc, #600]	; (18548 <_i2c_master_set_config+0x34c>)
   182ee:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   182f0:	693b      	ldr	r3, [r7, #16]
   182f2:	8a9a      	ldrh	r2, [r3, #20]
   182f4:	697b      	ldr	r3, [r7, #20]
   182f6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   182f8:	693b      	ldr	r3, [r7, #16]
   182fa:	8ada      	ldrh	r2, [r3, #22]
   182fc:	697b      	ldr	r3, [r7, #20]
   182fe:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   18300:	693b      	ldr	r3, [r7, #16]
   18302:	7e1b      	ldrb	r3, [r3, #24]
   18304:	2b00      	cmp	r3, #0
   18306:	d103      	bne.n	18310 <_i2c_master_set_config+0x114>
   18308:	4b90      	ldr	r3, [pc, #576]	; (1854c <_i2c_master_set_config+0x350>)
   1830a:	4798      	blx	r3
   1830c:	1e03      	subs	r3, r0, #0
   1830e:	d002      	beq.n	18316 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   18310:	2380      	movs	r3, #128	; 0x80
   18312:	657b      	str	r3, [r7, #84]	; 0x54
   18314:	e001      	b.n	1831a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   18316:	2300      	movs	r3, #0
   18318:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   1831a:	693b      	ldr	r3, [r7, #16]
   1831c:	691b      	ldr	r3, [r3, #16]
   1831e:	2b00      	cmp	r3, #0
   18320:	d004      	beq.n	1832c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   18322:	693b      	ldr	r3, [r7, #16]
   18324:	691b      	ldr	r3, [r3, #16]
   18326:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18328:	4313      	orrs	r3, r2
   1832a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   1832c:	693b      	ldr	r3, [r7, #16]
   1832e:	689b      	ldr	r3, [r3, #8]
   18330:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18332:	4313      	orrs	r3, r2
   18334:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   18336:	693b      	ldr	r3, [r7, #16]
   18338:	2224      	movs	r2, #36	; 0x24
   1833a:	5c9b      	ldrb	r3, [r3, r2]
   1833c:	2b00      	cmp	r3, #0
   1833e:	d004      	beq.n	1834a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   18340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18342:	2280      	movs	r2, #128	; 0x80
   18344:	05d2      	lsls	r2, r2, #23
   18346:	4313      	orrs	r3, r2
   18348:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   1834a:	693b      	ldr	r3, [r7, #16]
   1834c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1834e:	2b00      	cmp	r3, #0
   18350:	d004      	beq.n	1835c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   18352:	693b      	ldr	r3, [r7, #16]
   18354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18356:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18358:	4313      	orrs	r3, r2
   1835a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   1835c:	693b      	ldr	r3, [r7, #16]
   1835e:	222c      	movs	r2, #44	; 0x2c
   18360:	5c9b      	ldrb	r3, [r3, r2]
   18362:	2b00      	cmp	r3, #0
   18364:	d105      	bne.n	18372 <_i2c_master_set_config+0x176>
   18366:	693b      	ldr	r3, [r7, #16]
   18368:	689a      	ldr	r2, [r3, #8]
   1836a:	2380      	movs	r3, #128	; 0x80
   1836c:	049b      	lsls	r3, r3, #18
   1836e:	429a      	cmp	r2, r3
   18370:	d104      	bne.n	1837c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   18372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18374:	2280      	movs	r2, #128	; 0x80
   18376:	0512      	lsls	r2, r2, #20
   18378:	4313      	orrs	r3, r2
   1837a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   1837c:	693b      	ldr	r3, [r7, #16]
   1837e:	222d      	movs	r2, #45	; 0x2d
   18380:	5c9b      	ldrb	r3, [r3, r2]
   18382:	2b00      	cmp	r3, #0
   18384:	d004      	beq.n	18390 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   18386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18388:	2280      	movs	r2, #128	; 0x80
   1838a:	0412      	lsls	r2, r2, #16
   1838c:	4313      	orrs	r3, r2
   1838e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   18390:	693b      	ldr	r3, [r7, #16]
   18392:	222e      	movs	r2, #46	; 0x2e
   18394:	5c9b      	ldrb	r3, [r3, r2]
   18396:	2b00      	cmp	r3, #0
   18398:	d004      	beq.n	183a4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   1839a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1839c:	2280      	movs	r2, #128	; 0x80
   1839e:	03d2      	lsls	r2, r2, #15
   183a0:	4313      	orrs	r3, r2
   183a2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   183a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   183a6:	681a      	ldr	r2, [r3, #0]
   183a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   183aa:	431a      	orrs	r2, r3
   183ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   183ae:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   183b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   183b2:	2280      	movs	r2, #128	; 0x80
   183b4:	0052      	lsls	r2, r2, #1
   183b6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   183b8:	2323      	movs	r3, #35	; 0x23
   183ba:	2210      	movs	r2, #16
   183bc:	4694      	mov	ip, r2
   183be:	44bc      	add	ip, r7
   183c0:	4463      	add	r3, ip
   183c2:	781b      	ldrb	r3, [r3, #0]
   183c4:	3314      	adds	r3, #20
   183c6:	b2db      	uxtb	r3, r3
   183c8:	0018      	movs	r0, r3
   183ca:	4b61      	ldr	r3, [pc, #388]	; (18550 <_i2c_master_set_config+0x354>)
   183cc:	4798      	blx	r3
   183ce:	0003      	movs	r3, r0
   183d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   183d2:	693b      	ldr	r3, [r7, #16]
   183d4:	681b      	ldr	r3, [r3, #0]
   183d6:	22fa      	movs	r2, #250	; 0xfa
   183d8:	0092      	lsls	r2, r2, #2
   183da:	4353      	muls	r3, r2
   183dc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   183de:	693b      	ldr	r3, [r7, #16]
   183e0:	685b      	ldr	r3, [r3, #4]
   183e2:	22fa      	movs	r2, #250	; 0xfa
   183e4:	0092      	lsls	r2, r2, #2
   183e6:	4353      	muls	r3, r2
   183e8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   183ea:	693b      	ldr	r3, [r7, #16]
   183ec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   183ee:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   183f0:	4b58      	ldr	r3, [pc, #352]	; (18554 <_i2c_master_set_config+0x358>)
   183f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   183f4:	4798      	blx	r3
   183f6:	0005      	movs	r5, r0
   183f8:	000e      	movs	r6, r1
   183fa:	4b56      	ldr	r3, [pc, #344]	; (18554 <_i2c_master_set_config+0x358>)
   183fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   183fe:	4798      	blx	r3
   18400:	60b8      	str	r0, [r7, #8]
   18402:	60f9      	str	r1, [r7, #12]
   18404:	4b53      	ldr	r3, [pc, #332]	; (18554 <_i2c_master_set_config+0x358>)
   18406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18408:	4798      	blx	r3
   1840a:	4c53      	ldr	r4, [pc, #332]	; (18558 <_i2c_master_set_config+0x35c>)
   1840c:	4a53      	ldr	r2, [pc, #332]	; (1855c <_i2c_master_set_config+0x360>)
   1840e:	4b54      	ldr	r3, [pc, #336]	; (18560 <_i2c_master_set_config+0x364>)
   18410:	47a0      	blx	r4
   18412:	0003      	movs	r3, r0
   18414:	000c      	movs	r4, r1
   18416:	603b      	str	r3, [r7, #0]
   18418:	607c      	str	r4, [r7, #4]
   1841a:	4b4e      	ldr	r3, [pc, #312]	; (18554 <_i2c_master_set_config+0x358>)
   1841c:	6a38      	ldr	r0, [r7, #32]
   1841e:	4798      	blx	r3
   18420:	0002      	movs	r2, r0
   18422:	000b      	movs	r3, r1
   18424:	4c4c      	ldr	r4, [pc, #304]	; (18558 <_i2c_master_set_config+0x35c>)
   18426:	6838      	ldr	r0, [r7, #0]
   18428:	6879      	ldr	r1, [r7, #4]
   1842a:	47a0      	blx	r4
   1842c:	0003      	movs	r3, r0
   1842e:	000c      	movs	r4, r1
   18430:	0018      	movs	r0, r3
   18432:	0021      	movs	r1, r4
   18434:	4c4b      	ldr	r4, [pc, #300]	; (18564 <_i2c_master_set_config+0x368>)
   18436:	2200      	movs	r2, #0
   18438:	4b4b      	ldr	r3, [pc, #300]	; (18568 <_i2c_master_set_config+0x36c>)
   1843a:	47a0      	blx	r4
   1843c:	0003      	movs	r3, r0
   1843e:	000c      	movs	r4, r1
   18440:	001a      	movs	r2, r3
   18442:	0023      	movs	r3, r4
   18444:	4c44      	ldr	r4, [pc, #272]	; (18558 <_i2c_master_set_config+0x35c>)
   18446:	68b8      	ldr	r0, [r7, #8]
   18448:	68f9      	ldr	r1, [r7, #12]
   1844a:	47a0      	blx	r4
   1844c:	0003      	movs	r3, r0
   1844e:	000c      	movs	r4, r1
   18450:	001a      	movs	r2, r3
   18452:	0023      	movs	r3, r4
   18454:	4c45      	ldr	r4, [pc, #276]	; (1856c <_i2c_master_set_config+0x370>)
   18456:	0028      	movs	r0, r5
   18458:	0031      	movs	r1, r6
   1845a:	47a0      	blx	r4
   1845c:	0003      	movs	r3, r0
   1845e:	000c      	movs	r4, r1
   18460:	001d      	movs	r5, r3
   18462:	0026      	movs	r6, r4
   18464:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18466:	005a      	lsls	r2, r3, #1
   18468:	4b3a      	ldr	r3, [pc, #232]	; (18554 <_i2c_master_set_config+0x358>)
   1846a:	0010      	movs	r0, r2
   1846c:	4798      	blx	r3
   1846e:	0002      	movs	r2, r0
   18470:	000b      	movs	r3, r1
   18472:	4c3c      	ldr	r4, [pc, #240]	; (18564 <_i2c_master_set_config+0x368>)
   18474:	0028      	movs	r0, r5
   18476:	0031      	movs	r1, r6
   18478:	47a0      	blx	r4
   1847a:	0003      	movs	r3, r0
   1847c:	000c      	movs	r4, r1
   1847e:	0018      	movs	r0, r3
   18480:	0021      	movs	r1, r4
   18482:	4c3a      	ldr	r4, [pc, #232]	; (1856c <_i2c_master_set_config+0x370>)
   18484:	2200      	movs	r2, #0
   18486:	4b3a      	ldr	r3, [pc, #232]	; (18570 <_i2c_master_set_config+0x374>)
   18488:	47a0      	blx	r4
   1848a:	0003      	movs	r3, r0
   1848c:	000c      	movs	r4, r1
   1848e:	001d      	movs	r5, r3
   18490:	0026      	movs	r6, r4
   18492:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18494:	005a      	lsls	r2, r3, #1
   18496:	4b2f      	ldr	r3, [pc, #188]	; (18554 <_i2c_master_set_config+0x358>)
   18498:	0010      	movs	r0, r2
   1849a:	4798      	blx	r3
   1849c:	0002      	movs	r2, r0
   1849e:	000b      	movs	r3, r1
   184a0:	4c34      	ldr	r4, [pc, #208]	; (18574 <_i2c_master_set_config+0x378>)
   184a2:	0028      	movs	r0, r5
   184a4:	0031      	movs	r1, r6
   184a6:	47a0      	blx	r4
   184a8:	0003      	movs	r3, r0
   184aa:	000c      	movs	r4, r1
   184ac:	0019      	movs	r1, r3
   184ae:	0022      	movs	r2, r4
   184b0:	4b31      	ldr	r3, [pc, #196]	; (18578 <_i2c_master_set_config+0x37c>)
   184b2:	0008      	movs	r0, r1
   184b4:	0011      	movs	r1, r2
   184b6:	4798      	blx	r3
   184b8:	0003      	movs	r3, r0
   184ba:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   184bc:	693b      	ldr	r3, [r7, #16]
   184be:	689a      	ldr	r2, [r3, #8]
   184c0:	2380      	movs	r3, #128	; 0x80
   184c2:	049b      	lsls	r3, r3, #18
   184c4:	429a      	cmp	r2, r3
   184c6:	d16a      	bne.n	1859e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   184c8:	4b22      	ldr	r3, [pc, #136]	; (18554 <_i2c_master_set_config+0x358>)
   184ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   184cc:	4798      	blx	r3
   184ce:	4c25      	ldr	r4, [pc, #148]	; (18564 <_i2c_master_set_config+0x368>)
   184d0:	0002      	movs	r2, r0
   184d2:	000b      	movs	r3, r1
   184d4:	47a0      	blx	r4
   184d6:	0003      	movs	r3, r0
   184d8:	000c      	movs	r4, r1
   184da:	001d      	movs	r5, r3
   184dc:	0026      	movs	r6, r4
   184de:	4b1d      	ldr	r3, [pc, #116]	; (18554 <_i2c_master_set_config+0x358>)
   184e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   184e2:	4798      	blx	r3
   184e4:	4c1c      	ldr	r4, [pc, #112]	; (18558 <_i2c_master_set_config+0x35c>)
   184e6:	2200      	movs	r2, #0
   184e8:	4b24      	ldr	r3, [pc, #144]	; (1857c <_i2c_master_set_config+0x380>)
   184ea:	47a0      	blx	r4
   184ec:	0003      	movs	r3, r0
   184ee:	000c      	movs	r4, r1
   184f0:	001a      	movs	r2, r3
   184f2:	0023      	movs	r3, r4
   184f4:	4c1f      	ldr	r4, [pc, #124]	; (18574 <_i2c_master_set_config+0x378>)
   184f6:	0028      	movs	r0, r5
   184f8:	0031      	movs	r1, r6
   184fa:	47a0      	blx	r4
   184fc:	0003      	movs	r3, r0
   184fe:	000c      	movs	r4, r1
   18500:	0018      	movs	r0, r3
   18502:	0021      	movs	r1, r4
   18504:	4c19      	ldr	r4, [pc, #100]	; (1856c <_i2c_master_set_config+0x370>)
   18506:	2200      	movs	r2, #0
   18508:	4b19      	ldr	r3, [pc, #100]	; (18570 <_i2c_master_set_config+0x374>)
   1850a:	47a0      	blx	r4
   1850c:	0003      	movs	r3, r0
   1850e:	000c      	movs	r4, r1
   18510:	0019      	movs	r1, r3
   18512:	0022      	movs	r2, r4
   18514:	4b18      	ldr	r3, [pc, #96]	; (18578 <_i2c_master_set_config+0x37c>)
   18516:	0008      	movs	r0, r1
   18518:	0011      	movs	r1, r2
   1851a:	4798      	blx	r3
   1851c:	0003      	movs	r3, r0
   1851e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   18520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18522:	2b00      	cmp	r3, #0
   18524:	d02e      	beq.n	18584 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   18526:	4b16      	ldr	r3, [pc, #88]	; (18580 <_i2c_master_set_config+0x384>)
   18528:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1852a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1852c:	4798      	blx	r3
   1852e:	0003      	movs	r3, r0
   18530:	1e9a      	subs	r2, r3, #2
   18532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18534:	1ad3      	subs	r3, r2, r3
   18536:	653b      	str	r3, [r7, #80]	; 0x50
   18538:	e031      	b.n	1859e <_i2c_master_set_config+0x3a2>
   1853a:	46c0      	nop			; (mov r8, r8)
   1853c:	0002811d 	.word	0x0002811d
   18540:	000180bd 	.word	0x000180bd
   18544:	00027f61 	.word	0x00027f61
   18548:	0002ad0d 	.word	0x0002ad0d
   1854c:	000180e5 	.word	0x000180e5
   18550:	0002aad1 	.word	0x0002aad1
   18554:	000353e5 	.word	0x000353e5
   18558:	00034851 	.word	0x00034851
   1855c:	e826d695 	.word	0xe826d695
   18560:	3e112e0b 	.word	0x3e112e0b
   18564:	00033bc9 	.word	0x00033bc9
   18568:	40240000 	.word	0x40240000
   1856c:	00034d51 	.word	0x00034d51
   18570:	3ff00000 	.word	0x3ff00000
   18574:	000341e9 	.word	0x000341e9
   18578:	0003537d 	.word	0x0003537d
   1857c:	40080000 	.word	0x40080000
   18580:	00033569 	.word	0x00033569
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   18584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18586:	005a      	lsls	r2, r3, #1
   18588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1858a:	18d3      	adds	r3, r2, r3
   1858c:	1e5a      	subs	r2, r3, #1
   1858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18590:	0059      	lsls	r1, r3, #1
   18592:	4b1d      	ldr	r3, [pc, #116]	; (18608 <_i2c_master_set_config+0x40c>)
   18594:	0010      	movs	r0, r2
   18596:	4798      	blx	r3
   18598:	0003      	movs	r3, r0
   1859a:	3b01      	subs	r3, #1
   1859c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   1859e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   185a0:	2bff      	cmp	r3, #255	; 0xff
   185a2:	dc08      	bgt.n	185b6 <_i2c_master_set_config+0x3ba>
   185a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   185a6:	2b00      	cmp	r3, #0
   185a8:	db05      	blt.n	185b6 <_i2c_master_set_config+0x3ba>
   185aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   185ac:	2bff      	cmp	r3, #255	; 0xff
   185ae:	dc02      	bgt.n	185b6 <_i2c_master_set_config+0x3ba>
   185b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   185b2:	2b00      	cmp	r3, #0
   185b4:	da06      	bge.n	185c4 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   185b6:	233b      	movs	r3, #59	; 0x3b
   185b8:	2210      	movs	r2, #16
   185ba:	4694      	mov	ip, r2
   185bc:	44bc      	add	ip, r7
   185be:	4463      	add	r3, ip
   185c0:	2240      	movs	r2, #64	; 0x40
   185c2:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   185c4:	233b      	movs	r3, #59	; 0x3b
   185c6:	2210      	movs	r2, #16
   185c8:	4694      	mov	ip, r2
   185ca:	44bc      	add	ip, r7
   185cc:	4463      	add	r3, ip
   185ce:	781b      	ldrb	r3, [r3, #0]
   185d0:	2b40      	cmp	r3, #64	; 0x40
   185d2:	d00e      	beq.n	185f2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   185d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   185d6:	22ff      	movs	r2, #255	; 0xff
   185d8:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   185da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   185dc:	041b      	lsls	r3, r3, #16
   185de:	0019      	movs	r1, r3
   185e0:	23ff      	movs	r3, #255	; 0xff
   185e2:	041b      	lsls	r3, r3, #16
   185e4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   185e6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   185e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   185ea:	0612      	lsls	r2, r2, #24
   185ec:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   185ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   185f0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   185f2:	233b      	movs	r3, #59	; 0x3b
   185f4:	2210      	movs	r2, #16
   185f6:	4694      	mov	ip, r2
   185f8:	44bc      	add	ip, r7
   185fa:	4463      	add	r3, ip
   185fc:	781b      	ldrb	r3, [r3, #0]
}
   185fe:	0018      	movs	r0, r3
   18600:	46bd      	mov	sp, r7
   18602:	b017      	add	sp, #92	; 0x5c
   18604:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18606:	46c0      	nop			; (mov r8, r8)
   18608:	00033569 	.word	0x00033569

0001860c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   1860c:	b590      	push	{r4, r7, lr}
   1860e:	b08b      	sub	sp, #44	; 0x2c
   18610:	af00      	add	r7, sp, #0
   18612:	60f8      	str	r0, [r7, #12]
   18614:	60b9      	str	r1, [r7, #8]
   18616:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   18618:	68fb      	ldr	r3, [r7, #12]
   1861a:	68ba      	ldr	r2, [r7, #8]
   1861c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1861e:	68fb      	ldr	r3, [r7, #12]
   18620:	681b      	ldr	r3, [r3, #0]
   18622:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   18624:	68fb      	ldr	r3, [r7, #12]
   18626:	681b      	ldr	r3, [r3, #0]
   18628:	0018      	movs	r0, r3
   1862a:	4b3b      	ldr	r3, [pc, #236]	; (18718 <i2c_master_init+0x10c>)
   1862c:	4798      	blx	r3
   1862e:	0003      	movs	r3, r0
   18630:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   18632:	6a3b      	ldr	r3, [r7, #32]
   18634:	3302      	adds	r3, #2
   18636:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   18638:	6a3b      	ldr	r3, [r7, #32]
   1863a:	3314      	adds	r3, #20
   1863c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1863e:	2201      	movs	r2, #1
   18640:	69fb      	ldr	r3, [r7, #28]
   18642:	409a      	lsls	r2, r3
   18644:	0013      	movs	r3, r2
   18646:	0019      	movs	r1, r3
   18648:	2002      	movs	r0, #2
   1864a:	4b34      	ldr	r3, [pc, #208]	; (1871c <i2c_master_init+0x110>)
   1864c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1864e:	2314      	movs	r3, #20
   18650:	18fb      	adds	r3, r7, r3
   18652:	0018      	movs	r0, r3
   18654:	4b32      	ldr	r3, [pc, #200]	; (18720 <i2c_master_init+0x114>)
   18656:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   18658:	687b      	ldr	r3, [r7, #4]
   1865a:	7b1a      	ldrb	r2, [r3, #12]
   1865c:	2314      	movs	r3, #20
   1865e:	18fb      	adds	r3, r7, r3
   18660:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   18662:	69bb      	ldr	r3, [r7, #24]
   18664:	b2db      	uxtb	r3, r3
   18666:	2214      	movs	r2, #20
   18668:	18ba      	adds	r2, r7, r2
   1866a:	0011      	movs	r1, r2
   1866c:	0018      	movs	r0, r3
   1866e:	4b2d      	ldr	r3, [pc, #180]	; (18724 <i2c_master_init+0x118>)
   18670:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   18672:	69bb      	ldr	r3, [r7, #24]
   18674:	b2db      	uxtb	r3, r3
   18676:	0018      	movs	r0, r3
   18678:	4b2b      	ldr	r3, [pc, #172]	; (18728 <i2c_master_init+0x11c>)
   1867a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1867c:	687b      	ldr	r3, [r7, #4]
   1867e:	7b1b      	ldrb	r3, [r3, #12]
   18680:	2100      	movs	r1, #0
   18682:	0018      	movs	r0, r3
   18684:	4b29      	ldr	r3, [pc, #164]	; (1872c <i2c_master_init+0x120>)
   18686:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   18688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1868a:	681b      	ldr	r3, [r3, #0]
   1868c:	2202      	movs	r2, #2
   1868e:	4013      	ands	r3, r2
   18690:	d001      	beq.n	18696 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   18692:	231c      	movs	r3, #28
   18694:	e03b      	b.n	1870e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   18696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18698:	681b      	ldr	r3, [r3, #0]
   1869a:	2201      	movs	r2, #1
   1869c:	4013      	ands	r3, r2
   1869e:	d001      	beq.n	186a4 <i2c_master_init+0x98>
		return STATUS_BUSY;
   186a0:	2305      	movs	r3, #5
   186a2:	e034      	b.n	1870e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   186a4:	68fb      	ldr	r3, [r7, #12]
   186a6:	681b      	ldr	r3, [r3, #0]
   186a8:	2217      	movs	r2, #23
   186aa:	18bc      	adds	r4, r7, r2
   186ac:	0018      	movs	r0, r3
   186ae:	4b1a      	ldr	r3, [pc, #104]	; (18718 <i2c_master_init+0x10c>)
   186b0:	4798      	blx	r3
   186b2:	0003      	movs	r3, r0
   186b4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   186b6:	4a1e      	ldr	r2, [pc, #120]	; (18730 <i2c_master_init+0x124>)
   186b8:	2317      	movs	r3, #23
   186ba:	18fb      	adds	r3, r7, r3
   186bc:	781b      	ldrb	r3, [r3, #0]
   186be:	0011      	movs	r1, r2
   186c0:	0018      	movs	r0, r3
   186c2:	4b1c      	ldr	r3, [pc, #112]	; (18734 <i2c_master_init+0x128>)
   186c4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   186c6:	2317      	movs	r3, #23
   186c8:	18fb      	adds	r3, r7, r3
   186ca:	781a      	ldrb	r2, [r3, #0]
   186cc:	4b1a      	ldr	r3, [pc, #104]	; (18738 <i2c_master_init+0x12c>)
   186ce:	0092      	lsls	r2, r2, #2
   186d0:	68f9      	ldr	r1, [r7, #12]
   186d2:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   186d4:	68fb      	ldr	r3, [r7, #12]
   186d6:	2200      	movs	r2, #0
   186d8:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   186da:	68fb      	ldr	r3, [r7, #12]
   186dc:	2200      	movs	r2, #0
   186de:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   186e0:	68fb      	ldr	r3, [r7, #12]
   186e2:	2200      	movs	r2, #0
   186e4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   186e6:	68fb      	ldr	r3, [r7, #12]
   186e8:	2200      	movs	r2, #0
   186ea:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   186ec:	68fb      	ldr	r3, [r7, #12]
   186ee:	2225      	movs	r2, #37	; 0x25
   186f0:	2100      	movs	r1, #0
   186f2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   186f4:	68fb      	ldr	r3, [r7, #12]
   186f6:	2200      	movs	r2, #0
   186f8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   186fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   186fc:	2214      	movs	r2, #20
   186fe:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   18700:	687a      	ldr	r2, [r7, #4]
   18702:	68fb      	ldr	r3, [r7, #12]
   18704:	0011      	movs	r1, r2
   18706:	0018      	movs	r0, r3
   18708:	4b0c      	ldr	r3, [pc, #48]	; (1873c <i2c_master_init+0x130>)
   1870a:	4798      	blx	r3
   1870c:	0003      	movs	r3, r0
}
   1870e:	0018      	movs	r0, r3
   18710:	46bd      	mov	sp, r7
   18712:	b00b      	add	sp, #44	; 0x2c
   18714:	bd90      	pop	{r4, r7, pc}
   18716:	46c0      	nop			; (mov r8, r8)
   18718:	0002811d 	.word	0x0002811d
   1871c:	00018061 	.word	0x00018061
   18720:	00018049 	.word	0x00018049
   18724:	0002a9ad 	.word	0x0002a9ad
   18728:	0002a9f1 	.word	0x0002a9f1
   1872c:	00027ed5 	.word	0x00027ed5
   18730:	00013825 	.word	0x00013825
   18734:	00028181 	.word	0x00028181
   18738:	20005838 	.word	0x20005838
   1873c:	000181fd 	.word	0x000181fd

00018740 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   18740:	b580      	push	{r7, lr}
   18742:	b084      	sub	sp, #16
   18744:	af00      	add	r7, sp, #0
   18746:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18748:	687b      	ldr	r3, [r7, #4]
   1874a:	681b      	ldr	r3, [r3, #0]
   1874c:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1874e:	687b      	ldr	r3, [r7, #4]
   18750:	0018      	movs	r0, r3
   18752:	4b0f      	ldr	r3, [pc, #60]	; (18790 <i2c_master_reset+0x50>)
   18754:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   18756:	687b      	ldr	r3, [r7, #4]
   18758:	0018      	movs	r0, r3
   1875a:	4b0e      	ldr	r3, [pc, #56]	; (18794 <i2c_master_reset+0x54>)
   1875c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1875e:	4b0e      	ldr	r3, [pc, #56]	; (18798 <i2c_master_reset+0x58>)
   18760:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   18762:	687b      	ldr	r3, [r7, #4]
   18764:	681b      	ldr	r3, [r3, #0]
   18766:	0018      	movs	r0, r3
   18768:	4b0c      	ldr	r3, [pc, #48]	; (1879c <i2c_master_reset+0x5c>)
   1876a:	4798      	blx	r3
   1876c:	0003      	movs	r3, r0
   1876e:	0018      	movs	r0, r3
   18770:	4b0b      	ldr	r3, [pc, #44]	; (187a0 <i2c_master_reset+0x60>)
   18772:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   18774:	4b0b      	ldr	r3, [pc, #44]	; (187a4 <i2c_master_reset+0x64>)
   18776:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   18778:	687b      	ldr	r3, [r7, #4]
   1877a:	0018      	movs	r0, r3
   1877c:	4b04      	ldr	r3, [pc, #16]	; (18790 <i2c_master_reset+0x50>)
   1877e:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   18780:	68fb      	ldr	r3, [r7, #12]
   18782:	2201      	movs	r2, #1
   18784:	601a      	str	r2, [r3, #0]
}
   18786:	46c0      	nop			; (mov r8, r8)
   18788:	46bd      	mov	sp, r7
   1878a:	b004      	add	sp, #16
   1878c:	bd80      	pop	{r7, pc}
   1878e:	46c0      	nop			; (mov r8, r8)
   18790:	00018181 	.word	0x00018181
   18794:	000181a5 	.word	0x000181a5
   18798:	00018105 	.word	0x00018105
   1879c:	000281ed 	.word	0x000281ed
   187a0:	0002ab29 	.word	0x0002ab29
   187a4:	00018119 	.word	0x00018119

000187a8 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   187a8:	b580      	push	{r7, lr}
   187aa:	b084      	sub	sp, #16
   187ac:	af00      	add	r7, sp, #0
   187ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   187b0:	687b      	ldr	r3, [r7, #4]
   187b2:	681b      	ldr	r3, [r3, #0]
   187b4:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   187b6:	68fb      	ldr	r3, [r7, #12]
   187b8:	7e1b      	ldrb	r3, [r3, #24]
   187ba:	b2db      	uxtb	r3, r3
   187bc:	001a      	movs	r2, r3
   187be:	2302      	movs	r3, #2
   187c0:	4013      	ands	r3, r2
   187c2:	d00b      	beq.n	187dc <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   187c4:	68fb      	ldr	r3, [r7, #12]
   187c6:	2202      	movs	r2, #2
   187c8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   187ca:	68fb      	ldr	r3, [r7, #12]
   187cc:	8b5b      	ldrh	r3, [r3, #26]
   187ce:	b29b      	uxth	r3, r3
   187d0:	001a      	movs	r2, r3
   187d2:	2302      	movs	r3, #2
   187d4:	4013      	ands	r3, r2
   187d6:	d011      	beq.n	187fc <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   187d8:	2341      	movs	r3, #65	; 0x41
   187da:	e010      	b.n	187fe <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   187dc:	68fb      	ldr	r3, [r7, #12]
   187de:	8b5b      	ldrh	r3, [r3, #26]
   187e0:	b29b      	uxth	r3, r3
   187e2:	001a      	movs	r2, r3
   187e4:	2304      	movs	r3, #4
   187e6:	4013      	ands	r3, r2
   187e8:	d008      	beq.n	187fc <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   187ea:	68fb      	ldr	r3, [r7, #12]
   187ec:	685b      	ldr	r3, [r3, #4]
   187ee:	22c0      	movs	r2, #192	; 0xc0
   187f0:	0292      	lsls	r2, r2, #10
   187f2:	431a      	orrs	r2, r3
   187f4:	68fb      	ldr	r3, [r7, #12]
   187f6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   187f8:	2318      	movs	r3, #24
   187fa:	e000      	b.n	187fe <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   187fc:	2300      	movs	r3, #0
}
   187fe:	0018      	movs	r0, r3
   18800:	46bd      	mov	sp, r7
   18802:	b004      	add	sp, #16
   18804:	bd80      	pop	{r7, pc}

00018806 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   18806:	b580      	push	{r7, lr}
   18808:	b084      	sub	sp, #16
   1880a:	af00      	add	r7, sp, #0
   1880c:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1880e:	687b      	ldr	r3, [r7, #4]
   18810:	681b      	ldr	r3, [r3, #0]
   18812:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   18814:	230e      	movs	r3, #14
   18816:	18fb      	adds	r3, r7, r3
   18818:	2200      	movs	r2, #0
   1881a:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1881c:	e00f      	b.n	1883e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   1881e:	230e      	movs	r3, #14
   18820:	18fb      	adds	r3, r7, r3
   18822:	220e      	movs	r2, #14
   18824:	18ba      	adds	r2, r7, r2
   18826:	8812      	ldrh	r2, [r2, #0]
   18828:	3201      	adds	r2, #1
   1882a:	801a      	strh	r2, [r3, #0]
   1882c:	687b      	ldr	r3, [r7, #4]
   1882e:	891b      	ldrh	r3, [r3, #8]
   18830:	220e      	movs	r2, #14
   18832:	18ba      	adds	r2, r7, r2
   18834:	8812      	ldrh	r2, [r2, #0]
   18836:	429a      	cmp	r2, r3
   18838:	d301      	bcc.n	1883e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   1883a:	2312      	movs	r3, #18
   1883c:	e00e      	b.n	1885c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1883e:	68bb      	ldr	r3, [r7, #8]
   18840:	7e1b      	ldrb	r3, [r3, #24]
   18842:	b2db      	uxtb	r3, r3
   18844:	001a      	movs	r2, r3
   18846:	2301      	movs	r3, #1
   18848:	4013      	ands	r3, r2
   1884a:	d106      	bne.n	1885a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1884c:	68bb      	ldr	r3, [r7, #8]
   1884e:	7e1b      	ldrb	r3, [r3, #24]
   18850:	b2db      	uxtb	r3, r3
   18852:	001a      	movs	r2, r3
   18854:	2302      	movs	r3, #2
   18856:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18858:	d0e1      	beq.n	1881e <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   1885a:	2300      	movs	r3, #0
}
   1885c:	0018      	movs	r0, r3
   1885e:	46bd      	mov	sp, r7
   18860:	b004      	add	sp, #16
   18862:	bd80      	pop	{r7, pc}

00018864 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   18864:	b590      	push	{r4, r7, lr}
   18866:	b085      	sub	sp, #20
   18868:	af00      	add	r7, sp, #0
   1886a:	6078      	str	r0, [r7, #4]
   1886c:	000a      	movs	r2, r1
   1886e:	1cfb      	adds	r3, r7, #3
   18870:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18872:	687b      	ldr	r3, [r7, #4]
   18874:	681b      	ldr	r3, [r3, #0]
   18876:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   18878:	68fb      	ldr	r3, [r7, #12]
   1887a:	685b      	ldr	r3, [r3, #4]
   1887c:	2280      	movs	r2, #128	; 0x80
   1887e:	02d2      	lsls	r2, r2, #11
   18880:	431a      	orrs	r2, r3
   18882:	68fb      	ldr	r3, [r7, #12]
   18884:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   18886:	1cfb      	adds	r3, r7, #3
   18888:	781a      	ldrb	r2, [r3, #0]
   1888a:	68fb      	ldr	r3, [r7, #12]
   1888c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1888e:	230b      	movs	r3, #11
   18890:	18fc      	adds	r4, r7, r3
   18892:	687b      	ldr	r3, [r7, #4]
   18894:	0018      	movs	r0, r3
   18896:	4b07      	ldr	r3, [pc, #28]	; (188b4 <_i2c_master_send_hs_master_code+0x50>)
   18898:	4798      	blx	r3
   1889a:	0003      	movs	r3, r0
   1889c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   1889e:	68fb      	ldr	r3, [r7, #12]
   188a0:	2201      	movs	r2, #1
   188a2:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   188a4:	230b      	movs	r3, #11
   188a6:	18fb      	adds	r3, r7, r3
   188a8:	781b      	ldrb	r3, [r3, #0]
}
   188aa:	0018      	movs	r0, r3
   188ac:	46bd      	mov	sp, r7
   188ae:	b005      	add	sp, #20
   188b0:	bd90      	pop	{r4, r7, pc}
   188b2:	46c0      	nop			; (mov r8, r8)
   188b4:	00018807 	.word	0x00018807

000188b8 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   188b8:	b580      	push	{r7, lr}
   188ba:	af00      	add	r7, sp, #0
   188bc:	2000      	movs	r0, #0
   188be:	4b02      	ldr	r3, [pc, #8]	; (188c8 <TC3_Handler+0x10>)
   188c0:	4798      	blx	r3
   188c2:	46c0      	nop			; (mov r8, r8)
   188c4:	46bd      	mov	sp, r7
   188c6:	bd80      	pop	{r7, pc}
   188c8:	000188f5 	.word	0x000188f5

000188cc <TC4_Handler>:
   188cc:	b580      	push	{r7, lr}
   188ce:	af00      	add	r7, sp, #0
   188d0:	2001      	movs	r0, #1
   188d2:	4b02      	ldr	r3, [pc, #8]	; (188dc <TC4_Handler+0x10>)
   188d4:	4798      	blx	r3
   188d6:	46c0      	nop			; (mov r8, r8)
   188d8:	46bd      	mov	sp, r7
   188da:	bd80      	pop	{r7, pc}
   188dc:	000188f5 	.word	0x000188f5

000188e0 <TC5_Handler>:
   188e0:	b580      	push	{r7, lr}
   188e2:	af00      	add	r7, sp, #0
   188e4:	2002      	movs	r0, #2
   188e6:	4b02      	ldr	r3, [pc, #8]	; (188f0 <TC5_Handler+0x10>)
   188e8:	4798      	blx	r3
   188ea:	46c0      	nop			; (mov r8, r8)
   188ec:	46bd      	mov	sp, r7
   188ee:	bd80      	pop	{r7, pc}
   188f0:	000188f5 	.word	0x000188f5

000188f4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   188f4:	b580      	push	{r7, lr}
   188f6:	b084      	sub	sp, #16
   188f8:	af00      	add	r7, sp, #0
   188fa:	0002      	movs	r2, r0
   188fc:	1dfb      	adds	r3, r7, #7
   188fe:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   18900:	1dfb      	adds	r3, r7, #7
   18902:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   18904:	4b28      	ldr	r3, [pc, #160]	; (189a8 <_tc_interrupt_handler+0xb4>)
   18906:	0092      	lsls	r2, r2, #2
   18908:	58d3      	ldr	r3, [r2, r3]
   1890a:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1890c:	68fb      	ldr	r3, [r7, #12]
   1890e:	681b      	ldr	r3, [r3, #0]
   18910:	7b9b      	ldrb	r3, [r3, #14]
   18912:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   18914:	68fa      	ldr	r2, [r7, #12]
   18916:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18918:	4013      	ands	r3, r2
   1891a:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   1891c:	68fb      	ldr	r3, [r7, #12]
   1891e:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18920:	230b      	movs	r3, #11
   18922:	18fb      	adds	r3, r7, r3
   18924:	400a      	ands	r2, r1
   18926:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   18928:	230b      	movs	r3, #11
   1892a:	18fb      	adds	r3, r7, r3
   1892c:	781b      	ldrb	r3, [r3, #0]
   1892e:	2201      	movs	r2, #1
   18930:	4013      	ands	r3, r2
   18932:	d008      	beq.n	18946 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   18934:	68fb      	ldr	r3, [r7, #12]
   18936:	689b      	ldr	r3, [r3, #8]
   18938:	68fa      	ldr	r2, [r7, #12]
   1893a:	0010      	movs	r0, r2
   1893c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1893e:	68fb      	ldr	r3, [r7, #12]
   18940:	681b      	ldr	r3, [r3, #0]
   18942:	2201      	movs	r2, #1
   18944:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   18946:	230b      	movs	r3, #11
   18948:	18fb      	adds	r3, r7, r3
   1894a:	781b      	ldrb	r3, [r3, #0]
   1894c:	2202      	movs	r2, #2
   1894e:	4013      	ands	r3, r2
   18950:	d008      	beq.n	18964 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   18952:	68fb      	ldr	r3, [r7, #12]
   18954:	68db      	ldr	r3, [r3, #12]
   18956:	68fa      	ldr	r2, [r7, #12]
   18958:	0010      	movs	r0, r2
   1895a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   1895c:	68fb      	ldr	r3, [r7, #12]
   1895e:	681b      	ldr	r3, [r3, #0]
   18960:	2202      	movs	r2, #2
   18962:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   18964:	230b      	movs	r3, #11
   18966:	18fb      	adds	r3, r7, r3
   18968:	781b      	ldrb	r3, [r3, #0]
   1896a:	2210      	movs	r2, #16
   1896c:	4013      	ands	r3, r2
   1896e:	d008      	beq.n	18982 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   18970:	68fb      	ldr	r3, [r7, #12]
   18972:	691b      	ldr	r3, [r3, #16]
   18974:	68fa      	ldr	r2, [r7, #12]
   18976:	0010      	movs	r0, r2
   18978:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1897a:	68fb      	ldr	r3, [r7, #12]
   1897c:	681b      	ldr	r3, [r3, #0]
   1897e:	2210      	movs	r2, #16
   18980:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   18982:	230b      	movs	r3, #11
   18984:	18fb      	adds	r3, r7, r3
   18986:	781b      	ldrb	r3, [r3, #0]
   18988:	2220      	movs	r2, #32
   1898a:	4013      	ands	r3, r2
   1898c:	d008      	beq.n	189a0 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1898e:	68fb      	ldr	r3, [r7, #12]
   18990:	695b      	ldr	r3, [r3, #20]
   18992:	68fa      	ldr	r2, [r7, #12]
   18994:	0010      	movs	r0, r2
   18996:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   18998:	68fb      	ldr	r3, [r7, #12]
   1899a:	681b      	ldr	r3, [r3, #0]
   1899c:	2220      	movs	r2, #32
   1899e:	739a      	strb	r2, [r3, #14]
	}
}
   189a0:	46c0      	nop			; (mov r8, r8)
   189a2:	46bd      	mov	sp, r7
   189a4:	b004      	add	sp, #16
   189a6:	bd80      	pop	{r7, pc}
   189a8:	20004620 	.word	0x20004620

000189ac <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   189ac:	b580      	push	{r7, lr}
   189ae:	b084      	sub	sp, #16
   189b0:	af00      	add	r7, sp, #0
   189b2:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   189b4:	2300      	movs	r3, #0
   189b6:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   189b8:	687b      	ldr	r3, [r7, #4]
   189ba:	2b00      	cmp	r3, #0
   189bc:	d101      	bne.n	189c2 <FreeRTOS_CLIRegisterCommand+0x16>
   189be:	b672      	cpsid	i
   189c0:	e7fe      	b.n	189c0 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   189c2:	2008      	movs	r0, #8
   189c4:	4b11      	ldr	r3, [pc, #68]	; (18a0c <FreeRTOS_CLIRegisterCommand+0x60>)
   189c6:	4798      	blx	r3
   189c8:	0003      	movs	r3, r0
   189ca:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   189cc:	68bb      	ldr	r3, [r7, #8]
   189ce:	2b00      	cmp	r3, #0
   189d0:	d101      	bne.n	189d6 <FreeRTOS_CLIRegisterCommand+0x2a>
   189d2:	b672      	cpsid	i
   189d4:	e7fe      	b.n	189d4 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   189d6:	68bb      	ldr	r3, [r7, #8]
   189d8:	2b00      	cmp	r3, #0
   189da:	d012      	beq.n	18a02 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   189dc:	4b0c      	ldr	r3, [pc, #48]	; (18a10 <FreeRTOS_CLIRegisterCommand+0x64>)
   189de:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   189e0:	68bb      	ldr	r3, [r7, #8]
   189e2:	687a      	ldr	r2, [r7, #4]
   189e4:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   189e6:	68bb      	ldr	r3, [r7, #8]
   189e8:	2200      	movs	r2, #0
   189ea:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   189ec:	4b09      	ldr	r3, [pc, #36]	; (18a14 <FreeRTOS_CLIRegisterCommand+0x68>)
   189ee:	681b      	ldr	r3, [r3, #0]
   189f0:	68ba      	ldr	r2, [r7, #8]
   189f2:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   189f4:	4b07      	ldr	r3, [pc, #28]	; (18a14 <FreeRTOS_CLIRegisterCommand+0x68>)
   189f6:	68ba      	ldr	r2, [r7, #8]
   189f8:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   189fa:	4b07      	ldr	r3, [pc, #28]	; (18a18 <FreeRTOS_CLIRegisterCommand+0x6c>)
   189fc:	4798      	blx	r3

		xReturn = pdPASS;
   189fe:	2301      	movs	r3, #1
   18a00:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   18a02:	68fb      	ldr	r3, [r7, #12]
}
   18a04:	0018      	movs	r0, r3
   18a06:	46bd      	mov	sp, r7
   18a08:	b004      	add	sp, #16
   18a0a:	bd80      	pop	{r7, pc}
   18a0c:	0001adc1 	.word	0x0001adc1
   18a10:	0001ac89 	.word	0x0001ac89
   18a14:	200000f4 	.word	0x200000f4
   18a18:	0001acad 	.word	0x0001acad

00018a1c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   18a1c:	b580      	push	{r7, lr}
   18a1e:	b088      	sub	sp, #32
   18a20:	af00      	add	r7, sp, #0
   18a22:	60f8      	str	r0, [r7, #12]
   18a24:	60b9      	str	r1, [r7, #8]
   18a26:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   18a28:	2301      	movs	r3, #1
   18a2a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   18a2c:	4b3d      	ldr	r3, [pc, #244]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18a2e:	681b      	ldr	r3, [r3, #0]
   18a30:	2b00      	cmp	r3, #0
   18a32:	d144      	bne.n	18abe <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18a34:	4b3b      	ldr	r3, [pc, #236]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18a36:	4a3c      	ldr	r2, [pc, #240]	; (18b28 <FreeRTOS_CLIProcessCommand+0x10c>)
   18a38:	601a      	str	r2, [r3, #0]
   18a3a:	e03a      	b.n	18ab2 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   18a3c:	4b39      	ldr	r3, [pc, #228]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18a3e:	681b      	ldr	r3, [r3, #0]
   18a40:	681b      	ldr	r3, [r3, #0]
   18a42:	681b      	ldr	r3, [r3, #0]
   18a44:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   18a46:	69bb      	ldr	r3, [r7, #24]
   18a48:	0018      	movs	r0, r3
   18a4a:	4b38      	ldr	r3, [pc, #224]	; (18b2c <FreeRTOS_CLIProcessCommand+0x110>)
   18a4c:	4798      	blx	r3
   18a4e:	0003      	movs	r3, r0
   18a50:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   18a52:	68fa      	ldr	r2, [r7, #12]
   18a54:	697b      	ldr	r3, [r7, #20]
   18a56:	18d3      	adds	r3, r2, r3
   18a58:	781b      	ldrb	r3, [r3, #0]
   18a5a:	2b20      	cmp	r3, #32
   18a5c:	d005      	beq.n	18a6a <FreeRTOS_CLIProcessCommand+0x4e>
   18a5e:	68fa      	ldr	r2, [r7, #12]
   18a60:	697b      	ldr	r3, [r7, #20]
   18a62:	18d3      	adds	r3, r2, r3
   18a64:	781b      	ldrb	r3, [r3, #0]
   18a66:	2b00      	cmp	r3, #0
   18a68:	d11e      	bne.n	18aa8 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   18a6a:	697a      	ldr	r2, [r7, #20]
   18a6c:	69b9      	ldr	r1, [r7, #24]
   18a6e:	68fb      	ldr	r3, [r7, #12]
   18a70:	0018      	movs	r0, r3
   18a72:	4b2f      	ldr	r3, [pc, #188]	; (18b30 <FreeRTOS_CLIProcessCommand+0x114>)
   18a74:	4798      	blx	r3
   18a76:	1e03      	subs	r3, r0, #0
   18a78:	d116      	bne.n	18aa8 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   18a7a:	4b2a      	ldr	r3, [pc, #168]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18a7c:	681b      	ldr	r3, [r3, #0]
   18a7e:	681b      	ldr	r3, [r3, #0]
   18a80:	7b1b      	ldrb	r3, [r3, #12]
   18a82:	b25b      	sxtb	r3, r3
   18a84:	2b00      	cmp	r3, #0
   18a86:	db19      	blt.n	18abc <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   18a88:	68fb      	ldr	r3, [r7, #12]
   18a8a:	0018      	movs	r0, r3
   18a8c:	4b29      	ldr	r3, [pc, #164]	; (18b34 <FreeRTOS_CLIProcessCommand+0x118>)
   18a8e:	4798      	blx	r3
   18a90:	0003      	movs	r3, r0
   18a92:	001a      	movs	r2, r3
   18a94:	4b23      	ldr	r3, [pc, #140]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18a96:	681b      	ldr	r3, [r3, #0]
   18a98:	681b      	ldr	r3, [r3, #0]
   18a9a:	7b1b      	ldrb	r3, [r3, #12]
   18a9c:	b25b      	sxtb	r3, r3
   18a9e:	429a      	cmp	r2, r3
   18aa0:	d00c      	beq.n	18abc <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   18aa2:	2300      	movs	r3, #0
   18aa4:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   18aa6:	e009      	b.n	18abc <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18aa8:	4b1e      	ldr	r3, [pc, #120]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18aaa:	681b      	ldr	r3, [r3, #0]
   18aac:	685a      	ldr	r2, [r3, #4]
   18aae:	4b1d      	ldr	r3, [pc, #116]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18ab0:	601a      	str	r2, [r3, #0]
   18ab2:	4b1c      	ldr	r3, [pc, #112]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18ab4:	681b      	ldr	r3, [r3, #0]
   18ab6:	2b00      	cmp	r3, #0
   18ab8:	d1c0      	bne.n	18a3c <FreeRTOS_CLIProcessCommand+0x20>
   18aba:	e000      	b.n	18abe <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   18abc:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   18abe:	4b19      	ldr	r3, [pc, #100]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18ac0:	681b      	ldr	r3, [r3, #0]
   18ac2:	2b00      	cmp	r3, #0
   18ac4:	d00c      	beq.n	18ae0 <FreeRTOS_CLIProcessCommand+0xc4>
   18ac6:	69fb      	ldr	r3, [r7, #28]
   18ac8:	2b00      	cmp	r3, #0
   18aca:	d109      	bne.n	18ae0 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18acc:	687a      	ldr	r2, [r7, #4]
   18ace:	491a      	ldr	r1, [pc, #104]	; (18b38 <FreeRTOS_CLIProcessCommand+0x11c>)
   18ad0:	68bb      	ldr	r3, [r7, #8]
   18ad2:	0018      	movs	r0, r3
   18ad4:	4b19      	ldr	r3, [pc, #100]	; (18b3c <FreeRTOS_CLIProcessCommand+0x120>)
   18ad6:	4798      	blx	r3
		pxCommand = NULL;
   18ad8:	4b12      	ldr	r3, [pc, #72]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18ada:	2200      	movs	r2, #0
   18adc:	601a      	str	r2, [r3, #0]
   18ade:	e01c      	b.n	18b1a <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   18ae0:	4b10      	ldr	r3, [pc, #64]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18ae2:	681b      	ldr	r3, [r3, #0]
   18ae4:	2b00      	cmp	r3, #0
   18ae6:	d010      	beq.n	18b0a <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   18ae8:	4b0e      	ldr	r3, [pc, #56]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18aea:	681b      	ldr	r3, [r3, #0]
   18aec:	681b      	ldr	r3, [r3, #0]
   18aee:	689b      	ldr	r3, [r3, #8]
   18af0:	68fa      	ldr	r2, [r7, #12]
   18af2:	6879      	ldr	r1, [r7, #4]
   18af4:	68b8      	ldr	r0, [r7, #8]
   18af6:	4798      	blx	r3
   18af8:	0003      	movs	r3, r0
   18afa:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   18afc:	69fb      	ldr	r3, [r7, #28]
   18afe:	2b00      	cmp	r3, #0
   18b00:	d10b      	bne.n	18b1a <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   18b02:	4b08      	ldr	r3, [pc, #32]	; (18b24 <FreeRTOS_CLIProcessCommand+0x108>)
   18b04:	2200      	movs	r2, #0
   18b06:	601a      	str	r2, [r3, #0]
   18b08:	e007      	b.n	18b1a <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18b0a:	687a      	ldr	r2, [r7, #4]
   18b0c:	490c      	ldr	r1, [pc, #48]	; (18b40 <FreeRTOS_CLIProcessCommand+0x124>)
   18b0e:	68bb      	ldr	r3, [r7, #8]
   18b10:	0018      	movs	r0, r3
   18b12:	4b0a      	ldr	r3, [pc, #40]	; (18b3c <FreeRTOS_CLIProcessCommand+0x120>)
   18b14:	4798      	blx	r3
		xReturn = pdFALSE;
   18b16:	2300      	movs	r3, #0
   18b18:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   18b1a:	69fb      	ldr	r3, [r7, #28]
}
   18b1c:	0018      	movs	r0, r3
   18b1e:	46bd      	mov	sp, r7
   18b20:	b008      	add	sp, #32
   18b22:	bd80      	pop	{r7, pc}
   18b24:	20000cf4 	.word	0x20000cf4
   18b28:	200000ec 	.word	0x200000ec
   18b2c:	000358fb 	.word	0x000358fb
   18b30:	00035909 	.word	0x00035909
   18b34:	00018ba5 	.word	0x00018ba5
   18b38:	000378e8 	.word	0x000378e8
   18b3c:	0003592b 	.word	0x0003592b
   18b40:	00037940 	.word	0x00037940

00018b44 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   18b44:	b580      	push	{r7, lr}
   18b46:	b086      	sub	sp, #24
   18b48:	af00      	add	r7, sp, #0
   18b4a:	60f8      	str	r0, [r7, #12]
   18b4c:	60b9      	str	r1, [r7, #8]
   18b4e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   18b50:	4b11      	ldr	r3, [pc, #68]	; (18b98 <prvHelpCommand+0x54>)
   18b52:	681b      	ldr	r3, [r3, #0]
   18b54:	2b00      	cmp	r3, #0
   18b56:	d102      	bne.n	18b5e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   18b58:	4b0f      	ldr	r3, [pc, #60]	; (18b98 <prvHelpCommand+0x54>)
   18b5a:	4a10      	ldr	r2, [pc, #64]	; (18b9c <prvHelpCommand+0x58>)
   18b5c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   18b5e:	4b0e      	ldr	r3, [pc, #56]	; (18b98 <prvHelpCommand+0x54>)
   18b60:	681b      	ldr	r3, [r3, #0]
   18b62:	681b      	ldr	r3, [r3, #0]
   18b64:	6859      	ldr	r1, [r3, #4]
   18b66:	68ba      	ldr	r2, [r7, #8]
   18b68:	68fb      	ldr	r3, [r7, #12]
   18b6a:	0018      	movs	r0, r3
   18b6c:	4b0c      	ldr	r3, [pc, #48]	; (18ba0 <prvHelpCommand+0x5c>)
   18b6e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   18b70:	4b09      	ldr	r3, [pc, #36]	; (18b98 <prvHelpCommand+0x54>)
   18b72:	681b      	ldr	r3, [r3, #0]
   18b74:	685a      	ldr	r2, [r3, #4]
   18b76:	4b08      	ldr	r3, [pc, #32]	; (18b98 <prvHelpCommand+0x54>)
   18b78:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   18b7a:	4b07      	ldr	r3, [pc, #28]	; (18b98 <prvHelpCommand+0x54>)
   18b7c:	681b      	ldr	r3, [r3, #0]
   18b7e:	2b00      	cmp	r3, #0
   18b80:	d102      	bne.n	18b88 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   18b82:	2300      	movs	r3, #0
   18b84:	617b      	str	r3, [r7, #20]
   18b86:	e001      	b.n	18b8c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   18b88:	2301      	movs	r3, #1
   18b8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   18b8c:	697b      	ldr	r3, [r7, #20]
}
   18b8e:	0018      	movs	r0, r3
   18b90:	46bd      	mov	sp, r7
   18b92:	b006      	add	sp, #24
   18b94:	bd80      	pop	{r7, pc}
   18b96:	46c0      	nop			; (mov r8, r8)
   18b98:	20000cf8 	.word	0x20000cf8
   18b9c:	200000ec 	.word	0x200000ec
   18ba0:	0003592b 	.word	0x0003592b

00018ba4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   18ba4:	b580      	push	{r7, lr}
   18ba6:	b084      	sub	sp, #16
   18ba8:	af00      	add	r7, sp, #0
   18baa:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   18bac:	230f      	movs	r3, #15
   18bae:	18fb      	adds	r3, r7, r3
   18bb0:	2200      	movs	r2, #0
   18bb2:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   18bb4:	2300      	movs	r3, #0
   18bb6:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   18bb8:	e018      	b.n	18bec <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   18bba:	687b      	ldr	r3, [r7, #4]
   18bbc:	781b      	ldrb	r3, [r3, #0]
   18bbe:	2b20      	cmp	r3, #32
   18bc0:	d10f      	bne.n	18be2 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   18bc2:	68bb      	ldr	r3, [r7, #8]
   18bc4:	2b01      	cmp	r3, #1
   18bc6:	d00e      	beq.n	18be6 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   18bc8:	230f      	movs	r3, #15
   18bca:	18fb      	adds	r3, r7, r3
   18bcc:	781b      	ldrb	r3, [r3, #0]
   18bce:	b25b      	sxtb	r3, r3
   18bd0:	b2db      	uxtb	r3, r3
   18bd2:	3301      	adds	r3, #1
   18bd4:	b2da      	uxtb	r2, r3
   18bd6:	230f      	movs	r3, #15
   18bd8:	18fb      	adds	r3, r7, r3
   18bda:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   18bdc:	2301      	movs	r3, #1
   18bde:	60bb      	str	r3, [r7, #8]
   18be0:	e001      	b.n	18be6 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   18be2:	2300      	movs	r3, #0
   18be4:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   18be6:	687b      	ldr	r3, [r7, #4]
   18be8:	3301      	adds	r3, #1
   18bea:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18bec:	687b      	ldr	r3, [r7, #4]
   18bee:	781b      	ldrb	r3, [r3, #0]
   18bf0:	2b00      	cmp	r3, #0
   18bf2:	d1e2      	bne.n	18bba <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   18bf4:	68bb      	ldr	r3, [r7, #8]
   18bf6:	2b01      	cmp	r3, #1
   18bf8:	d109      	bne.n	18c0e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   18bfa:	230f      	movs	r3, #15
   18bfc:	18fb      	adds	r3, r7, r3
   18bfe:	781b      	ldrb	r3, [r3, #0]
   18c00:	b25b      	sxtb	r3, r3
   18c02:	b2db      	uxtb	r3, r3
   18c04:	3b01      	subs	r3, #1
   18c06:	b2da      	uxtb	r2, r3
   18c08:	230f      	movs	r3, #15
   18c0a:	18fb      	adds	r3, r7, r3
   18c0c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   18c0e:	230f      	movs	r3, #15
   18c10:	18fb      	adds	r3, r7, r3
   18c12:	781b      	ldrb	r3, [r3, #0]
   18c14:	b25b      	sxtb	r3, r3
}
   18c16:	0018      	movs	r0, r3
   18c18:	46bd      	mov	sp, r7
   18c1a:	b004      	add	sp, #16
   18c1c:	bd80      	pop	{r7, pc}
	...

00018c20 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   18c20:	b580      	push	{r7, lr}
   18c22:	b082      	sub	sp, #8
   18c24:	af00      	add	r7, sp, #0
   18c26:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   18c28:	687b      	ldr	r3, [r7, #4]
   18c2a:	0018      	movs	r0, r3
   18c2c:	4b03      	ldr	r3, [pc, #12]	; (18c3c <prvTraceGetQueueNumber+0x1c>)
   18c2e:	4798      	blx	r3
   18c30:	0003      	movs	r3, r0
}
   18c32:	0018      	movs	r0, r3
   18c34:	46bd      	mov	sp, r7
   18c36:	b002      	add	sp, #8
   18c38:	bd80      	pop	{r7, pc}
   18c3a:	46c0      	nop			; (mov r8, r8)
   18c3c:	0001c3e9 	.word	0x0001c3e9

00018c40 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   18c40:	b580      	push	{r7, lr}
   18c42:	b082      	sub	sp, #8
   18c44:	af00      	add	r7, sp, #0
   18c46:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   18c48:	687b      	ldr	r3, [r7, #4]
   18c4a:	0018      	movs	r0, r3
   18c4c:	4b03      	ldr	r3, [pc, #12]	; (18c5c <prvTraceGetQueueType+0x1c>)
   18c4e:	4798      	blx	r3
   18c50:	0003      	movs	r3, r0
}
   18c52:	0018      	movs	r0, r3
   18c54:	46bd      	mov	sp, r7
   18c56:	b002      	add	sp, #8
   18c58:	bd80      	pop	{r7, pc}
   18c5a:	46c0      	nop			; (mov r8, r8)
   18c5c:	0001c415 	.word	0x0001c415

00018c60 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   18c60:	b580      	push	{r7, lr}
   18c62:	b082      	sub	sp, #8
   18c64:	af00      	add	r7, sp, #0
   18c66:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   18c68:	687b      	ldr	r3, [r7, #4]
   18c6a:	0018      	movs	r0, r3
   18c6c:	4b03      	ldr	r3, [pc, #12]	; (18c7c <prvTraceGetTaskNumberLow16+0x1c>)
   18c6e:	4798      	blx	r3
   18c70:	0003      	movs	r3, r0
   18c72:	b29b      	uxth	r3, r3
}
   18c74:	0018      	movs	r0, r3
   18c76:	46bd      	mov	sp, r7
   18c78:	b002      	add	sp, #8
   18c7a:	bd80      	pop	{r7, pc}
   18c7c:	0001d745 	.word	0x0001d745

00018c80 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   18c80:	b580      	push	{r7, lr}
   18c82:	b082      	sub	sp, #8
   18c84:	af00      	add	r7, sp, #0
   18c86:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   18c88:	687b      	ldr	r3, [r7, #4]
   18c8a:	0018      	movs	r0, r3
   18c8c:	4b04      	ldr	r3, [pc, #16]	; (18ca0 <prvTraceGetTaskNumberHigh16+0x20>)
   18c8e:	4798      	blx	r3
   18c90:	0003      	movs	r3, r0
   18c92:	0c1b      	lsrs	r3, r3, #16
   18c94:	b29b      	uxth	r3, r3
}
   18c96:	0018      	movs	r0, r3
   18c98:	46bd      	mov	sp, r7
   18c9a:	b002      	add	sp, #8
   18c9c:	bd80      	pop	{r7, pc}
   18c9e:	46c0      	nop			; (mov r8, r8)
   18ca0:	0001d745 	.word	0x0001d745

00018ca4 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   18ca4:	b580      	push	{r7, lr}
   18ca6:	b082      	sub	sp, #8
   18ca8:	af00      	add	r7, sp, #0
   18caa:	6078      	str	r0, [r7, #4]
   18cac:	000a      	movs	r2, r1
   18cae:	1cbb      	adds	r3, r7, #2
   18cb0:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   18cb2:	687b      	ldr	r3, [r7, #4]
   18cb4:	0018      	movs	r0, r3
   18cb6:	4b08      	ldr	r3, [pc, #32]	; (18cd8 <prvTraceSetTaskNumberLow16+0x34>)
   18cb8:	4798      	blx	r3
   18cba:	0003      	movs	r3, r0
   18cbc:	0c1b      	lsrs	r3, r3, #16
   18cbe:	041a      	lsls	r2, r3, #16
   18cc0:	1cbb      	adds	r3, r7, #2
   18cc2:	881b      	ldrh	r3, [r3, #0]
   18cc4:	431a      	orrs	r2, r3
   18cc6:	687b      	ldr	r3, [r7, #4]
   18cc8:	0011      	movs	r1, r2
   18cca:	0018      	movs	r0, r3
   18ccc:	4b03      	ldr	r3, [pc, #12]	; (18cdc <prvTraceSetTaskNumberLow16+0x38>)
   18cce:	4798      	blx	r3
}
   18cd0:	46c0      	nop			; (mov r8, r8)
   18cd2:	46bd      	mov	sp, r7
   18cd4:	b002      	add	sp, #8
   18cd6:	bd80      	pop	{r7, pc}
   18cd8:	0001d745 	.word	0x0001d745
   18cdc:	0001d76d 	.word	0x0001d76d

00018ce0 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   18ce0:	b580      	push	{r7, lr}
   18ce2:	b082      	sub	sp, #8
   18ce4:	af00      	add	r7, sp, #0
   18ce6:	6078      	str	r0, [r7, #4]
   18ce8:	000a      	movs	r2, r1
   18cea:	1cbb      	adds	r3, r7, #2
   18cec:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   18cee:	687b      	ldr	r3, [r7, #4]
   18cf0:	0018      	movs	r0, r3
   18cf2:	4b09      	ldr	r3, [pc, #36]	; (18d18 <prvTraceSetTaskNumberHigh16+0x38>)
   18cf4:	4798      	blx	r3
   18cf6:	0003      	movs	r3, r0
   18cf8:	041b      	lsls	r3, r3, #16
   18cfa:	0c1a      	lsrs	r2, r3, #16
   18cfc:	1cbb      	adds	r3, r7, #2
   18cfe:	881b      	ldrh	r3, [r3, #0]
   18d00:	041b      	lsls	r3, r3, #16
   18d02:	431a      	orrs	r2, r3
   18d04:	687b      	ldr	r3, [r7, #4]
   18d06:	0011      	movs	r1, r2
   18d08:	0018      	movs	r0, r3
   18d0a:	4b04      	ldr	r3, [pc, #16]	; (18d1c <prvTraceSetTaskNumberHigh16+0x3c>)
   18d0c:	4798      	blx	r3
}
   18d0e:	46c0      	nop			; (mov r8, r8)
   18d10:	46bd      	mov	sp, r7
   18d12:	b002      	add	sp, #8
   18d14:	bd80      	pop	{r7, pc}
   18d16:	46c0      	nop			; (mov r8, r8)
   18d18:	0001d745 	.word	0x0001d745
   18d1c:	0001d76d 	.word	0x0001d76d

00018d20 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   18d20:	b580      	push	{r7, lr}
   18d22:	b082      	sub	sp, #8
   18d24:	af00      	add	r7, sp, #0
   18d26:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   18d28:	687b      	ldr	r3, [r7, #4]
   18d2a:	0018      	movs	r0, r3
   18d2c:	4b03      	ldr	r3, [pc, #12]	; (18d3c <prvTraceGetQueueNumberLow16+0x1c>)
   18d2e:	4798      	blx	r3
   18d30:	0003      	movs	r3, r0
   18d32:	b29b      	uxth	r3, r3
}
   18d34:	0018      	movs	r0, r3
   18d36:	46bd      	mov	sp, r7
   18d38:	b002      	add	sp, #8
   18d3a:	bd80      	pop	{r7, pc}
   18d3c:	00018c21 	.word	0x00018c21

00018d40 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   18d40:	b580      	push	{r7, lr}
   18d42:	b082      	sub	sp, #8
   18d44:	af00      	add	r7, sp, #0
   18d46:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   18d48:	687b      	ldr	r3, [r7, #4]
   18d4a:	0018      	movs	r0, r3
   18d4c:	4b04      	ldr	r3, [pc, #16]	; (18d60 <prvTraceGetQueueNumberHigh16+0x20>)
   18d4e:	4798      	blx	r3
   18d50:	0003      	movs	r3, r0
   18d52:	0c1b      	lsrs	r3, r3, #16
   18d54:	b29b      	uxth	r3, r3
}
   18d56:	0018      	movs	r0, r3
   18d58:	46bd      	mov	sp, r7
   18d5a:	b002      	add	sp, #8
   18d5c:	bd80      	pop	{r7, pc}
   18d5e:	46c0      	nop			; (mov r8, r8)
   18d60:	00018c21 	.word	0x00018c21

00018d64 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   18d64:	b580      	push	{r7, lr}
   18d66:	b082      	sub	sp, #8
   18d68:	af00      	add	r7, sp, #0
   18d6a:	6078      	str	r0, [r7, #4]
   18d6c:	000a      	movs	r2, r1
   18d6e:	1cbb      	adds	r3, r7, #2
   18d70:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   18d72:	687b      	ldr	r3, [r7, #4]
   18d74:	0018      	movs	r0, r3
   18d76:	4b08      	ldr	r3, [pc, #32]	; (18d98 <prvTraceSetQueueNumberLow16+0x34>)
   18d78:	4798      	blx	r3
   18d7a:	0003      	movs	r3, r0
   18d7c:	0c1b      	lsrs	r3, r3, #16
   18d7e:	041a      	lsls	r2, r3, #16
   18d80:	1cbb      	adds	r3, r7, #2
   18d82:	881b      	ldrh	r3, [r3, #0]
   18d84:	431a      	orrs	r2, r3
   18d86:	687b      	ldr	r3, [r7, #4]
   18d88:	0011      	movs	r1, r2
   18d8a:	0018      	movs	r0, r3
   18d8c:	4b03      	ldr	r3, [pc, #12]	; (18d9c <prvTraceSetQueueNumberLow16+0x38>)
   18d8e:	4798      	blx	r3
}
   18d90:	46c0      	nop			; (mov r8, r8)
   18d92:	46bd      	mov	sp, r7
   18d94:	b002      	add	sp, #8
   18d96:	bd80      	pop	{r7, pc}
   18d98:	00018c21 	.word	0x00018c21
   18d9c:	0001c3fd 	.word	0x0001c3fd

00018da0 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   18da0:	b580      	push	{r7, lr}
   18da2:	b082      	sub	sp, #8
   18da4:	af00      	add	r7, sp, #0
   18da6:	6078      	str	r0, [r7, #4]
   18da8:	000a      	movs	r2, r1
   18daa:	1cbb      	adds	r3, r7, #2
   18dac:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   18dae:	687b      	ldr	r3, [r7, #4]
   18db0:	0018      	movs	r0, r3
   18db2:	4b09      	ldr	r3, [pc, #36]	; (18dd8 <prvTraceSetQueueNumberHigh16+0x38>)
   18db4:	4798      	blx	r3
   18db6:	0003      	movs	r3, r0
   18db8:	041b      	lsls	r3, r3, #16
   18dba:	0c1a      	lsrs	r2, r3, #16
   18dbc:	1cbb      	adds	r3, r7, #2
   18dbe:	881b      	ldrh	r3, [r3, #0]
   18dc0:	041b      	lsls	r3, r3, #16
   18dc2:	431a      	orrs	r2, r3
   18dc4:	687b      	ldr	r3, [r7, #4]
   18dc6:	0011      	movs	r1, r2
   18dc8:	0018      	movs	r0, r3
   18dca:	4b04      	ldr	r3, [pc, #16]	; (18ddc <prvTraceSetQueueNumberHigh16+0x3c>)
   18dcc:	4798      	blx	r3
}
   18dce:	46c0      	nop			; (mov r8, r8)
   18dd0:	46bd      	mov	sp, r7
   18dd2:	b002      	add	sp, #8
   18dd4:	bd80      	pop	{r7, pc}
   18dd6:	46c0      	nop			; (mov r8, r8)
   18dd8:	00018c21 	.word	0x00018c21
   18ddc:	0001c3fd 	.word	0x0001c3fd

00018de0 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   18de0:	b580      	push	{r7, lr}
   18de2:	b084      	sub	sp, #16
   18de4:	af00      	add	r7, sp, #0
   18de6:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   18de8:	2300      	movs	r3, #0
   18dea:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18dec:	2300      	movs	r3, #0
   18dee:	60bb      	str	r3, [r7, #8]
   18df0:	e018      	b.n	18e24 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   18df2:	4b14      	ldr	r3, [pc, #80]	; (18e44 <prvAddTaskToStackMonitor+0x64>)
   18df4:	68ba      	ldr	r2, [r7, #8]
   18df6:	00d2      	lsls	r2, r2, #3
   18df8:	58d3      	ldr	r3, [r2, r3]
   18dfa:	2b00      	cmp	r3, #0
   18dfc:	d10f      	bne.n	18e1e <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   18dfe:	4b11      	ldr	r3, [pc, #68]	; (18e44 <prvAddTaskToStackMonitor+0x64>)
   18e00:	68ba      	ldr	r2, [r7, #8]
   18e02:	00d2      	lsls	r2, r2, #3
   18e04:	6879      	ldr	r1, [r7, #4]
   18e06:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   18e08:	4a0e      	ldr	r2, [pc, #56]	; (18e44 <prvAddTaskToStackMonitor+0x64>)
   18e0a:	68bb      	ldr	r3, [r7, #8]
   18e0c:	00db      	lsls	r3, r3, #3
   18e0e:	18d3      	adds	r3, r2, r3
   18e10:	3304      	adds	r3, #4
   18e12:	2201      	movs	r2, #1
   18e14:	4252      	negs	r2, r2
   18e16:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   18e18:	2301      	movs	r3, #1
   18e1a:	60fb      	str	r3, [r7, #12]
			break;
   18e1c:	e005      	b.n	18e2a <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18e1e:	68bb      	ldr	r3, [r7, #8]
   18e20:	3301      	adds	r3, #1
   18e22:	60bb      	str	r3, [r7, #8]
   18e24:	68bb      	ldr	r3, [r7, #8]
   18e26:	2b09      	cmp	r3, #9
   18e28:	dde3      	ble.n	18df2 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   18e2a:	68fb      	ldr	r3, [r7, #12]
   18e2c:	2b00      	cmp	r3, #0
   18e2e:	d104      	bne.n	18e3a <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   18e30:	4b05      	ldr	r3, [pc, #20]	; (18e48 <prvAddTaskToStackMonitor+0x68>)
   18e32:	681b      	ldr	r3, [r3, #0]
   18e34:	1c5a      	adds	r2, r3, #1
   18e36:	4b04      	ldr	r3, [pc, #16]	; (18e48 <prvAddTaskToStackMonitor+0x68>)
   18e38:	601a      	str	r2, [r3, #0]
	}
}
   18e3a:	46c0      	nop			; (mov r8, r8)
   18e3c:	46bd      	mov	sp, r7
   18e3e:	b004      	add	sp, #16
   18e40:	bd80      	pop	{r7, pc}
   18e42:	46c0      	nop			; (mov r8, r8)
   18e44:	20000d00 	.word	0x20000d00
   18e48:	20000d50 	.word	0x20000d50

00018e4c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   18e4c:	b590      	push	{r4, r7, lr}
   18e4e:	b085      	sub	sp, #20
   18e50:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   18e52:	2300      	movs	r3, #0
   18e54:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   18e56:	4b2b      	ldr	r3, [pc, #172]	; (18f04 <prvReportStackUsage+0xb8>)
   18e58:	681b      	ldr	r3, [r3, #0]
   18e5a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   18e5c:	4b29      	ldr	r3, [pc, #164]	; (18f04 <prvReportStackUsage+0xb8>)
   18e5e:	681a      	ldr	r2, [r3, #0]
   18e60:	4b29      	ldr	r3, [pc, #164]	; (18f08 <prvReportStackUsage+0xbc>)
   18e62:	00d2      	lsls	r2, r2, #3
   18e64:	58d3      	ldr	r3, [r2, r3]
   18e66:	2b00      	cmp	r3, #0
   18e68:	d035      	beq.n	18ed6 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   18e6a:	4b26      	ldr	r3, [pc, #152]	; (18f04 <prvReportStackUsage+0xb8>)
   18e6c:	681a      	ldr	r2, [r3, #0]
   18e6e:	4b26      	ldr	r3, [pc, #152]	; (18f08 <prvReportStackUsage+0xbc>)
   18e70:	00d2      	lsls	r2, r2, #3
   18e72:	58d3      	ldr	r3, [r2, r3]
   18e74:	0018      	movs	r0, r3
   18e76:	4b25      	ldr	r3, [pc, #148]	; (18f0c <prvReportStackUsage+0xc0>)
   18e78:	4798      	blx	r3
   18e7a:	0003      	movs	r3, r0
   18e7c:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   18e7e:	4b21      	ldr	r3, [pc, #132]	; (18f04 <prvReportStackUsage+0xb8>)
   18e80:	681b      	ldr	r3, [r3, #0]
   18e82:	4a21      	ldr	r2, [pc, #132]	; (18f08 <prvReportStackUsage+0xbc>)
   18e84:	00db      	lsls	r3, r3, #3
   18e86:	18d3      	adds	r3, r2, r3
   18e88:	3304      	adds	r3, #4
   18e8a:	681a      	ldr	r2, [r3, #0]
   18e8c:	687b      	ldr	r3, [r7, #4]
   18e8e:	429a      	cmp	r2, r3
   18e90:	d907      	bls.n	18ea2 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   18e92:	4b1c      	ldr	r3, [pc, #112]	; (18f04 <prvReportStackUsage+0xb8>)
   18e94:	681b      	ldr	r3, [r3, #0]
   18e96:	4a1c      	ldr	r2, [pc, #112]	; (18f08 <prvReportStackUsage+0xbc>)
   18e98:	00db      	lsls	r3, r3, #3
   18e9a:	18d3      	adds	r3, r2, r3
   18e9c:	3304      	adds	r3, #4
   18e9e:	687a      	ldr	r2, [r7, #4]
   18ea0:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   18ea2:	4b18      	ldr	r3, [pc, #96]	; (18f04 <prvReportStackUsage+0xb8>)
   18ea4:	681a      	ldr	r2, [r3, #0]
   18ea6:	4b18      	ldr	r3, [pc, #96]	; (18f08 <prvReportStackUsage+0xbc>)
   18ea8:	00d2      	lsls	r2, r2, #3
   18eaa:	58d3      	ldr	r3, [r2, r3]
   18eac:	0018      	movs	r0, r3
   18eae:	4b18      	ldr	r3, [pc, #96]	; (18f10 <prvReportStackUsage+0xc4>)
   18eb0:	4798      	blx	r3
   18eb2:	0003      	movs	r3, r0
   18eb4:	b2db      	uxtb	r3, r3
   18eb6:	0019      	movs	r1, r3
   18eb8:	4b12      	ldr	r3, [pc, #72]	; (18f04 <prvReportStackUsage+0xb8>)
   18eba:	681b      	ldr	r3, [r3, #0]
   18ebc:	4a12      	ldr	r2, [pc, #72]	; (18f08 <prvReportStackUsage+0xbc>)
   18ebe:	00db      	lsls	r3, r3, #3
   18ec0:	18d3      	adds	r3, r2, r3
   18ec2:	3304      	adds	r3, #4
   18ec4:	681b      	ldr	r3, [r3, #0]
   18ec6:	000a      	movs	r2, r1
   18ec8:	2103      	movs	r1, #3
   18eca:	20ea      	movs	r0, #234	; 0xea
   18ecc:	4c11      	ldr	r4, [pc, #68]	; (18f14 <prvReportStackUsage+0xc8>)
   18ece:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   18ed0:	68fb      	ldr	r3, [r7, #12]
   18ed2:	3301      	adds	r3, #1
   18ed4:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   18ed6:	4b0b      	ldr	r3, [pc, #44]	; (18f04 <prvReportStackUsage+0xb8>)
   18ed8:	681b      	ldr	r3, [r3, #0]
   18eda:	1c5a      	adds	r2, r3, #1
   18edc:	4b0e      	ldr	r3, [pc, #56]	; (18f18 <prvReportStackUsage+0xcc>)
   18ede:	210a      	movs	r1, #10
   18ee0:	0010      	movs	r0, r2
   18ee2:	4798      	blx	r3
   18ee4:	000b      	movs	r3, r1
   18ee6:	001a      	movs	r2, r3
   18ee8:	4b06      	ldr	r3, [pc, #24]	; (18f04 <prvReportStackUsage+0xb8>)
   18eea:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   18eec:	68fb      	ldr	r3, [r7, #12]
   18eee:	2b00      	cmp	r3, #0
   18ef0:	dc04      	bgt.n	18efc <prvReportStackUsage+0xb0>
   18ef2:	4b04      	ldr	r3, [pc, #16]	; (18f04 <prvReportStackUsage+0xb8>)
   18ef4:	681a      	ldr	r2, [r3, #0]
   18ef6:	68bb      	ldr	r3, [r7, #8]
   18ef8:	429a      	cmp	r2, r3
   18efa:	d1af      	bne.n	18e5c <prvReportStackUsage+0x10>
}
   18efc:	46c0      	nop			; (mov r8, r8)
   18efe:	46bd      	mov	sp, r7
   18f00:	b005      	add	sp, #20
   18f02:	bd90      	pop	{r4, r7, pc}
   18f04:	20000d54 	.word	0x20000d54
   18f08:	20000d00 	.word	0x20000d00
   18f0c:	0001d8e5 	.word	0x0001d8e5
   18f10:	00018c61 	.word	0x00018c61
   18f14:	000197a9 	.word	0x000197a9
   18f18:	00033849 	.word	0x00033849

00018f1c <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   18f1c:	b580      	push	{r7, lr}
   18f1e:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   18f20:	4b02      	ldr	r3, [pc, #8]	; (18f2c <prvTraceGetCurrentTaskHandle+0x10>)
   18f22:	4798      	blx	r3
   18f24:	0003      	movs	r3, r0
}
   18f26:	0018      	movs	r0, r3
   18f28:	46bd      	mov	sp, r7
   18f2a:	bd80      	pop	{r7, pc}
   18f2c:	0001d991 	.word	0x0001d991

00018f30 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   18f30:	b590      	push	{r4, r7, lr}
   18f32:	b085      	sub	sp, #20
   18f34:	af02      	add	r7, sp, #8
   18f36:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   18f38:	4b14      	ldr	r3, [pc, #80]	; (18f8c <vTraceEnable+0x5c>)
   18f3a:	4798      	blx	r3

	if (startOption == TRC_START)
   18f3c:	687b      	ldr	r3, [r7, #4]
   18f3e:	2b01      	cmp	r3, #1
   18f40:	d102      	bne.n	18f48 <vTraceEnable+0x18>
	{
		vTraceStart();
   18f42:	4b13      	ldr	r3, [pc, #76]	; (18f90 <vTraceEnable+0x60>)
   18f44:	4798      	blx	r3
   18f46:	e00e      	b.n	18f66 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   18f48:	687b      	ldr	r3, [r7, #4]
   18f4a:	2b02      	cmp	r3, #2
   18f4c:	d104      	bne.n	18f58 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   18f4e:	4b11      	ldr	r3, [pc, #68]	; (18f94 <vTraceEnable+0x64>)
   18f50:	0018      	movs	r0, r3
   18f52:	4b11      	ldr	r3, [pc, #68]	; (18f98 <vTraceEnable+0x68>)
   18f54:	4798      	blx	r3
   18f56:	e006      	b.n	18f66 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   18f58:	687b      	ldr	r3, [r7, #4]
   18f5a:	2b00      	cmp	r3, #0
   18f5c:	d003      	beq.n	18f66 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   18f5e:	4b0f      	ldr	r3, [pc, #60]	; (18f9c <vTraceEnable+0x6c>)
   18f60:	0018      	movs	r0, r3
   18f62:	4b0d      	ldr	r3, [pc, #52]	; (18f98 <vTraceEnable+0x68>)
   18f64:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   18f66:	4b0e      	ldr	r3, [pc, #56]	; (18fa0 <vTraceEnable+0x70>)
   18f68:	681b      	ldr	r3, [r3, #0]
   18f6a:	2b00      	cmp	r3, #0
   18f6c:	d109      	bne.n	18f82 <vTraceEnable+0x52>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   18f6e:	490d      	ldr	r1, [pc, #52]	; (18fa4 <vTraceEnable+0x74>)
   18f70:	480d      	ldr	r0, [pc, #52]	; (18fa8 <vTraceEnable+0x78>)
   18f72:	4b0b      	ldr	r3, [pc, #44]	; (18fa0 <vTraceEnable+0x70>)
   18f74:	9301      	str	r3, [sp, #4]
   18f76:	2304      	movs	r3, #4
   18f78:	9300      	str	r3, [sp, #0]
   18f7a:	2300      	movs	r3, #0
   18f7c:	22c8      	movs	r2, #200	; 0xc8
   18f7e:	4c0b      	ldr	r4, [pc, #44]	; (18fac <vTraceEnable+0x7c>)
   18f80:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   18f82:	46c0      	nop			; (mov r8, r8)
   18f84:	46bd      	mov	sp, r7
   18f86:	b003      	add	sp, #12
   18f88:	bd90      	pop	{r4, r7, pc}
   18f8a:	46c0      	nop			; (mov r8, r8)
   18f8c:	00019e75 	.word	0x00019e75
   18f90:	000193cd 	.word	0x000193cd
   18f94:	000379a0 	.word	0x000379a0
   18f98:	0001a51d 	.word	0x0001a51d
   18f9c:	000379e0 	.word	0x000379e0
   18fa0:	20000cfc 	.word	0x20000cfc
   18fa4:	00037a14 	.word	0x00037a14
   18fa8:	00018fb1 	.word	0x00018fb1
   18fac:	0001c8e9 	.word	0x0001c8e9

00018fb0 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   18fb0:	b580      	push	{r7, lr}
   18fb2:	b082      	sub	sp, #8
   18fb4:	af00      	add	r7, sp, #0
   18fb6:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   18fb8:	4b04      	ldr	r3, [pc, #16]	; (18fcc <TzCtrl+0x1c>)
   18fba:	4798      	blx	r3
   18fbc:	1e03      	subs	r3, r0, #0
   18fbe:	d001      	beq.n	18fc4 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   18fc0:	4b03      	ldr	r3, [pc, #12]	; (18fd0 <TzCtrl+0x20>)
   18fc2:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   18fc4:	2004      	movs	r0, #4
   18fc6:	4b03      	ldr	r3, [pc, #12]	; (18fd4 <TzCtrl+0x24>)
   18fc8:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   18fca:	e7f5      	b.n	18fb8 <TzCtrl+0x8>
   18fcc:	00019411 	.word	0x00019411
   18fd0:	00018e4d 	.word	0x00018e4d
   18fd4:	0001cc85 	.word	0x0001cc85

00018fd8 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   18fd8:	b580      	push	{r7, lr}
   18fda:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   18fdc:	4b60      	ldr	r3, [pc, #384]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   18fde:	681b      	ldr	r3, [r3, #0]
   18fe0:	2209      	movs	r2, #9
   18fe2:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   18fe4:	4b5e      	ldr	r3, [pc, #376]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   18fe6:	681b      	ldr	r3, [r3, #0]
   18fe8:	2264      	movs	r2, #100	; 0x64
   18fea:	210a      	movs	r1, #10
   18fec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   18fee:	4b5c      	ldr	r3, [pc, #368]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   18ff0:	681b      	ldr	r3, [r3, #0]
   18ff2:	2265      	movs	r2, #101	; 0x65
   18ff4:	210a      	movs	r1, #10
   18ff6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   18ff8:	4b59      	ldr	r3, [pc, #356]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   18ffa:	681b      	ldr	r3, [r3, #0]
   18ffc:	2266      	movs	r2, #102	; 0x66
   18ffe:	210a      	movs	r1, #10
   19000:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   19002:	4b57      	ldr	r3, [pc, #348]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19004:	681b      	ldr	r3, [r3, #0]
   19006:	2267      	movs	r2, #103	; 0x67
   19008:	210f      	movs	r1, #15
   1900a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1900c:	4b54      	ldr	r3, [pc, #336]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   1900e:	681b      	ldr	r3, [r3, #0]
   19010:	2268      	movs	r2, #104	; 0x68
   19012:	2105      	movs	r1, #5
   19014:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   19016:	4b52      	ldr	r3, [pc, #328]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19018:	681b      	ldr	r3, [r3, #0]
   1901a:	2269      	movs	r2, #105	; 0x69
   1901c:	2105      	movs	r1, #5
   1901e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   19020:	4b4f      	ldr	r3, [pc, #316]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19022:	681b      	ldr	r3, [r3, #0]
   19024:	226a      	movs	r2, #106	; 0x6a
   19026:	2105      	movs	r1, #5
   19028:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1902a:	4b4d      	ldr	r3, [pc, #308]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   1902c:	681b      	ldr	r3, [r3, #0]
   1902e:	226b      	movs	r2, #107	; 0x6b
   19030:	2105      	movs	r1, #5
   19032:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   19034:	4b4a      	ldr	r3, [pc, #296]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19036:	681b      	ldr	r3, [r3, #0]
   19038:	226c      	movs	r2, #108	; 0x6c
   1903a:	2105      	movs	r1, #5
   1903c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1903e:	4b48      	ldr	r3, [pc, #288]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19040:	681b      	ldr	r3, [r3, #0]
   19042:	2270      	movs	r2, #112	; 0x70
   19044:	210f      	movs	r1, #15
   19046:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   19048:	4b45      	ldr	r3, [pc, #276]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   1904a:	681b      	ldr	r3, [r3, #0]
   1904c:	2271      	movs	r2, #113	; 0x71
   1904e:	210f      	movs	r1, #15
   19050:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   19052:	4b43      	ldr	r3, [pc, #268]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19054:	681b      	ldr	r3, [r3, #0]
   19056:	2272      	movs	r2, #114	; 0x72
   19058:	210f      	movs	r1, #15
   1905a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1905c:	4b40      	ldr	r3, [pc, #256]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   1905e:	681b      	ldr	r3, [r3, #0]
   19060:	2273      	movs	r2, #115	; 0x73
   19062:	210f      	movs	r1, #15
   19064:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   19066:	4b3e      	ldr	r3, [pc, #248]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19068:	681b      	ldr	r3, [r3, #0]
   1906a:	2274      	movs	r2, #116	; 0x74
   1906c:	210f      	movs	r1, #15
   1906e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   19070:	4b3b      	ldr	r3, [pc, #236]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19072:	681b      	ldr	r3, [r3, #0]
   19074:	2275      	movs	r2, #117	; 0x75
   19076:	210f      	movs	r1, #15
   19078:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1907a:	4b39      	ldr	r3, [pc, #228]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   1907c:	681b      	ldr	r3, [r3, #0]
   1907e:	2276      	movs	r2, #118	; 0x76
   19080:	210f      	movs	r1, #15
   19082:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   19084:	4b36      	ldr	r3, [pc, #216]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19086:	681b      	ldr	r3, [r3, #0]
   19088:	2277      	movs	r2, #119	; 0x77
   1908a:	210f      	movs	r1, #15
   1908c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1908e:	4b34      	ldr	r3, [pc, #208]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19090:	681b      	ldr	r3, [r3, #0]
   19092:	2278      	movs	r2, #120	; 0x78
   19094:	210f      	movs	r1, #15
   19096:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   19098:	4b31      	ldr	r3, [pc, #196]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   1909a:	681b      	ldr	r3, [r3, #0]
   1909c:	227c      	movs	r2, #124	; 0x7c
   1909e:	2110      	movs	r1, #16
   190a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   190a2:	4b2f      	ldr	r3, [pc, #188]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   190a4:	681b      	ldr	r3, [r3, #0]
   190a6:	227d      	movs	r2, #125	; 0x7d
   190a8:	2110      	movs	r1, #16
   190aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   190ac:	4b2c      	ldr	r3, [pc, #176]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   190ae:	681b      	ldr	r3, [r3, #0]
   190b0:	227e      	movs	r2, #126	; 0x7e
   190b2:	2110      	movs	r1, #16
   190b4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   190b6:	4b2a      	ldr	r3, [pc, #168]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   190b8:	681b      	ldr	r3, [r3, #0]
   190ba:	227f      	movs	r2, #127	; 0x7f
   190bc:	2113      	movs	r1, #19
   190be:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   190c0:	4b27      	ldr	r3, [pc, #156]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   190c2:	681b      	ldr	r3, [r3, #0]
   190c4:	2280      	movs	r2, #128	; 0x80
   190c6:	2111      	movs	r1, #17
   190c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   190ca:	4b25      	ldr	r3, [pc, #148]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   190cc:	681b      	ldr	r3, [r3, #0]
   190ce:	2281      	movs	r2, #129	; 0x81
   190d0:	2110      	movs	r1, #16
   190d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   190d4:	4b22      	ldr	r3, [pc, #136]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   190d6:	681b      	ldr	r3, [r3, #0]
   190d8:	2282      	movs	r2, #130	; 0x82
   190da:	2113      	movs	r1, #19
   190dc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   190de:	4b20      	ldr	r3, [pc, #128]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   190e0:	681b      	ldr	r3, [r3, #0]
   190e2:	2283      	movs	r2, #131	; 0x83
   190e4:	2113      	movs	r1, #19
   190e6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   190e8:	4b1d      	ldr	r3, [pc, #116]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   190ea:	681b      	ldr	r3, [r3, #0]
   190ec:	2284      	movs	r2, #132	; 0x84
   190ee:	2113      	movs	r1, #19
   190f0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   190f2:	4b1b      	ldr	r3, [pc, #108]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   190f4:	681b      	ldr	r3, [r3, #0]
   190f6:	2288      	movs	r2, #136	; 0x88
   190f8:	2100      	movs	r1, #0
   190fa:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   190fc:	4b18      	ldr	r3, [pc, #96]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   190fe:	681b      	ldr	r3, [r3, #0]
   19100:	228a      	movs	r2, #138	; 0x8a
   19102:	21a0      	movs	r1, #160	; 0xa0
   19104:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   19106:	4b16      	ldr	r3, [pc, #88]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19108:	681b      	ldr	r3, [r3, #0]
   1910a:	228c      	movs	r2, #140	; 0x8c
   1910c:	21a0      	movs	r1, #160	; 0xa0
   1910e:	0049      	lsls	r1, r1, #1
   19110:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   19112:	4b13      	ldr	r3, [pc, #76]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19114:	681b      	ldr	r3, [r3, #0]
   19116:	228e      	movs	r2, #142	; 0x8e
   19118:	21f0      	movs	r1, #240	; 0xf0
   1911a:	0049      	lsls	r1, r1, #1
   1911c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1911e:	4b10      	ldr	r3, [pc, #64]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19120:	681b      	ldr	r3, [r3, #0]
   19122:	2290      	movs	r2, #144	; 0x90
   19124:	490f      	ldr	r1, [pc, #60]	; (19164 <vTraceInitObjectPropertyTable+0x18c>)
   19126:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   19128:	4b0d      	ldr	r3, [pc, #52]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   1912a:	681b      	ldr	r3, [r3, #0]
   1912c:	2292      	movs	r2, #146	; 0x92
   1912e:	490e      	ldr	r1, [pc, #56]	; (19168 <vTraceInitObjectPropertyTable+0x190>)
   19130:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   19132:	4b0b      	ldr	r3, [pc, #44]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19134:	681b      	ldr	r3, [r3, #0]
   19136:	2294      	movs	r2, #148	; 0x94
   19138:	490c      	ldr	r1, [pc, #48]	; (1916c <vTraceInitObjectPropertyTable+0x194>)
   1913a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   1913c:	4b08      	ldr	r3, [pc, #32]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   1913e:	681b      	ldr	r3, [r3, #0]
   19140:	2296      	movs	r2, #150	; 0x96
   19142:	490b      	ldr	r1, [pc, #44]	; (19170 <vTraceInitObjectPropertyTable+0x198>)
   19144:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   19146:	4b06      	ldr	r3, [pc, #24]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19148:	681b      	ldr	r3, [r3, #0]
   1914a:	2298      	movs	r2, #152	; 0x98
   1914c:	218c      	movs	r1, #140	; 0x8c
   1914e:	00c9      	lsls	r1, r1, #3
   19150:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   19152:	4b03      	ldr	r3, [pc, #12]	; (19160 <vTraceInitObjectPropertyTable+0x188>)
   19154:	681b      	ldr	r3, [r3, #0]
   19156:	4a07      	ldr	r2, [pc, #28]	; (19174 <vTraceInitObjectPropertyTable+0x19c>)
   19158:	661a      	str	r2, [r3, #96]	; 0x60
}
   1915a:	46c0      	nop			; (mov r8, r8)
   1915c:	46bd      	mov	sp, r7
   1915e:	bd80      	pop	{r7, pc}
   19160:	20000e14 	.word	0x20000e14
   19164:	000002fd 	.word	0x000002fd
   19168:	00000352 	.word	0x00000352
   1916c:	000003a2 	.word	0x000003a2
   19170:	00000401 	.word	0x00000401
   19174:	000004bf 	.word	0x000004bf

00019178 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   19178:	b580      	push	{r7, lr}
   1917a:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   1917c:	4b2e      	ldr	r3, [pc, #184]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   1917e:	2200      	movs	r2, #0
   19180:	825a      	strh	r2, [r3, #18]
   19182:	4b2d      	ldr	r3, [pc, #180]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   19184:	8a5a      	ldrh	r2, [r3, #18]
   19186:	4b2c      	ldr	r3, [pc, #176]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   19188:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1918a:	4b2b      	ldr	r3, [pc, #172]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   1918c:	220a      	movs	r2, #10
   1918e:	829a      	strh	r2, [r3, #20]
   19190:	4b29      	ldr	r3, [pc, #164]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   19192:	8a9a      	ldrh	r2, [r3, #20]
   19194:	4b28      	ldr	r3, [pc, #160]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   19196:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   19198:	4b27      	ldr	r3, [pc, #156]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   1919a:	2214      	movs	r2, #20
   1919c:	82da      	strh	r2, [r3, #22]
   1919e:	4b26      	ldr	r3, [pc, #152]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191a0:	8ada      	ldrh	r2, [r3, #22]
   191a2:	4b25      	ldr	r3, [pc, #148]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191a4:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   191a6:	4b24      	ldr	r3, [pc, #144]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191a8:	221e      	movs	r2, #30
   191aa:	831a      	strh	r2, [r3, #24]
   191ac:	4b22      	ldr	r3, [pc, #136]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191ae:	8b1a      	ldrh	r2, [r3, #24]
   191b0:	4b21      	ldr	r3, [pc, #132]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191b2:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   191b4:	4b20      	ldr	r3, [pc, #128]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191b6:	222d      	movs	r2, #45	; 0x2d
   191b8:	835a      	strh	r2, [r3, #26]
   191ba:	4b1f      	ldr	r3, [pc, #124]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191bc:	8b5a      	ldrh	r2, [r3, #26]
   191be:	4b1e      	ldr	r3, [pc, #120]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191c0:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   191c2:	4b1d      	ldr	r3, [pc, #116]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191c4:	2232      	movs	r2, #50	; 0x32
   191c6:	839a      	strh	r2, [r3, #28]
   191c8:	4b1b      	ldr	r3, [pc, #108]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191ca:	8b9a      	ldrh	r2, [r3, #28]
   191cc:	4b1a      	ldr	r3, [pc, #104]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191ce:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   191d0:	4b19      	ldr	r3, [pc, #100]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191d2:	2237      	movs	r2, #55	; 0x37
   191d4:	83da      	strh	r2, [r3, #30]
   191d6:	4b18      	ldr	r3, [pc, #96]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191d8:	8bda      	ldrh	r2, [r3, #30]
   191da:	4b17      	ldr	r3, [pc, #92]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191dc:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   191de:	4b16      	ldr	r3, [pc, #88]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191e0:	223c      	movs	r2, #60	; 0x3c
   191e2:	841a      	strh	r2, [r3, #32]
   191e4:	4b14      	ldr	r3, [pc, #80]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191e6:	8c1a      	ldrh	r2, [r3, #32]
   191e8:	4b13      	ldr	r3, [pc, #76]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191ea:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   191ec:	4b12      	ldr	r3, [pc, #72]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191ee:	2241      	movs	r2, #65	; 0x41
   191f0:	845a      	strh	r2, [r3, #34]	; 0x22
   191f2:	4b11      	ldr	r3, [pc, #68]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191f4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   191f6:	4b10      	ldr	r3, [pc, #64]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191f8:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   191fa:	4b0f      	ldr	r3, [pc, #60]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   191fc:	2209      	movs	r2, #9
   191fe:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   19200:	4b0d      	ldr	r3, [pc, #52]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   19202:	2213      	movs	r2, #19
   19204:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   19206:	4b0c      	ldr	r3, [pc, #48]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   19208:	221d      	movs	r2, #29
   1920a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1920c:	4b0a      	ldr	r3, [pc, #40]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   1920e:	222c      	movs	r2, #44	; 0x2c
   19210:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   19212:	4b09      	ldr	r3, [pc, #36]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   19214:	2231      	movs	r2, #49	; 0x31
   19216:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   19218:	4b07      	ldr	r3, [pc, #28]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   1921a:	2236      	movs	r2, #54	; 0x36
   1921c:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1921e:	4b06      	ldr	r3, [pc, #24]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   19220:	223b      	movs	r2, #59	; 0x3b
   19222:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   19224:	4b04      	ldr	r3, [pc, #16]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   19226:	2240      	movs	r2, #64	; 0x40
   19228:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   1922a:	4b03      	ldr	r3, [pc, #12]	; (19238 <vTraceInitObjectHandleStack+0xc0>)
   1922c:	2245      	movs	r2, #69	; 0x45
   1922e:	869a      	strh	r2, [r3, #52]	; 0x34
}
   19230:	46c0      	nop			; (mov r8, r8)
   19232:	46bd      	mov	sp, r7
   19234:	bd80      	pop	{r7, pc}
   19236:	46c0      	nop			; (mov r8, r8)
   19238:	20000d84 	.word	0x20000d84

0001923c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1923c:	b580      	push	{r7, lr}
   1923e:	b082      	sub	sp, #8
   19240:	af00      	add	r7, sp, #0
   19242:	0002      	movs	r2, r0
   19244:	1dfb      	adds	r3, r7, #7
   19246:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   19248:	1dfb      	adds	r3, r7, #7
   1924a:	781b      	ldrb	r3, [r3, #0]
   1924c:	2b08      	cmp	r3, #8
   1924e:	d816      	bhi.n	1927e <pszTraceGetErrorNotEnoughHandles+0x42>
   19250:	009a      	lsls	r2, r3, #2
   19252:	4b0d      	ldr	r3, [pc, #52]	; (19288 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   19254:	18d3      	adds	r3, r2, r3
   19256:	681b      	ldr	r3, [r3, #0]
   19258:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1925a:	4b0c      	ldr	r3, [pc, #48]	; (1928c <pszTraceGetErrorNotEnoughHandles+0x50>)
   1925c:	e010      	b.n	19280 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1925e:	4b0c      	ldr	r3, [pc, #48]	; (19290 <pszTraceGetErrorNotEnoughHandles+0x54>)
   19260:	e00e      	b.n	19280 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   19262:	4b0c      	ldr	r3, [pc, #48]	; (19294 <pszTraceGetErrorNotEnoughHandles+0x58>)
   19264:	e00c      	b.n	19280 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   19266:	4b0c      	ldr	r3, [pc, #48]	; (19298 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   19268:	e00a      	b.n	19280 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1926a:	4b0c      	ldr	r3, [pc, #48]	; (1929c <pszTraceGetErrorNotEnoughHandles+0x60>)
   1926c:	e008      	b.n	19280 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1926e:	4b0c      	ldr	r3, [pc, #48]	; (192a0 <pszTraceGetErrorNotEnoughHandles+0x64>)
   19270:	e006      	b.n	19280 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   19272:	4b0c      	ldr	r3, [pc, #48]	; (192a4 <pszTraceGetErrorNotEnoughHandles+0x68>)
   19274:	e004      	b.n	19280 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   19276:	4b0c      	ldr	r3, [pc, #48]	; (192a8 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   19278:	e002      	b.n	19280 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1927a:	4b0c      	ldr	r3, [pc, #48]	; (192ac <pszTraceGetErrorNotEnoughHandles+0x70>)
   1927c:	e000      	b.n	19280 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1927e:	4b0c      	ldr	r3, [pc, #48]	; (192b0 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   19280:	0018      	movs	r0, r3
   19282:	46bd      	mov	sp, r7
   19284:	b002      	add	sp, #8
   19286:	bd80      	pop	{r7, pc}
   19288:	00037d1c 	.word	0x00037d1c
   1928c:	00037a1c 	.word	0x00037a1c
   19290:	00037a64 	.word	0x00037a64
   19294:	00037aac 	.word	0x00037aac
   19298:	00037b00 	.word	0x00037b00
   1929c:	00037b4c 	.word	0x00037b4c
   192a0:	00037b98 	.word	0x00037b98
   192a4:	00037be4 	.word	0x00037be4
   192a8:	00037c38 	.word	0x00037c38
   192ac:	00037c90 	.word	0x00037c90
   192b0:	00037cec 	.word	0x00037cec

000192b4 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   192b4:	b590      	push	{r4, r7, lr}
   192b6:	b087      	sub	sp, #28
   192b8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   192ba:	2317      	movs	r3, #23
   192bc:	18fb      	adds	r3, r7, r3
   192be:	2200      	movs	r2, #0
   192c0:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   192c2:	4b36      	ldr	r3, [pc, #216]	; (1939c <uiTraceStart+0xe8>)
   192c4:	681b      	ldr	r3, [r3, #0]
   192c6:	2b00      	cmp	r3, #0
   192c8:	d10b      	bne.n	192e2 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   192ca:	4b34      	ldr	r3, [pc, #208]	; (1939c <uiTraceStart+0xe8>)
   192cc:	681b      	ldr	r3, [r3, #0]
   192ce:	2b00      	cmp	r3, #0
   192d0:	d105      	bne.n	192de <uiTraceStart+0x2a>
   192d2:	4b33      	ldr	r3, [pc, #204]	; (193a0 <uiTraceStart+0xec>)
   192d4:	0018      	movs	r0, r3
   192d6:	4b33      	ldr	r3, [pc, #204]	; (193a4 <uiTraceStart+0xf0>)
   192d8:	4798      	blx	r3
   192da:	2300      	movs	r3, #0
   192dc:	e059      	b.n	19392 <uiTraceStart+0xde>
		return 0;
   192de:	2300      	movs	r3, #0
   192e0:	e057      	b.n	19392 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   192e2:	4b2e      	ldr	r3, [pc, #184]	; (1939c <uiTraceStart+0xe8>)
   192e4:	681b      	ldr	r3, [r3, #0]
   192e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   192e8:	2b01      	cmp	r3, #1
   192ea:	d101      	bne.n	192f0 <uiTraceStart+0x3c>
		return 1; /* Already running */
   192ec:	2301      	movs	r3, #1
   192ee:	e050      	b.n	19392 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   192f0:	4b2d      	ldr	r3, [pc, #180]	; (193a8 <uiTraceStart+0xf4>)
   192f2:	681b      	ldr	r3, [r3, #0]
   192f4:	2b00      	cmp	r3, #0
   192f6:	d149      	bne.n	1938c <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   192f8:	f3ef 8310 	mrs	r3, PRIMASK
   192fc:	60bb      	str	r3, [r7, #8]
  return(result);
   192fe:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   19300:	613b      	str	r3, [r7, #16]
   19302:	2301      	movs	r3, #1
   19304:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19306:	68fb      	ldr	r3, [r7, #12]
   19308:	f383 8810 	msr	PRIMASK, r3
   1930c:	4b27      	ldr	r3, [pc, #156]	; (193ac <uiTraceStart+0xf8>)
   1930e:	681b      	ldr	r3, [r3, #0]
   19310:	1c5a      	adds	r2, r3, #1
   19312:	4b26      	ldr	r3, [pc, #152]	; (193ac <uiTraceStart+0xf8>)
   19314:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   19316:	4b21      	ldr	r3, [pc, #132]	; (1939c <uiTraceStart+0xe8>)
   19318:	681b      	ldr	r3, [r3, #0]
   1931a:	2201      	movs	r2, #1
   1931c:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1931e:	4b24      	ldr	r3, [pc, #144]	; (193b0 <uiTraceStart+0xfc>)
   19320:	4798      	blx	r3
   19322:	0003      	movs	r3, r0
   19324:	0018      	movs	r0, r3
   19326:	4b23      	ldr	r3, [pc, #140]	; (193b4 <uiTraceStart+0x100>)
   19328:	4798      	blx	r3
   1932a:	0003      	movs	r3, r0
   1932c:	001a      	movs	r2, r3
   1932e:	2317      	movs	r3, #23
   19330:	18fb      	adds	r3, r7, r3
   19332:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   19334:	2317      	movs	r3, #23
   19336:	18fb      	adds	r3, r7, r3
   19338:	781b      	ldrb	r3, [r3, #0]
   1933a:	2b00      	cmp	r3, #0
   1933c:	d116      	bne.n	1936c <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1933e:	2317      	movs	r3, #23
   19340:	18fc      	adds	r4, r7, r3
   19342:	2003      	movs	r0, #3
   19344:	4b1c      	ldr	r3, [pc, #112]	; (193b8 <uiTraceStart+0x104>)
   19346:	4798      	blx	r3
   19348:	0003      	movs	r3, r0
   1934a:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1934c:	4a1b      	ldr	r2, [pc, #108]	; (193bc <uiTraceStart+0x108>)
   1934e:	2317      	movs	r3, #23
   19350:	18fb      	adds	r3, r7, r3
   19352:	781b      	ldrb	r3, [r3, #0]
   19354:	0019      	movs	r1, r3
   19356:	2003      	movs	r0, #3
   19358:	4b19      	ldr	r3, [pc, #100]	; (193c0 <uiTraceStart+0x10c>)
   1935a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1935c:	2317      	movs	r3, #23
   1935e:	18fb      	adds	r3, r7, r3
   19360:	781b      	ldrb	r3, [r3, #0]
   19362:	2200      	movs	r2, #0
   19364:	0019      	movs	r1, r3
   19366:	2003      	movs	r0, #3
   19368:	4b16      	ldr	r3, [pc, #88]	; (193c4 <uiTraceStart+0x110>)
   1936a:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   1936c:	2317      	movs	r3, #23
   1936e:	18fb      	adds	r3, r7, r3
   19370:	781b      	ldrb	r3, [r3, #0]
   19372:	0018      	movs	r0, r3
   19374:	4b14      	ldr	r3, [pc, #80]	; (193c8 <uiTraceStart+0x114>)
   19376:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   19378:	4b0c      	ldr	r3, [pc, #48]	; (193ac <uiTraceStart+0xf8>)
   1937a:	681b      	ldr	r3, [r3, #0]
   1937c:	1e5a      	subs	r2, r3, #1
   1937e:	4b0b      	ldr	r3, [pc, #44]	; (193ac <uiTraceStart+0xf8>)
   19380:	601a      	str	r2, [r3, #0]
   19382:	693b      	ldr	r3, [r7, #16]
   19384:	607b      	str	r3, [r7, #4]
   19386:	687b      	ldr	r3, [r7, #4]
   19388:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1938c:	4b03      	ldr	r3, [pc, #12]	; (1939c <uiTraceStart+0xe8>)
   1938e:	681b      	ldr	r3, [r3, #0]
   19390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   19392:	0018      	movs	r0, r3
   19394:	46bd      	mov	sp, r7
   19396:	b007      	add	sp, #28
   19398:	bd90      	pop	{r4, r7, pc}
   1939a:	46c0      	nop			; (mov r8, r8)
   1939c:	20000e14 	.word	0x20000e14
   193a0:	00037d40 	.word	0x00037d40
   193a4:	0001a51d 	.word	0x0001a51d
   193a8:	20000d74 	.word	0x20000d74
   193ac:	20000d6c 	.word	0x20000d6c
   193b0:	00018f1d 	.word	0x00018f1d
   193b4:	00018c61 	.word	0x00018c61
   193b8:	0001a201 	.word	0x0001a201
   193bc:	00037d84 	.word	0x00037d84
   193c0:	0001a431 	.word	0x0001a431
   193c4:	00019b95 	.word	0x00019b95
   193c8:	00019a7d 	.word	0x00019a7d

000193cc <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   193cc:	b580      	push	{r7, lr}
   193ce:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   193d0:	4b02      	ldr	r3, [pc, #8]	; (193dc <vTraceStart+0x10>)
   193d2:	4798      	blx	r3
}
   193d4:	46c0      	nop			; (mov r8, r8)
   193d6:	46bd      	mov	sp, r7
   193d8:	bd80      	pop	{r7, pc}
   193da:	46c0      	nop			; (mov r8, r8)
   193dc:	000192b5 	.word	0x000192b5

000193e0 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   193e0:	b580      	push	{r7, lr}
   193e2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   193e4:	4b08      	ldr	r3, [pc, #32]	; (19408 <vTraceStop+0x28>)
   193e6:	681b      	ldr	r3, [r3, #0]
   193e8:	2b00      	cmp	r3, #0
   193ea:	d003      	beq.n	193f4 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   193ec:	4b06      	ldr	r3, [pc, #24]	; (19408 <vTraceStop+0x28>)
   193ee:	681b      	ldr	r3, [r3, #0]
   193f0:	2200      	movs	r2, #0
   193f2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   193f4:	4b05      	ldr	r3, [pc, #20]	; (1940c <vTraceStop+0x2c>)
   193f6:	681b      	ldr	r3, [r3, #0]
   193f8:	2b00      	cmp	r3, #0
   193fa:	d002      	beq.n	19402 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   193fc:	4b03      	ldr	r3, [pc, #12]	; (1940c <vTraceStop+0x2c>)
   193fe:	681b      	ldr	r3, [r3, #0]
   19400:	4798      	blx	r3
	}
}
   19402:	46c0      	nop			; (mov r8, r8)
   19404:	46bd      	mov	sp, r7
   19406:	bd80      	pop	{r7, pc}
   19408:	20000e14 	.word	0x20000e14
   1940c:	20000d7c 	.word	0x20000d7c

00019410 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   19410:	b580      	push	{r7, lr}
   19412:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   19414:	4b05      	ldr	r3, [pc, #20]	; (1942c <xTraceIsRecordingEnabled+0x1c>)
   19416:	681b      	ldr	r3, [r3, #0]
   19418:	2b00      	cmp	r3, #0
   1941a:	d003      	beq.n	19424 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1941c:	4b03      	ldr	r3, [pc, #12]	; (1942c <xTraceIsRecordingEnabled+0x1c>)
   1941e:	681b      	ldr	r3, [r3, #0]
   19420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19422:	e000      	b.n	19426 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   19424:	2300      	movs	r3, #0
	}
}
   19426:	0018      	movs	r0, r3
   19428:	46bd      	mov	sp, r7
   1942a:	bd80      	pop	{r7, pc}
   1942c:	20000e14 	.word	0x20000e14

00019430 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   19430:	b590      	push	{r4, r7, lr}
   19432:	b089      	sub	sp, #36	; 0x24
   19434:	af00      	add	r7, sp, #0
   19436:	0002      	movs	r2, r0
   19438:	1dfb      	adds	r3, r7, #7
   1943a:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1943c:	1dfb      	adds	r3, r7, #7
   1943e:	781b      	ldrb	r3, [r3, #0]
   19440:	2b00      	cmp	r3, #0
   19442:	d057      	beq.n	194f4 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   19444:	4b2e      	ldr	r3, [pc, #184]	; (19500 <prvTraceStoreTaskReady+0xd0>)
   19446:	681b      	ldr	r3, [r3, #0]
   19448:	2b00      	cmp	r3, #0
   1944a:	d055      	beq.n	194f8 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1944c:	1dfb      	adds	r3, r7, #7
   1944e:	781b      	ldrb	r3, [r3, #0]
   19450:	2b0f      	cmp	r3, #15
   19452:	d904      	bls.n	1945e <prvTraceStoreTaskReady+0x2e>
   19454:	4b2b      	ldr	r3, [pc, #172]	; (19504 <prvTraceStoreTaskReady+0xd4>)
   19456:	0018      	movs	r0, r3
   19458:	4b2b      	ldr	r3, [pc, #172]	; (19508 <prvTraceStoreTaskReady+0xd8>)
   1945a:	4798      	blx	r3
   1945c:	e04d      	b.n	194fa <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1945e:	4b2b      	ldr	r3, [pc, #172]	; (1950c <prvTraceStoreTaskReady+0xdc>)
   19460:	681b      	ldr	r3, [r3, #0]
   19462:	2b00      	cmp	r3, #0
   19464:	d004      	beq.n	19470 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   19466:	4b2a      	ldr	r3, [pc, #168]	; (19510 <prvTraceStoreTaskReady+0xe0>)
   19468:	0018      	movs	r0, r3
   1946a:	4b27      	ldr	r3, [pc, #156]	; (19508 <prvTraceStoreTaskReady+0xd8>)
   1946c:	4798      	blx	r3
		return;
   1946e:	e044      	b.n	194fa <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19470:	f3ef 8310 	mrs	r3, PRIMASK
   19474:	60fb      	str	r3, [r7, #12]
  return(result);
   19476:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   19478:	61fb      	str	r3, [r7, #28]
   1947a:	2301      	movs	r3, #1
   1947c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1947e:	693b      	ldr	r3, [r7, #16]
   19480:	f383 8810 	msr	PRIMASK, r3
   19484:	4b21      	ldr	r3, [pc, #132]	; (1950c <prvTraceStoreTaskReady+0xdc>)
   19486:	681b      	ldr	r3, [r3, #0]
   19488:	1c5a      	adds	r2, r3, #1
   1948a:	4b20      	ldr	r3, [pc, #128]	; (1950c <prvTraceStoreTaskReady+0xdc>)
   1948c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1948e:	4b21      	ldr	r3, [pc, #132]	; (19514 <prvTraceStoreTaskReady+0xe4>)
   19490:	681b      	ldr	r3, [r3, #0]
   19492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19494:	2b00      	cmp	r3, #0
   19496:	d022      	beq.n	194de <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19498:	231a      	movs	r3, #26
   1949a:	18fc      	adds	r4, r7, r3
   1949c:	4b1e      	ldr	r3, [pc, #120]	; (19518 <prvTraceStoreTaskReady+0xe8>)
   1949e:	0018      	movs	r0, r3
   194a0:	4b1e      	ldr	r3, [pc, #120]	; (1951c <prvTraceStoreTaskReady+0xec>)
   194a2:	4798      	blx	r3
   194a4:	0003      	movs	r3, r0
   194a6:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   194a8:	2319      	movs	r3, #25
   194aa:	18fb      	adds	r3, r7, r3
   194ac:	1dfa      	adds	r2, r7, #7
   194ae:	7812      	ldrb	r2, [r2, #0]
   194b0:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   194b2:	4b1b      	ldr	r3, [pc, #108]	; (19520 <prvTraceStoreTaskReady+0xf0>)
   194b4:	4798      	blx	r3
   194b6:	0003      	movs	r3, r0
   194b8:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   194ba:	697b      	ldr	r3, [r7, #20]
   194bc:	2b00      	cmp	r3, #0
   194be:	d00e      	beq.n	194de <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   194c0:	697b      	ldr	r3, [r7, #20]
   194c2:	2202      	movs	r2, #2
   194c4:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   194c6:	697b      	ldr	r3, [r7, #20]
   194c8:	221a      	movs	r2, #26
   194ca:	18ba      	adds	r2, r7, r2
   194cc:	8812      	ldrh	r2, [r2, #0]
   194ce:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   194d0:	697b      	ldr	r3, [r7, #20]
   194d2:	2219      	movs	r2, #25
   194d4:	18ba      	adds	r2, r7, r2
   194d6:	7812      	ldrb	r2, [r2, #0]
   194d8:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   194da:	4b12      	ldr	r3, [pc, #72]	; (19524 <prvTraceStoreTaskReady+0xf4>)
   194dc:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   194de:	4b0b      	ldr	r3, [pc, #44]	; (1950c <prvTraceStoreTaskReady+0xdc>)
   194e0:	681b      	ldr	r3, [r3, #0]
   194e2:	1e5a      	subs	r2, r3, #1
   194e4:	4b09      	ldr	r3, [pc, #36]	; (1950c <prvTraceStoreTaskReady+0xdc>)
   194e6:	601a      	str	r2, [r3, #0]
   194e8:	69fb      	ldr	r3, [r7, #28]
   194ea:	60bb      	str	r3, [r7, #8]
   194ec:	68bb      	ldr	r3, [r7, #8]
   194ee:	f383 8810 	msr	PRIMASK, r3
   194f2:	e002      	b.n	194fa <prvTraceStoreTaskReady+0xca>
		return;
   194f4:	46c0      	nop			; (mov r8, r8)
   194f6:	e000      	b.n	194fa <prvTraceStoreTaskReady+0xca>
		return;
   194f8:	46c0      	nop			; (mov r8, r8)
}
   194fa:	46bd      	mov	sp, r7
   194fc:	b009      	add	sp, #36	; 0x24
   194fe:	bd90      	pop	{r4, r7, pc}
   19500:	20000100 	.word	0x20000100
   19504:	000380ec 	.word	0x000380ec
   19508:	0001a51d 	.word	0x0001a51d
   1950c:	20000d6c 	.word	0x20000d6c
   19510:	0003812c 	.word	0x0003812c
   19514:	20000e14 	.word	0x20000e14
   19518:	0000ffff 	.word	0x0000ffff
   1951c:	0001a731 	.word	0x0001a731
   19520:	0001a0d5 	.word	0x0001a0d5
   19524:	0001a6d9 	.word	0x0001a6d9

00019528 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   19528:	b580      	push	{r7, lr}
   1952a:	b08e      	sub	sp, #56	; 0x38
   1952c:	af00      	add	r7, sp, #0
   1952e:	60f8      	str	r0, [r7, #12]
   19530:	60b9      	str	r1, [r7, #8]
   19532:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   19534:	4b48      	ldr	r3, [pc, #288]	; (19658 <vTraceStoreMemMangEvent+0x130>)
   19536:	681b      	ldr	r3, [r3, #0]
   19538:	2b00      	cmp	r3, #0
   1953a:	d100      	bne.n	1953e <vTraceStoreMemMangEvent+0x16>
   1953c:	e088      	b.n	19650 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1953e:	687b      	ldr	r3, [r7, #4]
   19540:	2b00      	cmp	r3, #0
   19542:	da03      	bge.n	1954c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   19544:	687b      	ldr	r3, [r7, #4]
   19546:	425b      	negs	r3, r3
   19548:	637b      	str	r3, [r7, #52]	; 0x34
   1954a:	e001      	b.n	19550 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1954c:	687b      	ldr	r3, [r7, #4]
   1954e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19550:	f3ef 8310 	mrs	r3, PRIMASK
   19554:	61bb      	str	r3, [r7, #24]
  return(result);
   19556:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   19558:	633b      	str	r3, [r7, #48]	; 0x30
   1955a:	2301      	movs	r3, #1
   1955c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1955e:	69fb      	ldr	r3, [r7, #28]
   19560:	f383 8810 	msr	PRIMASK, r3
   19564:	4b3d      	ldr	r3, [pc, #244]	; (1965c <vTraceStoreMemMangEvent+0x134>)
   19566:	681b      	ldr	r3, [r3, #0]
   19568:	1c5a      	adds	r2, r3, #1
   1956a:	4b3c      	ldr	r3, [pc, #240]	; (1965c <vTraceStoreMemMangEvent+0x134>)
   1956c:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1956e:	68bb      	ldr	r3, [r7, #8]
   19570:	2b00      	cmp	r3, #0
   19572:	d005      	beq.n	19580 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   19574:	4b3a      	ldr	r3, [pc, #232]	; (19660 <vTraceStoreMemMangEvent+0x138>)
   19576:	681a      	ldr	r2, [r3, #0]
   19578:	687b      	ldr	r3, [r7, #4]
   1957a:	18d2      	adds	r2, r2, r3
   1957c:	4b38      	ldr	r3, [pc, #224]	; (19660 <vTraceStoreMemMangEvent+0x138>)
   1957e:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   19580:	4b35      	ldr	r3, [pc, #212]	; (19658 <vTraceStoreMemMangEvent+0x130>)
   19582:	681b      	ldr	r3, [r3, #0]
   19584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19586:	2b00      	cmp	r3, #0
   19588:	d057      	beq.n	1963a <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1958a:	20ff      	movs	r0, #255	; 0xff
   1958c:	4b35      	ldr	r3, [pc, #212]	; (19664 <vTraceStoreMemMangEvent+0x13c>)
   1958e:	4798      	blx	r3
   19590:	0003      	movs	r3, r0
   19592:	001a      	movs	r2, r3
   19594:	232f      	movs	r3, #47	; 0x2f
   19596:	18fb      	adds	r3, r7, r3
   19598:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1959a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1959c:	4a32      	ldr	r2, [pc, #200]	; (19668 <vTraceStoreMemMangEvent+0x140>)
   1959e:	0019      	movs	r1, r3
   195a0:	0010      	movs	r0, r2
   195a2:	4b32      	ldr	r3, [pc, #200]	; (1966c <vTraceStoreMemMangEvent+0x144>)
   195a4:	4798      	blx	r3
   195a6:	0002      	movs	r2, r0
   195a8:	232c      	movs	r3, #44	; 0x2c
   195aa:	18fb      	adds	r3, r7, r3
   195ac:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   195ae:	4b30      	ldr	r3, [pc, #192]	; (19670 <vTraceStoreMemMangEvent+0x148>)
   195b0:	4798      	blx	r3
   195b2:	0003      	movs	r3, r0
   195b4:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   195b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   195b8:	2b00      	cmp	r3, #0
   195ba:	d03e      	beq.n	1963a <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   195bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   195be:	222f      	movs	r2, #47	; 0x2f
   195c0:	18ba      	adds	r2, r7, r2
   195c2:	7812      	ldrb	r2, [r2, #0]
   195c4:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   195c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   195c8:	2200      	movs	r2, #0
   195ca:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   195cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   195ce:	222c      	movs	r2, #44	; 0x2c
   195d0:	18ba      	adds	r2, r7, r2
   195d2:	8812      	ldrh	r2, [r2, #0]
   195d4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   195d6:	4b27      	ldr	r3, [pc, #156]	; (19674 <vTraceStoreMemMangEvent+0x14c>)
   195d8:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   195da:	68bb      	ldr	r3, [r7, #8]
   195dc:	4a22      	ldr	r2, [pc, #136]	; (19668 <vTraceStoreMemMangEvent+0x140>)
   195de:	0019      	movs	r1, r3
   195e0:	0010      	movs	r0, r2
   195e2:	4b22      	ldr	r3, [pc, #136]	; (1966c <vTraceStoreMemMangEvent+0x144>)
   195e4:	4798      	blx	r3
   195e6:	0002      	movs	r2, r0
   195e8:	2326      	movs	r3, #38	; 0x26
   195ea:	18fb      	adds	r3, r7, r3
   195ec:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   195ee:	2325      	movs	r3, #37	; 0x25
   195f0:	18fb      	adds	r3, r7, r3
   195f2:	2200      	movs	r2, #0
   195f4:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   195f6:	4b1e      	ldr	r3, [pc, #120]	; (19670 <vTraceStoreMemMangEvent+0x148>)
   195f8:	4798      	blx	r3
   195fa:	0003      	movs	r3, r0
   195fc:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   195fe:	6a3b      	ldr	r3, [r7, #32]
   19600:	2b00      	cmp	r3, #0
   19602:	d01a      	beq.n	1963a <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   19604:	6a3b      	ldr	r3, [r7, #32]
   19606:	2226      	movs	r2, #38	; 0x26
   19608:	18ba      	adds	r2, r7, r2
   1960a:	8812      	ldrh	r2, [r2, #0]
   1960c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1960e:	6a3b      	ldr	r3, [r7, #32]
   19610:	2225      	movs	r2, #37	; 0x25
   19612:	18ba      	adds	r2, r7, r2
   19614:	7812      	ldrb	r2, [r2, #0]
   19616:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   19618:	68fb      	ldr	r3, [r7, #12]
   1961a:	b2db      	uxtb	r3, r3
   1961c:	3301      	adds	r3, #1
   1961e:	b2da      	uxtb	r2, r3
   19620:	6a3b      	ldr	r3, [r7, #32]
   19622:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   19624:	68fb      	ldr	r3, [r7, #12]
   19626:	b2da      	uxtb	r2, r3
   19628:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1962a:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   1962c:	4b11      	ldr	r3, [pc, #68]	; (19674 <vTraceStoreMemMangEvent+0x14c>)
   1962e:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   19630:	4b09      	ldr	r3, [pc, #36]	; (19658 <vTraceStoreMemMangEvent+0x130>)
   19632:	681b      	ldr	r3, [r3, #0]
   19634:	4a0a      	ldr	r2, [pc, #40]	; (19660 <vTraceStoreMemMangEvent+0x138>)
   19636:	6812      	ldr	r2, [r2, #0]
   19638:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1963a:	4b08      	ldr	r3, [pc, #32]	; (1965c <vTraceStoreMemMangEvent+0x134>)
   1963c:	681b      	ldr	r3, [r3, #0]
   1963e:	1e5a      	subs	r2, r3, #1
   19640:	4b06      	ldr	r3, [pc, #24]	; (1965c <vTraceStoreMemMangEvent+0x134>)
   19642:	601a      	str	r2, [r3, #0]
   19644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19646:	617b      	str	r3, [r7, #20]
   19648:	697b      	ldr	r3, [r7, #20]
   1964a:	f383 8810 	msr	PRIMASK, r3
   1964e:	e000      	b.n	19652 <vTraceStoreMemMangEvent+0x12a>
		return;
   19650:	46c0      	nop			; (mov r8, r8)
}
   19652:	46bd      	mov	sp, r7
   19654:	b00e      	add	sp, #56	; 0x38
   19656:	bd80      	pop	{r7, pc}
   19658:	20000e14 	.word	0x20000e14
   1965c:	20000d6c 	.word	0x20000d6c
   19660:	20000d80 	.word	0x20000d80
   19664:	0001a731 	.word	0x0001a731
   19668:	0000ffff 	.word	0x0000ffff
   1966c:	000198f5 	.word	0x000198f5
   19670:	0001a0d5 	.word	0x0001a0d5
   19674:	0001a6d9 	.word	0x0001a6d9

00019678 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   19678:	b590      	push	{r4, r7, lr}
   1967a:	b08b      	sub	sp, #44	; 0x2c
   1967c:	af00      	add	r7, sp, #0
   1967e:	60f8      	str	r0, [r7, #12]
   19680:	607a      	str	r2, [r7, #4]
   19682:	230b      	movs	r3, #11
   19684:	18fb      	adds	r3, r7, r3
   19686:	1c0a      	adds	r2, r1, #0
   19688:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1968a:	68fb      	ldr	r3, [r7, #12]
   1968c:	2bfe      	cmp	r3, #254	; 0xfe
   1968e:	d904      	bls.n	1969a <prvTraceStoreKernelCall+0x22>
   19690:	4b39      	ldr	r3, [pc, #228]	; (19778 <prvTraceStoreKernelCall+0x100>)
   19692:	0018      	movs	r0, r3
   19694:	4b39      	ldr	r3, [pc, #228]	; (1977c <prvTraceStoreKernelCall+0x104>)
   19696:	4798      	blx	r3
   19698:	e06b      	b.n	19772 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1969a:	230b      	movs	r3, #11
   1969c:	18fb      	adds	r3, r7, r3
   1969e:	781b      	ldrb	r3, [r3, #0]
   196a0:	2b08      	cmp	r3, #8
   196a2:	d904      	bls.n	196ae <prvTraceStoreKernelCall+0x36>
   196a4:	4b36      	ldr	r3, [pc, #216]	; (19780 <prvTraceStoreKernelCall+0x108>)
   196a6:	0018      	movs	r0, r3
   196a8:	4b34      	ldr	r3, [pc, #208]	; (1977c <prvTraceStoreKernelCall+0x104>)
   196aa:	4798      	blx	r3
   196ac:	e061      	b.n	19772 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   196ae:	4b35      	ldr	r3, [pc, #212]	; (19784 <prvTraceStoreKernelCall+0x10c>)
   196b0:	681a      	ldr	r2, [r3, #0]
   196b2:	230b      	movs	r3, #11
   196b4:	18fb      	adds	r3, r7, r3
   196b6:	781b      	ldrb	r3, [r3, #0]
   196b8:	2164      	movs	r1, #100	; 0x64
   196ba:	18d3      	adds	r3, r2, r3
   196bc:	185b      	adds	r3, r3, r1
   196be:	781b      	ldrb	r3, [r3, #0]
   196c0:	001a      	movs	r2, r3
   196c2:	687b      	ldr	r3, [r7, #4]
   196c4:	429a      	cmp	r2, r3
   196c6:	d204      	bcs.n	196d2 <prvTraceStoreKernelCall+0x5a>
   196c8:	4b2f      	ldr	r3, [pc, #188]	; (19788 <prvTraceStoreKernelCall+0x110>)
   196ca:	0018      	movs	r0, r3
   196cc:	4b2b      	ldr	r3, [pc, #172]	; (1977c <prvTraceStoreKernelCall+0x104>)
   196ce:	4798      	blx	r3
   196d0:	e04f      	b.n	19772 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   196d2:	4b2e      	ldr	r3, [pc, #184]	; (1978c <prvTraceStoreKernelCall+0x114>)
   196d4:	681b      	ldr	r3, [r3, #0]
   196d6:	2b00      	cmp	r3, #0
   196d8:	d004      	beq.n	196e4 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   196da:	4b2d      	ldr	r3, [pc, #180]	; (19790 <prvTraceStoreKernelCall+0x118>)
   196dc:	0018      	movs	r0, r3
   196de:	4b27      	ldr	r3, [pc, #156]	; (1977c <prvTraceStoreKernelCall+0x104>)
   196e0:	4798      	blx	r3
		return;
   196e2:	e046      	b.n	19772 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   196e4:	4b2b      	ldr	r3, [pc, #172]	; (19794 <prvTraceStoreKernelCall+0x11c>)
   196e6:	781b      	ldrb	r3, [r3, #0]
   196e8:	2b00      	cmp	r3, #0
   196ea:	d041      	beq.n	19770 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   196ec:	f3ef 8310 	mrs	r3, PRIMASK
   196f0:	617b      	str	r3, [r7, #20]
  return(result);
   196f2:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   196f4:	627b      	str	r3, [r7, #36]	; 0x24
   196f6:	2301      	movs	r3, #1
   196f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   196fa:	69bb      	ldr	r3, [r7, #24]
   196fc:	f383 8810 	msr	PRIMASK, r3
   19700:	4b22      	ldr	r3, [pc, #136]	; (1978c <prvTraceStoreKernelCall+0x114>)
   19702:	681b      	ldr	r3, [r3, #0]
   19704:	1c5a      	adds	r2, r3, #1
   19706:	4b21      	ldr	r3, [pc, #132]	; (1978c <prvTraceStoreKernelCall+0x114>)
   19708:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1970a:	4b1e      	ldr	r3, [pc, #120]	; (19784 <prvTraceStoreKernelCall+0x10c>)
   1970c:	681b      	ldr	r3, [r3, #0]
   1970e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19710:	2b00      	cmp	r3, #0
   19712:	d022      	beq.n	1975a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19714:	2322      	movs	r3, #34	; 0x22
   19716:	18fc      	adds	r4, r7, r3
   19718:	4b1f      	ldr	r3, [pc, #124]	; (19798 <prvTraceStoreKernelCall+0x120>)
   1971a:	0018      	movs	r0, r3
   1971c:	4b1f      	ldr	r3, [pc, #124]	; (1979c <prvTraceStoreKernelCall+0x124>)
   1971e:	4798      	blx	r3
   19720:	0003      	movs	r3, r0
   19722:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19724:	2321      	movs	r3, #33	; 0x21
   19726:	18fb      	adds	r3, r7, r3
   19728:	687a      	ldr	r2, [r7, #4]
   1972a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   1972c:	4b1c      	ldr	r3, [pc, #112]	; (197a0 <prvTraceStoreKernelCall+0x128>)
   1972e:	4798      	blx	r3
   19730:	0003      	movs	r3, r0
   19732:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19734:	69fb      	ldr	r3, [r7, #28]
   19736:	2b00      	cmp	r3, #0
   19738:	d00f      	beq.n	1975a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   1973a:	69fb      	ldr	r3, [r7, #28]
   1973c:	2222      	movs	r2, #34	; 0x22
   1973e:	18ba      	adds	r2, r7, r2
   19740:	8812      	ldrh	r2, [r2, #0]
   19742:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   19744:	68fb      	ldr	r3, [r7, #12]
   19746:	b2da      	uxtb	r2, r3
   19748:	69fb      	ldr	r3, [r7, #28]
   1974a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1974c:	69fb      	ldr	r3, [r7, #28]
   1974e:	2221      	movs	r2, #33	; 0x21
   19750:	18ba      	adds	r2, r7, r2
   19752:	7812      	ldrb	r2, [r2, #0]
   19754:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   19756:	4b13      	ldr	r3, [pc, #76]	; (197a4 <prvTraceStoreKernelCall+0x12c>)
   19758:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1975a:	4b0c      	ldr	r3, [pc, #48]	; (1978c <prvTraceStoreKernelCall+0x114>)
   1975c:	681b      	ldr	r3, [r3, #0]
   1975e:	1e5a      	subs	r2, r3, #1
   19760:	4b0a      	ldr	r3, [pc, #40]	; (1978c <prvTraceStoreKernelCall+0x114>)
   19762:	601a      	str	r2, [r3, #0]
   19764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19766:	613b      	str	r3, [r7, #16]
   19768:	693b      	ldr	r3, [r7, #16]
   1976a:	f383 8810 	msr	PRIMASK, r3
   1976e:	e000      	b.n	19772 <prvTraceStoreKernelCall+0xfa>
		return;
   19770:	46c0      	nop			; (mov r8, r8)
}
   19772:	46bd      	mov	sp, r7
   19774:	b00b      	add	sp, #44	; 0x2c
   19776:	bd90      	pop	{r4, r7, pc}
   19778:	0003819c 	.word	0x0003819c
   1977c:	0001a51d 	.word	0x0001a51d
   19780:	000381d4 	.word	0x000381d4
   19784:	20000e14 	.word	0x20000e14
   19788:	0003821c 	.word	0x0003821c
   1978c:	20000d6c 	.word	0x20000d6c
   19790:	00038264 	.word	0x00038264
   19794:	20000d78 	.word	0x20000d78
   19798:	0000ffff 	.word	0x0000ffff
   1979c:	0001a731 	.word	0x0001a731
   197a0:	0001a0d5 	.word	0x0001a0d5
   197a4:	0001a6d9 	.word	0x0001a6d9

000197a8 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   197a8:	b580      	push	{r7, lr}
   197aa:	b08a      	sub	sp, #40	; 0x28
   197ac:	af00      	add	r7, sp, #0
   197ae:	60f8      	str	r0, [r7, #12]
   197b0:	607a      	str	r2, [r7, #4]
   197b2:	603b      	str	r3, [r7, #0]
   197b4:	230b      	movs	r3, #11
   197b6:	18fb      	adds	r3, r7, r3
   197b8:	1c0a      	adds	r2, r1, #0
   197ba:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   197bc:	68fb      	ldr	r3, [r7, #12]
   197be:	2bfe      	cmp	r3, #254	; 0xfe
   197c0:	d904      	bls.n	197cc <prvTraceStoreKernelCallWithParam+0x24>
   197c2:	4b40      	ldr	r3, [pc, #256]	; (198c4 <prvTraceStoreKernelCallWithParam+0x11c>)
   197c4:	0018      	movs	r0, r3
   197c6:	4b40      	ldr	r3, [pc, #256]	; (198c8 <prvTraceStoreKernelCallWithParam+0x120>)
   197c8:	4798      	blx	r3
   197ca:	e077      	b.n	198bc <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   197cc:	230b      	movs	r3, #11
   197ce:	18fb      	adds	r3, r7, r3
   197d0:	781b      	ldrb	r3, [r3, #0]
   197d2:	2b08      	cmp	r3, #8
   197d4:	d904      	bls.n	197e0 <prvTraceStoreKernelCallWithParam+0x38>
   197d6:	4b3d      	ldr	r3, [pc, #244]	; (198cc <prvTraceStoreKernelCallWithParam+0x124>)
   197d8:	0018      	movs	r0, r3
   197da:	4b3b      	ldr	r3, [pc, #236]	; (198c8 <prvTraceStoreKernelCallWithParam+0x120>)
   197dc:	4798      	blx	r3
   197de:	e06d      	b.n	198bc <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   197e0:	4b3b      	ldr	r3, [pc, #236]	; (198d0 <prvTraceStoreKernelCallWithParam+0x128>)
   197e2:	681a      	ldr	r2, [r3, #0]
   197e4:	230b      	movs	r3, #11
   197e6:	18fb      	adds	r3, r7, r3
   197e8:	781b      	ldrb	r3, [r3, #0]
   197ea:	2164      	movs	r1, #100	; 0x64
   197ec:	18d3      	adds	r3, r2, r3
   197ee:	185b      	adds	r3, r3, r1
   197f0:	781b      	ldrb	r3, [r3, #0]
   197f2:	001a      	movs	r2, r3
   197f4:	687b      	ldr	r3, [r7, #4]
   197f6:	429a      	cmp	r2, r3
   197f8:	d204      	bcs.n	19804 <prvTraceStoreKernelCallWithParam+0x5c>
   197fa:	4b36      	ldr	r3, [pc, #216]	; (198d4 <prvTraceStoreKernelCallWithParam+0x12c>)
   197fc:	0018      	movs	r0, r3
   197fe:	4b32      	ldr	r3, [pc, #200]	; (198c8 <prvTraceStoreKernelCallWithParam+0x120>)
   19800:	4798      	blx	r3
   19802:	e05b      	b.n	198bc <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   19804:	4b34      	ldr	r3, [pc, #208]	; (198d8 <prvTraceStoreKernelCallWithParam+0x130>)
   19806:	681b      	ldr	r3, [r3, #0]
   19808:	2b00      	cmp	r3, #0
   1980a:	d004      	beq.n	19816 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   1980c:	4b33      	ldr	r3, [pc, #204]	; (198dc <prvTraceStoreKernelCallWithParam+0x134>)
   1980e:	0018      	movs	r0, r3
   19810:	4b2d      	ldr	r3, [pc, #180]	; (198c8 <prvTraceStoreKernelCallWithParam+0x120>)
   19812:	4798      	blx	r3
		return;
   19814:	e052      	b.n	198bc <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19816:	f3ef 8310 	mrs	r3, PRIMASK
   1981a:	617b      	str	r3, [r7, #20]
  return(result);
   1981c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   1981e:	627b      	str	r3, [r7, #36]	; 0x24
   19820:	2301      	movs	r3, #1
   19822:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19824:	69bb      	ldr	r3, [r7, #24]
   19826:	f383 8810 	msr	PRIMASK, r3
   1982a:	4b2b      	ldr	r3, [pc, #172]	; (198d8 <prvTraceStoreKernelCallWithParam+0x130>)
   1982c:	681b      	ldr	r3, [r3, #0]
   1982e:	1c5a      	adds	r2, r3, #1
   19830:	4b29      	ldr	r3, [pc, #164]	; (198d8 <prvTraceStoreKernelCallWithParam+0x130>)
   19832:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19834:	4b26      	ldr	r3, [pc, #152]	; (198d0 <prvTraceStoreKernelCallWithParam+0x128>)
   19836:	681b      	ldr	r3, [r3, #0]
   19838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1983a:	2b00      	cmp	r3, #0
   1983c:	d034      	beq.n	198a8 <prvTraceStoreKernelCallWithParam+0x100>
   1983e:	4b28      	ldr	r3, [pc, #160]	; (198e0 <prvTraceStoreKernelCallWithParam+0x138>)
   19840:	781b      	ldrb	r3, [r3, #0]
   19842:	2b00      	cmp	r3, #0
   19844:	d030      	beq.n	198a8 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   19846:	20ff      	movs	r0, #255	; 0xff
   19848:	4b26      	ldr	r3, [pc, #152]	; (198e4 <prvTraceStoreKernelCallWithParam+0x13c>)
   1984a:	4798      	blx	r3
   1984c:	0003      	movs	r3, r0
   1984e:	001a      	movs	r2, r3
   19850:	2323      	movs	r3, #35	; 0x23
   19852:	18fb      	adds	r3, r7, r3
   19854:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   19856:	683b      	ldr	r3, [r7, #0]
   19858:	0019      	movs	r1, r3
   1985a:	20ff      	movs	r0, #255	; 0xff
   1985c:	4b22      	ldr	r3, [pc, #136]	; (198e8 <prvTraceStoreKernelCallWithParam+0x140>)
   1985e:	4798      	blx	r3
   19860:	0002      	movs	r2, r0
   19862:	2322      	movs	r3, #34	; 0x22
   19864:	18fb      	adds	r3, r7, r3
   19866:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19868:	2321      	movs	r3, #33	; 0x21
   1986a:	18fb      	adds	r3, r7, r3
   1986c:	687a      	ldr	r2, [r7, #4]
   1986e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   19870:	4b1e      	ldr	r3, [pc, #120]	; (198ec <prvTraceStoreKernelCallWithParam+0x144>)
   19872:	4798      	blx	r3
   19874:	0003      	movs	r3, r0
   19876:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19878:	69fb      	ldr	r3, [r7, #28]
   1987a:	2b00      	cmp	r3, #0
   1987c:	d014      	beq.n	198a8 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   1987e:	69fb      	ldr	r3, [r7, #28]
   19880:	2223      	movs	r2, #35	; 0x23
   19882:	18ba      	adds	r2, r7, r2
   19884:	7812      	ldrb	r2, [r2, #0]
   19886:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   19888:	68fb      	ldr	r3, [r7, #12]
   1988a:	b2da      	uxtb	r2, r3
   1988c:	69fb      	ldr	r3, [r7, #28]
   1988e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19890:	69fb      	ldr	r3, [r7, #28]
   19892:	2221      	movs	r2, #33	; 0x21
   19894:	18ba      	adds	r2, r7, r2
   19896:	7812      	ldrb	r2, [r2, #0]
   19898:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1989a:	69fb      	ldr	r3, [r7, #28]
   1989c:	2222      	movs	r2, #34	; 0x22
   1989e:	18ba      	adds	r2, r7, r2
   198a0:	7812      	ldrb	r2, [r2, #0]
   198a2:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   198a4:	4b12      	ldr	r3, [pc, #72]	; (198f0 <prvTraceStoreKernelCallWithParam+0x148>)
   198a6:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   198a8:	4b0b      	ldr	r3, [pc, #44]	; (198d8 <prvTraceStoreKernelCallWithParam+0x130>)
   198aa:	681b      	ldr	r3, [r3, #0]
   198ac:	1e5a      	subs	r2, r3, #1
   198ae:	4b0a      	ldr	r3, [pc, #40]	; (198d8 <prvTraceStoreKernelCallWithParam+0x130>)
   198b0:	601a      	str	r2, [r3, #0]
   198b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   198b4:	613b      	str	r3, [r7, #16]
   198b6:	693b      	ldr	r3, [r7, #16]
   198b8:	f383 8810 	msr	PRIMASK, r3
}
   198bc:	46bd      	mov	sp, r7
   198be:	b00a      	add	sp, #40	; 0x28
   198c0:	bd80      	pop	{r7, pc}
   198c2:	46c0      	nop			; (mov r8, r8)
   198c4:	0003829c 	.word	0x0003829c
   198c8:	0001a51d 	.word	0x0001a51d
   198cc:	000382dc 	.word	0x000382dc
   198d0:	20000e14 	.word	0x20000e14
   198d4:	0003832c 	.word	0x0003832c
   198d8:	20000d6c 	.word	0x20000d6c
   198dc:	0003837c 	.word	0x0003837c
   198e0:	20000d78 	.word	0x20000d78
   198e4:	0001a731 	.word	0x0001a731
   198e8:	000198f5 	.word	0x000198f5
   198ec:	0001a0d5 	.word	0x0001a0d5
   198f0:	0001a6d9 	.word	0x0001a6d9

000198f4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   198f4:	b580      	push	{r7, lr}
   198f6:	b084      	sub	sp, #16
   198f8:	af00      	add	r7, sp, #0
   198fa:	6078      	str	r0, [r7, #4]
   198fc:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   198fe:	687b      	ldr	r3, [r7, #4]
   19900:	2bff      	cmp	r3, #255	; 0xff
   19902:	d009      	beq.n	19918 <prvTraceGetParam+0x24>
   19904:	687b      	ldr	r3, [r7, #4]
   19906:	4a19      	ldr	r2, [pc, #100]	; (1996c <prvTraceGetParam+0x78>)
   19908:	4293      	cmp	r3, r2
   1990a:	d005      	beq.n	19918 <prvTraceGetParam+0x24>
   1990c:	4b18      	ldr	r3, [pc, #96]	; (19970 <prvTraceGetParam+0x7c>)
   1990e:	0018      	movs	r0, r3
   19910:	4b18      	ldr	r3, [pc, #96]	; (19974 <prvTraceGetParam+0x80>)
   19912:	4798      	blx	r3
   19914:	683b      	ldr	r3, [r7, #0]
   19916:	e024      	b.n	19962 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   19918:	683a      	ldr	r2, [r7, #0]
   1991a:	687b      	ldr	r3, [r7, #4]
   1991c:	429a      	cmp	r2, r3
   1991e:	d801      	bhi.n	19924 <prvTraceGetParam+0x30>
	{
		return param;
   19920:	683b      	ldr	r3, [r7, #0]
   19922:	e01e      	b.n	19962 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   19924:	4b14      	ldr	r3, [pc, #80]	; (19978 <prvTraceGetParam+0x84>)
   19926:	4798      	blx	r3
   19928:	0003      	movs	r3, r0
   1992a:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   1992c:	68fb      	ldr	r3, [r7, #12]
   1992e:	2b00      	cmp	r3, #0
   19930:	d014      	beq.n	1995c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   19932:	68fb      	ldr	r3, [r7, #12]
   19934:	2201      	movs	r2, #1
   19936:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   19938:	687b      	ldr	r3, [r7, #4]
   1993a:	43db      	mvns	r3, r3
   1993c:	683a      	ldr	r2, [r7, #0]
   1993e:	4013      	ands	r3, r2
   19940:	0a1b      	lsrs	r3, r3, #8
   19942:	b2da      	uxtb	r2, r3
   19944:	68fb      	ldr	r3, [r7, #12]
   19946:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   19948:	687b      	ldr	r3, [r7, #4]
   1994a:	43db      	mvns	r3, r3
   1994c:	683a      	ldr	r2, [r7, #0]
   1994e:	4013      	ands	r3, r2
   19950:	0c1b      	lsrs	r3, r3, #16
   19952:	b29a      	uxth	r2, r3
   19954:	68fb      	ldr	r3, [r7, #12]
   19956:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19958:	4b08      	ldr	r3, [pc, #32]	; (1997c <prvTraceGetParam+0x88>)
   1995a:	4798      	blx	r3
		}

		return param & param_max;
   1995c:	683b      	ldr	r3, [r7, #0]
   1995e:	687a      	ldr	r2, [r7, #4]
   19960:	4013      	ands	r3, r2
	}
}
   19962:	0018      	movs	r0, r3
   19964:	46bd      	mov	sp, r7
   19966:	b004      	add	sp, #16
   19968:	bd80      	pop	{r7, pc}
   1996a:	46c0      	nop			; (mov r8, r8)
   1996c:	0000ffff 	.word	0x0000ffff
   19970:	000383b4 	.word	0x000383b4
   19974:	0001a51d 	.word	0x0001a51d
   19978:	0001a0d5 	.word	0x0001a0d5
   1997c:	0001a6d9 	.word	0x0001a6d9

00019980 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   19980:	b580      	push	{r7, lr}
   19982:	b08a      	sub	sp, #40	; 0x28
   19984:	af00      	add	r7, sp, #0
   19986:	6078      	str	r0, [r7, #4]
   19988:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1998a:	2326      	movs	r3, #38	; 0x26
   1998c:	18fb      	adds	r3, r7, r3
   1998e:	2200      	movs	r2, #0
   19990:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   19992:	687b      	ldr	r3, [r7, #4]
   19994:	2bfe      	cmp	r3, #254	; 0xfe
   19996:	d904      	bls.n	199a2 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   19998:	4b2d      	ldr	r3, [pc, #180]	; (19a50 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1999a:	0018      	movs	r0, r3
   1999c:	4b2d      	ldr	r3, [pc, #180]	; (19a54 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1999e:	4798      	blx	r3
   199a0:	e053      	b.n	19a4a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   199a2:	4b2d      	ldr	r3, [pc, #180]	; (19a58 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   199a4:	681b      	ldr	r3, [r3, #0]
   199a6:	2b00      	cmp	r3, #0
   199a8:	d004      	beq.n	199b4 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   199aa:	4b2c      	ldr	r3, [pc, #176]	; (19a5c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   199ac:	0018      	movs	r0, r3
   199ae:	4b29      	ldr	r3, [pc, #164]	; (19a54 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   199b0:	4798      	blx	r3
		return;
   199b2:	e04a      	b.n	19a4a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   199b4:	f3ef 8310 	mrs	r3, PRIMASK
   199b8:	613b      	str	r3, [r7, #16]
  return(result);
   199ba:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   199bc:	623b      	str	r3, [r7, #32]
   199be:	2301      	movs	r3, #1
   199c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   199c2:	697b      	ldr	r3, [r7, #20]
   199c4:	f383 8810 	msr	PRIMASK, r3
   199c8:	4b23      	ldr	r3, [pc, #140]	; (19a58 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   199ca:	681b      	ldr	r3, [r3, #0]
   199cc:	1c5a      	adds	r2, r3, #1
   199ce:	4b22      	ldr	r3, [pc, #136]	; (19a58 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   199d0:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   199d2:	4b23      	ldr	r3, [pc, #140]	; (19a60 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   199d4:	681b      	ldr	r3, [r3, #0]
   199d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   199d8:	2b00      	cmp	r3, #0
   199da:	d02c      	beq.n	19a36 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   199dc:	4b21      	ldr	r3, [pc, #132]	; (19a64 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   199de:	781b      	ldrb	r3, [r3, #0]
   199e0:	2b00      	cmp	r3, #0
   199e2:	d028      	beq.n	19a36 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   199e4:	20ff      	movs	r0, #255	; 0xff
   199e6:	4b20      	ldr	r3, [pc, #128]	; (19a68 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   199e8:	4798      	blx	r3
   199ea:	0003      	movs	r3, r0
   199ec:	001a      	movs	r2, r3
   199ee:	231f      	movs	r3, #31
   199f0:	18fb      	adds	r3, r7, r3
   199f2:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   199f4:	683b      	ldr	r3, [r7, #0]
   199f6:	4a1d      	ldr	r2, [pc, #116]	; (19a6c <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   199f8:	0019      	movs	r1, r3
   199fa:	0010      	movs	r0, r2
   199fc:	4b1c      	ldr	r3, [pc, #112]	; (19a70 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   199fe:	4798      	blx	r3
   19a00:	0002      	movs	r2, r0
   19a02:	2326      	movs	r3, #38	; 0x26
   19a04:	18fb      	adds	r3, r7, r3
   19a06:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   19a08:	4b1a      	ldr	r3, [pc, #104]	; (19a74 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   19a0a:	4798      	blx	r3
   19a0c:	0003      	movs	r3, r0
   19a0e:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   19a10:	69bb      	ldr	r3, [r7, #24]
   19a12:	2b00      	cmp	r3, #0
   19a14:	d00f      	beq.n	19a36 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   19a16:	69bb      	ldr	r3, [r7, #24]
   19a18:	221f      	movs	r2, #31
   19a1a:	18ba      	adds	r2, r7, r2
   19a1c:	7812      	ldrb	r2, [r2, #0]
   19a1e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   19a20:	687b      	ldr	r3, [r7, #4]
   19a22:	b2da      	uxtb	r2, r3
   19a24:	69bb      	ldr	r3, [r7, #24]
   19a26:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   19a28:	69bb      	ldr	r3, [r7, #24]
   19a2a:	2226      	movs	r2, #38	; 0x26
   19a2c:	18ba      	adds	r2, r7, r2
   19a2e:	8812      	ldrh	r2, [r2, #0]
   19a30:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19a32:	4b11      	ldr	r3, [pc, #68]	; (19a78 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   19a34:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19a36:	4b08      	ldr	r3, [pc, #32]	; (19a58 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19a38:	681b      	ldr	r3, [r3, #0]
   19a3a:	1e5a      	subs	r2, r3, #1
   19a3c:	4b06      	ldr	r3, [pc, #24]	; (19a58 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19a3e:	601a      	str	r2, [r3, #0]
   19a40:	6a3b      	ldr	r3, [r7, #32]
   19a42:	60fb      	str	r3, [r7, #12]
   19a44:	68fb      	ldr	r3, [r7, #12]
   19a46:	f383 8810 	msr	PRIMASK, r3
}
   19a4a:	46bd      	mov	sp, r7
   19a4c:	b00a      	add	sp, #40	; 0x28
   19a4e:	bd80      	pop	{r7, pc}
   19a50:	000383f0 	.word	0x000383f0
   19a54:	0001a51d 	.word	0x0001a51d
   19a58:	20000d6c 	.word	0x20000d6c
   19a5c:	00038448 	.word	0x00038448
   19a60:	20000e14 	.word	0x20000e14
   19a64:	20000d78 	.word	0x20000d78
   19a68:	0001a731 	.word	0x0001a731
   19a6c:	0000ffff 	.word	0x0000ffff
   19a70:	000198f5 	.word	0x000198f5
   19a74:	0001a0d5 	.word	0x0001a0d5
   19a78:	0001a6d9 	.word	0x0001a6d9

00019a7c <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   19a7c:	b590      	push	{r4, r7, lr}
   19a7e:	b089      	sub	sp, #36	; 0x24
   19a80:	af00      	add	r7, sp, #0
   19a82:	0002      	movs	r2, r0
   19a84:	1dfb      	adds	r3, r7, #7
   19a86:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   19a88:	1dfb      	adds	r3, r7, #7
   19a8a:	781b      	ldrb	r3, [r3, #0]
   19a8c:	2b0f      	cmp	r3, #15
   19a8e:	d904      	bls.n	19a9a <prvTraceStoreTaskswitch+0x1e>
   19a90:	4b34      	ldr	r3, [pc, #208]	; (19b64 <prvTraceStoreTaskswitch+0xe8>)
   19a92:	0018      	movs	r0, r3
   19a94:	4b34      	ldr	r3, [pc, #208]	; (19b68 <prvTraceStoreTaskswitch+0xec>)
   19a96:	4798      	blx	r3
   19a98:	e061      	b.n	19b5e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19a9a:	f3ef 8310 	mrs	r3, PRIMASK
   19a9e:	60fb      	str	r3, [r7, #12]
  return(result);
   19aa0:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   19aa2:	61fb      	str	r3, [r7, #28]
   19aa4:	2301      	movs	r3, #1
   19aa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19aa8:	693b      	ldr	r3, [r7, #16]
   19aaa:	f383 8810 	msr	PRIMASK, r3
   19aae:	4b2f      	ldr	r3, [pc, #188]	; (19b6c <prvTraceStoreTaskswitch+0xf0>)
   19ab0:	681b      	ldr	r3, [r3, #0]
   19ab2:	1c5a      	adds	r2, r3, #1
   19ab4:	4b2d      	ldr	r3, [pc, #180]	; (19b6c <prvTraceStoreTaskswitch+0xf0>)
   19ab6:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   19ab8:	4b2d      	ldr	r3, [pc, #180]	; (19b70 <prvTraceStoreTaskswitch+0xf4>)
   19aba:	781b      	ldrb	r3, [r3, #0]
   19abc:	1dfa      	adds	r2, r7, #7
   19abe:	7812      	ldrb	r2, [r2, #0]
   19ac0:	429a      	cmp	r2, r3
   19ac2:	d042      	beq.n	19b4a <prvTraceStoreTaskswitch+0xce>
   19ac4:	4b2b      	ldr	r3, [pc, #172]	; (19b74 <prvTraceStoreTaskswitch+0xf8>)
   19ac6:	681b      	ldr	r3, [r3, #0]
   19ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19aca:	2b00      	cmp	r3, #0
   19acc:	d03d      	beq.n	19b4a <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   19ace:	4b2a      	ldr	r3, [pc, #168]	; (19b78 <prvTraceStoreTaskswitch+0xfc>)
   19ad0:	2200      	movs	r2, #0
   19ad2:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19ad4:	231a      	movs	r3, #26
   19ad6:	18fc      	adds	r4, r7, r3
   19ad8:	4b28      	ldr	r3, [pc, #160]	; (19b7c <prvTraceStoreTaskswitch+0x100>)
   19ada:	0018      	movs	r0, r3
   19adc:	4b28      	ldr	r3, [pc, #160]	; (19b80 <prvTraceStoreTaskswitch+0x104>)
   19ade:	4798      	blx	r3
   19ae0:	0003      	movs	r3, r0
   19ae2:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   19ae4:	4b22      	ldr	r3, [pc, #136]	; (19b70 <prvTraceStoreTaskswitch+0xf4>)
   19ae6:	1dfa      	adds	r2, r7, #7
   19ae8:	7812      	ldrb	r2, [r2, #0]
   19aea:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   19aec:	2319      	movs	r3, #25
   19aee:	18fb      	adds	r3, r7, r3
   19af0:	4a1f      	ldr	r2, [pc, #124]	; (19b70 <prvTraceStoreTaskswitch+0xf4>)
   19af2:	7812      	ldrb	r2, [r2, #0]
   19af4:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   19af6:	4b23      	ldr	r3, [pc, #140]	; (19b84 <prvTraceStoreTaskswitch+0x108>)
   19af8:	4798      	blx	r3
   19afa:	0003      	movs	r3, r0
   19afc:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   19afe:	697b      	ldr	r3, [r7, #20]
   19b00:	2b00      	cmp	r3, #0
   19b02:	d022      	beq.n	19b4a <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   19b04:	4b1a      	ldr	r3, [pc, #104]	; (19b70 <prvTraceStoreTaskswitch+0xf4>)
   19b06:	781b      	ldrb	r3, [r3, #0]
   19b08:	0019      	movs	r1, r3
   19b0a:	2003      	movs	r0, #3
   19b0c:	4b1e      	ldr	r3, [pc, #120]	; (19b88 <prvTraceStoreTaskswitch+0x10c>)
   19b0e:	4798      	blx	r3
   19b10:	0003      	movs	r3, r0
   19b12:	2b01      	cmp	r3, #1
   19b14:	d103      	bne.n	19b1e <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   19b16:	697b      	ldr	r3, [r7, #20]
   19b18:	2207      	movs	r2, #7
   19b1a:	701a      	strb	r2, [r3, #0]
   19b1c:	e002      	b.n	19b24 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   19b1e:	697b      	ldr	r3, [r7, #20]
   19b20:	2206      	movs	r2, #6
   19b22:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   19b24:	697b      	ldr	r3, [r7, #20]
   19b26:	221a      	movs	r2, #26
   19b28:	18ba      	adds	r2, r7, r2
   19b2a:	8812      	ldrh	r2, [r2, #0]
   19b2c:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   19b2e:	697b      	ldr	r3, [r7, #20]
   19b30:	2219      	movs	r2, #25
   19b32:	18ba      	adds	r2, r7, r2
   19b34:	7812      	ldrb	r2, [r2, #0]
   19b36:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   19b38:	4b0d      	ldr	r3, [pc, #52]	; (19b70 <prvTraceStoreTaskswitch+0xf4>)
   19b3a:	781b      	ldrb	r3, [r3, #0]
   19b3c:	2201      	movs	r2, #1
   19b3e:	0019      	movs	r1, r3
   19b40:	2003      	movs	r0, #3
   19b42:	4b12      	ldr	r3, [pc, #72]	; (19b8c <prvTraceStoreTaskswitch+0x110>)
   19b44:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   19b46:	4b12      	ldr	r3, [pc, #72]	; (19b90 <prvTraceStoreTaskswitch+0x114>)
   19b48:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   19b4a:	4b08      	ldr	r3, [pc, #32]	; (19b6c <prvTraceStoreTaskswitch+0xf0>)
   19b4c:	681b      	ldr	r3, [r3, #0]
   19b4e:	1e5a      	subs	r2, r3, #1
   19b50:	4b06      	ldr	r3, [pc, #24]	; (19b6c <prvTraceStoreTaskswitch+0xf0>)
   19b52:	601a      	str	r2, [r3, #0]
   19b54:	69fb      	ldr	r3, [r7, #28]
   19b56:	60bb      	str	r3, [r7, #8]
   19b58:	68bb      	ldr	r3, [r7, #8]
   19b5a:	f383 8810 	msr	PRIMASK, r3
}
   19b5e:	46bd      	mov	sp, r7
   19b60:	b009      	add	sp, #36	; 0x24
   19b62:	bd90      	pop	{r4, r7, pc}
   19b64:	00038480 	.word	0x00038480
   19b68:	0001a51d 	.word	0x0001a51d
   19b6c:	20000d6c 	.word	0x20000d6c
   19b70:	20000d78 	.word	0x20000d78
   19b74:	20000e14 	.word	0x20000e14
   19b78:	20000d58 	.word	0x20000d58
   19b7c:	0000ffff 	.word	0x0000ffff
   19b80:	0001a731 	.word	0x0001a731
   19b84:	0001a0d5 	.word	0x0001a0d5
   19b88:	00019d79 	.word	0x00019d79
   19b8c:	00019cd5 	.word	0x00019cd5
   19b90:	0001a6d9 	.word	0x0001a6d9

00019b94 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19b94:	b590      	push	{r4, r7, lr}
   19b96:	b083      	sub	sp, #12
   19b98:	af00      	add	r7, sp, #0
   19b9a:	0004      	movs	r4, r0
   19b9c:	0008      	movs	r0, r1
   19b9e:	0011      	movs	r1, r2
   19ba0:	1dfb      	adds	r3, r7, #7
   19ba2:	1c22      	adds	r2, r4, #0
   19ba4:	701a      	strb	r2, [r3, #0]
   19ba6:	1dbb      	adds	r3, r7, #6
   19ba8:	1c02      	adds	r2, r0, #0
   19baa:	701a      	strb	r2, [r3, #0]
   19bac:	1d7b      	adds	r3, r7, #5
   19bae:	1c0a      	adds	r2, r1, #0
   19bb0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19bb2:	1dfb      	adds	r3, r7, #7
   19bb4:	781b      	ldrb	r3, [r3, #0]
   19bb6:	2b08      	cmp	r3, #8
   19bb8:	d904      	bls.n	19bc4 <prvTraceSetPriorityProperty+0x30>
   19bba:	4b1a      	ldr	r3, [pc, #104]	; (19c24 <prvTraceSetPriorityProperty+0x90>)
   19bbc:	0018      	movs	r0, r3
   19bbe:	4b1a      	ldr	r3, [pc, #104]	; (19c28 <prvTraceSetPriorityProperty+0x94>)
   19bc0:	4798      	blx	r3
   19bc2:	e02c      	b.n	19c1e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19bc4:	4b19      	ldr	r3, [pc, #100]	; (19c2c <prvTraceSetPriorityProperty+0x98>)
   19bc6:	681a      	ldr	r2, [r3, #0]
   19bc8:	1dfb      	adds	r3, r7, #7
   19bca:	781b      	ldrb	r3, [r3, #0]
   19bcc:	2164      	movs	r1, #100	; 0x64
   19bce:	18d3      	adds	r3, r2, r3
   19bd0:	185b      	adds	r3, r3, r1
   19bd2:	781b      	ldrb	r3, [r3, #0]
   19bd4:	1dba      	adds	r2, r7, #6
   19bd6:	7812      	ldrb	r2, [r2, #0]
   19bd8:	429a      	cmp	r2, r3
   19bda:	d904      	bls.n	19be6 <prvTraceSetPriorityProperty+0x52>
   19bdc:	4b14      	ldr	r3, [pc, #80]	; (19c30 <prvTraceSetPriorityProperty+0x9c>)
   19bde:	0018      	movs	r0, r3
   19be0:	4b11      	ldr	r3, [pc, #68]	; (19c28 <prvTraceSetPriorityProperty+0x94>)
   19be2:	4798      	blx	r3
   19be4:	e01b      	b.n	19c1e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   19be6:	4b11      	ldr	r3, [pc, #68]	; (19c2c <prvTraceSetPriorityProperty+0x98>)
   19be8:	681c      	ldr	r4, [r3, #0]
   19bea:	1dfb      	adds	r3, r7, #7
   19bec:	781a      	ldrb	r2, [r3, #0]
   19bee:	1dbb      	adds	r3, r7, #6
   19bf0:	781b      	ldrb	r3, [r3, #0]
   19bf2:	0011      	movs	r1, r2
   19bf4:	0018      	movs	r0, r3
   19bf6:	4b0f      	ldr	r3, [pc, #60]	; (19c34 <prvTraceSetPriorityProperty+0xa0>)
   19bf8:	4798      	blx	r3
   19bfa:	0003      	movs	r3, r0
   19bfc:	0018      	movs	r0, r3
   19bfe:	4b0b      	ldr	r3, [pc, #44]	; (19c2c <prvTraceSetPriorityProperty+0x98>)
   19c00:	681a      	ldr	r2, [r3, #0]
   19c02:	1dfb      	adds	r3, r7, #7
   19c04:	781b      	ldrb	r3, [r3, #0]
   19c06:	2170      	movs	r1, #112	; 0x70
   19c08:	18d3      	adds	r3, r2, r3
   19c0a:	185b      	adds	r3, r3, r1
   19c0c:	781b      	ldrb	r3, [r3, #0]
   19c0e:	18c3      	adds	r3, r0, r3
   19c10:	3301      	adds	r3, #1
   19c12:	229c      	movs	r2, #156	; 0x9c
   19c14:	18e3      	adds	r3, r4, r3
   19c16:	189b      	adds	r3, r3, r2
   19c18:	1d7a      	adds	r2, r7, #5
   19c1a:	7812      	ldrb	r2, [r2, #0]
   19c1c:	701a      	strb	r2, [r3, #0]
}
   19c1e:	46bd      	mov	sp, r7
   19c20:	b003      	add	sp, #12
   19c22:	bd90      	pop	{r4, r7, pc}
   19c24:	00038614 	.word	0x00038614
   19c28:	0001a51d 	.word	0x0001a51d
   19c2c:	20000e14 	.word	0x20000e14
   19c30:	00038660 	.word	0x00038660
   19c34:	0001a129 	.word	0x0001a129

00019c38 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   19c38:	b590      	push	{r4, r7, lr}
   19c3a:	b083      	sub	sp, #12
   19c3c:	af00      	add	r7, sp, #0
   19c3e:	0002      	movs	r2, r0
   19c40:	1dfb      	adds	r3, r7, #7
   19c42:	701a      	strb	r2, [r3, #0]
   19c44:	1dbb      	adds	r3, r7, #6
   19c46:	1c0a      	adds	r2, r1, #0
   19c48:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19c4a:	1dfb      	adds	r3, r7, #7
   19c4c:	781b      	ldrb	r3, [r3, #0]
   19c4e:	2b08      	cmp	r3, #8
   19c50:	d905      	bls.n	19c5e <prvTraceGetPriorityProperty+0x26>
   19c52:	4b1b      	ldr	r3, [pc, #108]	; (19cc0 <prvTraceGetPriorityProperty+0x88>)
   19c54:	0018      	movs	r0, r3
   19c56:	4b1b      	ldr	r3, [pc, #108]	; (19cc4 <prvTraceGetPriorityProperty+0x8c>)
   19c58:	4798      	blx	r3
   19c5a:	2300      	movs	r3, #0
   19c5c:	e02b      	b.n	19cb6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19c5e:	4b1a      	ldr	r3, [pc, #104]	; (19cc8 <prvTraceGetPriorityProperty+0x90>)
   19c60:	681a      	ldr	r2, [r3, #0]
   19c62:	1dfb      	adds	r3, r7, #7
   19c64:	781b      	ldrb	r3, [r3, #0]
   19c66:	2164      	movs	r1, #100	; 0x64
   19c68:	18d3      	adds	r3, r2, r3
   19c6a:	185b      	adds	r3, r3, r1
   19c6c:	781b      	ldrb	r3, [r3, #0]
   19c6e:	1dba      	adds	r2, r7, #6
   19c70:	7812      	ldrb	r2, [r2, #0]
   19c72:	429a      	cmp	r2, r3
   19c74:	d905      	bls.n	19c82 <prvTraceGetPriorityProperty+0x4a>
   19c76:	4b15      	ldr	r3, [pc, #84]	; (19ccc <prvTraceGetPriorityProperty+0x94>)
   19c78:	0018      	movs	r0, r3
   19c7a:	4b12      	ldr	r3, [pc, #72]	; (19cc4 <prvTraceGetPriorityProperty+0x8c>)
   19c7c:	4798      	blx	r3
   19c7e:	2300      	movs	r3, #0
   19c80:	e019      	b.n	19cb6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   19c82:	4b11      	ldr	r3, [pc, #68]	; (19cc8 <prvTraceGetPriorityProperty+0x90>)
   19c84:	681c      	ldr	r4, [r3, #0]
   19c86:	1dfb      	adds	r3, r7, #7
   19c88:	781a      	ldrb	r2, [r3, #0]
   19c8a:	1dbb      	adds	r3, r7, #6
   19c8c:	781b      	ldrb	r3, [r3, #0]
   19c8e:	0011      	movs	r1, r2
   19c90:	0018      	movs	r0, r3
   19c92:	4b0f      	ldr	r3, [pc, #60]	; (19cd0 <prvTraceGetPriorityProperty+0x98>)
   19c94:	4798      	blx	r3
   19c96:	0003      	movs	r3, r0
   19c98:	0018      	movs	r0, r3
   19c9a:	4b0b      	ldr	r3, [pc, #44]	; (19cc8 <prvTraceGetPriorityProperty+0x90>)
   19c9c:	681a      	ldr	r2, [r3, #0]
   19c9e:	1dfb      	adds	r3, r7, #7
   19ca0:	781b      	ldrb	r3, [r3, #0]
   19ca2:	2170      	movs	r1, #112	; 0x70
   19ca4:	18d3      	adds	r3, r2, r3
   19ca6:	185b      	adds	r3, r3, r1
   19ca8:	781b      	ldrb	r3, [r3, #0]
   19caa:	18c3      	adds	r3, r0, r3
   19cac:	3301      	adds	r3, #1
   19cae:	229c      	movs	r2, #156	; 0x9c
   19cb0:	18e3      	adds	r3, r4, r3
   19cb2:	189b      	adds	r3, r3, r2
   19cb4:	781b      	ldrb	r3, [r3, #0]
}
   19cb6:	0018      	movs	r0, r3
   19cb8:	46bd      	mov	sp, r7
   19cba:	b003      	add	sp, #12
   19cbc:	bd90      	pop	{r4, r7, pc}
   19cbe:	46c0      	nop			; (mov r8, r8)
   19cc0:	000386a0 	.word	0x000386a0
   19cc4:	0001a51d 	.word	0x0001a51d
   19cc8:	20000e14 	.word	0x20000e14
   19ccc:	000386ec 	.word	0x000386ec
   19cd0:	0001a129 	.word	0x0001a129

00019cd4 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19cd4:	b590      	push	{r4, r7, lr}
   19cd6:	b083      	sub	sp, #12
   19cd8:	af00      	add	r7, sp, #0
   19cda:	0004      	movs	r4, r0
   19cdc:	0008      	movs	r0, r1
   19cde:	0011      	movs	r1, r2
   19ce0:	1dfb      	adds	r3, r7, #7
   19ce2:	1c22      	adds	r2, r4, #0
   19ce4:	701a      	strb	r2, [r3, #0]
   19ce6:	1dbb      	adds	r3, r7, #6
   19ce8:	1c02      	adds	r2, r0, #0
   19cea:	701a      	strb	r2, [r3, #0]
   19cec:	1d7b      	adds	r3, r7, #5
   19cee:	1c0a      	adds	r2, r1, #0
   19cf0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19cf2:	1dfb      	adds	r3, r7, #7
   19cf4:	781b      	ldrb	r3, [r3, #0]
   19cf6:	2b08      	cmp	r3, #8
   19cf8:	d904      	bls.n	19d04 <prvTraceSetObjectState+0x30>
   19cfa:	4b1a      	ldr	r3, [pc, #104]	; (19d64 <prvTraceSetObjectState+0x90>)
   19cfc:	0018      	movs	r0, r3
   19cfe:	4b1a      	ldr	r3, [pc, #104]	; (19d68 <prvTraceSetObjectState+0x94>)
   19d00:	4798      	blx	r3
   19d02:	e02b      	b.n	19d5c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19d04:	4b19      	ldr	r3, [pc, #100]	; (19d6c <prvTraceSetObjectState+0x98>)
   19d06:	681a      	ldr	r2, [r3, #0]
   19d08:	1dfb      	adds	r3, r7, #7
   19d0a:	781b      	ldrb	r3, [r3, #0]
   19d0c:	2164      	movs	r1, #100	; 0x64
   19d0e:	18d3      	adds	r3, r2, r3
   19d10:	185b      	adds	r3, r3, r1
   19d12:	781b      	ldrb	r3, [r3, #0]
   19d14:	1dba      	adds	r2, r7, #6
   19d16:	7812      	ldrb	r2, [r2, #0]
   19d18:	429a      	cmp	r2, r3
   19d1a:	d904      	bls.n	19d26 <prvTraceSetObjectState+0x52>
   19d1c:	4b14      	ldr	r3, [pc, #80]	; (19d70 <prvTraceSetObjectState+0x9c>)
   19d1e:	0018      	movs	r0, r3
   19d20:	4b11      	ldr	r3, [pc, #68]	; (19d68 <prvTraceSetObjectState+0x94>)
   19d22:	4798      	blx	r3
   19d24:	e01a      	b.n	19d5c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   19d26:	4b11      	ldr	r3, [pc, #68]	; (19d6c <prvTraceSetObjectState+0x98>)
   19d28:	681c      	ldr	r4, [r3, #0]
   19d2a:	1dfb      	adds	r3, r7, #7
   19d2c:	781a      	ldrb	r2, [r3, #0]
   19d2e:	1dbb      	adds	r3, r7, #6
   19d30:	781b      	ldrb	r3, [r3, #0]
   19d32:	0011      	movs	r1, r2
   19d34:	0018      	movs	r0, r3
   19d36:	4b0f      	ldr	r3, [pc, #60]	; (19d74 <prvTraceSetObjectState+0xa0>)
   19d38:	4798      	blx	r3
   19d3a:	0003      	movs	r3, r0
   19d3c:	0018      	movs	r0, r3
   19d3e:	4b0b      	ldr	r3, [pc, #44]	; (19d6c <prvTraceSetObjectState+0x98>)
   19d40:	681a      	ldr	r2, [r3, #0]
   19d42:	1dfb      	adds	r3, r7, #7
   19d44:	781b      	ldrb	r3, [r3, #0]
   19d46:	2170      	movs	r1, #112	; 0x70
   19d48:	18d3      	adds	r3, r2, r3
   19d4a:	185b      	adds	r3, r3, r1
   19d4c:	781b      	ldrb	r3, [r3, #0]
   19d4e:	18c3      	adds	r3, r0, r3
   19d50:	229c      	movs	r2, #156	; 0x9c
   19d52:	18e3      	adds	r3, r4, r3
   19d54:	189b      	adds	r3, r3, r2
   19d56:	1d7a      	adds	r2, r7, #5
   19d58:	7812      	ldrb	r2, [r2, #0]
   19d5a:	701a      	strb	r2, [r3, #0]
}
   19d5c:	46bd      	mov	sp, r7
   19d5e:	b003      	add	sp, #12
   19d60:	bd90      	pop	{r4, r7, pc}
   19d62:	46c0      	nop			; (mov r8, r8)
   19d64:	0003872c 	.word	0x0003872c
   19d68:	0001a51d 	.word	0x0001a51d
   19d6c:	20000e14 	.word	0x20000e14
   19d70:	00038770 	.word	0x00038770
   19d74:	0001a129 	.word	0x0001a129

00019d78 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   19d78:	b590      	push	{r4, r7, lr}
   19d7a:	b083      	sub	sp, #12
   19d7c:	af00      	add	r7, sp, #0
   19d7e:	0002      	movs	r2, r0
   19d80:	1dfb      	adds	r3, r7, #7
   19d82:	701a      	strb	r2, [r3, #0]
   19d84:	1dbb      	adds	r3, r7, #6
   19d86:	1c0a      	adds	r2, r1, #0
   19d88:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19d8a:	1dfb      	adds	r3, r7, #7
   19d8c:	781b      	ldrb	r3, [r3, #0]
   19d8e:	2b08      	cmp	r3, #8
   19d90:	d905      	bls.n	19d9e <prvTraceGetObjectState+0x26>
   19d92:	4b1a      	ldr	r3, [pc, #104]	; (19dfc <prvTraceGetObjectState+0x84>)
   19d94:	0018      	movs	r0, r3
   19d96:	4b1a      	ldr	r3, [pc, #104]	; (19e00 <prvTraceGetObjectState+0x88>)
   19d98:	4798      	blx	r3
   19d9a:	2300      	movs	r3, #0
   19d9c:	e02a      	b.n	19df4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19d9e:	4b19      	ldr	r3, [pc, #100]	; (19e04 <prvTraceGetObjectState+0x8c>)
   19da0:	681a      	ldr	r2, [r3, #0]
   19da2:	1dfb      	adds	r3, r7, #7
   19da4:	781b      	ldrb	r3, [r3, #0]
   19da6:	2164      	movs	r1, #100	; 0x64
   19da8:	18d3      	adds	r3, r2, r3
   19daa:	185b      	adds	r3, r3, r1
   19dac:	781b      	ldrb	r3, [r3, #0]
   19dae:	1dba      	adds	r2, r7, #6
   19db0:	7812      	ldrb	r2, [r2, #0]
   19db2:	429a      	cmp	r2, r3
   19db4:	d905      	bls.n	19dc2 <prvTraceGetObjectState+0x4a>
   19db6:	4b14      	ldr	r3, [pc, #80]	; (19e08 <prvTraceGetObjectState+0x90>)
   19db8:	0018      	movs	r0, r3
   19dba:	4b11      	ldr	r3, [pc, #68]	; (19e00 <prvTraceGetObjectState+0x88>)
   19dbc:	4798      	blx	r3
   19dbe:	2300      	movs	r3, #0
   19dc0:	e018      	b.n	19df4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   19dc2:	4b10      	ldr	r3, [pc, #64]	; (19e04 <prvTraceGetObjectState+0x8c>)
   19dc4:	681c      	ldr	r4, [r3, #0]
   19dc6:	1dfb      	adds	r3, r7, #7
   19dc8:	781a      	ldrb	r2, [r3, #0]
   19dca:	1dbb      	adds	r3, r7, #6
   19dcc:	781b      	ldrb	r3, [r3, #0]
   19dce:	0011      	movs	r1, r2
   19dd0:	0018      	movs	r0, r3
   19dd2:	4b0e      	ldr	r3, [pc, #56]	; (19e0c <prvTraceGetObjectState+0x94>)
   19dd4:	4798      	blx	r3
   19dd6:	0003      	movs	r3, r0
   19dd8:	0018      	movs	r0, r3
   19dda:	4b0a      	ldr	r3, [pc, #40]	; (19e04 <prvTraceGetObjectState+0x8c>)
   19ddc:	681a      	ldr	r2, [r3, #0]
   19dde:	1dfb      	adds	r3, r7, #7
   19de0:	781b      	ldrb	r3, [r3, #0]
   19de2:	2170      	movs	r1, #112	; 0x70
   19de4:	18d3      	adds	r3, r2, r3
   19de6:	185b      	adds	r3, r3, r1
   19de8:	781b      	ldrb	r3, [r3, #0]
   19dea:	18c3      	adds	r3, r0, r3
   19dec:	229c      	movs	r2, #156	; 0x9c
   19dee:	18e3      	adds	r3, r4, r3
   19df0:	189b      	adds	r3, r3, r2
   19df2:	781b      	ldrb	r3, [r3, #0]
}
   19df4:	0018      	movs	r0, r3
   19df6:	46bd      	mov	sp, r7
   19df8:	b003      	add	sp, #12
   19dfa:	bd90      	pop	{r4, r7, pc}
   19dfc:	000387ac 	.word	0x000387ac
   19e00:	0001a51d 	.word	0x0001a51d
   19e04:	20000e14 	.word	0x20000e14
   19e08:	000387f0 	.word	0x000387f0
   19e0c:	0001a129 	.word	0x0001a129

00019e10 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   19e10:	b590      	push	{r4, r7, lr}
   19e12:	b083      	sub	sp, #12
   19e14:	af00      	add	r7, sp, #0
   19e16:	0002      	movs	r2, r0
   19e18:	1dfb      	adds	r3, r7, #7
   19e1a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   19e1c:	4b11      	ldr	r3, [pc, #68]	; (19e64 <prvTraceSetTaskInstanceFinished+0x54>)
   19e1e:	681b      	ldr	r3, [r3, #0]
   19e20:	2267      	movs	r2, #103	; 0x67
   19e22:	5c9b      	ldrb	r3, [r3, r2]
   19e24:	1dfa      	adds	r2, r7, #7
   19e26:	7812      	ldrb	r2, [r2, #0]
   19e28:	429a      	cmp	r2, r3
   19e2a:	d904      	bls.n	19e36 <prvTraceSetTaskInstanceFinished+0x26>
   19e2c:	4b0e      	ldr	r3, [pc, #56]	; (19e68 <prvTraceSetTaskInstanceFinished+0x58>)
   19e2e:	0018      	movs	r0, r3
   19e30:	4b0e      	ldr	r3, [pc, #56]	; (19e6c <prvTraceSetTaskInstanceFinished+0x5c>)
   19e32:	4798      	blx	r3
   19e34:	e013      	b.n	19e5e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   19e36:	4b0b      	ldr	r3, [pc, #44]	; (19e64 <prvTraceSetTaskInstanceFinished+0x54>)
   19e38:	681c      	ldr	r4, [r3, #0]
   19e3a:	1dfb      	adds	r3, r7, #7
   19e3c:	781b      	ldrb	r3, [r3, #0]
   19e3e:	2103      	movs	r1, #3
   19e40:	0018      	movs	r0, r3
   19e42:	4b0b      	ldr	r3, [pc, #44]	; (19e70 <prvTraceSetTaskInstanceFinished+0x60>)
   19e44:	4798      	blx	r3
   19e46:	0003      	movs	r3, r0
   19e48:	0019      	movs	r1, r3
   19e4a:	4b06      	ldr	r3, [pc, #24]	; (19e64 <prvTraceSetTaskInstanceFinished+0x54>)
   19e4c:	681b      	ldr	r3, [r3, #0]
   19e4e:	2273      	movs	r2, #115	; 0x73
   19e50:	5c9b      	ldrb	r3, [r3, r2]
   19e52:	18cb      	adds	r3, r1, r3
   19e54:	229c      	movs	r2, #156	; 0x9c
   19e56:	18e3      	adds	r3, r4, r3
   19e58:	189b      	adds	r3, r3, r2
   19e5a:	2200      	movs	r2, #0
   19e5c:	701a      	strb	r2, [r3, #0]
#endif
}
   19e5e:	46bd      	mov	sp, r7
   19e60:	b003      	add	sp, #12
   19e62:	bd90      	pop	{r4, r7, pc}
   19e64:	20000e14 	.word	0x20000e14
   19e68:	0003882c 	.word	0x0003882c
   19e6c:	0001a51d 	.word	0x0001a51d
   19e70:	0001a129 	.word	0x0001a129

00019e74 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   19e74:	b580      	push	{r7, lr}
   19e76:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   19e78:	4b75      	ldr	r3, [pc, #468]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19e7a:	681b      	ldr	r3, [r3, #0]
   19e7c:	2b00      	cmp	r3, #0
   19e7e:	d103      	bne.n	19e88 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   19e80:	4b73      	ldr	r3, [pc, #460]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19e82:	4a74      	ldr	r2, [pc, #464]	; (1a054 <prvTraceInitTraceData+0x1e0>)
   19e84:	601a      	str	r2, [r3, #0]
   19e86:	e006      	b.n	19e96 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   19e88:	4b71      	ldr	r3, [pc, #452]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19e8a:	681b      	ldr	r3, [r3, #0]
   19e8c:	781b      	ldrb	r3, [r3, #0]
   19e8e:	b2db      	uxtb	r3, r3
   19e90:	2b01      	cmp	r3, #1
   19e92:	d100      	bne.n	19e96 <prvTraceInitTraceData+0x22>
   19e94:	e0d8      	b.n	1a048 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   19e96:	4b70      	ldr	r3, [pc, #448]	; (1a058 <prvTraceInitTraceData+0x1e4>)
   19e98:	681a      	ldr	r2, [r3, #0]
   19e9a:	4b70      	ldr	r3, [pc, #448]	; (1a05c <prvTraceInitTraceData+0x1e8>)
   19e9c:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   19e9e:	4b6c      	ldr	r3, [pc, #432]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19ea0:	6818      	ldr	r0, [r3, #0]
   19ea2:	23bd      	movs	r3, #189	; 0xbd
   19ea4:	011b      	lsls	r3, r3, #4
   19ea6:	001a      	movs	r2, r3
   19ea8:	2100      	movs	r1, #0
   19eaa:	4b6d      	ldr	r3, [pc, #436]	; (1a060 <prvTraceInitTraceData+0x1ec>)
   19eac:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   19eae:	4b68      	ldr	r3, [pc, #416]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19eb0:	681b      	ldr	r3, [r3, #0]
   19eb2:	4a6c      	ldr	r2, [pc, #432]	; (1a064 <prvTraceInitTraceData+0x1f0>)
   19eb4:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   19eb6:	4b66      	ldr	r3, [pc, #408]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19eb8:	681b      	ldr	r3, [r3, #0]
   19eba:	2205      	movs	r2, #5
   19ebc:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   19ebe:	4b64      	ldr	r3, [pc, #400]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19ec0:	681b      	ldr	r3, [r3, #0]
   19ec2:	2200      	movs	r2, #0
   19ec4:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   19ec6:	4b62      	ldr	r3, [pc, #392]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19ec8:	681b      	ldr	r3, [r3, #0]
   19eca:	22bd      	movs	r2, #189	; 0xbd
   19ecc:	0112      	lsls	r2, r2, #4
   19ece:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   19ed0:	4b5f      	ldr	r3, [pc, #380]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19ed2:	681b      	ldr	r3, [r3, #0]
   19ed4:	2296      	movs	r2, #150	; 0x96
   19ed6:	0052      	lsls	r2, r2, #1
   19ed8:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   19eda:	4b5d      	ldr	r3, [pc, #372]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19edc:	681b      	ldr	r3, [r3, #0]
   19ede:	4a62      	ldr	r2, [pc, #392]	; (1a068 <prvTraceInitTraceData+0x1f4>)
   19ee0:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   19ee2:	4b5b      	ldr	r3, [pc, #364]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19ee4:	681b      	ldr	r3, [r3, #0]
   19ee6:	2200      	movs	r2, #0
   19ee8:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   19eea:	4b59      	ldr	r3, [pc, #356]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19eec:	681b      	ldr	r3, [r3, #0]
   19eee:	2200      	movs	r2, #0
   19ef0:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   19ef2:	4b5e      	ldr	r3, [pc, #376]	; (1a06c <prvTraceInitTraceData+0x1f8>)
   19ef4:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   19ef6:	4b56      	ldr	r3, [pc, #344]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19ef8:	681b      	ldr	r3, [r3, #0]
   19efa:	4a5d      	ldr	r2, [pc, #372]	; (1a070 <prvTraceInitTraceData+0x1fc>)
   19efc:	495d      	ldr	r1, [pc, #372]	; (1a074 <prvTraceInitTraceData+0x200>)
   19efe:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   19f00:	4b53      	ldr	r3, [pc, #332]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f02:	681a      	ldr	r2, [r3, #0]
   19f04:	23ac      	movs	r3, #172	; 0xac
   19f06:	00db      	lsls	r3, r3, #3
   19f08:	21c8      	movs	r1, #200	; 0xc8
   19f0a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   19f0c:	4b50      	ldr	r3, [pc, #320]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f0e:	681b      	ldr	r3, [r3, #0]
   19f10:	4a59      	ldr	r2, [pc, #356]	; (1a078 <prvTraceInitTraceData+0x204>)
   19f12:	2101      	movs	r1, #1
   19f14:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   19f16:	4b4e      	ldr	r3, [pc, #312]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f18:	681a      	ldr	r2, [r3, #0]
   19f1a:	23d7      	movs	r3, #215	; 0xd7
   19f1c:	00db      	lsls	r3, r3, #3
   19f1e:	4957      	ldr	r1, [pc, #348]	; (1a07c <prvTraceInitTraceData+0x208>)
   19f20:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   19f22:	4b4b      	ldr	r3, [pc, #300]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f24:	681b      	ldr	r3, [r3, #0]
   19f26:	4a56      	ldr	r2, [pc, #344]	; (1a080 <prvTraceInitTraceData+0x20c>)
   19f28:	4694      	mov	ip, r2
   19f2a:	4463      	add	r3, ip
   19f2c:	4955      	ldr	r1, [pc, #340]	; (1a084 <prvTraceInitTraceData+0x210>)
   19f2e:	2250      	movs	r2, #80	; 0x50
   19f30:	0018      	movs	r0, r3
   19f32:	4b55      	ldr	r3, [pc, #340]	; (1a088 <prvTraceInitTraceData+0x214>)
   19f34:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   19f36:	4b46      	ldr	r3, [pc, #280]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f38:	681b      	ldr	r3, [r3, #0]
   19f3a:	4a54      	ldr	r2, [pc, #336]	; (1a08c <prvTraceInitTraceData+0x218>)
   19f3c:	4954      	ldr	r1, [pc, #336]	; (1a090 <prvTraceInitTraceData+0x21c>)
   19f3e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   19f40:	4b43      	ldr	r3, [pc, #268]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f42:	681b      	ldr	r3, [r3, #0]
   19f44:	4a53      	ldr	r2, [pc, #332]	; (1a094 <prvTraceInitTraceData+0x220>)
   19f46:	210a      	movs	r1, #10
   19f48:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   19f4a:	4b41      	ldr	r3, [pc, #260]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f4c:	681b      	ldr	r3, [r3, #0]
   19f4e:	4a52      	ldr	r2, [pc, #328]	; (1a098 <prvTraceInitTraceData+0x224>)
   19f50:	210b      	movs	r1, #11
   19f52:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   19f54:	4b3e      	ldr	r3, [pc, #248]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f56:	681b      	ldr	r3, [r3, #0]
   19f58:	4a50      	ldr	r2, [pc, #320]	; (1a09c <prvTraceInitTraceData+0x228>)
   19f5a:	210c      	movs	r1, #12
   19f5c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   19f5e:	4b3c      	ldr	r3, [pc, #240]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f60:	681b      	ldr	r3, [r3, #0]
   19f62:	4a4f      	ldr	r2, [pc, #316]	; (1a0a0 <prvTraceInitTraceData+0x22c>)
   19f64:	210d      	movs	r1, #13
   19f66:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   19f68:	4b39      	ldr	r3, [pc, #228]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f6a:	681b      	ldr	r3, [r3, #0]
   19f6c:	4a4d      	ldr	r2, [pc, #308]	; (1a0a4 <prvTraceInitTraceData+0x230>)
   19f6e:	2171      	movs	r1, #113	; 0x71
   19f70:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   19f72:	4b37      	ldr	r3, [pc, #220]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f74:	681b      	ldr	r3, [r3, #0]
   19f76:	4a4c      	ldr	r2, [pc, #304]	; (1a0a8 <prvTraceInitTraceData+0x234>)
   19f78:	2172      	movs	r1, #114	; 0x72
   19f7a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   19f7c:	4b34      	ldr	r3, [pc, #208]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f7e:	681b      	ldr	r3, [r3, #0]
   19f80:	4a4a      	ldr	r2, [pc, #296]	; (1a0ac <prvTraceInitTraceData+0x238>)
   19f82:	2173      	movs	r1, #115	; 0x73
   19f84:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   19f86:	4b32      	ldr	r3, [pc, #200]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f88:	681b      	ldr	r3, [r3, #0]
   19f8a:	4a49      	ldr	r2, [pc, #292]	; (1a0b0 <prvTraceInitTraceData+0x23c>)
   19f8c:	2174      	movs	r1, #116	; 0x74
   19f8e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   19f90:	4b2f      	ldr	r3, [pc, #188]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f92:	681b      	ldr	r3, [r3, #0]
   19f94:	4a47      	ldr	r2, [pc, #284]	; (1a0b4 <prvTraceInitTraceData+0x240>)
   19f96:	21f1      	movs	r1, #241	; 0xf1
   19f98:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   19f9a:	4b2d      	ldr	r3, [pc, #180]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19f9c:	681b      	ldr	r3, [r3, #0]
   19f9e:	4a46      	ldr	r2, [pc, #280]	; (1a0b8 <prvTraceInitTraceData+0x244>)
   19fa0:	21f2      	movs	r1, #242	; 0xf2
   19fa2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   19fa4:	4b2a      	ldr	r3, [pc, #168]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19fa6:	681b      	ldr	r3, [r3, #0]
   19fa8:	4a44      	ldr	r2, [pc, #272]	; (1a0bc <prvTraceInitTraceData+0x248>)
   19faa:	21f3      	movs	r1, #243	; 0xf3
   19fac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   19fae:	4b28      	ldr	r3, [pc, #160]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19fb0:	681b      	ldr	r3, [r3, #0]
   19fb2:	4a43      	ldr	r2, [pc, #268]	; (1a0c0 <prvTraceInitTraceData+0x24c>)
   19fb4:	21f4      	movs	r1, #244	; 0xf4
   19fb6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   19fb8:	4b42      	ldr	r3, [pc, #264]	; (1a0c4 <prvTraceInitTraceData+0x250>)
   19fba:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   19fbc:	4b24      	ldr	r3, [pc, #144]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19fbe:	681b      	ldr	r3, [r3, #0]
   19fc0:	22f4      	movs	r2, #244	; 0xf4
   19fc2:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   19fc4:	4b22      	ldr	r3, [pc, #136]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19fc6:	681b      	ldr	r3, [r3, #0]
   19fc8:	22f3      	movs	r2, #243	; 0xf3
   19fca:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   19fcc:	4b20      	ldr	r3, [pc, #128]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19fce:	681b      	ldr	r3, [r3, #0]
   19fd0:	22f2      	movs	r2, #242	; 0xf2
   19fd2:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   19fd4:	4b1e      	ldr	r3, [pc, #120]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19fd6:	681b      	ldr	r3, [r3, #0]
   19fd8:	22f1      	movs	r2, #241	; 0xf1
   19fda:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   19fdc:	4b1c      	ldr	r3, [pc, #112]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19fde:	681b      	ldr	r3, [r3, #0]
   19fe0:	2274      	movs	r2, #116	; 0x74
   19fe2:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   19fe4:	4b1a      	ldr	r3, [pc, #104]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19fe6:	681b      	ldr	r3, [r3, #0]
   19fe8:	2273      	movs	r2, #115	; 0x73
   19fea:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   19fec:	4b18      	ldr	r3, [pc, #96]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19fee:	681b      	ldr	r3, [r3, #0]
   19ff0:	2272      	movs	r2, #114	; 0x72
   19ff2:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   19ff4:	4b16      	ldr	r3, [pc, #88]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19ff6:	681b      	ldr	r3, [r3, #0]
   19ff8:	2271      	movs	r2, #113	; 0x71
   19ffa:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   19ffc:	4b14      	ldr	r3, [pc, #80]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   19ffe:	681b      	ldr	r3, [r3, #0]
   1a000:	2204      	movs	r2, #4
   1a002:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1a004:	4b12      	ldr	r3, [pc, #72]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   1a006:	681b      	ldr	r3, [r3, #0]
   1a008:	2203      	movs	r2, #3
   1a00a:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1a00c:	4b10      	ldr	r3, [pc, #64]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   1a00e:	681b      	ldr	r3, [r3, #0]
   1a010:	2202      	movs	r2, #2
   1a012:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1a014:	4b0e      	ldr	r3, [pc, #56]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   1a016:	681b      	ldr	r3, [r3, #0]
   1a018:	2201      	movs	r2, #1
   1a01a:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1a01c:	4b2a      	ldr	r3, [pc, #168]	; (1a0c8 <prvTraceInitTraceData+0x254>)
   1a01e:	681b      	ldr	r3, [r3, #0]
   1a020:	2b00      	cmp	r3, #0
   1a022:	d012      	beq.n	1a04a <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a024:	4b0a      	ldr	r3, [pc, #40]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   1a026:	681b      	ldr	r3, [r3, #0]
   1a028:	4a15      	ldr	r2, [pc, #84]	; (1a080 <prvTraceInitTraceData+0x20c>)
   1a02a:	1898      	adds	r0, r3, r2
   1a02c:	4b26      	ldr	r3, [pc, #152]	; (1a0c8 <prvTraceInitTraceData+0x254>)
   1a02e:	681b      	ldr	r3, [r3, #0]
   1a030:	2250      	movs	r2, #80	; 0x50
   1a032:	0019      	movs	r1, r3
   1a034:	4b14      	ldr	r3, [pc, #80]	; (1a088 <prvTraceInitTraceData+0x214>)
   1a036:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1a038:	4b05      	ldr	r3, [pc, #20]	; (1a050 <prvTraceInitTraceData+0x1dc>)
   1a03a:	681b      	ldr	r3, [r3, #0]
   1a03c:	4a23      	ldr	r2, [pc, #140]	; (1a0cc <prvTraceInitTraceData+0x258>)
   1a03e:	2101      	movs	r1, #1
   1a040:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1a042:	4b23      	ldr	r3, [pc, #140]	; (1a0d0 <prvTraceInitTraceData+0x25c>)
   1a044:	4798      	blx	r3
   1a046:	e000      	b.n	1a04a <prvTraceInitTraceData+0x1d6>
			return;
   1a048:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1a04a:	46bd      	mov	sp, r7
   1a04c:	bd80      	pop	{r7, pc}
   1a04e:	46c0      	nop			; (mov r8, r8)
   1a050:	20000e14 	.word	0x20000e14
   1a054:	2000462c 	.word	0x2000462c
   1a058:	e000e018 	.word	0xe000e018
   1a05c:	200051fc 	.word	0x200051fc
   1a060:	00035543 	.word	0x00035543
   1a064:	00001aa1 	.word	0x00001aa1
   1a068:	f0f0f0f0 	.word	0xf0f0f0f0
   1a06c:	00018fd9 	.word	0x00018fd9
   1a070:	0000055c 	.word	0x0000055c
   1a074:	f1f1f1f1 	.word	0xf1f1f1f1
   1a078:	00000564 	.word	0x00000564
   1a07c:	f2f2f2f2 	.word	0xf2f2f2f2
   1a080:	000006bc 	.word	0x000006bc
   1a084:	00038874 	.word	0x00038874
   1a088:	0001a3e9 	.word	0x0001a3e9
   1a08c:	0000070c 	.word	0x0000070c
   1a090:	f3f3f3f3 	.word	0xf3f3f3f3
   1a094:	00000bc4 	.word	0x00000bc4
   1a098:	00000bc5 	.word	0x00000bc5
   1a09c:	00000bc6 	.word	0x00000bc6
   1a0a0:	00000bc7 	.word	0x00000bc7
   1a0a4:	00000bc8 	.word	0x00000bc8
   1a0a8:	00000bc9 	.word	0x00000bc9
   1a0ac:	00000bca 	.word	0x00000bca
   1a0b0:	00000bcb 	.word	0x00000bcb
   1a0b4:	00000bcc 	.word	0x00000bcc
   1a0b8:	00000bcd 	.word	0x00000bcd
   1a0bc:	00000bce 	.word	0x00000bce
   1a0c0:	00000bcf 	.word	0x00000bcf
   1a0c4:	00019179 	.word	0x00019179
   1a0c8:	20000d74 	.word	0x20000d74
   1a0cc:	000006b4 	.word	0x000006b4
   1a0d0:	000193e1 	.word	0x000193e1

0001a0d4 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1a0d4:	b580      	push	{r7, lr}
   1a0d6:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1a0d8:	4b10      	ldr	r3, [pc, #64]	; (1a11c <prvTraceNextFreeEventBufferSlot+0x48>)
   1a0da:	681b      	ldr	r3, [r3, #0]
   1a0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a0de:	2b00      	cmp	r3, #0
   1a0e0:	d101      	bne.n	1a0e6 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1a0e2:	2300      	movs	r3, #0
   1a0e4:	e017      	b.n	1a116 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a0e6:	4b0d      	ldr	r3, [pc, #52]	; (1a11c <prvTraceNextFreeEventBufferSlot+0x48>)
   1a0e8:	681b      	ldr	r3, [r3, #0]
   1a0ea:	69da      	ldr	r2, [r3, #28]
   1a0ec:	232c      	movs	r3, #44	; 0x2c
   1a0ee:	33ff      	adds	r3, #255	; 0xff
   1a0f0:	429a      	cmp	r2, r3
   1a0f2:	d905      	bls.n	1a100 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1a0f4:	4b0a      	ldr	r3, [pc, #40]	; (1a120 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1a0f6:	0018      	movs	r0, r3
   1a0f8:	4b0a      	ldr	r3, [pc, #40]	; (1a124 <prvTraceNextFreeEventBufferSlot+0x50>)
   1a0fa:	4798      	blx	r3
		return NULL;
   1a0fc:	2300      	movs	r3, #0
   1a0fe:	e00a      	b.n	1a116 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1a100:	4b06      	ldr	r3, [pc, #24]	; (1a11c <prvTraceNextFreeEventBufferSlot+0x48>)
   1a102:	681a      	ldr	r2, [r3, #0]
   1a104:	4b05      	ldr	r3, [pc, #20]	; (1a11c <prvTraceNextFreeEventBufferSlot+0x48>)
   1a106:	681b      	ldr	r3, [r3, #0]
   1a108:	69db      	ldr	r3, [r3, #28]
   1a10a:	009b      	lsls	r3, r3, #2
   1a10c:	21e2      	movs	r1, #226	; 0xe2
   1a10e:	00c9      	lsls	r1, r1, #3
   1a110:	468c      	mov	ip, r1
   1a112:	4463      	add	r3, ip
   1a114:	18d3      	adds	r3, r2, r3
}
   1a116:	0018      	movs	r0, r3
   1a118:	46bd      	mov	sp, r7
   1a11a:	bd80      	pop	{r7, pc}
   1a11c:	20000e14 	.word	0x20000e14
   1a120:	00038888 	.word	0x00038888
   1a124:	0001a51d 	.word	0x0001a51d

0001a128 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1a128:	b580      	push	{r7, lr}
   1a12a:	b082      	sub	sp, #8
   1a12c:	af00      	add	r7, sp, #0
   1a12e:	0002      	movs	r2, r0
   1a130:	1dfb      	adds	r3, r7, #7
   1a132:	701a      	strb	r2, [r3, #0]
   1a134:	1dbb      	adds	r3, r7, #6
   1a136:	1c0a      	adds	r2, r1, #0
   1a138:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a13a:	1dbb      	adds	r3, r7, #6
   1a13c:	781b      	ldrb	r3, [r3, #0]
   1a13e:	2b08      	cmp	r3, #8
   1a140:	d905      	bls.n	1a14e <uiIndexOfObject+0x26>
   1a142:	4b2a      	ldr	r3, [pc, #168]	; (1a1ec <uiIndexOfObject+0xc4>)
   1a144:	0018      	movs	r0, r3
   1a146:	4b2a      	ldr	r3, [pc, #168]	; (1a1f0 <uiIndexOfObject+0xc8>)
   1a148:	4798      	blx	r3
   1a14a:	2300      	movs	r3, #0
   1a14c:	e049      	b.n	1a1e2 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1a14e:	1dfb      	adds	r3, r7, #7
   1a150:	781b      	ldrb	r3, [r3, #0]
   1a152:	2b00      	cmp	r3, #0
   1a154:	d00b      	beq.n	1a16e <uiIndexOfObject+0x46>
   1a156:	4b27      	ldr	r3, [pc, #156]	; (1a1f4 <uiIndexOfObject+0xcc>)
   1a158:	681a      	ldr	r2, [r3, #0]
   1a15a:	1dbb      	adds	r3, r7, #6
   1a15c:	781b      	ldrb	r3, [r3, #0]
   1a15e:	2164      	movs	r1, #100	; 0x64
   1a160:	18d3      	adds	r3, r2, r3
   1a162:	185b      	adds	r3, r3, r1
   1a164:	781b      	ldrb	r3, [r3, #0]
   1a166:	1dfa      	adds	r2, r7, #7
   1a168:	7812      	ldrb	r2, [r2, #0]
   1a16a:	429a      	cmp	r2, r3
   1a16c:	d905      	bls.n	1a17a <uiIndexOfObject+0x52>
   1a16e:	4b22      	ldr	r3, [pc, #136]	; (1a1f8 <uiIndexOfObject+0xd0>)
   1a170:	0018      	movs	r0, r3
   1a172:	4b1f      	ldr	r3, [pc, #124]	; (1a1f0 <uiIndexOfObject+0xc8>)
   1a174:	4798      	blx	r3
   1a176:	2300      	movs	r3, #0
   1a178:	e033      	b.n	1a1e2 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a17a:	1dbb      	adds	r3, r7, #6
   1a17c:	781b      	ldrb	r3, [r3, #0]
   1a17e:	2b08      	cmp	r3, #8
   1a180:	d82a      	bhi.n	1a1d8 <uiIndexOfObject+0xb0>
   1a182:	1dfb      	adds	r3, r7, #7
   1a184:	781b      	ldrb	r3, [r3, #0]
   1a186:	2b00      	cmp	r3, #0
   1a188:	d026      	beq.n	1a1d8 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1a18a:	4b1a      	ldr	r3, [pc, #104]	; (1a1f4 <uiIndexOfObject+0xcc>)
   1a18c:	681a      	ldr	r2, [r3, #0]
   1a18e:	1dbb      	adds	r3, r7, #6
   1a190:	781b      	ldrb	r3, [r3, #0]
   1a192:	2164      	movs	r1, #100	; 0x64
   1a194:	18d3      	adds	r3, r2, r3
   1a196:	185b      	adds	r3, r3, r1
   1a198:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a19a:	1dfa      	adds	r2, r7, #7
   1a19c:	7812      	ldrb	r2, [r2, #0]
   1a19e:	429a      	cmp	r2, r3
   1a1a0:	d81a      	bhi.n	1a1d8 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a1a2:	4b14      	ldr	r3, [pc, #80]	; (1a1f4 <uiIndexOfObject+0xcc>)
   1a1a4:	681a      	ldr	r2, [r3, #0]
   1a1a6:	1dbb      	adds	r3, r7, #6
   1a1a8:	781b      	ldrb	r3, [r3, #0]
   1a1aa:	3340      	adds	r3, #64	; 0x40
   1a1ac:	005b      	lsls	r3, r3, #1
   1a1ae:	18d3      	adds	r3, r2, r3
   1a1b0:	3308      	adds	r3, #8
   1a1b2:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a1b4:	4b0f      	ldr	r3, [pc, #60]	; (1a1f4 <uiIndexOfObject+0xcc>)
   1a1b6:	6819      	ldr	r1, [r3, #0]
   1a1b8:	1dbb      	adds	r3, r7, #6
   1a1ba:	781b      	ldrb	r3, [r3, #0]
   1a1bc:	207c      	movs	r0, #124	; 0x7c
   1a1be:	18cb      	adds	r3, r1, r3
   1a1c0:	181b      	adds	r3, r3, r0
   1a1c2:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a1c4:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a1c6:	1df9      	adds	r1, r7, #7
   1a1c8:	7809      	ldrb	r1, [r1, #0]
   1a1ca:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a1cc:	b289      	uxth	r1, r1
   1a1ce:	434b      	muls	r3, r1
   1a1d0:	b29b      	uxth	r3, r3
   1a1d2:	18d3      	adds	r3, r2, r3
   1a1d4:	b29b      	uxth	r3, r3
   1a1d6:	e004      	b.n	1a1e2 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1a1d8:	4b08      	ldr	r3, [pc, #32]	; (1a1fc <uiIndexOfObject+0xd4>)
   1a1da:	0018      	movs	r0, r3
   1a1dc:	4b04      	ldr	r3, [pc, #16]	; (1a1f0 <uiIndexOfObject+0xc8>)
   1a1de:	4798      	blx	r3
	return 0;
   1a1e0:	2300      	movs	r3, #0
}
   1a1e2:	0018      	movs	r0, r3
   1a1e4:	46bd      	mov	sp, r7
   1a1e6:	b002      	add	sp, #8
   1a1e8:	bd80      	pop	{r7, pc}
   1a1ea:	46c0      	nop			; (mov r8, r8)
   1a1ec:	000388b0 	.word	0x000388b0
   1a1f0:	0001a51d 	.word	0x0001a51d
   1a1f4:	20000e14 	.word	0x20000e14
   1a1f8:	000388f0 	.word	0x000388f0
   1a1fc:	00038930 	.word	0x00038930

0001a200 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1a200:	b580      	push	{r7, lr}
   1a202:	b088      	sub	sp, #32
   1a204:	af00      	add	r7, sp, #0
   1a206:	0002      	movs	r2, r0
   1a208:	1dfb      	adds	r3, r7, #7
   1a20a:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1a20c:	4b5a      	ldr	r3, [pc, #360]	; (1a378 <prvTraceGetObjectHandle+0x178>)
   1a20e:	681b      	ldr	r3, [r3, #0]
   1a210:	2b00      	cmp	r3, #0
   1a212:	d105      	bne.n	1a220 <prvTraceGetObjectHandle+0x20>
   1a214:	4b59      	ldr	r3, [pc, #356]	; (1a37c <prvTraceGetObjectHandle+0x17c>)
   1a216:	0018      	movs	r0, r3
   1a218:	4b59      	ldr	r3, [pc, #356]	; (1a380 <prvTraceGetObjectHandle+0x180>)
   1a21a:	4798      	blx	r3
   1a21c:	2300      	movs	r3, #0
   1a21e:	e0a7      	b.n	1a370 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a220:	1dfb      	adds	r3, r7, #7
   1a222:	781b      	ldrb	r3, [r3, #0]
   1a224:	2b08      	cmp	r3, #8
   1a226:	d905      	bls.n	1a234 <prvTraceGetObjectHandle+0x34>
   1a228:	4b56      	ldr	r3, [pc, #344]	; (1a384 <prvTraceGetObjectHandle+0x184>)
   1a22a:	0018      	movs	r0, r3
   1a22c:	4b54      	ldr	r3, [pc, #336]	; (1a380 <prvTraceGetObjectHandle+0x180>)
   1a22e:	4798      	blx	r3
   1a230:	2300      	movs	r3, #0
   1a232:	e09d      	b.n	1a370 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1a234:	f3ef 8310 	mrs	r3, PRIMASK
   1a238:	60fb      	str	r3, [r7, #12]
  return(result);
   1a23a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1a23c:	61bb      	str	r3, [r7, #24]
   1a23e:	2301      	movs	r3, #1
   1a240:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1a242:	693b      	ldr	r3, [r7, #16]
   1a244:	f383 8810 	msr	PRIMASK, r3
   1a248:	4b4f      	ldr	r3, [pc, #316]	; (1a388 <prvTraceGetObjectHandle+0x188>)
   1a24a:	681b      	ldr	r3, [r3, #0]
   1a24c:	1c5a      	adds	r2, r3, #1
   1a24e:	4b4e      	ldr	r3, [pc, #312]	; (1a388 <prvTraceGetObjectHandle+0x188>)
   1a250:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1a252:	1dfb      	adds	r3, r7, #7
   1a254:	781a      	ldrb	r2, [r3, #0]
   1a256:	4b4d      	ldr	r3, [pc, #308]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a258:	0052      	lsls	r2, r2, #1
   1a25a:	5ad3      	ldrh	r3, [r2, r3]
   1a25c:	001a      	movs	r2, r3
   1a25e:	4b4c      	ldr	r3, [pc, #304]	; (1a390 <prvTraceGetObjectHandle+0x190>)
   1a260:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1a262:	4b4b      	ldr	r3, [pc, #300]	; (1a390 <prvTraceGetObjectHandle+0x190>)
   1a264:	681b      	ldr	r3, [r3, #0]
   1a266:	4a49      	ldr	r2, [pc, #292]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a268:	2148      	movs	r1, #72	; 0x48
   1a26a:	18d3      	adds	r3, r2, r3
   1a26c:	185b      	adds	r3, r3, r1
   1a26e:	781b      	ldrb	r3, [r3, #0]
   1a270:	2b00      	cmp	r3, #0
   1a272:	d117      	bne.n	1a2a4 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a274:	4b46      	ldr	r3, [pc, #280]	; (1a390 <prvTraceGetObjectHandle+0x190>)
   1a276:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a278:	4b45      	ldr	r3, [pc, #276]	; (1a390 <prvTraceGetObjectHandle+0x190>)
   1a27a:	681b      	ldr	r3, [r3, #0]
   1a27c:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1a27e:	1dfb      	adds	r3, r7, #7
   1a280:	781b      	ldrb	r3, [r3, #0]
   1a282:	4842      	ldr	r0, [pc, #264]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a284:	3308      	adds	r3, #8
   1a286:	005b      	lsls	r3, r3, #1
   1a288:	18c3      	adds	r3, r0, r3
   1a28a:	3302      	adds	r3, #2
   1a28c:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a28e:	b2db      	uxtb	r3, r3
   1a290:	1acb      	subs	r3, r1, r3
   1a292:	b2db      	uxtb	r3, r3
   1a294:	3301      	adds	r3, #1
   1a296:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a298:	4b3c      	ldr	r3, [pc, #240]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a29a:	2148      	movs	r1, #72	; 0x48
   1a29c:	189b      	adds	r3, r3, r2
   1a29e:	185b      	adds	r3, r3, r1
   1a2a0:	1c02      	adds	r2, r0, #0
   1a2a2:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1a2a4:	4b3a      	ldr	r3, [pc, #232]	; (1a390 <prvTraceGetObjectHandle+0x190>)
   1a2a6:	681a      	ldr	r2, [r3, #0]
   1a2a8:	231f      	movs	r3, #31
   1a2aa:	18fb      	adds	r3, r7, r3
   1a2ac:	4937      	ldr	r1, [pc, #220]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a2ae:	2048      	movs	r0, #72	; 0x48
   1a2b0:	188a      	adds	r2, r1, r2
   1a2b2:	1812      	adds	r2, r2, r0
   1a2b4:	7812      	ldrb	r2, [r2, #0]
   1a2b6:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a2b8:	1dfb      	adds	r3, r7, #7
   1a2ba:	781a      	ldrb	r2, [r3, #0]
   1a2bc:	4b33      	ldr	r3, [pc, #204]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a2be:	0052      	lsls	r2, r2, #1
   1a2c0:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1a2c2:	1dfb      	adds	r3, r7, #7
   1a2c4:	781b      	ldrb	r3, [r3, #0]
   1a2c6:	4931      	ldr	r1, [pc, #196]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a2c8:	3310      	adds	r3, #16
   1a2ca:	005b      	lsls	r3, r3, #1
   1a2cc:	18cb      	adds	r3, r1, r3
   1a2ce:	3304      	adds	r3, #4
   1a2d0:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a2d2:	429a      	cmp	r2, r3
   1a2d4:	d90d      	bls.n	1a2f2 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a2d6:	1dfb      	adds	r3, r7, #7
   1a2d8:	781b      	ldrb	r3, [r3, #0]
   1a2da:	0018      	movs	r0, r3
   1a2dc:	4b2d      	ldr	r3, [pc, #180]	; (1a394 <prvTraceGetObjectHandle+0x194>)
   1a2de:	4798      	blx	r3
   1a2e0:	0003      	movs	r3, r0
   1a2e2:	0018      	movs	r0, r3
   1a2e4:	4b26      	ldr	r3, [pc, #152]	; (1a380 <prvTraceGetObjectHandle+0x180>)
   1a2e6:	4798      	blx	r3
		handle = 0;
   1a2e8:	231f      	movs	r3, #31
   1a2ea:	18fb      	adds	r3, r7, r3
   1a2ec:	2200      	movs	r2, #0
   1a2ee:	701a      	strb	r2, [r3, #0]
   1a2f0:	e031      	b.n	1a356 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1a2f2:	1dfb      	adds	r3, r7, #7
   1a2f4:	781b      	ldrb	r3, [r3, #0]
   1a2f6:	4a25      	ldr	r2, [pc, #148]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a2f8:	0059      	lsls	r1, r3, #1
   1a2fa:	5a8a      	ldrh	r2, [r1, r2]
   1a2fc:	3201      	adds	r2, #1
   1a2fe:	b291      	uxth	r1, r2
   1a300:	4a22      	ldr	r2, [pc, #136]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a302:	005b      	lsls	r3, r3, #1
   1a304:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a306:	1dfb      	adds	r3, r7, #7
   1a308:	781a      	ldrb	r2, [r3, #0]
   1a30a:	4b20      	ldr	r3, [pc, #128]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a30c:	0052      	lsls	r2, r2, #1
   1a30e:	5ad3      	ldrh	r3, [r2, r3]
   1a310:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1a312:	1dfb      	adds	r3, r7, #7
   1a314:	781b      	ldrb	r3, [r3, #0]
   1a316:	4a1d      	ldr	r2, [pc, #116]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a318:	3308      	adds	r3, #8
   1a31a:	005b      	lsls	r3, r3, #1
   1a31c:	18d3      	adds	r3, r2, r3
   1a31e:	3302      	adds	r3, #2
   1a320:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a322:	1acb      	subs	r3, r1, r3
   1a324:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1a326:	1dfb      	adds	r3, r7, #7
   1a328:	781b      	ldrb	r3, [r3, #0]
   1a32a:	4a18      	ldr	r2, [pc, #96]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a32c:	3318      	adds	r3, #24
   1a32e:	005b      	lsls	r3, r3, #1
   1a330:	18d3      	adds	r3, r2, r3
   1a332:	3306      	adds	r3, #6
   1a334:	881b      	ldrh	r3, [r3, #0]
   1a336:	001a      	movs	r2, r3
		if (hndCount >
   1a338:	697b      	ldr	r3, [r7, #20]
   1a33a:	429a      	cmp	r2, r3
   1a33c:	da0b      	bge.n	1a356 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a33e:	1dfb      	adds	r3, r7, #7
   1a340:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1a342:	697a      	ldr	r2, [r7, #20]
   1a344:	b2d2      	uxtb	r2, r2
   1a346:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a348:	4a10      	ldr	r2, [pc, #64]	; (1a38c <prvTraceGetObjectHandle+0x18c>)
   1a34a:	3318      	adds	r3, #24
   1a34c:	005b      	lsls	r3, r3, #1
   1a34e:	18d3      	adds	r3, r2, r3
   1a350:	3306      	adds	r3, #6
   1a352:	1c0a      	adds	r2, r1, #0
   1a354:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1a356:	4b0c      	ldr	r3, [pc, #48]	; (1a388 <prvTraceGetObjectHandle+0x188>)
   1a358:	681b      	ldr	r3, [r3, #0]
   1a35a:	1e5a      	subs	r2, r3, #1
   1a35c:	4b0a      	ldr	r3, [pc, #40]	; (1a388 <prvTraceGetObjectHandle+0x188>)
   1a35e:	601a      	str	r2, [r3, #0]
   1a360:	69bb      	ldr	r3, [r7, #24]
   1a362:	60bb      	str	r3, [r7, #8]
   1a364:	68bb      	ldr	r3, [r7, #8]
   1a366:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1a36a:	231f      	movs	r3, #31
   1a36c:	18fb      	adds	r3, r7, r3
   1a36e:	781b      	ldrb	r3, [r3, #0]
}
   1a370:	0018      	movs	r0, r3
   1a372:	46bd      	mov	sp, r7
   1a374:	b008      	add	sp, #32
   1a376:	bd80      	pop	{r7, pc}
   1a378:	20000e14 	.word	0x20000e14
   1a37c:	00037d90 	.word	0x00037d90
   1a380:	0001a51d 	.word	0x0001a51d
   1a384:	00038970 	.word	0x00038970
   1a388:	20000d6c 	.word	0x20000d6c
   1a38c:	20000d84 	.word	0x20000d84
   1a390:	20000e18 	.word	0x20000e18
   1a394:	0001923d 	.word	0x0001923d

0001a398 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1a398:	b590      	push	{r4, r7, lr}
   1a39a:	b085      	sub	sp, #20
   1a39c:	af00      	add	r7, sp, #0
   1a39e:	0002      	movs	r2, r0
   1a3a0:	1dfb      	adds	r3, r7, #7
   1a3a2:	701a      	strb	r2, [r3, #0]
   1a3a4:	1dbb      	adds	r3, r7, #6
   1a3a6:	1c0a      	adds	r2, r1, #0
   1a3a8:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1a3aa:	230e      	movs	r3, #14
   1a3ac:	18fc      	adds	r4, r7, r3
   1a3ae:	1dfb      	adds	r3, r7, #7
   1a3b0:	781a      	ldrb	r2, [r3, #0]
   1a3b2:	1dbb      	adds	r3, r7, #6
   1a3b4:	781b      	ldrb	r3, [r3, #0]
   1a3b6:	0011      	movs	r1, r2
   1a3b8:	0018      	movs	r0, r3
   1a3ba:	4b09      	ldr	r3, [pc, #36]	; (1a3e0 <prvMarkObjectAsUsed+0x48>)
   1a3bc:	4798      	blx	r3
   1a3be:	0003      	movs	r3, r0
   1a3c0:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1a3c2:	4b08      	ldr	r3, [pc, #32]	; (1a3e4 <prvMarkObjectAsUsed+0x4c>)
   1a3c4:	681a      	ldr	r2, [r3, #0]
   1a3c6:	230e      	movs	r3, #14
   1a3c8:	18fb      	adds	r3, r7, r3
   1a3ca:	881b      	ldrh	r3, [r3, #0]
   1a3cc:	219c      	movs	r1, #156	; 0x9c
   1a3ce:	18d3      	adds	r3, r2, r3
   1a3d0:	185b      	adds	r3, r3, r1
   1a3d2:	2201      	movs	r2, #1
   1a3d4:	701a      	strb	r2, [r3, #0]
}
   1a3d6:	46c0      	nop			; (mov r8, r8)
   1a3d8:	46bd      	mov	sp, r7
   1a3da:	b005      	add	sp, #20
   1a3dc:	bd90      	pop	{r4, r7, pc}
   1a3de:	46c0      	nop			; (mov r8, r8)
   1a3e0:	0001a129 	.word	0x0001a129
   1a3e4:	20000e14 	.word	0x20000e14

0001a3e8 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1a3e8:	b580      	push	{r7, lr}
   1a3ea:	b086      	sub	sp, #24
   1a3ec:	af00      	add	r7, sp, #0
   1a3ee:	60f8      	str	r0, [r7, #12]
   1a3f0:	60b9      	str	r1, [r7, #8]
   1a3f2:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1a3f4:	2300      	movs	r3, #0
   1a3f6:	617b      	str	r3, [r7, #20]
   1a3f8:	e010      	b.n	1a41c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1a3fa:	68fa      	ldr	r2, [r7, #12]
   1a3fc:	697b      	ldr	r3, [r7, #20]
   1a3fe:	18d3      	adds	r3, r2, r3
   1a400:	68b9      	ldr	r1, [r7, #8]
   1a402:	697a      	ldr	r2, [r7, #20]
   1a404:	188a      	adds	r2, r1, r2
   1a406:	7812      	ldrb	r2, [r2, #0]
   1a408:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1a40a:	68ba      	ldr	r2, [r7, #8]
   1a40c:	697b      	ldr	r3, [r7, #20]
   1a40e:	18d3      	adds	r3, r2, r3
   1a410:	781b      	ldrb	r3, [r3, #0]
   1a412:	2b00      	cmp	r3, #0
   1a414:	d007      	beq.n	1a426 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1a416:	697b      	ldr	r3, [r7, #20]
   1a418:	3301      	adds	r3, #1
   1a41a:	617b      	str	r3, [r7, #20]
   1a41c:	697a      	ldr	r2, [r7, #20]
   1a41e:	687b      	ldr	r3, [r7, #4]
   1a420:	429a      	cmp	r2, r3
   1a422:	d3ea      	bcc.n	1a3fa <prvStrncpy+0x12>
			break;
	}
}
   1a424:	e000      	b.n	1a428 <prvStrncpy+0x40>
			break;
   1a426:	46c0      	nop			; (mov r8, r8)
}
   1a428:	46c0      	nop			; (mov r8, r8)
   1a42a:	46bd      	mov	sp, r7
   1a42c:	b006      	add	sp, #24
   1a42e:	bd80      	pop	{r7, pc}

0001a430 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1a430:	b580      	push	{r7, lr}
   1a432:	b082      	sub	sp, #8
   1a434:	af00      	add	r7, sp, #0
   1a436:	603a      	str	r2, [r7, #0]
   1a438:	1dfb      	adds	r3, r7, #7
   1a43a:	1c02      	adds	r2, r0, #0
   1a43c:	701a      	strb	r2, [r3, #0]
   1a43e:	1dbb      	adds	r3, r7, #6
   1a440:	1c0a      	adds	r2, r1, #0
   1a442:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1a444:	683b      	ldr	r3, [r7, #0]
   1a446:	2b00      	cmp	r3, #0
   1a448:	d104      	bne.n	1a454 <prvTraceSetObjectName+0x24>
   1a44a:	4b2a      	ldr	r3, [pc, #168]	; (1a4f4 <prvTraceSetObjectName+0xc4>)
   1a44c:	0018      	movs	r0, r3
   1a44e:	4b2a      	ldr	r3, [pc, #168]	; (1a4f8 <prvTraceSetObjectName+0xc8>)
   1a450:	4798      	blx	r3
   1a452:	e04b      	b.n	1a4ec <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1a454:	1dfb      	adds	r3, r7, #7
   1a456:	781b      	ldrb	r3, [r3, #0]
   1a458:	2b08      	cmp	r3, #8
   1a45a:	d904      	bls.n	1a466 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1a45c:	4b27      	ldr	r3, [pc, #156]	; (1a4fc <prvTraceSetObjectName+0xcc>)
   1a45e:	0018      	movs	r0, r3
   1a460:	4b25      	ldr	r3, [pc, #148]	; (1a4f8 <prvTraceSetObjectName+0xc8>)
   1a462:	4798      	blx	r3
		return;
   1a464:	e042      	b.n	1a4ec <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1a466:	1dbb      	adds	r3, r7, #6
   1a468:	781b      	ldrb	r3, [r3, #0]
   1a46a:	2b00      	cmp	r3, #0
   1a46c:	d104      	bne.n	1a478 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1a46e:	4b24      	ldr	r3, [pc, #144]	; (1a500 <prvTraceSetObjectName+0xd0>)
   1a470:	0018      	movs	r0, r3
   1a472:	4b21      	ldr	r3, [pc, #132]	; (1a4f8 <prvTraceSetObjectName+0xc8>)
   1a474:	4798      	blx	r3
		return;
   1a476:	e039      	b.n	1a4ec <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1a478:	4b22      	ldr	r3, [pc, #136]	; (1a504 <prvTraceSetObjectName+0xd4>)
   1a47a:	681a      	ldr	r2, [r3, #0]
   1a47c:	1dfb      	adds	r3, r7, #7
   1a47e:	781b      	ldrb	r3, [r3, #0]
   1a480:	2164      	movs	r1, #100	; 0x64
   1a482:	18d3      	adds	r3, r2, r3
   1a484:	185b      	adds	r3, r3, r1
   1a486:	781b      	ldrb	r3, [r3, #0]
   1a488:	1dba      	adds	r2, r7, #6
   1a48a:	7812      	ldrb	r2, [r2, #0]
   1a48c:	429a      	cmp	r2, r3
   1a48e:	d909      	bls.n	1a4a4 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a490:	1dfb      	adds	r3, r7, #7
   1a492:	781b      	ldrb	r3, [r3, #0]
   1a494:	0018      	movs	r0, r3
   1a496:	4b1c      	ldr	r3, [pc, #112]	; (1a508 <prvTraceSetObjectName+0xd8>)
   1a498:	4798      	blx	r3
   1a49a:	0003      	movs	r3, r0
   1a49c:	0018      	movs	r0, r3
   1a49e:	4b16      	ldr	r3, [pc, #88]	; (1a4f8 <prvTraceSetObjectName+0xc8>)
   1a4a0:	4798      	blx	r3
   1a4a2:	e023      	b.n	1a4ec <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1a4a4:	1dfb      	adds	r3, r7, #7
   1a4a6:	781a      	ldrb	r2, [r3, #0]
   1a4a8:	1dbb      	adds	r3, r7, #6
   1a4aa:	781b      	ldrb	r3, [r3, #0]
   1a4ac:	0011      	movs	r1, r2
   1a4ae:	0018      	movs	r0, r3
   1a4b0:	4b16      	ldr	r3, [pc, #88]	; (1a50c <prvTraceSetObjectName+0xdc>)
   1a4b2:	4798      	blx	r3
   1a4b4:	0003      	movs	r3, r0
   1a4b6:	001a      	movs	r2, r3
   1a4b8:	4b15      	ldr	r3, [pc, #84]	; (1a510 <prvTraceSetObjectName+0xe0>)
   1a4ba:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1a4bc:	4b15      	ldr	r3, [pc, #84]	; (1a514 <prvTraceSetObjectName+0xe4>)
   1a4be:	681b      	ldr	r3, [r3, #0]
   1a4c0:	2b00      	cmp	r3, #0
   1a4c2:	d113      	bne.n	1a4ec <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a4c4:	4b0f      	ldr	r3, [pc, #60]	; (1a504 <prvTraceSetObjectName+0xd4>)
   1a4c6:	681a      	ldr	r2, [r3, #0]
   1a4c8:	4b11      	ldr	r3, [pc, #68]	; (1a510 <prvTraceSetObjectName+0xe0>)
   1a4ca:	881b      	ldrh	r3, [r3, #0]
   1a4cc:	3398      	adds	r3, #152	; 0x98
   1a4ce:	18d3      	adds	r3, r2, r3
   1a4d0:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1a4d2:	4b0c      	ldr	r3, [pc, #48]	; (1a504 <prvTraceSetObjectName+0xd4>)
   1a4d4:	681a      	ldr	r2, [r3, #0]
   1a4d6:	1dfb      	adds	r3, r7, #7
   1a4d8:	781b      	ldrb	r3, [r3, #0]
   1a4da:	2170      	movs	r1, #112	; 0x70
   1a4dc:	18d3      	adds	r3, r2, r3
   1a4de:	185b      	adds	r3, r3, r1
   1a4e0:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a4e2:	001a      	movs	r2, r3
   1a4e4:	683b      	ldr	r3, [r7, #0]
   1a4e6:	0019      	movs	r1, r3
   1a4e8:	4b0b      	ldr	r3, [pc, #44]	; (1a518 <prvTraceSetObjectName+0xe8>)
   1a4ea:	4798      	blx	r3
		}
	}
}
   1a4ec:	46bd      	mov	sp, r7
   1a4ee:	b002      	add	sp, #8
   1a4f0:	bd80      	pop	{r7, pc}
   1a4f2:	46c0      	nop			; (mov r8, r8)
   1a4f4:	00038a74 	.word	0x00038a74
   1a4f8:	0001a51d 	.word	0x0001a51d
   1a4fc:	00038aa8 	.word	0x00038aa8
   1a500:	00038ad8 	.word	0x00038ad8
   1a504:	20000e14 	.word	0x20000e14
   1a508:	0001923d 	.word	0x0001923d
   1a50c:	0001a129 	.word	0x0001a129
   1a510:	20000e1c 	.word	0x20000e1c
   1a514:	20000d74 	.word	0x20000d74
   1a518:	0001a3e9 	.word	0x0001a3e9

0001a51c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1a51c:	b580      	push	{r7, lr}
   1a51e:	b082      	sub	sp, #8
   1a520:	af00      	add	r7, sp, #0
   1a522:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1a524:	4b11      	ldr	r3, [pc, #68]	; (1a56c <prvTraceError+0x50>)
   1a526:	681b      	ldr	r3, [r3, #0]
   1a528:	2b00      	cmp	r3, #0
   1a52a:	d001      	beq.n	1a530 <prvTraceError+0x14>
	{
		vTraceStop();
   1a52c:	4b10      	ldr	r3, [pc, #64]	; (1a570 <prvTraceError+0x54>)
   1a52e:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1a530:	4b10      	ldr	r3, [pc, #64]	; (1a574 <prvTraceError+0x58>)
   1a532:	681b      	ldr	r3, [r3, #0]
   1a534:	2b00      	cmp	r3, #0
   1a536:	d115      	bne.n	1a564 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1a538:	4b0e      	ldr	r3, [pc, #56]	; (1a574 <prvTraceError+0x58>)
   1a53a:	687a      	ldr	r2, [r7, #4]
   1a53c:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1a53e:	4b0b      	ldr	r3, [pc, #44]	; (1a56c <prvTraceError+0x50>)
   1a540:	681b      	ldr	r3, [r3, #0]
   1a542:	2b00      	cmp	r3, #0
   1a544:	d00e      	beq.n	1a564 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a546:	4b09      	ldr	r3, [pc, #36]	; (1a56c <prvTraceError+0x50>)
   1a548:	681b      	ldr	r3, [r3, #0]
   1a54a:	4a0b      	ldr	r2, [pc, #44]	; (1a578 <prvTraceError+0x5c>)
   1a54c:	1898      	adds	r0, r3, r2
   1a54e:	4b09      	ldr	r3, [pc, #36]	; (1a574 <prvTraceError+0x58>)
   1a550:	681b      	ldr	r3, [r3, #0]
   1a552:	2250      	movs	r2, #80	; 0x50
   1a554:	0019      	movs	r1, r3
   1a556:	4b09      	ldr	r3, [pc, #36]	; (1a57c <prvTraceError+0x60>)
   1a558:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1a55a:	4b04      	ldr	r3, [pc, #16]	; (1a56c <prvTraceError+0x50>)
   1a55c:	681b      	ldr	r3, [r3, #0]
   1a55e:	4a08      	ldr	r2, [pc, #32]	; (1a580 <prvTraceError+0x64>)
   1a560:	2101      	movs	r1, #1
   1a562:	5099      	str	r1, [r3, r2]
		}
	}
}
   1a564:	46c0      	nop			; (mov r8, r8)
   1a566:	46bd      	mov	sp, r7
   1a568:	b002      	add	sp, #8
   1a56a:	bd80      	pop	{r7, pc}
   1a56c:	20000e14 	.word	0x20000e14
   1a570:	000193e1 	.word	0x000193e1
   1a574:	20000d74 	.word	0x20000d74
   1a578:	000006bc 	.word	0x000006bc
   1a57c:	0001a3e9 	.word	0x0001a3e9
   1a580:	000006b4 	.word	0x000006b4

0001a584 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1a584:	b580      	push	{r7, lr}
   1a586:	b086      	sub	sp, #24
   1a588:	af00      	add	r7, sp, #0
   1a58a:	0002      	movs	r2, r0
   1a58c:	1dfb      	adds	r3, r7, #7
   1a58e:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1a590:	2300      	movs	r3, #0
   1a592:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1a594:	2300      	movs	r3, #0
   1a596:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1a598:	1dfb      	adds	r3, r7, #7
   1a59a:	781b      	ldrb	r3, [r3, #0]
   1a59c:	2b00      	cmp	r3, #0
   1a59e:	d000      	beq.n	1a5a2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1a5a0:	e089      	b.n	1a6b6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1a5a2:	4b49      	ldr	r3, [pc, #292]	; (1a6c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1a5a4:	0018      	movs	r0, r3
   1a5a6:	4b49      	ldr	r3, [pc, #292]	; (1a6cc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1a5a8:	4798      	blx	r3
   1a5aa:	e08a      	b.n	1a6c2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1a5ac:	4b48      	ldr	r3, [pc, #288]	; (1a6d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5ae:	681b      	ldr	r3, [r3, #0]
   1a5b0:	69da      	ldr	r2, [r3, #28]
   1a5b2:	697b      	ldr	r3, [r7, #20]
   1a5b4:	18d3      	adds	r3, r2, r3
   1a5b6:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a5b8:	4b45      	ldr	r3, [pc, #276]	; (1a6d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5ba:	6819      	ldr	r1, [r3, #0]
   1a5bc:	693b      	ldr	r3, [r7, #16]
   1a5be:	009a      	lsls	r2, r3, #2
   1a5c0:	23e2      	movs	r3, #226	; 0xe2
   1a5c2:	00db      	lsls	r3, r3, #3
   1a5c4:	188a      	adds	r2, r1, r2
   1a5c6:	18d3      	adds	r3, r2, r3
   1a5c8:	781b      	ldrb	r3, [r3, #0]
   1a5ca:	2b98      	cmp	r3, #152	; 0x98
   1a5cc:	d934      	bls.n	1a638 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1a5ce:	4b40      	ldr	r3, [pc, #256]	; (1a6d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5d0:	6819      	ldr	r1, [r3, #0]
   1a5d2:	693b      	ldr	r3, [r7, #16]
   1a5d4:	009a      	lsls	r2, r3, #2
   1a5d6:	23e2      	movs	r3, #226	; 0xe2
   1a5d8:	00db      	lsls	r3, r3, #3
   1a5da:	188a      	adds	r2, r1, r2
   1a5dc:	18d3      	adds	r3, r2, r3
   1a5de:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a5e0:	2ba7      	cmp	r3, #167	; 0xa7
   1a5e2:	d829      	bhi.n	1a638 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1a5e4:	4b3a      	ldr	r3, [pc, #232]	; (1a6d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5e6:	6819      	ldr	r1, [r3, #0]
   1a5e8:	693b      	ldr	r3, [r7, #16]
   1a5ea:	009a      	lsls	r2, r3, #2
   1a5ec:	23e2      	movs	r3, #226	; 0xe2
   1a5ee:	00db      	lsls	r3, r3, #3
   1a5f0:	188a      	adds	r2, r1, r2
   1a5f2:	18d3      	adds	r3, r2, r3
   1a5f4:	781a      	ldrb	r2, [r3, #0]
   1a5f6:	230f      	movs	r3, #15
   1a5f8:	18fb      	adds	r3, r7, r3
   1a5fa:	3268      	adds	r2, #104	; 0x68
   1a5fc:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1a5fe:	230f      	movs	r3, #15
   1a600:	18fb      	adds	r3, r7, r3
   1a602:	781a      	ldrb	r2, [r3, #0]
   1a604:	693b      	ldr	r3, [r7, #16]
   1a606:	18d2      	adds	r2, r2, r3
   1a608:	4b31      	ldr	r3, [pc, #196]	; (1a6d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a60a:	681b      	ldr	r3, [r3, #0]
   1a60c:	699b      	ldr	r3, [r3, #24]
   1a60e:	429a      	cmp	r2, r3
   1a610:	d24d      	bcs.n	1a6ae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1a612:	4b2f      	ldr	r3, [pc, #188]	; (1a6d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a614:	681a      	ldr	r2, [r3, #0]
   1a616:	693b      	ldr	r3, [r7, #16]
   1a618:	009b      	lsls	r3, r3, #2
   1a61a:	21e2      	movs	r1, #226	; 0xe2
   1a61c:	00c9      	lsls	r1, r1, #3
   1a61e:	468c      	mov	ip, r1
   1a620:	4463      	add	r3, ip
   1a622:	18d0      	adds	r0, r2, r3
   1a624:	230f      	movs	r3, #15
   1a626:	18fb      	adds	r3, r7, r3
   1a628:	781b      	ldrb	r3, [r3, #0]
   1a62a:	3301      	adds	r3, #1
   1a62c:	009b      	lsls	r3, r3, #2
   1a62e:	001a      	movs	r2, r3
   1a630:	2100      	movs	r1, #0
   1a632:	4b28      	ldr	r3, [pc, #160]	; (1a6d4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a634:	4798      	blx	r3
		{
   1a636:	e03a      	b.n	1a6ae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1a638:	4b25      	ldr	r3, [pc, #148]	; (1a6d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a63a:	6819      	ldr	r1, [r3, #0]
   1a63c:	693b      	ldr	r3, [r7, #16]
   1a63e:	009a      	lsls	r2, r3, #2
   1a640:	23e2      	movs	r3, #226	; 0xe2
   1a642:	00db      	lsls	r3, r3, #3
   1a644:	188a      	adds	r2, r1, r2
   1a646:	18d3      	adds	r3, r2, r3
   1a648:	781b      	ldrb	r3, [r3, #0]
   1a64a:	2b01      	cmp	r3, #1
   1a64c:	d130      	bne.n	1a6b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1a64e:	693b      	ldr	r3, [r7, #16]
   1a650:	1c5a      	adds	r2, r3, #1
   1a652:	4b1f      	ldr	r3, [pc, #124]	; (1a6d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a654:	681b      	ldr	r3, [r3, #0]
   1a656:	699b      	ldr	r3, [r3, #24]
   1a658:	429a      	cmp	r2, r3
   1a65a:	d20e      	bcs.n	1a67a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1a65c:	4b1c      	ldr	r3, [pc, #112]	; (1a6d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a65e:	681a      	ldr	r2, [r3, #0]
   1a660:	693b      	ldr	r3, [r7, #16]
   1a662:	009b      	lsls	r3, r3, #2
   1a664:	21e2      	movs	r1, #226	; 0xe2
   1a666:	00c9      	lsls	r1, r1, #3
   1a668:	468c      	mov	ip, r1
   1a66a:	4463      	add	r3, ip
   1a66c:	18d3      	adds	r3, r2, r3
   1a66e:	2208      	movs	r2, #8
   1a670:	2100      	movs	r1, #0
   1a672:	0018      	movs	r0, r3
   1a674:	4b17      	ldr	r3, [pc, #92]	; (1a6d4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a676:	4798      	blx	r3
   1a678:	e01a      	b.n	1a6b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1a67a:	4b15      	ldr	r3, [pc, #84]	; (1a6d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a67c:	681b      	ldr	r3, [r3, #0]
   1a67e:	22e2      	movs	r2, #226	; 0xe2
   1a680:	00d2      	lsls	r2, r2, #3
   1a682:	4694      	mov	ip, r2
   1a684:	4463      	add	r3, ip
   1a686:	2204      	movs	r2, #4
   1a688:	2100      	movs	r1, #0
   1a68a:	0018      	movs	r0, r3
   1a68c:	4b11      	ldr	r3, [pc, #68]	; (1a6d4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a68e:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1a690:	4b0f      	ldr	r3, [pc, #60]	; (1a6d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a692:	681a      	ldr	r2, [r3, #0]
   1a694:	693b      	ldr	r3, [r7, #16]
   1a696:	009b      	lsls	r3, r3, #2
   1a698:	21e2      	movs	r1, #226	; 0xe2
   1a69a:	00c9      	lsls	r1, r1, #3
   1a69c:	468c      	mov	ip, r1
   1a69e:	4463      	add	r3, ip
   1a6a0:	18d3      	adds	r3, r2, r3
   1a6a2:	2204      	movs	r2, #4
   1a6a4:	2100      	movs	r1, #0
   1a6a6:	0018      	movs	r0, r3
   1a6a8:	4b0a      	ldr	r3, [pc, #40]	; (1a6d4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a6aa:	4798      	blx	r3
   1a6ac:	e000      	b.n	1a6b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1a6ae:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1a6b0:	697b      	ldr	r3, [r7, #20]
   1a6b2:	3301      	adds	r3, #1
   1a6b4:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1a6b6:	1dfb      	adds	r3, r7, #7
   1a6b8:	781a      	ldrb	r2, [r3, #0]
   1a6ba:	697b      	ldr	r3, [r7, #20]
   1a6bc:	429a      	cmp	r2, r3
   1a6be:	d900      	bls.n	1a6c2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1a6c0:	e774      	b.n	1a5ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1a6c2:	46bd      	mov	sp, r7
   1a6c4:	b006      	add	sp, #24
   1a6c6:	bd80      	pop	{r7, pc}
   1a6c8:	00038b38 	.word	0x00038b38
   1a6cc:	0001a51d 	.word	0x0001a51d
   1a6d0:	20000e14 	.word	0x20000e14
   1a6d4:	00035543 	.word	0x00035543

0001a6d8 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1a6d8:	b580      	push	{r7, lr}
   1a6da:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1a6dc:	4b12      	ldr	r3, [pc, #72]	; (1a728 <prvTraceUpdateCounters+0x50>)
   1a6de:	681b      	ldr	r3, [r3, #0]
   1a6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a6e2:	2b00      	cmp	r3, #0
   1a6e4:	d01c      	beq.n	1a720 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1a6e6:	4b10      	ldr	r3, [pc, #64]	; (1a728 <prvTraceUpdateCounters+0x50>)
   1a6e8:	681b      	ldr	r3, [r3, #0]
   1a6ea:	695a      	ldr	r2, [r3, #20]
   1a6ec:	3201      	adds	r2, #1
   1a6ee:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1a6f0:	4b0d      	ldr	r3, [pc, #52]	; (1a728 <prvTraceUpdateCounters+0x50>)
   1a6f2:	681b      	ldr	r3, [r3, #0]
   1a6f4:	69da      	ldr	r2, [r3, #28]
   1a6f6:	3201      	adds	r2, #1
   1a6f8:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a6fa:	4b0b      	ldr	r3, [pc, #44]	; (1a728 <prvTraceUpdateCounters+0x50>)
   1a6fc:	681b      	ldr	r3, [r3, #0]
   1a6fe:	69da      	ldr	r2, [r3, #28]
   1a700:	232c      	movs	r3, #44	; 0x2c
   1a702:	33ff      	adds	r3, #255	; 0xff
   1a704:	429a      	cmp	r2, r3
   1a706:	d907      	bls.n	1a718 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1a708:	4b07      	ldr	r3, [pc, #28]	; (1a728 <prvTraceUpdateCounters+0x50>)
   1a70a:	681b      	ldr	r3, [r3, #0]
   1a70c:	2201      	movs	r2, #1
   1a70e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1a710:	4b05      	ldr	r3, [pc, #20]	; (1a728 <prvTraceUpdateCounters+0x50>)
   1a712:	681b      	ldr	r3, [r3, #0]
   1a714:	2200      	movs	r2, #0
   1a716:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1a718:	2001      	movs	r0, #1
   1a71a:	4b04      	ldr	r3, [pc, #16]	; (1a72c <prvTraceUpdateCounters+0x54>)
   1a71c:	4798      	blx	r3
   1a71e:	e000      	b.n	1a722 <prvTraceUpdateCounters+0x4a>
		return;
   1a720:	46c0      	nop			; (mov r8, r8)
#endif
}
   1a722:	46bd      	mov	sp, r7
   1a724:	bd80      	pop	{r7, pc}
   1a726:	46c0      	nop			; (mov r8, r8)
   1a728:	20000e14 	.word	0x20000e14
   1a72c:	0001a585 	.word	0x0001a585

0001a730 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1a730:	b5b0      	push	{r4, r5, r7, lr}
   1a732:	b086      	sub	sp, #24
   1a734:	af00      	add	r7, sp, #0
   1a736:	0002      	movs	r2, r0
   1a738:	1dbb      	adds	r3, r7, #6
   1a73a:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1a73c:	2300      	movs	r3, #0
   1a73e:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1a740:	2300      	movs	r3, #0
   1a742:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1a744:	2300      	movs	r3, #0
   1a746:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1a748:	1dbb      	adds	r3, r7, #6
   1a74a:	881b      	ldrh	r3, [r3, #0]
   1a74c:	2bff      	cmp	r3, #255	; 0xff
   1a74e:	d00a      	beq.n	1a766 <prvTraceGetDTS+0x36>
   1a750:	1dbb      	adds	r3, r7, #6
   1a752:	881b      	ldrh	r3, [r3, #0]
   1a754:	4a60      	ldr	r2, [pc, #384]	; (1a8d8 <prvTraceGetDTS+0x1a8>)
   1a756:	4293      	cmp	r3, r2
   1a758:	d005      	beq.n	1a766 <prvTraceGetDTS+0x36>
   1a75a:	4b60      	ldr	r3, [pc, #384]	; (1a8dc <prvTraceGetDTS+0x1ac>)
   1a75c:	0018      	movs	r0, r3
   1a75e:	4b60      	ldr	r3, [pc, #384]	; (1a8e0 <prvTraceGetDTS+0x1b0>)
   1a760:	4798      	blx	r3
   1a762:	2300      	movs	r3, #0
   1a764:	e0b3      	b.n	1a8ce <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1a766:	4b5f      	ldr	r3, [pc, #380]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a768:	681b      	ldr	r3, [r3, #0]
   1a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a76c:	2b00      	cmp	r3, #0
   1a76e:	d118      	bne.n	1a7a2 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1a770:	4b5d      	ldr	r3, [pc, #372]	; (1a8e8 <prvTraceGetDTS+0x1b8>)
   1a772:	681b      	ldr	r3, [r3, #0]
   1a774:	2b00      	cmp	r3, #0
   1a776:	d006      	beq.n	1a786 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1a778:	4b5a      	ldr	r3, [pc, #360]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a77a:	681b      	ldr	r3, [r3, #0]
   1a77c:	4a5a      	ldr	r2, [pc, #360]	; (1a8e8 <prvTraceGetDTS+0x1b8>)
   1a77e:	6812      	ldr	r2, [r2, #0]
   1a780:	0892      	lsrs	r2, r2, #2
   1a782:	625a      	str	r2, [r3, #36]	; 0x24
   1a784:	e00d      	b.n	1a7a2 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1a786:	4b59      	ldr	r3, [pc, #356]	; (1a8ec <prvTraceGetDTS+0x1bc>)
   1a788:	681a      	ldr	r2, [r3, #0]
   1a78a:	4b59      	ldr	r3, [pc, #356]	; (1a8f0 <prvTraceGetDTS+0x1c0>)
   1a78c:	681b      	ldr	r3, [r3, #0]
   1a78e:	429a      	cmp	r2, r3
   1a790:	d007      	beq.n	1a7a2 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1a792:	4b54      	ldr	r3, [pc, #336]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a794:	681c      	ldr	r4, [r3, #0]
   1a796:	2000      	movs	r0, #0
   1a798:	4b56      	ldr	r3, [pc, #344]	; (1a8f4 <prvTraceGetDTS+0x1c4>)
   1a79a:	4798      	blx	r3
   1a79c:	0003      	movs	r3, r0
   1a79e:	089b      	lsrs	r3, r3, #2
   1a7a0:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1a7a2:	230c      	movs	r3, #12
   1a7a4:	18fb      	adds	r3, r7, r3
   1a7a6:	0018      	movs	r0, r3
   1a7a8:	4b53      	ldr	r3, [pc, #332]	; (1a8f8 <prvTraceGetDTS+0x1c8>)
   1a7aa:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1a7ac:	68fa      	ldr	r2, [r7, #12]
   1a7ae:	4b53      	ldr	r3, [pc, #332]	; (1a8fc <prvTraceGetDTS+0x1cc>)
   1a7b0:	681b      	ldr	r3, [r3, #0]
   1a7b2:	1ad3      	subs	r3, r2, r3
   1a7b4:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1a7b6:	68fa      	ldr	r2, [r7, #12]
   1a7b8:	4b50      	ldr	r3, [pc, #320]	; (1a8fc <prvTraceGetDTS+0x1cc>)
   1a7ba:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1a7bc:	4b49      	ldr	r3, [pc, #292]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a7be:	681b      	ldr	r3, [r3, #0]
   1a7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a7c2:	2b00      	cmp	r3, #0
   1a7c4:	d044      	beq.n	1a850 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1a7c6:	4b47      	ldr	r3, [pc, #284]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a7c8:	681b      	ldr	r3, [r3, #0]
   1a7ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a7cc:	693b      	ldr	r3, [r7, #16]
   1a7ce:	429a      	cmp	r2, r3
   1a7d0:	d21e      	bcs.n	1a810 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1a7d2:	4b44      	ldr	r3, [pc, #272]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a7d4:	681c      	ldr	r4, [r3, #0]
   1a7d6:	4b43      	ldr	r3, [pc, #268]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a7d8:	681b      	ldr	r3, [r3, #0]
   1a7da:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1a7dc:	4b41      	ldr	r3, [pc, #260]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a7de:	681b      	ldr	r3, [r3, #0]
   1a7e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a7e2:	4b47      	ldr	r3, [pc, #284]	; (1a900 <prvTraceGetDTS+0x1d0>)
   1a7e4:	0011      	movs	r1, r2
   1a7e6:	6938      	ldr	r0, [r7, #16]
   1a7e8:	4798      	blx	r3
   1a7ea:	0003      	movs	r3, r0
   1a7ec:	18eb      	adds	r3, r5, r3
   1a7ee:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1a7f0:	4b3c      	ldr	r3, [pc, #240]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a7f2:	681c      	ldr	r4, [r3, #0]
   1a7f4:	4b3b      	ldr	r3, [pc, #236]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a7f6:	681b      	ldr	r3, [r3, #0]
   1a7f8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1a7fa:	4b3a      	ldr	r3, [pc, #232]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a7fc:	681b      	ldr	r3, [r3, #0]
   1a7fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a800:	693a      	ldr	r2, [r7, #16]
   1a802:	4b40      	ldr	r3, [pc, #256]	; (1a904 <prvTraceGetDTS+0x1d4>)
   1a804:	0010      	movs	r0, r2
   1a806:	4798      	blx	r3
   1a808:	000b      	movs	r3, r1
   1a80a:	18eb      	adds	r3, r5, r3
   1a80c:	62a3      	str	r3, [r4, #40]	; 0x28
   1a80e:	e007      	b.n	1a820 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1a810:	4b34      	ldr	r3, [pc, #208]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a812:	681b      	ldr	r3, [r3, #0]
   1a814:	4a33      	ldr	r2, [pc, #204]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a816:	6812      	ldr	r2, [r2, #0]
   1a818:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a81a:	693a      	ldr	r2, [r7, #16]
   1a81c:	188a      	adds	r2, r1, r2
   1a81e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1a820:	4b30      	ldr	r3, [pc, #192]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a822:	681b      	ldr	r3, [r3, #0]
   1a824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a826:	4b2f      	ldr	r3, [pc, #188]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a828:	681b      	ldr	r3, [r3, #0]
   1a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a82c:	429a      	cmp	r2, r3
   1a82e:	d313      	bcc.n	1a858 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1a830:	4b2c      	ldr	r3, [pc, #176]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a832:	681b      	ldr	r3, [r3, #0]
   1a834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a836:	3201      	adds	r2, #1
   1a838:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1a83a:	4b2a      	ldr	r3, [pc, #168]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a83c:	681b      	ldr	r3, [r3, #0]
   1a83e:	4a29      	ldr	r2, [pc, #164]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a840:	6812      	ldr	r2, [r2, #0]
   1a842:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a844:	4a27      	ldr	r2, [pc, #156]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a846:	6812      	ldr	r2, [r2, #0]
   1a848:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1a84a:	1a8a      	subs	r2, r1, r2
   1a84c:	629a      	str	r2, [r3, #40]	; 0x28
   1a84e:	e003      	b.n	1a858 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1a850:	4b24      	ldr	r3, [pc, #144]	; (1a8e4 <prvTraceGetDTS+0x1b4>)
   1a852:	681b      	ldr	r3, [r3, #0]
   1a854:	68fa      	ldr	r2, [r7, #12]
   1a856:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1a858:	1dbb      	adds	r3, r7, #6
   1a85a:	881a      	ldrh	r2, [r3, #0]
   1a85c:	693b      	ldr	r3, [r7, #16]
   1a85e:	429a      	cmp	r2, r3
   1a860:	d22f      	bcs.n	1a8c2 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1a862:	4b29      	ldr	r3, [pc, #164]	; (1a908 <prvTraceGetDTS+0x1d8>)
   1a864:	4798      	blx	r3
   1a866:	0003      	movs	r3, r0
   1a868:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1a86a:	697b      	ldr	r3, [r7, #20]
   1a86c:	2b00      	cmp	r3, #0
   1a86e:	d028      	beq.n	1a8c2 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1a870:	1dbb      	adds	r3, r7, #6
   1a872:	881b      	ldrh	r3, [r3, #0]
   1a874:	4a18      	ldr	r2, [pc, #96]	; (1a8d8 <prvTraceGetDTS+0x1a8>)
   1a876:	4293      	cmp	r3, r2
   1a878:	d10b      	bne.n	1a892 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1a87a:	697b      	ldr	r3, [r7, #20]
   1a87c:	22a9      	movs	r2, #169	; 0xa9
   1a87e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1a880:	693b      	ldr	r3, [r7, #16]
   1a882:	0c1b      	lsrs	r3, r3, #16
   1a884:	b29a      	uxth	r2, r3
   1a886:	697b      	ldr	r3, [r7, #20]
   1a888:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1a88a:	697b      	ldr	r3, [r7, #20]
   1a88c:	2200      	movs	r2, #0
   1a88e:	705a      	strb	r2, [r3, #1]
   1a890:	e015      	b.n	1a8be <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1a892:	1dbb      	adds	r3, r7, #6
   1a894:	881b      	ldrh	r3, [r3, #0]
   1a896:	2bff      	cmp	r3, #255	; 0xff
   1a898:	d10d      	bne.n	1a8b6 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1a89a:	697b      	ldr	r3, [r7, #20]
   1a89c:	22a8      	movs	r2, #168	; 0xa8
   1a89e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1a8a0:	693b      	ldr	r3, [r7, #16]
   1a8a2:	0a1b      	lsrs	r3, r3, #8
   1a8a4:	b29a      	uxth	r2, r3
   1a8a6:	697b      	ldr	r3, [r7, #20]
   1a8a8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1a8aa:	693b      	ldr	r3, [r7, #16]
   1a8ac:	0e1b      	lsrs	r3, r3, #24
   1a8ae:	b2da      	uxtb	r2, r3
   1a8b0:	697b      	ldr	r3, [r7, #20]
   1a8b2:	705a      	strb	r2, [r3, #1]
   1a8b4:	e003      	b.n	1a8be <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1a8b6:	4b15      	ldr	r3, [pc, #84]	; (1a90c <prvTraceGetDTS+0x1dc>)
   1a8b8:	0018      	movs	r0, r3
   1a8ba:	4b09      	ldr	r3, [pc, #36]	; (1a8e0 <prvTraceGetDTS+0x1b0>)
   1a8bc:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1a8be:	4b14      	ldr	r3, [pc, #80]	; (1a910 <prvTraceGetDTS+0x1e0>)
   1a8c0:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1a8c2:	693b      	ldr	r3, [r7, #16]
   1a8c4:	b29b      	uxth	r3, r3
   1a8c6:	1dba      	adds	r2, r7, #6
   1a8c8:	8812      	ldrh	r2, [r2, #0]
   1a8ca:	4013      	ands	r3, r2
   1a8cc:	b29b      	uxth	r3, r3
}
   1a8ce:	0018      	movs	r0, r3
   1a8d0:	46bd      	mov	sp, r7
   1a8d2:	b006      	add	sp, #24
   1a8d4:	bdb0      	pop	{r4, r5, r7, pc}
   1a8d6:	46c0      	nop			; (mov r8, r8)
   1a8d8:	0000ffff 	.word	0x0000ffff
   1a8dc:	00038b90 	.word	0x00038b90
   1a8e0:	0001a51d 	.word	0x0001a51d
   1a8e4:	20000e14 	.word	0x20000e14
   1a8e8:	20000d70 	.word	0x20000d70
   1a8ec:	e000e018 	.word	0xe000e018
   1a8f0:	200051fc 	.word	0x200051fc
   1a8f4:	0002a8d5 	.word	0x0002a8d5
   1a8f8:	0001a915 	.word	0x0001a915
   1a8fc:	20000e20 	.word	0x20000e20
   1a900:	00033569 	.word	0x00033569
   1a904:	00033675 	.word	0x00033675
   1a908:	0001a0d5 	.word	0x0001a0d5
   1a90c:	00038bd0 	.word	0x00038bd0
   1a910:	0001a6d9 	.word	0x0001a6d9

0001a914 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1a914:	b580      	push	{r7, lr}
   1a916:	b084      	sub	sp, #16
   1a918:	af00      	add	r7, sp, #0
   1a91a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1a91c:	2300      	movs	r3, #0
   1a91e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1a920:	2300      	movs	r3, #0
   1a922:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1a924:	4b2d      	ldr	r3, [pc, #180]	; (1a9dc <prvTracePortGetTimeStamp+0xc8>)
   1a926:	681b      	ldr	r3, [r3, #0]
   1a928:	2b01      	cmp	r3, #1
   1a92a:	d107      	bne.n	1a93c <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1a92c:	687b      	ldr	r3, [r7, #4]
   1a92e:	2b00      	cmp	r3, #0
   1a930:	d04f      	beq.n	1a9d2 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1a932:	4b2b      	ldr	r3, [pc, #172]	; (1a9e0 <prvTracePortGetTimeStamp+0xcc>)
   1a934:	681a      	ldr	r2, [r3, #0]
   1a936:	687b      	ldr	r3, [r7, #4]
   1a938:	601a      	str	r2, [r3, #0]
		return;
   1a93a:	e04a      	b.n	1a9d2 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1a93c:	4b29      	ldr	r3, [pc, #164]	; (1a9e4 <prvTracePortGetTimeStamp+0xd0>)
   1a93e:	681a      	ldr	r2, [r3, #0]
   1a940:	4b29      	ldr	r3, [pc, #164]	; (1a9e8 <prvTracePortGetTimeStamp+0xd4>)
   1a942:	681b      	ldr	r3, [r3, #0]
   1a944:	1ad3      	subs	r3, r2, r3
   1a946:	3301      	adds	r3, #1
   1a948:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1a94a:	4b28      	ldr	r3, [pc, #160]	; (1a9ec <prvTracePortGetTimeStamp+0xd8>)
   1a94c:	681a      	ldr	r2, [r3, #0]
   1a94e:	4b28      	ldr	r3, [pc, #160]	; (1a9f0 <prvTracePortGetTimeStamp+0xdc>)
   1a950:	681b      	ldr	r3, [r3, #0]
   1a952:	1ad3      	subs	r3, r2, r3
   1a954:	3b01      	subs	r3, #1
   1a956:	2b00      	cmp	r3, #0
   1a958:	db03      	blt.n	1a962 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1a95a:	4b24      	ldr	r3, [pc, #144]	; (1a9ec <prvTracePortGetTimeStamp+0xd8>)
   1a95c:	681b      	ldr	r3, [r3, #0]
   1a95e:	60fb      	str	r3, [r7, #12]
   1a960:	e002      	b.n	1a968 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1a962:	4b23      	ldr	r3, [pc, #140]	; (1a9f0 <prvTracePortGetTimeStamp+0xdc>)
   1a964:	681b      	ldr	r3, [r3, #0]
   1a966:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1a968:	4b20      	ldr	r3, [pc, #128]	; (1a9ec <prvTracePortGetTimeStamp+0xd8>)
   1a96a:	681b      	ldr	r3, [r3, #0]
   1a96c:	68fa      	ldr	r2, [r7, #12]
   1a96e:	429a      	cmp	r2, r3
   1a970:	d107      	bne.n	1a982 <prvTracePortGetTimeStamp+0x6e>
   1a972:	4b20      	ldr	r3, [pc, #128]	; (1a9f4 <prvTracePortGetTimeStamp+0xe0>)
   1a974:	681b      	ldr	r3, [r3, #0]
   1a976:	68ba      	ldr	r2, [r7, #8]
   1a978:	429a      	cmp	r2, r3
   1a97a:	d202      	bcs.n	1a982 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1a97c:	68fb      	ldr	r3, [r7, #12]
   1a97e:	3301      	adds	r3, #1
   1a980:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1a982:	687b      	ldr	r3, [r7, #4]
   1a984:	2b00      	cmp	r3, #0
   1a986:	d016      	beq.n	1a9b6 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1a988:	4b16      	ldr	r3, [pc, #88]	; (1a9e4 <prvTracePortGetTimeStamp+0xd0>)
   1a98a:	681b      	ldr	r3, [r3, #0]
   1a98c:	3301      	adds	r3, #1
   1a98e:	089b      	lsrs	r3, r3, #2
   1a990:	68fa      	ldr	r2, [r7, #12]
   1a992:	435a      	muls	r2, r3
   1a994:	4b12      	ldr	r3, [pc, #72]	; (1a9e0 <prvTracePortGetTimeStamp+0xcc>)
   1a996:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1a998:	4b12      	ldr	r3, [pc, #72]	; (1a9e4 <prvTracePortGetTimeStamp+0xd0>)
   1a99a:	681b      	ldr	r3, [r3, #0]
   1a99c:	3301      	adds	r3, #1
   1a99e:	2203      	movs	r2, #3
   1a9a0:	4013      	ands	r3, r2
   1a9a2:	68fa      	ldr	r2, [r7, #12]
   1a9a4:	435a      	muls	r2, r3
   1a9a6:	68bb      	ldr	r3, [r7, #8]
   1a9a8:	18d3      	adds	r3, r2, r3
   1a9aa:	089a      	lsrs	r2, r3, #2
   1a9ac:	4b0c      	ldr	r3, [pc, #48]	; (1a9e0 <prvTracePortGetTimeStamp+0xcc>)
   1a9ae:	681b      	ldr	r3, [r3, #0]
   1a9b0:	18d2      	adds	r2, r2, r3
   1a9b2:	4b0b      	ldr	r3, [pc, #44]	; (1a9e0 <prvTracePortGetTimeStamp+0xcc>)
   1a9b4:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1a9b6:	4b0d      	ldr	r3, [pc, #52]	; (1a9ec <prvTracePortGetTimeStamp+0xd8>)
   1a9b8:	68fa      	ldr	r2, [r7, #12]
   1a9ba:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1a9bc:	687b      	ldr	r3, [r7, #4]
   1a9be:	2b00      	cmp	r3, #0
   1a9c0:	d003      	beq.n	1a9ca <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1a9c2:	4b07      	ldr	r3, [pc, #28]	; (1a9e0 <prvTracePortGetTimeStamp+0xcc>)
   1a9c4:	681a      	ldr	r2, [r3, #0]
   1a9c6:	687b      	ldr	r3, [r7, #4]
   1a9c8:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1a9ca:	4b0a      	ldr	r3, [pc, #40]	; (1a9f4 <prvTracePortGetTimeStamp+0xe0>)
   1a9cc:	68ba      	ldr	r2, [r7, #8]
   1a9ce:	601a      	str	r2, [r3, #0]
   1a9d0:	e000      	b.n	1a9d4 <prvTracePortGetTimeStamp+0xc0>
		return;
   1a9d2:	46c0      	nop			; (mov r8, r8)
}
   1a9d4:	46bd      	mov	sp, r7
   1a9d6:	b004      	add	sp, #16
   1a9d8:	bd80      	pop	{r7, pc}
   1a9da:	46c0      	nop			; (mov r8, r8)
   1a9dc:	20000d60 	.word	0x20000d60
   1a9e0:	20000d64 	.word	0x20000d64
   1a9e4:	e000e014 	.word	0xe000e014
   1a9e8:	e000e018 	.word	0xe000e018
   1a9ec:	20000e24 	.word	0x20000e24
   1a9f0:	20000d5c 	.word	0x20000d5c
   1a9f4:	20000e28 	.word	0x20000e28

0001a9f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1a9f8:	b580      	push	{r7, lr}
   1a9fa:	b082      	sub	sp, #8
   1a9fc:	af00      	add	r7, sp, #0
   1a9fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1aa00:	687b      	ldr	r3, [r7, #4]
   1aa02:	3308      	adds	r3, #8
   1aa04:	001a      	movs	r2, r3
   1aa06:	687b      	ldr	r3, [r7, #4]
   1aa08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1aa0a:	687b      	ldr	r3, [r7, #4]
   1aa0c:	2201      	movs	r2, #1
   1aa0e:	4252      	negs	r2, r2
   1aa10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1aa12:	687b      	ldr	r3, [r7, #4]
   1aa14:	3308      	adds	r3, #8
   1aa16:	001a      	movs	r2, r3
   1aa18:	687b      	ldr	r3, [r7, #4]
   1aa1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1aa1c:	687b      	ldr	r3, [r7, #4]
   1aa1e:	3308      	adds	r3, #8
   1aa20:	001a      	movs	r2, r3
   1aa22:	687b      	ldr	r3, [r7, #4]
   1aa24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1aa26:	687b      	ldr	r3, [r7, #4]
   1aa28:	2200      	movs	r2, #0
   1aa2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1aa2c:	46c0      	nop			; (mov r8, r8)
   1aa2e:	46bd      	mov	sp, r7
   1aa30:	b002      	add	sp, #8
   1aa32:	bd80      	pop	{r7, pc}

0001aa34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1aa34:	b580      	push	{r7, lr}
   1aa36:	b082      	sub	sp, #8
   1aa38:	af00      	add	r7, sp, #0
   1aa3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1aa3c:	687b      	ldr	r3, [r7, #4]
   1aa3e:	2200      	movs	r2, #0
   1aa40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1aa42:	46c0      	nop			; (mov r8, r8)
   1aa44:	46bd      	mov	sp, r7
   1aa46:	b002      	add	sp, #8
   1aa48:	bd80      	pop	{r7, pc}

0001aa4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1aa4a:	b580      	push	{r7, lr}
   1aa4c:	b084      	sub	sp, #16
   1aa4e:	af00      	add	r7, sp, #0
   1aa50:	6078      	str	r0, [r7, #4]
   1aa52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1aa54:	687b      	ldr	r3, [r7, #4]
   1aa56:	685b      	ldr	r3, [r3, #4]
   1aa58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1aa5a:	683b      	ldr	r3, [r7, #0]
   1aa5c:	68fa      	ldr	r2, [r7, #12]
   1aa5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1aa60:	68fb      	ldr	r3, [r7, #12]
   1aa62:	689a      	ldr	r2, [r3, #8]
   1aa64:	683b      	ldr	r3, [r7, #0]
   1aa66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1aa68:	68fb      	ldr	r3, [r7, #12]
   1aa6a:	689b      	ldr	r3, [r3, #8]
   1aa6c:	683a      	ldr	r2, [r7, #0]
   1aa6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1aa70:	68fb      	ldr	r3, [r7, #12]
   1aa72:	683a      	ldr	r2, [r7, #0]
   1aa74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1aa76:	683b      	ldr	r3, [r7, #0]
   1aa78:	687a      	ldr	r2, [r7, #4]
   1aa7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1aa7c:	687b      	ldr	r3, [r7, #4]
   1aa7e:	681b      	ldr	r3, [r3, #0]
   1aa80:	1c5a      	adds	r2, r3, #1
   1aa82:	687b      	ldr	r3, [r7, #4]
   1aa84:	601a      	str	r2, [r3, #0]
}
   1aa86:	46c0      	nop			; (mov r8, r8)
   1aa88:	46bd      	mov	sp, r7
   1aa8a:	b004      	add	sp, #16
   1aa8c:	bd80      	pop	{r7, pc}

0001aa8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1aa8e:	b580      	push	{r7, lr}
   1aa90:	b084      	sub	sp, #16
   1aa92:	af00      	add	r7, sp, #0
   1aa94:	6078      	str	r0, [r7, #4]
   1aa96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1aa98:	683b      	ldr	r3, [r7, #0]
   1aa9a:	681b      	ldr	r3, [r3, #0]
   1aa9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1aa9e:	68bb      	ldr	r3, [r7, #8]
   1aaa0:	3301      	adds	r3, #1
   1aaa2:	d103      	bne.n	1aaac <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1aaa4:	687b      	ldr	r3, [r7, #4]
   1aaa6:	691b      	ldr	r3, [r3, #16]
   1aaa8:	60fb      	str	r3, [r7, #12]
   1aaaa:	e00c      	b.n	1aac6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1aaac:	687b      	ldr	r3, [r7, #4]
   1aaae:	3308      	adds	r3, #8
   1aab0:	60fb      	str	r3, [r7, #12]
   1aab2:	e002      	b.n	1aaba <vListInsert+0x2c>
   1aab4:	68fb      	ldr	r3, [r7, #12]
   1aab6:	685b      	ldr	r3, [r3, #4]
   1aab8:	60fb      	str	r3, [r7, #12]
   1aaba:	68fb      	ldr	r3, [r7, #12]
   1aabc:	685b      	ldr	r3, [r3, #4]
   1aabe:	681a      	ldr	r2, [r3, #0]
   1aac0:	68bb      	ldr	r3, [r7, #8]
   1aac2:	429a      	cmp	r2, r3
   1aac4:	d9f6      	bls.n	1aab4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1aac6:	68fb      	ldr	r3, [r7, #12]
   1aac8:	685a      	ldr	r2, [r3, #4]
   1aaca:	683b      	ldr	r3, [r7, #0]
   1aacc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1aace:	683b      	ldr	r3, [r7, #0]
   1aad0:	685b      	ldr	r3, [r3, #4]
   1aad2:	683a      	ldr	r2, [r7, #0]
   1aad4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1aad6:	683b      	ldr	r3, [r7, #0]
   1aad8:	68fa      	ldr	r2, [r7, #12]
   1aada:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1aadc:	68fb      	ldr	r3, [r7, #12]
   1aade:	683a      	ldr	r2, [r7, #0]
   1aae0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1aae2:	683b      	ldr	r3, [r7, #0]
   1aae4:	687a      	ldr	r2, [r7, #4]
   1aae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1aae8:	687b      	ldr	r3, [r7, #4]
   1aaea:	681b      	ldr	r3, [r3, #0]
   1aaec:	1c5a      	adds	r2, r3, #1
   1aaee:	687b      	ldr	r3, [r7, #4]
   1aaf0:	601a      	str	r2, [r3, #0]
}
   1aaf2:	46c0      	nop			; (mov r8, r8)
   1aaf4:	46bd      	mov	sp, r7
   1aaf6:	b004      	add	sp, #16
   1aaf8:	bd80      	pop	{r7, pc}

0001aafa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1aafa:	b580      	push	{r7, lr}
   1aafc:	b084      	sub	sp, #16
   1aafe:	af00      	add	r7, sp, #0
   1ab00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1ab02:	687b      	ldr	r3, [r7, #4]
   1ab04:	691b      	ldr	r3, [r3, #16]
   1ab06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1ab08:	687b      	ldr	r3, [r7, #4]
   1ab0a:	685b      	ldr	r3, [r3, #4]
   1ab0c:	687a      	ldr	r2, [r7, #4]
   1ab0e:	6892      	ldr	r2, [r2, #8]
   1ab10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1ab12:	687b      	ldr	r3, [r7, #4]
   1ab14:	689b      	ldr	r3, [r3, #8]
   1ab16:	687a      	ldr	r2, [r7, #4]
   1ab18:	6852      	ldr	r2, [r2, #4]
   1ab1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1ab1c:	68fb      	ldr	r3, [r7, #12]
   1ab1e:	685a      	ldr	r2, [r3, #4]
   1ab20:	687b      	ldr	r3, [r7, #4]
   1ab22:	429a      	cmp	r2, r3
   1ab24:	d103      	bne.n	1ab2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1ab26:	687b      	ldr	r3, [r7, #4]
   1ab28:	689a      	ldr	r2, [r3, #8]
   1ab2a:	68fb      	ldr	r3, [r7, #12]
   1ab2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1ab2e:	687b      	ldr	r3, [r7, #4]
   1ab30:	2200      	movs	r2, #0
   1ab32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1ab34:	68fb      	ldr	r3, [r7, #12]
   1ab36:	681b      	ldr	r3, [r3, #0]
   1ab38:	1e5a      	subs	r2, r3, #1
   1ab3a:	68fb      	ldr	r3, [r7, #12]
   1ab3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1ab3e:	68fb      	ldr	r3, [r7, #12]
   1ab40:	681b      	ldr	r3, [r3, #0]
}
   1ab42:	0018      	movs	r0, r3
   1ab44:	46bd      	mov	sp, r7
   1ab46:	b004      	add	sp, #16
   1ab48:	bd80      	pop	{r7, pc}
	...

0001ab4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1ab4c:	b580      	push	{r7, lr}
   1ab4e:	b084      	sub	sp, #16
   1ab50:	af00      	add	r7, sp, #0
   1ab52:	60f8      	str	r0, [r7, #12]
   1ab54:	60b9      	str	r1, [r7, #8]
   1ab56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1ab58:	68fb      	ldr	r3, [r7, #12]
   1ab5a:	3b04      	subs	r3, #4
   1ab5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1ab5e:	68fb      	ldr	r3, [r7, #12]
   1ab60:	2280      	movs	r2, #128	; 0x80
   1ab62:	0452      	lsls	r2, r2, #17
   1ab64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ab66:	68fb      	ldr	r3, [r7, #12]
   1ab68:	3b04      	subs	r3, #4
   1ab6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1ab6c:	68ba      	ldr	r2, [r7, #8]
   1ab6e:	68fb      	ldr	r3, [r7, #12]
   1ab70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ab72:	68fb      	ldr	r3, [r7, #12]
   1ab74:	3b04      	subs	r3, #4
   1ab76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1ab78:	4a08      	ldr	r2, [pc, #32]	; (1ab9c <pxPortInitialiseStack+0x50>)
   1ab7a:	68fb      	ldr	r3, [r7, #12]
   1ab7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1ab7e:	68fb      	ldr	r3, [r7, #12]
   1ab80:	3b14      	subs	r3, #20
   1ab82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1ab84:	687a      	ldr	r2, [r7, #4]
   1ab86:	68fb      	ldr	r3, [r7, #12]
   1ab88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1ab8a:	68fb      	ldr	r3, [r7, #12]
   1ab8c:	3b20      	subs	r3, #32
   1ab8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1ab90:	68fb      	ldr	r3, [r7, #12]
}
   1ab92:	0018      	movs	r0, r3
   1ab94:	46bd      	mov	sp, r7
   1ab96:	b004      	add	sp, #16
   1ab98:	bd80      	pop	{r7, pc}
   1ab9a:	46c0      	nop			; (mov r8, r8)
   1ab9c:	0001aba1 	.word	0x0001aba1

0001aba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1aba0:	b580      	push	{r7, lr}
   1aba2:	b082      	sub	sp, #8
   1aba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1aba6:	2300      	movs	r3, #0
   1aba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1abaa:	4b07      	ldr	r3, [pc, #28]	; (1abc8 <prvTaskExitError+0x28>)
   1abac:	681b      	ldr	r3, [r3, #0]
   1abae:	3301      	adds	r3, #1
   1abb0:	d001      	beq.n	1abb6 <prvTaskExitError+0x16>
   1abb2:	b672      	cpsid	i
   1abb4:	e7fe      	b.n	1abb4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1abb6:	b672      	cpsid	i
	while( ulDummy == 0 )
   1abb8:	46c0      	nop			; (mov r8, r8)
   1abba:	687b      	ldr	r3, [r7, #4]
   1abbc:	2b00      	cmp	r3, #0
   1abbe:	d0fc      	beq.n	1abba <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1abc0:	46c0      	nop			; (mov r8, r8)
   1abc2:	46bd      	mov	sp, r7
   1abc4:	b002      	add	sp, #8
   1abc6:	bd80      	pop	{r7, pc}
   1abc8:	20000108 	.word	0x20000108

0001abcc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1abcc:	b580      	push	{r7, lr}
   1abce:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1abd0:	46c0      	nop			; (mov r8, r8)
   1abd2:	46bd      	mov	sp, r7
   1abd4:	bd80      	pop	{r7, pc}
	...

0001abe0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1abe0:	4a0b      	ldr	r2, [pc, #44]	; (1ac10 <pxCurrentTCBConst2>)
   1abe2:	6813      	ldr	r3, [r2, #0]
   1abe4:	6818      	ldr	r0, [r3, #0]
   1abe6:	3020      	adds	r0, #32
   1abe8:	f380 8809 	msr	PSP, r0
   1abec:	2002      	movs	r0, #2
   1abee:	f380 8814 	msr	CONTROL, r0
   1abf2:	f3bf 8f6f 	isb	sy
   1abf6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1abf8:	46ae      	mov	lr, r5
   1abfa:	bc08      	pop	{r3}
   1abfc:	bc04      	pop	{r2}
   1abfe:	b662      	cpsie	i
   1ac00:	4718      	bx	r3
   1ac02:	46c0      	nop			; (mov r8, r8)
   1ac04:	46c0      	nop			; (mov r8, r8)
   1ac06:	46c0      	nop			; (mov r8, r8)
   1ac08:	46c0      	nop			; (mov r8, r8)
   1ac0a:	46c0      	nop			; (mov r8, r8)
   1ac0c:	46c0      	nop			; (mov r8, r8)
   1ac0e:	46c0      	nop			; (mov r8, r8)

0001ac10 <pxCurrentTCBConst2>:
   1ac10:	20003d14 	.word	0x20003d14
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1ac14:	46c0      	nop			; (mov r8, r8)
   1ac16:	46c0      	nop			; (mov r8, r8)

0001ac18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1ac18:	b580      	push	{r7, lr}
   1ac1a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1ac1c:	4b0e      	ldr	r3, [pc, #56]	; (1ac58 <xPortStartScheduler+0x40>)
   1ac1e:	4a0e      	ldr	r2, [pc, #56]	; (1ac58 <xPortStartScheduler+0x40>)
   1ac20:	6812      	ldr	r2, [r2, #0]
   1ac22:	21ff      	movs	r1, #255	; 0xff
   1ac24:	0409      	lsls	r1, r1, #16
   1ac26:	430a      	orrs	r2, r1
   1ac28:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1ac2a:	4b0b      	ldr	r3, [pc, #44]	; (1ac58 <xPortStartScheduler+0x40>)
   1ac2c:	4a0a      	ldr	r2, [pc, #40]	; (1ac58 <xPortStartScheduler+0x40>)
   1ac2e:	6812      	ldr	r2, [r2, #0]
   1ac30:	21ff      	movs	r1, #255	; 0xff
   1ac32:	0609      	lsls	r1, r1, #24
   1ac34:	430a      	orrs	r2, r1
   1ac36:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1ac38:	4b08      	ldr	r3, [pc, #32]	; (1ac5c <xPortStartScheduler+0x44>)
   1ac3a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1ac3c:	4b08      	ldr	r3, [pc, #32]	; (1ac60 <xPortStartScheduler+0x48>)
   1ac3e:	2200      	movs	r2, #0
   1ac40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1ac42:	4b08      	ldr	r3, [pc, #32]	; (1ac64 <xPortStartScheduler+0x4c>)
   1ac44:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1ac46:	4b08      	ldr	r3, [pc, #32]	; (1ac68 <xPortStartScheduler+0x50>)
   1ac48:	4798      	blx	r3
	prvTaskExitError();
   1ac4a:	4b08      	ldr	r3, [pc, #32]	; (1ac6c <xPortStartScheduler+0x54>)
   1ac4c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1ac4e:	2300      	movs	r3, #0
}
   1ac50:	0018      	movs	r0, r3
   1ac52:	46bd      	mov	sp, r7
   1ac54:	bd80      	pop	{r7, pc}
   1ac56:	46c0      	nop			; (mov r8, r8)
   1ac58:	e000ed20 	.word	0xe000ed20
   1ac5c:	0001ad79 	.word	0x0001ad79
   1ac60:	20000108 	.word	0x20000108
   1ac64:	0001abe1 	.word	0x0001abe1
   1ac68:	0001d2d9 	.word	0x0001d2d9
   1ac6c:	0001aba1 	.word	0x0001aba1

0001ac70 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1ac70:	b580      	push	{r7, lr}
   1ac72:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1ac74:	4b03      	ldr	r3, [pc, #12]	; (1ac84 <vPortYield+0x14>)
   1ac76:	2280      	movs	r2, #128	; 0x80
   1ac78:	0552      	lsls	r2, r2, #21
   1ac7a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1ac7c:	46c0      	nop			; (mov r8, r8)
   1ac7e:	46bd      	mov	sp, r7
   1ac80:	bd80      	pop	{r7, pc}
   1ac82:	46c0      	nop			; (mov r8, r8)
   1ac84:	e000ed04 	.word	0xe000ed04

0001ac88 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1ac88:	b580      	push	{r7, lr}
   1ac8a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1ac8c:	b672      	cpsid	i
    uxCriticalNesting++;
   1ac8e:	4b06      	ldr	r3, [pc, #24]	; (1aca8 <vPortEnterCritical+0x20>)
   1ac90:	681b      	ldr	r3, [r3, #0]
   1ac92:	1c5a      	adds	r2, r3, #1
   1ac94:	4b04      	ldr	r3, [pc, #16]	; (1aca8 <vPortEnterCritical+0x20>)
   1ac96:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1ac98:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1ac9c:	f3bf 8f6f 	isb	sy
}
   1aca0:	46c0      	nop			; (mov r8, r8)
   1aca2:	46bd      	mov	sp, r7
   1aca4:	bd80      	pop	{r7, pc}
   1aca6:	46c0      	nop			; (mov r8, r8)
   1aca8:	20000108 	.word	0x20000108

0001acac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1acac:	b580      	push	{r7, lr}
   1acae:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1acb0:	4b09      	ldr	r3, [pc, #36]	; (1acd8 <vPortExitCritical+0x2c>)
   1acb2:	681b      	ldr	r3, [r3, #0]
   1acb4:	2b00      	cmp	r3, #0
   1acb6:	d101      	bne.n	1acbc <vPortExitCritical+0x10>
   1acb8:	b672      	cpsid	i
   1acba:	e7fe      	b.n	1acba <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1acbc:	4b06      	ldr	r3, [pc, #24]	; (1acd8 <vPortExitCritical+0x2c>)
   1acbe:	681b      	ldr	r3, [r3, #0]
   1acc0:	1e5a      	subs	r2, r3, #1
   1acc2:	4b05      	ldr	r3, [pc, #20]	; (1acd8 <vPortExitCritical+0x2c>)
   1acc4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1acc6:	4b04      	ldr	r3, [pc, #16]	; (1acd8 <vPortExitCritical+0x2c>)
   1acc8:	681b      	ldr	r3, [r3, #0]
   1acca:	2b00      	cmp	r3, #0
   1accc:	d100      	bne.n	1acd0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1acce:	b662      	cpsie	i
    }
}
   1acd0:	46c0      	nop			; (mov r8, r8)
   1acd2:	46bd      	mov	sp, r7
   1acd4:	bd80      	pop	{r7, pc}
   1acd6:	46c0      	nop			; (mov r8, r8)
   1acd8:	20000108 	.word	0x20000108

0001acdc <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1acdc:	f3ef 8010 	mrs	r0, PRIMASK
   1ace0:	b672      	cpsid	i
   1ace2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1ace4:	46c0      	nop			; (mov r8, r8)
   1ace6:	0018      	movs	r0, r3

0001ace8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1ace8:	f380 8810 	msr	PRIMASK, r0
   1acec:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1acee:	46c0      	nop			; (mov r8, r8)

0001acf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1acf0:	f3ef 8009 	mrs	r0, PSP
   1acf4:	4b0e      	ldr	r3, [pc, #56]	; (1ad30 <pxCurrentTCBConst>)
   1acf6:	681a      	ldr	r2, [r3, #0]
   1acf8:	3820      	subs	r0, #32
   1acfa:	6010      	str	r0, [r2, #0]
   1acfc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1acfe:	4644      	mov	r4, r8
   1ad00:	464d      	mov	r5, r9
   1ad02:	4656      	mov	r6, sl
   1ad04:	465f      	mov	r7, fp
   1ad06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ad08:	b508      	push	{r3, lr}
   1ad0a:	b672      	cpsid	i
   1ad0c:	f002 fae4 	bl	1d2d8 <vTaskSwitchContext>
   1ad10:	b662      	cpsie	i
   1ad12:	bc0c      	pop	{r2, r3}
   1ad14:	6811      	ldr	r1, [r2, #0]
   1ad16:	6808      	ldr	r0, [r1, #0]
   1ad18:	3010      	adds	r0, #16
   1ad1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ad1c:	46a0      	mov	r8, r4
   1ad1e:	46a9      	mov	r9, r5
   1ad20:	46b2      	mov	sl, r6
   1ad22:	46bb      	mov	fp, r7
   1ad24:	f380 8809 	msr	PSP, r0
   1ad28:	3820      	subs	r0, #32
   1ad2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ad2c:	4718      	bx	r3
   1ad2e:	46c0      	nop			; (mov r8, r8)

0001ad30 <pxCurrentTCBConst>:
   1ad30:	20003d14 	.word	0x20003d14
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1ad34:	46c0      	nop			; (mov r8, r8)
   1ad36:	46c0      	nop			; (mov r8, r8)

0001ad38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1ad38:	b580      	push	{r7, lr}
   1ad3a:	b082      	sub	sp, #8
   1ad3c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1ad3e:	4b0a      	ldr	r3, [pc, #40]	; (1ad68 <SysTick_Handler+0x30>)
   1ad40:	4798      	blx	r3
   1ad42:	0003      	movs	r3, r0
   1ad44:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1ad46:	4b09      	ldr	r3, [pc, #36]	; (1ad6c <SysTick_Handler+0x34>)
   1ad48:	4798      	blx	r3
   1ad4a:	1e03      	subs	r3, r0, #0
   1ad4c:	d003      	beq.n	1ad56 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1ad4e:	4b08      	ldr	r3, [pc, #32]	; (1ad70 <SysTick_Handler+0x38>)
   1ad50:	2280      	movs	r2, #128	; 0x80
   1ad52:	0552      	lsls	r2, r2, #21
   1ad54:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1ad56:	687b      	ldr	r3, [r7, #4]
   1ad58:	0018      	movs	r0, r3
   1ad5a:	4b06      	ldr	r3, [pc, #24]	; (1ad74 <SysTick_Handler+0x3c>)
   1ad5c:	4798      	blx	r3
}
   1ad5e:	46c0      	nop			; (mov r8, r8)
   1ad60:	46bd      	mov	sp, r7
   1ad62:	b002      	add	sp, #8
   1ad64:	bd80      	pop	{r7, pc}
   1ad66:	46c0      	nop			; (mov r8, r8)
   1ad68:	0001acdd 	.word	0x0001acdd
   1ad6c:	0001d0e9 	.word	0x0001d0e9
   1ad70:	e000ed04 	.word	0xe000ed04
   1ad74:	0001ace9 	.word	0x0001ace9

0001ad78 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1ad78:	b5b0      	push	{r4, r5, r7, lr}
   1ad7a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1ad7c:	4b0b      	ldr	r3, [pc, #44]	; (1adac <prvSetupTimerInterrupt+0x34>)
   1ad7e:	2200      	movs	r2, #0
   1ad80:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1ad82:	4b0b      	ldr	r3, [pc, #44]	; (1adb0 <prvSetupTimerInterrupt+0x38>)
   1ad84:	2200      	movs	r2, #0
   1ad86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1ad88:	4c0a      	ldr	r4, [pc, #40]	; (1adb4 <prvSetupTimerInterrupt+0x3c>)
   1ad8a:	2000      	movs	r0, #0
   1ad8c:	4b0a      	ldr	r3, [pc, #40]	; (1adb8 <prvSetupTimerInterrupt+0x40>)
   1ad8e:	4798      	blx	r3
   1ad90:	4b0a      	ldr	r3, [pc, #40]	; (1adbc <prvSetupTimerInterrupt+0x44>)
   1ad92:	22fa      	movs	r2, #250	; 0xfa
   1ad94:	0091      	lsls	r1, r2, #2
   1ad96:	4798      	blx	r3
   1ad98:	0003      	movs	r3, r0
   1ad9a:	3b01      	subs	r3, #1
   1ad9c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1ad9e:	4b03      	ldr	r3, [pc, #12]	; (1adac <prvSetupTimerInterrupt+0x34>)
   1ada0:	2207      	movs	r2, #7
   1ada2:	601a      	str	r2, [r3, #0]
}
   1ada4:	46c0      	nop			; (mov r8, r8)
   1ada6:	46bd      	mov	sp, r7
   1ada8:	bdb0      	pop	{r4, r5, r7, pc}
   1adaa:	46c0      	nop			; (mov r8, r8)
   1adac:	e000e010 	.word	0xe000e010
   1adb0:	e000e018 	.word	0xe000e018
   1adb4:	e000e014 	.word	0xe000e014
   1adb8:	0002a8d5 	.word	0x0002a8d5
   1adbc:	00033569 	.word	0x00033569

0001adc0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1adc0:	b580      	push	{r7, lr}
   1adc2:	b084      	sub	sp, #16
   1adc4:	af00      	add	r7, sp, #0
   1adc6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1adc8:	2300      	movs	r3, #0
   1adca:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1adcc:	687b      	ldr	r3, [r7, #4]
   1adce:	2207      	movs	r2, #7
   1add0:	4013      	ands	r3, r2
   1add2:	d004      	beq.n	1adde <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1add4:	687b      	ldr	r3, [r7, #4]
   1add6:	2207      	movs	r2, #7
   1add8:	4393      	bics	r3, r2
   1adda:	3308      	adds	r3, #8
   1addc:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1adde:	4b21      	ldr	r3, [pc, #132]	; (1ae64 <pvPortMalloc+0xa4>)
   1ade0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1ade2:	4b21      	ldr	r3, [pc, #132]	; (1ae68 <pvPortMalloc+0xa8>)
   1ade4:	681b      	ldr	r3, [r3, #0]
   1ade6:	2b00      	cmp	r3, #0
   1ade8:	d105      	bne.n	1adf6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1adea:	4b20      	ldr	r3, [pc, #128]	; (1ae6c <pvPortMalloc+0xac>)
   1adec:	2207      	movs	r2, #7
   1adee:	4393      	bics	r3, r2
   1adf0:	001a      	movs	r2, r3
   1adf2:	4b1d      	ldr	r3, [pc, #116]	; (1ae68 <pvPortMalloc+0xa8>)
   1adf4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1adf6:	4b1e      	ldr	r3, [pc, #120]	; (1ae70 <pvPortMalloc+0xb0>)
   1adf8:	681a      	ldr	r2, [r3, #0]
   1adfa:	687b      	ldr	r3, [r7, #4]
   1adfc:	18d3      	adds	r3, r2, r3
   1adfe:	4a1d      	ldr	r2, [pc, #116]	; (1ae74 <pvPortMalloc+0xb4>)
   1ae00:	4293      	cmp	r3, r2
   1ae02:	d813      	bhi.n	1ae2c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1ae04:	4b1a      	ldr	r3, [pc, #104]	; (1ae70 <pvPortMalloc+0xb0>)
   1ae06:	681a      	ldr	r2, [r3, #0]
   1ae08:	687b      	ldr	r3, [r7, #4]
   1ae0a:	18d2      	adds	r2, r2, r3
   1ae0c:	4b18      	ldr	r3, [pc, #96]	; (1ae70 <pvPortMalloc+0xb0>)
   1ae0e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1ae10:	429a      	cmp	r2, r3
   1ae12:	d90b      	bls.n	1ae2c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1ae14:	4b14      	ldr	r3, [pc, #80]	; (1ae68 <pvPortMalloc+0xa8>)
   1ae16:	681a      	ldr	r2, [r3, #0]
   1ae18:	4b15      	ldr	r3, [pc, #84]	; (1ae70 <pvPortMalloc+0xb0>)
   1ae1a:	681b      	ldr	r3, [r3, #0]
   1ae1c:	18d3      	adds	r3, r2, r3
   1ae1e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1ae20:	4b13      	ldr	r3, [pc, #76]	; (1ae70 <pvPortMalloc+0xb0>)
   1ae22:	681a      	ldr	r2, [r3, #0]
   1ae24:	687b      	ldr	r3, [r7, #4]
   1ae26:	18d2      	adds	r2, r2, r3
   1ae28:	4b11      	ldr	r3, [pc, #68]	; (1ae70 <pvPortMalloc+0xb0>)
   1ae2a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1ae2c:	68fb      	ldr	r3, [r7, #12]
   1ae2e:	2b00      	cmp	r3, #0
   1ae30:	d006      	beq.n	1ae40 <pvPortMalloc+0x80>
   1ae32:	68fb      	ldr	r3, [r7, #12]
   1ae34:	687a      	ldr	r2, [r7, #4]
   1ae36:	0019      	movs	r1, r3
   1ae38:	2094      	movs	r0, #148	; 0x94
   1ae3a:	4b0f      	ldr	r3, [pc, #60]	; (1ae78 <pvPortMalloc+0xb8>)
   1ae3c:	4798      	blx	r3
   1ae3e:	e005      	b.n	1ae4c <pvPortMalloc+0x8c>
   1ae40:	68fb      	ldr	r3, [r7, #12]
   1ae42:	687a      	ldr	r2, [r7, #4]
   1ae44:	0019      	movs	r1, r3
   1ae46:	20e8      	movs	r0, #232	; 0xe8
   1ae48:	4b0b      	ldr	r3, [pc, #44]	; (1ae78 <pvPortMalloc+0xb8>)
   1ae4a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1ae4c:	4b0b      	ldr	r3, [pc, #44]	; (1ae7c <pvPortMalloc+0xbc>)
   1ae4e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1ae50:	68fb      	ldr	r3, [r7, #12]
   1ae52:	2b00      	cmp	r3, #0
   1ae54:	d101      	bne.n	1ae5a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1ae56:	4b0a      	ldr	r3, [pc, #40]	; (1ae80 <pvPortMalloc+0xc0>)
   1ae58:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1ae5a:	68fb      	ldr	r3, [r7, #12]
}
   1ae5c:	0018      	movs	r0, r3
   1ae5e:	46bd      	mov	sp, r7
   1ae60:	b004      	add	sp, #16
   1ae62:	bd80      	pop	{r7, pc}
   1ae64:	0001cf45 	.word	0x0001cf45
   1ae68:	20003d10 	.word	0x20003d10
   1ae6c:	20000e34 	.word	0x20000e34
   1ae70:	20003d0c 	.word	0x20003d0c
   1ae74:	00002ed7 	.word	0x00002ed7
   1ae78:	00019529 	.word	0x00019529
   1ae7c:	0001cf5d 	.word	0x0001cf5d
   1ae80:	00033539 	.word	0x00033539

0001ae84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1ae84:	b580      	push	{r7, lr}
   1ae86:	b082      	sub	sp, #8
   1ae88:	af00      	add	r7, sp, #0
   1ae8a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1ae8c:	687b      	ldr	r3, [r7, #4]
   1ae8e:	2b00      	cmp	r3, #0
   1ae90:	d001      	beq.n	1ae96 <vPortFree+0x12>
   1ae92:	b672      	cpsid	i
   1ae94:	e7fe      	b.n	1ae94 <vPortFree+0x10>
}
   1ae96:	46c0      	nop			; (mov r8, r8)
   1ae98:	46bd      	mov	sp, r7
   1ae9a:	b002      	add	sp, #8
   1ae9c:	bd80      	pop	{r7, pc}
	...

0001aea0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1aea0:	b580      	push	{r7, lr}
   1aea2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1aea4:	4b03      	ldr	r3, [pc, #12]	; (1aeb4 <xPortGetFreeHeapSize+0x14>)
   1aea6:	681b      	ldr	r3, [r3, #0]
   1aea8:	4a03      	ldr	r2, [pc, #12]	; (1aeb8 <xPortGetFreeHeapSize+0x18>)
   1aeaa:	1ad3      	subs	r3, r2, r3
}
   1aeac:	0018      	movs	r0, r3
   1aeae:	46bd      	mov	sp, r7
   1aeb0:	bd80      	pop	{r7, pc}
   1aeb2:	46c0      	nop			; (mov r8, r8)
   1aeb4:	20003d0c 	.word	0x20003d0c
   1aeb8:	00002ed8 	.word	0x00002ed8

0001aebc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1aebc:	b580      	push	{r7, lr}
   1aebe:	b084      	sub	sp, #16
   1aec0:	af00      	add	r7, sp, #0
   1aec2:	6078      	str	r0, [r7, #4]
   1aec4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1aec6:	687b      	ldr	r3, [r7, #4]
   1aec8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1aeca:	68fb      	ldr	r3, [r7, #12]
   1aecc:	2b00      	cmp	r3, #0
   1aece:	d101      	bne.n	1aed4 <xQueueGenericReset+0x18>
   1aed0:	b672      	cpsid	i
   1aed2:	e7fe      	b.n	1aed2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1aed4:	4b23      	ldr	r3, [pc, #140]	; (1af64 <xQueueGenericReset+0xa8>)
   1aed6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1aed8:	68fb      	ldr	r3, [r7, #12]
   1aeda:	681a      	ldr	r2, [r3, #0]
   1aedc:	68fb      	ldr	r3, [r7, #12]
   1aede:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1aee0:	68fb      	ldr	r3, [r7, #12]
   1aee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aee4:	434b      	muls	r3, r1
   1aee6:	18d2      	adds	r2, r2, r3
   1aee8:	68fb      	ldr	r3, [r7, #12]
   1aeea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1aeec:	68fb      	ldr	r3, [r7, #12]
   1aeee:	2200      	movs	r2, #0
   1aef0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1aef2:	68fb      	ldr	r3, [r7, #12]
   1aef4:	681a      	ldr	r2, [r3, #0]
   1aef6:	68fb      	ldr	r3, [r7, #12]
   1aef8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1aefa:	68fb      	ldr	r3, [r7, #12]
   1aefc:	681a      	ldr	r2, [r3, #0]
   1aefe:	68fb      	ldr	r3, [r7, #12]
   1af00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1af02:	1e59      	subs	r1, r3, #1
   1af04:	68fb      	ldr	r3, [r7, #12]
   1af06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1af08:	434b      	muls	r3, r1
   1af0a:	18d2      	adds	r2, r2, r3
   1af0c:	68fb      	ldr	r3, [r7, #12]
   1af0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1af10:	68fb      	ldr	r3, [r7, #12]
   1af12:	2244      	movs	r2, #68	; 0x44
   1af14:	21ff      	movs	r1, #255	; 0xff
   1af16:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1af18:	68fb      	ldr	r3, [r7, #12]
   1af1a:	2245      	movs	r2, #69	; 0x45
   1af1c:	21ff      	movs	r1, #255	; 0xff
   1af1e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1af20:	683b      	ldr	r3, [r7, #0]
   1af22:	2b00      	cmp	r3, #0
   1af24:	d10d      	bne.n	1af42 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1af26:	68fb      	ldr	r3, [r7, #12]
   1af28:	691b      	ldr	r3, [r3, #16]
   1af2a:	2b00      	cmp	r3, #0
   1af2c:	d013      	beq.n	1af56 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1af2e:	68fb      	ldr	r3, [r7, #12]
   1af30:	3310      	adds	r3, #16
   1af32:	0018      	movs	r0, r3
   1af34:	4b0c      	ldr	r3, [pc, #48]	; (1af68 <xQueueGenericReset+0xac>)
   1af36:	4798      	blx	r3
   1af38:	1e03      	subs	r3, r0, #0
   1af3a:	d00c      	beq.n	1af56 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1af3c:	4b0b      	ldr	r3, [pc, #44]	; (1af6c <xQueueGenericReset+0xb0>)
   1af3e:	4798      	blx	r3
   1af40:	e009      	b.n	1af56 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1af42:	68fb      	ldr	r3, [r7, #12]
   1af44:	3310      	adds	r3, #16
   1af46:	0018      	movs	r0, r3
   1af48:	4b09      	ldr	r3, [pc, #36]	; (1af70 <xQueueGenericReset+0xb4>)
   1af4a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1af4c:	68fb      	ldr	r3, [r7, #12]
   1af4e:	3324      	adds	r3, #36	; 0x24
   1af50:	0018      	movs	r0, r3
   1af52:	4b07      	ldr	r3, [pc, #28]	; (1af70 <xQueueGenericReset+0xb4>)
   1af54:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1af56:	4b07      	ldr	r3, [pc, #28]	; (1af74 <xQueueGenericReset+0xb8>)
   1af58:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1af5a:	2301      	movs	r3, #1
}
   1af5c:	0018      	movs	r0, r3
   1af5e:	46bd      	mov	sp, r7
   1af60:	b004      	add	sp, #16
   1af62:	bd80      	pop	{r7, pc}
   1af64:	0001ac89 	.word	0x0001ac89
   1af68:	0001d51d 	.word	0x0001d51d
   1af6c:	0001ac71 	.word	0x0001ac71
   1af70:	0001a9f9 	.word	0x0001a9f9
   1af74:	0001acad 	.word	0x0001acad

0001af78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1af78:	b590      	push	{r4, r7, lr}
   1af7a:	b08b      	sub	sp, #44	; 0x2c
   1af7c:	af02      	add	r7, sp, #8
   1af7e:	60f8      	str	r0, [r7, #12]
   1af80:	60b9      	str	r1, [r7, #8]
   1af82:	1dfb      	adds	r3, r7, #7
   1af84:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1af86:	68fb      	ldr	r3, [r7, #12]
   1af88:	2b00      	cmp	r3, #0
   1af8a:	d101      	bne.n	1af90 <xQueueGenericCreate+0x18>
   1af8c:	b672      	cpsid	i
   1af8e:	e7fe      	b.n	1af8e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1af90:	68bb      	ldr	r3, [r7, #8]
   1af92:	2b00      	cmp	r3, #0
   1af94:	d102      	bne.n	1af9c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1af96:	2300      	movs	r3, #0
   1af98:	61fb      	str	r3, [r7, #28]
   1af9a:	e003      	b.n	1afa4 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1af9c:	68fb      	ldr	r3, [r7, #12]
   1af9e:	68ba      	ldr	r2, [r7, #8]
   1afa0:	4353      	muls	r3, r2
   1afa2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1afa4:	69fb      	ldr	r3, [r7, #28]
   1afa6:	3354      	adds	r3, #84	; 0x54
   1afa8:	0018      	movs	r0, r3
   1afaa:	4b19      	ldr	r3, [pc, #100]	; (1b010 <xQueueGenericCreate+0x98>)
   1afac:	4798      	blx	r3
   1afae:	0003      	movs	r3, r0
   1afb0:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1afb2:	69bb      	ldr	r3, [r7, #24]
   1afb4:	2b00      	cmp	r3, #0
   1afb6:	d00d      	beq.n	1afd4 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1afb8:	69bb      	ldr	r3, [r7, #24]
   1afba:	3354      	adds	r3, #84	; 0x54
   1afbc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1afbe:	1dfb      	adds	r3, r7, #7
   1afc0:	781c      	ldrb	r4, [r3, #0]
   1afc2:	697a      	ldr	r2, [r7, #20]
   1afc4:	68b9      	ldr	r1, [r7, #8]
   1afc6:	68f8      	ldr	r0, [r7, #12]
   1afc8:	69bb      	ldr	r3, [r7, #24]
   1afca:	9300      	str	r3, [sp, #0]
   1afcc:	0023      	movs	r3, r4
   1afce:	4c11      	ldr	r4, [pc, #68]	; (1b014 <xQueueGenericCreate+0x9c>)
   1afd0:	47a0      	blx	r4
   1afd2:	e017      	b.n	1b004 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1afd4:	4b10      	ldr	r3, [pc, #64]	; (1b018 <xQueueGenericCreate+0xa0>)
   1afd6:	4798      	blx	r3
   1afd8:	0003      	movs	r3, r0
   1afda:	0018      	movs	r0, r3
   1afdc:	4b0f      	ldr	r3, [pc, #60]	; (1b01c <xQueueGenericCreate+0xa4>)
   1afde:	4798      	blx	r3
   1afe0:	0003      	movs	r3, r0
   1afe2:	001a      	movs	r2, r3
   1afe4:	4b0e      	ldr	r3, [pc, #56]	; (1b020 <xQueueGenericCreate+0xa8>)
   1afe6:	881b      	ldrh	r3, [r3, #0]
   1afe8:	4013      	ands	r3, r2
   1afea:	b29b      	uxth	r3, r3
   1afec:	2b00      	cmp	r3, #0
   1afee:	d009      	beq.n	1b004 <xQueueGenericCreate+0x8c>
   1aff0:	1dfb      	adds	r3, r7, #7
   1aff2:	781b      	ldrb	r3, [r3, #0]
   1aff4:	4a0b      	ldr	r2, [pc, #44]	; (1b024 <xQueueGenericCreate+0xac>)
   1aff6:	5cd3      	ldrb	r3, [r2, r3]
   1aff8:	3340      	adds	r3, #64	; 0x40
   1affa:	b2db      	uxtb	r3, r3
   1affc:	2100      	movs	r1, #0
   1affe:	0018      	movs	r0, r3
   1b000:	4b09      	ldr	r3, [pc, #36]	; (1b028 <xQueueGenericCreate+0xb0>)
   1b002:	4798      	blx	r3
		}

		return pxNewQueue;
   1b004:	69bb      	ldr	r3, [r7, #24]
	}
   1b006:	0018      	movs	r0, r3
   1b008:	46bd      	mov	sp, r7
   1b00a:	b009      	add	sp, #36	; 0x24
   1b00c:	bd90      	pop	{r4, r7, pc}
   1b00e:	46c0      	nop			; (mov r8, r8)
   1b010:	0001adc1 	.word	0x0001adc1
   1b014:	0001b02d 	.word	0x0001b02d
   1b018:	00018f1d 	.word	0x00018f1d
   1b01c:	00018c81 	.word	0x00018c81
   1b020:	20000104 	.word	0x20000104
   1b024:	200000f8 	.word	0x200000f8
   1b028:	00019981 	.word	0x00019981

0001b02c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1b02c:	b5b0      	push	{r4, r5, r7, lr}
   1b02e:	b084      	sub	sp, #16
   1b030:	af00      	add	r7, sp, #0
   1b032:	60f8      	str	r0, [r7, #12]
   1b034:	60b9      	str	r1, [r7, #8]
   1b036:	607a      	str	r2, [r7, #4]
   1b038:	001a      	movs	r2, r3
   1b03a:	1cfb      	adds	r3, r7, #3
   1b03c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1b03e:	68bb      	ldr	r3, [r7, #8]
   1b040:	2b00      	cmp	r3, #0
   1b042:	d103      	bne.n	1b04c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1b044:	6a3b      	ldr	r3, [r7, #32]
   1b046:	6a3a      	ldr	r2, [r7, #32]
   1b048:	601a      	str	r2, [r3, #0]
   1b04a:	e002      	b.n	1b052 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1b04c:	6a3b      	ldr	r3, [r7, #32]
   1b04e:	687a      	ldr	r2, [r7, #4]
   1b050:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1b052:	6a3b      	ldr	r3, [r7, #32]
   1b054:	68fa      	ldr	r2, [r7, #12]
   1b056:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1b058:	6a3b      	ldr	r3, [r7, #32]
   1b05a:	68ba      	ldr	r2, [r7, #8]
   1b05c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1b05e:	6a3b      	ldr	r3, [r7, #32]
   1b060:	2101      	movs	r1, #1
   1b062:	0018      	movs	r0, r3
   1b064:	4b41      	ldr	r3, [pc, #260]	; (1b16c <prvInitialiseNewQueue+0x140>)
   1b066:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1b068:	6a3b      	ldr	r3, [r7, #32]
   1b06a:	1cfa      	adds	r2, r7, #3
   1b06c:	2150      	movs	r1, #80	; 0x50
   1b06e:	7812      	ldrb	r2, [r2, #0]
   1b070:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1b072:	6a3b      	ldr	r3, [r7, #32]
   1b074:	2200      	movs	r2, #0
   1b076:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1b078:	6a3b      	ldr	r3, [r7, #32]
   1b07a:	0018      	movs	r0, r3
   1b07c:	4b3c      	ldr	r3, [pc, #240]	; (1b170 <prvInitialiseNewQueue+0x144>)
   1b07e:	4798      	blx	r3
   1b080:	0003      	movs	r3, r0
   1b082:	001a      	movs	r2, r3
   1b084:	4b3b      	ldr	r3, [pc, #236]	; (1b174 <prvInitialiseNewQueue+0x148>)
   1b086:	5c9b      	ldrb	r3, [r3, r2]
   1b088:	0018      	movs	r0, r3
   1b08a:	4b3b      	ldr	r3, [pc, #236]	; (1b178 <prvInitialiseNewQueue+0x14c>)
   1b08c:	4798      	blx	r3
   1b08e:	0003      	movs	r3, r0
   1b090:	b29a      	uxth	r2, r3
   1b092:	6a3b      	ldr	r3, [r7, #32]
   1b094:	0011      	movs	r1, r2
   1b096:	0018      	movs	r0, r3
   1b098:	4b38      	ldr	r3, [pc, #224]	; (1b17c <prvInitialiseNewQueue+0x150>)
   1b09a:	4798      	blx	r3
   1b09c:	4b38      	ldr	r3, [pc, #224]	; (1b180 <prvInitialiseNewQueue+0x154>)
   1b09e:	881a      	ldrh	r2, [r3, #0]
   1b0a0:	6a3b      	ldr	r3, [r7, #32]
   1b0a2:	0011      	movs	r1, r2
   1b0a4:	0018      	movs	r0, r3
   1b0a6:	4b37      	ldr	r3, [pc, #220]	; (1b184 <prvInitialiseNewQueue+0x158>)
   1b0a8:	4798      	blx	r3
   1b0aa:	6a3b      	ldr	r3, [r7, #32]
   1b0ac:	0018      	movs	r0, r3
   1b0ae:	4b30      	ldr	r3, [pc, #192]	; (1b170 <prvInitialiseNewQueue+0x144>)
   1b0b0:	4798      	blx	r3
   1b0b2:	0003      	movs	r3, r0
   1b0b4:	001a      	movs	r2, r3
   1b0b6:	4b2f      	ldr	r3, [pc, #188]	; (1b174 <prvInitialiseNewQueue+0x148>)
   1b0b8:	5c9c      	ldrb	r4, [r3, r2]
   1b0ba:	6a3b      	ldr	r3, [r7, #32]
   1b0bc:	0018      	movs	r0, r3
   1b0be:	4b32      	ldr	r3, [pc, #200]	; (1b188 <prvInitialiseNewQueue+0x15c>)
   1b0c0:	4798      	blx	r3
   1b0c2:	0003      	movs	r3, r0
   1b0c4:	b2db      	uxtb	r3, r3
   1b0c6:	0019      	movs	r1, r3
   1b0c8:	0020      	movs	r0, r4
   1b0ca:	4b30      	ldr	r3, [pc, #192]	; (1b18c <prvInitialiseNewQueue+0x160>)
   1b0cc:	4798      	blx	r3
   1b0ce:	4b30      	ldr	r3, [pc, #192]	; (1b190 <prvInitialiseNewQueue+0x164>)
   1b0d0:	4798      	blx	r3
   1b0d2:	0003      	movs	r3, r0
   1b0d4:	0018      	movs	r0, r3
   1b0d6:	4b2f      	ldr	r3, [pc, #188]	; (1b194 <prvInitialiseNewQueue+0x168>)
   1b0d8:	4798      	blx	r3
   1b0da:	0003      	movs	r3, r0
   1b0dc:	001a      	movs	r2, r3
   1b0de:	4b2e      	ldr	r3, [pc, #184]	; (1b198 <prvInitialiseNewQueue+0x16c>)
   1b0e0:	881b      	ldrh	r3, [r3, #0]
   1b0e2:	4013      	ands	r3, r2
   1b0e4:	b29b      	uxth	r3, r3
   1b0e6:	2b00      	cmp	r3, #0
   1b0e8:	d029      	beq.n	1b13e <prvInitialiseNewQueue+0x112>
   1b0ea:	6a3b      	ldr	r3, [r7, #32]
   1b0ec:	0018      	movs	r0, r3
   1b0ee:	4b2b      	ldr	r3, [pc, #172]	; (1b19c <prvInitialiseNewQueue+0x170>)
   1b0f0:	4798      	blx	r3
   1b0f2:	0003      	movs	r3, r0
   1b0f4:	001a      	movs	r2, r3
   1b0f6:	4b28      	ldr	r3, [pc, #160]	; (1b198 <prvInitialiseNewQueue+0x16c>)
   1b0f8:	881b      	ldrh	r3, [r3, #0]
   1b0fa:	4013      	ands	r3, r2
   1b0fc:	b29b      	uxth	r3, r3
   1b0fe:	2b00      	cmp	r3, #0
   1b100:	d01d      	beq.n	1b13e <prvInitialiseNewQueue+0x112>
   1b102:	6a3b      	ldr	r3, [r7, #32]
   1b104:	0018      	movs	r0, r3
   1b106:	4b1a      	ldr	r3, [pc, #104]	; (1b170 <prvInitialiseNewQueue+0x144>)
   1b108:	4798      	blx	r3
   1b10a:	0003      	movs	r3, r0
   1b10c:	001a      	movs	r2, r3
   1b10e:	4b19      	ldr	r3, [pc, #100]	; (1b174 <prvInitialiseNewQueue+0x148>)
   1b110:	5c9b      	ldrb	r3, [r3, r2]
   1b112:	3318      	adds	r3, #24
   1b114:	b2db      	uxtb	r3, r3
   1b116:	001d      	movs	r5, r3
   1b118:	6a3b      	ldr	r3, [r7, #32]
   1b11a:	0018      	movs	r0, r3
   1b11c:	4b14      	ldr	r3, [pc, #80]	; (1b170 <prvInitialiseNewQueue+0x144>)
   1b11e:	4798      	blx	r3
   1b120:	0003      	movs	r3, r0
   1b122:	001a      	movs	r2, r3
   1b124:	4b13      	ldr	r3, [pc, #76]	; (1b174 <prvInitialiseNewQueue+0x148>)
   1b126:	5c9c      	ldrb	r4, [r3, r2]
   1b128:	6a3b      	ldr	r3, [r7, #32]
   1b12a:	0018      	movs	r0, r3
   1b12c:	4b16      	ldr	r3, [pc, #88]	; (1b188 <prvInitialiseNewQueue+0x15c>)
   1b12e:	4798      	blx	r3
   1b130:	0003      	movs	r3, r0
   1b132:	b2db      	uxtb	r3, r3
   1b134:	001a      	movs	r2, r3
   1b136:	0021      	movs	r1, r4
   1b138:	0028      	movs	r0, r5
   1b13a:	4b19      	ldr	r3, [pc, #100]	; (1b1a0 <prvInitialiseNewQueue+0x174>)
   1b13c:	4798      	blx	r3
   1b13e:	6a3b      	ldr	r3, [r7, #32]
   1b140:	0018      	movs	r0, r3
   1b142:	4b0b      	ldr	r3, [pc, #44]	; (1b170 <prvInitialiseNewQueue+0x144>)
   1b144:	4798      	blx	r3
   1b146:	0003      	movs	r3, r0
   1b148:	001a      	movs	r2, r3
   1b14a:	4b0a      	ldr	r3, [pc, #40]	; (1b174 <prvInitialiseNewQueue+0x148>)
   1b14c:	5c9c      	ldrb	r4, [r3, r2]
   1b14e:	6a3b      	ldr	r3, [r7, #32]
   1b150:	0018      	movs	r0, r3
   1b152:	4b0d      	ldr	r3, [pc, #52]	; (1b188 <prvInitialiseNewQueue+0x15c>)
   1b154:	4798      	blx	r3
   1b156:	0003      	movs	r3, r0
   1b158:	b2db      	uxtb	r3, r3
   1b15a:	2200      	movs	r2, #0
   1b15c:	0019      	movs	r1, r3
   1b15e:	0020      	movs	r0, r4
   1b160:	4b10      	ldr	r3, [pc, #64]	; (1b1a4 <prvInitialiseNewQueue+0x178>)
   1b162:	4798      	blx	r3
}
   1b164:	46c0      	nop			; (mov r8, r8)
   1b166:	46bd      	mov	sp, r7
   1b168:	b004      	add	sp, #16
   1b16a:	bdb0      	pop	{r4, r5, r7, pc}
   1b16c:	0001aebd 	.word	0x0001aebd
   1b170:	00018c41 	.word	0x00018c41
   1b174:	200000f8 	.word	0x200000f8
   1b178:	0001a201 	.word	0x0001a201
   1b17c:	00018d65 	.word	0x00018d65
   1b180:	20000106 	.word	0x20000106
   1b184:	00018da1 	.word	0x00018da1
   1b188:	00018d21 	.word	0x00018d21
   1b18c:	0001a399 	.word	0x0001a399
   1b190:	00018f1d 	.word	0x00018f1d
   1b194:	00018c81 	.word	0x00018c81
   1b198:	20000104 	.word	0x20000104
   1b19c:	00018d41 	.word	0x00018d41
   1b1a0:	00019679 	.word	0x00019679
   1b1a4:	00019cd5 	.word	0x00019cd5

0001b1a8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1b1a8:	b590      	push	{r4, r7, lr}
   1b1aa:	b083      	sub	sp, #12
   1b1ac:	af00      	add	r7, sp, #0
   1b1ae:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1b1b0:	687b      	ldr	r3, [r7, #4]
   1b1b2:	2b00      	cmp	r3, #0
   1b1b4:	d00e      	beq.n	1b1d4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1b1b6:	687b      	ldr	r3, [r7, #4]
   1b1b8:	2200      	movs	r2, #0
   1b1ba:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1b1bc:	687b      	ldr	r3, [r7, #4]
   1b1be:	2200      	movs	r2, #0
   1b1c0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1b1c2:	687b      	ldr	r3, [r7, #4]
   1b1c4:	2200      	movs	r2, #0
   1b1c6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1b1c8:	6878      	ldr	r0, [r7, #4]
   1b1ca:	2300      	movs	r3, #0
   1b1cc:	2200      	movs	r2, #0
   1b1ce:	2100      	movs	r1, #0
   1b1d0:	4c02      	ldr	r4, [pc, #8]	; (1b1dc <prvInitialiseMutex+0x34>)
   1b1d2:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1b1d4:	46c0      	nop			; (mov r8, r8)
   1b1d6:	46bd      	mov	sp, r7
   1b1d8:	b003      	add	sp, #12
   1b1da:	bd90      	pop	{r4, r7, pc}
   1b1dc:	0001b221 	.word	0x0001b221

0001b1e0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1b1e0:	b580      	push	{r7, lr}
   1b1e2:	b086      	sub	sp, #24
   1b1e4:	af00      	add	r7, sp, #0
   1b1e6:	0002      	movs	r2, r0
   1b1e8:	1dfb      	adds	r3, r7, #7
   1b1ea:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1b1ec:	2301      	movs	r3, #1
   1b1ee:	617b      	str	r3, [r7, #20]
   1b1f0:	2300      	movs	r3, #0
   1b1f2:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1b1f4:	1dfb      	adds	r3, r7, #7
   1b1f6:	781a      	ldrb	r2, [r3, #0]
   1b1f8:	6939      	ldr	r1, [r7, #16]
   1b1fa:	697b      	ldr	r3, [r7, #20]
   1b1fc:	0018      	movs	r0, r3
   1b1fe:	4b06      	ldr	r3, [pc, #24]	; (1b218 <xQueueCreateMutex+0x38>)
   1b200:	4798      	blx	r3
   1b202:	0003      	movs	r3, r0
   1b204:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1b206:	68fb      	ldr	r3, [r7, #12]
   1b208:	0018      	movs	r0, r3
   1b20a:	4b04      	ldr	r3, [pc, #16]	; (1b21c <xQueueCreateMutex+0x3c>)
   1b20c:	4798      	blx	r3

		return pxNewQueue;
   1b20e:	68fb      	ldr	r3, [r7, #12]
	}
   1b210:	0018      	movs	r0, r3
   1b212:	46bd      	mov	sp, r7
   1b214:	b006      	add	sp, #24
   1b216:	bd80      	pop	{r7, pc}
   1b218:	0001af79 	.word	0x0001af79
   1b21c:	0001b1a9 	.word	0x0001b1a9

0001b220 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1b220:	b5b0      	push	{r4, r5, r7, lr}
   1b222:	b08a      	sub	sp, #40	; 0x28
   1b224:	af00      	add	r7, sp, #0
   1b226:	60f8      	str	r0, [r7, #12]
   1b228:	60b9      	str	r1, [r7, #8]
   1b22a:	607a      	str	r2, [r7, #4]
   1b22c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1b22e:	2300      	movs	r3, #0
   1b230:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b232:	68fb      	ldr	r3, [r7, #12]
   1b234:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1b236:	6a3b      	ldr	r3, [r7, #32]
   1b238:	2b00      	cmp	r3, #0
   1b23a:	d101      	bne.n	1b240 <xQueueGenericSend+0x20>
   1b23c:	b672      	cpsid	i
   1b23e:	e7fe      	b.n	1b23e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b240:	68bb      	ldr	r3, [r7, #8]
   1b242:	2b00      	cmp	r3, #0
   1b244:	d103      	bne.n	1b24e <xQueueGenericSend+0x2e>
   1b246:	6a3b      	ldr	r3, [r7, #32]
   1b248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b24a:	2b00      	cmp	r3, #0
   1b24c:	d101      	bne.n	1b252 <xQueueGenericSend+0x32>
   1b24e:	2301      	movs	r3, #1
   1b250:	e000      	b.n	1b254 <xQueueGenericSend+0x34>
   1b252:	2300      	movs	r3, #0
   1b254:	2b00      	cmp	r3, #0
   1b256:	d101      	bne.n	1b25c <xQueueGenericSend+0x3c>
   1b258:	b672      	cpsid	i
   1b25a:	e7fe      	b.n	1b25a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b25c:	683b      	ldr	r3, [r7, #0]
   1b25e:	2b02      	cmp	r3, #2
   1b260:	d103      	bne.n	1b26a <xQueueGenericSend+0x4a>
   1b262:	6a3b      	ldr	r3, [r7, #32]
   1b264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b266:	2b01      	cmp	r3, #1
   1b268:	d101      	bne.n	1b26e <xQueueGenericSend+0x4e>
   1b26a:	2301      	movs	r3, #1
   1b26c:	e000      	b.n	1b270 <xQueueGenericSend+0x50>
   1b26e:	2300      	movs	r3, #0
   1b270:	2b00      	cmp	r3, #0
   1b272:	d101      	bne.n	1b278 <xQueueGenericSend+0x58>
   1b274:	b672      	cpsid	i
   1b276:	e7fe      	b.n	1b276 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b278:	4bbc      	ldr	r3, [pc, #752]	; (1b56c <xQueueGenericSend+0x34c>)
   1b27a:	4798      	blx	r3
   1b27c:	1e03      	subs	r3, r0, #0
   1b27e:	d102      	bne.n	1b286 <xQueueGenericSend+0x66>
   1b280:	687b      	ldr	r3, [r7, #4]
   1b282:	2b00      	cmp	r3, #0
   1b284:	d101      	bne.n	1b28a <xQueueGenericSend+0x6a>
   1b286:	2301      	movs	r3, #1
   1b288:	e000      	b.n	1b28c <xQueueGenericSend+0x6c>
   1b28a:	2300      	movs	r3, #0
   1b28c:	2b00      	cmp	r3, #0
   1b28e:	d101      	bne.n	1b294 <xQueueGenericSend+0x74>
   1b290:	b672      	cpsid	i
   1b292:	e7fe      	b.n	1b292 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1b294:	4bb6      	ldr	r3, [pc, #728]	; (1b570 <xQueueGenericSend+0x350>)
   1b296:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b298:	6a3b      	ldr	r3, [r7, #32]
   1b29a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b29c:	6a3b      	ldr	r3, [r7, #32]
   1b29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b2a0:	429a      	cmp	r2, r3
   1b2a2:	d303      	bcc.n	1b2ac <xQueueGenericSend+0x8c>
   1b2a4:	683b      	ldr	r3, [r7, #0]
   1b2a6:	2b02      	cmp	r3, #2
   1b2a8:	d000      	beq.n	1b2ac <xQueueGenericSend+0x8c>
   1b2aa:	e08e      	b.n	1b3ca <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1b2ac:	4bb1      	ldr	r3, [pc, #708]	; (1b574 <xQueueGenericSend+0x354>)
   1b2ae:	4798      	blx	r3
   1b2b0:	0003      	movs	r3, r0
   1b2b2:	0018      	movs	r0, r3
   1b2b4:	4bb0      	ldr	r3, [pc, #704]	; (1b578 <xQueueGenericSend+0x358>)
   1b2b6:	4798      	blx	r3
   1b2b8:	0003      	movs	r3, r0
   1b2ba:	001a      	movs	r2, r3
   1b2bc:	4baf      	ldr	r3, [pc, #700]	; (1b57c <xQueueGenericSend+0x35c>)
   1b2be:	881b      	ldrh	r3, [r3, #0]
   1b2c0:	4013      	ands	r3, r2
   1b2c2:	b29b      	uxth	r3, r3
   1b2c4:	2b00      	cmp	r3, #0
   1b2c6:	d02e      	beq.n	1b326 <xQueueGenericSend+0x106>
   1b2c8:	6a3b      	ldr	r3, [r7, #32]
   1b2ca:	0018      	movs	r0, r3
   1b2cc:	4bac      	ldr	r3, [pc, #688]	; (1b580 <xQueueGenericSend+0x360>)
   1b2ce:	4798      	blx	r3
   1b2d0:	0003      	movs	r3, r0
   1b2d2:	001a      	movs	r2, r3
   1b2d4:	4ba9      	ldr	r3, [pc, #676]	; (1b57c <xQueueGenericSend+0x35c>)
   1b2d6:	881b      	ldrh	r3, [r3, #0]
   1b2d8:	4013      	ands	r3, r2
   1b2da:	b29b      	uxth	r3, r3
   1b2dc:	2b00      	cmp	r3, #0
   1b2de:	d022      	beq.n	1b326 <xQueueGenericSend+0x106>
   1b2e0:	683b      	ldr	r3, [r7, #0]
   1b2e2:	2b00      	cmp	r3, #0
   1b2e4:	d10b      	bne.n	1b2fe <xQueueGenericSend+0xde>
   1b2e6:	6a3b      	ldr	r3, [r7, #32]
   1b2e8:	0018      	movs	r0, r3
   1b2ea:	4ba6      	ldr	r3, [pc, #664]	; (1b584 <xQueueGenericSend+0x364>)
   1b2ec:	4798      	blx	r3
   1b2ee:	0003      	movs	r3, r0
   1b2f0:	001a      	movs	r2, r3
   1b2f2:	4ba5      	ldr	r3, [pc, #660]	; (1b588 <xQueueGenericSend+0x368>)
   1b2f4:	5c9b      	ldrb	r3, [r3, r2]
   1b2f6:	3320      	adds	r3, #32
   1b2f8:	b2db      	uxtb	r3, r3
   1b2fa:	001d      	movs	r5, r3
   1b2fc:	e000      	b.n	1b300 <xQueueGenericSend+0xe0>
   1b2fe:	2525      	movs	r5, #37	; 0x25
   1b300:	6a3b      	ldr	r3, [r7, #32]
   1b302:	0018      	movs	r0, r3
   1b304:	4b9f      	ldr	r3, [pc, #636]	; (1b584 <xQueueGenericSend+0x364>)
   1b306:	4798      	blx	r3
   1b308:	0003      	movs	r3, r0
   1b30a:	001a      	movs	r2, r3
   1b30c:	4b9e      	ldr	r3, [pc, #632]	; (1b588 <xQueueGenericSend+0x368>)
   1b30e:	5c9c      	ldrb	r4, [r3, r2]
   1b310:	6a3b      	ldr	r3, [r7, #32]
   1b312:	0018      	movs	r0, r3
   1b314:	4b9d      	ldr	r3, [pc, #628]	; (1b58c <xQueueGenericSend+0x36c>)
   1b316:	4798      	blx	r3
   1b318:	0003      	movs	r3, r0
   1b31a:	b2db      	uxtb	r3, r3
   1b31c:	001a      	movs	r2, r3
   1b31e:	0021      	movs	r1, r4
   1b320:	0028      	movs	r0, r5
   1b322:	4b9b      	ldr	r3, [pc, #620]	; (1b590 <xQueueGenericSend+0x370>)
   1b324:	4798      	blx	r3
   1b326:	6a3b      	ldr	r3, [r7, #32]
   1b328:	0018      	movs	r0, r3
   1b32a:	4b96      	ldr	r3, [pc, #600]	; (1b584 <xQueueGenericSend+0x364>)
   1b32c:	4798      	blx	r3
   1b32e:	0003      	movs	r3, r0
   1b330:	001a      	movs	r2, r3
   1b332:	4b95      	ldr	r3, [pc, #596]	; (1b588 <xQueueGenericSend+0x368>)
   1b334:	5c9c      	ldrb	r4, [r3, r2]
   1b336:	6a3b      	ldr	r3, [r7, #32]
   1b338:	0018      	movs	r0, r3
   1b33a:	4b94      	ldr	r3, [pc, #592]	; (1b58c <xQueueGenericSend+0x36c>)
   1b33c:	4798      	blx	r3
   1b33e:	0003      	movs	r3, r0
   1b340:	b2dd      	uxtb	r5, r3
   1b342:	6a3b      	ldr	r3, [r7, #32]
   1b344:	0018      	movs	r0, r3
   1b346:	4b8f      	ldr	r3, [pc, #572]	; (1b584 <xQueueGenericSend+0x364>)
   1b348:	4798      	blx	r3
   1b34a:	0003      	movs	r3, r0
   1b34c:	001a      	movs	r2, r3
   1b34e:	4b8e      	ldr	r3, [pc, #568]	; (1b588 <xQueueGenericSend+0x368>)
   1b350:	5c9b      	ldrb	r3, [r3, r2]
   1b352:	2b02      	cmp	r3, #2
   1b354:	d005      	beq.n	1b362 <xQueueGenericSend+0x142>
   1b356:	6a3b      	ldr	r3, [r7, #32]
   1b358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b35a:	b2db      	uxtb	r3, r3
   1b35c:	3301      	adds	r3, #1
   1b35e:	b2db      	uxtb	r3, r3
   1b360:	e000      	b.n	1b364 <xQueueGenericSend+0x144>
   1b362:	2300      	movs	r3, #0
   1b364:	001a      	movs	r2, r3
   1b366:	0029      	movs	r1, r5
   1b368:	0020      	movs	r0, r4
   1b36a:	4b8a      	ldr	r3, [pc, #552]	; (1b594 <xQueueGenericSend+0x374>)
   1b36c:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b36e:	683a      	ldr	r2, [r7, #0]
   1b370:	68b9      	ldr	r1, [r7, #8]
   1b372:	6a3b      	ldr	r3, [r7, #32]
   1b374:	0018      	movs	r0, r3
   1b376:	4b88      	ldr	r3, [pc, #544]	; (1b598 <xQueueGenericSend+0x378>)
   1b378:	4798      	blx	r3
   1b37a:	0003      	movs	r3, r0
   1b37c:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b37e:	6a3b      	ldr	r3, [r7, #32]
   1b380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b382:	2b00      	cmp	r3, #0
   1b384:	d00a      	beq.n	1b39c <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b386:	683a      	ldr	r2, [r7, #0]
   1b388:	6a3b      	ldr	r3, [r7, #32]
   1b38a:	0011      	movs	r1, r2
   1b38c:	0018      	movs	r0, r3
   1b38e:	4b83      	ldr	r3, [pc, #524]	; (1b59c <xQueueGenericSend+0x37c>)
   1b390:	4798      	blx	r3
   1b392:	1e03      	subs	r3, r0, #0
   1b394:	d015      	beq.n	1b3c2 <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1b396:	4b82      	ldr	r3, [pc, #520]	; (1b5a0 <xQueueGenericSend+0x380>)
   1b398:	4798      	blx	r3
   1b39a:	e012      	b.n	1b3c2 <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b39c:	6a3b      	ldr	r3, [r7, #32]
   1b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b3a0:	2b00      	cmp	r3, #0
   1b3a2:	d009      	beq.n	1b3b8 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b3a4:	6a3b      	ldr	r3, [r7, #32]
   1b3a6:	3324      	adds	r3, #36	; 0x24
   1b3a8:	0018      	movs	r0, r3
   1b3aa:	4b7e      	ldr	r3, [pc, #504]	; (1b5a4 <xQueueGenericSend+0x384>)
   1b3ac:	4798      	blx	r3
   1b3ae:	1e03      	subs	r3, r0, #0
   1b3b0:	d007      	beq.n	1b3c2 <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1b3b2:	4b7b      	ldr	r3, [pc, #492]	; (1b5a0 <xQueueGenericSend+0x380>)
   1b3b4:	4798      	blx	r3
   1b3b6:	e004      	b.n	1b3c2 <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1b3b8:	69fb      	ldr	r3, [r7, #28]
   1b3ba:	2b00      	cmp	r3, #0
   1b3bc:	d001      	beq.n	1b3c2 <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1b3be:	4b78      	ldr	r3, [pc, #480]	; (1b5a0 <xQueueGenericSend+0x380>)
   1b3c0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1b3c2:	4b79      	ldr	r3, [pc, #484]	; (1b5a8 <xQueueGenericSend+0x388>)
   1b3c4:	4798      	blx	r3
				return pdPASS;
   1b3c6:	2301      	movs	r3, #1
   1b3c8:	e142      	b.n	1b650 <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b3ca:	687b      	ldr	r3, [r7, #4]
   1b3cc:	2b00      	cmp	r3, #0
   1b3ce:	d140      	bne.n	1b452 <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b3d0:	4b75      	ldr	r3, [pc, #468]	; (1b5a8 <xQueueGenericSend+0x388>)
   1b3d2:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1b3d4:	4b67      	ldr	r3, [pc, #412]	; (1b574 <xQueueGenericSend+0x354>)
   1b3d6:	4798      	blx	r3
   1b3d8:	0003      	movs	r3, r0
   1b3da:	0018      	movs	r0, r3
   1b3dc:	4b66      	ldr	r3, [pc, #408]	; (1b578 <xQueueGenericSend+0x358>)
   1b3de:	4798      	blx	r3
   1b3e0:	0003      	movs	r3, r0
   1b3e2:	001a      	movs	r2, r3
   1b3e4:	4b65      	ldr	r3, [pc, #404]	; (1b57c <xQueueGenericSend+0x35c>)
   1b3e6:	881b      	ldrh	r3, [r3, #0]
   1b3e8:	4013      	ands	r3, r2
   1b3ea:	b29b      	uxth	r3, r3
   1b3ec:	2b00      	cmp	r3, #0
   1b3ee:	d02e      	beq.n	1b44e <xQueueGenericSend+0x22e>
   1b3f0:	6a3b      	ldr	r3, [r7, #32]
   1b3f2:	0018      	movs	r0, r3
   1b3f4:	4b62      	ldr	r3, [pc, #392]	; (1b580 <xQueueGenericSend+0x360>)
   1b3f6:	4798      	blx	r3
   1b3f8:	0003      	movs	r3, r0
   1b3fa:	001a      	movs	r2, r3
   1b3fc:	4b5f      	ldr	r3, [pc, #380]	; (1b57c <xQueueGenericSend+0x35c>)
   1b3fe:	881b      	ldrh	r3, [r3, #0]
   1b400:	4013      	ands	r3, r2
   1b402:	b29b      	uxth	r3, r3
   1b404:	2b00      	cmp	r3, #0
   1b406:	d022      	beq.n	1b44e <xQueueGenericSend+0x22e>
   1b408:	683b      	ldr	r3, [r7, #0]
   1b40a:	2b00      	cmp	r3, #0
   1b40c:	d10b      	bne.n	1b426 <xQueueGenericSend+0x206>
   1b40e:	6a3b      	ldr	r3, [r7, #32]
   1b410:	0018      	movs	r0, r3
   1b412:	4b5c      	ldr	r3, [pc, #368]	; (1b584 <xQueueGenericSend+0x364>)
   1b414:	4798      	blx	r3
   1b416:	0003      	movs	r3, r0
   1b418:	001a      	movs	r2, r3
   1b41a:	4b5b      	ldr	r3, [pc, #364]	; (1b588 <xQueueGenericSend+0x368>)
   1b41c:	5c9b      	ldrb	r3, [r3, r2]
   1b41e:	3348      	adds	r3, #72	; 0x48
   1b420:	b2db      	uxtb	r3, r3
   1b422:	001d      	movs	r5, r3
   1b424:	e000      	b.n	1b428 <xQueueGenericSend+0x208>
   1b426:	254d      	movs	r5, #77	; 0x4d
   1b428:	6a3b      	ldr	r3, [r7, #32]
   1b42a:	0018      	movs	r0, r3
   1b42c:	4b55      	ldr	r3, [pc, #340]	; (1b584 <xQueueGenericSend+0x364>)
   1b42e:	4798      	blx	r3
   1b430:	0003      	movs	r3, r0
   1b432:	001a      	movs	r2, r3
   1b434:	4b54      	ldr	r3, [pc, #336]	; (1b588 <xQueueGenericSend+0x368>)
   1b436:	5c9c      	ldrb	r4, [r3, r2]
   1b438:	6a3b      	ldr	r3, [r7, #32]
   1b43a:	0018      	movs	r0, r3
   1b43c:	4b53      	ldr	r3, [pc, #332]	; (1b58c <xQueueGenericSend+0x36c>)
   1b43e:	4798      	blx	r3
   1b440:	0003      	movs	r3, r0
   1b442:	b2db      	uxtb	r3, r3
   1b444:	001a      	movs	r2, r3
   1b446:	0021      	movs	r1, r4
   1b448:	0028      	movs	r0, r5
   1b44a:	4b51      	ldr	r3, [pc, #324]	; (1b590 <xQueueGenericSend+0x370>)
   1b44c:	4798      	blx	r3
					return errQUEUE_FULL;
   1b44e:	2300      	movs	r3, #0
   1b450:	e0fe      	b.n	1b650 <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b454:	2b00      	cmp	r3, #0
   1b456:	d106      	bne.n	1b466 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b458:	2314      	movs	r3, #20
   1b45a:	18fb      	adds	r3, r7, r3
   1b45c:	0018      	movs	r0, r3
   1b45e:	4b53      	ldr	r3, [pc, #332]	; (1b5ac <xQueueGenericSend+0x38c>)
   1b460:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b462:	2301      	movs	r3, #1
   1b464:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b466:	4b50      	ldr	r3, [pc, #320]	; (1b5a8 <xQueueGenericSend+0x388>)
   1b468:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b46a:	4b51      	ldr	r3, [pc, #324]	; (1b5b0 <xQueueGenericSend+0x390>)
   1b46c:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b46e:	4b40      	ldr	r3, [pc, #256]	; (1b570 <xQueueGenericSend+0x350>)
   1b470:	4798      	blx	r3
   1b472:	6a3b      	ldr	r3, [r7, #32]
   1b474:	2244      	movs	r2, #68	; 0x44
   1b476:	5c9b      	ldrb	r3, [r3, r2]
   1b478:	b25b      	sxtb	r3, r3
   1b47a:	3301      	adds	r3, #1
   1b47c:	d103      	bne.n	1b486 <xQueueGenericSend+0x266>
   1b47e:	6a3b      	ldr	r3, [r7, #32]
   1b480:	2244      	movs	r2, #68	; 0x44
   1b482:	2100      	movs	r1, #0
   1b484:	5499      	strb	r1, [r3, r2]
   1b486:	6a3b      	ldr	r3, [r7, #32]
   1b488:	2245      	movs	r2, #69	; 0x45
   1b48a:	5c9b      	ldrb	r3, [r3, r2]
   1b48c:	b25b      	sxtb	r3, r3
   1b48e:	3301      	adds	r3, #1
   1b490:	d103      	bne.n	1b49a <xQueueGenericSend+0x27a>
   1b492:	6a3b      	ldr	r3, [r7, #32]
   1b494:	2245      	movs	r2, #69	; 0x45
   1b496:	2100      	movs	r1, #0
   1b498:	5499      	strb	r1, [r3, r2]
   1b49a:	4b43      	ldr	r3, [pc, #268]	; (1b5a8 <xQueueGenericSend+0x388>)
   1b49c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b49e:	1d3a      	adds	r2, r7, #4
   1b4a0:	2314      	movs	r3, #20
   1b4a2:	18fb      	adds	r3, r7, r3
   1b4a4:	0011      	movs	r1, r2
   1b4a6:	0018      	movs	r0, r3
   1b4a8:	4b42      	ldr	r3, [pc, #264]	; (1b5b4 <xQueueGenericSend+0x394>)
   1b4aa:	4798      	blx	r3
   1b4ac:	1e03      	subs	r3, r0, #0
   1b4ae:	d000      	beq.n	1b4b2 <xQueueGenericSend+0x292>
   1b4b0:	e08a      	b.n	1b5c8 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1b4b2:	6a3b      	ldr	r3, [r7, #32]
   1b4b4:	0018      	movs	r0, r3
   1b4b6:	4b40      	ldr	r3, [pc, #256]	; (1b5b8 <xQueueGenericSend+0x398>)
   1b4b8:	4798      	blx	r3
   1b4ba:	1e03      	subs	r3, r0, #0
   1b4bc:	d04f      	beq.n	1b55e <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1b4be:	4b2d      	ldr	r3, [pc, #180]	; (1b574 <xQueueGenericSend+0x354>)
   1b4c0:	4798      	blx	r3
   1b4c2:	0003      	movs	r3, r0
   1b4c4:	0018      	movs	r0, r3
   1b4c6:	4b2c      	ldr	r3, [pc, #176]	; (1b578 <xQueueGenericSend+0x358>)
   1b4c8:	4798      	blx	r3
   1b4ca:	0003      	movs	r3, r0
   1b4cc:	001a      	movs	r2, r3
   1b4ce:	4b2b      	ldr	r3, [pc, #172]	; (1b57c <xQueueGenericSend+0x35c>)
   1b4d0:	881b      	ldrh	r3, [r3, #0]
   1b4d2:	4013      	ands	r3, r2
   1b4d4:	b29b      	uxth	r3, r3
   1b4d6:	2b00      	cmp	r3, #0
   1b4d8:	d02e      	beq.n	1b538 <xQueueGenericSend+0x318>
   1b4da:	6a3b      	ldr	r3, [r7, #32]
   1b4dc:	0018      	movs	r0, r3
   1b4de:	4b28      	ldr	r3, [pc, #160]	; (1b580 <xQueueGenericSend+0x360>)
   1b4e0:	4798      	blx	r3
   1b4e2:	0003      	movs	r3, r0
   1b4e4:	001a      	movs	r2, r3
   1b4e6:	4b25      	ldr	r3, [pc, #148]	; (1b57c <xQueueGenericSend+0x35c>)
   1b4e8:	881b      	ldrh	r3, [r3, #0]
   1b4ea:	4013      	ands	r3, r2
   1b4ec:	b29b      	uxth	r3, r3
   1b4ee:	2b00      	cmp	r3, #0
   1b4f0:	d022      	beq.n	1b538 <xQueueGenericSend+0x318>
   1b4f2:	683b      	ldr	r3, [r7, #0]
   1b4f4:	2b00      	cmp	r3, #0
   1b4f6:	d10b      	bne.n	1b510 <xQueueGenericSend+0x2f0>
   1b4f8:	6a3b      	ldr	r3, [r7, #32]
   1b4fa:	0018      	movs	r0, r3
   1b4fc:	4b21      	ldr	r3, [pc, #132]	; (1b584 <xQueueGenericSend+0x364>)
   1b4fe:	4798      	blx	r3
   1b500:	0003      	movs	r3, r0
   1b502:	001a      	movs	r2, r3
   1b504:	4b20      	ldr	r3, [pc, #128]	; (1b588 <xQueueGenericSend+0x368>)
   1b506:	5c9b      	ldrb	r3, [r3, r2]
   1b508:	3370      	adds	r3, #112	; 0x70
   1b50a:	b2db      	uxtb	r3, r3
   1b50c:	001d      	movs	r5, r3
   1b50e:	e000      	b.n	1b512 <xQueueGenericSend+0x2f2>
   1b510:	2575      	movs	r5, #117	; 0x75
   1b512:	6a3b      	ldr	r3, [r7, #32]
   1b514:	0018      	movs	r0, r3
   1b516:	4b1b      	ldr	r3, [pc, #108]	; (1b584 <xQueueGenericSend+0x364>)
   1b518:	4798      	blx	r3
   1b51a:	0003      	movs	r3, r0
   1b51c:	001a      	movs	r2, r3
   1b51e:	4b1a      	ldr	r3, [pc, #104]	; (1b588 <xQueueGenericSend+0x368>)
   1b520:	5c9c      	ldrb	r4, [r3, r2]
   1b522:	6a3b      	ldr	r3, [r7, #32]
   1b524:	0018      	movs	r0, r3
   1b526:	4b19      	ldr	r3, [pc, #100]	; (1b58c <xQueueGenericSend+0x36c>)
   1b528:	4798      	blx	r3
   1b52a:	0003      	movs	r3, r0
   1b52c:	b2db      	uxtb	r3, r3
   1b52e:	001a      	movs	r2, r3
   1b530:	0021      	movs	r1, r4
   1b532:	0028      	movs	r0, r5
   1b534:	4b16      	ldr	r3, [pc, #88]	; (1b590 <xQueueGenericSend+0x370>)
   1b536:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1b538:	6a3b      	ldr	r3, [r7, #32]
   1b53a:	3310      	adds	r3, #16
   1b53c:	687a      	ldr	r2, [r7, #4]
   1b53e:	0011      	movs	r1, r2
   1b540:	0018      	movs	r0, r3
   1b542:	4b1e      	ldr	r3, [pc, #120]	; (1b5bc <xQueueGenericSend+0x39c>)
   1b544:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1b546:	6a3b      	ldr	r3, [r7, #32]
   1b548:	0018      	movs	r0, r3
   1b54a:	4b1d      	ldr	r3, [pc, #116]	; (1b5c0 <xQueueGenericSend+0x3a0>)
   1b54c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1b54e:	4b1d      	ldr	r3, [pc, #116]	; (1b5c4 <xQueueGenericSend+0x3a4>)
   1b550:	4798      	blx	r3
   1b552:	1e03      	subs	r3, r0, #0
   1b554:	d000      	beq.n	1b558 <xQueueGenericSend+0x338>
   1b556:	e69d      	b.n	1b294 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1b558:	4b11      	ldr	r3, [pc, #68]	; (1b5a0 <xQueueGenericSend+0x380>)
   1b55a:	4798      	blx	r3
   1b55c:	e69a      	b.n	1b294 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1b55e:	6a3b      	ldr	r3, [r7, #32]
   1b560:	0018      	movs	r0, r3
   1b562:	4b17      	ldr	r3, [pc, #92]	; (1b5c0 <xQueueGenericSend+0x3a0>)
   1b564:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b566:	4b17      	ldr	r3, [pc, #92]	; (1b5c4 <xQueueGenericSend+0x3a4>)
   1b568:	4798      	blx	r3
   1b56a:	e693      	b.n	1b294 <xQueueGenericSend+0x74>
   1b56c:	0001d9ad 	.word	0x0001d9ad
   1b570:	0001ac89 	.word	0x0001ac89
   1b574:	00018f1d 	.word	0x00018f1d
   1b578:	00018c81 	.word	0x00018c81
   1b57c:	20000104 	.word	0x20000104
   1b580:	00018d41 	.word	0x00018d41
   1b584:	00018c41 	.word	0x00018c41
   1b588:	200000f8 	.word	0x200000f8
   1b58c:	00018d21 	.word	0x00018d21
   1b590:	00019679 	.word	0x00019679
   1b594:	00019cd5 	.word	0x00019cd5
   1b598:	0001c459 	.word	0x0001c459
   1b59c:	0001c75d 	.word	0x0001c75d
   1b5a0:	0001ac71 	.word	0x0001ac71
   1b5a4:	0001d51d 	.word	0x0001d51d
   1b5a8:	0001acad 	.word	0x0001acad
   1b5ac:	0001d65d 	.word	0x0001d65d
   1b5b0:	0001cf45 	.word	0x0001cf45
   1b5b4:	0001d685 	.word	0x0001d685
   1b5b8:	0001c6ad 	.word	0x0001c6ad
   1b5bc:	0001d3f9 	.word	0x0001d3f9
   1b5c0:	0001c589 	.word	0x0001c589
   1b5c4:	0001cf5d 	.word	0x0001cf5d
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1b5c8:	6a3b      	ldr	r3, [r7, #32]
   1b5ca:	0018      	movs	r0, r3
   1b5cc:	4b22      	ldr	r3, [pc, #136]	; (1b658 <xQueueGenericSend+0x438>)
   1b5ce:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b5d0:	4b22      	ldr	r3, [pc, #136]	; (1b65c <xQueueGenericSend+0x43c>)
   1b5d2:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1b5d4:	4b22      	ldr	r3, [pc, #136]	; (1b660 <xQueueGenericSend+0x440>)
   1b5d6:	4798      	blx	r3
   1b5d8:	0003      	movs	r3, r0
   1b5da:	0018      	movs	r0, r3
   1b5dc:	4b21      	ldr	r3, [pc, #132]	; (1b664 <xQueueGenericSend+0x444>)
   1b5de:	4798      	blx	r3
   1b5e0:	0003      	movs	r3, r0
   1b5e2:	001a      	movs	r2, r3
   1b5e4:	4b20      	ldr	r3, [pc, #128]	; (1b668 <xQueueGenericSend+0x448>)
   1b5e6:	881b      	ldrh	r3, [r3, #0]
   1b5e8:	4013      	ands	r3, r2
   1b5ea:	b29b      	uxth	r3, r3
   1b5ec:	2b00      	cmp	r3, #0
   1b5ee:	d02e      	beq.n	1b64e <xQueueGenericSend+0x42e>
   1b5f0:	6a3b      	ldr	r3, [r7, #32]
   1b5f2:	0018      	movs	r0, r3
   1b5f4:	4b1d      	ldr	r3, [pc, #116]	; (1b66c <xQueueGenericSend+0x44c>)
   1b5f6:	4798      	blx	r3
   1b5f8:	0003      	movs	r3, r0
   1b5fa:	001a      	movs	r2, r3
   1b5fc:	4b1a      	ldr	r3, [pc, #104]	; (1b668 <xQueueGenericSend+0x448>)
   1b5fe:	881b      	ldrh	r3, [r3, #0]
   1b600:	4013      	ands	r3, r2
   1b602:	b29b      	uxth	r3, r3
   1b604:	2b00      	cmp	r3, #0
   1b606:	d022      	beq.n	1b64e <xQueueGenericSend+0x42e>
   1b608:	683b      	ldr	r3, [r7, #0]
   1b60a:	2b00      	cmp	r3, #0
   1b60c:	d10b      	bne.n	1b626 <xQueueGenericSend+0x406>
   1b60e:	6a3b      	ldr	r3, [r7, #32]
   1b610:	0018      	movs	r0, r3
   1b612:	4b17      	ldr	r3, [pc, #92]	; (1b670 <xQueueGenericSend+0x450>)
   1b614:	4798      	blx	r3
   1b616:	0003      	movs	r3, r0
   1b618:	001a      	movs	r2, r3
   1b61a:	4b16      	ldr	r3, [pc, #88]	; (1b674 <xQueueGenericSend+0x454>)
   1b61c:	5c9b      	ldrb	r3, [r3, r2]
   1b61e:	3348      	adds	r3, #72	; 0x48
   1b620:	b2db      	uxtb	r3, r3
   1b622:	001d      	movs	r5, r3
   1b624:	e000      	b.n	1b628 <xQueueGenericSend+0x408>
   1b626:	254d      	movs	r5, #77	; 0x4d
   1b628:	6a3b      	ldr	r3, [r7, #32]
   1b62a:	0018      	movs	r0, r3
   1b62c:	4b10      	ldr	r3, [pc, #64]	; (1b670 <xQueueGenericSend+0x450>)
   1b62e:	4798      	blx	r3
   1b630:	0003      	movs	r3, r0
   1b632:	001a      	movs	r2, r3
   1b634:	4b0f      	ldr	r3, [pc, #60]	; (1b674 <xQueueGenericSend+0x454>)
   1b636:	5c9c      	ldrb	r4, [r3, r2]
   1b638:	6a3b      	ldr	r3, [r7, #32]
   1b63a:	0018      	movs	r0, r3
   1b63c:	4b0e      	ldr	r3, [pc, #56]	; (1b678 <xQueueGenericSend+0x458>)
   1b63e:	4798      	blx	r3
   1b640:	0003      	movs	r3, r0
   1b642:	b2db      	uxtb	r3, r3
   1b644:	001a      	movs	r2, r3
   1b646:	0021      	movs	r1, r4
   1b648:	0028      	movs	r0, r5
   1b64a:	4b0c      	ldr	r3, [pc, #48]	; (1b67c <xQueueGenericSend+0x45c>)
   1b64c:	4798      	blx	r3
			return errQUEUE_FULL;
   1b64e:	2300      	movs	r3, #0
		}
	}
}
   1b650:	0018      	movs	r0, r3
   1b652:	46bd      	mov	sp, r7
   1b654:	b00a      	add	sp, #40	; 0x28
   1b656:	bdb0      	pop	{r4, r5, r7, pc}
   1b658:	0001c589 	.word	0x0001c589
   1b65c:	0001cf5d 	.word	0x0001cf5d
   1b660:	00018f1d 	.word	0x00018f1d
   1b664:	00018c81 	.word	0x00018c81
   1b668:	20000104 	.word	0x20000104
   1b66c:	00018d41 	.word	0x00018d41
   1b670:	00018c41 	.word	0x00018c41
   1b674:	200000f8 	.word	0x200000f8
   1b678:	00018d21 	.word	0x00018d21
   1b67c:	00019679 	.word	0x00019679

0001b680 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1b680:	b5b0      	push	{r4, r5, r7, lr}
   1b682:	b088      	sub	sp, #32
   1b684:	af00      	add	r7, sp, #0
   1b686:	60f8      	str	r0, [r7, #12]
   1b688:	60b9      	str	r1, [r7, #8]
   1b68a:	607a      	str	r2, [r7, #4]
   1b68c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b68e:	68fb      	ldr	r3, [r7, #12]
   1b690:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1b692:	69bb      	ldr	r3, [r7, #24]
   1b694:	2b00      	cmp	r3, #0
   1b696:	d101      	bne.n	1b69c <xQueueGenericSendFromISR+0x1c>
   1b698:	b672      	cpsid	i
   1b69a:	e7fe      	b.n	1b69a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b69c:	68bb      	ldr	r3, [r7, #8]
   1b69e:	2b00      	cmp	r3, #0
   1b6a0:	d103      	bne.n	1b6aa <xQueueGenericSendFromISR+0x2a>
   1b6a2:	69bb      	ldr	r3, [r7, #24]
   1b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b6a6:	2b00      	cmp	r3, #0
   1b6a8:	d101      	bne.n	1b6ae <xQueueGenericSendFromISR+0x2e>
   1b6aa:	2301      	movs	r3, #1
   1b6ac:	e000      	b.n	1b6b0 <xQueueGenericSendFromISR+0x30>
   1b6ae:	2300      	movs	r3, #0
   1b6b0:	2b00      	cmp	r3, #0
   1b6b2:	d101      	bne.n	1b6b8 <xQueueGenericSendFromISR+0x38>
   1b6b4:	b672      	cpsid	i
   1b6b6:	e7fe      	b.n	1b6b6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b6b8:	683b      	ldr	r3, [r7, #0]
   1b6ba:	2b02      	cmp	r3, #2
   1b6bc:	d103      	bne.n	1b6c6 <xQueueGenericSendFromISR+0x46>
   1b6be:	69bb      	ldr	r3, [r7, #24]
   1b6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b6c2:	2b01      	cmp	r3, #1
   1b6c4:	d101      	bne.n	1b6ca <xQueueGenericSendFromISR+0x4a>
   1b6c6:	2301      	movs	r3, #1
   1b6c8:	e000      	b.n	1b6cc <xQueueGenericSendFromISR+0x4c>
   1b6ca:	2300      	movs	r3, #0
   1b6cc:	2b00      	cmp	r3, #0
   1b6ce:	d101      	bne.n	1b6d4 <xQueueGenericSendFromISR+0x54>
   1b6d0:	b672      	cpsid	i
   1b6d2:	e7fe      	b.n	1b6d2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b6d4:	4b68      	ldr	r3, [pc, #416]	; (1b878 <xQueueGenericSendFromISR+0x1f8>)
   1b6d6:	4798      	blx	r3
   1b6d8:	0003      	movs	r3, r0
   1b6da:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b6dc:	69bb      	ldr	r3, [r7, #24]
   1b6de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b6e0:	69bb      	ldr	r3, [r7, #24]
   1b6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b6e4:	429a      	cmp	r2, r3
   1b6e6:	d303      	bcc.n	1b6f0 <xQueueGenericSendFromISR+0x70>
   1b6e8:	683b      	ldr	r3, [r7, #0]
   1b6ea:	2b02      	cmp	r3, #2
   1b6ec:	d000      	beq.n	1b6f0 <xQueueGenericSendFromISR+0x70>
   1b6ee:	e088      	b.n	1b802 <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b6f0:	2313      	movs	r3, #19
   1b6f2:	18fb      	adds	r3, r7, r3
   1b6f4:	69ba      	ldr	r2, [r7, #24]
   1b6f6:	2145      	movs	r1, #69	; 0x45
   1b6f8:	5c52      	ldrb	r2, [r2, r1]
   1b6fa:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b6fc:	69bb      	ldr	r3, [r7, #24]
   1b6fe:	0018      	movs	r0, r3
   1b700:	4b5e      	ldr	r3, [pc, #376]	; (1b87c <xQueueGenericSendFromISR+0x1fc>)
   1b702:	4798      	blx	r3
   1b704:	0003      	movs	r3, r0
   1b706:	001a      	movs	r2, r3
   1b708:	4b5d      	ldr	r3, [pc, #372]	; (1b880 <xQueueGenericSendFromISR+0x200>)
   1b70a:	881b      	ldrh	r3, [r3, #0]
   1b70c:	4013      	ands	r3, r2
   1b70e:	b29b      	uxth	r3, r3
   1b710:	2b00      	cmp	r3, #0
   1b712:	d022      	beq.n	1b75a <xQueueGenericSendFromISR+0xda>
   1b714:	683b      	ldr	r3, [r7, #0]
   1b716:	2b00      	cmp	r3, #0
   1b718:	d10b      	bne.n	1b732 <xQueueGenericSendFromISR+0xb2>
   1b71a:	69bb      	ldr	r3, [r7, #24]
   1b71c:	0018      	movs	r0, r3
   1b71e:	4b59      	ldr	r3, [pc, #356]	; (1b884 <xQueueGenericSendFromISR+0x204>)
   1b720:	4798      	blx	r3
   1b722:	0003      	movs	r3, r0
   1b724:	001a      	movs	r2, r3
   1b726:	4b58      	ldr	r3, [pc, #352]	; (1b888 <xQueueGenericSendFromISR+0x208>)
   1b728:	5c9b      	ldrb	r3, [r3, r2]
   1b72a:	3330      	adds	r3, #48	; 0x30
   1b72c:	b2db      	uxtb	r3, r3
   1b72e:	001d      	movs	r5, r3
   1b730:	e000      	b.n	1b734 <xQueueGenericSendFromISR+0xb4>
   1b732:	2535      	movs	r5, #53	; 0x35
   1b734:	69bb      	ldr	r3, [r7, #24]
   1b736:	0018      	movs	r0, r3
   1b738:	4b52      	ldr	r3, [pc, #328]	; (1b884 <xQueueGenericSendFromISR+0x204>)
   1b73a:	4798      	blx	r3
   1b73c:	0003      	movs	r3, r0
   1b73e:	001a      	movs	r2, r3
   1b740:	4b51      	ldr	r3, [pc, #324]	; (1b888 <xQueueGenericSendFromISR+0x208>)
   1b742:	5c9c      	ldrb	r4, [r3, r2]
   1b744:	69bb      	ldr	r3, [r7, #24]
   1b746:	0018      	movs	r0, r3
   1b748:	4b50      	ldr	r3, [pc, #320]	; (1b88c <xQueueGenericSendFromISR+0x20c>)
   1b74a:	4798      	blx	r3
   1b74c:	0003      	movs	r3, r0
   1b74e:	b2db      	uxtb	r3, r3
   1b750:	001a      	movs	r2, r3
   1b752:	0021      	movs	r1, r4
   1b754:	0028      	movs	r0, r5
   1b756:	4b4e      	ldr	r3, [pc, #312]	; (1b890 <xQueueGenericSendFromISR+0x210>)
   1b758:	4798      	blx	r3
   1b75a:	69bb      	ldr	r3, [r7, #24]
   1b75c:	0018      	movs	r0, r3
   1b75e:	4b49      	ldr	r3, [pc, #292]	; (1b884 <xQueueGenericSendFromISR+0x204>)
   1b760:	4798      	blx	r3
   1b762:	0003      	movs	r3, r0
   1b764:	001a      	movs	r2, r3
   1b766:	4b48      	ldr	r3, [pc, #288]	; (1b888 <xQueueGenericSendFromISR+0x208>)
   1b768:	5c9c      	ldrb	r4, [r3, r2]
   1b76a:	69bb      	ldr	r3, [r7, #24]
   1b76c:	0018      	movs	r0, r3
   1b76e:	4b47      	ldr	r3, [pc, #284]	; (1b88c <xQueueGenericSendFromISR+0x20c>)
   1b770:	4798      	blx	r3
   1b772:	0003      	movs	r3, r0
   1b774:	b2d9      	uxtb	r1, r3
   1b776:	69bb      	ldr	r3, [r7, #24]
   1b778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b77a:	b2db      	uxtb	r3, r3
   1b77c:	3301      	adds	r3, #1
   1b77e:	b2db      	uxtb	r3, r3
   1b780:	001a      	movs	r2, r3
   1b782:	0020      	movs	r0, r4
   1b784:	4b43      	ldr	r3, [pc, #268]	; (1b894 <xQueueGenericSendFromISR+0x214>)
   1b786:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b788:	683a      	ldr	r2, [r7, #0]
   1b78a:	68b9      	ldr	r1, [r7, #8]
   1b78c:	69bb      	ldr	r3, [r7, #24]
   1b78e:	0018      	movs	r0, r3
   1b790:	4b41      	ldr	r3, [pc, #260]	; (1b898 <xQueueGenericSendFromISR+0x218>)
   1b792:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b794:	2313      	movs	r3, #19
   1b796:	18fb      	adds	r3, r7, r3
   1b798:	781b      	ldrb	r3, [r3, #0]
   1b79a:	b25b      	sxtb	r3, r3
   1b79c:	3301      	adds	r3, #1
   1b79e:	d124      	bne.n	1b7ea <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b7a0:	69bb      	ldr	r3, [r7, #24]
   1b7a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b7a4:	2b00      	cmp	r3, #0
   1b7a6:	d00e      	beq.n	1b7c6 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b7a8:	683a      	ldr	r2, [r7, #0]
   1b7aa:	69bb      	ldr	r3, [r7, #24]
   1b7ac:	0011      	movs	r1, r2
   1b7ae:	0018      	movs	r0, r3
   1b7b0:	4b3a      	ldr	r3, [pc, #232]	; (1b89c <xQueueGenericSendFromISR+0x21c>)
   1b7b2:	4798      	blx	r3
   1b7b4:	1e03      	subs	r3, r0, #0
   1b7b6:	d021      	beq.n	1b7fc <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b7b8:	687b      	ldr	r3, [r7, #4]
   1b7ba:	2b00      	cmp	r3, #0
   1b7bc:	d01e      	beq.n	1b7fc <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b7be:	687b      	ldr	r3, [r7, #4]
   1b7c0:	2201      	movs	r2, #1
   1b7c2:	601a      	str	r2, [r3, #0]
   1b7c4:	e01a      	b.n	1b7fc <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b7c6:	69bb      	ldr	r3, [r7, #24]
   1b7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b7ca:	2b00      	cmp	r3, #0
   1b7cc:	d016      	beq.n	1b7fc <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b7ce:	69bb      	ldr	r3, [r7, #24]
   1b7d0:	3324      	adds	r3, #36	; 0x24
   1b7d2:	0018      	movs	r0, r3
   1b7d4:	4b32      	ldr	r3, [pc, #200]	; (1b8a0 <xQueueGenericSendFromISR+0x220>)
   1b7d6:	4798      	blx	r3
   1b7d8:	1e03      	subs	r3, r0, #0
   1b7da:	d00f      	beq.n	1b7fc <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b7dc:	687b      	ldr	r3, [r7, #4]
   1b7de:	2b00      	cmp	r3, #0
   1b7e0:	d00c      	beq.n	1b7fc <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b7e2:	687b      	ldr	r3, [r7, #4]
   1b7e4:	2201      	movs	r2, #1
   1b7e6:	601a      	str	r2, [r3, #0]
   1b7e8:	e008      	b.n	1b7fc <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b7ea:	2313      	movs	r3, #19
   1b7ec:	18fb      	adds	r3, r7, r3
   1b7ee:	781b      	ldrb	r3, [r3, #0]
   1b7f0:	3301      	adds	r3, #1
   1b7f2:	b2db      	uxtb	r3, r3
   1b7f4:	b259      	sxtb	r1, r3
   1b7f6:	69bb      	ldr	r3, [r7, #24]
   1b7f8:	2245      	movs	r2, #69	; 0x45
   1b7fa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b7fc:	2301      	movs	r3, #1
   1b7fe:	61fb      	str	r3, [r7, #28]
		{
   1b800:	e030      	b.n	1b864 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b802:	69bb      	ldr	r3, [r7, #24]
   1b804:	0018      	movs	r0, r3
   1b806:	4b1d      	ldr	r3, [pc, #116]	; (1b87c <xQueueGenericSendFromISR+0x1fc>)
   1b808:	4798      	blx	r3
   1b80a:	0003      	movs	r3, r0
   1b80c:	001a      	movs	r2, r3
   1b80e:	4b1c      	ldr	r3, [pc, #112]	; (1b880 <xQueueGenericSendFromISR+0x200>)
   1b810:	881b      	ldrh	r3, [r3, #0]
   1b812:	4013      	ands	r3, r2
   1b814:	b29b      	uxth	r3, r3
   1b816:	2b00      	cmp	r3, #0
   1b818:	d022      	beq.n	1b860 <xQueueGenericSendFromISR+0x1e0>
   1b81a:	683b      	ldr	r3, [r7, #0]
   1b81c:	2b00      	cmp	r3, #0
   1b81e:	d10b      	bne.n	1b838 <xQueueGenericSendFromISR+0x1b8>
   1b820:	69bb      	ldr	r3, [r7, #24]
   1b822:	0018      	movs	r0, r3
   1b824:	4b17      	ldr	r3, [pc, #92]	; (1b884 <xQueueGenericSendFromISR+0x204>)
   1b826:	4798      	blx	r3
   1b828:	0003      	movs	r3, r0
   1b82a:	001a      	movs	r2, r3
   1b82c:	4b16      	ldr	r3, [pc, #88]	; (1b888 <xQueueGenericSendFromISR+0x208>)
   1b82e:	5c9b      	ldrb	r3, [r3, r2]
   1b830:	3358      	adds	r3, #88	; 0x58
   1b832:	b2db      	uxtb	r3, r3
   1b834:	001d      	movs	r5, r3
   1b836:	e000      	b.n	1b83a <xQueueGenericSendFromISR+0x1ba>
   1b838:	255d      	movs	r5, #93	; 0x5d
   1b83a:	69bb      	ldr	r3, [r7, #24]
   1b83c:	0018      	movs	r0, r3
   1b83e:	4b11      	ldr	r3, [pc, #68]	; (1b884 <xQueueGenericSendFromISR+0x204>)
   1b840:	4798      	blx	r3
   1b842:	0003      	movs	r3, r0
   1b844:	001a      	movs	r2, r3
   1b846:	4b10      	ldr	r3, [pc, #64]	; (1b888 <xQueueGenericSendFromISR+0x208>)
   1b848:	5c9c      	ldrb	r4, [r3, r2]
   1b84a:	69bb      	ldr	r3, [r7, #24]
   1b84c:	0018      	movs	r0, r3
   1b84e:	4b0f      	ldr	r3, [pc, #60]	; (1b88c <xQueueGenericSendFromISR+0x20c>)
   1b850:	4798      	blx	r3
   1b852:	0003      	movs	r3, r0
   1b854:	b2db      	uxtb	r3, r3
   1b856:	001a      	movs	r2, r3
   1b858:	0021      	movs	r1, r4
   1b85a:	0028      	movs	r0, r5
   1b85c:	4b0c      	ldr	r3, [pc, #48]	; (1b890 <xQueueGenericSendFromISR+0x210>)
   1b85e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b860:	2300      	movs	r3, #0
   1b862:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b864:	697b      	ldr	r3, [r7, #20]
   1b866:	0018      	movs	r0, r3
   1b868:	4b0e      	ldr	r3, [pc, #56]	; (1b8a4 <xQueueGenericSendFromISR+0x224>)
   1b86a:	4798      	blx	r3

	return xReturn;
   1b86c:	69fb      	ldr	r3, [r7, #28]
}
   1b86e:	0018      	movs	r0, r3
   1b870:	46bd      	mov	sp, r7
   1b872:	b008      	add	sp, #32
   1b874:	bdb0      	pop	{r4, r5, r7, pc}
   1b876:	46c0      	nop			; (mov r8, r8)
   1b878:	0001acdd 	.word	0x0001acdd
   1b87c:	00018d41 	.word	0x00018d41
   1b880:	20000104 	.word	0x20000104
   1b884:	00018c41 	.word	0x00018c41
   1b888:	200000f8 	.word	0x200000f8
   1b88c:	00018d21 	.word	0x00018d21
   1b890:	00019679 	.word	0x00019679
   1b894:	00019cd5 	.word	0x00019cd5
   1b898:	0001c459 	.word	0x0001c459
   1b89c:	0001c75d 	.word	0x0001c75d
   1b8a0:	0001d51d 	.word	0x0001d51d
   1b8a4:	0001ace9 	.word	0x0001ace9

0001b8a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1b8a8:	b580      	push	{r7, lr}
   1b8aa:	b082      	sub	sp, #8
   1b8ac:	af00      	add	r7, sp, #0
   1b8ae:	6078      	str	r0, [r7, #4]
   1b8b0:	6039      	str	r1, [r7, #0]
   1b8b2:	6839      	ldr	r1, [r7, #0]
   1b8b4:	687b      	ldr	r3, [r7, #4]
   1b8b6:	2200      	movs	r2, #0
   1b8b8:	0018      	movs	r0, r3
   1b8ba:	4b03      	ldr	r3, [pc, #12]	; (1b8c8 <xQueueGiveFromISR+0x20>)
   1b8bc:	4798      	blx	r3
   1b8be:	0003      	movs	r3, r0
   1b8c0:	0018      	movs	r0, r3
   1b8c2:	46bd      	mov	sp, r7
   1b8c4:	b002      	add	sp, #8
   1b8c6:	bd80      	pop	{r7, pc}
   1b8c8:	0001b8cd 	.word	0x0001b8cd

0001b8cc <MyWrapper>:
{
   1b8cc:	b5b0      	push	{r4, r5, r7, lr}
   1b8ce:	b08a      	sub	sp, #40	; 0x28
   1b8d0:	af00      	add	r7, sp, #0
   1b8d2:	60f8      	str	r0, [r7, #12]
   1b8d4:	60b9      	str	r1, [r7, #8]
   1b8d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b8d8:	68fb      	ldr	r3, [r7, #12]
   1b8da:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1b8dc:	6a3b      	ldr	r3, [r7, #32]
   1b8de:	2b00      	cmp	r3, #0
   1b8e0:	d101      	bne.n	1b8e6 <MyWrapper+0x1a>
   1b8e2:	b672      	cpsid	i
   1b8e4:	e7fe      	b.n	1b8e4 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b8e6:	6a3b      	ldr	r3, [r7, #32]
   1b8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b8ea:	2b00      	cmp	r3, #0
   1b8ec:	d001      	beq.n	1b8f2 <MyWrapper+0x26>
   1b8ee:	b672      	cpsid	i
   1b8f0:	e7fe      	b.n	1b8f0 <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1b8f2:	6a3b      	ldr	r3, [r7, #32]
   1b8f4:	681b      	ldr	r3, [r3, #0]
   1b8f6:	2b00      	cmp	r3, #0
   1b8f8:	d103      	bne.n	1b902 <MyWrapper+0x36>
   1b8fa:	6a3b      	ldr	r3, [r7, #32]
   1b8fc:	685b      	ldr	r3, [r3, #4]
   1b8fe:	2b00      	cmp	r3, #0
   1b900:	d101      	bne.n	1b906 <MyWrapper+0x3a>
   1b902:	2301      	movs	r3, #1
   1b904:	e000      	b.n	1b908 <MyWrapper+0x3c>
   1b906:	2300      	movs	r3, #0
   1b908:	2b00      	cmp	r3, #0
   1b90a:	d101      	bne.n	1b910 <MyWrapper+0x44>
   1b90c:	b672      	cpsid	i
   1b90e:	e7fe      	b.n	1b90e <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b910:	4b66      	ldr	r3, [pc, #408]	; (1baac <MyWrapper+0x1e0>)
   1b912:	4798      	blx	r3
   1b914:	0003      	movs	r3, r0
   1b916:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b918:	6a3b      	ldr	r3, [r7, #32]
   1b91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b91c:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1b91e:	6a3b      	ldr	r3, [r7, #32]
   1b920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1b922:	69bb      	ldr	r3, [r7, #24]
   1b924:	429a      	cmp	r2, r3
   1b926:	d800      	bhi.n	1b92a <MyWrapper+0x5e>
   1b928:	e085      	b.n	1ba36 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b92a:	2317      	movs	r3, #23
   1b92c:	18fb      	adds	r3, r7, r3
   1b92e:	6a3a      	ldr	r2, [r7, #32]
   1b930:	2145      	movs	r1, #69	; 0x45
   1b932:	5c52      	ldrb	r2, [r2, r1]
   1b934:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b936:	6a3b      	ldr	r3, [r7, #32]
   1b938:	0018      	movs	r0, r3
   1b93a:	4b5d      	ldr	r3, [pc, #372]	; (1bab0 <MyWrapper+0x1e4>)
   1b93c:	4798      	blx	r3
   1b93e:	0003      	movs	r3, r0
   1b940:	001a      	movs	r2, r3
   1b942:	4b5c      	ldr	r3, [pc, #368]	; (1bab4 <MyWrapper+0x1e8>)
   1b944:	881b      	ldrh	r3, [r3, #0]
   1b946:	4013      	ands	r3, r2
   1b948:	b29b      	uxth	r3, r3
   1b94a:	2b00      	cmp	r3, #0
   1b94c:	d022      	beq.n	1b994 <MyWrapper+0xc8>
   1b94e:	687b      	ldr	r3, [r7, #4]
   1b950:	2b00      	cmp	r3, #0
   1b952:	d10b      	bne.n	1b96c <MyWrapper+0xa0>
   1b954:	6a3b      	ldr	r3, [r7, #32]
   1b956:	0018      	movs	r0, r3
   1b958:	4b57      	ldr	r3, [pc, #348]	; (1bab8 <MyWrapper+0x1ec>)
   1b95a:	4798      	blx	r3
   1b95c:	0003      	movs	r3, r0
   1b95e:	001a      	movs	r2, r3
   1b960:	4b56      	ldr	r3, [pc, #344]	; (1babc <MyWrapper+0x1f0>)
   1b962:	5c9b      	ldrb	r3, [r3, r2]
   1b964:	3330      	adds	r3, #48	; 0x30
   1b966:	b2db      	uxtb	r3, r3
   1b968:	001d      	movs	r5, r3
   1b96a:	e000      	b.n	1b96e <MyWrapper+0xa2>
   1b96c:	2535      	movs	r5, #53	; 0x35
   1b96e:	6a3b      	ldr	r3, [r7, #32]
   1b970:	0018      	movs	r0, r3
   1b972:	4b51      	ldr	r3, [pc, #324]	; (1bab8 <MyWrapper+0x1ec>)
   1b974:	4798      	blx	r3
   1b976:	0003      	movs	r3, r0
   1b978:	001a      	movs	r2, r3
   1b97a:	4b50      	ldr	r3, [pc, #320]	; (1babc <MyWrapper+0x1f0>)
   1b97c:	5c9c      	ldrb	r4, [r3, r2]
   1b97e:	6a3b      	ldr	r3, [r7, #32]
   1b980:	0018      	movs	r0, r3
   1b982:	4b4f      	ldr	r3, [pc, #316]	; (1bac0 <MyWrapper+0x1f4>)
   1b984:	4798      	blx	r3
   1b986:	0003      	movs	r3, r0
   1b988:	b2db      	uxtb	r3, r3
   1b98a:	001a      	movs	r2, r3
   1b98c:	0021      	movs	r1, r4
   1b98e:	0028      	movs	r0, r5
   1b990:	4b4c      	ldr	r3, [pc, #304]	; (1bac4 <MyWrapper+0x1f8>)
   1b992:	4798      	blx	r3
   1b994:	6a3b      	ldr	r3, [r7, #32]
   1b996:	0018      	movs	r0, r3
   1b998:	4b47      	ldr	r3, [pc, #284]	; (1bab8 <MyWrapper+0x1ec>)
   1b99a:	4798      	blx	r3
   1b99c:	0003      	movs	r3, r0
   1b99e:	001a      	movs	r2, r3
   1b9a0:	4b46      	ldr	r3, [pc, #280]	; (1babc <MyWrapper+0x1f0>)
   1b9a2:	5c9c      	ldrb	r4, [r3, r2]
   1b9a4:	6a3b      	ldr	r3, [r7, #32]
   1b9a6:	0018      	movs	r0, r3
   1b9a8:	4b45      	ldr	r3, [pc, #276]	; (1bac0 <MyWrapper+0x1f4>)
   1b9aa:	4798      	blx	r3
   1b9ac:	0003      	movs	r3, r0
   1b9ae:	b2d9      	uxtb	r1, r3
   1b9b0:	6a3b      	ldr	r3, [r7, #32]
   1b9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b9b4:	b2db      	uxtb	r3, r3
   1b9b6:	3301      	adds	r3, #1
   1b9b8:	b2db      	uxtb	r3, r3
   1b9ba:	001a      	movs	r2, r3
   1b9bc:	0020      	movs	r0, r4
   1b9be:	4b42      	ldr	r3, [pc, #264]	; (1bac8 <MyWrapper+0x1fc>)
   1b9c0:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b9c2:	69bb      	ldr	r3, [r7, #24]
   1b9c4:	1c5a      	adds	r2, r3, #1
   1b9c6:	6a3b      	ldr	r3, [r7, #32]
   1b9c8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b9ca:	2317      	movs	r3, #23
   1b9cc:	18fb      	adds	r3, r7, r3
   1b9ce:	781b      	ldrb	r3, [r3, #0]
   1b9d0:	b25b      	sxtb	r3, r3
   1b9d2:	3301      	adds	r3, #1
   1b9d4:	d123      	bne.n	1ba1e <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b9d6:	6a3b      	ldr	r3, [r7, #32]
   1b9d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b9da:	2b00      	cmp	r3, #0
   1b9dc:	d00d      	beq.n	1b9fa <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b9de:	6a3b      	ldr	r3, [r7, #32]
   1b9e0:	2100      	movs	r1, #0
   1b9e2:	0018      	movs	r0, r3
   1b9e4:	4b39      	ldr	r3, [pc, #228]	; (1bacc <MyWrapper+0x200>)
   1b9e6:	4798      	blx	r3
   1b9e8:	1e03      	subs	r3, r0, #0
   1b9ea:	d021      	beq.n	1ba30 <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b9ec:	68bb      	ldr	r3, [r7, #8]
   1b9ee:	2b00      	cmp	r3, #0
   1b9f0:	d01e      	beq.n	1ba30 <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b9f2:	68bb      	ldr	r3, [r7, #8]
   1b9f4:	2201      	movs	r2, #1
   1b9f6:	601a      	str	r2, [r3, #0]
   1b9f8:	e01a      	b.n	1ba30 <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b9fa:	6a3b      	ldr	r3, [r7, #32]
   1b9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b9fe:	2b00      	cmp	r3, #0
   1ba00:	d016      	beq.n	1ba30 <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ba02:	6a3b      	ldr	r3, [r7, #32]
   1ba04:	3324      	adds	r3, #36	; 0x24
   1ba06:	0018      	movs	r0, r3
   1ba08:	4b31      	ldr	r3, [pc, #196]	; (1bad0 <MyWrapper+0x204>)
   1ba0a:	4798      	blx	r3
   1ba0c:	1e03      	subs	r3, r0, #0
   1ba0e:	d00f      	beq.n	1ba30 <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1ba10:	68bb      	ldr	r3, [r7, #8]
   1ba12:	2b00      	cmp	r3, #0
   1ba14:	d00c      	beq.n	1ba30 <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1ba16:	68bb      	ldr	r3, [r7, #8]
   1ba18:	2201      	movs	r2, #1
   1ba1a:	601a      	str	r2, [r3, #0]
   1ba1c:	e008      	b.n	1ba30 <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ba1e:	2317      	movs	r3, #23
   1ba20:	18fb      	adds	r3, r7, r3
   1ba22:	781b      	ldrb	r3, [r3, #0]
   1ba24:	3301      	adds	r3, #1
   1ba26:	b2db      	uxtb	r3, r3
   1ba28:	b259      	sxtb	r1, r3
   1ba2a:	6a3b      	ldr	r3, [r7, #32]
   1ba2c:	2245      	movs	r2, #69	; 0x45
   1ba2e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1ba30:	2301      	movs	r3, #1
   1ba32:	627b      	str	r3, [r7, #36]	; 0x24
   1ba34:	e030      	b.n	1ba98 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1ba36:	6a3b      	ldr	r3, [r7, #32]
   1ba38:	0018      	movs	r0, r3
   1ba3a:	4b1d      	ldr	r3, [pc, #116]	; (1bab0 <MyWrapper+0x1e4>)
   1ba3c:	4798      	blx	r3
   1ba3e:	0003      	movs	r3, r0
   1ba40:	001a      	movs	r2, r3
   1ba42:	4b1c      	ldr	r3, [pc, #112]	; (1bab4 <MyWrapper+0x1e8>)
   1ba44:	881b      	ldrh	r3, [r3, #0]
   1ba46:	4013      	ands	r3, r2
   1ba48:	b29b      	uxth	r3, r3
   1ba4a:	2b00      	cmp	r3, #0
   1ba4c:	d022      	beq.n	1ba94 <MyWrapper+0x1c8>
   1ba4e:	687b      	ldr	r3, [r7, #4]
   1ba50:	2b00      	cmp	r3, #0
   1ba52:	d10b      	bne.n	1ba6c <MyWrapper+0x1a0>
   1ba54:	6a3b      	ldr	r3, [r7, #32]
   1ba56:	0018      	movs	r0, r3
   1ba58:	4b17      	ldr	r3, [pc, #92]	; (1bab8 <MyWrapper+0x1ec>)
   1ba5a:	4798      	blx	r3
   1ba5c:	0003      	movs	r3, r0
   1ba5e:	001a      	movs	r2, r3
   1ba60:	4b16      	ldr	r3, [pc, #88]	; (1babc <MyWrapper+0x1f0>)
   1ba62:	5c9b      	ldrb	r3, [r3, r2]
   1ba64:	3358      	adds	r3, #88	; 0x58
   1ba66:	b2db      	uxtb	r3, r3
   1ba68:	001d      	movs	r5, r3
   1ba6a:	e000      	b.n	1ba6e <MyWrapper+0x1a2>
   1ba6c:	255d      	movs	r5, #93	; 0x5d
   1ba6e:	6a3b      	ldr	r3, [r7, #32]
   1ba70:	0018      	movs	r0, r3
   1ba72:	4b11      	ldr	r3, [pc, #68]	; (1bab8 <MyWrapper+0x1ec>)
   1ba74:	4798      	blx	r3
   1ba76:	0003      	movs	r3, r0
   1ba78:	001a      	movs	r2, r3
   1ba7a:	4b10      	ldr	r3, [pc, #64]	; (1babc <MyWrapper+0x1f0>)
   1ba7c:	5c9c      	ldrb	r4, [r3, r2]
   1ba7e:	6a3b      	ldr	r3, [r7, #32]
   1ba80:	0018      	movs	r0, r3
   1ba82:	4b0f      	ldr	r3, [pc, #60]	; (1bac0 <MyWrapper+0x1f4>)
   1ba84:	4798      	blx	r3
   1ba86:	0003      	movs	r3, r0
   1ba88:	b2db      	uxtb	r3, r3
   1ba8a:	001a      	movs	r2, r3
   1ba8c:	0021      	movs	r1, r4
   1ba8e:	0028      	movs	r0, r5
   1ba90:	4b0c      	ldr	r3, [pc, #48]	; (1bac4 <MyWrapper+0x1f8>)
   1ba92:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1ba94:	2300      	movs	r3, #0
   1ba96:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1ba98:	69fb      	ldr	r3, [r7, #28]
   1ba9a:	0018      	movs	r0, r3
   1ba9c:	4b0d      	ldr	r3, [pc, #52]	; (1bad4 <MyWrapper+0x208>)
   1ba9e:	4798      	blx	r3

	return xReturn;
   1baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1baa2:	0018      	movs	r0, r3
   1baa4:	46bd      	mov	sp, r7
   1baa6:	b00a      	add	sp, #40	; 0x28
   1baa8:	bdb0      	pop	{r4, r5, r7, pc}
   1baaa:	46c0      	nop			; (mov r8, r8)
   1baac:	0001acdd 	.word	0x0001acdd
   1bab0:	00018d41 	.word	0x00018d41
   1bab4:	20000104 	.word	0x20000104
   1bab8:	00018c41 	.word	0x00018c41
   1babc:	200000f8 	.word	0x200000f8
   1bac0:	00018d21 	.word	0x00018d21
   1bac4:	00019679 	.word	0x00019679
   1bac8:	00019cd5 	.word	0x00019cd5
   1bacc:	0001c75d 	.word	0x0001c75d
   1bad0:	0001d51d 	.word	0x0001d51d
   1bad4:	0001ace9 	.word	0x0001ace9

0001bad8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1bad8:	b5b0      	push	{r4, r5, r7, lr}
   1bada:	b08a      	sub	sp, #40	; 0x28
   1badc:	af00      	add	r7, sp, #0
   1bade:	60f8      	str	r0, [r7, #12]
   1bae0:	60b9      	str	r1, [r7, #8]
   1bae2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1bae4:	2300      	movs	r3, #0
   1bae6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bae8:	68fb      	ldr	r3, [r7, #12]
   1baea:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1baec:	6a3b      	ldr	r3, [r7, #32]
   1baee:	2b00      	cmp	r3, #0
   1baf0:	d101      	bne.n	1baf6 <xQueueReceive+0x1e>
   1baf2:	b672      	cpsid	i
   1baf4:	e7fe      	b.n	1baf4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1baf6:	68bb      	ldr	r3, [r7, #8]
   1baf8:	2b00      	cmp	r3, #0
   1bafa:	d103      	bne.n	1bb04 <xQueueReceive+0x2c>
   1bafc:	6a3b      	ldr	r3, [r7, #32]
   1bafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bb00:	2b00      	cmp	r3, #0
   1bb02:	d101      	bne.n	1bb08 <xQueueReceive+0x30>
   1bb04:	2301      	movs	r3, #1
   1bb06:	e000      	b.n	1bb0a <xQueueReceive+0x32>
   1bb08:	2300      	movs	r3, #0
   1bb0a:	2b00      	cmp	r3, #0
   1bb0c:	d101      	bne.n	1bb12 <xQueueReceive+0x3a>
   1bb0e:	b672      	cpsid	i
   1bb10:	e7fe      	b.n	1bb10 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1bb12:	4bbf      	ldr	r3, [pc, #764]	; (1be10 <xQueueReceive+0x338>)
   1bb14:	4798      	blx	r3
   1bb16:	1e03      	subs	r3, r0, #0
   1bb18:	d102      	bne.n	1bb20 <xQueueReceive+0x48>
   1bb1a:	687b      	ldr	r3, [r7, #4]
   1bb1c:	2b00      	cmp	r3, #0
   1bb1e:	d101      	bne.n	1bb24 <xQueueReceive+0x4c>
   1bb20:	2301      	movs	r3, #1
   1bb22:	e000      	b.n	1bb26 <xQueueReceive+0x4e>
   1bb24:	2300      	movs	r3, #0
   1bb26:	2b00      	cmp	r3, #0
   1bb28:	d101      	bne.n	1bb2e <xQueueReceive+0x56>
   1bb2a:	b672      	cpsid	i
   1bb2c:	e7fe      	b.n	1bb2c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1bb2e:	4bb9      	ldr	r3, [pc, #740]	; (1be14 <xQueueReceive+0x33c>)
   1bb30:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1bb32:	6a3b      	ldr	r3, [r7, #32]
   1bb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bb36:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1bb38:	69fb      	ldr	r3, [r7, #28]
   1bb3a:	2b00      	cmp	r3, #0
   1bb3c:	d100      	bne.n	1bb40 <xQueueReceive+0x68>
   1bb3e:	e07d      	b.n	1bc3c <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1bb40:	68ba      	ldr	r2, [r7, #8]
   1bb42:	6a3b      	ldr	r3, [r7, #32]
   1bb44:	0011      	movs	r1, r2
   1bb46:	0018      	movs	r0, r3
   1bb48:	4bb3      	ldr	r3, [pc, #716]	; (1be18 <xQueueReceive+0x340>)
   1bb4a:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1bb4c:	4bb3      	ldr	r3, [pc, #716]	; (1be1c <xQueueReceive+0x344>)
   1bb4e:	4798      	blx	r3
   1bb50:	0003      	movs	r3, r0
   1bb52:	0018      	movs	r0, r3
   1bb54:	4bb2      	ldr	r3, [pc, #712]	; (1be20 <xQueueReceive+0x348>)
   1bb56:	4798      	blx	r3
   1bb58:	0003      	movs	r3, r0
   1bb5a:	001a      	movs	r2, r3
   1bb5c:	4bb1      	ldr	r3, [pc, #708]	; (1be24 <xQueueReceive+0x34c>)
   1bb5e:	881b      	ldrh	r3, [r3, #0]
   1bb60:	4013      	ands	r3, r2
   1bb62:	b29b      	uxth	r3, r3
   1bb64:	2b00      	cmp	r3, #0
   1bb66:	d029      	beq.n	1bbbc <xQueueReceive+0xe4>
   1bb68:	6a3b      	ldr	r3, [r7, #32]
   1bb6a:	0018      	movs	r0, r3
   1bb6c:	4bae      	ldr	r3, [pc, #696]	; (1be28 <xQueueReceive+0x350>)
   1bb6e:	4798      	blx	r3
   1bb70:	0003      	movs	r3, r0
   1bb72:	001a      	movs	r2, r3
   1bb74:	4bab      	ldr	r3, [pc, #684]	; (1be24 <xQueueReceive+0x34c>)
   1bb76:	881b      	ldrh	r3, [r3, #0]
   1bb78:	4013      	ands	r3, r2
   1bb7a:	b29b      	uxth	r3, r3
   1bb7c:	2b00      	cmp	r3, #0
   1bb7e:	d01d      	beq.n	1bbbc <xQueueReceive+0xe4>
   1bb80:	6a3b      	ldr	r3, [r7, #32]
   1bb82:	0018      	movs	r0, r3
   1bb84:	4ba9      	ldr	r3, [pc, #676]	; (1be2c <xQueueReceive+0x354>)
   1bb86:	4798      	blx	r3
   1bb88:	0003      	movs	r3, r0
   1bb8a:	001a      	movs	r2, r3
   1bb8c:	4ba8      	ldr	r3, [pc, #672]	; (1be30 <xQueueReceive+0x358>)
   1bb8e:	5c9b      	ldrb	r3, [r3, r2]
   1bb90:	3328      	adds	r3, #40	; 0x28
   1bb92:	b2db      	uxtb	r3, r3
   1bb94:	001d      	movs	r5, r3
   1bb96:	6a3b      	ldr	r3, [r7, #32]
   1bb98:	0018      	movs	r0, r3
   1bb9a:	4ba4      	ldr	r3, [pc, #656]	; (1be2c <xQueueReceive+0x354>)
   1bb9c:	4798      	blx	r3
   1bb9e:	0003      	movs	r3, r0
   1bba0:	001a      	movs	r2, r3
   1bba2:	4ba3      	ldr	r3, [pc, #652]	; (1be30 <xQueueReceive+0x358>)
   1bba4:	5c9c      	ldrb	r4, [r3, r2]
   1bba6:	6a3b      	ldr	r3, [r7, #32]
   1bba8:	0018      	movs	r0, r3
   1bbaa:	4ba2      	ldr	r3, [pc, #648]	; (1be34 <xQueueReceive+0x35c>)
   1bbac:	4798      	blx	r3
   1bbae:	0003      	movs	r3, r0
   1bbb0:	b2db      	uxtb	r3, r3
   1bbb2:	001a      	movs	r2, r3
   1bbb4:	0021      	movs	r1, r4
   1bbb6:	0028      	movs	r0, r5
   1bbb8:	4b9f      	ldr	r3, [pc, #636]	; (1be38 <xQueueReceive+0x360>)
   1bbba:	4798      	blx	r3
   1bbbc:	6a3b      	ldr	r3, [r7, #32]
   1bbbe:	0018      	movs	r0, r3
   1bbc0:	4b9a      	ldr	r3, [pc, #616]	; (1be2c <xQueueReceive+0x354>)
   1bbc2:	4798      	blx	r3
   1bbc4:	0003      	movs	r3, r0
   1bbc6:	001a      	movs	r2, r3
   1bbc8:	4b99      	ldr	r3, [pc, #612]	; (1be30 <xQueueReceive+0x358>)
   1bbca:	5c9c      	ldrb	r4, [r3, r2]
   1bbcc:	6a3b      	ldr	r3, [r7, #32]
   1bbce:	0018      	movs	r0, r3
   1bbd0:	4b98      	ldr	r3, [pc, #608]	; (1be34 <xQueueReceive+0x35c>)
   1bbd2:	4798      	blx	r3
   1bbd4:	0003      	movs	r3, r0
   1bbd6:	b2dd      	uxtb	r5, r3
   1bbd8:	6a3b      	ldr	r3, [r7, #32]
   1bbda:	0018      	movs	r0, r3
   1bbdc:	4b93      	ldr	r3, [pc, #588]	; (1be2c <xQueueReceive+0x354>)
   1bbde:	4798      	blx	r3
   1bbe0:	0003      	movs	r3, r0
   1bbe2:	001a      	movs	r2, r3
   1bbe4:	4b92      	ldr	r3, [pc, #584]	; (1be30 <xQueueReceive+0x358>)
   1bbe6:	5c9b      	ldrb	r3, [r3, r2]
   1bbe8:	2b02      	cmp	r3, #2
   1bbea:	d108      	bne.n	1bbfe <xQueueReceive+0x126>
   1bbec:	4b8b      	ldr	r3, [pc, #556]	; (1be1c <xQueueReceive+0x344>)
   1bbee:	4798      	blx	r3
   1bbf0:	0003      	movs	r3, r0
   1bbf2:	0018      	movs	r0, r3
   1bbf4:	4b91      	ldr	r3, [pc, #580]	; (1be3c <xQueueReceive+0x364>)
   1bbf6:	4798      	blx	r3
   1bbf8:	0003      	movs	r3, r0
   1bbfa:	b2db      	uxtb	r3, r3
   1bbfc:	e004      	b.n	1bc08 <xQueueReceive+0x130>
   1bbfe:	6a3b      	ldr	r3, [r7, #32]
   1bc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bc02:	b2db      	uxtb	r3, r3
   1bc04:	3b01      	subs	r3, #1
   1bc06:	b2db      	uxtb	r3, r3
   1bc08:	001a      	movs	r2, r3
   1bc0a:	0029      	movs	r1, r5
   1bc0c:	0020      	movs	r0, r4
   1bc0e:	4b8c      	ldr	r3, [pc, #560]	; (1be40 <xQueueReceive+0x368>)
   1bc10:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1bc12:	69fb      	ldr	r3, [r7, #28]
   1bc14:	1e5a      	subs	r2, r3, #1
   1bc16:	6a3b      	ldr	r3, [r7, #32]
   1bc18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bc1a:	6a3b      	ldr	r3, [r7, #32]
   1bc1c:	691b      	ldr	r3, [r3, #16]
   1bc1e:	2b00      	cmp	r3, #0
   1bc20:	d008      	beq.n	1bc34 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bc22:	6a3b      	ldr	r3, [r7, #32]
   1bc24:	3310      	adds	r3, #16
   1bc26:	0018      	movs	r0, r3
   1bc28:	4b86      	ldr	r3, [pc, #536]	; (1be44 <xQueueReceive+0x36c>)
   1bc2a:	4798      	blx	r3
   1bc2c:	1e03      	subs	r3, r0, #0
   1bc2e:	d001      	beq.n	1bc34 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1bc30:	4b85      	ldr	r3, [pc, #532]	; (1be48 <xQueueReceive+0x370>)
   1bc32:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1bc34:	4b85      	ldr	r3, [pc, #532]	; (1be4c <xQueueReceive+0x374>)
   1bc36:	4798      	blx	r3
				return pdPASS;
   1bc38:	2301      	movs	r3, #1
   1bc3a:	e15f      	b.n	1befc <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1bc3c:	687b      	ldr	r3, [r7, #4]
   1bc3e:	2b00      	cmp	r3, #0
   1bc40:	d13b      	bne.n	1bcba <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1bc42:	4b82      	ldr	r3, [pc, #520]	; (1be4c <xQueueReceive+0x374>)
   1bc44:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bc46:	4b75      	ldr	r3, [pc, #468]	; (1be1c <xQueueReceive+0x344>)
   1bc48:	4798      	blx	r3
   1bc4a:	0003      	movs	r3, r0
   1bc4c:	0018      	movs	r0, r3
   1bc4e:	4b74      	ldr	r3, [pc, #464]	; (1be20 <xQueueReceive+0x348>)
   1bc50:	4798      	blx	r3
   1bc52:	0003      	movs	r3, r0
   1bc54:	001a      	movs	r2, r3
   1bc56:	4b73      	ldr	r3, [pc, #460]	; (1be24 <xQueueReceive+0x34c>)
   1bc58:	881b      	ldrh	r3, [r3, #0]
   1bc5a:	4013      	ands	r3, r2
   1bc5c:	b29b      	uxth	r3, r3
   1bc5e:	2b00      	cmp	r3, #0
   1bc60:	d029      	beq.n	1bcb6 <xQueueReceive+0x1de>
   1bc62:	6a3b      	ldr	r3, [r7, #32]
   1bc64:	0018      	movs	r0, r3
   1bc66:	4b70      	ldr	r3, [pc, #448]	; (1be28 <xQueueReceive+0x350>)
   1bc68:	4798      	blx	r3
   1bc6a:	0003      	movs	r3, r0
   1bc6c:	001a      	movs	r2, r3
   1bc6e:	4b6d      	ldr	r3, [pc, #436]	; (1be24 <xQueueReceive+0x34c>)
   1bc70:	881b      	ldrh	r3, [r3, #0]
   1bc72:	4013      	ands	r3, r2
   1bc74:	b29b      	uxth	r3, r3
   1bc76:	2b00      	cmp	r3, #0
   1bc78:	d01d      	beq.n	1bcb6 <xQueueReceive+0x1de>
   1bc7a:	6a3b      	ldr	r3, [r7, #32]
   1bc7c:	0018      	movs	r0, r3
   1bc7e:	4b6b      	ldr	r3, [pc, #428]	; (1be2c <xQueueReceive+0x354>)
   1bc80:	4798      	blx	r3
   1bc82:	0003      	movs	r3, r0
   1bc84:	001a      	movs	r2, r3
   1bc86:	4b6a      	ldr	r3, [pc, #424]	; (1be30 <xQueueReceive+0x358>)
   1bc88:	5c9b      	ldrb	r3, [r3, r2]
   1bc8a:	3350      	adds	r3, #80	; 0x50
   1bc8c:	b2db      	uxtb	r3, r3
   1bc8e:	001d      	movs	r5, r3
   1bc90:	6a3b      	ldr	r3, [r7, #32]
   1bc92:	0018      	movs	r0, r3
   1bc94:	4b65      	ldr	r3, [pc, #404]	; (1be2c <xQueueReceive+0x354>)
   1bc96:	4798      	blx	r3
   1bc98:	0003      	movs	r3, r0
   1bc9a:	001a      	movs	r2, r3
   1bc9c:	4b64      	ldr	r3, [pc, #400]	; (1be30 <xQueueReceive+0x358>)
   1bc9e:	5c9c      	ldrb	r4, [r3, r2]
   1bca0:	6a3b      	ldr	r3, [r7, #32]
   1bca2:	0018      	movs	r0, r3
   1bca4:	4b63      	ldr	r3, [pc, #396]	; (1be34 <xQueueReceive+0x35c>)
   1bca6:	4798      	blx	r3
   1bca8:	0003      	movs	r3, r0
   1bcaa:	b2db      	uxtb	r3, r3
   1bcac:	001a      	movs	r2, r3
   1bcae:	0021      	movs	r1, r4
   1bcb0:	0028      	movs	r0, r5
   1bcb2:	4b61      	ldr	r3, [pc, #388]	; (1be38 <xQueueReceive+0x360>)
   1bcb4:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1bcb6:	2300      	movs	r3, #0
   1bcb8:	e120      	b.n	1befc <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bcbc:	2b00      	cmp	r3, #0
   1bcbe:	d106      	bne.n	1bcce <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1bcc0:	2314      	movs	r3, #20
   1bcc2:	18fb      	adds	r3, r7, r3
   1bcc4:	0018      	movs	r0, r3
   1bcc6:	4b62      	ldr	r3, [pc, #392]	; (1be50 <xQueueReceive+0x378>)
   1bcc8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1bcca:	2301      	movs	r3, #1
   1bccc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1bcce:	4b5f      	ldr	r3, [pc, #380]	; (1be4c <xQueueReceive+0x374>)
   1bcd0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1bcd2:	4b60      	ldr	r3, [pc, #384]	; (1be54 <xQueueReceive+0x37c>)
   1bcd4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1bcd6:	4b4f      	ldr	r3, [pc, #316]	; (1be14 <xQueueReceive+0x33c>)
   1bcd8:	4798      	blx	r3
   1bcda:	6a3b      	ldr	r3, [r7, #32]
   1bcdc:	2244      	movs	r2, #68	; 0x44
   1bcde:	5c9b      	ldrb	r3, [r3, r2]
   1bce0:	b25b      	sxtb	r3, r3
   1bce2:	3301      	adds	r3, #1
   1bce4:	d103      	bne.n	1bcee <xQueueReceive+0x216>
   1bce6:	6a3b      	ldr	r3, [r7, #32]
   1bce8:	2244      	movs	r2, #68	; 0x44
   1bcea:	2100      	movs	r1, #0
   1bcec:	5499      	strb	r1, [r3, r2]
   1bcee:	6a3b      	ldr	r3, [r7, #32]
   1bcf0:	2245      	movs	r2, #69	; 0x45
   1bcf2:	5c9b      	ldrb	r3, [r3, r2]
   1bcf4:	b25b      	sxtb	r3, r3
   1bcf6:	3301      	adds	r3, #1
   1bcf8:	d103      	bne.n	1bd02 <xQueueReceive+0x22a>
   1bcfa:	6a3b      	ldr	r3, [r7, #32]
   1bcfc:	2245      	movs	r2, #69	; 0x45
   1bcfe:	2100      	movs	r1, #0
   1bd00:	5499      	strb	r1, [r3, r2]
   1bd02:	4b52      	ldr	r3, [pc, #328]	; (1be4c <xQueueReceive+0x374>)
   1bd04:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1bd06:	1d3a      	adds	r2, r7, #4
   1bd08:	2314      	movs	r3, #20
   1bd0a:	18fb      	adds	r3, r7, r3
   1bd0c:	0011      	movs	r1, r2
   1bd0e:	0018      	movs	r0, r3
   1bd10:	4b51      	ldr	r3, [pc, #324]	; (1be58 <xQueueReceive+0x380>)
   1bd12:	4798      	blx	r3
   1bd14:	1e03      	subs	r3, r0, #0
   1bd16:	d000      	beq.n	1bd1a <xQueueReceive+0x242>
   1bd18:	e0aa      	b.n	1be70 <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1bd1a:	6a3b      	ldr	r3, [r7, #32]
   1bd1c:	0018      	movs	r0, r3
   1bd1e:	4b4f      	ldr	r3, [pc, #316]	; (1be5c <xQueueReceive+0x384>)
   1bd20:	4798      	blx	r3
   1bd22:	1e03      	subs	r3, r0, #0
   1bd24:	d06d      	beq.n	1be02 <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1bd26:	4b3d      	ldr	r3, [pc, #244]	; (1be1c <xQueueReceive+0x344>)
   1bd28:	4798      	blx	r3
   1bd2a:	0003      	movs	r3, r0
   1bd2c:	0018      	movs	r0, r3
   1bd2e:	4b3c      	ldr	r3, [pc, #240]	; (1be20 <xQueueReceive+0x348>)
   1bd30:	4798      	blx	r3
   1bd32:	0003      	movs	r3, r0
   1bd34:	001a      	movs	r2, r3
   1bd36:	4b3b      	ldr	r3, [pc, #236]	; (1be24 <xQueueReceive+0x34c>)
   1bd38:	881b      	ldrh	r3, [r3, #0]
   1bd3a:	4013      	ands	r3, r2
   1bd3c:	b29b      	uxth	r3, r3
   1bd3e:	2b00      	cmp	r3, #0
   1bd40:	d029      	beq.n	1bd96 <xQueueReceive+0x2be>
   1bd42:	6a3b      	ldr	r3, [r7, #32]
   1bd44:	0018      	movs	r0, r3
   1bd46:	4b38      	ldr	r3, [pc, #224]	; (1be28 <xQueueReceive+0x350>)
   1bd48:	4798      	blx	r3
   1bd4a:	0003      	movs	r3, r0
   1bd4c:	001a      	movs	r2, r3
   1bd4e:	4b35      	ldr	r3, [pc, #212]	; (1be24 <xQueueReceive+0x34c>)
   1bd50:	881b      	ldrh	r3, [r3, #0]
   1bd52:	4013      	ands	r3, r2
   1bd54:	b29b      	uxth	r3, r3
   1bd56:	2b00      	cmp	r3, #0
   1bd58:	d01d      	beq.n	1bd96 <xQueueReceive+0x2be>
   1bd5a:	6a3b      	ldr	r3, [r7, #32]
   1bd5c:	0018      	movs	r0, r3
   1bd5e:	4b33      	ldr	r3, [pc, #204]	; (1be2c <xQueueReceive+0x354>)
   1bd60:	4798      	blx	r3
   1bd62:	0003      	movs	r3, r0
   1bd64:	001a      	movs	r2, r3
   1bd66:	4b32      	ldr	r3, [pc, #200]	; (1be30 <xQueueReceive+0x358>)
   1bd68:	5c9b      	ldrb	r3, [r3, r2]
   1bd6a:	3368      	adds	r3, #104	; 0x68
   1bd6c:	b2db      	uxtb	r3, r3
   1bd6e:	001d      	movs	r5, r3
   1bd70:	6a3b      	ldr	r3, [r7, #32]
   1bd72:	0018      	movs	r0, r3
   1bd74:	4b2d      	ldr	r3, [pc, #180]	; (1be2c <xQueueReceive+0x354>)
   1bd76:	4798      	blx	r3
   1bd78:	0003      	movs	r3, r0
   1bd7a:	001a      	movs	r2, r3
   1bd7c:	4b2c      	ldr	r3, [pc, #176]	; (1be30 <xQueueReceive+0x358>)
   1bd7e:	5c9c      	ldrb	r4, [r3, r2]
   1bd80:	6a3b      	ldr	r3, [r7, #32]
   1bd82:	0018      	movs	r0, r3
   1bd84:	4b2b      	ldr	r3, [pc, #172]	; (1be34 <xQueueReceive+0x35c>)
   1bd86:	4798      	blx	r3
   1bd88:	0003      	movs	r3, r0
   1bd8a:	b2db      	uxtb	r3, r3
   1bd8c:	001a      	movs	r2, r3
   1bd8e:	0021      	movs	r1, r4
   1bd90:	0028      	movs	r0, r5
   1bd92:	4b29      	ldr	r3, [pc, #164]	; (1be38 <xQueueReceive+0x360>)
   1bd94:	4798      	blx	r3
   1bd96:	6a3b      	ldr	r3, [r7, #32]
   1bd98:	0018      	movs	r0, r3
   1bd9a:	4b24      	ldr	r3, [pc, #144]	; (1be2c <xQueueReceive+0x354>)
   1bd9c:	4798      	blx	r3
   1bd9e:	0003      	movs	r3, r0
   1bda0:	001a      	movs	r2, r3
   1bda2:	4b23      	ldr	r3, [pc, #140]	; (1be30 <xQueueReceive+0x358>)
   1bda4:	5c9b      	ldrb	r3, [r3, r2]
   1bda6:	2b02      	cmp	r3, #2
   1bda8:	d018      	beq.n	1bddc <xQueueReceive+0x304>
   1bdaa:	4b1c      	ldr	r3, [pc, #112]	; (1be1c <xQueueReceive+0x344>)
   1bdac:	4798      	blx	r3
   1bdae:	0003      	movs	r3, r0
   1bdb0:	0018      	movs	r0, r3
   1bdb2:	4b1b      	ldr	r3, [pc, #108]	; (1be20 <xQueueReceive+0x348>)
   1bdb4:	4798      	blx	r3
   1bdb6:	0003      	movs	r3, r0
   1bdb8:	001a      	movs	r2, r3
   1bdba:	4b1a      	ldr	r3, [pc, #104]	; (1be24 <xQueueReceive+0x34c>)
   1bdbc:	881b      	ldrh	r3, [r3, #0]
   1bdbe:	4013      	ands	r3, r2
   1bdc0:	b29b      	uxth	r3, r3
   1bdc2:	2b00      	cmp	r3, #0
   1bdc4:	d00a      	beq.n	1bddc <xQueueReceive+0x304>
   1bdc6:	4b15      	ldr	r3, [pc, #84]	; (1be1c <xQueueReceive+0x344>)
   1bdc8:	4798      	blx	r3
   1bdca:	0003      	movs	r3, r0
   1bdcc:	0018      	movs	r0, r3
   1bdce:	4b1b      	ldr	r3, [pc, #108]	; (1be3c <xQueueReceive+0x364>)
   1bdd0:	4798      	blx	r3
   1bdd2:	0003      	movs	r3, r0
   1bdd4:	b2db      	uxtb	r3, r3
   1bdd6:	0018      	movs	r0, r3
   1bdd8:	4b21      	ldr	r3, [pc, #132]	; (1be60 <xQueueReceive+0x388>)
   1bdda:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1bddc:	6a3b      	ldr	r3, [r7, #32]
   1bdde:	3324      	adds	r3, #36	; 0x24
   1bde0:	687a      	ldr	r2, [r7, #4]
   1bde2:	0011      	movs	r1, r2
   1bde4:	0018      	movs	r0, r3
   1bde6:	4b1f      	ldr	r3, [pc, #124]	; (1be64 <xQueueReceive+0x38c>)
   1bde8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1bdea:	6a3b      	ldr	r3, [r7, #32]
   1bdec:	0018      	movs	r0, r3
   1bdee:	4b1e      	ldr	r3, [pc, #120]	; (1be68 <xQueueReceive+0x390>)
   1bdf0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1bdf2:	4b1e      	ldr	r3, [pc, #120]	; (1be6c <xQueueReceive+0x394>)
   1bdf4:	4798      	blx	r3
   1bdf6:	1e03      	subs	r3, r0, #0
   1bdf8:	d000      	beq.n	1bdfc <xQueueReceive+0x324>
   1bdfa:	e698      	b.n	1bb2e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1bdfc:	4b12      	ldr	r3, [pc, #72]	; (1be48 <xQueueReceive+0x370>)
   1bdfe:	4798      	blx	r3
   1be00:	e695      	b.n	1bb2e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1be02:	6a3b      	ldr	r3, [r7, #32]
   1be04:	0018      	movs	r0, r3
   1be06:	4b18      	ldr	r3, [pc, #96]	; (1be68 <xQueueReceive+0x390>)
   1be08:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1be0a:	4b18      	ldr	r3, [pc, #96]	; (1be6c <xQueueReceive+0x394>)
   1be0c:	4798      	blx	r3
   1be0e:	e68e      	b.n	1bb2e <xQueueReceive+0x56>
   1be10:	0001d9ad 	.word	0x0001d9ad
   1be14:	0001ac89 	.word	0x0001ac89
   1be18:	0001c539 	.word	0x0001c539
   1be1c:	00018f1d 	.word	0x00018f1d
   1be20:	00018c81 	.word	0x00018c81
   1be24:	20000104 	.word	0x20000104
   1be28:	00018d41 	.word	0x00018d41
   1be2c:	00018c41 	.word	0x00018c41
   1be30:	200000f8 	.word	0x200000f8
   1be34:	00018d21 	.word	0x00018d21
   1be38:	00019679 	.word	0x00019679
   1be3c:	00018c61 	.word	0x00018c61
   1be40:	00019cd5 	.word	0x00019cd5
   1be44:	0001d51d 	.word	0x0001d51d
   1be48:	0001ac71 	.word	0x0001ac71
   1be4c:	0001acad 	.word	0x0001acad
   1be50:	0001d65d 	.word	0x0001d65d
   1be54:	0001cf45 	.word	0x0001cf45
   1be58:	0001d685 	.word	0x0001d685
   1be5c:	0001c679 	.word	0x0001c679
   1be60:	00019e11 	.word	0x00019e11
   1be64:	0001d3f9 	.word	0x0001d3f9
   1be68:	0001c589 	.word	0x0001c589
   1be6c:	0001cf5d 	.word	0x0001cf5d
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1be70:	6a3b      	ldr	r3, [r7, #32]
   1be72:	0018      	movs	r0, r3
   1be74:	4b23      	ldr	r3, [pc, #140]	; (1bf04 <xQueueReceive+0x42c>)
   1be76:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1be78:	4b23      	ldr	r3, [pc, #140]	; (1bf08 <xQueueReceive+0x430>)
   1be7a:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1be7c:	6a3b      	ldr	r3, [r7, #32]
   1be7e:	0018      	movs	r0, r3
   1be80:	4b22      	ldr	r3, [pc, #136]	; (1bf0c <xQueueReceive+0x434>)
   1be82:	4798      	blx	r3
   1be84:	1e03      	subs	r3, r0, #0
   1be86:	d100      	bne.n	1be8a <xQueueReceive+0x3b2>
   1be88:	e651      	b.n	1bb2e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1be8a:	4b21      	ldr	r3, [pc, #132]	; (1bf10 <xQueueReceive+0x438>)
   1be8c:	4798      	blx	r3
   1be8e:	0003      	movs	r3, r0
   1be90:	0018      	movs	r0, r3
   1be92:	4b20      	ldr	r3, [pc, #128]	; (1bf14 <xQueueReceive+0x43c>)
   1be94:	4798      	blx	r3
   1be96:	0003      	movs	r3, r0
   1be98:	001a      	movs	r2, r3
   1be9a:	4b1f      	ldr	r3, [pc, #124]	; (1bf18 <xQueueReceive+0x440>)
   1be9c:	881b      	ldrh	r3, [r3, #0]
   1be9e:	4013      	ands	r3, r2
   1bea0:	b29b      	uxth	r3, r3
   1bea2:	2b00      	cmp	r3, #0
   1bea4:	d029      	beq.n	1befa <xQueueReceive+0x422>
   1bea6:	6a3b      	ldr	r3, [r7, #32]
   1bea8:	0018      	movs	r0, r3
   1beaa:	4b1c      	ldr	r3, [pc, #112]	; (1bf1c <xQueueReceive+0x444>)
   1beac:	4798      	blx	r3
   1beae:	0003      	movs	r3, r0
   1beb0:	001a      	movs	r2, r3
   1beb2:	4b19      	ldr	r3, [pc, #100]	; (1bf18 <xQueueReceive+0x440>)
   1beb4:	881b      	ldrh	r3, [r3, #0]
   1beb6:	4013      	ands	r3, r2
   1beb8:	b29b      	uxth	r3, r3
   1beba:	2b00      	cmp	r3, #0
   1bebc:	d01d      	beq.n	1befa <xQueueReceive+0x422>
   1bebe:	6a3b      	ldr	r3, [r7, #32]
   1bec0:	0018      	movs	r0, r3
   1bec2:	4b17      	ldr	r3, [pc, #92]	; (1bf20 <xQueueReceive+0x448>)
   1bec4:	4798      	blx	r3
   1bec6:	0003      	movs	r3, r0
   1bec8:	001a      	movs	r2, r3
   1beca:	4b16      	ldr	r3, [pc, #88]	; (1bf24 <xQueueReceive+0x44c>)
   1becc:	5c9b      	ldrb	r3, [r3, r2]
   1bece:	3350      	adds	r3, #80	; 0x50
   1bed0:	b2db      	uxtb	r3, r3
   1bed2:	001d      	movs	r5, r3
   1bed4:	6a3b      	ldr	r3, [r7, #32]
   1bed6:	0018      	movs	r0, r3
   1bed8:	4b11      	ldr	r3, [pc, #68]	; (1bf20 <xQueueReceive+0x448>)
   1beda:	4798      	blx	r3
   1bedc:	0003      	movs	r3, r0
   1bede:	001a      	movs	r2, r3
   1bee0:	4b10      	ldr	r3, [pc, #64]	; (1bf24 <xQueueReceive+0x44c>)
   1bee2:	5c9c      	ldrb	r4, [r3, r2]
   1bee4:	6a3b      	ldr	r3, [r7, #32]
   1bee6:	0018      	movs	r0, r3
   1bee8:	4b0f      	ldr	r3, [pc, #60]	; (1bf28 <xQueueReceive+0x450>)
   1beea:	4798      	blx	r3
   1beec:	0003      	movs	r3, r0
   1beee:	b2db      	uxtb	r3, r3
   1bef0:	001a      	movs	r2, r3
   1bef2:	0021      	movs	r1, r4
   1bef4:	0028      	movs	r0, r5
   1bef6:	4b0d      	ldr	r3, [pc, #52]	; (1bf2c <xQueueReceive+0x454>)
   1bef8:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1befa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1befc:	0018      	movs	r0, r3
   1befe:	46bd      	mov	sp, r7
   1bf00:	b00a      	add	sp, #40	; 0x28
   1bf02:	bdb0      	pop	{r4, r5, r7, pc}
   1bf04:	0001c589 	.word	0x0001c589
   1bf08:	0001cf5d 	.word	0x0001cf5d
   1bf0c:	0001c679 	.word	0x0001c679
   1bf10:	00018f1d 	.word	0x00018f1d
   1bf14:	00018c81 	.word	0x00018c81
   1bf18:	20000104 	.word	0x20000104
   1bf1c:	00018d41 	.word	0x00018d41
   1bf20:	00018c41 	.word	0x00018c41
   1bf24:	200000f8 	.word	0x200000f8
   1bf28:	00018d21 	.word	0x00018d21
   1bf2c:	00019679 	.word	0x00019679

0001bf30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1bf30:	b5b0      	push	{r4, r5, r7, lr}
   1bf32:	b08a      	sub	sp, #40	; 0x28
   1bf34:	af00      	add	r7, sp, #0
   1bf36:	6078      	str	r0, [r7, #4]
   1bf38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1bf3a:	2300      	movs	r3, #0
   1bf3c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bf3e:	687b      	ldr	r3, [r7, #4]
   1bf40:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1bf42:	2300      	movs	r3, #0
   1bf44:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1bf46:	69fb      	ldr	r3, [r7, #28]
   1bf48:	2b00      	cmp	r3, #0
   1bf4a:	d101      	bne.n	1bf50 <xQueueSemaphoreTake+0x20>
   1bf4c:	b672      	cpsid	i
   1bf4e:	e7fe      	b.n	1bf4e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1bf50:	69fb      	ldr	r3, [r7, #28]
   1bf52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bf54:	2b00      	cmp	r3, #0
   1bf56:	d001      	beq.n	1bf5c <xQueueSemaphoreTake+0x2c>
   1bf58:	b672      	cpsid	i
   1bf5a:	e7fe      	b.n	1bf5a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1bf5c:	4bcb      	ldr	r3, [pc, #812]	; (1c28c <xQueueSemaphoreTake+0x35c>)
   1bf5e:	4798      	blx	r3
   1bf60:	1e03      	subs	r3, r0, #0
   1bf62:	d102      	bne.n	1bf6a <xQueueSemaphoreTake+0x3a>
   1bf64:	683b      	ldr	r3, [r7, #0]
   1bf66:	2b00      	cmp	r3, #0
   1bf68:	d101      	bne.n	1bf6e <xQueueSemaphoreTake+0x3e>
   1bf6a:	2301      	movs	r3, #1
   1bf6c:	e000      	b.n	1bf70 <xQueueSemaphoreTake+0x40>
   1bf6e:	2300      	movs	r3, #0
   1bf70:	2b00      	cmp	r3, #0
   1bf72:	d101      	bne.n	1bf78 <xQueueSemaphoreTake+0x48>
   1bf74:	b672      	cpsid	i
   1bf76:	e7fe      	b.n	1bf76 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1bf78:	4bc5      	ldr	r3, [pc, #788]	; (1c290 <xQueueSemaphoreTake+0x360>)
   1bf7a:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1bf7c:	69fb      	ldr	r3, [r7, #28]
   1bf7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bf80:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1bf82:	69bb      	ldr	r3, [r7, #24]
   1bf84:	2b00      	cmp	r3, #0
   1bf86:	d100      	bne.n	1bf8a <xQueueSemaphoreTake+0x5a>
   1bf88:	e080      	b.n	1c08c <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1bf8a:	4bc2      	ldr	r3, [pc, #776]	; (1c294 <xQueueSemaphoreTake+0x364>)
   1bf8c:	4798      	blx	r3
   1bf8e:	0003      	movs	r3, r0
   1bf90:	0018      	movs	r0, r3
   1bf92:	4bc1      	ldr	r3, [pc, #772]	; (1c298 <xQueueSemaphoreTake+0x368>)
   1bf94:	4798      	blx	r3
   1bf96:	0003      	movs	r3, r0
   1bf98:	001a      	movs	r2, r3
   1bf9a:	4bc0      	ldr	r3, [pc, #768]	; (1c29c <xQueueSemaphoreTake+0x36c>)
   1bf9c:	881b      	ldrh	r3, [r3, #0]
   1bf9e:	4013      	ands	r3, r2
   1bfa0:	b29b      	uxth	r3, r3
   1bfa2:	2b00      	cmp	r3, #0
   1bfa4:	d029      	beq.n	1bffa <xQueueSemaphoreTake+0xca>
   1bfa6:	69fb      	ldr	r3, [r7, #28]
   1bfa8:	0018      	movs	r0, r3
   1bfaa:	4bbd      	ldr	r3, [pc, #756]	; (1c2a0 <xQueueSemaphoreTake+0x370>)
   1bfac:	4798      	blx	r3
   1bfae:	0003      	movs	r3, r0
   1bfb0:	001a      	movs	r2, r3
   1bfb2:	4bba      	ldr	r3, [pc, #744]	; (1c29c <xQueueSemaphoreTake+0x36c>)
   1bfb4:	881b      	ldrh	r3, [r3, #0]
   1bfb6:	4013      	ands	r3, r2
   1bfb8:	b29b      	uxth	r3, r3
   1bfba:	2b00      	cmp	r3, #0
   1bfbc:	d01d      	beq.n	1bffa <xQueueSemaphoreTake+0xca>
   1bfbe:	69fb      	ldr	r3, [r7, #28]
   1bfc0:	0018      	movs	r0, r3
   1bfc2:	4bb8      	ldr	r3, [pc, #736]	; (1c2a4 <xQueueSemaphoreTake+0x374>)
   1bfc4:	4798      	blx	r3
   1bfc6:	0003      	movs	r3, r0
   1bfc8:	001a      	movs	r2, r3
   1bfca:	4bb7      	ldr	r3, [pc, #732]	; (1c2a8 <xQueueSemaphoreTake+0x378>)
   1bfcc:	5c9b      	ldrb	r3, [r3, r2]
   1bfce:	3328      	adds	r3, #40	; 0x28
   1bfd0:	b2db      	uxtb	r3, r3
   1bfd2:	001d      	movs	r5, r3
   1bfd4:	69fb      	ldr	r3, [r7, #28]
   1bfd6:	0018      	movs	r0, r3
   1bfd8:	4bb2      	ldr	r3, [pc, #712]	; (1c2a4 <xQueueSemaphoreTake+0x374>)
   1bfda:	4798      	blx	r3
   1bfdc:	0003      	movs	r3, r0
   1bfde:	001a      	movs	r2, r3
   1bfe0:	4bb1      	ldr	r3, [pc, #708]	; (1c2a8 <xQueueSemaphoreTake+0x378>)
   1bfe2:	5c9c      	ldrb	r4, [r3, r2]
   1bfe4:	69fb      	ldr	r3, [r7, #28]
   1bfe6:	0018      	movs	r0, r3
   1bfe8:	4bb0      	ldr	r3, [pc, #704]	; (1c2ac <xQueueSemaphoreTake+0x37c>)
   1bfea:	4798      	blx	r3
   1bfec:	0003      	movs	r3, r0
   1bfee:	b2db      	uxtb	r3, r3
   1bff0:	001a      	movs	r2, r3
   1bff2:	0021      	movs	r1, r4
   1bff4:	0028      	movs	r0, r5
   1bff6:	4bae      	ldr	r3, [pc, #696]	; (1c2b0 <xQueueSemaphoreTake+0x380>)
   1bff8:	4798      	blx	r3
   1bffa:	69fb      	ldr	r3, [r7, #28]
   1bffc:	0018      	movs	r0, r3
   1bffe:	4ba9      	ldr	r3, [pc, #676]	; (1c2a4 <xQueueSemaphoreTake+0x374>)
   1c000:	4798      	blx	r3
   1c002:	0003      	movs	r3, r0
   1c004:	001a      	movs	r2, r3
   1c006:	4ba8      	ldr	r3, [pc, #672]	; (1c2a8 <xQueueSemaphoreTake+0x378>)
   1c008:	5c9c      	ldrb	r4, [r3, r2]
   1c00a:	69fb      	ldr	r3, [r7, #28]
   1c00c:	0018      	movs	r0, r3
   1c00e:	4ba7      	ldr	r3, [pc, #668]	; (1c2ac <xQueueSemaphoreTake+0x37c>)
   1c010:	4798      	blx	r3
   1c012:	0003      	movs	r3, r0
   1c014:	b2dd      	uxtb	r5, r3
   1c016:	69fb      	ldr	r3, [r7, #28]
   1c018:	0018      	movs	r0, r3
   1c01a:	4ba2      	ldr	r3, [pc, #648]	; (1c2a4 <xQueueSemaphoreTake+0x374>)
   1c01c:	4798      	blx	r3
   1c01e:	0003      	movs	r3, r0
   1c020:	001a      	movs	r2, r3
   1c022:	4ba1      	ldr	r3, [pc, #644]	; (1c2a8 <xQueueSemaphoreTake+0x378>)
   1c024:	5c9b      	ldrb	r3, [r3, r2]
   1c026:	2b02      	cmp	r3, #2
   1c028:	d108      	bne.n	1c03c <xQueueSemaphoreTake+0x10c>
   1c02a:	4b9a      	ldr	r3, [pc, #616]	; (1c294 <xQueueSemaphoreTake+0x364>)
   1c02c:	4798      	blx	r3
   1c02e:	0003      	movs	r3, r0
   1c030:	0018      	movs	r0, r3
   1c032:	4ba0      	ldr	r3, [pc, #640]	; (1c2b4 <xQueueSemaphoreTake+0x384>)
   1c034:	4798      	blx	r3
   1c036:	0003      	movs	r3, r0
   1c038:	b2db      	uxtb	r3, r3
   1c03a:	e004      	b.n	1c046 <xQueueSemaphoreTake+0x116>
   1c03c:	69fb      	ldr	r3, [r7, #28]
   1c03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c040:	b2db      	uxtb	r3, r3
   1c042:	3b01      	subs	r3, #1
   1c044:	b2db      	uxtb	r3, r3
   1c046:	001a      	movs	r2, r3
   1c048:	0029      	movs	r1, r5
   1c04a:	0020      	movs	r0, r4
   1c04c:	4b9a      	ldr	r3, [pc, #616]	; (1c2b8 <xQueueSemaphoreTake+0x388>)
   1c04e:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1c050:	69bb      	ldr	r3, [r7, #24]
   1c052:	1e5a      	subs	r2, r3, #1
   1c054:	69fb      	ldr	r3, [r7, #28]
   1c056:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c058:	69fb      	ldr	r3, [r7, #28]
   1c05a:	681b      	ldr	r3, [r3, #0]
   1c05c:	2b00      	cmp	r3, #0
   1c05e:	d104      	bne.n	1c06a <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1c060:	4b96      	ldr	r3, [pc, #600]	; (1c2bc <xQueueSemaphoreTake+0x38c>)
   1c062:	4798      	blx	r3
   1c064:	0002      	movs	r2, r0
   1c066:	69fb      	ldr	r3, [r7, #28]
   1c068:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c06a:	69fb      	ldr	r3, [r7, #28]
   1c06c:	691b      	ldr	r3, [r3, #16]
   1c06e:	2b00      	cmp	r3, #0
   1c070:	d008      	beq.n	1c084 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c072:	69fb      	ldr	r3, [r7, #28]
   1c074:	3310      	adds	r3, #16
   1c076:	0018      	movs	r0, r3
   1c078:	4b91      	ldr	r3, [pc, #580]	; (1c2c0 <xQueueSemaphoreTake+0x390>)
   1c07a:	4798      	blx	r3
   1c07c:	1e03      	subs	r3, r0, #0
   1c07e:	d001      	beq.n	1c084 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1c080:	4b90      	ldr	r3, [pc, #576]	; (1c2c4 <xQueueSemaphoreTake+0x394>)
   1c082:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1c084:	4b90      	ldr	r3, [pc, #576]	; (1c2c8 <xQueueSemaphoreTake+0x398>)
   1c086:	4798      	blx	r3
				return pdPASS;
   1c088:	2301      	movs	r3, #1
   1c08a:	e18b      	b.n	1c3a4 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1c08c:	683b      	ldr	r3, [r7, #0]
   1c08e:	2b00      	cmp	r3, #0
   1c090:	d140      	bne.n	1c114 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1c092:	6a3b      	ldr	r3, [r7, #32]
   1c094:	2b00      	cmp	r3, #0
   1c096:	d001      	beq.n	1c09c <xQueueSemaphoreTake+0x16c>
   1c098:	b672      	cpsid	i
   1c09a:	e7fe      	b.n	1c09a <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1c09c:	4b8a      	ldr	r3, [pc, #552]	; (1c2c8 <xQueueSemaphoreTake+0x398>)
   1c09e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c0a0:	4b7c      	ldr	r3, [pc, #496]	; (1c294 <xQueueSemaphoreTake+0x364>)
   1c0a2:	4798      	blx	r3
   1c0a4:	0003      	movs	r3, r0
   1c0a6:	0018      	movs	r0, r3
   1c0a8:	4b7b      	ldr	r3, [pc, #492]	; (1c298 <xQueueSemaphoreTake+0x368>)
   1c0aa:	4798      	blx	r3
   1c0ac:	0003      	movs	r3, r0
   1c0ae:	001a      	movs	r2, r3
   1c0b0:	4b7a      	ldr	r3, [pc, #488]	; (1c29c <xQueueSemaphoreTake+0x36c>)
   1c0b2:	881b      	ldrh	r3, [r3, #0]
   1c0b4:	4013      	ands	r3, r2
   1c0b6:	b29b      	uxth	r3, r3
   1c0b8:	2b00      	cmp	r3, #0
   1c0ba:	d029      	beq.n	1c110 <xQueueSemaphoreTake+0x1e0>
   1c0bc:	69fb      	ldr	r3, [r7, #28]
   1c0be:	0018      	movs	r0, r3
   1c0c0:	4b77      	ldr	r3, [pc, #476]	; (1c2a0 <xQueueSemaphoreTake+0x370>)
   1c0c2:	4798      	blx	r3
   1c0c4:	0003      	movs	r3, r0
   1c0c6:	001a      	movs	r2, r3
   1c0c8:	4b74      	ldr	r3, [pc, #464]	; (1c29c <xQueueSemaphoreTake+0x36c>)
   1c0ca:	881b      	ldrh	r3, [r3, #0]
   1c0cc:	4013      	ands	r3, r2
   1c0ce:	b29b      	uxth	r3, r3
   1c0d0:	2b00      	cmp	r3, #0
   1c0d2:	d01d      	beq.n	1c110 <xQueueSemaphoreTake+0x1e0>
   1c0d4:	69fb      	ldr	r3, [r7, #28]
   1c0d6:	0018      	movs	r0, r3
   1c0d8:	4b72      	ldr	r3, [pc, #456]	; (1c2a4 <xQueueSemaphoreTake+0x374>)
   1c0da:	4798      	blx	r3
   1c0dc:	0003      	movs	r3, r0
   1c0de:	001a      	movs	r2, r3
   1c0e0:	4b71      	ldr	r3, [pc, #452]	; (1c2a8 <xQueueSemaphoreTake+0x378>)
   1c0e2:	5c9b      	ldrb	r3, [r3, r2]
   1c0e4:	3350      	adds	r3, #80	; 0x50
   1c0e6:	b2db      	uxtb	r3, r3
   1c0e8:	001d      	movs	r5, r3
   1c0ea:	69fb      	ldr	r3, [r7, #28]
   1c0ec:	0018      	movs	r0, r3
   1c0ee:	4b6d      	ldr	r3, [pc, #436]	; (1c2a4 <xQueueSemaphoreTake+0x374>)
   1c0f0:	4798      	blx	r3
   1c0f2:	0003      	movs	r3, r0
   1c0f4:	001a      	movs	r2, r3
   1c0f6:	4b6c      	ldr	r3, [pc, #432]	; (1c2a8 <xQueueSemaphoreTake+0x378>)
   1c0f8:	5c9c      	ldrb	r4, [r3, r2]
   1c0fa:	69fb      	ldr	r3, [r7, #28]
   1c0fc:	0018      	movs	r0, r3
   1c0fe:	4b6b      	ldr	r3, [pc, #428]	; (1c2ac <xQueueSemaphoreTake+0x37c>)
   1c100:	4798      	blx	r3
   1c102:	0003      	movs	r3, r0
   1c104:	b2db      	uxtb	r3, r3
   1c106:	001a      	movs	r2, r3
   1c108:	0021      	movs	r1, r4
   1c10a:	0028      	movs	r0, r5
   1c10c:	4b68      	ldr	r3, [pc, #416]	; (1c2b0 <xQueueSemaphoreTake+0x380>)
   1c10e:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1c110:	2300      	movs	r3, #0
   1c112:	e147      	b.n	1c3a4 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1c114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c116:	2b00      	cmp	r3, #0
   1c118:	d106      	bne.n	1c128 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1c11a:	230c      	movs	r3, #12
   1c11c:	18fb      	adds	r3, r7, r3
   1c11e:	0018      	movs	r0, r3
   1c120:	4b6a      	ldr	r3, [pc, #424]	; (1c2cc <xQueueSemaphoreTake+0x39c>)
   1c122:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1c124:	2301      	movs	r3, #1
   1c126:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1c128:	4b67      	ldr	r3, [pc, #412]	; (1c2c8 <xQueueSemaphoreTake+0x398>)
   1c12a:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1c12c:	4b68      	ldr	r3, [pc, #416]	; (1c2d0 <xQueueSemaphoreTake+0x3a0>)
   1c12e:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1c130:	4b57      	ldr	r3, [pc, #348]	; (1c290 <xQueueSemaphoreTake+0x360>)
   1c132:	4798      	blx	r3
   1c134:	69fb      	ldr	r3, [r7, #28]
   1c136:	2244      	movs	r2, #68	; 0x44
   1c138:	5c9b      	ldrb	r3, [r3, r2]
   1c13a:	b25b      	sxtb	r3, r3
   1c13c:	3301      	adds	r3, #1
   1c13e:	d103      	bne.n	1c148 <xQueueSemaphoreTake+0x218>
   1c140:	69fb      	ldr	r3, [r7, #28]
   1c142:	2244      	movs	r2, #68	; 0x44
   1c144:	2100      	movs	r1, #0
   1c146:	5499      	strb	r1, [r3, r2]
   1c148:	69fb      	ldr	r3, [r7, #28]
   1c14a:	2245      	movs	r2, #69	; 0x45
   1c14c:	5c9b      	ldrb	r3, [r3, r2]
   1c14e:	b25b      	sxtb	r3, r3
   1c150:	3301      	adds	r3, #1
   1c152:	d103      	bne.n	1c15c <xQueueSemaphoreTake+0x22c>
   1c154:	69fb      	ldr	r3, [r7, #28]
   1c156:	2245      	movs	r2, #69	; 0x45
   1c158:	2100      	movs	r1, #0
   1c15a:	5499      	strb	r1, [r3, r2]
   1c15c:	4b5a      	ldr	r3, [pc, #360]	; (1c2c8 <xQueueSemaphoreTake+0x398>)
   1c15e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c160:	003a      	movs	r2, r7
   1c162:	230c      	movs	r3, #12
   1c164:	18fb      	adds	r3, r7, r3
   1c166:	0011      	movs	r1, r2
   1c168:	0018      	movs	r0, r3
   1c16a:	4b5a      	ldr	r3, [pc, #360]	; (1c2d4 <xQueueSemaphoreTake+0x3a4>)
   1c16c:	4798      	blx	r3
   1c16e:	1e03      	subs	r3, r0, #0
   1c170:	d000      	beq.n	1c174 <xQueueSemaphoreTake+0x244>
   1c172:	e0bd      	b.n	1c2f0 <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c174:	69fb      	ldr	r3, [r7, #28]
   1c176:	0018      	movs	r0, r3
   1c178:	4b57      	ldr	r3, [pc, #348]	; (1c2d8 <xQueueSemaphoreTake+0x3a8>)
   1c17a:	4798      	blx	r3
   1c17c:	1e03      	subs	r3, r0, #0
   1c17e:	d100      	bne.n	1c182 <xQueueSemaphoreTake+0x252>
   1c180:	e07c      	b.n	1c27c <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1c182:	4b44      	ldr	r3, [pc, #272]	; (1c294 <xQueueSemaphoreTake+0x364>)
   1c184:	4798      	blx	r3
   1c186:	0003      	movs	r3, r0
   1c188:	0018      	movs	r0, r3
   1c18a:	4b43      	ldr	r3, [pc, #268]	; (1c298 <xQueueSemaphoreTake+0x368>)
   1c18c:	4798      	blx	r3
   1c18e:	0003      	movs	r3, r0
   1c190:	001a      	movs	r2, r3
   1c192:	4b42      	ldr	r3, [pc, #264]	; (1c29c <xQueueSemaphoreTake+0x36c>)
   1c194:	881b      	ldrh	r3, [r3, #0]
   1c196:	4013      	ands	r3, r2
   1c198:	b29b      	uxth	r3, r3
   1c19a:	2b00      	cmp	r3, #0
   1c19c:	d029      	beq.n	1c1f2 <xQueueSemaphoreTake+0x2c2>
   1c19e:	69fb      	ldr	r3, [r7, #28]
   1c1a0:	0018      	movs	r0, r3
   1c1a2:	4b3f      	ldr	r3, [pc, #252]	; (1c2a0 <xQueueSemaphoreTake+0x370>)
   1c1a4:	4798      	blx	r3
   1c1a6:	0003      	movs	r3, r0
   1c1a8:	001a      	movs	r2, r3
   1c1aa:	4b3c      	ldr	r3, [pc, #240]	; (1c29c <xQueueSemaphoreTake+0x36c>)
   1c1ac:	881b      	ldrh	r3, [r3, #0]
   1c1ae:	4013      	ands	r3, r2
   1c1b0:	b29b      	uxth	r3, r3
   1c1b2:	2b00      	cmp	r3, #0
   1c1b4:	d01d      	beq.n	1c1f2 <xQueueSemaphoreTake+0x2c2>
   1c1b6:	69fb      	ldr	r3, [r7, #28]
   1c1b8:	0018      	movs	r0, r3
   1c1ba:	4b3a      	ldr	r3, [pc, #232]	; (1c2a4 <xQueueSemaphoreTake+0x374>)
   1c1bc:	4798      	blx	r3
   1c1be:	0003      	movs	r3, r0
   1c1c0:	001a      	movs	r2, r3
   1c1c2:	4b39      	ldr	r3, [pc, #228]	; (1c2a8 <xQueueSemaphoreTake+0x378>)
   1c1c4:	5c9b      	ldrb	r3, [r3, r2]
   1c1c6:	3368      	adds	r3, #104	; 0x68
   1c1c8:	b2db      	uxtb	r3, r3
   1c1ca:	001d      	movs	r5, r3
   1c1cc:	69fb      	ldr	r3, [r7, #28]
   1c1ce:	0018      	movs	r0, r3
   1c1d0:	4b34      	ldr	r3, [pc, #208]	; (1c2a4 <xQueueSemaphoreTake+0x374>)
   1c1d2:	4798      	blx	r3
   1c1d4:	0003      	movs	r3, r0
   1c1d6:	001a      	movs	r2, r3
   1c1d8:	4b33      	ldr	r3, [pc, #204]	; (1c2a8 <xQueueSemaphoreTake+0x378>)
   1c1da:	5c9c      	ldrb	r4, [r3, r2]
   1c1dc:	69fb      	ldr	r3, [r7, #28]
   1c1de:	0018      	movs	r0, r3
   1c1e0:	4b32      	ldr	r3, [pc, #200]	; (1c2ac <xQueueSemaphoreTake+0x37c>)
   1c1e2:	4798      	blx	r3
   1c1e4:	0003      	movs	r3, r0
   1c1e6:	b2db      	uxtb	r3, r3
   1c1e8:	001a      	movs	r2, r3
   1c1ea:	0021      	movs	r1, r4
   1c1ec:	0028      	movs	r0, r5
   1c1ee:	4b30      	ldr	r3, [pc, #192]	; (1c2b0 <xQueueSemaphoreTake+0x380>)
   1c1f0:	4798      	blx	r3
   1c1f2:	69fb      	ldr	r3, [r7, #28]
   1c1f4:	0018      	movs	r0, r3
   1c1f6:	4b2b      	ldr	r3, [pc, #172]	; (1c2a4 <xQueueSemaphoreTake+0x374>)
   1c1f8:	4798      	blx	r3
   1c1fa:	0003      	movs	r3, r0
   1c1fc:	001a      	movs	r2, r3
   1c1fe:	4b2a      	ldr	r3, [pc, #168]	; (1c2a8 <xQueueSemaphoreTake+0x378>)
   1c200:	5c9b      	ldrb	r3, [r3, r2]
   1c202:	2b02      	cmp	r3, #2
   1c204:	d018      	beq.n	1c238 <xQueueSemaphoreTake+0x308>
   1c206:	4b23      	ldr	r3, [pc, #140]	; (1c294 <xQueueSemaphoreTake+0x364>)
   1c208:	4798      	blx	r3
   1c20a:	0003      	movs	r3, r0
   1c20c:	0018      	movs	r0, r3
   1c20e:	4b22      	ldr	r3, [pc, #136]	; (1c298 <xQueueSemaphoreTake+0x368>)
   1c210:	4798      	blx	r3
   1c212:	0003      	movs	r3, r0
   1c214:	001a      	movs	r2, r3
   1c216:	4b21      	ldr	r3, [pc, #132]	; (1c29c <xQueueSemaphoreTake+0x36c>)
   1c218:	881b      	ldrh	r3, [r3, #0]
   1c21a:	4013      	ands	r3, r2
   1c21c:	b29b      	uxth	r3, r3
   1c21e:	2b00      	cmp	r3, #0
   1c220:	d00a      	beq.n	1c238 <xQueueSemaphoreTake+0x308>
   1c222:	4b1c      	ldr	r3, [pc, #112]	; (1c294 <xQueueSemaphoreTake+0x364>)
   1c224:	4798      	blx	r3
   1c226:	0003      	movs	r3, r0
   1c228:	0018      	movs	r0, r3
   1c22a:	4b22      	ldr	r3, [pc, #136]	; (1c2b4 <xQueueSemaphoreTake+0x384>)
   1c22c:	4798      	blx	r3
   1c22e:	0003      	movs	r3, r0
   1c230:	b2db      	uxtb	r3, r3
   1c232:	0018      	movs	r0, r3
   1c234:	4b29      	ldr	r3, [pc, #164]	; (1c2dc <xQueueSemaphoreTake+0x3ac>)
   1c236:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c238:	69fb      	ldr	r3, [r7, #28]
   1c23a:	681b      	ldr	r3, [r3, #0]
   1c23c:	2b00      	cmp	r3, #0
   1c23e:	d10a      	bne.n	1c256 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1c240:	4b13      	ldr	r3, [pc, #76]	; (1c290 <xQueueSemaphoreTake+0x360>)
   1c242:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1c244:	69fb      	ldr	r3, [r7, #28]
   1c246:	685b      	ldr	r3, [r3, #4]
   1c248:	0018      	movs	r0, r3
   1c24a:	4b25      	ldr	r3, [pc, #148]	; (1c2e0 <xQueueSemaphoreTake+0x3b0>)
   1c24c:	4798      	blx	r3
   1c24e:	0003      	movs	r3, r0
   1c250:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1c252:	4b1d      	ldr	r3, [pc, #116]	; (1c2c8 <xQueueSemaphoreTake+0x398>)
   1c254:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c256:	69fb      	ldr	r3, [r7, #28]
   1c258:	3324      	adds	r3, #36	; 0x24
   1c25a:	683a      	ldr	r2, [r7, #0]
   1c25c:	0011      	movs	r1, r2
   1c25e:	0018      	movs	r0, r3
   1c260:	4b20      	ldr	r3, [pc, #128]	; (1c2e4 <xQueueSemaphoreTake+0x3b4>)
   1c262:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1c264:	69fb      	ldr	r3, [r7, #28]
   1c266:	0018      	movs	r0, r3
   1c268:	4b1f      	ldr	r3, [pc, #124]	; (1c2e8 <xQueueSemaphoreTake+0x3b8>)
   1c26a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c26c:	4b1f      	ldr	r3, [pc, #124]	; (1c2ec <xQueueSemaphoreTake+0x3bc>)
   1c26e:	4798      	blx	r3
   1c270:	1e03      	subs	r3, r0, #0
   1c272:	d000      	beq.n	1c276 <xQueueSemaphoreTake+0x346>
   1c274:	e680      	b.n	1bf78 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1c276:	4b13      	ldr	r3, [pc, #76]	; (1c2c4 <xQueueSemaphoreTake+0x394>)
   1c278:	4798      	blx	r3
   1c27a:	e67d      	b.n	1bf78 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1c27c:	69fb      	ldr	r3, [r7, #28]
   1c27e:	0018      	movs	r0, r3
   1c280:	4b19      	ldr	r3, [pc, #100]	; (1c2e8 <xQueueSemaphoreTake+0x3b8>)
   1c282:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1c284:	4b19      	ldr	r3, [pc, #100]	; (1c2ec <xQueueSemaphoreTake+0x3bc>)
   1c286:	4798      	blx	r3
   1c288:	e676      	b.n	1bf78 <xQueueSemaphoreTake+0x48>
   1c28a:	46c0      	nop			; (mov r8, r8)
   1c28c:	0001d9ad 	.word	0x0001d9ad
   1c290:	0001ac89 	.word	0x0001ac89
   1c294:	00018f1d 	.word	0x00018f1d
   1c298:	00018c81 	.word	0x00018c81
   1c29c:	20000104 	.word	0x20000104
   1c2a0:	00018d41 	.word	0x00018d41
   1c2a4:	00018c41 	.word	0x00018c41
   1c2a8:	200000f8 	.word	0x200000f8
   1c2ac:	00018d21 	.word	0x00018d21
   1c2b0:	00019679 	.word	0x00019679
   1c2b4:	00018c61 	.word	0x00018c61
   1c2b8:	00019cd5 	.word	0x00019cd5
   1c2bc:	0001de79 	.word	0x0001de79
   1c2c0:	0001d51d 	.word	0x0001d51d
   1c2c4:	0001ac71 	.word	0x0001ac71
   1c2c8:	0001acad 	.word	0x0001acad
   1c2cc:	0001d65d 	.word	0x0001d65d
   1c2d0:	0001cf45 	.word	0x0001cf45
   1c2d4:	0001d685 	.word	0x0001d685
   1c2d8:	0001c679 	.word	0x0001c679
   1c2dc:	00019e11 	.word	0x00019e11
   1c2e0:	0001d9e5 	.word	0x0001d9e5
   1c2e4:	0001d3f9 	.word	0x0001d3f9
   1c2e8:	0001c589 	.word	0x0001c589
   1c2ec:	0001cf5d 	.word	0x0001cf5d
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1c2f0:	69fb      	ldr	r3, [r7, #28]
   1c2f2:	0018      	movs	r0, r3
   1c2f4:	4b2d      	ldr	r3, [pc, #180]	; (1c3ac <xQueueSemaphoreTake+0x47c>)
   1c2f6:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1c2f8:	4b2d      	ldr	r3, [pc, #180]	; (1c3b0 <xQueueSemaphoreTake+0x480>)
   1c2fa:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c2fc:	69fb      	ldr	r3, [r7, #28]
   1c2fe:	0018      	movs	r0, r3
   1c300:	4b2c      	ldr	r3, [pc, #176]	; (1c3b4 <xQueueSemaphoreTake+0x484>)
   1c302:	4798      	blx	r3
   1c304:	1e03      	subs	r3, r0, #0
   1c306:	d100      	bne.n	1c30a <xQueueSemaphoreTake+0x3da>
   1c308:	e636      	b.n	1bf78 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1c30a:	6a3b      	ldr	r3, [r7, #32]
   1c30c:	2b00      	cmp	r3, #0
   1c30e:	d010      	beq.n	1c332 <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1c310:	4b29      	ldr	r3, [pc, #164]	; (1c3b8 <xQueueSemaphoreTake+0x488>)
   1c312:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1c314:	69fb      	ldr	r3, [r7, #28]
   1c316:	0018      	movs	r0, r3
   1c318:	4b28      	ldr	r3, [pc, #160]	; (1c3bc <xQueueSemaphoreTake+0x48c>)
   1c31a:	4798      	blx	r3
   1c31c:	0003      	movs	r3, r0
   1c31e:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1c320:	69fb      	ldr	r3, [r7, #28]
   1c322:	685b      	ldr	r3, [r3, #4]
   1c324:	697a      	ldr	r2, [r7, #20]
   1c326:	0011      	movs	r1, r2
   1c328:	0018      	movs	r0, r3
   1c32a:	4b25      	ldr	r3, [pc, #148]	; (1c3c0 <xQueueSemaphoreTake+0x490>)
   1c32c:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1c32e:	4b25      	ldr	r3, [pc, #148]	; (1c3c4 <xQueueSemaphoreTake+0x494>)
   1c330:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c332:	4b25      	ldr	r3, [pc, #148]	; (1c3c8 <xQueueSemaphoreTake+0x498>)
   1c334:	4798      	blx	r3
   1c336:	0003      	movs	r3, r0
   1c338:	0018      	movs	r0, r3
   1c33a:	4b24      	ldr	r3, [pc, #144]	; (1c3cc <xQueueSemaphoreTake+0x49c>)
   1c33c:	4798      	blx	r3
   1c33e:	0003      	movs	r3, r0
   1c340:	001a      	movs	r2, r3
   1c342:	4b23      	ldr	r3, [pc, #140]	; (1c3d0 <xQueueSemaphoreTake+0x4a0>)
   1c344:	881b      	ldrh	r3, [r3, #0]
   1c346:	4013      	ands	r3, r2
   1c348:	b29b      	uxth	r3, r3
   1c34a:	2b00      	cmp	r3, #0
   1c34c:	d029      	beq.n	1c3a2 <xQueueSemaphoreTake+0x472>
   1c34e:	69fb      	ldr	r3, [r7, #28]
   1c350:	0018      	movs	r0, r3
   1c352:	4b20      	ldr	r3, [pc, #128]	; (1c3d4 <xQueueSemaphoreTake+0x4a4>)
   1c354:	4798      	blx	r3
   1c356:	0003      	movs	r3, r0
   1c358:	001a      	movs	r2, r3
   1c35a:	4b1d      	ldr	r3, [pc, #116]	; (1c3d0 <xQueueSemaphoreTake+0x4a0>)
   1c35c:	881b      	ldrh	r3, [r3, #0]
   1c35e:	4013      	ands	r3, r2
   1c360:	b29b      	uxth	r3, r3
   1c362:	2b00      	cmp	r3, #0
   1c364:	d01d      	beq.n	1c3a2 <xQueueSemaphoreTake+0x472>
   1c366:	69fb      	ldr	r3, [r7, #28]
   1c368:	0018      	movs	r0, r3
   1c36a:	4b1b      	ldr	r3, [pc, #108]	; (1c3d8 <xQueueSemaphoreTake+0x4a8>)
   1c36c:	4798      	blx	r3
   1c36e:	0003      	movs	r3, r0
   1c370:	001a      	movs	r2, r3
   1c372:	4b1a      	ldr	r3, [pc, #104]	; (1c3dc <xQueueSemaphoreTake+0x4ac>)
   1c374:	5c9b      	ldrb	r3, [r3, r2]
   1c376:	3350      	adds	r3, #80	; 0x50
   1c378:	b2db      	uxtb	r3, r3
   1c37a:	001d      	movs	r5, r3
   1c37c:	69fb      	ldr	r3, [r7, #28]
   1c37e:	0018      	movs	r0, r3
   1c380:	4b15      	ldr	r3, [pc, #84]	; (1c3d8 <xQueueSemaphoreTake+0x4a8>)
   1c382:	4798      	blx	r3
   1c384:	0003      	movs	r3, r0
   1c386:	001a      	movs	r2, r3
   1c388:	4b14      	ldr	r3, [pc, #80]	; (1c3dc <xQueueSemaphoreTake+0x4ac>)
   1c38a:	5c9c      	ldrb	r4, [r3, r2]
   1c38c:	69fb      	ldr	r3, [r7, #28]
   1c38e:	0018      	movs	r0, r3
   1c390:	4b13      	ldr	r3, [pc, #76]	; (1c3e0 <xQueueSemaphoreTake+0x4b0>)
   1c392:	4798      	blx	r3
   1c394:	0003      	movs	r3, r0
   1c396:	b2db      	uxtb	r3, r3
   1c398:	001a      	movs	r2, r3
   1c39a:	0021      	movs	r1, r4
   1c39c:	0028      	movs	r0, r5
   1c39e:	4b11      	ldr	r3, [pc, #68]	; (1c3e4 <xQueueSemaphoreTake+0x4b4>)
   1c3a0:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1c3a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1c3a4:	0018      	movs	r0, r3
   1c3a6:	46bd      	mov	sp, r7
   1c3a8:	b00a      	add	sp, #40	; 0x28
   1c3aa:	bdb0      	pop	{r4, r5, r7, pc}
   1c3ac:	0001c589 	.word	0x0001c589
   1c3b0:	0001cf5d 	.word	0x0001cf5d
   1c3b4:	0001c679 	.word	0x0001c679
   1c3b8:	0001ac89 	.word	0x0001ac89
   1c3bc:	0001c42b 	.word	0x0001c42b
   1c3c0:	0001dcdd 	.word	0x0001dcdd
   1c3c4:	0001acad 	.word	0x0001acad
   1c3c8:	00018f1d 	.word	0x00018f1d
   1c3cc:	00018c81 	.word	0x00018c81
   1c3d0:	20000104 	.word	0x20000104
   1c3d4:	00018d41 	.word	0x00018d41
   1c3d8:	00018c41 	.word	0x00018c41
   1c3dc:	200000f8 	.word	0x200000f8
   1c3e0:	00018d21 	.word	0x00018d21
   1c3e4:	00019679 	.word	0x00019679

0001c3e8 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1c3e8:	b580      	push	{r7, lr}
   1c3ea:	b082      	sub	sp, #8
   1c3ec:	af00      	add	r7, sp, #0
   1c3ee:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1c3f0:	687b      	ldr	r3, [r7, #4]
   1c3f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1c3f4:	0018      	movs	r0, r3
   1c3f6:	46bd      	mov	sp, r7
   1c3f8:	b002      	add	sp, #8
   1c3fa:	bd80      	pop	{r7, pc}

0001c3fc <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1c3fc:	b580      	push	{r7, lr}
   1c3fe:	b082      	sub	sp, #8
   1c400:	af00      	add	r7, sp, #0
   1c402:	6078      	str	r0, [r7, #4]
   1c404:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1c406:	687b      	ldr	r3, [r7, #4]
   1c408:	683a      	ldr	r2, [r7, #0]
   1c40a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1c40c:	46c0      	nop			; (mov r8, r8)
   1c40e:	46bd      	mov	sp, r7
   1c410:	b002      	add	sp, #8
   1c412:	bd80      	pop	{r7, pc}

0001c414 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1c414:	b580      	push	{r7, lr}
   1c416:	b082      	sub	sp, #8
   1c418:	af00      	add	r7, sp, #0
   1c41a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1c41c:	687b      	ldr	r3, [r7, #4]
   1c41e:	2250      	movs	r2, #80	; 0x50
   1c420:	5c9b      	ldrb	r3, [r3, r2]
	}
   1c422:	0018      	movs	r0, r3
   1c424:	46bd      	mov	sp, r7
   1c426:	b002      	add	sp, #8
   1c428:	bd80      	pop	{r7, pc}

0001c42a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1c42a:	b580      	push	{r7, lr}
   1c42c:	b084      	sub	sp, #16
   1c42e:	af00      	add	r7, sp, #0
   1c430:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1c432:	687b      	ldr	r3, [r7, #4]
   1c434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c436:	2b00      	cmp	r3, #0
   1c438:	d006      	beq.n	1c448 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1c43a:	687b      	ldr	r3, [r7, #4]
   1c43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c43e:	681b      	ldr	r3, [r3, #0]
   1c440:	2205      	movs	r2, #5
   1c442:	1ad3      	subs	r3, r2, r3
   1c444:	60fb      	str	r3, [r7, #12]
   1c446:	e001      	b.n	1c44c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1c448:	2300      	movs	r3, #0
   1c44a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1c44c:	68fb      	ldr	r3, [r7, #12]
	}
   1c44e:	0018      	movs	r0, r3
   1c450:	46bd      	mov	sp, r7
   1c452:	b004      	add	sp, #16
   1c454:	bd80      	pop	{r7, pc}
	...

0001c458 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1c458:	b580      	push	{r7, lr}
   1c45a:	b086      	sub	sp, #24
   1c45c:	af00      	add	r7, sp, #0
   1c45e:	60f8      	str	r0, [r7, #12]
   1c460:	60b9      	str	r1, [r7, #8]
   1c462:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1c464:	2300      	movs	r3, #0
   1c466:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c468:	68fb      	ldr	r3, [r7, #12]
   1c46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c46c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1c46e:	68fb      	ldr	r3, [r7, #12]
   1c470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c472:	2b00      	cmp	r3, #0
   1c474:	d10e      	bne.n	1c494 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c476:	68fb      	ldr	r3, [r7, #12]
   1c478:	681b      	ldr	r3, [r3, #0]
   1c47a:	2b00      	cmp	r3, #0
   1c47c:	d14e      	bne.n	1c51c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1c47e:	68fb      	ldr	r3, [r7, #12]
   1c480:	685b      	ldr	r3, [r3, #4]
   1c482:	0018      	movs	r0, r3
   1c484:	4b2a      	ldr	r3, [pc, #168]	; (1c530 <prvCopyDataToQueue+0xd8>)
   1c486:	4798      	blx	r3
   1c488:	0003      	movs	r3, r0
   1c48a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1c48c:	68fb      	ldr	r3, [r7, #12]
   1c48e:	2200      	movs	r2, #0
   1c490:	605a      	str	r2, [r3, #4]
   1c492:	e043      	b.n	1c51c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1c494:	687b      	ldr	r3, [r7, #4]
   1c496:	2b00      	cmp	r3, #0
   1c498:	d119      	bne.n	1c4ce <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1c49a:	68fb      	ldr	r3, [r7, #12]
   1c49c:	6898      	ldr	r0, [r3, #8]
   1c49e:	68fb      	ldr	r3, [r7, #12]
   1c4a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c4a2:	68bb      	ldr	r3, [r7, #8]
   1c4a4:	0019      	movs	r1, r3
   1c4a6:	4b23      	ldr	r3, [pc, #140]	; (1c534 <prvCopyDataToQueue+0xdc>)
   1c4a8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1c4aa:	68fb      	ldr	r3, [r7, #12]
   1c4ac:	689a      	ldr	r2, [r3, #8]
   1c4ae:	68fb      	ldr	r3, [r7, #12]
   1c4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c4b2:	18d2      	adds	r2, r2, r3
   1c4b4:	68fb      	ldr	r3, [r7, #12]
   1c4b6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c4b8:	68fb      	ldr	r3, [r7, #12]
   1c4ba:	689a      	ldr	r2, [r3, #8]
   1c4bc:	68fb      	ldr	r3, [r7, #12]
   1c4be:	685b      	ldr	r3, [r3, #4]
   1c4c0:	429a      	cmp	r2, r3
   1c4c2:	d32b      	bcc.n	1c51c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1c4c4:	68fb      	ldr	r3, [r7, #12]
   1c4c6:	681a      	ldr	r2, [r3, #0]
   1c4c8:	68fb      	ldr	r3, [r7, #12]
   1c4ca:	609a      	str	r2, [r3, #8]
   1c4cc:	e026      	b.n	1c51c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c4ce:	68fb      	ldr	r3, [r7, #12]
   1c4d0:	68d8      	ldr	r0, [r3, #12]
   1c4d2:	68fb      	ldr	r3, [r7, #12]
   1c4d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c4d6:	68bb      	ldr	r3, [r7, #8]
   1c4d8:	0019      	movs	r1, r3
   1c4da:	4b16      	ldr	r3, [pc, #88]	; (1c534 <prvCopyDataToQueue+0xdc>)
   1c4dc:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1c4de:	68fb      	ldr	r3, [r7, #12]
   1c4e0:	68da      	ldr	r2, [r3, #12]
   1c4e2:	68fb      	ldr	r3, [r7, #12]
   1c4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c4e6:	425b      	negs	r3, r3
   1c4e8:	18d2      	adds	r2, r2, r3
   1c4ea:	68fb      	ldr	r3, [r7, #12]
   1c4ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c4ee:	68fb      	ldr	r3, [r7, #12]
   1c4f0:	68da      	ldr	r2, [r3, #12]
   1c4f2:	68fb      	ldr	r3, [r7, #12]
   1c4f4:	681b      	ldr	r3, [r3, #0]
   1c4f6:	429a      	cmp	r2, r3
   1c4f8:	d207      	bcs.n	1c50a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1c4fa:	68fb      	ldr	r3, [r7, #12]
   1c4fc:	685a      	ldr	r2, [r3, #4]
   1c4fe:	68fb      	ldr	r3, [r7, #12]
   1c500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c502:	425b      	negs	r3, r3
   1c504:	18d2      	adds	r2, r2, r3
   1c506:	68fb      	ldr	r3, [r7, #12]
   1c508:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1c50a:	687b      	ldr	r3, [r7, #4]
   1c50c:	2b02      	cmp	r3, #2
   1c50e:	d105      	bne.n	1c51c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c510:	693b      	ldr	r3, [r7, #16]
   1c512:	2b00      	cmp	r3, #0
   1c514:	d002      	beq.n	1c51c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1c516:	693b      	ldr	r3, [r7, #16]
   1c518:	3b01      	subs	r3, #1
   1c51a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1c51c:	693b      	ldr	r3, [r7, #16]
   1c51e:	1c5a      	adds	r2, r3, #1
   1c520:	68fb      	ldr	r3, [r7, #12]
   1c522:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1c524:	697b      	ldr	r3, [r7, #20]
}
   1c526:	0018      	movs	r0, r3
   1c528:	46bd      	mov	sp, r7
   1c52a:	b006      	add	sp, #24
   1c52c:	bd80      	pop	{r7, pc}
   1c52e:	46c0      	nop			; (mov r8, r8)
   1c530:	0001db75 	.word	0x0001db75
   1c534:	0003550d 	.word	0x0003550d

0001c538 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1c538:	b580      	push	{r7, lr}
   1c53a:	b082      	sub	sp, #8
   1c53c:	af00      	add	r7, sp, #0
   1c53e:	6078      	str	r0, [r7, #4]
   1c540:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1c542:	687b      	ldr	r3, [r7, #4]
   1c544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c546:	2b00      	cmp	r3, #0
   1c548:	d018      	beq.n	1c57c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1c54a:	687b      	ldr	r3, [r7, #4]
   1c54c:	68da      	ldr	r2, [r3, #12]
   1c54e:	687b      	ldr	r3, [r7, #4]
   1c550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c552:	18d2      	adds	r2, r2, r3
   1c554:	687b      	ldr	r3, [r7, #4]
   1c556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1c558:	687b      	ldr	r3, [r7, #4]
   1c55a:	68da      	ldr	r2, [r3, #12]
   1c55c:	687b      	ldr	r3, [r7, #4]
   1c55e:	685b      	ldr	r3, [r3, #4]
   1c560:	429a      	cmp	r2, r3
   1c562:	d303      	bcc.n	1c56c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1c564:	687b      	ldr	r3, [r7, #4]
   1c566:	681a      	ldr	r2, [r3, #0]
   1c568:	687b      	ldr	r3, [r7, #4]
   1c56a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1c56c:	687b      	ldr	r3, [r7, #4]
   1c56e:	68d9      	ldr	r1, [r3, #12]
   1c570:	687b      	ldr	r3, [r7, #4]
   1c572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c574:	683b      	ldr	r3, [r7, #0]
   1c576:	0018      	movs	r0, r3
   1c578:	4b02      	ldr	r3, [pc, #8]	; (1c584 <prvCopyDataFromQueue+0x4c>)
   1c57a:	4798      	blx	r3
	}
}
   1c57c:	46c0      	nop			; (mov r8, r8)
   1c57e:	46bd      	mov	sp, r7
   1c580:	b002      	add	sp, #8
   1c582:	bd80      	pop	{r7, pc}
   1c584:	0003550d 	.word	0x0003550d

0001c588 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1c588:	b580      	push	{r7, lr}
   1c58a:	b084      	sub	sp, #16
   1c58c:	af00      	add	r7, sp, #0
   1c58e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1c590:	4b34      	ldr	r3, [pc, #208]	; (1c664 <prvUnlockQueue+0xdc>)
   1c592:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1c594:	230f      	movs	r3, #15
   1c596:	18fb      	adds	r3, r7, r3
   1c598:	687a      	ldr	r2, [r7, #4]
   1c59a:	2145      	movs	r1, #69	; 0x45
   1c59c:	5c52      	ldrb	r2, [r2, r1]
   1c59e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c5a0:	e022      	b.n	1c5e8 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1c5a2:	687b      	ldr	r3, [r7, #4]
   1c5a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c5a6:	2b00      	cmp	r3, #0
   1c5a8:	d009      	beq.n	1c5be <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1c5aa:	687b      	ldr	r3, [r7, #4]
   1c5ac:	2100      	movs	r1, #0
   1c5ae:	0018      	movs	r0, r3
   1c5b0:	4b2d      	ldr	r3, [pc, #180]	; (1c668 <prvUnlockQueue+0xe0>)
   1c5b2:	4798      	blx	r3
   1c5b4:	1e03      	subs	r3, r0, #0
   1c5b6:	d00f      	beq.n	1c5d8 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1c5b8:	4b2c      	ldr	r3, [pc, #176]	; (1c66c <prvUnlockQueue+0xe4>)
   1c5ba:	4798      	blx	r3
   1c5bc:	e00c      	b.n	1c5d8 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c5be:	687b      	ldr	r3, [r7, #4]
   1c5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c5c2:	2b00      	cmp	r3, #0
   1c5c4:	d017      	beq.n	1c5f6 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c5c6:	687b      	ldr	r3, [r7, #4]
   1c5c8:	3324      	adds	r3, #36	; 0x24
   1c5ca:	0018      	movs	r0, r3
   1c5cc:	4b28      	ldr	r3, [pc, #160]	; (1c670 <prvUnlockQueue+0xe8>)
   1c5ce:	4798      	blx	r3
   1c5d0:	1e03      	subs	r3, r0, #0
   1c5d2:	d001      	beq.n	1c5d8 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1c5d4:	4b25      	ldr	r3, [pc, #148]	; (1c66c <prvUnlockQueue+0xe4>)
   1c5d6:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1c5d8:	230f      	movs	r3, #15
   1c5da:	18fb      	adds	r3, r7, r3
   1c5dc:	781b      	ldrb	r3, [r3, #0]
   1c5de:	3b01      	subs	r3, #1
   1c5e0:	b2da      	uxtb	r2, r3
   1c5e2:	230f      	movs	r3, #15
   1c5e4:	18fb      	adds	r3, r7, r3
   1c5e6:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c5e8:	230f      	movs	r3, #15
   1c5ea:	18fb      	adds	r3, r7, r3
   1c5ec:	781b      	ldrb	r3, [r3, #0]
   1c5ee:	b25b      	sxtb	r3, r3
   1c5f0:	2b00      	cmp	r3, #0
   1c5f2:	dcd6      	bgt.n	1c5a2 <prvUnlockQueue+0x1a>
   1c5f4:	e000      	b.n	1c5f8 <prvUnlockQueue+0x70>
						break;
   1c5f6:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1c5f8:	687b      	ldr	r3, [r7, #4]
   1c5fa:	2245      	movs	r2, #69	; 0x45
   1c5fc:	21ff      	movs	r1, #255	; 0xff
   1c5fe:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c600:	4b1c      	ldr	r3, [pc, #112]	; (1c674 <prvUnlockQueue+0xec>)
   1c602:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1c604:	4b17      	ldr	r3, [pc, #92]	; (1c664 <prvUnlockQueue+0xdc>)
   1c606:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1c608:	230e      	movs	r3, #14
   1c60a:	18fb      	adds	r3, r7, r3
   1c60c:	687a      	ldr	r2, [r7, #4]
   1c60e:	2144      	movs	r1, #68	; 0x44
   1c610:	5c52      	ldrb	r2, [r2, r1]
   1c612:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c614:	e014      	b.n	1c640 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c616:	687b      	ldr	r3, [r7, #4]
   1c618:	691b      	ldr	r3, [r3, #16]
   1c61a:	2b00      	cmp	r3, #0
   1c61c:	d017      	beq.n	1c64e <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c61e:	687b      	ldr	r3, [r7, #4]
   1c620:	3310      	adds	r3, #16
   1c622:	0018      	movs	r0, r3
   1c624:	4b12      	ldr	r3, [pc, #72]	; (1c670 <prvUnlockQueue+0xe8>)
   1c626:	4798      	blx	r3
   1c628:	1e03      	subs	r3, r0, #0
   1c62a:	d001      	beq.n	1c630 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1c62c:	4b0f      	ldr	r3, [pc, #60]	; (1c66c <prvUnlockQueue+0xe4>)
   1c62e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1c630:	230e      	movs	r3, #14
   1c632:	18fb      	adds	r3, r7, r3
   1c634:	781b      	ldrb	r3, [r3, #0]
   1c636:	3b01      	subs	r3, #1
   1c638:	b2da      	uxtb	r2, r3
   1c63a:	230e      	movs	r3, #14
   1c63c:	18fb      	adds	r3, r7, r3
   1c63e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c640:	230e      	movs	r3, #14
   1c642:	18fb      	adds	r3, r7, r3
   1c644:	781b      	ldrb	r3, [r3, #0]
   1c646:	b25b      	sxtb	r3, r3
   1c648:	2b00      	cmp	r3, #0
   1c64a:	dce4      	bgt.n	1c616 <prvUnlockQueue+0x8e>
   1c64c:	e000      	b.n	1c650 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1c64e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1c650:	687b      	ldr	r3, [r7, #4]
   1c652:	2244      	movs	r2, #68	; 0x44
   1c654:	21ff      	movs	r1, #255	; 0xff
   1c656:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c658:	4b06      	ldr	r3, [pc, #24]	; (1c674 <prvUnlockQueue+0xec>)
   1c65a:	4798      	blx	r3
}
   1c65c:	46c0      	nop			; (mov r8, r8)
   1c65e:	46bd      	mov	sp, r7
   1c660:	b004      	add	sp, #16
   1c662:	bd80      	pop	{r7, pc}
   1c664:	0001ac89 	.word	0x0001ac89
   1c668:	0001c75d 	.word	0x0001c75d
   1c66c:	0001d731 	.word	0x0001d731
   1c670:	0001d51d 	.word	0x0001d51d
   1c674:	0001acad 	.word	0x0001acad

0001c678 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1c678:	b580      	push	{r7, lr}
   1c67a:	b084      	sub	sp, #16
   1c67c:	af00      	add	r7, sp, #0
   1c67e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c680:	4b08      	ldr	r3, [pc, #32]	; (1c6a4 <prvIsQueueEmpty+0x2c>)
   1c682:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c684:	687b      	ldr	r3, [r7, #4]
   1c686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c688:	2b00      	cmp	r3, #0
   1c68a:	d102      	bne.n	1c692 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c68c:	2301      	movs	r3, #1
   1c68e:	60fb      	str	r3, [r7, #12]
   1c690:	e001      	b.n	1c696 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c692:	2300      	movs	r3, #0
   1c694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c696:	4b04      	ldr	r3, [pc, #16]	; (1c6a8 <prvIsQueueEmpty+0x30>)
   1c698:	4798      	blx	r3

	return xReturn;
   1c69a:	68fb      	ldr	r3, [r7, #12]
}
   1c69c:	0018      	movs	r0, r3
   1c69e:	46bd      	mov	sp, r7
   1c6a0:	b004      	add	sp, #16
   1c6a2:	bd80      	pop	{r7, pc}
   1c6a4:	0001ac89 	.word	0x0001ac89
   1c6a8:	0001acad 	.word	0x0001acad

0001c6ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c6ac:	b580      	push	{r7, lr}
   1c6ae:	b084      	sub	sp, #16
   1c6b0:	af00      	add	r7, sp, #0
   1c6b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c6b4:	4b09      	ldr	r3, [pc, #36]	; (1c6dc <prvIsQueueFull+0x30>)
   1c6b6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c6b8:	687b      	ldr	r3, [r7, #4]
   1c6ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c6bc:	687b      	ldr	r3, [r7, #4]
   1c6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c6c0:	429a      	cmp	r2, r3
   1c6c2:	d102      	bne.n	1c6ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1c6c4:	2301      	movs	r3, #1
   1c6c6:	60fb      	str	r3, [r7, #12]
   1c6c8:	e001      	b.n	1c6ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1c6ca:	2300      	movs	r3, #0
   1c6cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c6ce:	4b04      	ldr	r3, [pc, #16]	; (1c6e0 <prvIsQueueFull+0x34>)
   1c6d0:	4798      	blx	r3

	return xReturn;
   1c6d2:	68fb      	ldr	r3, [r7, #12]
}
   1c6d4:	0018      	movs	r0, r3
   1c6d6:	46bd      	mov	sp, r7
   1c6d8:	b004      	add	sp, #16
   1c6da:	bd80      	pop	{r7, pc}
   1c6dc:	0001ac89 	.word	0x0001ac89
   1c6e0:	0001acad 	.word	0x0001acad

0001c6e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c6e4:	b580      	push	{r7, lr}
   1c6e6:	b086      	sub	sp, #24
   1c6e8:	af00      	add	r7, sp, #0
   1c6ea:	60f8      	str	r0, [r7, #12]
   1c6ec:	60b9      	str	r1, [r7, #8]
   1c6ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c6f0:	68fb      	ldr	r3, [r7, #12]
   1c6f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1c6f4:	4b15      	ldr	r3, [pc, #84]	; (1c74c <vQueueWaitForMessageRestricted+0x68>)
   1c6f6:	4798      	blx	r3
   1c6f8:	697b      	ldr	r3, [r7, #20]
   1c6fa:	2244      	movs	r2, #68	; 0x44
   1c6fc:	5c9b      	ldrb	r3, [r3, r2]
   1c6fe:	b25b      	sxtb	r3, r3
   1c700:	3301      	adds	r3, #1
   1c702:	d103      	bne.n	1c70c <vQueueWaitForMessageRestricted+0x28>
   1c704:	697b      	ldr	r3, [r7, #20]
   1c706:	2244      	movs	r2, #68	; 0x44
   1c708:	2100      	movs	r1, #0
   1c70a:	5499      	strb	r1, [r3, r2]
   1c70c:	697b      	ldr	r3, [r7, #20]
   1c70e:	2245      	movs	r2, #69	; 0x45
   1c710:	5c9b      	ldrb	r3, [r3, r2]
   1c712:	b25b      	sxtb	r3, r3
   1c714:	3301      	adds	r3, #1
   1c716:	d103      	bne.n	1c720 <vQueueWaitForMessageRestricted+0x3c>
   1c718:	697b      	ldr	r3, [r7, #20]
   1c71a:	2245      	movs	r2, #69	; 0x45
   1c71c:	2100      	movs	r1, #0
   1c71e:	5499      	strb	r1, [r3, r2]
   1c720:	4b0b      	ldr	r3, [pc, #44]	; (1c750 <vQueueWaitForMessageRestricted+0x6c>)
   1c722:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1c724:	697b      	ldr	r3, [r7, #20]
   1c726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c728:	2b00      	cmp	r3, #0
   1c72a:	d106      	bne.n	1c73a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1c72c:	697b      	ldr	r3, [r7, #20]
   1c72e:	3324      	adds	r3, #36	; 0x24
   1c730:	687a      	ldr	r2, [r7, #4]
   1c732:	68b9      	ldr	r1, [r7, #8]
   1c734:	0018      	movs	r0, r3
   1c736:	4b07      	ldr	r3, [pc, #28]	; (1c754 <vQueueWaitForMessageRestricted+0x70>)
   1c738:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1c73a:	697b      	ldr	r3, [r7, #20]
   1c73c:	0018      	movs	r0, r3
   1c73e:	4b06      	ldr	r3, [pc, #24]	; (1c758 <vQueueWaitForMessageRestricted+0x74>)
   1c740:	4798      	blx	r3
	}
   1c742:	46c0      	nop			; (mov r8, r8)
   1c744:	46bd      	mov	sp, r7
   1c746:	b006      	add	sp, #24
   1c748:	bd80      	pop	{r7, pc}
   1c74a:	46c0      	nop			; (mov r8, r8)
   1c74c:	0001ac89 	.word	0x0001ac89
   1c750:	0001acad 	.word	0x0001acad
   1c754:	0001d43d 	.word	0x0001d43d
   1c758:	0001c589 	.word	0x0001c589

0001c75c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1c75c:	b5b0      	push	{r4, r5, r7, lr}
   1c75e:	b086      	sub	sp, #24
   1c760:	af00      	add	r7, sp, #0
   1c762:	6078      	str	r0, [r7, #4]
   1c764:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1c766:	687b      	ldr	r3, [r7, #4]
   1c768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c76a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1c76c:	2300      	movs	r3, #0
   1c76e:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1c770:	693b      	ldr	r3, [r7, #16]
   1c772:	2b00      	cmp	r3, #0
   1c774:	d101      	bne.n	1c77a <prvNotifyQueueSetContainer+0x1e>
   1c776:	b672      	cpsid	i
   1c778:	e7fe      	b.n	1c778 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1c77a:	693b      	ldr	r3, [r7, #16]
   1c77c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c77e:	693b      	ldr	r3, [r7, #16]
   1c780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c782:	429a      	cmp	r2, r3
   1c784:	d301      	bcc.n	1c78a <prvNotifyQueueSetContainer+0x2e>
   1c786:	b672      	cpsid	i
   1c788:	e7fe      	b.n	1c788 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1c78a:	693b      	ldr	r3, [r7, #16]
   1c78c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c78e:	693b      	ldr	r3, [r7, #16]
   1c790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c792:	429a      	cmp	r2, r3
   1c794:	d300      	bcc.n	1c798 <prvNotifyQueueSetContainer+0x3c>
   1c796:	e08b      	b.n	1c8b0 <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1c798:	230f      	movs	r3, #15
   1c79a:	18fb      	adds	r3, r7, r3
   1c79c:	693a      	ldr	r2, [r7, #16]
   1c79e:	2145      	movs	r1, #69	; 0x45
   1c7a0:	5c52      	ldrb	r2, [r2, r1]
   1c7a2:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1c7a4:	4b45      	ldr	r3, [pc, #276]	; (1c8bc <prvNotifyQueueSetContainer+0x160>)
   1c7a6:	4798      	blx	r3
   1c7a8:	0003      	movs	r3, r0
   1c7aa:	0018      	movs	r0, r3
   1c7ac:	4b44      	ldr	r3, [pc, #272]	; (1c8c0 <prvNotifyQueueSetContainer+0x164>)
   1c7ae:	4798      	blx	r3
   1c7b0:	0003      	movs	r3, r0
   1c7b2:	001a      	movs	r2, r3
   1c7b4:	4b43      	ldr	r3, [pc, #268]	; (1c8c4 <prvNotifyQueueSetContainer+0x168>)
   1c7b6:	881b      	ldrh	r3, [r3, #0]
   1c7b8:	4013      	ands	r3, r2
   1c7ba:	b29b      	uxth	r3, r3
   1c7bc:	2b00      	cmp	r3, #0
   1c7be:	d02e      	beq.n	1c81e <prvNotifyQueueSetContainer+0xc2>
   1c7c0:	693b      	ldr	r3, [r7, #16]
   1c7c2:	0018      	movs	r0, r3
   1c7c4:	4b40      	ldr	r3, [pc, #256]	; (1c8c8 <prvNotifyQueueSetContainer+0x16c>)
   1c7c6:	4798      	blx	r3
   1c7c8:	0003      	movs	r3, r0
   1c7ca:	001a      	movs	r2, r3
   1c7cc:	4b3d      	ldr	r3, [pc, #244]	; (1c8c4 <prvNotifyQueueSetContainer+0x168>)
   1c7ce:	881b      	ldrh	r3, [r3, #0]
   1c7d0:	4013      	ands	r3, r2
   1c7d2:	b29b      	uxth	r3, r3
   1c7d4:	2b00      	cmp	r3, #0
   1c7d6:	d022      	beq.n	1c81e <prvNotifyQueueSetContainer+0xc2>
   1c7d8:	683b      	ldr	r3, [r7, #0]
   1c7da:	2b00      	cmp	r3, #0
   1c7dc:	d10b      	bne.n	1c7f6 <prvNotifyQueueSetContainer+0x9a>
   1c7de:	693b      	ldr	r3, [r7, #16]
   1c7e0:	0018      	movs	r0, r3
   1c7e2:	4b3a      	ldr	r3, [pc, #232]	; (1c8cc <prvNotifyQueueSetContainer+0x170>)
   1c7e4:	4798      	blx	r3
   1c7e6:	0003      	movs	r3, r0
   1c7e8:	001a      	movs	r2, r3
   1c7ea:	4b39      	ldr	r3, [pc, #228]	; (1c8d0 <prvNotifyQueueSetContainer+0x174>)
   1c7ec:	5c9b      	ldrb	r3, [r3, r2]
   1c7ee:	3320      	adds	r3, #32
   1c7f0:	b2db      	uxtb	r3, r3
   1c7f2:	001d      	movs	r5, r3
   1c7f4:	e000      	b.n	1c7f8 <prvNotifyQueueSetContainer+0x9c>
   1c7f6:	2525      	movs	r5, #37	; 0x25
   1c7f8:	693b      	ldr	r3, [r7, #16]
   1c7fa:	0018      	movs	r0, r3
   1c7fc:	4b33      	ldr	r3, [pc, #204]	; (1c8cc <prvNotifyQueueSetContainer+0x170>)
   1c7fe:	4798      	blx	r3
   1c800:	0003      	movs	r3, r0
   1c802:	001a      	movs	r2, r3
   1c804:	4b32      	ldr	r3, [pc, #200]	; (1c8d0 <prvNotifyQueueSetContainer+0x174>)
   1c806:	5c9c      	ldrb	r4, [r3, r2]
   1c808:	693b      	ldr	r3, [r7, #16]
   1c80a:	0018      	movs	r0, r3
   1c80c:	4b31      	ldr	r3, [pc, #196]	; (1c8d4 <prvNotifyQueueSetContainer+0x178>)
   1c80e:	4798      	blx	r3
   1c810:	0003      	movs	r3, r0
   1c812:	b2db      	uxtb	r3, r3
   1c814:	001a      	movs	r2, r3
   1c816:	0021      	movs	r1, r4
   1c818:	0028      	movs	r0, r5
   1c81a:	4b2f      	ldr	r3, [pc, #188]	; (1c8d8 <prvNotifyQueueSetContainer+0x17c>)
   1c81c:	4798      	blx	r3
   1c81e:	693b      	ldr	r3, [r7, #16]
   1c820:	0018      	movs	r0, r3
   1c822:	4b2a      	ldr	r3, [pc, #168]	; (1c8cc <prvNotifyQueueSetContainer+0x170>)
   1c824:	4798      	blx	r3
   1c826:	0003      	movs	r3, r0
   1c828:	001a      	movs	r2, r3
   1c82a:	4b29      	ldr	r3, [pc, #164]	; (1c8d0 <prvNotifyQueueSetContainer+0x174>)
   1c82c:	5c9c      	ldrb	r4, [r3, r2]
   1c82e:	693b      	ldr	r3, [r7, #16]
   1c830:	0018      	movs	r0, r3
   1c832:	4b28      	ldr	r3, [pc, #160]	; (1c8d4 <prvNotifyQueueSetContainer+0x178>)
   1c834:	4798      	blx	r3
   1c836:	0003      	movs	r3, r0
   1c838:	b2dd      	uxtb	r5, r3
   1c83a:	693b      	ldr	r3, [r7, #16]
   1c83c:	0018      	movs	r0, r3
   1c83e:	4b23      	ldr	r3, [pc, #140]	; (1c8cc <prvNotifyQueueSetContainer+0x170>)
   1c840:	4798      	blx	r3
   1c842:	0003      	movs	r3, r0
   1c844:	001a      	movs	r2, r3
   1c846:	4b22      	ldr	r3, [pc, #136]	; (1c8d0 <prvNotifyQueueSetContainer+0x174>)
   1c848:	5c9b      	ldrb	r3, [r3, r2]
   1c84a:	2b02      	cmp	r3, #2
   1c84c:	d005      	beq.n	1c85a <prvNotifyQueueSetContainer+0xfe>
   1c84e:	693b      	ldr	r3, [r7, #16]
   1c850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c852:	b2db      	uxtb	r3, r3
   1c854:	3301      	adds	r3, #1
   1c856:	b2db      	uxtb	r3, r3
   1c858:	e000      	b.n	1c85c <prvNotifyQueueSetContainer+0x100>
   1c85a:	2300      	movs	r3, #0
   1c85c:	001a      	movs	r2, r3
   1c85e:	0029      	movs	r1, r5
   1c860:	0020      	movs	r0, r4
   1c862:	4b1e      	ldr	r3, [pc, #120]	; (1c8dc <prvNotifyQueueSetContainer+0x180>)
   1c864:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1c866:	683a      	ldr	r2, [r7, #0]
   1c868:	1d39      	adds	r1, r7, #4
   1c86a:	693b      	ldr	r3, [r7, #16]
   1c86c:	0018      	movs	r0, r3
   1c86e:	4b1c      	ldr	r3, [pc, #112]	; (1c8e0 <prvNotifyQueueSetContainer+0x184>)
   1c870:	4798      	blx	r3
   1c872:	0003      	movs	r3, r0
   1c874:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1c876:	230f      	movs	r3, #15
   1c878:	18fb      	adds	r3, r7, r3
   1c87a:	781b      	ldrb	r3, [r3, #0]
   1c87c:	b25b      	sxtb	r3, r3
   1c87e:	3301      	adds	r3, #1
   1c880:	d10d      	bne.n	1c89e <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1c882:	693b      	ldr	r3, [r7, #16]
   1c884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c886:	2b00      	cmp	r3, #0
   1c888:	d012      	beq.n	1c8b0 <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1c88a:	693b      	ldr	r3, [r7, #16]
   1c88c:	3324      	adds	r3, #36	; 0x24
   1c88e:	0018      	movs	r0, r3
   1c890:	4b14      	ldr	r3, [pc, #80]	; (1c8e4 <prvNotifyQueueSetContainer+0x188>)
   1c892:	4798      	blx	r3
   1c894:	1e03      	subs	r3, r0, #0
   1c896:	d00b      	beq.n	1c8b0 <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1c898:	2301      	movs	r3, #1
   1c89a:	617b      	str	r3, [r7, #20]
   1c89c:	e008      	b.n	1c8b0 <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1c89e:	230f      	movs	r3, #15
   1c8a0:	18fb      	adds	r3, r7, r3
   1c8a2:	781b      	ldrb	r3, [r3, #0]
   1c8a4:	3301      	adds	r3, #1
   1c8a6:	b2db      	uxtb	r3, r3
   1c8a8:	b259      	sxtb	r1, r3
   1c8aa:	693b      	ldr	r3, [r7, #16]
   1c8ac:	2245      	movs	r2, #69	; 0x45
   1c8ae:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c8b0:	697b      	ldr	r3, [r7, #20]
	}
   1c8b2:	0018      	movs	r0, r3
   1c8b4:	46bd      	mov	sp, r7
   1c8b6:	b006      	add	sp, #24
   1c8b8:	bdb0      	pop	{r4, r5, r7, pc}
   1c8ba:	46c0      	nop			; (mov r8, r8)
   1c8bc:	00018f1d 	.word	0x00018f1d
   1c8c0:	00018c81 	.word	0x00018c81
   1c8c4:	20000104 	.word	0x20000104
   1c8c8:	00018d41 	.word	0x00018d41
   1c8cc:	00018c41 	.word	0x00018c41
   1c8d0:	200000f8 	.word	0x200000f8
   1c8d4:	00018d21 	.word	0x00018d21
   1c8d8:	00019679 	.word	0x00019679
   1c8dc:	00019cd5 	.word	0x00019cd5
   1c8e0:	0001c459 	.word	0x0001c459
   1c8e4:	0001d51d 	.word	0x0001d51d

0001c8e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1c8e8:	b590      	push	{r4, r7, lr}
   1c8ea:	b08d      	sub	sp, #52	; 0x34
   1c8ec:	af04      	add	r7, sp, #16
   1c8ee:	60f8      	str	r0, [r7, #12]
   1c8f0:	60b9      	str	r1, [r7, #8]
   1c8f2:	603b      	str	r3, [r7, #0]
   1c8f4:	1dbb      	adds	r3, r7, #6
   1c8f6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c8f8:	1dbb      	adds	r3, r7, #6
   1c8fa:	881b      	ldrh	r3, [r3, #0]
   1c8fc:	009b      	lsls	r3, r3, #2
   1c8fe:	0018      	movs	r0, r3
   1c900:	4b1d      	ldr	r3, [pc, #116]	; (1c978 <xTaskCreate+0x90>)
   1c902:	4798      	blx	r3
   1c904:	0003      	movs	r3, r0
   1c906:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1c908:	697b      	ldr	r3, [r7, #20]
   1c90a:	2b00      	cmp	r3, #0
   1c90c:	d010      	beq.n	1c930 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1c90e:	2054      	movs	r0, #84	; 0x54
   1c910:	4b19      	ldr	r3, [pc, #100]	; (1c978 <xTaskCreate+0x90>)
   1c912:	4798      	blx	r3
   1c914:	0003      	movs	r3, r0
   1c916:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1c918:	69fb      	ldr	r3, [r7, #28]
   1c91a:	2b00      	cmp	r3, #0
   1c91c:	d003      	beq.n	1c926 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1c91e:	69fb      	ldr	r3, [r7, #28]
   1c920:	697a      	ldr	r2, [r7, #20]
   1c922:	631a      	str	r2, [r3, #48]	; 0x30
   1c924:	e006      	b.n	1c934 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1c926:	697b      	ldr	r3, [r7, #20]
   1c928:	0018      	movs	r0, r3
   1c92a:	4b14      	ldr	r3, [pc, #80]	; (1c97c <xTaskCreate+0x94>)
   1c92c:	4798      	blx	r3
   1c92e:	e001      	b.n	1c934 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1c930:	2300      	movs	r3, #0
   1c932:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1c934:	69fb      	ldr	r3, [r7, #28]
   1c936:	2b00      	cmp	r3, #0
   1c938:	d016      	beq.n	1c968 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1c93a:	1dbb      	adds	r3, r7, #6
   1c93c:	881a      	ldrh	r2, [r3, #0]
   1c93e:	683c      	ldr	r4, [r7, #0]
   1c940:	68b9      	ldr	r1, [r7, #8]
   1c942:	68f8      	ldr	r0, [r7, #12]
   1c944:	2300      	movs	r3, #0
   1c946:	9303      	str	r3, [sp, #12]
   1c948:	69fb      	ldr	r3, [r7, #28]
   1c94a:	9302      	str	r3, [sp, #8]
   1c94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c94e:	9301      	str	r3, [sp, #4]
   1c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c952:	9300      	str	r3, [sp, #0]
   1c954:	0023      	movs	r3, r4
   1c956:	4c0a      	ldr	r4, [pc, #40]	; (1c980 <xTaskCreate+0x98>)
   1c958:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1c95a:	69fb      	ldr	r3, [r7, #28]
   1c95c:	0018      	movs	r0, r3
   1c95e:	4b09      	ldr	r3, [pc, #36]	; (1c984 <xTaskCreate+0x9c>)
   1c960:	4798      	blx	r3
			xReturn = pdPASS;
   1c962:	2301      	movs	r3, #1
   1c964:	61bb      	str	r3, [r7, #24]
   1c966:	e002      	b.n	1c96e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1c968:	2301      	movs	r3, #1
   1c96a:	425b      	negs	r3, r3
   1c96c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1c96e:	69bb      	ldr	r3, [r7, #24]
	}
   1c970:	0018      	movs	r0, r3
   1c972:	46bd      	mov	sp, r7
   1c974:	b009      	add	sp, #36	; 0x24
   1c976:	bd90      	pop	{r4, r7, pc}
   1c978:	0001adc1 	.word	0x0001adc1
   1c97c:	0001ae85 	.word	0x0001ae85
   1c980:	0001c989 	.word	0x0001c989
   1c984:	0001ca99 	.word	0x0001ca99

0001c988 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1c988:	b580      	push	{r7, lr}
   1c98a:	b086      	sub	sp, #24
   1c98c:	af00      	add	r7, sp, #0
   1c98e:	60f8      	str	r0, [r7, #12]
   1c990:	60b9      	str	r1, [r7, #8]
   1c992:	607a      	str	r2, [r7, #4]
   1c994:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1c996:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c998:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c99a:	687b      	ldr	r3, [r7, #4]
   1c99c:	009b      	lsls	r3, r3, #2
   1c99e:	001a      	movs	r2, r3
   1c9a0:	21a5      	movs	r1, #165	; 0xa5
   1c9a2:	4b39      	ldr	r3, [pc, #228]	; (1ca88 <prvInitialiseNewTask+0x100>)
   1c9a4:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1c9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c9aa:	687b      	ldr	r3, [r7, #4]
   1c9ac:	4937      	ldr	r1, [pc, #220]	; (1ca8c <prvInitialiseNewTask+0x104>)
   1c9ae:	468c      	mov	ip, r1
   1c9b0:	4463      	add	r3, ip
   1c9b2:	009b      	lsls	r3, r3, #2
   1c9b4:	18d3      	adds	r3, r2, r3
   1c9b6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1c9b8:	693b      	ldr	r3, [r7, #16]
   1c9ba:	2207      	movs	r2, #7
   1c9bc:	4393      	bics	r3, r2
   1c9be:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1c9c0:	693b      	ldr	r3, [r7, #16]
   1c9c2:	2207      	movs	r2, #7
   1c9c4:	4013      	ands	r3, r2
   1c9c6:	d001      	beq.n	1c9cc <prvInitialiseNewTask+0x44>
   1c9c8:	b672      	cpsid	i
   1c9ca:	e7fe      	b.n	1c9ca <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c9cc:	2300      	movs	r3, #0
   1c9ce:	617b      	str	r3, [r7, #20]
   1c9d0:	e013      	b.n	1c9fa <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1c9d2:	68ba      	ldr	r2, [r7, #8]
   1c9d4:	697b      	ldr	r3, [r7, #20]
   1c9d6:	18d3      	adds	r3, r2, r3
   1c9d8:	7818      	ldrb	r0, [r3, #0]
   1c9da:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c9dc:	2134      	movs	r1, #52	; 0x34
   1c9de:	697b      	ldr	r3, [r7, #20]
   1c9e0:	18d3      	adds	r3, r2, r3
   1c9e2:	185b      	adds	r3, r3, r1
   1c9e4:	1c02      	adds	r2, r0, #0
   1c9e6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1c9e8:	68ba      	ldr	r2, [r7, #8]
   1c9ea:	697b      	ldr	r3, [r7, #20]
   1c9ec:	18d3      	adds	r3, r2, r3
   1c9ee:	781b      	ldrb	r3, [r3, #0]
   1c9f0:	2b00      	cmp	r3, #0
   1c9f2:	d006      	beq.n	1ca02 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c9f4:	697b      	ldr	r3, [r7, #20]
   1c9f6:	3301      	adds	r3, #1
   1c9f8:	617b      	str	r3, [r7, #20]
   1c9fa:	697b      	ldr	r3, [r7, #20]
   1c9fc:	2b07      	cmp	r3, #7
   1c9fe:	d9e8      	bls.n	1c9d2 <prvInitialiseNewTask+0x4a>
   1ca00:	e000      	b.n	1ca04 <prvInitialiseNewTask+0x7c>
		{
			break;
   1ca02:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1ca04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca06:	223b      	movs	r2, #59	; 0x3b
   1ca08:	2100      	movs	r1, #0
   1ca0a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1ca0c:	6a3b      	ldr	r3, [r7, #32]
   1ca0e:	2b04      	cmp	r3, #4
   1ca10:	d901      	bls.n	1ca16 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1ca12:	2304      	movs	r3, #4
   1ca14:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1ca16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca18:	6a3a      	ldr	r2, [r7, #32]
   1ca1a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1ca1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca1e:	6a3a      	ldr	r2, [r7, #32]
   1ca20:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1ca22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca24:	2200      	movs	r2, #0
   1ca26:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1ca28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca2a:	3304      	adds	r3, #4
   1ca2c:	0018      	movs	r0, r3
   1ca2e:	4b18      	ldr	r3, [pc, #96]	; (1ca90 <prvInitialiseNewTask+0x108>)
   1ca30:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca34:	3318      	adds	r3, #24
   1ca36:	0018      	movs	r0, r3
   1ca38:	4b15      	ldr	r3, [pc, #84]	; (1ca90 <prvInitialiseNewTask+0x108>)
   1ca3a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1ca3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ca42:	6a3b      	ldr	r3, [r7, #32]
   1ca44:	2205      	movs	r2, #5
   1ca46:	1ad2      	subs	r2, r2, r3
   1ca48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1ca4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca50:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1ca52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca54:	2200      	movs	r2, #0
   1ca56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca5a:	2250      	movs	r2, #80	; 0x50
   1ca5c:	2100      	movs	r1, #0
   1ca5e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1ca60:	683a      	ldr	r2, [r7, #0]
   1ca62:	68f9      	ldr	r1, [r7, #12]
   1ca64:	693b      	ldr	r3, [r7, #16]
   1ca66:	0018      	movs	r0, r3
   1ca68:	4b0a      	ldr	r3, [pc, #40]	; (1ca94 <prvInitialiseNewTask+0x10c>)
   1ca6a:	4798      	blx	r3
   1ca6c:	0002      	movs	r2, r0
   1ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca70:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1ca72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ca74:	2b00      	cmp	r3, #0
   1ca76:	d002      	beq.n	1ca7e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1ca78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ca7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1ca7e:	46c0      	nop			; (mov r8, r8)
   1ca80:	46bd      	mov	sp, r7
   1ca82:	b006      	add	sp, #24
   1ca84:	bd80      	pop	{r7, pc}
   1ca86:	46c0      	nop			; (mov r8, r8)
   1ca88:	00035543 	.word	0x00035543
   1ca8c:	3fffffff 	.word	0x3fffffff
   1ca90:	0001aa35 	.word	0x0001aa35
   1ca94:	0001ab4d 	.word	0x0001ab4d

0001ca98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1ca98:	b580      	push	{r7, lr}
   1ca9a:	b082      	sub	sp, #8
   1ca9c:	af00      	add	r7, sp, #0
   1ca9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1caa0:	4b60      	ldr	r3, [pc, #384]	; (1cc24 <prvAddNewTaskToReadyList+0x18c>)
   1caa2:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1caa4:	4b60      	ldr	r3, [pc, #384]	; (1cc28 <prvAddNewTaskToReadyList+0x190>)
   1caa6:	681b      	ldr	r3, [r3, #0]
   1caa8:	1c5a      	adds	r2, r3, #1
   1caaa:	4b5f      	ldr	r3, [pc, #380]	; (1cc28 <prvAddNewTaskToReadyList+0x190>)
   1caac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1caae:	4b5f      	ldr	r3, [pc, #380]	; (1cc2c <prvAddNewTaskToReadyList+0x194>)
   1cab0:	681b      	ldr	r3, [r3, #0]
   1cab2:	2b00      	cmp	r3, #0
   1cab4:	d109      	bne.n	1caca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1cab6:	4b5d      	ldr	r3, [pc, #372]	; (1cc2c <prvAddNewTaskToReadyList+0x194>)
   1cab8:	687a      	ldr	r2, [r7, #4]
   1caba:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1cabc:	4b5a      	ldr	r3, [pc, #360]	; (1cc28 <prvAddNewTaskToReadyList+0x190>)
   1cabe:	681b      	ldr	r3, [r3, #0]
   1cac0:	2b01      	cmp	r3, #1
   1cac2:	d110      	bne.n	1cae6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1cac4:	4b5a      	ldr	r3, [pc, #360]	; (1cc30 <prvAddNewTaskToReadyList+0x198>)
   1cac6:	4798      	blx	r3
   1cac8:	e00d      	b.n	1cae6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1caca:	4b5a      	ldr	r3, [pc, #360]	; (1cc34 <prvAddNewTaskToReadyList+0x19c>)
   1cacc:	681b      	ldr	r3, [r3, #0]
   1cace:	2b00      	cmp	r3, #0
   1cad0:	d109      	bne.n	1cae6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1cad2:	4b56      	ldr	r3, [pc, #344]	; (1cc2c <prvAddNewTaskToReadyList+0x194>)
   1cad4:	681b      	ldr	r3, [r3, #0]
   1cad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cad8:	687b      	ldr	r3, [r7, #4]
   1cada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cadc:	429a      	cmp	r2, r3
   1cade:	d802      	bhi.n	1cae6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1cae0:	4b52      	ldr	r3, [pc, #328]	; (1cc2c <prvAddNewTaskToReadyList+0x194>)
   1cae2:	687a      	ldr	r2, [r7, #4]
   1cae4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1cae6:	4b54      	ldr	r3, [pc, #336]	; (1cc38 <prvAddNewTaskToReadyList+0x1a0>)
   1cae8:	681b      	ldr	r3, [r3, #0]
   1caea:	1c5a      	adds	r2, r3, #1
   1caec:	4b52      	ldr	r3, [pc, #328]	; (1cc38 <prvAddNewTaskToReadyList+0x1a0>)
   1caee:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1caf0:	4b51      	ldr	r3, [pc, #324]	; (1cc38 <prvAddNewTaskToReadyList+0x1a0>)
   1caf2:	681a      	ldr	r2, [r3, #0]
   1caf4:	687b      	ldr	r3, [r7, #4]
   1caf6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1caf8:	687b      	ldr	r3, [r7, #4]
   1cafa:	2b00      	cmp	r3, #0
   1cafc:	d052      	beq.n	1cba4 <prvAddNewTaskToReadyList+0x10c>
   1cafe:	2003      	movs	r0, #3
   1cb00:	4b4e      	ldr	r3, [pc, #312]	; (1cc3c <prvAddNewTaskToReadyList+0x1a4>)
   1cb02:	4798      	blx	r3
   1cb04:	0003      	movs	r3, r0
   1cb06:	b29a      	uxth	r2, r3
   1cb08:	687b      	ldr	r3, [r7, #4]
   1cb0a:	0011      	movs	r1, r2
   1cb0c:	0018      	movs	r0, r3
   1cb0e:	4b4c      	ldr	r3, [pc, #304]	; (1cc40 <prvAddNewTaskToReadyList+0x1a8>)
   1cb10:	4798      	blx	r3
   1cb12:	4b4c      	ldr	r3, [pc, #304]	; (1cc44 <prvAddNewTaskToReadyList+0x1ac>)
   1cb14:	881a      	ldrh	r2, [r3, #0]
   1cb16:	687b      	ldr	r3, [r7, #4]
   1cb18:	0011      	movs	r1, r2
   1cb1a:	0018      	movs	r0, r3
   1cb1c:	4b4a      	ldr	r3, [pc, #296]	; (1cc48 <prvAddNewTaskToReadyList+0x1b0>)
   1cb1e:	4798      	blx	r3
   1cb20:	687b      	ldr	r3, [r7, #4]
   1cb22:	0018      	movs	r0, r3
   1cb24:	4b49      	ldr	r3, [pc, #292]	; (1cc4c <prvAddNewTaskToReadyList+0x1b4>)
   1cb26:	4798      	blx	r3
   1cb28:	0003      	movs	r3, r0
   1cb2a:	b2d9      	uxtb	r1, r3
   1cb2c:	687b      	ldr	r3, [r7, #4]
   1cb2e:	3334      	adds	r3, #52	; 0x34
   1cb30:	001a      	movs	r2, r3
   1cb32:	2003      	movs	r0, #3
   1cb34:	4b46      	ldr	r3, [pc, #280]	; (1cc50 <prvAddNewTaskToReadyList+0x1b8>)
   1cb36:	4798      	blx	r3
   1cb38:	687b      	ldr	r3, [r7, #4]
   1cb3a:	0018      	movs	r0, r3
   1cb3c:	4b43      	ldr	r3, [pc, #268]	; (1cc4c <prvAddNewTaskToReadyList+0x1b4>)
   1cb3e:	4798      	blx	r3
   1cb40:	0003      	movs	r3, r0
   1cb42:	b2d9      	uxtb	r1, r3
   1cb44:	687b      	ldr	r3, [r7, #4]
   1cb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cb48:	b2db      	uxtb	r3, r3
   1cb4a:	001a      	movs	r2, r3
   1cb4c:	2003      	movs	r0, #3
   1cb4e:	4b41      	ldr	r3, [pc, #260]	; (1cc54 <prvAddNewTaskToReadyList+0x1bc>)
   1cb50:	4798      	blx	r3
   1cb52:	4b41      	ldr	r3, [pc, #260]	; (1cc58 <prvAddNewTaskToReadyList+0x1c0>)
   1cb54:	4798      	blx	r3
   1cb56:	0003      	movs	r3, r0
   1cb58:	0018      	movs	r0, r3
   1cb5a:	4b40      	ldr	r3, [pc, #256]	; (1cc5c <prvAddNewTaskToReadyList+0x1c4>)
   1cb5c:	4798      	blx	r3
   1cb5e:	0003      	movs	r3, r0
   1cb60:	001a      	movs	r2, r3
   1cb62:	4b3f      	ldr	r3, [pc, #252]	; (1cc60 <prvAddNewTaskToReadyList+0x1c8>)
   1cb64:	881b      	ldrh	r3, [r3, #0]
   1cb66:	4013      	ands	r3, r2
   1cb68:	b29b      	uxth	r3, r3
   1cb6a:	2b00      	cmp	r3, #0
   1cb6c:	d016      	beq.n	1cb9c <prvAddNewTaskToReadyList+0x104>
   1cb6e:	687b      	ldr	r3, [r7, #4]
   1cb70:	0018      	movs	r0, r3
   1cb72:	4b3a      	ldr	r3, [pc, #232]	; (1cc5c <prvAddNewTaskToReadyList+0x1c4>)
   1cb74:	4798      	blx	r3
   1cb76:	0003      	movs	r3, r0
   1cb78:	001a      	movs	r2, r3
   1cb7a:	4b39      	ldr	r3, [pc, #228]	; (1cc60 <prvAddNewTaskToReadyList+0x1c8>)
   1cb7c:	881b      	ldrh	r3, [r3, #0]
   1cb7e:	4013      	ands	r3, r2
   1cb80:	b29b      	uxth	r3, r3
   1cb82:	2b00      	cmp	r3, #0
   1cb84:	d00a      	beq.n	1cb9c <prvAddNewTaskToReadyList+0x104>
   1cb86:	687b      	ldr	r3, [r7, #4]
   1cb88:	0018      	movs	r0, r3
   1cb8a:	4b30      	ldr	r3, [pc, #192]	; (1cc4c <prvAddNewTaskToReadyList+0x1b4>)
   1cb8c:	4798      	blx	r3
   1cb8e:	0003      	movs	r3, r0
   1cb90:	b2db      	uxtb	r3, r3
   1cb92:	001a      	movs	r2, r3
   1cb94:	2103      	movs	r1, #3
   1cb96:	201b      	movs	r0, #27
   1cb98:	4b32      	ldr	r3, [pc, #200]	; (1cc64 <prvAddNewTaskToReadyList+0x1cc>)
   1cb9a:	4798      	blx	r3
   1cb9c:	687b      	ldr	r3, [r7, #4]
   1cb9e:	0018      	movs	r0, r3
   1cba0:	4b31      	ldr	r3, [pc, #196]	; (1cc68 <prvAddNewTaskToReadyList+0x1d0>)
   1cba2:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1cba4:	687b      	ldr	r3, [r7, #4]
   1cba6:	0018      	movs	r0, r3
   1cba8:	4b2c      	ldr	r3, [pc, #176]	; (1cc5c <prvAddNewTaskToReadyList+0x1c4>)
   1cbaa:	4798      	blx	r3
   1cbac:	0003      	movs	r3, r0
   1cbae:	001a      	movs	r2, r3
   1cbb0:	4b2b      	ldr	r3, [pc, #172]	; (1cc60 <prvAddNewTaskToReadyList+0x1c8>)
   1cbb2:	881b      	ldrh	r3, [r3, #0]
   1cbb4:	4013      	ands	r3, r2
   1cbb6:	b29b      	uxth	r3, r3
   1cbb8:	2b00      	cmp	r3, #0
   1cbba:	d008      	beq.n	1cbce <prvAddNewTaskToReadyList+0x136>
   1cbbc:	687b      	ldr	r3, [r7, #4]
   1cbbe:	0018      	movs	r0, r3
   1cbc0:	4b22      	ldr	r3, [pc, #136]	; (1cc4c <prvAddNewTaskToReadyList+0x1b4>)
   1cbc2:	4798      	blx	r3
   1cbc4:	0003      	movs	r3, r0
   1cbc6:	b2db      	uxtb	r3, r3
   1cbc8:	0018      	movs	r0, r3
   1cbca:	4b28      	ldr	r3, [pc, #160]	; (1cc6c <prvAddNewTaskToReadyList+0x1d4>)
   1cbcc:	4798      	blx	r3
   1cbce:	687b      	ldr	r3, [r7, #4]
   1cbd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbd2:	4b27      	ldr	r3, [pc, #156]	; (1cc70 <prvAddNewTaskToReadyList+0x1d8>)
   1cbd4:	681b      	ldr	r3, [r3, #0]
   1cbd6:	429a      	cmp	r2, r3
   1cbd8:	d903      	bls.n	1cbe2 <prvAddNewTaskToReadyList+0x14a>
   1cbda:	687b      	ldr	r3, [r7, #4]
   1cbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbde:	4b24      	ldr	r3, [pc, #144]	; (1cc70 <prvAddNewTaskToReadyList+0x1d8>)
   1cbe0:	601a      	str	r2, [r3, #0]
   1cbe2:	687b      	ldr	r3, [r7, #4]
   1cbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbe6:	0013      	movs	r3, r2
   1cbe8:	009b      	lsls	r3, r3, #2
   1cbea:	189b      	adds	r3, r3, r2
   1cbec:	009b      	lsls	r3, r3, #2
   1cbee:	4a21      	ldr	r2, [pc, #132]	; (1cc74 <prvAddNewTaskToReadyList+0x1dc>)
   1cbf0:	189a      	adds	r2, r3, r2
   1cbf2:	687b      	ldr	r3, [r7, #4]
   1cbf4:	3304      	adds	r3, #4
   1cbf6:	0019      	movs	r1, r3
   1cbf8:	0010      	movs	r0, r2
   1cbfa:	4b1f      	ldr	r3, [pc, #124]	; (1cc78 <prvAddNewTaskToReadyList+0x1e0>)
   1cbfc:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1cbfe:	4b1f      	ldr	r3, [pc, #124]	; (1cc7c <prvAddNewTaskToReadyList+0x1e4>)
   1cc00:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1cc02:	4b0c      	ldr	r3, [pc, #48]	; (1cc34 <prvAddNewTaskToReadyList+0x19c>)
   1cc04:	681b      	ldr	r3, [r3, #0]
   1cc06:	2b00      	cmp	r3, #0
   1cc08:	d008      	beq.n	1cc1c <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1cc0a:	4b08      	ldr	r3, [pc, #32]	; (1cc2c <prvAddNewTaskToReadyList+0x194>)
   1cc0c:	681b      	ldr	r3, [r3, #0]
   1cc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc10:	687b      	ldr	r3, [r7, #4]
   1cc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc14:	429a      	cmp	r2, r3
   1cc16:	d201      	bcs.n	1cc1c <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1cc18:	4b19      	ldr	r3, [pc, #100]	; (1cc80 <prvAddNewTaskToReadyList+0x1e8>)
   1cc1a:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1cc1c:	46c0      	nop			; (mov r8, r8)
   1cc1e:	46bd      	mov	sp, r7
   1cc20:	b002      	add	sp, #8
   1cc22:	bd80      	pop	{r7, pc}
   1cc24:	0001ac89 	.word	0x0001ac89
   1cc28:	20003dec 	.word	0x20003dec
   1cc2c:	20003d14 	.word	0x20003d14
   1cc30:	0001d7b9 	.word	0x0001d7b9
   1cc34:	20003df8 	.word	0x20003df8
   1cc38:	20003e08 	.word	0x20003e08
   1cc3c:	0001a201 	.word	0x0001a201
   1cc40:	00018ca5 	.word	0x00018ca5
   1cc44:	20000106 	.word	0x20000106
   1cc48:	00018ce1 	.word	0x00018ce1
   1cc4c:	00018c61 	.word	0x00018c61
   1cc50:	0001a431 	.word	0x0001a431
   1cc54:	00019b95 	.word	0x00019b95
   1cc58:	00018f1d 	.word	0x00018f1d
   1cc5c:	00018c81 	.word	0x00018c81
   1cc60:	20000104 	.word	0x20000104
   1cc64:	00019679 	.word	0x00019679
   1cc68:	00018de1 	.word	0x00018de1
   1cc6c:	00019431 	.word	0x00019431
   1cc70:	20003df4 	.word	0x20003df4
   1cc74:	20003d18 	.word	0x20003d18
   1cc78:	0001aa4b 	.word	0x0001aa4b
   1cc7c:	0001acad 	.word	0x0001acad
   1cc80:	0001ac71 	.word	0x0001ac71

0001cc84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1cc84:	b580      	push	{r7, lr}
   1cc86:	b084      	sub	sp, #16
   1cc88:	af00      	add	r7, sp, #0
   1cc8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1cc8c:	2300      	movs	r3, #0
   1cc8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1cc90:	687b      	ldr	r3, [r7, #4]
   1cc92:	2b00      	cmp	r3, #0
   1cc94:	d045      	beq.n	1cd22 <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1cc96:	4b27      	ldr	r3, [pc, #156]	; (1cd34 <vTaskDelay+0xb0>)
   1cc98:	681b      	ldr	r3, [r3, #0]
   1cc9a:	2b00      	cmp	r3, #0
   1cc9c:	d001      	beq.n	1cca2 <vTaskDelay+0x1e>
   1cc9e:	b672      	cpsid	i
   1cca0:	e7fe      	b.n	1cca0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1cca2:	4b25      	ldr	r3, [pc, #148]	; (1cd38 <vTaskDelay+0xb4>)
   1cca4:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1cca6:	4b25      	ldr	r3, [pc, #148]	; (1cd3c <vTaskDelay+0xb8>)
   1cca8:	681b      	ldr	r3, [r3, #0]
   1ccaa:	0018      	movs	r0, r3
   1ccac:	4b24      	ldr	r3, [pc, #144]	; (1cd40 <vTaskDelay+0xbc>)
   1ccae:	4798      	blx	r3
   1ccb0:	0003      	movs	r3, r0
   1ccb2:	001a      	movs	r2, r3
   1ccb4:	4b23      	ldr	r3, [pc, #140]	; (1cd44 <vTaskDelay+0xc0>)
   1ccb6:	881b      	ldrh	r3, [r3, #0]
   1ccb8:	4013      	ands	r3, r2
   1ccba:	b29b      	uxth	r3, r3
   1ccbc:	2b00      	cmp	r3, #0
   1ccbe:	d00e      	beq.n	1ccde <vTaskDelay+0x5a>
   1ccc0:	687b      	ldr	r3, [r7, #4]
   1ccc2:	0019      	movs	r1, r3
   1ccc4:	2089      	movs	r0, #137	; 0x89
   1ccc6:	4b20      	ldr	r3, [pc, #128]	; (1cd48 <vTaskDelay+0xc4>)
   1ccc8:	4798      	blx	r3
   1ccca:	4b1c      	ldr	r3, [pc, #112]	; (1cd3c <vTaskDelay+0xb8>)
   1cccc:	681b      	ldr	r3, [r3, #0]
   1ccce:	0018      	movs	r0, r3
   1ccd0:	4b1e      	ldr	r3, [pc, #120]	; (1cd4c <vTaskDelay+0xc8>)
   1ccd2:	4798      	blx	r3
   1ccd4:	0003      	movs	r3, r0
   1ccd6:	b2db      	uxtb	r3, r3
   1ccd8:	0018      	movs	r0, r3
   1ccda:	4b1d      	ldr	r3, [pc, #116]	; (1cd50 <vTaskDelay+0xcc>)
   1ccdc:	4798      	blx	r3
   1ccde:	4b1d      	ldr	r3, [pc, #116]	; (1cd54 <vTaskDelay+0xd0>)
   1cce0:	4798      	blx	r3
   1cce2:	0003      	movs	r3, r0
   1cce4:	0018      	movs	r0, r3
   1cce6:	4b16      	ldr	r3, [pc, #88]	; (1cd40 <vTaskDelay+0xbc>)
   1cce8:	4798      	blx	r3
   1ccea:	0003      	movs	r3, r0
   1ccec:	001a      	movs	r2, r3
   1ccee:	4b15      	ldr	r3, [pc, #84]	; (1cd44 <vTaskDelay+0xc0>)
   1ccf0:	881b      	ldrh	r3, [r3, #0]
   1ccf2:	4013      	ands	r3, r2
   1ccf4:	b29b      	uxth	r3, r3
   1ccf6:	2b00      	cmp	r3, #0
   1ccf8:	d00a      	beq.n	1cd10 <vTaskDelay+0x8c>
   1ccfa:	4b16      	ldr	r3, [pc, #88]	; (1cd54 <vTaskDelay+0xd0>)
   1ccfc:	4798      	blx	r3
   1ccfe:	0003      	movs	r3, r0
   1cd00:	0018      	movs	r0, r3
   1cd02:	4b12      	ldr	r3, [pc, #72]	; (1cd4c <vTaskDelay+0xc8>)
   1cd04:	4798      	blx	r3
   1cd06:	0003      	movs	r3, r0
   1cd08:	b2db      	uxtb	r3, r3
   1cd0a:	0018      	movs	r0, r3
   1cd0c:	4b10      	ldr	r3, [pc, #64]	; (1cd50 <vTaskDelay+0xcc>)
   1cd0e:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1cd10:	687b      	ldr	r3, [r7, #4]
   1cd12:	2100      	movs	r1, #0
   1cd14:	0018      	movs	r0, r3
   1cd16:	4b10      	ldr	r3, [pc, #64]	; (1cd58 <vTaskDelay+0xd4>)
   1cd18:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1cd1a:	4b10      	ldr	r3, [pc, #64]	; (1cd5c <vTaskDelay+0xd8>)
   1cd1c:	4798      	blx	r3
   1cd1e:	0003      	movs	r3, r0
   1cd20:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1cd22:	68fb      	ldr	r3, [r7, #12]
   1cd24:	2b00      	cmp	r3, #0
   1cd26:	d101      	bne.n	1cd2c <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1cd28:	4b0d      	ldr	r3, [pc, #52]	; (1cd60 <vTaskDelay+0xdc>)
   1cd2a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1cd2c:	46c0      	nop			; (mov r8, r8)
   1cd2e:	46bd      	mov	sp, r7
   1cd30:	b004      	add	sp, #16
   1cd32:	bd80      	pop	{r7, pc}
   1cd34:	20003e14 	.word	0x20003e14
   1cd38:	0001cf45 	.word	0x0001cf45
   1cd3c:	20003d14 	.word	0x20003d14
   1cd40:	00018c81 	.word	0x00018c81
   1cd44:	20000104 	.word	0x20000104
   1cd48:	00019981 	.word	0x00019981
   1cd4c:	00018c61 	.word	0x00018c61
   1cd50:	00019e11 	.word	0x00019e11
   1cd54:	00018f1d 	.word	0x00018f1d
   1cd58:	0001de9d 	.word	0x0001de9d
   1cd5c:	0001cf5d 	.word	0x0001cf5d
   1cd60:	0001ac71 	.word	0x0001ac71

0001cd64 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1cd64:	b580      	push	{r7, lr}
   1cd66:	b084      	sub	sp, #16
   1cd68:	af00      	add	r7, sp, #0
   1cd6a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1cd6c:	4b42      	ldr	r3, [pc, #264]	; (1ce78 <vTaskSuspend+0x114>)
   1cd6e:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1cd70:	687b      	ldr	r3, [r7, #4]
   1cd72:	2b00      	cmp	r3, #0
   1cd74:	d102      	bne.n	1cd7c <vTaskSuspend+0x18>
   1cd76:	4b41      	ldr	r3, [pc, #260]	; (1ce7c <vTaskSuspend+0x118>)
   1cd78:	681b      	ldr	r3, [r3, #0]
   1cd7a:	e000      	b.n	1cd7e <vTaskSuspend+0x1a>
   1cd7c:	687b      	ldr	r3, [r7, #4]
   1cd7e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1cd80:	4b3f      	ldr	r3, [pc, #252]	; (1ce80 <vTaskSuspend+0x11c>)
   1cd82:	4798      	blx	r3
   1cd84:	0003      	movs	r3, r0
   1cd86:	0018      	movs	r0, r3
   1cd88:	4b3e      	ldr	r3, [pc, #248]	; (1ce84 <vTaskSuspend+0x120>)
   1cd8a:	4798      	blx	r3
   1cd8c:	0003      	movs	r3, r0
   1cd8e:	001a      	movs	r2, r3
   1cd90:	4b3d      	ldr	r3, [pc, #244]	; (1ce88 <vTaskSuspend+0x124>)
   1cd92:	881b      	ldrh	r3, [r3, #0]
   1cd94:	4013      	ands	r3, r2
   1cd96:	b29b      	uxth	r3, r3
   1cd98:	2b00      	cmp	r3, #0
   1cd9a:	d016      	beq.n	1cdca <vTaskSuspend+0x66>
   1cd9c:	68fb      	ldr	r3, [r7, #12]
   1cd9e:	0018      	movs	r0, r3
   1cda0:	4b38      	ldr	r3, [pc, #224]	; (1ce84 <vTaskSuspend+0x120>)
   1cda2:	4798      	blx	r3
   1cda4:	0003      	movs	r3, r0
   1cda6:	001a      	movs	r2, r3
   1cda8:	4b37      	ldr	r3, [pc, #220]	; (1ce88 <vTaskSuspend+0x124>)
   1cdaa:	881b      	ldrh	r3, [r3, #0]
   1cdac:	4013      	ands	r3, r2
   1cdae:	b29b      	uxth	r3, r3
   1cdb0:	2b00      	cmp	r3, #0
   1cdb2:	d00a      	beq.n	1cdca <vTaskSuspend+0x66>
   1cdb4:	68fb      	ldr	r3, [r7, #12]
   1cdb6:	0018      	movs	r0, r3
   1cdb8:	4b34      	ldr	r3, [pc, #208]	; (1ce8c <vTaskSuspend+0x128>)
   1cdba:	4798      	blx	r3
   1cdbc:	0003      	movs	r3, r0
   1cdbe:	b2db      	uxtb	r3, r3
   1cdc0:	001a      	movs	r2, r3
   1cdc2:	2103      	movs	r1, #3
   1cdc4:	208a      	movs	r0, #138	; 0x8a
   1cdc6:	4b32      	ldr	r3, [pc, #200]	; (1ce90 <vTaskSuspend+0x12c>)
   1cdc8:	4798      	blx	r3
   1cdca:	68fb      	ldr	r3, [r7, #12]
   1cdcc:	0018      	movs	r0, r3
   1cdce:	4b2f      	ldr	r3, [pc, #188]	; (1ce8c <vTaskSuspend+0x128>)
   1cdd0:	4798      	blx	r3
   1cdd2:	0003      	movs	r3, r0
   1cdd4:	b2db      	uxtb	r3, r3
   1cdd6:	0018      	movs	r0, r3
   1cdd8:	4b2e      	ldr	r3, [pc, #184]	; (1ce94 <vTaskSuspend+0x130>)
   1cdda:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cddc:	68fb      	ldr	r3, [r7, #12]
   1cdde:	3304      	adds	r3, #4
   1cde0:	0018      	movs	r0, r3
   1cde2:	4b2d      	ldr	r3, [pc, #180]	; (1ce98 <vTaskSuspend+0x134>)
   1cde4:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1cde6:	68fb      	ldr	r3, [r7, #12]
   1cde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cdea:	2b00      	cmp	r3, #0
   1cdec:	d004      	beq.n	1cdf8 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cdee:	68fb      	ldr	r3, [r7, #12]
   1cdf0:	3318      	adds	r3, #24
   1cdf2:	0018      	movs	r0, r3
   1cdf4:	4b28      	ldr	r3, [pc, #160]	; (1ce98 <vTaskSuspend+0x134>)
   1cdf6:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1cdf8:	68fb      	ldr	r3, [r7, #12]
   1cdfa:	1d1a      	adds	r2, r3, #4
   1cdfc:	4b27      	ldr	r3, [pc, #156]	; (1ce9c <vTaskSuspend+0x138>)
   1cdfe:	0011      	movs	r1, r2
   1ce00:	0018      	movs	r0, r3
   1ce02:	4b27      	ldr	r3, [pc, #156]	; (1cea0 <vTaskSuspend+0x13c>)
   1ce04:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1ce06:	68fb      	ldr	r3, [r7, #12]
   1ce08:	2250      	movs	r2, #80	; 0x50
   1ce0a:	5c9b      	ldrb	r3, [r3, r2]
   1ce0c:	b2db      	uxtb	r3, r3
   1ce0e:	2b01      	cmp	r3, #1
   1ce10:	d103      	bne.n	1ce1a <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1ce12:	68fb      	ldr	r3, [r7, #12]
   1ce14:	2250      	movs	r2, #80	; 0x50
   1ce16:	2100      	movs	r1, #0
   1ce18:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1ce1a:	4b22      	ldr	r3, [pc, #136]	; (1cea4 <vTaskSuspend+0x140>)
   1ce1c:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1ce1e:	4b22      	ldr	r3, [pc, #136]	; (1cea8 <vTaskSuspend+0x144>)
   1ce20:	681b      	ldr	r3, [r3, #0]
   1ce22:	2b00      	cmp	r3, #0
   1ce24:	d005      	beq.n	1ce32 <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1ce26:	4b14      	ldr	r3, [pc, #80]	; (1ce78 <vTaskSuspend+0x114>)
   1ce28:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1ce2a:	4b20      	ldr	r3, [pc, #128]	; (1ceac <vTaskSuspend+0x148>)
   1ce2c:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1ce2e:	4b1d      	ldr	r3, [pc, #116]	; (1cea4 <vTaskSuspend+0x140>)
   1ce30:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1ce32:	4b12      	ldr	r3, [pc, #72]	; (1ce7c <vTaskSuspend+0x118>)
   1ce34:	681b      	ldr	r3, [r3, #0]
   1ce36:	68fa      	ldr	r2, [r7, #12]
   1ce38:	429a      	cmp	r2, r3
   1ce3a:	d118      	bne.n	1ce6e <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1ce3c:	4b1a      	ldr	r3, [pc, #104]	; (1cea8 <vTaskSuspend+0x144>)
   1ce3e:	681b      	ldr	r3, [r3, #0]
   1ce40:	2b00      	cmp	r3, #0
   1ce42:	d008      	beq.n	1ce56 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1ce44:	4b1a      	ldr	r3, [pc, #104]	; (1ceb0 <vTaskSuspend+0x14c>)
   1ce46:	681b      	ldr	r3, [r3, #0]
   1ce48:	2b00      	cmp	r3, #0
   1ce4a:	d001      	beq.n	1ce50 <vTaskSuspend+0xec>
   1ce4c:	b672      	cpsid	i
   1ce4e:	e7fe      	b.n	1ce4e <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1ce50:	4b18      	ldr	r3, [pc, #96]	; (1ceb4 <vTaskSuspend+0x150>)
   1ce52:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ce54:	e00b      	b.n	1ce6e <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1ce56:	4b11      	ldr	r3, [pc, #68]	; (1ce9c <vTaskSuspend+0x138>)
   1ce58:	681a      	ldr	r2, [r3, #0]
   1ce5a:	4b17      	ldr	r3, [pc, #92]	; (1ceb8 <vTaskSuspend+0x154>)
   1ce5c:	681b      	ldr	r3, [r3, #0]
   1ce5e:	429a      	cmp	r2, r3
   1ce60:	d103      	bne.n	1ce6a <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1ce62:	4b06      	ldr	r3, [pc, #24]	; (1ce7c <vTaskSuspend+0x118>)
   1ce64:	2200      	movs	r2, #0
   1ce66:	601a      	str	r2, [r3, #0]
	}
   1ce68:	e001      	b.n	1ce6e <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1ce6a:	4b14      	ldr	r3, [pc, #80]	; (1cebc <vTaskSuspend+0x158>)
   1ce6c:	4798      	blx	r3
	}
   1ce6e:	46c0      	nop			; (mov r8, r8)
   1ce70:	46bd      	mov	sp, r7
   1ce72:	b004      	add	sp, #16
   1ce74:	bd80      	pop	{r7, pc}
   1ce76:	46c0      	nop			; (mov r8, r8)
   1ce78:	0001ac89 	.word	0x0001ac89
   1ce7c:	20003d14 	.word	0x20003d14
   1ce80:	00018f1d 	.word	0x00018f1d
   1ce84:	00018c81 	.word	0x00018c81
   1ce88:	20000104 	.word	0x20000104
   1ce8c:	00018c61 	.word	0x00018c61
   1ce90:	00019679 	.word	0x00019679
   1ce94:	00019e11 	.word	0x00019e11
   1ce98:	0001aafb 	.word	0x0001aafb
   1ce9c:	20003dd8 	.word	0x20003dd8
   1cea0:	0001aa4b 	.word	0x0001aa4b
   1cea4:	0001acad 	.word	0x0001acad
   1cea8:	20003df8 	.word	0x20003df8
   1ceac:	0001d949 	.word	0x0001d949
   1ceb0:	20003e14 	.word	0x20003e14
   1ceb4:	0001ac71 	.word	0x0001ac71
   1ceb8:	20003dec 	.word	0x20003dec
   1cebc:	0001d2d9 	.word	0x0001d2d9

0001cec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1cec0:	b590      	push	{r4, r7, lr}
   1cec2:	b085      	sub	sp, #20
   1cec4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1cec6:	4916      	ldr	r1, [pc, #88]	; (1cf20 <vTaskStartScheduler+0x60>)
   1cec8:	4816      	ldr	r0, [pc, #88]	; (1cf24 <vTaskStartScheduler+0x64>)
   1ceca:	4b17      	ldr	r3, [pc, #92]	; (1cf28 <vTaskStartScheduler+0x68>)
   1cecc:	9301      	str	r3, [sp, #4]
   1cece:	2300      	movs	r3, #0
   1ced0:	9300      	str	r3, [sp, #0]
   1ced2:	2300      	movs	r3, #0
   1ced4:	2264      	movs	r2, #100	; 0x64
   1ced6:	4c15      	ldr	r4, [pc, #84]	; (1cf2c <vTaskStartScheduler+0x6c>)
   1ced8:	47a0      	blx	r4
   1ceda:	0003      	movs	r3, r0
   1cedc:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1cede:	687b      	ldr	r3, [r7, #4]
   1cee0:	2b01      	cmp	r3, #1
   1cee2:	d103      	bne.n	1ceec <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1cee4:	4b12      	ldr	r3, [pc, #72]	; (1cf30 <vTaskStartScheduler+0x70>)
   1cee6:	4798      	blx	r3
   1cee8:	0003      	movs	r3, r0
   1ceea:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1ceec:	687b      	ldr	r3, [r7, #4]
   1ceee:	2b01      	cmp	r3, #1
   1cef0:	d10d      	bne.n	1cf0e <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1cef2:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1cef4:	4b0f      	ldr	r3, [pc, #60]	; (1cf34 <vTaskStartScheduler+0x74>)
   1cef6:	2201      	movs	r2, #1
   1cef8:	4252      	negs	r2, r2
   1cefa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1cefc:	4b0e      	ldr	r3, [pc, #56]	; (1cf38 <vTaskStartScheduler+0x78>)
   1cefe:	2201      	movs	r2, #1
   1cf00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1cf02:	4b0e      	ldr	r3, [pc, #56]	; (1cf3c <vTaskStartScheduler+0x7c>)
   1cf04:	2200      	movs	r2, #0
   1cf06:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1cf08:	4b0d      	ldr	r3, [pc, #52]	; (1cf40 <vTaskStartScheduler+0x80>)
   1cf0a:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1cf0c:	e004      	b.n	1cf18 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1cf0e:	687b      	ldr	r3, [r7, #4]
   1cf10:	3301      	adds	r3, #1
   1cf12:	d101      	bne.n	1cf18 <vTaskStartScheduler+0x58>
   1cf14:	b672      	cpsid	i
   1cf16:	e7fe      	b.n	1cf16 <vTaskStartScheduler+0x56>
}
   1cf18:	46c0      	nop			; (mov r8, r8)
   1cf1a:	46bd      	mov	sp, r7
   1cf1c:	b003      	add	sp, #12
   1cf1e:	bd90      	pop	{r4, r7, pc}
   1cf20:	00038dbc 	.word	0x00038dbc
   1cf24:	0001d791 	.word	0x0001d791
   1cf28:	20003e10 	.word	0x20003e10
   1cf2c:	0001c8e9 	.word	0x0001c8e9
   1cf30:	0001df51 	.word	0x0001df51
   1cf34:	20003e0c 	.word	0x20003e0c
   1cf38:	20003df8 	.word	0x20003df8
   1cf3c:	20003df0 	.word	0x20003df0
   1cf40:	0001ac19 	.word	0x0001ac19

0001cf44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1cf44:	b580      	push	{r7, lr}
   1cf46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1cf48:	4b03      	ldr	r3, [pc, #12]	; (1cf58 <vTaskSuspendAll+0x14>)
   1cf4a:	681b      	ldr	r3, [r3, #0]
   1cf4c:	1c5a      	adds	r2, r3, #1
   1cf4e:	4b02      	ldr	r3, [pc, #8]	; (1cf58 <vTaskSuspendAll+0x14>)
   1cf50:	601a      	str	r2, [r3, #0]
}
   1cf52:	46c0      	nop			; (mov r8, r8)
   1cf54:	46bd      	mov	sp, r7
   1cf56:	bd80      	pop	{r7, pc}
   1cf58:	20003e14 	.word	0x20003e14

0001cf5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1cf5c:	b580      	push	{r7, lr}
   1cf5e:	b084      	sub	sp, #16
   1cf60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1cf62:	2300      	movs	r3, #0
   1cf64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1cf66:	2300      	movs	r3, #0
   1cf68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1cf6a:	4b45      	ldr	r3, [pc, #276]	; (1d080 <xTaskResumeAll+0x124>)
   1cf6c:	681b      	ldr	r3, [r3, #0]
   1cf6e:	2b00      	cmp	r3, #0
   1cf70:	d101      	bne.n	1cf76 <xTaskResumeAll+0x1a>
   1cf72:	b672      	cpsid	i
   1cf74:	e7fe      	b.n	1cf74 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1cf76:	4b43      	ldr	r3, [pc, #268]	; (1d084 <xTaskResumeAll+0x128>)
   1cf78:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1cf7a:	4b41      	ldr	r3, [pc, #260]	; (1d080 <xTaskResumeAll+0x124>)
   1cf7c:	681b      	ldr	r3, [r3, #0]
   1cf7e:	1e5a      	subs	r2, r3, #1
   1cf80:	4b3f      	ldr	r3, [pc, #252]	; (1d080 <xTaskResumeAll+0x124>)
   1cf82:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cf84:	4b3e      	ldr	r3, [pc, #248]	; (1d080 <xTaskResumeAll+0x124>)
   1cf86:	681b      	ldr	r3, [r3, #0]
   1cf88:	2b00      	cmp	r3, #0
   1cf8a:	d000      	beq.n	1cf8e <xTaskResumeAll+0x32>
   1cf8c:	e071      	b.n	1d072 <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1cf8e:	4b3e      	ldr	r3, [pc, #248]	; (1d088 <xTaskResumeAll+0x12c>)
   1cf90:	681b      	ldr	r3, [r3, #0]
   1cf92:	2b00      	cmp	r3, #0
   1cf94:	d100      	bne.n	1cf98 <xTaskResumeAll+0x3c>
   1cf96:	e06c      	b.n	1d072 <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1cf98:	e044      	b.n	1d024 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1cf9a:	4b3c      	ldr	r3, [pc, #240]	; (1d08c <xTaskResumeAll+0x130>)
   1cf9c:	68db      	ldr	r3, [r3, #12]
   1cf9e:	68db      	ldr	r3, [r3, #12]
   1cfa0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cfa2:	68fb      	ldr	r3, [r7, #12]
   1cfa4:	3318      	adds	r3, #24
   1cfa6:	0018      	movs	r0, r3
   1cfa8:	4b39      	ldr	r3, [pc, #228]	; (1d090 <xTaskResumeAll+0x134>)
   1cfaa:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cfac:	68fb      	ldr	r3, [r7, #12]
   1cfae:	3304      	adds	r3, #4
   1cfb0:	0018      	movs	r0, r3
   1cfb2:	4b37      	ldr	r3, [pc, #220]	; (1d090 <xTaskResumeAll+0x134>)
   1cfb4:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1cfb6:	68fb      	ldr	r3, [r7, #12]
   1cfb8:	0018      	movs	r0, r3
   1cfba:	4b36      	ldr	r3, [pc, #216]	; (1d094 <xTaskResumeAll+0x138>)
   1cfbc:	4798      	blx	r3
   1cfbe:	0003      	movs	r3, r0
   1cfc0:	001a      	movs	r2, r3
   1cfc2:	4b35      	ldr	r3, [pc, #212]	; (1d098 <xTaskResumeAll+0x13c>)
   1cfc4:	881b      	ldrh	r3, [r3, #0]
   1cfc6:	4013      	ands	r3, r2
   1cfc8:	b29b      	uxth	r3, r3
   1cfca:	2b00      	cmp	r3, #0
   1cfcc:	d008      	beq.n	1cfe0 <xTaskResumeAll+0x84>
   1cfce:	68fb      	ldr	r3, [r7, #12]
   1cfd0:	0018      	movs	r0, r3
   1cfd2:	4b32      	ldr	r3, [pc, #200]	; (1d09c <xTaskResumeAll+0x140>)
   1cfd4:	4798      	blx	r3
   1cfd6:	0003      	movs	r3, r0
   1cfd8:	b2db      	uxtb	r3, r3
   1cfda:	0018      	movs	r0, r3
   1cfdc:	4b30      	ldr	r3, [pc, #192]	; (1d0a0 <xTaskResumeAll+0x144>)
   1cfde:	4798      	blx	r3
   1cfe0:	68fb      	ldr	r3, [r7, #12]
   1cfe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfe4:	4b2f      	ldr	r3, [pc, #188]	; (1d0a4 <xTaskResumeAll+0x148>)
   1cfe6:	681b      	ldr	r3, [r3, #0]
   1cfe8:	429a      	cmp	r2, r3
   1cfea:	d903      	bls.n	1cff4 <xTaskResumeAll+0x98>
   1cfec:	68fb      	ldr	r3, [r7, #12]
   1cfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cff0:	4b2c      	ldr	r3, [pc, #176]	; (1d0a4 <xTaskResumeAll+0x148>)
   1cff2:	601a      	str	r2, [r3, #0]
   1cff4:	68fb      	ldr	r3, [r7, #12]
   1cff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cff8:	0013      	movs	r3, r2
   1cffa:	009b      	lsls	r3, r3, #2
   1cffc:	189b      	adds	r3, r3, r2
   1cffe:	009b      	lsls	r3, r3, #2
   1d000:	4a29      	ldr	r2, [pc, #164]	; (1d0a8 <xTaskResumeAll+0x14c>)
   1d002:	189a      	adds	r2, r3, r2
   1d004:	68fb      	ldr	r3, [r7, #12]
   1d006:	3304      	adds	r3, #4
   1d008:	0019      	movs	r1, r3
   1d00a:	0010      	movs	r0, r2
   1d00c:	4b27      	ldr	r3, [pc, #156]	; (1d0ac <xTaskResumeAll+0x150>)
   1d00e:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d010:	68fb      	ldr	r3, [r7, #12]
   1d012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d014:	4b26      	ldr	r3, [pc, #152]	; (1d0b0 <xTaskResumeAll+0x154>)
   1d016:	681b      	ldr	r3, [r3, #0]
   1d018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d01a:	429a      	cmp	r2, r3
   1d01c:	d302      	bcc.n	1d024 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1d01e:	4b25      	ldr	r3, [pc, #148]	; (1d0b4 <xTaskResumeAll+0x158>)
   1d020:	2201      	movs	r2, #1
   1d022:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1d024:	4b19      	ldr	r3, [pc, #100]	; (1d08c <xTaskResumeAll+0x130>)
   1d026:	681b      	ldr	r3, [r3, #0]
   1d028:	2b00      	cmp	r3, #0
   1d02a:	d1b6      	bne.n	1cf9a <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1d02c:	68fb      	ldr	r3, [r7, #12]
   1d02e:	2b00      	cmp	r3, #0
   1d030:	d001      	beq.n	1d036 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1d032:	4b21      	ldr	r3, [pc, #132]	; (1d0b8 <xTaskResumeAll+0x15c>)
   1d034:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1d036:	4b21      	ldr	r3, [pc, #132]	; (1d0bc <xTaskResumeAll+0x160>)
   1d038:	681b      	ldr	r3, [r3, #0]
   1d03a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1d03c:	687b      	ldr	r3, [r7, #4]
   1d03e:	2b00      	cmp	r3, #0
   1d040:	d00f      	beq.n	1d062 <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1d042:	4b1f      	ldr	r3, [pc, #124]	; (1d0c0 <xTaskResumeAll+0x164>)
   1d044:	4798      	blx	r3
   1d046:	1e03      	subs	r3, r0, #0
   1d048:	d002      	beq.n	1d050 <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1d04a:	4b1a      	ldr	r3, [pc, #104]	; (1d0b4 <xTaskResumeAll+0x158>)
   1d04c:	2201      	movs	r2, #1
   1d04e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1d050:	687b      	ldr	r3, [r7, #4]
   1d052:	3b01      	subs	r3, #1
   1d054:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1d056:	687b      	ldr	r3, [r7, #4]
   1d058:	2b00      	cmp	r3, #0
   1d05a:	d1f2      	bne.n	1d042 <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1d05c:	4b17      	ldr	r3, [pc, #92]	; (1d0bc <xTaskResumeAll+0x160>)
   1d05e:	2200      	movs	r2, #0
   1d060:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1d062:	4b14      	ldr	r3, [pc, #80]	; (1d0b4 <xTaskResumeAll+0x158>)
   1d064:	681b      	ldr	r3, [r3, #0]
   1d066:	2b00      	cmp	r3, #0
   1d068:	d003      	beq.n	1d072 <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1d06a:	2301      	movs	r3, #1
   1d06c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1d06e:	4b15      	ldr	r3, [pc, #84]	; (1d0c4 <xTaskResumeAll+0x168>)
   1d070:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d072:	4b15      	ldr	r3, [pc, #84]	; (1d0c8 <xTaskResumeAll+0x16c>)
   1d074:	4798      	blx	r3

	return xAlreadyYielded;
   1d076:	68bb      	ldr	r3, [r7, #8]
}
   1d078:	0018      	movs	r0, r3
   1d07a:	46bd      	mov	sp, r7
   1d07c:	b004      	add	sp, #16
   1d07e:	bd80      	pop	{r7, pc}
   1d080:	20003e14 	.word	0x20003e14
   1d084:	0001ac89 	.word	0x0001ac89
   1d088:	20003dec 	.word	0x20003dec
   1d08c:	20003dac 	.word	0x20003dac
   1d090:	0001aafb 	.word	0x0001aafb
   1d094:	00018c81 	.word	0x00018c81
   1d098:	20000104 	.word	0x20000104
   1d09c:	00018c61 	.word	0x00018c61
   1d0a0:	00019431 	.word	0x00019431
   1d0a4:	20003df4 	.word	0x20003df4
   1d0a8:	20003d18 	.word	0x20003d18
   1d0ac:	0001aa4b 	.word	0x0001aa4b
   1d0b0:	20003d14 	.word	0x20003d14
   1d0b4:	20003e00 	.word	0x20003e00
   1d0b8:	0001d949 	.word	0x0001d949
   1d0bc:	20003dfc 	.word	0x20003dfc
   1d0c0:	0001d0e9 	.word	0x0001d0e9
   1d0c4:	0001ac71 	.word	0x0001ac71
   1d0c8:	0001acad 	.word	0x0001acad

0001d0cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1d0cc:	b580      	push	{r7, lr}
   1d0ce:	b082      	sub	sp, #8
   1d0d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1d0d2:	4b04      	ldr	r3, [pc, #16]	; (1d0e4 <xTaskGetTickCount+0x18>)
   1d0d4:	681b      	ldr	r3, [r3, #0]
   1d0d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1d0d8:	687b      	ldr	r3, [r7, #4]
}
   1d0da:	0018      	movs	r0, r3
   1d0dc:	46bd      	mov	sp, r7
   1d0de:	b002      	add	sp, #8
   1d0e0:	bd80      	pop	{r7, pc}
   1d0e2:	46c0      	nop			; (mov r8, r8)
   1d0e4:	20003df0 	.word	0x20003df0

0001d0e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1d0e8:	b580      	push	{r7, lr}
   1d0ea:	b086      	sub	sp, #24
   1d0ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1d0ee:	2300      	movs	r3, #0
   1d0f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1d0f2:	4b64      	ldr	r3, [pc, #400]	; (1d284 <xTaskIncrementTick+0x19c>)
   1d0f4:	681b      	ldr	r3, [r3, #0]
   1d0f6:	2b01      	cmp	r3, #1
   1d0f8:	d003      	beq.n	1d102 <xTaskIncrementTick+0x1a>
   1d0fa:	4b63      	ldr	r3, [pc, #396]	; (1d288 <xTaskIncrementTick+0x1a0>)
   1d0fc:	681b      	ldr	r3, [r3, #0]
   1d0fe:	2b00      	cmp	r3, #0
   1d100:	d107      	bne.n	1d112 <xTaskIncrementTick+0x2a>
   1d102:	4b62      	ldr	r3, [pc, #392]	; (1d28c <xTaskIncrementTick+0x1a4>)
   1d104:	681b      	ldr	r3, [r3, #0]
   1d106:	1c5a      	adds	r2, r3, #1
   1d108:	4b60      	ldr	r3, [pc, #384]	; (1d28c <xTaskIncrementTick+0x1a4>)
   1d10a:	601a      	str	r2, [r3, #0]
   1d10c:	2000      	movs	r0, #0
   1d10e:	4b60      	ldr	r3, [pc, #384]	; (1d290 <xTaskIncrementTick+0x1a8>)
   1d110:	4798      	blx	r3
   1d112:	4b5c      	ldr	r3, [pc, #368]	; (1d284 <xTaskIncrementTick+0x19c>)
   1d114:	681b      	ldr	r3, [r3, #0]
   1d116:	2b00      	cmp	r3, #0
   1d118:	d106      	bne.n	1d128 <xTaskIncrementTick+0x40>
   1d11a:	4b5e      	ldr	r3, [pc, #376]	; (1d294 <xTaskIncrementTick+0x1ac>)
   1d11c:	681b      	ldr	r3, [r3, #0]
   1d11e:	3301      	adds	r3, #1
   1d120:	0019      	movs	r1, r3
   1d122:	2003      	movs	r0, #3
   1d124:	4b5c      	ldr	r3, [pc, #368]	; (1d298 <xTaskIncrementTick+0x1b0>)
   1d126:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d128:	4b56      	ldr	r3, [pc, #344]	; (1d284 <xTaskIncrementTick+0x19c>)
   1d12a:	681b      	ldr	r3, [r3, #0]
   1d12c:	2b00      	cmp	r3, #0
   1d12e:	d000      	beq.n	1d132 <xTaskIncrementTick+0x4a>
   1d130:	e098      	b.n	1d264 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1d132:	4b58      	ldr	r3, [pc, #352]	; (1d294 <xTaskIncrementTick+0x1ac>)
   1d134:	681b      	ldr	r3, [r3, #0]
   1d136:	3301      	adds	r3, #1
   1d138:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1d13a:	4b56      	ldr	r3, [pc, #344]	; (1d294 <xTaskIncrementTick+0x1ac>)
   1d13c:	693a      	ldr	r2, [r7, #16]
   1d13e:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1d140:	693b      	ldr	r3, [r7, #16]
   1d142:	2b00      	cmp	r3, #0
   1d144:	d117      	bne.n	1d176 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1d146:	4b55      	ldr	r3, [pc, #340]	; (1d29c <xTaskIncrementTick+0x1b4>)
   1d148:	681b      	ldr	r3, [r3, #0]
   1d14a:	681b      	ldr	r3, [r3, #0]
   1d14c:	2b00      	cmp	r3, #0
   1d14e:	d001      	beq.n	1d154 <xTaskIncrementTick+0x6c>
   1d150:	b672      	cpsid	i
   1d152:	e7fe      	b.n	1d152 <xTaskIncrementTick+0x6a>
   1d154:	4b51      	ldr	r3, [pc, #324]	; (1d29c <xTaskIncrementTick+0x1b4>)
   1d156:	681b      	ldr	r3, [r3, #0]
   1d158:	60fb      	str	r3, [r7, #12]
   1d15a:	4b51      	ldr	r3, [pc, #324]	; (1d2a0 <xTaskIncrementTick+0x1b8>)
   1d15c:	681a      	ldr	r2, [r3, #0]
   1d15e:	4b4f      	ldr	r3, [pc, #316]	; (1d29c <xTaskIncrementTick+0x1b4>)
   1d160:	601a      	str	r2, [r3, #0]
   1d162:	4b4f      	ldr	r3, [pc, #316]	; (1d2a0 <xTaskIncrementTick+0x1b8>)
   1d164:	68fa      	ldr	r2, [r7, #12]
   1d166:	601a      	str	r2, [r3, #0]
   1d168:	4b4e      	ldr	r3, [pc, #312]	; (1d2a4 <xTaskIncrementTick+0x1bc>)
   1d16a:	681b      	ldr	r3, [r3, #0]
   1d16c:	1c5a      	adds	r2, r3, #1
   1d16e:	4b4d      	ldr	r3, [pc, #308]	; (1d2a4 <xTaskIncrementTick+0x1bc>)
   1d170:	601a      	str	r2, [r3, #0]
   1d172:	4b4d      	ldr	r3, [pc, #308]	; (1d2a8 <xTaskIncrementTick+0x1c0>)
   1d174:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1d176:	4b4d      	ldr	r3, [pc, #308]	; (1d2ac <xTaskIncrementTick+0x1c4>)
   1d178:	681b      	ldr	r3, [r3, #0]
   1d17a:	693a      	ldr	r2, [r7, #16]
   1d17c:	429a      	cmp	r2, r3
   1d17e:	d363      	bcc.n	1d248 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d180:	4b46      	ldr	r3, [pc, #280]	; (1d29c <xTaskIncrementTick+0x1b4>)
   1d182:	681b      	ldr	r3, [r3, #0]
   1d184:	681b      	ldr	r3, [r3, #0]
   1d186:	2b00      	cmp	r3, #0
   1d188:	d101      	bne.n	1d18e <xTaskIncrementTick+0xa6>
   1d18a:	2301      	movs	r3, #1
   1d18c:	e000      	b.n	1d190 <xTaskIncrementTick+0xa8>
   1d18e:	2300      	movs	r3, #0
   1d190:	2b00      	cmp	r3, #0
   1d192:	d004      	beq.n	1d19e <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d194:	4b45      	ldr	r3, [pc, #276]	; (1d2ac <xTaskIncrementTick+0x1c4>)
   1d196:	2201      	movs	r2, #1
   1d198:	4252      	negs	r2, r2
   1d19a:	601a      	str	r2, [r3, #0]
					break;
   1d19c:	e054      	b.n	1d248 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d19e:	4b3f      	ldr	r3, [pc, #252]	; (1d29c <xTaskIncrementTick+0x1b4>)
   1d1a0:	681b      	ldr	r3, [r3, #0]
   1d1a2:	68db      	ldr	r3, [r3, #12]
   1d1a4:	68db      	ldr	r3, [r3, #12]
   1d1a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1d1a8:	68bb      	ldr	r3, [r7, #8]
   1d1aa:	685b      	ldr	r3, [r3, #4]
   1d1ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1d1ae:	693a      	ldr	r2, [r7, #16]
   1d1b0:	687b      	ldr	r3, [r7, #4]
   1d1b2:	429a      	cmp	r2, r3
   1d1b4:	d203      	bcs.n	1d1be <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1d1b6:	4b3d      	ldr	r3, [pc, #244]	; (1d2ac <xTaskIncrementTick+0x1c4>)
   1d1b8:	687a      	ldr	r2, [r7, #4]
   1d1ba:	601a      	str	r2, [r3, #0]
						break;
   1d1bc:	e044      	b.n	1d248 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d1be:	68bb      	ldr	r3, [r7, #8]
   1d1c0:	3304      	adds	r3, #4
   1d1c2:	0018      	movs	r0, r3
   1d1c4:	4b3a      	ldr	r3, [pc, #232]	; (1d2b0 <xTaskIncrementTick+0x1c8>)
   1d1c6:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1d1c8:	68bb      	ldr	r3, [r7, #8]
   1d1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d1cc:	2b00      	cmp	r3, #0
   1d1ce:	d004      	beq.n	1d1da <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d1d0:	68bb      	ldr	r3, [r7, #8]
   1d1d2:	3318      	adds	r3, #24
   1d1d4:	0018      	movs	r0, r3
   1d1d6:	4b36      	ldr	r3, [pc, #216]	; (1d2b0 <xTaskIncrementTick+0x1c8>)
   1d1d8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1d1da:	68bb      	ldr	r3, [r7, #8]
   1d1dc:	0018      	movs	r0, r3
   1d1de:	4b35      	ldr	r3, [pc, #212]	; (1d2b4 <xTaskIncrementTick+0x1cc>)
   1d1e0:	4798      	blx	r3
   1d1e2:	0003      	movs	r3, r0
   1d1e4:	001a      	movs	r2, r3
   1d1e6:	4b34      	ldr	r3, [pc, #208]	; (1d2b8 <xTaskIncrementTick+0x1d0>)
   1d1e8:	881b      	ldrh	r3, [r3, #0]
   1d1ea:	4013      	ands	r3, r2
   1d1ec:	b29b      	uxth	r3, r3
   1d1ee:	2b00      	cmp	r3, #0
   1d1f0:	d008      	beq.n	1d204 <xTaskIncrementTick+0x11c>
   1d1f2:	68bb      	ldr	r3, [r7, #8]
   1d1f4:	0018      	movs	r0, r3
   1d1f6:	4b31      	ldr	r3, [pc, #196]	; (1d2bc <xTaskIncrementTick+0x1d4>)
   1d1f8:	4798      	blx	r3
   1d1fa:	0003      	movs	r3, r0
   1d1fc:	b2db      	uxtb	r3, r3
   1d1fe:	0018      	movs	r0, r3
   1d200:	4b2f      	ldr	r3, [pc, #188]	; (1d2c0 <xTaskIncrementTick+0x1d8>)
   1d202:	4798      	blx	r3
   1d204:	68bb      	ldr	r3, [r7, #8]
   1d206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d208:	4b2e      	ldr	r3, [pc, #184]	; (1d2c4 <xTaskIncrementTick+0x1dc>)
   1d20a:	681b      	ldr	r3, [r3, #0]
   1d20c:	429a      	cmp	r2, r3
   1d20e:	d903      	bls.n	1d218 <xTaskIncrementTick+0x130>
   1d210:	68bb      	ldr	r3, [r7, #8]
   1d212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d214:	4b2b      	ldr	r3, [pc, #172]	; (1d2c4 <xTaskIncrementTick+0x1dc>)
   1d216:	601a      	str	r2, [r3, #0]
   1d218:	68bb      	ldr	r3, [r7, #8]
   1d21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d21c:	0013      	movs	r3, r2
   1d21e:	009b      	lsls	r3, r3, #2
   1d220:	189b      	adds	r3, r3, r2
   1d222:	009b      	lsls	r3, r3, #2
   1d224:	4a28      	ldr	r2, [pc, #160]	; (1d2c8 <xTaskIncrementTick+0x1e0>)
   1d226:	189a      	adds	r2, r3, r2
   1d228:	68bb      	ldr	r3, [r7, #8]
   1d22a:	3304      	adds	r3, #4
   1d22c:	0019      	movs	r1, r3
   1d22e:	0010      	movs	r0, r2
   1d230:	4b26      	ldr	r3, [pc, #152]	; (1d2cc <xTaskIncrementTick+0x1e4>)
   1d232:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d234:	68bb      	ldr	r3, [r7, #8]
   1d236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d238:	4b25      	ldr	r3, [pc, #148]	; (1d2d0 <xTaskIncrementTick+0x1e8>)
   1d23a:	681b      	ldr	r3, [r3, #0]
   1d23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d23e:	429a      	cmp	r2, r3
   1d240:	d39e      	bcc.n	1d180 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1d242:	2301      	movs	r3, #1
   1d244:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d246:	e79b      	b.n	1d180 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1d248:	4b21      	ldr	r3, [pc, #132]	; (1d2d0 <xTaskIncrementTick+0x1e8>)
   1d24a:	681b      	ldr	r3, [r3, #0]
   1d24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d24e:	491e      	ldr	r1, [pc, #120]	; (1d2c8 <xTaskIncrementTick+0x1e0>)
   1d250:	0013      	movs	r3, r2
   1d252:	009b      	lsls	r3, r3, #2
   1d254:	189b      	adds	r3, r3, r2
   1d256:	009b      	lsls	r3, r3, #2
   1d258:	585b      	ldr	r3, [r3, r1]
   1d25a:	2b01      	cmp	r3, #1
   1d25c:	d907      	bls.n	1d26e <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1d25e:	2301      	movs	r3, #1
   1d260:	617b      	str	r3, [r7, #20]
   1d262:	e004      	b.n	1d26e <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1d264:	4b08      	ldr	r3, [pc, #32]	; (1d288 <xTaskIncrementTick+0x1a0>)
   1d266:	681b      	ldr	r3, [r3, #0]
   1d268:	1c5a      	adds	r2, r3, #1
   1d26a:	4b07      	ldr	r3, [pc, #28]	; (1d288 <xTaskIncrementTick+0x1a0>)
   1d26c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1d26e:	4b19      	ldr	r3, [pc, #100]	; (1d2d4 <xTaskIncrementTick+0x1ec>)
   1d270:	681b      	ldr	r3, [r3, #0]
   1d272:	2b00      	cmp	r3, #0
   1d274:	d001      	beq.n	1d27a <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1d276:	2301      	movs	r3, #1
   1d278:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1d27a:	697b      	ldr	r3, [r7, #20]
}
   1d27c:	0018      	movs	r0, r3
   1d27e:	46bd      	mov	sp, r7
   1d280:	b006      	add	sp, #24
   1d282:	bd80      	pop	{r7, pc}
   1d284:	20003e14 	.word	0x20003e14
   1d288:	20003dfc 	.word	0x20003dfc
   1d28c:	20000d5c 	.word	0x20000d5c
   1d290:	0001a915 	.word	0x0001a915
   1d294:	20003df0 	.word	0x20003df0
   1d298:	00019981 	.word	0x00019981
   1d29c:	20003da4 	.word	0x20003da4
   1d2a0:	20003da8 	.word	0x20003da8
   1d2a4:	20003e04 	.word	0x20003e04
   1d2a8:	0001d949 	.word	0x0001d949
   1d2ac:	20003e0c 	.word	0x20003e0c
   1d2b0:	0001aafb 	.word	0x0001aafb
   1d2b4:	00018c81 	.word	0x00018c81
   1d2b8:	20000104 	.word	0x20000104
   1d2bc:	00018c61 	.word	0x00018c61
   1d2c0:	00019431 	.word	0x00019431
   1d2c4:	20003df4 	.word	0x20003df4
   1d2c8:	20003d18 	.word	0x20003d18
   1d2cc:	0001aa4b 	.word	0x0001aa4b
   1d2d0:	20003d14 	.word	0x20003d14
   1d2d4:	20003e00 	.word	0x20003e00

0001d2d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1d2d8:	b580      	push	{r7, lr}
   1d2da:	b082      	sub	sp, #8
   1d2dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1d2de:	4b3a      	ldr	r3, [pc, #232]	; (1d3c8 <vTaskSwitchContext+0xf0>)
   1d2e0:	681b      	ldr	r3, [r3, #0]
   1d2e2:	2b00      	cmp	r3, #0
   1d2e4:	d003      	beq.n	1d2ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1d2e6:	4b39      	ldr	r3, [pc, #228]	; (1d3cc <vTaskSwitchContext+0xf4>)
   1d2e8:	2201      	movs	r2, #1
   1d2ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1d2ec:	e067      	b.n	1d3be <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1d2ee:	4b37      	ldr	r3, [pc, #220]	; (1d3cc <vTaskSwitchContext+0xf4>)
   1d2f0:	2200      	movs	r2, #0
   1d2f2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1d2f4:	4b36      	ldr	r3, [pc, #216]	; (1d3d0 <vTaskSwitchContext+0xf8>)
   1d2f6:	681b      	ldr	r3, [r3, #0]
   1d2f8:	681a      	ldr	r2, [r3, #0]
   1d2fa:	4b35      	ldr	r3, [pc, #212]	; (1d3d0 <vTaskSwitchContext+0xf8>)
   1d2fc:	681b      	ldr	r3, [r3, #0]
   1d2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d300:	429a      	cmp	r2, r3
   1d302:	d808      	bhi.n	1d316 <vTaskSwitchContext+0x3e>
   1d304:	4b32      	ldr	r3, [pc, #200]	; (1d3d0 <vTaskSwitchContext+0xf8>)
   1d306:	681a      	ldr	r2, [r3, #0]
   1d308:	4b31      	ldr	r3, [pc, #196]	; (1d3d0 <vTaskSwitchContext+0xf8>)
   1d30a:	681b      	ldr	r3, [r3, #0]
   1d30c:	3334      	adds	r3, #52	; 0x34
   1d30e:	0019      	movs	r1, r3
   1d310:	0010      	movs	r0, r2
   1d312:	4b30      	ldr	r3, [pc, #192]	; (1d3d4 <vTaskSwitchContext+0xfc>)
   1d314:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1d316:	4b30      	ldr	r3, [pc, #192]	; (1d3d8 <vTaskSwitchContext+0x100>)
   1d318:	681b      	ldr	r3, [r3, #0]
   1d31a:	607b      	str	r3, [r7, #4]
   1d31c:	e007      	b.n	1d32e <vTaskSwitchContext+0x56>
   1d31e:	687b      	ldr	r3, [r7, #4]
   1d320:	2b00      	cmp	r3, #0
   1d322:	d101      	bne.n	1d328 <vTaskSwitchContext+0x50>
   1d324:	b672      	cpsid	i
   1d326:	e7fe      	b.n	1d326 <vTaskSwitchContext+0x4e>
   1d328:	687b      	ldr	r3, [r7, #4]
   1d32a:	3b01      	subs	r3, #1
   1d32c:	607b      	str	r3, [r7, #4]
   1d32e:	492b      	ldr	r1, [pc, #172]	; (1d3dc <vTaskSwitchContext+0x104>)
   1d330:	687a      	ldr	r2, [r7, #4]
   1d332:	0013      	movs	r3, r2
   1d334:	009b      	lsls	r3, r3, #2
   1d336:	189b      	adds	r3, r3, r2
   1d338:	009b      	lsls	r3, r3, #2
   1d33a:	585b      	ldr	r3, [r3, r1]
   1d33c:	2b00      	cmp	r3, #0
   1d33e:	d0ee      	beq.n	1d31e <vTaskSwitchContext+0x46>
   1d340:	687a      	ldr	r2, [r7, #4]
   1d342:	0013      	movs	r3, r2
   1d344:	009b      	lsls	r3, r3, #2
   1d346:	189b      	adds	r3, r3, r2
   1d348:	009b      	lsls	r3, r3, #2
   1d34a:	4a24      	ldr	r2, [pc, #144]	; (1d3dc <vTaskSwitchContext+0x104>)
   1d34c:	189b      	adds	r3, r3, r2
   1d34e:	603b      	str	r3, [r7, #0]
   1d350:	683b      	ldr	r3, [r7, #0]
   1d352:	685b      	ldr	r3, [r3, #4]
   1d354:	685a      	ldr	r2, [r3, #4]
   1d356:	683b      	ldr	r3, [r7, #0]
   1d358:	605a      	str	r2, [r3, #4]
   1d35a:	683b      	ldr	r3, [r7, #0]
   1d35c:	685a      	ldr	r2, [r3, #4]
   1d35e:	683b      	ldr	r3, [r7, #0]
   1d360:	3308      	adds	r3, #8
   1d362:	429a      	cmp	r2, r3
   1d364:	d104      	bne.n	1d370 <vTaskSwitchContext+0x98>
   1d366:	683b      	ldr	r3, [r7, #0]
   1d368:	685b      	ldr	r3, [r3, #4]
   1d36a:	685a      	ldr	r2, [r3, #4]
   1d36c:	683b      	ldr	r3, [r7, #0]
   1d36e:	605a      	str	r2, [r3, #4]
   1d370:	683b      	ldr	r3, [r7, #0]
   1d372:	685b      	ldr	r3, [r3, #4]
   1d374:	68da      	ldr	r2, [r3, #12]
   1d376:	4b16      	ldr	r3, [pc, #88]	; (1d3d0 <vTaskSwitchContext+0xf8>)
   1d378:	601a      	str	r2, [r3, #0]
   1d37a:	4b17      	ldr	r3, [pc, #92]	; (1d3d8 <vTaskSwitchContext+0x100>)
   1d37c:	687a      	ldr	r2, [r7, #4]
   1d37e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1d380:	4b17      	ldr	r3, [pc, #92]	; (1d3e0 <vTaskSwitchContext+0x108>)
   1d382:	2201      	movs	r2, #1
   1d384:	601a      	str	r2, [r3, #0]
   1d386:	4b17      	ldr	r3, [pc, #92]	; (1d3e4 <vTaskSwitchContext+0x10c>)
   1d388:	4798      	blx	r3
   1d38a:	0003      	movs	r3, r0
   1d38c:	0018      	movs	r0, r3
   1d38e:	4b16      	ldr	r3, [pc, #88]	; (1d3e8 <vTaskSwitchContext+0x110>)
   1d390:	4798      	blx	r3
   1d392:	0003      	movs	r3, r0
   1d394:	001a      	movs	r2, r3
   1d396:	4b15      	ldr	r3, [pc, #84]	; (1d3ec <vTaskSwitchContext+0x114>)
   1d398:	881b      	ldrh	r3, [r3, #0]
   1d39a:	4013      	ands	r3, r2
   1d39c:	b29b      	uxth	r3, r3
   1d39e:	2b00      	cmp	r3, #0
   1d3a0:	d00a      	beq.n	1d3b8 <vTaskSwitchContext+0xe0>
   1d3a2:	4b10      	ldr	r3, [pc, #64]	; (1d3e4 <vTaskSwitchContext+0x10c>)
   1d3a4:	4798      	blx	r3
   1d3a6:	0003      	movs	r3, r0
   1d3a8:	0018      	movs	r0, r3
   1d3aa:	4b11      	ldr	r3, [pc, #68]	; (1d3f0 <vTaskSwitchContext+0x118>)
   1d3ac:	4798      	blx	r3
   1d3ae:	0003      	movs	r3, r0
   1d3b0:	b2db      	uxtb	r3, r3
   1d3b2:	0018      	movs	r0, r3
   1d3b4:	4b0f      	ldr	r3, [pc, #60]	; (1d3f4 <vTaskSwitchContext+0x11c>)
   1d3b6:	4798      	blx	r3
   1d3b8:	4b09      	ldr	r3, [pc, #36]	; (1d3e0 <vTaskSwitchContext+0x108>)
   1d3ba:	2202      	movs	r2, #2
   1d3bc:	601a      	str	r2, [r3, #0]
}
   1d3be:	46c0      	nop			; (mov r8, r8)
   1d3c0:	46bd      	mov	sp, r7
   1d3c2:	b002      	add	sp, #8
   1d3c4:	bd80      	pop	{r7, pc}
   1d3c6:	46c0      	nop			; (mov r8, r8)
   1d3c8:	20003e14 	.word	0x20003e14
   1d3cc:	20003e00 	.word	0x20003e00
   1d3d0:	20003d14 	.word	0x20003d14
   1d3d4:	00033551 	.word	0x00033551
   1d3d8:	20003df4 	.word	0x20003df4
   1d3dc:	20003d18 	.word	0x20003d18
   1d3e0:	20000d68 	.word	0x20000d68
   1d3e4:	00018f1d 	.word	0x00018f1d
   1d3e8:	00018c81 	.word	0x00018c81
   1d3ec:	20000104 	.word	0x20000104
   1d3f0:	00018c61 	.word	0x00018c61
   1d3f4:	00019a7d 	.word	0x00019a7d

0001d3f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1d3f8:	b580      	push	{r7, lr}
   1d3fa:	b082      	sub	sp, #8
   1d3fc:	af00      	add	r7, sp, #0
   1d3fe:	6078      	str	r0, [r7, #4]
   1d400:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1d402:	687b      	ldr	r3, [r7, #4]
   1d404:	2b00      	cmp	r3, #0
   1d406:	d101      	bne.n	1d40c <vTaskPlaceOnEventList+0x14>
   1d408:	b672      	cpsid	i
   1d40a:	e7fe      	b.n	1d40a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d40c:	4b08      	ldr	r3, [pc, #32]	; (1d430 <vTaskPlaceOnEventList+0x38>)
   1d40e:	681b      	ldr	r3, [r3, #0]
   1d410:	3318      	adds	r3, #24
   1d412:	001a      	movs	r2, r3
   1d414:	687b      	ldr	r3, [r7, #4]
   1d416:	0011      	movs	r1, r2
   1d418:	0018      	movs	r0, r3
   1d41a:	4b06      	ldr	r3, [pc, #24]	; (1d434 <vTaskPlaceOnEventList+0x3c>)
   1d41c:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1d41e:	683b      	ldr	r3, [r7, #0]
   1d420:	2101      	movs	r1, #1
   1d422:	0018      	movs	r0, r3
   1d424:	4b04      	ldr	r3, [pc, #16]	; (1d438 <vTaskPlaceOnEventList+0x40>)
   1d426:	4798      	blx	r3
}
   1d428:	46c0      	nop			; (mov r8, r8)
   1d42a:	46bd      	mov	sp, r7
   1d42c:	b002      	add	sp, #8
   1d42e:	bd80      	pop	{r7, pc}
   1d430:	20003d14 	.word	0x20003d14
   1d434:	0001aa8f 	.word	0x0001aa8f
   1d438:	0001de9d 	.word	0x0001de9d

0001d43c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1d43c:	b580      	push	{r7, lr}
   1d43e:	b084      	sub	sp, #16
   1d440:	af00      	add	r7, sp, #0
   1d442:	60f8      	str	r0, [r7, #12]
   1d444:	60b9      	str	r1, [r7, #8]
   1d446:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1d448:	68fb      	ldr	r3, [r7, #12]
   1d44a:	2b00      	cmp	r3, #0
   1d44c:	d101      	bne.n	1d452 <vTaskPlaceOnEventListRestricted+0x16>
   1d44e:	b672      	cpsid	i
   1d450:	e7fe      	b.n	1d450 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d452:	4b28      	ldr	r3, [pc, #160]	; (1d4f4 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d454:	681b      	ldr	r3, [r3, #0]
   1d456:	3318      	adds	r3, #24
   1d458:	001a      	movs	r2, r3
   1d45a:	68fb      	ldr	r3, [r7, #12]
   1d45c:	0011      	movs	r1, r2
   1d45e:	0018      	movs	r0, r3
   1d460:	4b25      	ldr	r3, [pc, #148]	; (1d4f8 <vTaskPlaceOnEventListRestricted+0xbc>)
   1d462:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1d464:	687b      	ldr	r3, [r7, #4]
   1d466:	2b00      	cmp	r3, #0
   1d468:	d002      	beq.n	1d470 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1d46a:	2301      	movs	r3, #1
   1d46c:	425b      	negs	r3, r3
   1d46e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1d470:	4b20      	ldr	r3, [pc, #128]	; (1d4f4 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d472:	681b      	ldr	r3, [r3, #0]
   1d474:	0018      	movs	r0, r3
   1d476:	4b21      	ldr	r3, [pc, #132]	; (1d4fc <vTaskPlaceOnEventListRestricted+0xc0>)
   1d478:	4798      	blx	r3
   1d47a:	0003      	movs	r3, r0
   1d47c:	001a      	movs	r2, r3
   1d47e:	4b20      	ldr	r3, [pc, #128]	; (1d500 <vTaskPlaceOnEventListRestricted+0xc4>)
   1d480:	881b      	ldrh	r3, [r3, #0]
   1d482:	4013      	ands	r3, r2
   1d484:	b29b      	uxth	r3, r3
   1d486:	2b00      	cmp	r3, #0
   1d488:	d011      	beq.n	1d4ae <vTaskPlaceOnEventListRestricted+0x72>
   1d48a:	4b1e      	ldr	r3, [pc, #120]	; (1d504 <vTaskPlaceOnEventListRestricted+0xc8>)
   1d48c:	681a      	ldr	r2, [r3, #0]
   1d48e:	68bb      	ldr	r3, [r7, #8]
   1d490:	18d3      	adds	r3, r2, r3
   1d492:	0019      	movs	r1, r3
   1d494:	2088      	movs	r0, #136	; 0x88
   1d496:	4b1c      	ldr	r3, [pc, #112]	; (1d508 <vTaskPlaceOnEventListRestricted+0xcc>)
   1d498:	4798      	blx	r3
   1d49a:	4b16      	ldr	r3, [pc, #88]	; (1d4f4 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d49c:	681b      	ldr	r3, [r3, #0]
   1d49e:	0018      	movs	r0, r3
   1d4a0:	4b1a      	ldr	r3, [pc, #104]	; (1d50c <vTaskPlaceOnEventListRestricted+0xd0>)
   1d4a2:	4798      	blx	r3
   1d4a4:	0003      	movs	r3, r0
   1d4a6:	b2db      	uxtb	r3, r3
   1d4a8:	0018      	movs	r0, r3
   1d4aa:	4b19      	ldr	r3, [pc, #100]	; (1d510 <vTaskPlaceOnEventListRestricted+0xd4>)
   1d4ac:	4798      	blx	r3
   1d4ae:	4b19      	ldr	r3, [pc, #100]	; (1d514 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d4b0:	4798      	blx	r3
   1d4b2:	0003      	movs	r3, r0
   1d4b4:	0018      	movs	r0, r3
   1d4b6:	4b11      	ldr	r3, [pc, #68]	; (1d4fc <vTaskPlaceOnEventListRestricted+0xc0>)
   1d4b8:	4798      	blx	r3
   1d4ba:	0003      	movs	r3, r0
   1d4bc:	001a      	movs	r2, r3
   1d4be:	4b10      	ldr	r3, [pc, #64]	; (1d500 <vTaskPlaceOnEventListRestricted+0xc4>)
   1d4c0:	881b      	ldrh	r3, [r3, #0]
   1d4c2:	4013      	ands	r3, r2
   1d4c4:	b29b      	uxth	r3, r3
   1d4c6:	2b00      	cmp	r3, #0
   1d4c8:	d00a      	beq.n	1d4e0 <vTaskPlaceOnEventListRestricted+0xa4>
   1d4ca:	4b12      	ldr	r3, [pc, #72]	; (1d514 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d4cc:	4798      	blx	r3
   1d4ce:	0003      	movs	r3, r0
   1d4d0:	0018      	movs	r0, r3
   1d4d2:	4b0e      	ldr	r3, [pc, #56]	; (1d50c <vTaskPlaceOnEventListRestricted+0xd0>)
   1d4d4:	4798      	blx	r3
   1d4d6:	0003      	movs	r3, r0
   1d4d8:	b2db      	uxtb	r3, r3
   1d4da:	0018      	movs	r0, r3
   1d4dc:	4b0c      	ldr	r3, [pc, #48]	; (1d510 <vTaskPlaceOnEventListRestricted+0xd4>)
   1d4de:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1d4e0:	687a      	ldr	r2, [r7, #4]
   1d4e2:	68bb      	ldr	r3, [r7, #8]
   1d4e4:	0011      	movs	r1, r2
   1d4e6:	0018      	movs	r0, r3
   1d4e8:	4b0b      	ldr	r3, [pc, #44]	; (1d518 <vTaskPlaceOnEventListRestricted+0xdc>)
   1d4ea:	4798      	blx	r3
	}
   1d4ec:	46c0      	nop			; (mov r8, r8)
   1d4ee:	46bd      	mov	sp, r7
   1d4f0:	b004      	add	sp, #16
   1d4f2:	bd80      	pop	{r7, pc}
   1d4f4:	20003d14 	.word	0x20003d14
   1d4f8:	0001aa4b 	.word	0x0001aa4b
   1d4fc:	00018c81 	.word	0x00018c81
   1d500:	20000104 	.word	0x20000104
   1d504:	20003df0 	.word	0x20003df0
   1d508:	00019981 	.word	0x00019981
   1d50c:	00018c61 	.word	0x00018c61
   1d510:	00019e11 	.word	0x00019e11
   1d514:	00018f1d 	.word	0x00018f1d
   1d518:	0001de9d 	.word	0x0001de9d

0001d51c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1d51c:	b580      	push	{r7, lr}
   1d51e:	b084      	sub	sp, #16
   1d520:	af00      	add	r7, sp, #0
   1d522:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1d524:	687b      	ldr	r3, [r7, #4]
   1d526:	68db      	ldr	r3, [r3, #12]
   1d528:	68db      	ldr	r3, [r3, #12]
   1d52a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1d52c:	68bb      	ldr	r3, [r7, #8]
   1d52e:	2b00      	cmp	r3, #0
   1d530:	d101      	bne.n	1d536 <xTaskRemoveFromEventList+0x1a>
   1d532:	b672      	cpsid	i
   1d534:	e7fe      	b.n	1d534 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1d536:	68bb      	ldr	r3, [r7, #8]
   1d538:	3318      	adds	r3, #24
   1d53a:	0018      	movs	r0, r3
   1d53c:	4b2a      	ldr	r3, [pc, #168]	; (1d5e8 <xTaskRemoveFromEventList+0xcc>)
   1d53e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d540:	4b2a      	ldr	r3, [pc, #168]	; (1d5ec <xTaskRemoveFromEventList+0xd0>)
   1d542:	681b      	ldr	r3, [r3, #0]
   1d544:	2b00      	cmp	r3, #0
   1d546:	d132      	bne.n	1d5ae <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1d548:	68bb      	ldr	r3, [r7, #8]
   1d54a:	3304      	adds	r3, #4
   1d54c:	0018      	movs	r0, r3
   1d54e:	4b26      	ldr	r3, [pc, #152]	; (1d5e8 <xTaskRemoveFromEventList+0xcc>)
   1d550:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1d552:	68bb      	ldr	r3, [r7, #8]
   1d554:	0018      	movs	r0, r3
   1d556:	4b26      	ldr	r3, [pc, #152]	; (1d5f0 <xTaskRemoveFromEventList+0xd4>)
   1d558:	4798      	blx	r3
   1d55a:	0003      	movs	r3, r0
   1d55c:	001a      	movs	r2, r3
   1d55e:	4b25      	ldr	r3, [pc, #148]	; (1d5f4 <xTaskRemoveFromEventList+0xd8>)
   1d560:	881b      	ldrh	r3, [r3, #0]
   1d562:	4013      	ands	r3, r2
   1d564:	b29b      	uxth	r3, r3
   1d566:	2b00      	cmp	r3, #0
   1d568:	d008      	beq.n	1d57c <xTaskRemoveFromEventList+0x60>
   1d56a:	68bb      	ldr	r3, [r7, #8]
   1d56c:	0018      	movs	r0, r3
   1d56e:	4b22      	ldr	r3, [pc, #136]	; (1d5f8 <xTaskRemoveFromEventList+0xdc>)
   1d570:	4798      	blx	r3
   1d572:	0003      	movs	r3, r0
   1d574:	b2db      	uxtb	r3, r3
   1d576:	0018      	movs	r0, r3
   1d578:	4b20      	ldr	r3, [pc, #128]	; (1d5fc <xTaskRemoveFromEventList+0xe0>)
   1d57a:	4798      	blx	r3
   1d57c:	68bb      	ldr	r3, [r7, #8]
   1d57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d580:	4b1f      	ldr	r3, [pc, #124]	; (1d600 <xTaskRemoveFromEventList+0xe4>)
   1d582:	681b      	ldr	r3, [r3, #0]
   1d584:	429a      	cmp	r2, r3
   1d586:	d903      	bls.n	1d590 <xTaskRemoveFromEventList+0x74>
   1d588:	68bb      	ldr	r3, [r7, #8]
   1d58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d58c:	4b1c      	ldr	r3, [pc, #112]	; (1d600 <xTaskRemoveFromEventList+0xe4>)
   1d58e:	601a      	str	r2, [r3, #0]
   1d590:	68bb      	ldr	r3, [r7, #8]
   1d592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d594:	0013      	movs	r3, r2
   1d596:	009b      	lsls	r3, r3, #2
   1d598:	189b      	adds	r3, r3, r2
   1d59a:	009b      	lsls	r3, r3, #2
   1d59c:	4a19      	ldr	r2, [pc, #100]	; (1d604 <xTaskRemoveFromEventList+0xe8>)
   1d59e:	189a      	adds	r2, r3, r2
   1d5a0:	68bb      	ldr	r3, [r7, #8]
   1d5a2:	3304      	adds	r3, #4
   1d5a4:	0019      	movs	r1, r3
   1d5a6:	0010      	movs	r0, r2
   1d5a8:	4b17      	ldr	r3, [pc, #92]	; (1d608 <xTaskRemoveFromEventList+0xec>)
   1d5aa:	4798      	blx	r3
   1d5ac:	e007      	b.n	1d5be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1d5ae:	68bb      	ldr	r3, [r7, #8]
   1d5b0:	3318      	adds	r3, #24
   1d5b2:	001a      	movs	r2, r3
   1d5b4:	4b15      	ldr	r3, [pc, #84]	; (1d60c <xTaskRemoveFromEventList+0xf0>)
   1d5b6:	0011      	movs	r1, r2
   1d5b8:	0018      	movs	r0, r3
   1d5ba:	4b13      	ldr	r3, [pc, #76]	; (1d608 <xTaskRemoveFromEventList+0xec>)
   1d5bc:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1d5be:	68bb      	ldr	r3, [r7, #8]
   1d5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d5c2:	4b13      	ldr	r3, [pc, #76]	; (1d610 <xTaskRemoveFromEventList+0xf4>)
   1d5c4:	681b      	ldr	r3, [r3, #0]
   1d5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d5c8:	429a      	cmp	r2, r3
   1d5ca:	d905      	bls.n	1d5d8 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1d5cc:	2301      	movs	r3, #1
   1d5ce:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1d5d0:	4b10      	ldr	r3, [pc, #64]	; (1d614 <xTaskRemoveFromEventList+0xf8>)
   1d5d2:	2201      	movs	r2, #1
   1d5d4:	601a      	str	r2, [r3, #0]
   1d5d6:	e001      	b.n	1d5dc <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1d5d8:	2300      	movs	r3, #0
   1d5da:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1d5dc:	68fb      	ldr	r3, [r7, #12]
}
   1d5de:	0018      	movs	r0, r3
   1d5e0:	46bd      	mov	sp, r7
   1d5e2:	b004      	add	sp, #16
   1d5e4:	bd80      	pop	{r7, pc}
   1d5e6:	46c0      	nop			; (mov r8, r8)
   1d5e8:	0001aafb 	.word	0x0001aafb
   1d5ec:	20003e14 	.word	0x20003e14
   1d5f0:	00018c81 	.word	0x00018c81
   1d5f4:	20000104 	.word	0x20000104
   1d5f8:	00018c61 	.word	0x00018c61
   1d5fc:	00019431 	.word	0x00019431
   1d600:	20003df4 	.word	0x20003df4
   1d604:	20003d18 	.word	0x20003d18
   1d608:	0001aa4b 	.word	0x0001aa4b
   1d60c:	20003dac 	.word	0x20003dac
   1d610:	20003d14 	.word	0x20003d14
   1d614:	20003e00 	.word	0x20003e00

0001d618 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d618:	b580      	push	{r7, lr}
   1d61a:	b082      	sub	sp, #8
   1d61c:	af00      	add	r7, sp, #0
   1d61e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1d620:	687b      	ldr	r3, [r7, #4]
   1d622:	2b00      	cmp	r3, #0
   1d624:	d101      	bne.n	1d62a <vTaskSetTimeOutState+0x12>
   1d626:	b672      	cpsid	i
   1d628:	e7fe      	b.n	1d628 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1d62a:	4b08      	ldr	r3, [pc, #32]	; (1d64c <vTaskSetTimeOutState+0x34>)
   1d62c:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d62e:	4b08      	ldr	r3, [pc, #32]	; (1d650 <vTaskSetTimeOutState+0x38>)
   1d630:	681a      	ldr	r2, [r3, #0]
   1d632:	687b      	ldr	r3, [r7, #4]
   1d634:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1d636:	4b07      	ldr	r3, [pc, #28]	; (1d654 <vTaskSetTimeOutState+0x3c>)
   1d638:	681a      	ldr	r2, [r3, #0]
   1d63a:	687b      	ldr	r3, [r7, #4]
   1d63c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1d63e:	4b06      	ldr	r3, [pc, #24]	; (1d658 <vTaskSetTimeOutState+0x40>)
   1d640:	4798      	blx	r3
}
   1d642:	46c0      	nop			; (mov r8, r8)
   1d644:	46bd      	mov	sp, r7
   1d646:	b002      	add	sp, #8
   1d648:	bd80      	pop	{r7, pc}
   1d64a:	46c0      	nop			; (mov r8, r8)
   1d64c:	0001ac89 	.word	0x0001ac89
   1d650:	20003e04 	.word	0x20003e04
   1d654:	20003df0 	.word	0x20003df0
   1d658:	0001acad 	.word	0x0001acad

0001d65c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d65c:	b580      	push	{r7, lr}
   1d65e:	b082      	sub	sp, #8
   1d660:	af00      	add	r7, sp, #0
   1d662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d664:	4b05      	ldr	r3, [pc, #20]	; (1d67c <vTaskInternalSetTimeOutState+0x20>)
   1d666:	681a      	ldr	r2, [r3, #0]
   1d668:	687b      	ldr	r3, [r7, #4]
   1d66a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1d66c:	4b04      	ldr	r3, [pc, #16]	; (1d680 <vTaskInternalSetTimeOutState+0x24>)
   1d66e:	681a      	ldr	r2, [r3, #0]
   1d670:	687b      	ldr	r3, [r7, #4]
   1d672:	605a      	str	r2, [r3, #4]
}
   1d674:	46c0      	nop			; (mov r8, r8)
   1d676:	46bd      	mov	sp, r7
   1d678:	b002      	add	sp, #8
   1d67a:	bd80      	pop	{r7, pc}
   1d67c:	20003e04 	.word	0x20003e04
   1d680:	20003df0 	.word	0x20003df0

0001d684 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1d684:	b580      	push	{r7, lr}
   1d686:	b086      	sub	sp, #24
   1d688:	af00      	add	r7, sp, #0
   1d68a:	6078      	str	r0, [r7, #4]
   1d68c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1d68e:	687b      	ldr	r3, [r7, #4]
   1d690:	2b00      	cmp	r3, #0
   1d692:	d101      	bne.n	1d698 <xTaskCheckForTimeOut+0x14>
   1d694:	b672      	cpsid	i
   1d696:	e7fe      	b.n	1d696 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1d698:	683b      	ldr	r3, [r7, #0]
   1d69a:	2b00      	cmp	r3, #0
   1d69c:	d101      	bne.n	1d6a2 <xTaskCheckForTimeOut+0x1e>
   1d69e:	b672      	cpsid	i
   1d6a0:	e7fe      	b.n	1d6a0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1d6a2:	4b1e      	ldr	r3, [pc, #120]	; (1d71c <xTaskCheckForTimeOut+0x98>)
   1d6a4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1d6a6:	4b1e      	ldr	r3, [pc, #120]	; (1d720 <xTaskCheckForTimeOut+0x9c>)
   1d6a8:	681b      	ldr	r3, [r3, #0]
   1d6aa:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1d6ac:	687b      	ldr	r3, [r7, #4]
   1d6ae:	685b      	ldr	r3, [r3, #4]
   1d6b0:	693a      	ldr	r2, [r7, #16]
   1d6b2:	1ad3      	subs	r3, r2, r3
   1d6b4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1d6b6:	683b      	ldr	r3, [r7, #0]
   1d6b8:	681b      	ldr	r3, [r3, #0]
   1d6ba:	3301      	adds	r3, #1
   1d6bc:	d102      	bne.n	1d6c4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1d6be:	2300      	movs	r3, #0
   1d6c0:	617b      	str	r3, [r7, #20]
   1d6c2:	e024      	b.n	1d70e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1d6c4:	687b      	ldr	r3, [r7, #4]
   1d6c6:	681a      	ldr	r2, [r3, #0]
   1d6c8:	4b16      	ldr	r3, [pc, #88]	; (1d724 <xTaskCheckForTimeOut+0xa0>)
   1d6ca:	681b      	ldr	r3, [r3, #0]
   1d6cc:	429a      	cmp	r2, r3
   1d6ce:	d007      	beq.n	1d6e0 <xTaskCheckForTimeOut+0x5c>
   1d6d0:	687b      	ldr	r3, [r7, #4]
   1d6d2:	685a      	ldr	r2, [r3, #4]
   1d6d4:	693b      	ldr	r3, [r7, #16]
   1d6d6:	429a      	cmp	r2, r3
   1d6d8:	d802      	bhi.n	1d6e0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1d6da:	2301      	movs	r3, #1
   1d6dc:	617b      	str	r3, [r7, #20]
   1d6de:	e016      	b.n	1d70e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1d6e0:	683b      	ldr	r3, [r7, #0]
   1d6e2:	681a      	ldr	r2, [r3, #0]
   1d6e4:	68fb      	ldr	r3, [r7, #12]
   1d6e6:	429a      	cmp	r2, r3
   1d6e8:	d90c      	bls.n	1d704 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1d6ea:	683b      	ldr	r3, [r7, #0]
   1d6ec:	681a      	ldr	r2, [r3, #0]
   1d6ee:	68fb      	ldr	r3, [r7, #12]
   1d6f0:	1ad2      	subs	r2, r2, r3
   1d6f2:	683b      	ldr	r3, [r7, #0]
   1d6f4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1d6f6:	687b      	ldr	r3, [r7, #4]
   1d6f8:	0018      	movs	r0, r3
   1d6fa:	4b0b      	ldr	r3, [pc, #44]	; (1d728 <xTaskCheckForTimeOut+0xa4>)
   1d6fc:	4798      	blx	r3
			xReturn = pdFALSE;
   1d6fe:	2300      	movs	r3, #0
   1d700:	617b      	str	r3, [r7, #20]
   1d702:	e004      	b.n	1d70e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1d704:	683b      	ldr	r3, [r7, #0]
   1d706:	2200      	movs	r2, #0
   1d708:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1d70a:	2301      	movs	r3, #1
   1d70c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1d70e:	4b07      	ldr	r3, [pc, #28]	; (1d72c <xTaskCheckForTimeOut+0xa8>)
   1d710:	4798      	blx	r3

	return xReturn;
   1d712:	697b      	ldr	r3, [r7, #20]
}
   1d714:	0018      	movs	r0, r3
   1d716:	46bd      	mov	sp, r7
   1d718:	b006      	add	sp, #24
   1d71a:	bd80      	pop	{r7, pc}
   1d71c:	0001ac89 	.word	0x0001ac89
   1d720:	20003df0 	.word	0x20003df0
   1d724:	20003e04 	.word	0x20003e04
   1d728:	0001d65d 	.word	0x0001d65d
   1d72c:	0001acad 	.word	0x0001acad

0001d730 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1d730:	b580      	push	{r7, lr}
   1d732:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1d734:	4b02      	ldr	r3, [pc, #8]	; (1d740 <vTaskMissedYield+0x10>)
   1d736:	2201      	movs	r2, #1
   1d738:	601a      	str	r2, [r3, #0]
}
   1d73a:	46c0      	nop			; (mov r8, r8)
   1d73c:	46bd      	mov	sp, r7
   1d73e:	bd80      	pop	{r7, pc}
   1d740:	20003e00 	.word	0x20003e00

0001d744 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1d744:	b580      	push	{r7, lr}
   1d746:	b084      	sub	sp, #16
   1d748:	af00      	add	r7, sp, #0
   1d74a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d74c:	687b      	ldr	r3, [r7, #4]
   1d74e:	2b00      	cmp	r3, #0
   1d750:	d005      	beq.n	1d75e <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d752:	687b      	ldr	r3, [r7, #4]
   1d754:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1d756:	68bb      	ldr	r3, [r7, #8]
   1d758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d75a:	60fb      	str	r3, [r7, #12]
   1d75c:	e001      	b.n	1d762 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1d75e:	2300      	movs	r3, #0
   1d760:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1d762:	68fb      	ldr	r3, [r7, #12]
	}
   1d764:	0018      	movs	r0, r3
   1d766:	46bd      	mov	sp, r7
   1d768:	b004      	add	sp, #16
   1d76a:	bd80      	pop	{r7, pc}

0001d76c <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1d76c:	b580      	push	{r7, lr}
   1d76e:	b084      	sub	sp, #16
   1d770:	af00      	add	r7, sp, #0
   1d772:	6078      	str	r0, [r7, #4]
   1d774:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d776:	687b      	ldr	r3, [r7, #4]
   1d778:	2b00      	cmp	r3, #0
   1d77a:	d004      	beq.n	1d786 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d77c:	687b      	ldr	r3, [r7, #4]
   1d77e:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1d780:	68fb      	ldr	r3, [r7, #12]
   1d782:	683a      	ldr	r2, [r7, #0]
   1d784:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1d786:	46c0      	nop			; (mov r8, r8)
   1d788:	46bd      	mov	sp, r7
   1d78a:	b004      	add	sp, #16
   1d78c:	bd80      	pop	{r7, pc}
	...

0001d790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1d790:	b580      	push	{r7, lr}
   1d792:	b082      	sub	sp, #8
   1d794:	af00      	add	r7, sp, #0
   1d796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1d798:	4b04      	ldr	r3, [pc, #16]	; (1d7ac <prvIdleTask+0x1c>)
   1d79a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1d79c:	4b04      	ldr	r3, [pc, #16]	; (1d7b0 <prvIdleTask+0x20>)
   1d79e:	681b      	ldr	r3, [r3, #0]
   1d7a0:	2b01      	cmp	r3, #1
   1d7a2:	d9f9      	bls.n	1d798 <prvIdleTask+0x8>
			{
				taskYIELD();
   1d7a4:	4b03      	ldr	r3, [pc, #12]	; (1d7b4 <prvIdleTask+0x24>)
   1d7a6:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1d7a8:	e7f6      	b.n	1d798 <prvIdleTask+0x8>
   1d7aa:	46c0      	nop			; (mov r8, r8)
   1d7ac:	0001d845 	.word	0x0001d845
   1d7b0:	20003d18 	.word	0x20003d18
   1d7b4:	0001ac71 	.word	0x0001ac71

0001d7b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1d7b8:	b580      	push	{r7, lr}
   1d7ba:	b082      	sub	sp, #8
   1d7bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d7be:	2300      	movs	r3, #0
   1d7c0:	607b      	str	r3, [r7, #4]
   1d7c2:	e00c      	b.n	1d7de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1d7c4:	687a      	ldr	r2, [r7, #4]
   1d7c6:	0013      	movs	r3, r2
   1d7c8:	009b      	lsls	r3, r3, #2
   1d7ca:	189b      	adds	r3, r3, r2
   1d7cc:	009b      	lsls	r3, r3, #2
   1d7ce:	4a14      	ldr	r2, [pc, #80]	; (1d820 <prvInitialiseTaskLists+0x68>)
   1d7d0:	189b      	adds	r3, r3, r2
   1d7d2:	0018      	movs	r0, r3
   1d7d4:	4b13      	ldr	r3, [pc, #76]	; (1d824 <prvInitialiseTaskLists+0x6c>)
   1d7d6:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d7d8:	687b      	ldr	r3, [r7, #4]
   1d7da:	3301      	adds	r3, #1
   1d7dc:	607b      	str	r3, [r7, #4]
   1d7de:	687b      	ldr	r3, [r7, #4]
   1d7e0:	2b04      	cmp	r3, #4
   1d7e2:	d9ef      	bls.n	1d7c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1d7e4:	4b10      	ldr	r3, [pc, #64]	; (1d828 <prvInitialiseTaskLists+0x70>)
   1d7e6:	0018      	movs	r0, r3
   1d7e8:	4b0e      	ldr	r3, [pc, #56]	; (1d824 <prvInitialiseTaskLists+0x6c>)
   1d7ea:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1d7ec:	4b0f      	ldr	r3, [pc, #60]	; (1d82c <prvInitialiseTaskLists+0x74>)
   1d7ee:	0018      	movs	r0, r3
   1d7f0:	4b0c      	ldr	r3, [pc, #48]	; (1d824 <prvInitialiseTaskLists+0x6c>)
   1d7f2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1d7f4:	4b0e      	ldr	r3, [pc, #56]	; (1d830 <prvInitialiseTaskLists+0x78>)
   1d7f6:	0018      	movs	r0, r3
   1d7f8:	4b0a      	ldr	r3, [pc, #40]	; (1d824 <prvInitialiseTaskLists+0x6c>)
   1d7fa:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1d7fc:	4b0d      	ldr	r3, [pc, #52]	; (1d834 <prvInitialiseTaskLists+0x7c>)
   1d7fe:	0018      	movs	r0, r3
   1d800:	4b08      	ldr	r3, [pc, #32]	; (1d824 <prvInitialiseTaskLists+0x6c>)
   1d802:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1d804:	4b0c      	ldr	r3, [pc, #48]	; (1d838 <prvInitialiseTaskLists+0x80>)
   1d806:	0018      	movs	r0, r3
   1d808:	4b06      	ldr	r3, [pc, #24]	; (1d824 <prvInitialiseTaskLists+0x6c>)
   1d80a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1d80c:	4b0b      	ldr	r3, [pc, #44]	; (1d83c <prvInitialiseTaskLists+0x84>)
   1d80e:	4a06      	ldr	r2, [pc, #24]	; (1d828 <prvInitialiseTaskLists+0x70>)
   1d810:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1d812:	4b0b      	ldr	r3, [pc, #44]	; (1d840 <prvInitialiseTaskLists+0x88>)
   1d814:	4a05      	ldr	r2, [pc, #20]	; (1d82c <prvInitialiseTaskLists+0x74>)
   1d816:	601a      	str	r2, [r3, #0]
}
   1d818:	46c0      	nop			; (mov r8, r8)
   1d81a:	46bd      	mov	sp, r7
   1d81c:	b002      	add	sp, #8
   1d81e:	bd80      	pop	{r7, pc}
   1d820:	20003d18 	.word	0x20003d18
   1d824:	0001a9f9 	.word	0x0001a9f9
   1d828:	20003d7c 	.word	0x20003d7c
   1d82c:	20003d90 	.word	0x20003d90
   1d830:	20003dac 	.word	0x20003dac
   1d834:	20003dc0 	.word	0x20003dc0
   1d838:	20003dd8 	.word	0x20003dd8
   1d83c:	20003da4 	.word	0x20003da4
   1d840:	20003da8 	.word	0x20003da8

0001d844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1d844:	b580      	push	{r7, lr}
   1d846:	b082      	sub	sp, #8
   1d848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d84a:	e01a      	b.n	1d882 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1d84c:	4b11      	ldr	r3, [pc, #68]	; (1d894 <prvCheckTasksWaitingTermination+0x50>)
   1d84e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1d850:	4b11      	ldr	r3, [pc, #68]	; (1d898 <prvCheckTasksWaitingTermination+0x54>)
   1d852:	68db      	ldr	r3, [r3, #12]
   1d854:	68db      	ldr	r3, [r3, #12]
   1d856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d858:	687b      	ldr	r3, [r7, #4]
   1d85a:	3304      	adds	r3, #4
   1d85c:	0018      	movs	r0, r3
   1d85e:	4b0f      	ldr	r3, [pc, #60]	; (1d89c <prvCheckTasksWaitingTermination+0x58>)
   1d860:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1d862:	4b0f      	ldr	r3, [pc, #60]	; (1d8a0 <prvCheckTasksWaitingTermination+0x5c>)
   1d864:	681b      	ldr	r3, [r3, #0]
   1d866:	1e5a      	subs	r2, r3, #1
   1d868:	4b0d      	ldr	r3, [pc, #52]	; (1d8a0 <prvCheckTasksWaitingTermination+0x5c>)
   1d86a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1d86c:	4b0d      	ldr	r3, [pc, #52]	; (1d8a4 <prvCheckTasksWaitingTermination+0x60>)
   1d86e:	681b      	ldr	r3, [r3, #0]
   1d870:	1e5a      	subs	r2, r3, #1
   1d872:	4b0c      	ldr	r3, [pc, #48]	; (1d8a4 <prvCheckTasksWaitingTermination+0x60>)
   1d874:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1d876:	4b0c      	ldr	r3, [pc, #48]	; (1d8a8 <prvCheckTasksWaitingTermination+0x64>)
   1d878:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1d87a:	687b      	ldr	r3, [r7, #4]
   1d87c:	0018      	movs	r0, r3
   1d87e:	4b0b      	ldr	r3, [pc, #44]	; (1d8ac <prvCheckTasksWaitingTermination+0x68>)
   1d880:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d882:	4b08      	ldr	r3, [pc, #32]	; (1d8a4 <prvCheckTasksWaitingTermination+0x60>)
   1d884:	681b      	ldr	r3, [r3, #0]
   1d886:	2b00      	cmp	r3, #0
   1d888:	d1e0      	bne.n	1d84c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1d88a:	46c0      	nop			; (mov r8, r8)
   1d88c:	46bd      	mov	sp, r7
   1d88e:	b002      	add	sp, #8
   1d890:	bd80      	pop	{r7, pc}
   1d892:	46c0      	nop			; (mov r8, r8)
   1d894:	0001ac89 	.word	0x0001ac89
   1d898:	20003dc0 	.word	0x20003dc0
   1d89c:	0001aafb 	.word	0x0001aafb
   1d8a0:	20003dec 	.word	0x20003dec
   1d8a4:	20003dd4 	.word	0x20003dd4
   1d8a8:	0001acad 	.word	0x0001acad
   1d8ac:	0001d921 	.word	0x0001d921

0001d8b0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1d8b0:	b580      	push	{r7, lr}
   1d8b2:	b084      	sub	sp, #16
   1d8b4:	af00      	add	r7, sp, #0
   1d8b6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1d8b8:	2300      	movs	r3, #0
   1d8ba:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d8bc:	e005      	b.n	1d8ca <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1d8be:	687b      	ldr	r3, [r7, #4]
   1d8c0:	3301      	adds	r3, #1
   1d8c2:	607b      	str	r3, [r7, #4]
			ulCount++;
   1d8c4:	68fb      	ldr	r3, [r7, #12]
   1d8c6:	3301      	adds	r3, #1
   1d8c8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d8ca:	687b      	ldr	r3, [r7, #4]
   1d8cc:	781b      	ldrb	r3, [r3, #0]
   1d8ce:	2ba5      	cmp	r3, #165	; 0xa5
   1d8d0:	d0f5      	beq.n	1d8be <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1d8d2:	68fb      	ldr	r3, [r7, #12]
   1d8d4:	089b      	lsrs	r3, r3, #2
   1d8d6:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1d8d8:	68fb      	ldr	r3, [r7, #12]
   1d8da:	b29b      	uxth	r3, r3
	}
   1d8dc:	0018      	movs	r0, r3
   1d8de:	46bd      	mov	sp, r7
   1d8e0:	b004      	add	sp, #16
   1d8e2:	bd80      	pop	{r7, pc}

0001d8e4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1d8e4:	b580      	push	{r7, lr}
   1d8e6:	b086      	sub	sp, #24
   1d8e8:	af00      	add	r7, sp, #0
   1d8ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1d8ec:	687b      	ldr	r3, [r7, #4]
   1d8ee:	2b00      	cmp	r3, #0
   1d8f0:	d102      	bne.n	1d8f8 <uxTaskGetStackHighWaterMark+0x14>
   1d8f2:	4b09      	ldr	r3, [pc, #36]	; (1d918 <uxTaskGetStackHighWaterMark+0x34>)
   1d8f4:	681b      	ldr	r3, [r3, #0]
   1d8f6:	e000      	b.n	1d8fa <uxTaskGetStackHighWaterMark+0x16>
   1d8f8:	687b      	ldr	r3, [r7, #4]
   1d8fa:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1d8fc:	697b      	ldr	r3, [r7, #20]
   1d8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d900:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1d902:	693b      	ldr	r3, [r7, #16]
   1d904:	0018      	movs	r0, r3
   1d906:	4b05      	ldr	r3, [pc, #20]	; (1d91c <uxTaskGetStackHighWaterMark+0x38>)
   1d908:	4798      	blx	r3
   1d90a:	0003      	movs	r3, r0
   1d90c:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1d90e:	68fb      	ldr	r3, [r7, #12]
	}
   1d910:	0018      	movs	r0, r3
   1d912:	46bd      	mov	sp, r7
   1d914:	b006      	add	sp, #24
   1d916:	bd80      	pop	{r7, pc}
   1d918:	20003d14 	.word	0x20003d14
   1d91c:	0001d8b1 	.word	0x0001d8b1

0001d920 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1d920:	b580      	push	{r7, lr}
   1d922:	b082      	sub	sp, #8
   1d924:	af00      	add	r7, sp, #0
   1d926:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1d928:	687b      	ldr	r3, [r7, #4]
   1d92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d92c:	0018      	movs	r0, r3
   1d92e:	4b05      	ldr	r3, [pc, #20]	; (1d944 <prvDeleteTCB+0x24>)
   1d930:	4798      	blx	r3
			vPortFree( pxTCB );
   1d932:	687b      	ldr	r3, [r7, #4]
   1d934:	0018      	movs	r0, r3
   1d936:	4b03      	ldr	r3, [pc, #12]	; (1d944 <prvDeleteTCB+0x24>)
   1d938:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1d93a:	46c0      	nop			; (mov r8, r8)
   1d93c:	46bd      	mov	sp, r7
   1d93e:	b002      	add	sp, #8
   1d940:	bd80      	pop	{r7, pc}
   1d942:	46c0      	nop			; (mov r8, r8)
   1d944:	0001ae85 	.word	0x0001ae85

0001d948 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1d948:	b580      	push	{r7, lr}
   1d94a:	b082      	sub	sp, #8
   1d94c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d94e:	4b0e      	ldr	r3, [pc, #56]	; (1d988 <prvResetNextTaskUnblockTime+0x40>)
   1d950:	681b      	ldr	r3, [r3, #0]
   1d952:	681b      	ldr	r3, [r3, #0]
   1d954:	2b00      	cmp	r3, #0
   1d956:	d101      	bne.n	1d95c <prvResetNextTaskUnblockTime+0x14>
   1d958:	2301      	movs	r3, #1
   1d95a:	e000      	b.n	1d95e <prvResetNextTaskUnblockTime+0x16>
   1d95c:	2300      	movs	r3, #0
   1d95e:	2b00      	cmp	r3, #0
   1d960:	d004      	beq.n	1d96c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1d962:	4b0a      	ldr	r3, [pc, #40]	; (1d98c <prvResetNextTaskUnblockTime+0x44>)
   1d964:	2201      	movs	r2, #1
   1d966:	4252      	negs	r2, r2
   1d968:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1d96a:	e008      	b.n	1d97e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d96c:	4b06      	ldr	r3, [pc, #24]	; (1d988 <prvResetNextTaskUnblockTime+0x40>)
   1d96e:	681b      	ldr	r3, [r3, #0]
   1d970:	68db      	ldr	r3, [r3, #12]
   1d972:	68db      	ldr	r3, [r3, #12]
   1d974:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1d976:	687b      	ldr	r3, [r7, #4]
   1d978:	685a      	ldr	r2, [r3, #4]
   1d97a:	4b04      	ldr	r3, [pc, #16]	; (1d98c <prvResetNextTaskUnblockTime+0x44>)
   1d97c:	601a      	str	r2, [r3, #0]
}
   1d97e:	46c0      	nop			; (mov r8, r8)
   1d980:	46bd      	mov	sp, r7
   1d982:	b002      	add	sp, #8
   1d984:	bd80      	pop	{r7, pc}
   1d986:	46c0      	nop			; (mov r8, r8)
   1d988:	20003da4 	.word	0x20003da4
   1d98c:	20003e0c 	.word	0x20003e0c

0001d990 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1d990:	b580      	push	{r7, lr}
   1d992:	b082      	sub	sp, #8
   1d994:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1d996:	4b04      	ldr	r3, [pc, #16]	; (1d9a8 <xTaskGetCurrentTaskHandle+0x18>)
   1d998:	681b      	ldr	r3, [r3, #0]
   1d99a:	607b      	str	r3, [r7, #4]

		return xReturn;
   1d99c:	687b      	ldr	r3, [r7, #4]
	}
   1d99e:	0018      	movs	r0, r3
   1d9a0:	46bd      	mov	sp, r7
   1d9a2:	b002      	add	sp, #8
   1d9a4:	bd80      	pop	{r7, pc}
   1d9a6:	46c0      	nop			; (mov r8, r8)
   1d9a8:	20003d14 	.word	0x20003d14

0001d9ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1d9ac:	b580      	push	{r7, lr}
   1d9ae:	b082      	sub	sp, #8
   1d9b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1d9b2:	4b0a      	ldr	r3, [pc, #40]	; (1d9dc <xTaskGetSchedulerState+0x30>)
   1d9b4:	681b      	ldr	r3, [r3, #0]
   1d9b6:	2b00      	cmp	r3, #0
   1d9b8:	d102      	bne.n	1d9c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1d9ba:	2301      	movs	r3, #1
   1d9bc:	607b      	str	r3, [r7, #4]
   1d9be:	e008      	b.n	1d9d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d9c0:	4b07      	ldr	r3, [pc, #28]	; (1d9e0 <xTaskGetSchedulerState+0x34>)
   1d9c2:	681b      	ldr	r3, [r3, #0]
   1d9c4:	2b00      	cmp	r3, #0
   1d9c6:	d102      	bne.n	1d9ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1d9c8:	2302      	movs	r3, #2
   1d9ca:	607b      	str	r3, [r7, #4]
   1d9cc:	e001      	b.n	1d9d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1d9ce:	2300      	movs	r3, #0
   1d9d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1d9d2:	687b      	ldr	r3, [r7, #4]
	}
   1d9d4:	0018      	movs	r0, r3
   1d9d6:	46bd      	mov	sp, r7
   1d9d8:	b002      	add	sp, #8
   1d9da:	bd80      	pop	{r7, pc}
   1d9dc:	20003df8 	.word	0x20003df8
   1d9e0:	20003e14 	.word	0x20003e14

0001d9e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1d9e4:	b590      	push	{r4, r7, lr}
   1d9e6:	b085      	sub	sp, #20
   1d9e8:	af00      	add	r7, sp, #0
   1d9ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1d9ec:	687b      	ldr	r3, [r7, #4]
   1d9ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d9f0:	2300      	movs	r3, #0
   1d9f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1d9f4:	687b      	ldr	r3, [r7, #4]
   1d9f6:	2b00      	cmp	r3, #0
   1d9f8:	d100      	bne.n	1d9fc <xTaskPriorityInherit+0x18>
   1d9fa:	e09d      	b.n	1db38 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1d9fc:	68bb      	ldr	r3, [r7, #8]
   1d9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da00:	4b50      	ldr	r3, [pc, #320]	; (1db44 <xTaskPriorityInherit+0x160>)
   1da02:	681b      	ldr	r3, [r3, #0]
   1da04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1da06:	429a      	cmp	r2, r3
   1da08:	d300      	bcc.n	1da0c <xTaskPriorityInherit+0x28>
   1da0a:	e08c      	b.n	1db26 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1da0c:	68bb      	ldr	r3, [r7, #8]
   1da0e:	699b      	ldr	r3, [r3, #24]
   1da10:	2b00      	cmp	r3, #0
   1da12:	db06      	blt.n	1da22 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1da14:	4b4b      	ldr	r3, [pc, #300]	; (1db44 <xTaskPriorityInherit+0x160>)
   1da16:	681b      	ldr	r3, [r3, #0]
   1da18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1da1a:	2205      	movs	r2, #5
   1da1c:	1ad2      	subs	r2, r2, r3
   1da1e:	68bb      	ldr	r3, [r7, #8]
   1da20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1da22:	68bb      	ldr	r3, [r7, #8]
   1da24:	6959      	ldr	r1, [r3, #20]
   1da26:	68bb      	ldr	r3, [r7, #8]
   1da28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da2a:	0013      	movs	r3, r2
   1da2c:	009b      	lsls	r3, r3, #2
   1da2e:	189b      	adds	r3, r3, r2
   1da30:	009b      	lsls	r3, r3, #2
   1da32:	4a45      	ldr	r2, [pc, #276]	; (1db48 <xTaskPriorityInherit+0x164>)
   1da34:	189b      	adds	r3, r3, r2
   1da36:	4299      	cmp	r1, r3
   1da38:	d101      	bne.n	1da3e <xTaskPriorityInherit+0x5a>
   1da3a:	2301      	movs	r3, #1
   1da3c:	e000      	b.n	1da40 <xTaskPriorityInherit+0x5c>
   1da3e:	2300      	movs	r3, #0
   1da40:	2b00      	cmp	r3, #0
   1da42:	d037      	beq.n	1dab4 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1da44:	68bb      	ldr	r3, [r7, #8]
   1da46:	3304      	adds	r3, #4
   1da48:	0018      	movs	r0, r3
   1da4a:	4b40      	ldr	r3, [pc, #256]	; (1db4c <xTaskPriorityInherit+0x168>)
   1da4c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1da4e:	4b3d      	ldr	r3, [pc, #244]	; (1db44 <xTaskPriorityInherit+0x160>)
   1da50:	681b      	ldr	r3, [r3, #0]
   1da52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da54:	68bb      	ldr	r3, [r7, #8]
   1da56:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1da58:	68bb      	ldr	r3, [r7, #8]
   1da5a:	0018      	movs	r0, r3
   1da5c:	4b3c      	ldr	r3, [pc, #240]	; (1db50 <xTaskPriorityInherit+0x16c>)
   1da5e:	4798      	blx	r3
   1da60:	0003      	movs	r3, r0
   1da62:	001a      	movs	r2, r3
   1da64:	4b3b      	ldr	r3, [pc, #236]	; (1db54 <xTaskPriorityInherit+0x170>)
   1da66:	881b      	ldrh	r3, [r3, #0]
   1da68:	4013      	ands	r3, r2
   1da6a:	b29b      	uxth	r3, r3
   1da6c:	2b00      	cmp	r3, #0
   1da6e:	d008      	beq.n	1da82 <xTaskPriorityInherit+0x9e>
   1da70:	68bb      	ldr	r3, [r7, #8]
   1da72:	0018      	movs	r0, r3
   1da74:	4b38      	ldr	r3, [pc, #224]	; (1db58 <xTaskPriorityInherit+0x174>)
   1da76:	4798      	blx	r3
   1da78:	0003      	movs	r3, r0
   1da7a:	b2db      	uxtb	r3, r3
   1da7c:	0018      	movs	r0, r3
   1da7e:	4b37      	ldr	r3, [pc, #220]	; (1db5c <xTaskPriorityInherit+0x178>)
   1da80:	4798      	blx	r3
   1da82:	68bb      	ldr	r3, [r7, #8]
   1da84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da86:	4b36      	ldr	r3, [pc, #216]	; (1db60 <xTaskPriorityInherit+0x17c>)
   1da88:	681b      	ldr	r3, [r3, #0]
   1da8a:	429a      	cmp	r2, r3
   1da8c:	d903      	bls.n	1da96 <xTaskPriorityInherit+0xb2>
   1da8e:	68bb      	ldr	r3, [r7, #8]
   1da90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da92:	4b33      	ldr	r3, [pc, #204]	; (1db60 <xTaskPriorityInherit+0x17c>)
   1da94:	601a      	str	r2, [r3, #0]
   1da96:	68bb      	ldr	r3, [r7, #8]
   1da98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da9a:	0013      	movs	r3, r2
   1da9c:	009b      	lsls	r3, r3, #2
   1da9e:	189b      	adds	r3, r3, r2
   1daa0:	009b      	lsls	r3, r3, #2
   1daa2:	4a29      	ldr	r2, [pc, #164]	; (1db48 <xTaskPriorityInherit+0x164>)
   1daa4:	189a      	adds	r2, r3, r2
   1daa6:	68bb      	ldr	r3, [r7, #8]
   1daa8:	3304      	adds	r3, #4
   1daaa:	0019      	movs	r1, r3
   1daac:	0010      	movs	r0, r2
   1daae:	4b2d      	ldr	r3, [pc, #180]	; (1db64 <xTaskPriorityInherit+0x180>)
   1dab0:	4798      	blx	r3
   1dab2:	e004      	b.n	1dabe <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1dab4:	4b23      	ldr	r3, [pc, #140]	; (1db44 <xTaskPriorityInherit+0x160>)
   1dab6:	681b      	ldr	r3, [r3, #0]
   1dab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1daba:	68bb      	ldr	r3, [r7, #8]
   1dabc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1dabe:	68bb      	ldr	r3, [r7, #8]
   1dac0:	0018      	movs	r0, r3
   1dac2:	4b23      	ldr	r3, [pc, #140]	; (1db50 <xTaskPriorityInherit+0x16c>)
   1dac4:	4798      	blx	r3
   1dac6:	0003      	movs	r3, r0
   1dac8:	001a      	movs	r2, r3
   1daca:	4b22      	ldr	r3, [pc, #136]	; (1db54 <xTaskPriorityInherit+0x170>)
   1dacc:	881b      	ldrh	r3, [r3, #0]
   1dace:	4013      	ands	r3, r2
   1dad0:	b29b      	uxth	r3, r3
   1dad2:	2b00      	cmp	r3, #0
   1dad4:	d024      	beq.n	1db20 <xTaskPriorityInherit+0x13c>
   1dad6:	68bb      	ldr	r3, [r7, #8]
   1dad8:	0018      	movs	r0, r3
   1dada:	4b1f      	ldr	r3, [pc, #124]	; (1db58 <xTaskPriorityInherit+0x174>)
   1dadc:	4798      	blx	r3
   1dade:	0003      	movs	r3, r0
   1dae0:	b2db      	uxtb	r3, r3
   1dae2:	001c      	movs	r4, r3
   1dae4:	68bb      	ldr	r3, [r7, #8]
   1dae6:	0018      	movs	r0, r3
   1dae8:	4b1b      	ldr	r3, [pc, #108]	; (1db58 <xTaskPriorityInherit+0x174>)
   1daea:	4798      	blx	r3
   1daec:	0003      	movs	r3, r0
   1daee:	b2db      	uxtb	r3, r3
   1daf0:	0019      	movs	r1, r3
   1daf2:	2003      	movs	r0, #3
   1daf4:	4b1c      	ldr	r3, [pc, #112]	; (1db68 <xTaskPriorityInherit+0x184>)
   1daf6:	4798      	blx	r3
   1daf8:	0003      	movs	r3, r0
   1dafa:	0022      	movs	r2, r4
   1dafc:	2103      	movs	r1, #3
   1dafe:	208e      	movs	r0, #142	; 0x8e
   1db00:	4c1a      	ldr	r4, [pc, #104]	; (1db6c <xTaskPriorityInherit+0x188>)
   1db02:	47a0      	blx	r4
   1db04:	68bb      	ldr	r3, [r7, #8]
   1db06:	0018      	movs	r0, r3
   1db08:	4b13      	ldr	r3, [pc, #76]	; (1db58 <xTaskPriorityInherit+0x174>)
   1db0a:	4798      	blx	r3
   1db0c:	0003      	movs	r3, r0
   1db0e:	b2d9      	uxtb	r1, r3
   1db10:	4b0c      	ldr	r3, [pc, #48]	; (1db44 <xTaskPriorityInherit+0x160>)
   1db12:	681b      	ldr	r3, [r3, #0]
   1db14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1db16:	b2db      	uxtb	r3, r3
   1db18:	001a      	movs	r2, r3
   1db1a:	2003      	movs	r0, #3
   1db1c:	4b14      	ldr	r3, [pc, #80]	; (1db70 <xTaskPriorityInherit+0x18c>)
   1db1e:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1db20:	2301      	movs	r3, #1
   1db22:	60fb      	str	r3, [r7, #12]
   1db24:	e008      	b.n	1db38 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1db26:	68bb      	ldr	r3, [r7, #8]
   1db28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1db2a:	4b06      	ldr	r3, [pc, #24]	; (1db44 <xTaskPriorityInherit+0x160>)
   1db2c:	681b      	ldr	r3, [r3, #0]
   1db2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1db30:	429a      	cmp	r2, r3
   1db32:	d201      	bcs.n	1db38 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1db34:	2301      	movs	r3, #1
   1db36:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1db38:	68fb      	ldr	r3, [r7, #12]
	}
   1db3a:	0018      	movs	r0, r3
   1db3c:	46bd      	mov	sp, r7
   1db3e:	b005      	add	sp, #20
   1db40:	bd90      	pop	{r4, r7, pc}
   1db42:	46c0      	nop			; (mov r8, r8)
   1db44:	20003d14 	.word	0x20003d14
   1db48:	20003d18 	.word	0x20003d18
   1db4c:	0001aafb 	.word	0x0001aafb
   1db50:	00018c81 	.word	0x00018c81
   1db54:	20000104 	.word	0x20000104
   1db58:	00018c61 	.word	0x00018c61
   1db5c:	00019431 	.word	0x00019431
   1db60:	20003df4 	.word	0x20003df4
   1db64:	0001aa4b 	.word	0x0001aa4b
   1db68:	00019c39 	.word	0x00019c39
   1db6c:	000197a9 	.word	0x000197a9
   1db70:	00019b95 	.word	0x00019b95

0001db74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1db74:	b590      	push	{r4, r7, lr}
   1db76:	b085      	sub	sp, #20
   1db78:	af00      	add	r7, sp, #0
   1db7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1db7c:	687b      	ldr	r3, [r7, #4]
   1db7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1db80:	2300      	movs	r3, #0
   1db82:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1db84:	687b      	ldr	r3, [r7, #4]
   1db86:	2b00      	cmp	r3, #0
   1db88:	d100      	bne.n	1db8c <xTaskPriorityDisinherit+0x18>
   1db8a:	e089      	b.n	1dca0 <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1db8c:	4b47      	ldr	r3, [pc, #284]	; (1dcac <xTaskPriorityDisinherit+0x138>)
   1db8e:	681b      	ldr	r3, [r3, #0]
   1db90:	68ba      	ldr	r2, [r7, #8]
   1db92:	429a      	cmp	r2, r3
   1db94:	d001      	beq.n	1db9a <xTaskPriorityDisinherit+0x26>
   1db96:	b672      	cpsid	i
   1db98:	e7fe      	b.n	1db98 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1db9a:	68bb      	ldr	r3, [r7, #8]
   1db9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1db9e:	2b00      	cmp	r3, #0
   1dba0:	d101      	bne.n	1dba6 <xTaskPriorityDisinherit+0x32>
   1dba2:	b672      	cpsid	i
   1dba4:	e7fe      	b.n	1dba4 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1dba6:	68bb      	ldr	r3, [r7, #8]
   1dba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dbaa:	1e5a      	subs	r2, r3, #1
   1dbac:	68bb      	ldr	r3, [r7, #8]
   1dbae:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1dbb0:	68bb      	ldr	r3, [r7, #8]
   1dbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dbb4:	68bb      	ldr	r3, [r7, #8]
   1dbb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dbb8:	429a      	cmp	r2, r3
   1dbba:	d071      	beq.n	1dca0 <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1dbbc:	68bb      	ldr	r3, [r7, #8]
   1dbbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dbc0:	2b00      	cmp	r3, #0
   1dbc2:	d16d      	bne.n	1dca0 <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1dbc4:	68bb      	ldr	r3, [r7, #8]
   1dbc6:	3304      	adds	r3, #4
   1dbc8:	0018      	movs	r0, r3
   1dbca:	4b39      	ldr	r3, [pc, #228]	; (1dcb0 <xTaskPriorityDisinherit+0x13c>)
   1dbcc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1dbce:	68bb      	ldr	r3, [r7, #8]
   1dbd0:	0018      	movs	r0, r3
   1dbd2:	4b38      	ldr	r3, [pc, #224]	; (1dcb4 <xTaskPriorityDisinherit+0x140>)
   1dbd4:	4798      	blx	r3
   1dbd6:	0003      	movs	r3, r0
   1dbd8:	001a      	movs	r2, r3
   1dbda:	4b37      	ldr	r3, [pc, #220]	; (1dcb8 <xTaskPriorityDisinherit+0x144>)
   1dbdc:	881b      	ldrh	r3, [r3, #0]
   1dbde:	4013      	ands	r3, r2
   1dbe0:	b29b      	uxth	r3, r3
   1dbe2:	2b00      	cmp	r3, #0
   1dbe4:	d023      	beq.n	1dc2e <xTaskPriorityDisinherit+0xba>
   1dbe6:	68bb      	ldr	r3, [r7, #8]
   1dbe8:	0018      	movs	r0, r3
   1dbea:	4b34      	ldr	r3, [pc, #208]	; (1dcbc <xTaskPriorityDisinherit+0x148>)
   1dbec:	4798      	blx	r3
   1dbee:	0003      	movs	r3, r0
   1dbf0:	b2db      	uxtb	r3, r3
   1dbf2:	001c      	movs	r4, r3
   1dbf4:	68bb      	ldr	r3, [r7, #8]
   1dbf6:	0018      	movs	r0, r3
   1dbf8:	4b30      	ldr	r3, [pc, #192]	; (1dcbc <xTaskPriorityDisinherit+0x148>)
   1dbfa:	4798      	blx	r3
   1dbfc:	0003      	movs	r3, r0
   1dbfe:	b2db      	uxtb	r3, r3
   1dc00:	0019      	movs	r1, r3
   1dc02:	2003      	movs	r0, #3
   1dc04:	4b2e      	ldr	r3, [pc, #184]	; (1dcc0 <xTaskPriorityDisinherit+0x14c>)
   1dc06:	4798      	blx	r3
   1dc08:	0003      	movs	r3, r0
   1dc0a:	0022      	movs	r2, r4
   1dc0c:	2103      	movs	r1, #3
   1dc0e:	208f      	movs	r0, #143	; 0x8f
   1dc10:	4c2c      	ldr	r4, [pc, #176]	; (1dcc4 <xTaskPriorityDisinherit+0x150>)
   1dc12:	47a0      	blx	r4
   1dc14:	68bb      	ldr	r3, [r7, #8]
   1dc16:	0018      	movs	r0, r3
   1dc18:	4b28      	ldr	r3, [pc, #160]	; (1dcbc <xTaskPriorityDisinherit+0x148>)
   1dc1a:	4798      	blx	r3
   1dc1c:	0003      	movs	r3, r0
   1dc1e:	b2d9      	uxtb	r1, r3
   1dc20:	68bb      	ldr	r3, [r7, #8]
   1dc22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dc24:	b2db      	uxtb	r3, r3
   1dc26:	001a      	movs	r2, r3
   1dc28:	2003      	movs	r0, #3
   1dc2a:	4b27      	ldr	r3, [pc, #156]	; (1dcc8 <xTaskPriorityDisinherit+0x154>)
   1dc2c:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1dc2e:	68bb      	ldr	r3, [r7, #8]
   1dc30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1dc32:	68bb      	ldr	r3, [r7, #8]
   1dc34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dc36:	68bb      	ldr	r3, [r7, #8]
   1dc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dc3a:	2205      	movs	r2, #5
   1dc3c:	1ad2      	subs	r2, r2, r3
   1dc3e:	68bb      	ldr	r3, [r7, #8]
   1dc40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1dc42:	68bb      	ldr	r3, [r7, #8]
   1dc44:	0018      	movs	r0, r3
   1dc46:	4b1b      	ldr	r3, [pc, #108]	; (1dcb4 <xTaskPriorityDisinherit+0x140>)
   1dc48:	4798      	blx	r3
   1dc4a:	0003      	movs	r3, r0
   1dc4c:	001a      	movs	r2, r3
   1dc4e:	4b1a      	ldr	r3, [pc, #104]	; (1dcb8 <xTaskPriorityDisinherit+0x144>)
   1dc50:	881b      	ldrh	r3, [r3, #0]
   1dc52:	4013      	ands	r3, r2
   1dc54:	b29b      	uxth	r3, r3
   1dc56:	2b00      	cmp	r3, #0
   1dc58:	d008      	beq.n	1dc6c <xTaskPriorityDisinherit+0xf8>
   1dc5a:	68bb      	ldr	r3, [r7, #8]
   1dc5c:	0018      	movs	r0, r3
   1dc5e:	4b17      	ldr	r3, [pc, #92]	; (1dcbc <xTaskPriorityDisinherit+0x148>)
   1dc60:	4798      	blx	r3
   1dc62:	0003      	movs	r3, r0
   1dc64:	b2db      	uxtb	r3, r3
   1dc66:	0018      	movs	r0, r3
   1dc68:	4b18      	ldr	r3, [pc, #96]	; (1dccc <xTaskPriorityDisinherit+0x158>)
   1dc6a:	4798      	blx	r3
   1dc6c:	68bb      	ldr	r3, [r7, #8]
   1dc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc70:	4b17      	ldr	r3, [pc, #92]	; (1dcd0 <xTaskPriorityDisinherit+0x15c>)
   1dc72:	681b      	ldr	r3, [r3, #0]
   1dc74:	429a      	cmp	r2, r3
   1dc76:	d903      	bls.n	1dc80 <xTaskPriorityDisinherit+0x10c>
   1dc78:	68bb      	ldr	r3, [r7, #8]
   1dc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc7c:	4b14      	ldr	r3, [pc, #80]	; (1dcd0 <xTaskPriorityDisinherit+0x15c>)
   1dc7e:	601a      	str	r2, [r3, #0]
   1dc80:	68bb      	ldr	r3, [r7, #8]
   1dc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc84:	0013      	movs	r3, r2
   1dc86:	009b      	lsls	r3, r3, #2
   1dc88:	189b      	adds	r3, r3, r2
   1dc8a:	009b      	lsls	r3, r3, #2
   1dc8c:	4a11      	ldr	r2, [pc, #68]	; (1dcd4 <xTaskPriorityDisinherit+0x160>)
   1dc8e:	189a      	adds	r2, r3, r2
   1dc90:	68bb      	ldr	r3, [r7, #8]
   1dc92:	3304      	adds	r3, #4
   1dc94:	0019      	movs	r1, r3
   1dc96:	0010      	movs	r0, r2
   1dc98:	4b0f      	ldr	r3, [pc, #60]	; (1dcd8 <xTaskPriorityDisinherit+0x164>)
   1dc9a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1dc9c:	2301      	movs	r3, #1
   1dc9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1dca0:	68fb      	ldr	r3, [r7, #12]
	}
   1dca2:	0018      	movs	r0, r3
   1dca4:	46bd      	mov	sp, r7
   1dca6:	b005      	add	sp, #20
   1dca8:	bd90      	pop	{r4, r7, pc}
   1dcaa:	46c0      	nop			; (mov r8, r8)
   1dcac:	20003d14 	.word	0x20003d14
   1dcb0:	0001aafb 	.word	0x0001aafb
   1dcb4:	00018c81 	.word	0x00018c81
   1dcb8:	20000104 	.word	0x20000104
   1dcbc:	00018c61 	.word	0x00018c61
   1dcc0:	00019c39 	.word	0x00019c39
   1dcc4:	000197a9 	.word	0x000197a9
   1dcc8:	00019b95 	.word	0x00019b95
   1dccc:	00019431 	.word	0x00019431
   1dcd0:	20003df4 	.word	0x20003df4
   1dcd4:	20003d18 	.word	0x20003d18
   1dcd8:	0001aa4b 	.word	0x0001aa4b

0001dcdc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1dcdc:	b590      	push	{r4, r7, lr}
   1dcde:	b087      	sub	sp, #28
   1dce0:	af00      	add	r7, sp, #0
   1dce2:	6078      	str	r0, [r7, #4]
   1dce4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1dce6:	687b      	ldr	r3, [r7, #4]
   1dce8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1dcea:	2301      	movs	r3, #1
   1dcec:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1dcee:	687b      	ldr	r3, [r7, #4]
   1dcf0:	2b00      	cmp	r3, #0
   1dcf2:	d100      	bne.n	1dcf6 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1dcf4:	e0a4      	b.n	1de40 <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1dcf6:	693b      	ldr	r3, [r7, #16]
   1dcf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dcfa:	2b00      	cmp	r3, #0
   1dcfc:	d101      	bne.n	1dd02 <vTaskPriorityDisinheritAfterTimeout+0x26>
   1dcfe:	b672      	cpsid	i
   1dd00:	e7fe      	b.n	1dd00 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1dd02:	693b      	ldr	r3, [r7, #16]
   1dd04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1dd06:	683b      	ldr	r3, [r7, #0]
   1dd08:	429a      	cmp	r2, r3
   1dd0a:	d202      	bcs.n	1dd12 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1dd0c:	683b      	ldr	r3, [r7, #0]
   1dd0e:	617b      	str	r3, [r7, #20]
   1dd10:	e002      	b.n	1dd18 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1dd12:	693b      	ldr	r3, [r7, #16]
   1dd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dd16:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1dd18:	693b      	ldr	r3, [r7, #16]
   1dd1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd1c:	697b      	ldr	r3, [r7, #20]
   1dd1e:	429a      	cmp	r2, r3
   1dd20:	d100      	bne.n	1dd24 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1dd22:	e08d      	b.n	1de40 <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1dd24:	693b      	ldr	r3, [r7, #16]
   1dd26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1dd28:	68fb      	ldr	r3, [r7, #12]
   1dd2a:	429a      	cmp	r2, r3
   1dd2c:	d000      	beq.n	1dd30 <vTaskPriorityDisinheritAfterTimeout+0x54>
   1dd2e:	e087      	b.n	1de40 <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1dd30:	4b45      	ldr	r3, [pc, #276]	; (1de48 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1dd32:	681b      	ldr	r3, [r3, #0]
   1dd34:	693a      	ldr	r2, [r7, #16]
   1dd36:	429a      	cmp	r2, r3
   1dd38:	d101      	bne.n	1dd3e <vTaskPriorityDisinheritAfterTimeout+0x62>
   1dd3a:	b672      	cpsid	i
   1dd3c:	e7fe      	b.n	1dd3c <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1dd3e:	693b      	ldr	r3, [r7, #16]
   1dd40:	0018      	movs	r0, r3
   1dd42:	4b42      	ldr	r3, [pc, #264]	; (1de4c <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1dd44:	4798      	blx	r3
   1dd46:	0003      	movs	r3, r0
   1dd48:	001a      	movs	r2, r3
   1dd4a:	4b41      	ldr	r3, [pc, #260]	; (1de50 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1dd4c:	881b      	ldrh	r3, [r3, #0]
   1dd4e:	4013      	ands	r3, r2
   1dd50:	b29b      	uxth	r3, r3
   1dd52:	2b00      	cmp	r3, #0
   1dd54:	d023      	beq.n	1dd9e <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1dd56:	693b      	ldr	r3, [r7, #16]
   1dd58:	0018      	movs	r0, r3
   1dd5a:	4b3e      	ldr	r3, [pc, #248]	; (1de54 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dd5c:	4798      	blx	r3
   1dd5e:	0003      	movs	r3, r0
   1dd60:	b2db      	uxtb	r3, r3
   1dd62:	001c      	movs	r4, r3
   1dd64:	693b      	ldr	r3, [r7, #16]
   1dd66:	0018      	movs	r0, r3
   1dd68:	4b3a      	ldr	r3, [pc, #232]	; (1de54 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dd6a:	4798      	blx	r3
   1dd6c:	0003      	movs	r3, r0
   1dd6e:	b2db      	uxtb	r3, r3
   1dd70:	0019      	movs	r1, r3
   1dd72:	2003      	movs	r0, #3
   1dd74:	4b38      	ldr	r3, [pc, #224]	; (1de58 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1dd76:	4798      	blx	r3
   1dd78:	0003      	movs	r3, r0
   1dd7a:	0022      	movs	r2, r4
   1dd7c:	2103      	movs	r1, #3
   1dd7e:	208f      	movs	r0, #143	; 0x8f
   1dd80:	4c36      	ldr	r4, [pc, #216]	; (1de5c <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1dd82:	47a0      	blx	r4
   1dd84:	693b      	ldr	r3, [r7, #16]
   1dd86:	0018      	movs	r0, r3
   1dd88:	4b32      	ldr	r3, [pc, #200]	; (1de54 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dd8a:	4798      	blx	r3
   1dd8c:	0003      	movs	r3, r0
   1dd8e:	b2d9      	uxtb	r1, r3
   1dd90:	693b      	ldr	r3, [r7, #16]
   1dd92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dd94:	b2db      	uxtb	r3, r3
   1dd96:	001a      	movs	r2, r3
   1dd98:	2003      	movs	r0, #3
   1dd9a:	4b31      	ldr	r3, [pc, #196]	; (1de60 <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1dd9c:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1dd9e:	693b      	ldr	r3, [r7, #16]
   1dda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dda2:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1dda4:	693b      	ldr	r3, [r7, #16]
   1dda6:	697a      	ldr	r2, [r7, #20]
   1dda8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1ddaa:	693b      	ldr	r3, [r7, #16]
   1ddac:	699b      	ldr	r3, [r3, #24]
   1ddae:	2b00      	cmp	r3, #0
   1ddb0:	db04      	blt.n	1ddbc <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ddb2:	697b      	ldr	r3, [r7, #20]
   1ddb4:	2205      	movs	r2, #5
   1ddb6:	1ad2      	subs	r2, r2, r3
   1ddb8:	693b      	ldr	r3, [r7, #16]
   1ddba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1ddbc:	693b      	ldr	r3, [r7, #16]
   1ddbe:	6959      	ldr	r1, [r3, #20]
   1ddc0:	68ba      	ldr	r2, [r7, #8]
   1ddc2:	0013      	movs	r3, r2
   1ddc4:	009b      	lsls	r3, r3, #2
   1ddc6:	189b      	adds	r3, r3, r2
   1ddc8:	009b      	lsls	r3, r3, #2
   1ddca:	4a26      	ldr	r2, [pc, #152]	; (1de64 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1ddcc:	189b      	adds	r3, r3, r2
   1ddce:	4299      	cmp	r1, r3
   1ddd0:	d101      	bne.n	1ddd6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1ddd2:	2301      	movs	r3, #1
   1ddd4:	e000      	b.n	1ddd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1ddd6:	2300      	movs	r3, #0
   1ddd8:	2b00      	cmp	r3, #0
   1ddda:	d031      	beq.n	1de40 <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1dddc:	693b      	ldr	r3, [r7, #16]
   1ddde:	3304      	adds	r3, #4
   1dde0:	0018      	movs	r0, r3
   1dde2:	4b21      	ldr	r3, [pc, #132]	; (1de68 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1dde4:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1dde6:	693b      	ldr	r3, [r7, #16]
   1dde8:	0018      	movs	r0, r3
   1ddea:	4b18      	ldr	r3, [pc, #96]	; (1de4c <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1ddec:	4798      	blx	r3
   1ddee:	0003      	movs	r3, r0
   1ddf0:	001a      	movs	r2, r3
   1ddf2:	4b17      	ldr	r3, [pc, #92]	; (1de50 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1ddf4:	881b      	ldrh	r3, [r3, #0]
   1ddf6:	4013      	ands	r3, r2
   1ddf8:	b29b      	uxth	r3, r3
   1ddfa:	2b00      	cmp	r3, #0
   1ddfc:	d008      	beq.n	1de10 <vTaskPriorityDisinheritAfterTimeout+0x134>
   1ddfe:	693b      	ldr	r3, [r7, #16]
   1de00:	0018      	movs	r0, r3
   1de02:	4b14      	ldr	r3, [pc, #80]	; (1de54 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1de04:	4798      	blx	r3
   1de06:	0003      	movs	r3, r0
   1de08:	b2db      	uxtb	r3, r3
   1de0a:	0018      	movs	r0, r3
   1de0c:	4b17      	ldr	r3, [pc, #92]	; (1de6c <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1de0e:	4798      	blx	r3
   1de10:	693b      	ldr	r3, [r7, #16]
   1de12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de14:	4b16      	ldr	r3, [pc, #88]	; (1de70 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1de16:	681b      	ldr	r3, [r3, #0]
   1de18:	429a      	cmp	r2, r3
   1de1a:	d903      	bls.n	1de24 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1de1c:	693b      	ldr	r3, [r7, #16]
   1de1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de20:	4b13      	ldr	r3, [pc, #76]	; (1de70 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1de22:	601a      	str	r2, [r3, #0]
   1de24:	693b      	ldr	r3, [r7, #16]
   1de26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de28:	0013      	movs	r3, r2
   1de2a:	009b      	lsls	r3, r3, #2
   1de2c:	189b      	adds	r3, r3, r2
   1de2e:	009b      	lsls	r3, r3, #2
   1de30:	4a0c      	ldr	r2, [pc, #48]	; (1de64 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1de32:	189a      	adds	r2, r3, r2
   1de34:	693b      	ldr	r3, [r7, #16]
   1de36:	3304      	adds	r3, #4
   1de38:	0019      	movs	r1, r3
   1de3a:	0010      	movs	r0, r2
   1de3c:	4b0d      	ldr	r3, [pc, #52]	; (1de74 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1de3e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1de40:	46c0      	nop			; (mov r8, r8)
   1de42:	46bd      	mov	sp, r7
   1de44:	b007      	add	sp, #28
   1de46:	bd90      	pop	{r4, r7, pc}
   1de48:	20003d14 	.word	0x20003d14
   1de4c:	00018c81 	.word	0x00018c81
   1de50:	20000104 	.word	0x20000104
   1de54:	00018c61 	.word	0x00018c61
   1de58:	00019c39 	.word	0x00019c39
   1de5c:	000197a9 	.word	0x000197a9
   1de60:	00019b95 	.word	0x00019b95
   1de64:	20003d18 	.word	0x20003d18
   1de68:	0001aafb 	.word	0x0001aafb
   1de6c:	00019431 	.word	0x00019431
   1de70:	20003df4 	.word	0x20003df4
   1de74:	0001aa4b 	.word	0x0001aa4b

0001de78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1de78:	b580      	push	{r7, lr}
   1de7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1de7c:	4b06      	ldr	r3, [pc, #24]	; (1de98 <pvTaskIncrementMutexHeldCount+0x20>)
   1de7e:	681b      	ldr	r3, [r3, #0]
   1de80:	2b00      	cmp	r3, #0
   1de82:	d004      	beq.n	1de8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1de84:	4b04      	ldr	r3, [pc, #16]	; (1de98 <pvTaskIncrementMutexHeldCount+0x20>)
   1de86:	681b      	ldr	r3, [r3, #0]
   1de88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1de8a:	3201      	adds	r2, #1
   1de8c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1de8e:	4b02      	ldr	r3, [pc, #8]	; (1de98 <pvTaskIncrementMutexHeldCount+0x20>)
   1de90:	681b      	ldr	r3, [r3, #0]
	}
   1de92:	0018      	movs	r0, r3
   1de94:	46bd      	mov	sp, r7
   1de96:	bd80      	pop	{r7, pc}
   1de98:	20003d14 	.word	0x20003d14

0001de9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1de9c:	b580      	push	{r7, lr}
   1de9e:	b084      	sub	sp, #16
   1dea0:	af00      	add	r7, sp, #0
   1dea2:	6078      	str	r0, [r7, #4]
   1dea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1dea6:	4b21      	ldr	r3, [pc, #132]	; (1df2c <prvAddCurrentTaskToDelayedList+0x90>)
   1dea8:	681b      	ldr	r3, [r3, #0]
   1deaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1deac:	4b20      	ldr	r3, [pc, #128]	; (1df30 <prvAddCurrentTaskToDelayedList+0x94>)
   1deae:	681b      	ldr	r3, [r3, #0]
   1deb0:	3304      	adds	r3, #4
   1deb2:	0018      	movs	r0, r3
   1deb4:	4b1f      	ldr	r3, [pc, #124]	; (1df34 <prvAddCurrentTaskToDelayedList+0x98>)
   1deb6:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1deb8:	687b      	ldr	r3, [r7, #4]
   1deba:	3301      	adds	r3, #1
   1debc:	d10b      	bne.n	1ded6 <prvAddCurrentTaskToDelayedList+0x3a>
   1debe:	683b      	ldr	r3, [r7, #0]
   1dec0:	2b00      	cmp	r3, #0
   1dec2:	d008      	beq.n	1ded6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1dec4:	4b1a      	ldr	r3, [pc, #104]	; (1df30 <prvAddCurrentTaskToDelayedList+0x94>)
   1dec6:	681b      	ldr	r3, [r3, #0]
   1dec8:	1d1a      	adds	r2, r3, #4
   1deca:	4b1b      	ldr	r3, [pc, #108]	; (1df38 <prvAddCurrentTaskToDelayedList+0x9c>)
   1decc:	0011      	movs	r1, r2
   1dece:	0018      	movs	r0, r3
   1ded0:	4b1a      	ldr	r3, [pc, #104]	; (1df3c <prvAddCurrentTaskToDelayedList+0xa0>)
   1ded2:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1ded4:	e026      	b.n	1df24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1ded6:	68fa      	ldr	r2, [r7, #12]
   1ded8:	687b      	ldr	r3, [r7, #4]
   1deda:	18d3      	adds	r3, r2, r3
   1dedc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1dede:	4b14      	ldr	r3, [pc, #80]	; (1df30 <prvAddCurrentTaskToDelayedList+0x94>)
   1dee0:	681b      	ldr	r3, [r3, #0]
   1dee2:	68ba      	ldr	r2, [r7, #8]
   1dee4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1dee6:	68ba      	ldr	r2, [r7, #8]
   1dee8:	68fb      	ldr	r3, [r7, #12]
   1deea:	429a      	cmp	r2, r3
   1deec:	d209      	bcs.n	1df02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1deee:	4b14      	ldr	r3, [pc, #80]	; (1df40 <prvAddCurrentTaskToDelayedList+0xa4>)
   1def0:	681a      	ldr	r2, [r3, #0]
   1def2:	4b0f      	ldr	r3, [pc, #60]	; (1df30 <prvAddCurrentTaskToDelayedList+0x94>)
   1def4:	681b      	ldr	r3, [r3, #0]
   1def6:	3304      	adds	r3, #4
   1def8:	0019      	movs	r1, r3
   1defa:	0010      	movs	r0, r2
   1defc:	4b11      	ldr	r3, [pc, #68]	; (1df44 <prvAddCurrentTaskToDelayedList+0xa8>)
   1defe:	4798      	blx	r3
}
   1df00:	e010      	b.n	1df24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1df02:	4b11      	ldr	r3, [pc, #68]	; (1df48 <prvAddCurrentTaskToDelayedList+0xac>)
   1df04:	681a      	ldr	r2, [r3, #0]
   1df06:	4b0a      	ldr	r3, [pc, #40]	; (1df30 <prvAddCurrentTaskToDelayedList+0x94>)
   1df08:	681b      	ldr	r3, [r3, #0]
   1df0a:	3304      	adds	r3, #4
   1df0c:	0019      	movs	r1, r3
   1df0e:	0010      	movs	r0, r2
   1df10:	4b0c      	ldr	r3, [pc, #48]	; (1df44 <prvAddCurrentTaskToDelayedList+0xa8>)
   1df12:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1df14:	4b0d      	ldr	r3, [pc, #52]	; (1df4c <prvAddCurrentTaskToDelayedList+0xb0>)
   1df16:	681b      	ldr	r3, [r3, #0]
   1df18:	68ba      	ldr	r2, [r7, #8]
   1df1a:	429a      	cmp	r2, r3
   1df1c:	d202      	bcs.n	1df24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1df1e:	4b0b      	ldr	r3, [pc, #44]	; (1df4c <prvAddCurrentTaskToDelayedList+0xb0>)
   1df20:	68ba      	ldr	r2, [r7, #8]
   1df22:	601a      	str	r2, [r3, #0]
}
   1df24:	46c0      	nop			; (mov r8, r8)
   1df26:	46bd      	mov	sp, r7
   1df28:	b004      	add	sp, #16
   1df2a:	bd80      	pop	{r7, pc}
   1df2c:	20003df0 	.word	0x20003df0
   1df30:	20003d14 	.word	0x20003d14
   1df34:	0001aafb 	.word	0x0001aafb
   1df38:	20003dd8 	.word	0x20003dd8
   1df3c:	0001aa4b 	.word	0x0001aa4b
   1df40:	20003da8 	.word	0x20003da8
   1df44:	0001aa8f 	.word	0x0001aa8f
   1df48:	20003da4 	.word	0x20003da4
   1df4c:	20003e0c 	.word	0x20003e0c

0001df50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1df50:	b590      	push	{r4, r7, lr}
   1df52:	b085      	sub	sp, #20
   1df54:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1df56:	2300      	movs	r3, #0
   1df58:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1df5a:	4b0e      	ldr	r3, [pc, #56]	; (1df94 <xTimerCreateTimerTask+0x44>)
   1df5c:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1df5e:	4b0e      	ldr	r3, [pc, #56]	; (1df98 <xTimerCreateTimerTask+0x48>)
   1df60:	681b      	ldr	r3, [r3, #0]
   1df62:	2b00      	cmp	r3, #0
   1df64:	d00b      	beq.n	1df7e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1df66:	490d      	ldr	r1, [pc, #52]	; (1df9c <xTimerCreateTimerTask+0x4c>)
   1df68:	480d      	ldr	r0, [pc, #52]	; (1dfa0 <xTimerCreateTimerTask+0x50>)
   1df6a:	4b0e      	ldr	r3, [pc, #56]	; (1dfa4 <xTimerCreateTimerTask+0x54>)
   1df6c:	9301      	str	r3, [sp, #4]
   1df6e:	2302      	movs	r3, #2
   1df70:	9300      	str	r3, [sp, #0]
   1df72:	2300      	movs	r3, #0
   1df74:	2280      	movs	r2, #128	; 0x80
   1df76:	4c0c      	ldr	r4, [pc, #48]	; (1dfa8 <xTimerCreateTimerTask+0x58>)
   1df78:	47a0      	blx	r4
   1df7a:	0003      	movs	r3, r0
   1df7c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1df7e:	687b      	ldr	r3, [r7, #4]
   1df80:	2b00      	cmp	r3, #0
   1df82:	d101      	bne.n	1df88 <xTimerCreateTimerTask+0x38>
   1df84:	b672      	cpsid	i
   1df86:	e7fe      	b.n	1df86 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1df88:	687b      	ldr	r3, [r7, #4]
}
   1df8a:	0018      	movs	r0, r3
   1df8c:	46bd      	mov	sp, r7
   1df8e:	b003      	add	sp, #12
   1df90:	bd90      	pop	{r4, r7, pc}
   1df92:	46c0      	nop			; (mov r8, r8)
   1df94:	0001e499 	.word	0x0001e499
   1df98:	20003e48 	.word	0x20003e48
   1df9c:	00038dc4 	.word	0x00038dc4
   1dfa0:	0001e0d1 	.word	0x0001e0d1
   1dfa4:	20003e4c 	.word	0x20003e4c
   1dfa8:	0001c8e9 	.word	0x0001c8e9

0001dfac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1dfac:	b590      	push	{r4, r7, lr}
   1dfae:	b089      	sub	sp, #36	; 0x24
   1dfb0:	af00      	add	r7, sp, #0
   1dfb2:	60f8      	str	r0, [r7, #12]
   1dfb4:	60b9      	str	r1, [r7, #8]
   1dfb6:	607a      	str	r2, [r7, #4]
   1dfb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1dfba:	2300      	movs	r3, #0
   1dfbc:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1dfbe:	68fb      	ldr	r3, [r7, #12]
   1dfc0:	2b00      	cmp	r3, #0
   1dfc2:	d101      	bne.n	1dfc8 <xTimerGenericCommand+0x1c>
   1dfc4:	b672      	cpsid	i
   1dfc6:	e7fe      	b.n	1dfc6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1dfc8:	4b1e      	ldr	r3, [pc, #120]	; (1e044 <xTimerGenericCommand+0x98>)
   1dfca:	681b      	ldr	r3, [r3, #0]
   1dfcc:	2b00      	cmp	r3, #0
   1dfce:	d033      	beq.n	1e038 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1dfd0:	2310      	movs	r3, #16
   1dfd2:	18fb      	adds	r3, r7, r3
   1dfd4:	68ba      	ldr	r2, [r7, #8]
   1dfd6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1dfd8:	2310      	movs	r3, #16
   1dfda:	18fb      	adds	r3, r7, r3
   1dfdc:	687a      	ldr	r2, [r7, #4]
   1dfde:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1dfe0:	2310      	movs	r3, #16
   1dfe2:	18fb      	adds	r3, r7, r3
   1dfe4:	68fa      	ldr	r2, [r7, #12]
   1dfe6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1dfe8:	68bb      	ldr	r3, [r7, #8]
   1dfea:	2b05      	cmp	r3, #5
   1dfec:	dc1a      	bgt.n	1e024 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1dfee:	4b16      	ldr	r3, [pc, #88]	; (1e048 <xTimerGenericCommand+0x9c>)
   1dff0:	4798      	blx	r3
   1dff2:	0003      	movs	r3, r0
   1dff4:	2b02      	cmp	r3, #2
   1dff6:	d10a      	bne.n	1e00e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1dff8:	4b12      	ldr	r3, [pc, #72]	; (1e044 <xTimerGenericCommand+0x98>)
   1dffa:	6818      	ldr	r0, [r3, #0]
   1dffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1dffe:	2310      	movs	r3, #16
   1e000:	18f9      	adds	r1, r7, r3
   1e002:	2300      	movs	r3, #0
   1e004:	4c11      	ldr	r4, [pc, #68]	; (1e04c <xTimerGenericCommand+0xa0>)
   1e006:	47a0      	blx	r4
   1e008:	0003      	movs	r3, r0
   1e00a:	61fb      	str	r3, [r7, #28]
   1e00c:	e014      	b.n	1e038 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1e00e:	4b0d      	ldr	r3, [pc, #52]	; (1e044 <xTimerGenericCommand+0x98>)
   1e010:	6818      	ldr	r0, [r3, #0]
   1e012:	2310      	movs	r3, #16
   1e014:	18f9      	adds	r1, r7, r3
   1e016:	2300      	movs	r3, #0
   1e018:	2200      	movs	r2, #0
   1e01a:	4c0c      	ldr	r4, [pc, #48]	; (1e04c <xTimerGenericCommand+0xa0>)
   1e01c:	47a0      	blx	r4
   1e01e:	0003      	movs	r3, r0
   1e020:	61fb      	str	r3, [r7, #28]
   1e022:	e009      	b.n	1e038 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1e024:	4b07      	ldr	r3, [pc, #28]	; (1e044 <xTimerGenericCommand+0x98>)
   1e026:	6818      	ldr	r0, [r3, #0]
   1e028:	683a      	ldr	r2, [r7, #0]
   1e02a:	2310      	movs	r3, #16
   1e02c:	18f9      	adds	r1, r7, r3
   1e02e:	2300      	movs	r3, #0
   1e030:	4c07      	ldr	r4, [pc, #28]	; (1e050 <xTimerGenericCommand+0xa4>)
   1e032:	47a0      	blx	r4
   1e034:	0003      	movs	r3, r0
   1e036:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1e038:	69fb      	ldr	r3, [r7, #28]
}
   1e03a:	0018      	movs	r0, r3
   1e03c:	46bd      	mov	sp, r7
   1e03e:	b009      	add	sp, #36	; 0x24
   1e040:	bd90      	pop	{r4, r7, pc}
   1e042:	46c0      	nop			; (mov r8, r8)
   1e044:	20003e48 	.word	0x20003e48
   1e048:	0001d9ad 	.word	0x0001d9ad
   1e04c:	0001b221 	.word	0x0001b221
   1e050:	0001b681 	.word	0x0001b681

0001e054 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1e054:	b590      	push	{r4, r7, lr}
   1e056:	b087      	sub	sp, #28
   1e058:	af02      	add	r7, sp, #8
   1e05a:	6078      	str	r0, [r7, #4]
   1e05c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e05e:	4b18      	ldr	r3, [pc, #96]	; (1e0c0 <prvProcessExpiredTimer+0x6c>)
   1e060:	681b      	ldr	r3, [r3, #0]
   1e062:	68db      	ldr	r3, [r3, #12]
   1e064:	68db      	ldr	r3, [r3, #12]
   1e066:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e068:	68fb      	ldr	r3, [r7, #12]
   1e06a:	3304      	adds	r3, #4
   1e06c:	0018      	movs	r0, r3
   1e06e:	4b15      	ldr	r3, [pc, #84]	; (1e0c4 <prvProcessExpiredTimer+0x70>)
   1e070:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e072:	68fb      	ldr	r3, [r7, #12]
   1e074:	69db      	ldr	r3, [r3, #28]
   1e076:	2b01      	cmp	r3, #1
   1e078:	d119      	bne.n	1e0ae <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1e07a:	68fb      	ldr	r3, [r7, #12]
   1e07c:	699a      	ldr	r2, [r3, #24]
   1e07e:	687b      	ldr	r3, [r7, #4]
   1e080:	18d1      	adds	r1, r2, r3
   1e082:	687b      	ldr	r3, [r7, #4]
   1e084:	683a      	ldr	r2, [r7, #0]
   1e086:	68f8      	ldr	r0, [r7, #12]
   1e088:	4c0f      	ldr	r4, [pc, #60]	; (1e0c8 <prvProcessExpiredTimer+0x74>)
   1e08a:	47a0      	blx	r4
   1e08c:	1e03      	subs	r3, r0, #0
   1e08e:	d00e      	beq.n	1e0ae <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e090:	687a      	ldr	r2, [r7, #4]
   1e092:	68f8      	ldr	r0, [r7, #12]
   1e094:	2300      	movs	r3, #0
   1e096:	9300      	str	r3, [sp, #0]
   1e098:	2300      	movs	r3, #0
   1e09a:	2100      	movs	r1, #0
   1e09c:	4c0b      	ldr	r4, [pc, #44]	; (1e0cc <prvProcessExpiredTimer+0x78>)
   1e09e:	47a0      	blx	r4
   1e0a0:	0003      	movs	r3, r0
   1e0a2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1e0a4:	68bb      	ldr	r3, [r7, #8]
   1e0a6:	2b00      	cmp	r3, #0
   1e0a8:	d101      	bne.n	1e0ae <prvProcessExpiredTimer+0x5a>
   1e0aa:	b672      	cpsid	i
   1e0ac:	e7fe      	b.n	1e0ac <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e0ae:	68fb      	ldr	r3, [r7, #12]
   1e0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e0b2:	68fa      	ldr	r2, [r7, #12]
   1e0b4:	0010      	movs	r0, r2
   1e0b6:	4798      	blx	r3
}
   1e0b8:	46c0      	nop			; (mov r8, r8)
   1e0ba:	46bd      	mov	sp, r7
   1e0bc:	b005      	add	sp, #20
   1e0be:	bd90      	pop	{r4, r7, pc}
   1e0c0:	20003e40 	.word	0x20003e40
   1e0c4:	0001aafb 	.word	0x0001aafb
   1e0c8:	0001e239 	.word	0x0001e239
   1e0cc:	0001dfad 	.word	0x0001dfad

0001e0d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1e0d0:	b580      	push	{r7, lr}
   1e0d2:	b084      	sub	sp, #16
   1e0d4:	af00      	add	r7, sp, #0
   1e0d6:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1e0d8:	4b08      	ldr	r3, [pc, #32]	; (1e0fc <prvTimerTask+0x2c>)
   1e0da:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e0dc:	2308      	movs	r3, #8
   1e0de:	18fb      	adds	r3, r7, r3
   1e0e0:	0018      	movs	r0, r3
   1e0e2:	4b07      	ldr	r3, [pc, #28]	; (1e100 <prvTimerTask+0x30>)
   1e0e4:	4798      	blx	r3
   1e0e6:	0003      	movs	r3, r0
   1e0e8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1e0ea:	68ba      	ldr	r2, [r7, #8]
   1e0ec:	68fb      	ldr	r3, [r7, #12]
   1e0ee:	0011      	movs	r1, r2
   1e0f0:	0018      	movs	r0, r3
   1e0f2:	4b04      	ldr	r3, [pc, #16]	; (1e104 <prvTimerTask+0x34>)
   1e0f4:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1e0f6:	4b04      	ldr	r3, [pc, #16]	; (1e108 <prvTimerTask+0x38>)
   1e0f8:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e0fa:	e7ef      	b.n	1e0dc <prvTimerTask+0xc>
   1e0fc:	000332a1 	.word	0x000332a1
   1e100:	0001e1b1 	.word	0x0001e1b1
   1e104:	0001e10d 	.word	0x0001e10d
   1e108:	0001e2c1 	.word	0x0001e2c1

0001e10c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1e10c:	b580      	push	{r7, lr}
   1e10e:	b084      	sub	sp, #16
   1e110:	af00      	add	r7, sp, #0
   1e112:	6078      	str	r0, [r7, #4]
   1e114:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1e116:	4b1e      	ldr	r3, [pc, #120]	; (1e190 <prvProcessTimerOrBlockTask+0x84>)
   1e118:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e11a:	2308      	movs	r3, #8
   1e11c:	18fb      	adds	r3, r7, r3
   1e11e:	0018      	movs	r0, r3
   1e120:	4b1c      	ldr	r3, [pc, #112]	; (1e194 <prvProcessTimerOrBlockTask+0x88>)
   1e122:	4798      	blx	r3
   1e124:	0003      	movs	r3, r0
   1e126:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1e128:	68bb      	ldr	r3, [r7, #8]
   1e12a:	2b00      	cmp	r3, #0
   1e12c:	d129      	bne.n	1e182 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1e12e:	683b      	ldr	r3, [r7, #0]
   1e130:	2b00      	cmp	r3, #0
   1e132:	d10c      	bne.n	1e14e <prvProcessTimerOrBlockTask+0x42>
   1e134:	687a      	ldr	r2, [r7, #4]
   1e136:	68fb      	ldr	r3, [r7, #12]
   1e138:	429a      	cmp	r2, r3
   1e13a:	d808      	bhi.n	1e14e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1e13c:	4b16      	ldr	r3, [pc, #88]	; (1e198 <prvProcessTimerOrBlockTask+0x8c>)
   1e13e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1e140:	68fa      	ldr	r2, [r7, #12]
   1e142:	687b      	ldr	r3, [r7, #4]
   1e144:	0011      	movs	r1, r2
   1e146:	0018      	movs	r0, r3
   1e148:	4b14      	ldr	r3, [pc, #80]	; (1e19c <prvProcessTimerOrBlockTask+0x90>)
   1e14a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1e14c:	e01b      	b.n	1e186 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1e14e:	683b      	ldr	r3, [r7, #0]
   1e150:	2b00      	cmp	r3, #0
   1e152:	d006      	beq.n	1e162 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1e154:	4b12      	ldr	r3, [pc, #72]	; (1e1a0 <prvProcessTimerOrBlockTask+0x94>)
   1e156:	681b      	ldr	r3, [r3, #0]
   1e158:	681b      	ldr	r3, [r3, #0]
   1e15a:	425a      	negs	r2, r3
   1e15c:	4153      	adcs	r3, r2
   1e15e:	b2db      	uxtb	r3, r3
   1e160:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1e162:	4b10      	ldr	r3, [pc, #64]	; (1e1a4 <prvProcessTimerOrBlockTask+0x98>)
   1e164:	6818      	ldr	r0, [r3, #0]
   1e166:	687a      	ldr	r2, [r7, #4]
   1e168:	68fb      	ldr	r3, [r7, #12]
   1e16a:	1ad3      	subs	r3, r2, r3
   1e16c:	683a      	ldr	r2, [r7, #0]
   1e16e:	0019      	movs	r1, r3
   1e170:	4b0d      	ldr	r3, [pc, #52]	; (1e1a8 <prvProcessTimerOrBlockTask+0x9c>)
   1e172:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1e174:	4b08      	ldr	r3, [pc, #32]	; (1e198 <prvProcessTimerOrBlockTask+0x8c>)
   1e176:	4798      	blx	r3
   1e178:	1e03      	subs	r3, r0, #0
   1e17a:	d104      	bne.n	1e186 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1e17c:	4b0b      	ldr	r3, [pc, #44]	; (1e1ac <prvProcessTimerOrBlockTask+0xa0>)
   1e17e:	4798      	blx	r3
}
   1e180:	e001      	b.n	1e186 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1e182:	4b05      	ldr	r3, [pc, #20]	; (1e198 <prvProcessTimerOrBlockTask+0x8c>)
   1e184:	4798      	blx	r3
}
   1e186:	46c0      	nop			; (mov r8, r8)
   1e188:	46bd      	mov	sp, r7
   1e18a:	b004      	add	sp, #16
   1e18c:	bd80      	pop	{r7, pc}
   1e18e:	46c0      	nop			; (mov r8, r8)
   1e190:	0001cf45 	.word	0x0001cf45
   1e194:	0001e1f1 	.word	0x0001e1f1
   1e198:	0001cf5d 	.word	0x0001cf5d
   1e19c:	0001e055 	.word	0x0001e055
   1e1a0:	20003e44 	.word	0x20003e44
   1e1a4:	20003e48 	.word	0x20003e48
   1e1a8:	0001c6e5 	.word	0x0001c6e5
   1e1ac:	0001ac71 	.word	0x0001ac71

0001e1b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1e1b0:	b580      	push	{r7, lr}
   1e1b2:	b084      	sub	sp, #16
   1e1b4:	af00      	add	r7, sp, #0
   1e1b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1e1b8:	4b0c      	ldr	r3, [pc, #48]	; (1e1ec <prvGetNextExpireTime+0x3c>)
   1e1ba:	681b      	ldr	r3, [r3, #0]
   1e1bc:	681b      	ldr	r3, [r3, #0]
   1e1be:	425a      	negs	r2, r3
   1e1c0:	4153      	adcs	r3, r2
   1e1c2:	b2db      	uxtb	r3, r3
   1e1c4:	001a      	movs	r2, r3
   1e1c6:	687b      	ldr	r3, [r7, #4]
   1e1c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1e1ca:	687b      	ldr	r3, [r7, #4]
   1e1cc:	681b      	ldr	r3, [r3, #0]
   1e1ce:	2b00      	cmp	r3, #0
   1e1d0:	d105      	bne.n	1e1de <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e1d2:	4b06      	ldr	r3, [pc, #24]	; (1e1ec <prvGetNextExpireTime+0x3c>)
   1e1d4:	681b      	ldr	r3, [r3, #0]
   1e1d6:	68db      	ldr	r3, [r3, #12]
   1e1d8:	681b      	ldr	r3, [r3, #0]
   1e1da:	60fb      	str	r3, [r7, #12]
   1e1dc:	e001      	b.n	1e1e2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1e1de:	2300      	movs	r3, #0
   1e1e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1e1e2:	68fb      	ldr	r3, [r7, #12]
}
   1e1e4:	0018      	movs	r0, r3
   1e1e6:	46bd      	mov	sp, r7
   1e1e8:	b004      	add	sp, #16
   1e1ea:	bd80      	pop	{r7, pc}
   1e1ec:	20003e40 	.word	0x20003e40

0001e1f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1e1f0:	b580      	push	{r7, lr}
   1e1f2:	b084      	sub	sp, #16
   1e1f4:	af00      	add	r7, sp, #0
   1e1f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1e1f8:	4b0c      	ldr	r3, [pc, #48]	; (1e22c <prvSampleTimeNow+0x3c>)
   1e1fa:	4798      	blx	r3
   1e1fc:	0003      	movs	r3, r0
   1e1fe:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1e200:	4b0b      	ldr	r3, [pc, #44]	; (1e230 <prvSampleTimeNow+0x40>)
   1e202:	681b      	ldr	r3, [r3, #0]
   1e204:	68fa      	ldr	r2, [r7, #12]
   1e206:	429a      	cmp	r2, r3
   1e208:	d205      	bcs.n	1e216 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1e20a:	4b0a      	ldr	r3, [pc, #40]	; (1e234 <prvSampleTimeNow+0x44>)
   1e20c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1e20e:	687b      	ldr	r3, [r7, #4]
   1e210:	2201      	movs	r2, #1
   1e212:	601a      	str	r2, [r3, #0]
   1e214:	e002      	b.n	1e21c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1e216:	687b      	ldr	r3, [r7, #4]
   1e218:	2200      	movs	r2, #0
   1e21a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1e21c:	4b04      	ldr	r3, [pc, #16]	; (1e230 <prvSampleTimeNow+0x40>)
   1e21e:	68fa      	ldr	r2, [r7, #12]
   1e220:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1e222:	68fb      	ldr	r3, [r7, #12]
}
   1e224:	0018      	movs	r0, r3
   1e226:	46bd      	mov	sp, r7
   1e228:	b004      	add	sp, #16
   1e22a:	bd80      	pop	{r7, pc}
   1e22c:	0001d0cd 	.word	0x0001d0cd
   1e230:	20003e50 	.word	0x20003e50
   1e234:	0001e3d9 	.word	0x0001e3d9

0001e238 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1e238:	b580      	push	{r7, lr}
   1e23a:	b086      	sub	sp, #24
   1e23c:	af00      	add	r7, sp, #0
   1e23e:	60f8      	str	r0, [r7, #12]
   1e240:	60b9      	str	r1, [r7, #8]
   1e242:	607a      	str	r2, [r7, #4]
   1e244:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1e246:	2300      	movs	r3, #0
   1e248:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1e24a:	68fb      	ldr	r3, [r7, #12]
   1e24c:	68ba      	ldr	r2, [r7, #8]
   1e24e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e250:	68fb      	ldr	r3, [r7, #12]
   1e252:	68fa      	ldr	r2, [r7, #12]
   1e254:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1e256:	68ba      	ldr	r2, [r7, #8]
   1e258:	687b      	ldr	r3, [r7, #4]
   1e25a:	429a      	cmp	r2, r3
   1e25c:	d812      	bhi.n	1e284 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e25e:	687a      	ldr	r2, [r7, #4]
   1e260:	683b      	ldr	r3, [r7, #0]
   1e262:	1ad2      	subs	r2, r2, r3
   1e264:	68fb      	ldr	r3, [r7, #12]
   1e266:	699b      	ldr	r3, [r3, #24]
   1e268:	429a      	cmp	r2, r3
   1e26a:	d302      	bcc.n	1e272 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1e26c:	2301      	movs	r3, #1
   1e26e:	617b      	str	r3, [r7, #20]
   1e270:	e01b      	b.n	1e2aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1e272:	4b10      	ldr	r3, [pc, #64]	; (1e2b4 <prvInsertTimerInActiveList+0x7c>)
   1e274:	681a      	ldr	r2, [r3, #0]
   1e276:	68fb      	ldr	r3, [r7, #12]
   1e278:	3304      	adds	r3, #4
   1e27a:	0019      	movs	r1, r3
   1e27c:	0010      	movs	r0, r2
   1e27e:	4b0e      	ldr	r3, [pc, #56]	; (1e2b8 <prvInsertTimerInActiveList+0x80>)
   1e280:	4798      	blx	r3
   1e282:	e012      	b.n	1e2aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1e284:	687a      	ldr	r2, [r7, #4]
   1e286:	683b      	ldr	r3, [r7, #0]
   1e288:	429a      	cmp	r2, r3
   1e28a:	d206      	bcs.n	1e29a <prvInsertTimerInActiveList+0x62>
   1e28c:	68ba      	ldr	r2, [r7, #8]
   1e28e:	683b      	ldr	r3, [r7, #0]
   1e290:	429a      	cmp	r2, r3
   1e292:	d302      	bcc.n	1e29a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1e294:	2301      	movs	r3, #1
   1e296:	617b      	str	r3, [r7, #20]
   1e298:	e007      	b.n	1e2aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e29a:	4b08      	ldr	r3, [pc, #32]	; (1e2bc <prvInsertTimerInActiveList+0x84>)
   1e29c:	681a      	ldr	r2, [r3, #0]
   1e29e:	68fb      	ldr	r3, [r7, #12]
   1e2a0:	3304      	adds	r3, #4
   1e2a2:	0019      	movs	r1, r3
   1e2a4:	0010      	movs	r0, r2
   1e2a6:	4b04      	ldr	r3, [pc, #16]	; (1e2b8 <prvInsertTimerInActiveList+0x80>)
   1e2a8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1e2aa:	697b      	ldr	r3, [r7, #20]
}
   1e2ac:	0018      	movs	r0, r3
   1e2ae:	46bd      	mov	sp, r7
   1e2b0:	b006      	add	sp, #24
   1e2b2:	bd80      	pop	{r7, pc}
   1e2b4:	20003e44 	.word	0x20003e44
   1e2b8:	0001aa8f 	.word	0x0001aa8f
   1e2bc:	20003e40 	.word	0x20003e40

0001e2c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1e2c0:	b590      	push	{r4, r7, lr}
   1e2c2:	b08b      	sub	sp, #44	; 0x2c
   1e2c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e2c6:	e068      	b.n	1e39a <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1e2c8:	2308      	movs	r3, #8
   1e2ca:	18fb      	adds	r3, r7, r3
   1e2cc:	681b      	ldr	r3, [r3, #0]
   1e2ce:	2b00      	cmp	r3, #0
   1e2d0:	db63      	blt.n	1e39a <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1e2d2:	2308      	movs	r3, #8
   1e2d4:	18fb      	adds	r3, r7, r3
   1e2d6:	689b      	ldr	r3, [r3, #8]
   1e2d8:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1e2da:	69fb      	ldr	r3, [r7, #28]
   1e2dc:	695b      	ldr	r3, [r3, #20]
   1e2de:	2b00      	cmp	r3, #0
   1e2e0:	d004      	beq.n	1e2ec <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e2e2:	69fb      	ldr	r3, [r7, #28]
   1e2e4:	3304      	adds	r3, #4
   1e2e6:	0018      	movs	r0, r3
   1e2e8:	4b33      	ldr	r3, [pc, #204]	; (1e3b8 <prvProcessReceivedCommands+0xf8>)
   1e2ea:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e2ec:	1d3b      	adds	r3, r7, #4
   1e2ee:	0018      	movs	r0, r3
   1e2f0:	4b32      	ldr	r3, [pc, #200]	; (1e3bc <prvProcessReceivedCommands+0xfc>)
   1e2f2:	4798      	blx	r3
   1e2f4:	0003      	movs	r3, r0
   1e2f6:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1e2f8:	2308      	movs	r3, #8
   1e2fa:	18fb      	adds	r3, r7, r3
   1e2fc:	681b      	ldr	r3, [r3, #0]
   1e2fe:	2b09      	cmp	r3, #9
   1e300:	d84a      	bhi.n	1e398 <prvProcessReceivedCommands+0xd8>
   1e302:	009a      	lsls	r2, r3, #2
   1e304:	4b2e      	ldr	r3, [pc, #184]	; (1e3c0 <prvProcessReceivedCommands+0x100>)
   1e306:	18d3      	adds	r3, r2, r3
   1e308:	681b      	ldr	r3, [r3, #0]
   1e30a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1e30c:	2308      	movs	r3, #8
   1e30e:	18fb      	adds	r3, r7, r3
   1e310:	685a      	ldr	r2, [r3, #4]
   1e312:	69fb      	ldr	r3, [r7, #28]
   1e314:	699b      	ldr	r3, [r3, #24]
   1e316:	18d1      	adds	r1, r2, r3
   1e318:	2308      	movs	r3, #8
   1e31a:	18fb      	adds	r3, r7, r3
   1e31c:	685b      	ldr	r3, [r3, #4]
   1e31e:	69ba      	ldr	r2, [r7, #24]
   1e320:	69f8      	ldr	r0, [r7, #28]
   1e322:	4c28      	ldr	r4, [pc, #160]	; (1e3c4 <prvProcessReceivedCommands+0x104>)
   1e324:	47a0      	blx	r4
   1e326:	1e03      	subs	r3, r0, #0
   1e328:	d037      	beq.n	1e39a <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e32a:	69fb      	ldr	r3, [r7, #28]
   1e32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e32e:	69fa      	ldr	r2, [r7, #28]
   1e330:	0010      	movs	r0, r2
   1e332:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e334:	69fb      	ldr	r3, [r7, #28]
   1e336:	69db      	ldr	r3, [r3, #28]
   1e338:	2b01      	cmp	r3, #1
   1e33a:	d12e      	bne.n	1e39a <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1e33c:	2308      	movs	r3, #8
   1e33e:	18fb      	adds	r3, r7, r3
   1e340:	685a      	ldr	r2, [r3, #4]
   1e342:	69fb      	ldr	r3, [r7, #28]
   1e344:	699b      	ldr	r3, [r3, #24]
   1e346:	18d2      	adds	r2, r2, r3
   1e348:	69f8      	ldr	r0, [r7, #28]
   1e34a:	2300      	movs	r3, #0
   1e34c:	9300      	str	r3, [sp, #0]
   1e34e:	2300      	movs	r3, #0
   1e350:	2100      	movs	r1, #0
   1e352:	4c1d      	ldr	r4, [pc, #116]	; (1e3c8 <prvProcessReceivedCommands+0x108>)
   1e354:	47a0      	blx	r4
   1e356:	0003      	movs	r3, r0
   1e358:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1e35a:	697b      	ldr	r3, [r7, #20]
   1e35c:	2b00      	cmp	r3, #0
   1e35e:	d11c      	bne.n	1e39a <prvProcessReceivedCommands+0xda>
   1e360:	b672      	cpsid	i
   1e362:	e7fe      	b.n	1e362 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1e364:	2308      	movs	r3, #8
   1e366:	18fb      	adds	r3, r7, r3
   1e368:	685a      	ldr	r2, [r3, #4]
   1e36a:	69fb      	ldr	r3, [r7, #28]
   1e36c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1e36e:	69fb      	ldr	r3, [r7, #28]
   1e370:	699b      	ldr	r3, [r3, #24]
   1e372:	2b00      	cmp	r3, #0
   1e374:	d101      	bne.n	1e37a <prvProcessReceivedCommands+0xba>
   1e376:	b672      	cpsid	i
   1e378:	e7fe      	b.n	1e378 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1e37a:	69fb      	ldr	r3, [r7, #28]
   1e37c:	699a      	ldr	r2, [r3, #24]
   1e37e:	69bb      	ldr	r3, [r7, #24]
   1e380:	18d1      	adds	r1, r2, r3
   1e382:	69bb      	ldr	r3, [r7, #24]
   1e384:	69ba      	ldr	r2, [r7, #24]
   1e386:	69f8      	ldr	r0, [r7, #28]
   1e388:	4c0e      	ldr	r4, [pc, #56]	; (1e3c4 <prvProcessReceivedCommands+0x104>)
   1e38a:	47a0      	blx	r4
					break;
   1e38c:	e005      	b.n	1e39a <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1e38e:	69fb      	ldr	r3, [r7, #28]
   1e390:	0018      	movs	r0, r3
   1e392:	4b0e      	ldr	r3, [pc, #56]	; (1e3cc <prvProcessReceivedCommands+0x10c>)
   1e394:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1e396:	e000      	b.n	1e39a <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1e398:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e39a:	4b0d      	ldr	r3, [pc, #52]	; (1e3d0 <prvProcessReceivedCommands+0x110>)
   1e39c:	681b      	ldr	r3, [r3, #0]
   1e39e:	2208      	movs	r2, #8
   1e3a0:	18b9      	adds	r1, r7, r2
   1e3a2:	2200      	movs	r2, #0
   1e3a4:	0018      	movs	r0, r3
   1e3a6:	4b0b      	ldr	r3, [pc, #44]	; (1e3d4 <prvProcessReceivedCommands+0x114>)
   1e3a8:	4798      	blx	r3
   1e3aa:	1e03      	subs	r3, r0, #0
   1e3ac:	d18c      	bne.n	1e2c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1e3ae:	46c0      	nop			; (mov r8, r8)
   1e3b0:	46bd      	mov	sp, r7
   1e3b2:	b009      	add	sp, #36	; 0x24
   1e3b4:	bd90      	pop	{r4, r7, pc}
   1e3b6:	46c0      	nop			; (mov r8, r8)
   1e3b8:	0001aafb 	.word	0x0001aafb
   1e3bc:	0001e1f1 	.word	0x0001e1f1
   1e3c0:	00038dcc 	.word	0x00038dcc
   1e3c4:	0001e239 	.word	0x0001e239
   1e3c8:	0001dfad 	.word	0x0001dfad
   1e3cc:	0001ae85 	.word	0x0001ae85
   1e3d0:	20003e48 	.word	0x20003e48
   1e3d4:	0001bad9 	.word	0x0001bad9

0001e3d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1e3d8:	b590      	push	{r4, r7, lr}
   1e3da:	b089      	sub	sp, #36	; 0x24
   1e3dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e3de:	e03e      	b.n	1e45e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e3e0:	4b28      	ldr	r3, [pc, #160]	; (1e484 <prvSwitchTimerLists+0xac>)
   1e3e2:	681b      	ldr	r3, [r3, #0]
   1e3e4:	68db      	ldr	r3, [r3, #12]
   1e3e6:	681b      	ldr	r3, [r3, #0]
   1e3e8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e3ea:	4b26      	ldr	r3, [pc, #152]	; (1e484 <prvSwitchTimerLists+0xac>)
   1e3ec:	681b      	ldr	r3, [r3, #0]
   1e3ee:	68db      	ldr	r3, [r3, #12]
   1e3f0:	68db      	ldr	r3, [r3, #12]
   1e3f2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e3f4:	693b      	ldr	r3, [r7, #16]
   1e3f6:	3304      	adds	r3, #4
   1e3f8:	0018      	movs	r0, r3
   1e3fa:	4b23      	ldr	r3, [pc, #140]	; (1e488 <prvSwitchTimerLists+0xb0>)
   1e3fc:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e3fe:	693b      	ldr	r3, [r7, #16]
   1e400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e402:	693a      	ldr	r2, [r7, #16]
   1e404:	0010      	movs	r0, r2
   1e406:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e408:	693b      	ldr	r3, [r7, #16]
   1e40a:	69db      	ldr	r3, [r3, #28]
   1e40c:	2b01      	cmp	r3, #1
   1e40e:	d126      	bne.n	1e45e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1e410:	693b      	ldr	r3, [r7, #16]
   1e412:	699a      	ldr	r2, [r3, #24]
   1e414:	697b      	ldr	r3, [r7, #20]
   1e416:	18d3      	adds	r3, r2, r3
   1e418:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1e41a:	68fa      	ldr	r2, [r7, #12]
   1e41c:	697b      	ldr	r3, [r7, #20]
   1e41e:	429a      	cmp	r2, r3
   1e420:	d90e      	bls.n	1e440 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1e422:	693b      	ldr	r3, [r7, #16]
   1e424:	68fa      	ldr	r2, [r7, #12]
   1e426:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e428:	693b      	ldr	r3, [r7, #16]
   1e42a:	693a      	ldr	r2, [r7, #16]
   1e42c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e42e:	4b15      	ldr	r3, [pc, #84]	; (1e484 <prvSwitchTimerLists+0xac>)
   1e430:	681a      	ldr	r2, [r3, #0]
   1e432:	693b      	ldr	r3, [r7, #16]
   1e434:	3304      	adds	r3, #4
   1e436:	0019      	movs	r1, r3
   1e438:	0010      	movs	r0, r2
   1e43a:	4b14      	ldr	r3, [pc, #80]	; (1e48c <prvSwitchTimerLists+0xb4>)
   1e43c:	4798      	blx	r3
   1e43e:	e00e      	b.n	1e45e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e440:	697a      	ldr	r2, [r7, #20]
   1e442:	6938      	ldr	r0, [r7, #16]
   1e444:	2300      	movs	r3, #0
   1e446:	9300      	str	r3, [sp, #0]
   1e448:	2300      	movs	r3, #0
   1e44a:	2100      	movs	r1, #0
   1e44c:	4c10      	ldr	r4, [pc, #64]	; (1e490 <prvSwitchTimerLists+0xb8>)
   1e44e:	47a0      	blx	r4
   1e450:	0003      	movs	r3, r0
   1e452:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1e454:	68bb      	ldr	r3, [r7, #8]
   1e456:	2b00      	cmp	r3, #0
   1e458:	d101      	bne.n	1e45e <prvSwitchTimerLists+0x86>
   1e45a:	b672      	cpsid	i
   1e45c:	e7fe      	b.n	1e45c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e45e:	4b09      	ldr	r3, [pc, #36]	; (1e484 <prvSwitchTimerLists+0xac>)
   1e460:	681b      	ldr	r3, [r3, #0]
   1e462:	681b      	ldr	r3, [r3, #0]
   1e464:	2b00      	cmp	r3, #0
   1e466:	d1bb      	bne.n	1e3e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1e468:	4b06      	ldr	r3, [pc, #24]	; (1e484 <prvSwitchTimerLists+0xac>)
   1e46a:	681b      	ldr	r3, [r3, #0]
   1e46c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1e46e:	4b09      	ldr	r3, [pc, #36]	; (1e494 <prvSwitchTimerLists+0xbc>)
   1e470:	681a      	ldr	r2, [r3, #0]
   1e472:	4b04      	ldr	r3, [pc, #16]	; (1e484 <prvSwitchTimerLists+0xac>)
   1e474:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1e476:	4b07      	ldr	r3, [pc, #28]	; (1e494 <prvSwitchTimerLists+0xbc>)
   1e478:	687a      	ldr	r2, [r7, #4]
   1e47a:	601a      	str	r2, [r3, #0]
}
   1e47c:	46c0      	nop			; (mov r8, r8)
   1e47e:	46bd      	mov	sp, r7
   1e480:	b007      	add	sp, #28
   1e482:	bd90      	pop	{r4, r7, pc}
   1e484:	20003e40 	.word	0x20003e40
   1e488:	0001aafb 	.word	0x0001aafb
   1e48c:	0001aa8f 	.word	0x0001aa8f
   1e490:	0001dfad 	.word	0x0001dfad
   1e494:	20003e44 	.word	0x20003e44

0001e498 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1e498:	b580      	push	{r7, lr}
   1e49a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1e49c:	4b10      	ldr	r3, [pc, #64]	; (1e4e0 <prvCheckForValidListAndQueue+0x48>)
   1e49e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1e4a0:	4b10      	ldr	r3, [pc, #64]	; (1e4e4 <prvCheckForValidListAndQueue+0x4c>)
   1e4a2:	681b      	ldr	r3, [r3, #0]
   1e4a4:	2b00      	cmp	r3, #0
   1e4a6:	d115      	bne.n	1e4d4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1e4a8:	4b0f      	ldr	r3, [pc, #60]	; (1e4e8 <prvCheckForValidListAndQueue+0x50>)
   1e4aa:	0018      	movs	r0, r3
   1e4ac:	4b0f      	ldr	r3, [pc, #60]	; (1e4ec <prvCheckForValidListAndQueue+0x54>)
   1e4ae:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1e4b0:	4b0f      	ldr	r3, [pc, #60]	; (1e4f0 <prvCheckForValidListAndQueue+0x58>)
   1e4b2:	0018      	movs	r0, r3
   1e4b4:	4b0d      	ldr	r3, [pc, #52]	; (1e4ec <prvCheckForValidListAndQueue+0x54>)
   1e4b6:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1e4b8:	4b0e      	ldr	r3, [pc, #56]	; (1e4f4 <prvCheckForValidListAndQueue+0x5c>)
   1e4ba:	4a0b      	ldr	r2, [pc, #44]	; (1e4e8 <prvCheckForValidListAndQueue+0x50>)
   1e4bc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1e4be:	4b0e      	ldr	r3, [pc, #56]	; (1e4f8 <prvCheckForValidListAndQueue+0x60>)
   1e4c0:	4a0b      	ldr	r2, [pc, #44]	; (1e4f0 <prvCheckForValidListAndQueue+0x58>)
   1e4c2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1e4c4:	2200      	movs	r2, #0
   1e4c6:	210c      	movs	r1, #12
   1e4c8:	2005      	movs	r0, #5
   1e4ca:	4b0c      	ldr	r3, [pc, #48]	; (1e4fc <prvCheckForValidListAndQueue+0x64>)
   1e4cc:	4798      	blx	r3
   1e4ce:	0002      	movs	r2, r0
   1e4d0:	4b04      	ldr	r3, [pc, #16]	; (1e4e4 <prvCheckForValidListAndQueue+0x4c>)
   1e4d2:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e4d4:	4b0a      	ldr	r3, [pc, #40]	; (1e500 <prvCheckForValidListAndQueue+0x68>)
   1e4d6:	4798      	blx	r3
}
   1e4d8:	46c0      	nop			; (mov r8, r8)
   1e4da:	46bd      	mov	sp, r7
   1e4dc:	bd80      	pop	{r7, pc}
   1e4de:	46c0      	nop			; (mov r8, r8)
   1e4e0:	0001ac89 	.word	0x0001ac89
   1e4e4:	20003e48 	.word	0x20003e48
   1e4e8:	20003e18 	.word	0x20003e18
   1e4ec:	0001a9f9 	.word	0x0001a9f9
   1e4f0:	20003e2c 	.word	0x20003e2c
   1e4f4:	20003e40 	.word	0x20003e40
   1e4f8:	20003e44 	.word	0x20003e44
   1e4fc:	0001af79 	.word	0x0001af79
   1e500:	0001acad 	.word	0x0001acad

0001e504 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1e504:	b580      	push	{r7, lr}
   1e506:	b082      	sub	sp, #8
   1e508:	af00      	add	r7, sp, #0
   1e50a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1e50c:	687b      	ldr	r3, [r7, #4]
   1e50e:	7c1b      	ldrb	r3, [r3, #16]
   1e510:	2b00      	cmp	r3, #0
   1e512:	d00b      	beq.n	1e52c <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e514:	687b      	ldr	r3, [r7, #4]
   1e516:	689b      	ldr	r3, [r3, #8]
   1e518:	1c5a      	adds	r2, r3, #1
   1e51a:	687b      	ldr	r3, [r7, #4]
   1e51c:	68d9      	ldr	r1, [r3, #12]
   1e51e:	4b10      	ldr	r3, [pc, #64]	; (1e560 <advance_pointer+0x5c>)
   1e520:	0010      	movs	r0, r2
   1e522:	4798      	blx	r3
   1e524:	000b      	movs	r3, r1
   1e526:	001a      	movs	r2, r3
   1e528:	687b      	ldr	r3, [r7, #4]
   1e52a:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1e52c:	687b      	ldr	r3, [r7, #4]
   1e52e:	685b      	ldr	r3, [r3, #4]
   1e530:	1c5a      	adds	r2, r3, #1
   1e532:	687b      	ldr	r3, [r7, #4]
   1e534:	68d9      	ldr	r1, [r3, #12]
   1e536:	4b0a      	ldr	r3, [pc, #40]	; (1e560 <advance_pointer+0x5c>)
   1e538:	0010      	movs	r0, r2
   1e53a:	4798      	blx	r3
   1e53c:	000b      	movs	r3, r1
   1e53e:	001a      	movs	r2, r3
   1e540:	687b      	ldr	r3, [r7, #4]
   1e542:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1e544:	687b      	ldr	r3, [r7, #4]
   1e546:	685a      	ldr	r2, [r3, #4]
   1e548:	687b      	ldr	r3, [r7, #4]
   1e54a:	689b      	ldr	r3, [r3, #8]
   1e54c:	1ad3      	subs	r3, r2, r3
   1e54e:	425a      	negs	r2, r3
   1e550:	4153      	adcs	r3, r2
   1e552:	b2da      	uxtb	r2, r3
   1e554:	687b      	ldr	r3, [r7, #4]
   1e556:	741a      	strb	r2, [r3, #16]
 }
   1e558:	46c0      	nop			; (mov r8, r8)
   1e55a:	46bd      	mov	sp, r7
   1e55c:	b002      	add	sp, #8
   1e55e:	bd80      	pop	{r7, pc}
   1e560:	00033675 	.word	0x00033675

0001e564 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1e564:	b580      	push	{r7, lr}
   1e566:	b082      	sub	sp, #8
   1e568:	af00      	add	r7, sp, #0
   1e56a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1e56c:	687b      	ldr	r3, [r7, #4]
   1e56e:	2200      	movs	r2, #0
   1e570:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e572:	687b      	ldr	r3, [r7, #4]
   1e574:	689b      	ldr	r3, [r3, #8]
   1e576:	1c5a      	adds	r2, r3, #1
   1e578:	687b      	ldr	r3, [r7, #4]
   1e57a:	68d9      	ldr	r1, [r3, #12]
   1e57c:	4b05      	ldr	r3, [pc, #20]	; (1e594 <retreat_pointer+0x30>)
   1e57e:	0010      	movs	r0, r2
   1e580:	4798      	blx	r3
   1e582:	000b      	movs	r3, r1
   1e584:	001a      	movs	r2, r3
   1e586:	687b      	ldr	r3, [r7, #4]
   1e588:	609a      	str	r2, [r3, #8]
 }
   1e58a:	46c0      	nop			; (mov r8, r8)
   1e58c:	46bd      	mov	sp, r7
   1e58e:	b002      	add	sp, #8
   1e590:	bd80      	pop	{r7, pc}
   1e592:	46c0      	nop			; (mov r8, r8)
   1e594:	00033675 	.word	0x00033675

0001e598 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1e598:	b580      	push	{r7, lr}
   1e59a:	b084      	sub	sp, #16
   1e59c:	af00      	add	r7, sp, #0
   1e59e:	6078      	str	r0, [r7, #4]
   1e5a0:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1e5a2:	2014      	movs	r0, #20
   1e5a4:	4b09      	ldr	r3, [pc, #36]	; (1e5cc <circular_buf_init+0x34>)
   1e5a6:	4798      	blx	r3
   1e5a8:	0003      	movs	r3, r0
   1e5aa:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1e5ac:	68fb      	ldr	r3, [r7, #12]
   1e5ae:	687a      	ldr	r2, [r7, #4]
   1e5b0:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1e5b2:	68fb      	ldr	r3, [r7, #12]
   1e5b4:	683a      	ldr	r2, [r7, #0]
   1e5b6:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1e5b8:	68fb      	ldr	r3, [r7, #12]
   1e5ba:	0018      	movs	r0, r3
   1e5bc:	4b04      	ldr	r3, [pc, #16]	; (1e5d0 <circular_buf_init+0x38>)
   1e5be:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1e5c0:	68fb      	ldr	r3, [r7, #12]
 }
   1e5c2:	0018      	movs	r0, r3
   1e5c4:	46bd      	mov	sp, r7
   1e5c6:	b004      	add	sp, #16
   1e5c8:	bd80      	pop	{r7, pc}
   1e5ca:	46c0      	nop			; (mov r8, r8)
   1e5cc:	000354e5 	.word	0x000354e5
   1e5d0:	0001e5d5 	.word	0x0001e5d5

0001e5d4 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1e5d4:	b580      	push	{r7, lr}
   1e5d6:	b082      	sub	sp, #8
   1e5d8:	af00      	add	r7, sp, #0
   1e5da:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1e5dc:	687b      	ldr	r3, [r7, #4]
   1e5de:	2200      	movs	r2, #0
   1e5e0:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1e5e2:	687b      	ldr	r3, [r7, #4]
   1e5e4:	2200      	movs	r2, #0
   1e5e6:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1e5e8:	687b      	ldr	r3, [r7, #4]
   1e5ea:	2200      	movs	r2, #0
   1e5ec:	741a      	strb	r2, [r3, #16]
 }
   1e5ee:	46c0      	nop			; (mov r8, r8)
   1e5f0:	46bd      	mov	sp, r7
   1e5f2:	b002      	add	sp, #8
   1e5f4:	bd80      	pop	{r7, pc}
	...

0001e5f8 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1e5f8:	b580      	push	{r7, lr}
   1e5fa:	b082      	sub	sp, #8
   1e5fc:	af00      	add	r7, sp, #0
   1e5fe:	6078      	str	r0, [r7, #4]
   1e600:	000a      	movs	r2, r1
   1e602:	1cfb      	adds	r3, r7, #3
   1e604:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1e606:	687b      	ldr	r3, [r7, #4]
   1e608:	681a      	ldr	r2, [r3, #0]
   1e60a:	687b      	ldr	r3, [r7, #4]
   1e60c:	685b      	ldr	r3, [r3, #4]
   1e60e:	18d3      	adds	r3, r2, r3
   1e610:	1cfa      	adds	r2, r7, #3
   1e612:	7812      	ldrb	r2, [r2, #0]
   1e614:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1e616:	687b      	ldr	r3, [r7, #4]
   1e618:	0018      	movs	r0, r3
   1e61a:	4b03      	ldr	r3, [pc, #12]	; (1e628 <circular_buf_put+0x30>)
   1e61c:	4798      	blx	r3
 }
   1e61e:	46c0      	nop			; (mov r8, r8)
   1e620:	46bd      	mov	sp, r7
   1e622:	b002      	add	sp, #8
   1e624:	bd80      	pop	{r7, pc}
   1e626:	46c0      	nop			; (mov r8, r8)
   1e628:	0001e505 	.word	0x0001e505

0001e62c <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1e62c:	b580      	push	{r7, lr}
   1e62e:	b084      	sub	sp, #16
   1e630:	af00      	add	r7, sp, #0
   1e632:	6078      	str	r0, [r7, #4]
   1e634:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1e636:	2301      	movs	r3, #1
   1e638:	425b      	negs	r3, r3
   1e63a:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1e63c:	687b      	ldr	r3, [r7, #4]
   1e63e:	0018      	movs	r0, r3
   1e640:	4b0d      	ldr	r3, [pc, #52]	; (1e678 <circular_buf_get+0x4c>)
   1e642:	4798      	blx	r3
   1e644:	0003      	movs	r3, r0
   1e646:	001a      	movs	r2, r3
   1e648:	2301      	movs	r3, #1
   1e64a:	4053      	eors	r3, r2
   1e64c:	b2db      	uxtb	r3, r3
   1e64e:	2b00      	cmp	r3, #0
   1e650:	d00d      	beq.n	1e66e <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1e652:	687b      	ldr	r3, [r7, #4]
   1e654:	681a      	ldr	r2, [r3, #0]
   1e656:	687b      	ldr	r3, [r7, #4]
   1e658:	689b      	ldr	r3, [r3, #8]
   1e65a:	18d3      	adds	r3, r2, r3
   1e65c:	781a      	ldrb	r2, [r3, #0]
   1e65e:	683b      	ldr	r3, [r7, #0]
   1e660:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1e662:	687b      	ldr	r3, [r7, #4]
   1e664:	0018      	movs	r0, r3
   1e666:	4b05      	ldr	r3, [pc, #20]	; (1e67c <circular_buf_get+0x50>)
   1e668:	4798      	blx	r3

		 r = 0;
   1e66a:	2300      	movs	r3, #0
   1e66c:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1e66e:	68fb      	ldr	r3, [r7, #12]
 }
   1e670:	0018      	movs	r0, r3
   1e672:	46bd      	mov	sp, r7
   1e674:	b004      	add	sp, #16
   1e676:	bd80      	pop	{r7, pc}
   1e678:	0001e681 	.word	0x0001e681
   1e67c:	0001e565 	.word	0x0001e565

0001e680 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1e680:	b580      	push	{r7, lr}
   1e682:	b082      	sub	sp, #8
   1e684:	af00      	add	r7, sp, #0
   1e686:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1e688:	687b      	ldr	r3, [r7, #4]
   1e68a:	7c1b      	ldrb	r3, [r3, #16]
   1e68c:	2201      	movs	r2, #1
   1e68e:	4053      	eors	r3, r2
   1e690:	b2db      	uxtb	r3, r3
   1e692:	2b00      	cmp	r3, #0
   1e694:	d007      	beq.n	1e6a6 <circular_buf_empty+0x26>
   1e696:	687b      	ldr	r3, [r7, #4]
   1e698:	685a      	ldr	r2, [r3, #4]
   1e69a:	687b      	ldr	r3, [r7, #4]
   1e69c:	689b      	ldr	r3, [r3, #8]
   1e69e:	429a      	cmp	r2, r3
   1e6a0:	d101      	bne.n	1e6a6 <circular_buf_empty+0x26>
   1e6a2:	2301      	movs	r3, #1
   1e6a4:	e000      	b.n	1e6a8 <circular_buf_empty+0x28>
   1e6a6:	2300      	movs	r3, #0
   1e6a8:	1c1a      	adds	r2, r3, #0
   1e6aa:	2301      	movs	r3, #1
   1e6ac:	4013      	ands	r3, r2
   1e6ae:	b2db      	uxtb	r3, r3
 }
   1e6b0:	0018      	movs	r0, r3
   1e6b2:	46bd      	mov	sp, r7
   1e6b4:	b002      	add	sp, #8
   1e6b6:	bd80      	pop	{r7, pc}

0001e6b8 <system_interrupt_enable>:
{
   1e6b8:	b580      	push	{r7, lr}
   1e6ba:	b082      	sub	sp, #8
   1e6bc:	af00      	add	r7, sp, #0
   1e6be:	0002      	movs	r2, r0
   1e6c0:	1dfb      	adds	r3, r7, #7
   1e6c2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e6c4:	4b06      	ldr	r3, [pc, #24]	; (1e6e0 <system_interrupt_enable+0x28>)
   1e6c6:	1dfa      	adds	r2, r7, #7
   1e6c8:	7812      	ldrb	r2, [r2, #0]
   1e6ca:	0011      	movs	r1, r2
   1e6cc:	221f      	movs	r2, #31
   1e6ce:	400a      	ands	r2, r1
   1e6d0:	2101      	movs	r1, #1
   1e6d2:	4091      	lsls	r1, r2
   1e6d4:	000a      	movs	r2, r1
   1e6d6:	601a      	str	r2, [r3, #0]
}
   1e6d8:	46c0      	nop			; (mov r8, r8)
   1e6da:	46bd      	mov	sp, r7
   1e6dc:	b002      	add	sp, #8
   1e6de:	bd80      	pop	{r7, pc}
   1e6e0:	e000e100 	.word	0xe000e100

0001e6e4 <usart_is_syncing>:
{
   1e6e4:	b580      	push	{r7, lr}
   1e6e6:	b084      	sub	sp, #16
   1e6e8:	af00      	add	r7, sp, #0
   1e6ea:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e6ec:	687b      	ldr	r3, [r7, #4]
   1e6ee:	681b      	ldr	r3, [r3, #0]
   1e6f0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1e6f2:	68fb      	ldr	r3, [r7, #12]
   1e6f4:	69db      	ldr	r3, [r3, #28]
   1e6f6:	1e5a      	subs	r2, r3, #1
   1e6f8:	4193      	sbcs	r3, r2
   1e6fa:	b2db      	uxtb	r3, r3
}
   1e6fc:	0018      	movs	r0, r3
   1e6fe:	46bd      	mov	sp, r7
   1e700:	b004      	add	sp, #16
   1e702:	bd80      	pop	{r7, pc}

0001e704 <_usart_wait_for_sync>:
{
   1e704:	b580      	push	{r7, lr}
   1e706:	b082      	sub	sp, #8
   1e708:	af00      	add	r7, sp, #0
   1e70a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   1e70c:	46c0      	nop			; (mov r8, r8)
   1e70e:	687b      	ldr	r3, [r7, #4]
   1e710:	0018      	movs	r0, r3
   1e712:	4b04      	ldr	r3, [pc, #16]	; (1e724 <_usart_wait_for_sync+0x20>)
   1e714:	4798      	blx	r3
   1e716:	1e03      	subs	r3, r0, #0
   1e718:	d1f9      	bne.n	1e70e <_usart_wait_for_sync+0xa>
}
   1e71a:	46c0      	nop			; (mov r8, r8)
   1e71c:	46bd      	mov	sp, r7
   1e71e:	b002      	add	sp, #8
   1e720:	bd80      	pop	{r7, pc}
   1e722:	46c0      	nop			; (mov r8, r8)
   1e724:	0001e6e5 	.word	0x0001e6e5

0001e728 <usart_get_config_defaults>:
{
   1e728:	b580      	push	{r7, lr}
   1e72a:	b082      	sub	sp, #8
   1e72c:	af00      	add	r7, sp, #0
   1e72e:	6078      	str	r0, [r7, #4]
	config->data_order       = USART_DATAORDER_LSB;
   1e730:	687b      	ldr	r3, [r7, #4]
   1e732:	2280      	movs	r2, #128	; 0x80
   1e734:	05d2      	lsls	r2, r2, #23
   1e736:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1e738:	687b      	ldr	r3, [r7, #4]
   1e73a:	2200      	movs	r2, #0
   1e73c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1e73e:	687b      	ldr	r3, [r7, #4]
   1e740:	22ff      	movs	r2, #255	; 0xff
   1e742:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1e744:	687b      	ldr	r3, [r7, #4]
   1e746:	2200      	movs	r2, #0
   1e748:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1e74a:	687b      	ldr	r3, [r7, #4]
   1e74c:	2200      	movs	r2, #0
   1e74e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1e750:	687b      	ldr	r3, [r7, #4]
   1e752:	2296      	movs	r2, #150	; 0x96
   1e754:	0192      	lsls	r2, r2, #6
   1e756:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1e758:	687b      	ldr	r3, [r7, #4]
   1e75a:	2224      	movs	r2, #36	; 0x24
   1e75c:	2101      	movs	r1, #1
   1e75e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1e760:	687b      	ldr	r3, [r7, #4]
   1e762:	2225      	movs	r2, #37	; 0x25
   1e764:	2101      	movs	r1, #1
   1e766:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1e768:	687b      	ldr	r3, [r7, #4]
   1e76a:	2226      	movs	r2, #38	; 0x26
   1e76c:	2100      	movs	r1, #0
   1e76e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1e770:	687b      	ldr	r3, [r7, #4]
   1e772:	2227      	movs	r2, #39	; 0x27
   1e774:	2100      	movs	r1, #0
   1e776:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1e778:	687b      	ldr	r3, [r7, #4]
   1e77a:	2200      	movs	r2, #0
   1e77c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1e77e:	687b      	ldr	r3, [r7, #4]
   1e780:	2288      	movs	r2, #136	; 0x88
   1e782:	0352      	lsls	r2, r2, #13
   1e784:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1e786:	687b      	ldr	r3, [r7, #4]
   1e788:	222c      	movs	r2, #44	; 0x2c
   1e78a:	2100      	movs	r1, #0
   1e78c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1e78e:	687b      	ldr	r3, [r7, #4]
   1e790:	222d      	movs	r2, #45	; 0x2d
   1e792:	2100      	movs	r1, #0
   1e794:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1e796:	687b      	ldr	r3, [r7, #4]
   1e798:	2200      	movs	r2, #0
   1e79a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1e79c:	687b      	ldr	r3, [r7, #4]
   1e79e:	2200      	movs	r2, #0
   1e7a0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1e7a2:	687b      	ldr	r3, [r7, #4]
   1e7a4:	2200      	movs	r2, #0
   1e7a6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1e7a8:	687b      	ldr	r3, [r7, #4]
   1e7aa:	2200      	movs	r2, #0
   1e7ac:	63da      	str	r2, [r3, #60]	; 0x3c
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1e7ae:	687b      	ldr	r3, [r7, #4]
   1e7b0:	2200      	movs	r2, #0
   1e7b2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1e7b4:	687b      	ldr	r3, [r7, #4]
   1e7b6:	2200      	movs	r2, #0
   1e7b8:	821a      	strh	r2, [r3, #16]
	config->lin_slave_enable      = false;
   1e7ba:	687b      	ldr	r3, [r7, #4]
   1e7bc:	2200      	movs	r2, #0
   1e7be:	76da      	strb	r2, [r3, #27]
	config->immediate_buffer_overflow_notification  = false;
   1e7c0:	687b      	ldr	r3, [r7, #4]
   1e7c2:	2200      	movs	r2, #0
   1e7c4:	761a      	strb	r2, [r3, #24]
	config->start_frame_detection_enable            = false;
   1e7c6:	687b      	ldr	r3, [r7, #4]
   1e7c8:	2200      	movs	r2, #0
   1e7ca:	771a      	strb	r2, [r3, #28]
	config->encoding_format_enable                  = false;
   1e7cc:	687b      	ldr	r3, [r7, #4]
   1e7ce:	2200      	movs	r2, #0
   1e7d0:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1e7d2:	687b      	ldr	r3, [r7, #4]
   1e7d4:	2213      	movs	r2, #19
   1e7d6:	769a      	strb	r2, [r3, #26]
	config->collision_detection_enable              = false;
   1e7d8:	687b      	ldr	r3, [r7, #4]
   1e7da:	2200      	movs	r2, #0
   1e7dc:	775a      	strb	r2, [r3, #29]
}
   1e7de:	46c0      	nop			; (mov r8, r8)
   1e7e0:	46bd      	mov	sp, r7
   1e7e2:	b002      	add	sp, #8
   1e7e4:	bd80      	pop	{r7, pc}
	...

0001e7e8 <usart_enable>:
{
   1e7e8:	b580      	push	{r7, lr}
   1e7ea:	b084      	sub	sp, #16
   1e7ec:	af00      	add	r7, sp, #0
   1e7ee:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e7f0:	687b      	ldr	r3, [r7, #4]
   1e7f2:	681b      	ldr	r3, [r3, #0]
   1e7f4:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e7f6:	687b      	ldr	r3, [r7, #4]
   1e7f8:	681b      	ldr	r3, [r3, #0]
   1e7fa:	0018      	movs	r0, r3
   1e7fc:	4b09      	ldr	r3, [pc, #36]	; (1e824 <usart_enable+0x3c>)
   1e7fe:	4798      	blx	r3
   1e800:	0003      	movs	r3, r0
   1e802:	0018      	movs	r0, r3
   1e804:	4b08      	ldr	r3, [pc, #32]	; (1e828 <usart_enable+0x40>)
   1e806:	4798      	blx	r3
	_usart_wait_for_sync(module);
   1e808:	687b      	ldr	r3, [r7, #4]
   1e80a:	0018      	movs	r0, r3
   1e80c:	4b07      	ldr	r3, [pc, #28]	; (1e82c <usart_enable+0x44>)
   1e80e:	4798      	blx	r3
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1e810:	68fb      	ldr	r3, [r7, #12]
   1e812:	681b      	ldr	r3, [r3, #0]
   1e814:	2202      	movs	r2, #2
   1e816:	431a      	orrs	r2, r3
   1e818:	68fb      	ldr	r3, [r7, #12]
   1e81a:	601a      	str	r2, [r3, #0]
}
   1e81c:	46c0      	nop			; (mov r8, r8)
   1e81e:	46bd      	mov	sp, r7
   1e820:	b004      	add	sp, #16
   1e822:	bd80      	pop	{r7, pc}
   1e824:	000281ed 	.word	0x000281ed
   1e828:	0001e6b9 	.word	0x0001e6b9
   1e82c:	0001e705 	.word	0x0001e705

0001e830 <usart_enable_callback>:
{
   1e830:	b580      	push	{r7, lr}
   1e832:	b082      	sub	sp, #8
   1e834:	af00      	add	r7, sp, #0
   1e836:	6078      	str	r0, [r7, #4]
   1e838:	000a      	movs	r2, r1
   1e83a:	1cfb      	adds	r3, r7, #3
   1e83c:	701a      	strb	r2, [r3, #0]
	module->callback_enable_mask |= (1 << callback_type);
   1e83e:	687b      	ldr	r3, [r7, #4]
   1e840:	2231      	movs	r2, #49	; 0x31
   1e842:	5c9b      	ldrb	r3, [r3, r2]
   1e844:	b25a      	sxtb	r2, r3
   1e846:	1cfb      	adds	r3, r7, #3
   1e848:	781b      	ldrb	r3, [r3, #0]
   1e84a:	2101      	movs	r1, #1
   1e84c:	4099      	lsls	r1, r3
   1e84e:	000b      	movs	r3, r1
   1e850:	b25b      	sxtb	r3, r3
   1e852:	4313      	orrs	r3, r2
   1e854:	b25b      	sxtb	r3, r3
   1e856:	b2d9      	uxtb	r1, r3
   1e858:	687b      	ldr	r3, [r7, #4]
   1e85a:	2231      	movs	r2, #49	; 0x31
   1e85c:	5499      	strb	r1, [r3, r2]
}
   1e85e:	46c0      	nop			; (mov r8, r8)
   1e860:	46bd      	mov	sp, r7
   1e862:	b002      	add	sp, #8
   1e864:	bd80      	pop	{r7, pc}
	...

0001e868 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1e868:	b580      	push	{r7, lr}
   1e86a:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1e86c:	2380      	movs	r3, #128	; 0x80
   1e86e:	009a      	lsls	r2, r3, #2
   1e870:	4b0f      	ldr	r3, [pc, #60]	; (1e8b0 <InitializeSerialConsole+0x48>)
   1e872:	0011      	movs	r1, r2
   1e874:	0018      	movs	r0, r3
   1e876:	4b0f      	ldr	r3, [pc, #60]	; (1e8b4 <InitializeSerialConsole+0x4c>)
   1e878:	4798      	blx	r3
   1e87a:	0002      	movs	r2, r0
   1e87c:	4b0e      	ldr	r3, [pc, #56]	; (1e8b8 <InitializeSerialConsole+0x50>)
   1e87e:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1e880:	2380      	movs	r3, #128	; 0x80
   1e882:	009a      	lsls	r2, r3, #2
   1e884:	4b0d      	ldr	r3, [pc, #52]	; (1e8bc <InitializeSerialConsole+0x54>)
   1e886:	0011      	movs	r1, r2
   1e888:	0018      	movs	r0, r3
   1e88a:	4b0a      	ldr	r3, [pc, #40]	; (1e8b4 <InitializeSerialConsole+0x4c>)
   1e88c:	4798      	blx	r3
   1e88e:	0002      	movs	r2, r0
   1e890:	4b0b      	ldr	r3, [pc, #44]	; (1e8c0 <InitializeSerialConsole+0x58>)
   1e892:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1e894:	4b0b      	ldr	r3, [pc, #44]	; (1e8c4 <InitializeSerialConsole+0x5c>)
   1e896:	4798      	blx	r3
    configure_usart_callbacks();
   1e898:	4b0b      	ldr	r3, [pc, #44]	; (1e8c8 <InitializeSerialConsole+0x60>)
   1e89a:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1e89c:	490b      	ldr	r1, [pc, #44]	; (1e8cc <InitializeSerialConsole+0x64>)
   1e89e:	4b0c      	ldr	r3, [pc, #48]	; (1e8d0 <InitializeSerialConsole+0x68>)
   1e8a0:	2201      	movs	r2, #1
   1e8a2:	0018      	movs	r0, r3
   1e8a4:	4b0b      	ldr	r3, [pc, #44]	; (1e8d4 <InitializeSerialConsole+0x6c>)
   1e8a6:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1e8a8:	46c0      	nop			; (mov r8, r8)
   1e8aa:	46bd      	mov	sp, r7
   1e8ac:	bd80      	pop	{r7, pc}
   1e8ae:	46c0      	nop			; (mov r8, r8)
   1e8b0:	200054bc 	.word	0x200054bc
   1e8b4:	0001e599 	.word	0x0001e599
   1e8b8:	200052b4 	.word	0x200052b4
   1e8bc:	200052bc 	.word	0x200052bc
   1e8c0:	200056c0 	.word	0x200056c0
   1e8c4:	0001ea3d 	.word	0x0001ea3d
   1e8c8:	0001eab5 	.word	0x0001eab5
   1e8cc:	200052b8 	.word	0x200052b8
   1e8d0:	20005280 	.word	0x20005280
   1e8d4:	00029a95 	.word	0x00029a95

0001e8d8 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1e8d8:	b580      	push	{r7, lr}
   1e8da:	b084      	sub	sp, #16
   1e8dc:	af00      	add	r7, sp, #0
   1e8de:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e8e0:	4b1a      	ldr	r3, [pc, #104]	; (1e94c <SerialConsoleWriteString+0x74>)
   1e8e2:	4798      	blx	r3
    if (string != NULL) {
   1e8e4:	687b      	ldr	r3, [r7, #4]
   1e8e6:	2b00      	cmp	r3, #0
   1e8e8:	d02a      	beq.n	1e940 <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e8ea:	2300      	movs	r3, #0
   1e8ec:	60fb      	str	r3, [r7, #12]
   1e8ee:	e00b      	b.n	1e908 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1e8f0:	4b17      	ldr	r3, [pc, #92]	; (1e950 <SerialConsoleWriteString+0x78>)
   1e8f2:	6818      	ldr	r0, [r3, #0]
   1e8f4:	687a      	ldr	r2, [r7, #4]
   1e8f6:	68fb      	ldr	r3, [r7, #12]
   1e8f8:	18d3      	adds	r3, r2, r3
   1e8fa:	781b      	ldrb	r3, [r3, #0]
   1e8fc:	0019      	movs	r1, r3
   1e8fe:	4b15      	ldr	r3, [pc, #84]	; (1e954 <SerialConsoleWriteString+0x7c>)
   1e900:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e902:	68fb      	ldr	r3, [r7, #12]
   1e904:	3301      	adds	r3, #1
   1e906:	60fb      	str	r3, [r7, #12]
   1e908:	687b      	ldr	r3, [r7, #4]
   1e90a:	0018      	movs	r0, r3
   1e90c:	4b12      	ldr	r3, [pc, #72]	; (1e958 <SerialConsoleWriteString+0x80>)
   1e90e:	4798      	blx	r3
   1e910:	0002      	movs	r2, r0
   1e912:	68fb      	ldr	r3, [r7, #12]
   1e914:	429a      	cmp	r2, r3
   1e916:	d8eb      	bhi.n	1e8f0 <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1e918:	4b10      	ldr	r3, [pc, #64]	; (1e95c <SerialConsoleWriteString+0x84>)
   1e91a:	2101      	movs	r1, #1
   1e91c:	0018      	movs	r0, r3
   1e91e:	4b10      	ldr	r3, [pc, #64]	; (1e960 <SerialConsoleWriteString+0x88>)
   1e920:	4798      	blx	r3
   1e922:	1e03      	subs	r3, r0, #0
   1e924:	d10c      	bne.n	1e940 <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1e926:	4b0a      	ldr	r3, [pc, #40]	; (1e950 <SerialConsoleWriteString+0x78>)
   1e928:	681b      	ldr	r3, [r3, #0]
   1e92a:	4a0e      	ldr	r2, [pc, #56]	; (1e964 <SerialConsoleWriteString+0x8c>)
   1e92c:	0011      	movs	r1, r2
   1e92e:	0018      	movs	r0, r3
   1e930:	4b0d      	ldr	r3, [pc, #52]	; (1e968 <SerialConsoleWriteString+0x90>)
   1e932:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e934:	490b      	ldr	r1, [pc, #44]	; (1e964 <SerialConsoleWriteString+0x8c>)
   1e936:	4b09      	ldr	r3, [pc, #36]	; (1e95c <SerialConsoleWriteString+0x84>)
   1e938:	2201      	movs	r2, #1
   1e93a:	0018      	movs	r0, r3
   1e93c:	4b0b      	ldr	r3, [pc, #44]	; (1e96c <SerialConsoleWriteString+0x94>)
   1e93e:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1e940:	4b0b      	ldr	r3, [pc, #44]	; (1e970 <SerialConsoleWriteString+0x98>)
   1e942:	4798      	blx	r3
}
   1e944:	46c0      	nop			; (mov r8, r8)
   1e946:	46bd      	mov	sp, r7
   1e948:	b004      	add	sp, #16
   1e94a:	bd80      	pop	{r7, pc}
   1e94c:	0001cf45 	.word	0x0001cf45
   1e950:	200056c0 	.word	0x200056c0
   1e954:	0001e5f9 	.word	0x0001e5f9
   1e958:	000358fb 	.word	0x000358fb
   1e95c:	20005280 	.word	0x20005280
   1e960:	00029add 	.word	0x00029add
   1e964:	200056bc 	.word	0x200056bc
   1e968:	0001e62d 	.word	0x0001e62d
   1e96c:	00029a4d 	.word	0x00029a4d
   1e970:	0001cf5d 	.word	0x0001cf5d

0001e974 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1e974:	b580      	push	{r7, lr}
   1e976:	b084      	sub	sp, #16
   1e978:	af00      	add	r7, sp, #0
   1e97a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e97c:	4b08      	ldr	r3, [pc, #32]	; (1e9a0 <SerialConsoleReadCharacter+0x2c>)
   1e97e:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1e980:	4b08      	ldr	r3, [pc, #32]	; (1e9a4 <SerialConsoleReadCharacter+0x30>)
   1e982:	681b      	ldr	r3, [r3, #0]
   1e984:	687a      	ldr	r2, [r7, #4]
   1e986:	0011      	movs	r1, r2
   1e988:	0018      	movs	r0, r3
   1e98a:	4b07      	ldr	r3, [pc, #28]	; (1e9a8 <SerialConsoleReadCharacter+0x34>)
   1e98c:	4798      	blx	r3
   1e98e:	0003      	movs	r3, r0
   1e990:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1e992:	4b06      	ldr	r3, [pc, #24]	; (1e9ac <SerialConsoleReadCharacter+0x38>)
   1e994:	4798      	blx	r3
    return a;
   1e996:	68fb      	ldr	r3, [r7, #12]
}
   1e998:	0018      	movs	r0, r3
   1e99a:	46bd      	mov	sp, r7
   1e99c:	b004      	add	sp, #16
   1e99e:	bd80      	pop	{r7, pc}
   1e9a0:	0001cf45 	.word	0x0001cf45
   1e9a4:	200052b4 	.word	0x200052b4
   1e9a8:	0001e62d 	.word	0x0001e62d
   1e9ac:	0001cf5d 	.word	0x0001cf5d

0001e9b0 <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1e9b0:	b580      	push	{r7, lr}
   1e9b2:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1e9b4:	4b02      	ldr	r3, [pc, #8]	; (1e9c0 <getLogLevel+0x10>)
   1e9b6:	781b      	ldrb	r3, [r3, #0]
}
   1e9b8:	0018      	movs	r0, r3
   1e9ba:	46bd      	mov	sp, r7
   1e9bc:	bd80      	pop	{r7, pc}
   1e9be:	46c0      	nop			; (mov r8, r8)
   1e9c0:	20003e54 	.word	0x20003e54

0001e9c4 <LogMessage>:
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1e9c4:	b40e      	push	{r1, r2, r3}
   1e9c6:	b590      	push	{r4, r7, lr}
   1e9c8:	b084      	sub	sp, #16
   1e9ca:	af00      	add	r7, sp, #0
   1e9cc:	0002      	movs	r2, r0
   1e9ce:	1dfb      	adds	r3, r7, #7
   1e9d0:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1e9d2:	4b0e      	ldr	r3, [pc, #56]	; (1ea0c <LogMessage+0x48>)
   1e9d4:	4798      	blx	r3
   1e9d6:	0003      	movs	r3, r0
   1e9d8:	001a      	movs	r2, r3
   1e9da:	1dfb      	adds	r3, r7, #7
   1e9dc:	781b      	ldrb	r3, [r3, #0]
   1e9de:	4293      	cmp	r3, r2
   1e9e0:	d30c      	bcc.n	1e9fc <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1e9e2:	2320      	movs	r3, #32
   1e9e4:	18fb      	adds	r3, r7, r3
   1e9e6:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1e9e8:	68fb      	ldr	r3, [r7, #12]
   1e9ea:	69fa      	ldr	r2, [r7, #28]
   1e9ec:	4808      	ldr	r0, [pc, #32]	; (1ea10 <LogMessage+0x4c>)
   1e9ee:	217f      	movs	r1, #127	; 0x7f
   1e9f0:	4c08      	ldr	r4, [pc, #32]	; (1ea14 <LogMessage+0x50>)
   1e9f2:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1e9f4:	4b06      	ldr	r3, [pc, #24]	; (1ea10 <LogMessage+0x4c>)
   1e9f6:	0018      	movs	r0, r3
   1e9f8:	4b07      	ldr	r3, [pc, #28]	; (1ea18 <LogMessage+0x54>)
   1e9fa:	4798      	blx	r3
        va_end(ap);
    }
};
   1e9fc:	46c0      	nop			; (mov r8, r8)
   1e9fe:	46bd      	mov	sp, r7
   1ea00:	b004      	add	sp, #16
   1ea02:	bc90      	pop	{r4, r7}
   1ea04:	bc08      	pop	{r3}
   1ea06:	b003      	add	sp, #12
   1ea08:	4718      	bx	r3
   1ea0a:	46c0      	nop			; (mov r8, r8)
   1ea0c:	0001e9b1 	.word	0x0001e9b1
   1ea10:	20005200 	.word	0x20005200
   1ea14:	00035b35 	.word	0x00035b35
   1ea18:	0001e8d9 	.word	0x0001e8d9

0001ea1c <LogMessageDebug>:
 * @fn			LogMessage Debug(Students to fill out this)
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1ea1c:	b40f      	push	{r0, r1, r2, r3}
   1ea1e:	b580      	push	{r7, lr}
   1ea20:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1ea22:	68bb      	ldr	r3, [r7, #8]
   1ea24:	0019      	movs	r1, r3
   1ea26:	2001      	movs	r0, #1
   1ea28:	4b03      	ldr	r3, [pc, #12]	; (1ea38 <LogMessageDebug+0x1c>)
   1ea2a:	4798      	blx	r3
};
   1ea2c:	46c0      	nop			; (mov r8, r8)
   1ea2e:	46bd      	mov	sp, r7
   1ea30:	bc80      	pop	{r7}
   1ea32:	bc08      	pop	{r3}
   1ea34:	b004      	add	sp, #16
   1ea36:	4718      	bx	r3
   1ea38:	0001e9c5 	.word	0x0001e9c5

0001ea3c <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1ea3c:	b580      	push	{r7, lr}
   1ea3e:	b090      	sub	sp, #64	; 0x40
   1ea40:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1ea42:	003b      	movs	r3, r7
   1ea44:	0018      	movs	r0, r3
   1ea46:	4b14      	ldr	r3, [pc, #80]	; (1ea98 <configure_usart+0x5c>)
   1ea48:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1ea4a:	003b      	movs	r3, r7
   1ea4c:	22e1      	movs	r2, #225	; 0xe1
   1ea4e:	0252      	lsls	r2, r2, #9
   1ea50:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1ea52:	003b      	movs	r3, r7
   1ea54:	22c4      	movs	r2, #196	; 0xc4
   1ea56:	0392      	lsls	r2, r2, #14
   1ea58:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1ea5a:	003b      	movs	r3, r7
   1ea5c:	2201      	movs	r2, #1
   1ea5e:	4252      	negs	r2, r2
   1ea60:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1ea62:	003b      	movs	r3, r7
   1ea64:	2201      	movs	r2, #1
   1ea66:	4252      	negs	r2, r2
   1ea68:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1ea6a:	003b      	movs	r3, r7
   1ea6c:	4a0b      	ldr	r2, [pc, #44]	; (1ea9c <configure_usart+0x60>)
   1ea6e:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1ea70:	003b      	movs	r3, r7
   1ea72:	4a0b      	ldr	r2, [pc, #44]	; (1eaa0 <configure_usart+0x64>)
   1ea74:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1ea76:	46c0      	nop			; (mov r8, r8)
   1ea78:	003a      	movs	r2, r7
   1ea7a:	490a      	ldr	r1, [pc, #40]	; (1eaa4 <configure_usart+0x68>)
   1ea7c:	4b0a      	ldr	r3, [pc, #40]	; (1eaa8 <configure_usart+0x6c>)
   1ea7e:	0018      	movs	r0, r3
   1ea80:	4b0a      	ldr	r3, [pc, #40]	; (1eaac <configure_usart+0x70>)
   1ea82:	4798      	blx	r3
   1ea84:	1e03      	subs	r3, r0, #0
   1ea86:	d1f7      	bne.n	1ea78 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1ea88:	4b07      	ldr	r3, [pc, #28]	; (1eaa8 <configure_usart+0x6c>)
   1ea8a:	0018      	movs	r0, r3
   1ea8c:	4b08      	ldr	r3, [pc, #32]	; (1eab0 <configure_usart+0x74>)
   1ea8e:	4798      	blx	r3
}
   1ea90:	46c0      	nop			; (mov r8, r8)
   1ea92:	46bd      	mov	sp, r7
   1ea94:	b010      	add	sp, #64	; 0x40
   1ea96:	bd80      	pop	{r7, pc}
   1ea98:	0001e729 	.word	0x0001e729
   1ea9c:	002a0003 	.word	0x002a0003
   1eaa0:	002b0003 	.word	0x002b0003
   1eaa4:	42001800 	.word	0x42001800
   1eaa8:	20005280 	.word	0x20005280
   1eaac:	00029651 	.word	0x00029651
   1eab0:	0001e7e9 	.word	0x0001e7e9

0001eab4 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1eab4:	b580      	push	{r7, lr}
   1eab6:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1eab8:	490c      	ldr	r1, [pc, #48]	; (1eaec <configure_usart_callbacks+0x38>)
   1eaba:	4b0d      	ldr	r3, [pc, #52]	; (1eaf0 <configure_usart_callbacks+0x3c>)
   1eabc:	2200      	movs	r2, #0
   1eabe:	0018      	movs	r0, r3
   1eac0:	4b0c      	ldr	r3, [pc, #48]	; (1eaf4 <configure_usart_callbacks+0x40>)
   1eac2:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1eac4:	490c      	ldr	r1, [pc, #48]	; (1eaf8 <configure_usart_callbacks+0x44>)
   1eac6:	4b0a      	ldr	r3, [pc, #40]	; (1eaf0 <configure_usart_callbacks+0x3c>)
   1eac8:	2201      	movs	r2, #1
   1eaca:	0018      	movs	r0, r3
   1eacc:	4b09      	ldr	r3, [pc, #36]	; (1eaf4 <configure_usart_callbacks+0x40>)
   1eace:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1ead0:	4b07      	ldr	r3, [pc, #28]	; (1eaf0 <configure_usart_callbacks+0x3c>)
   1ead2:	2100      	movs	r1, #0
   1ead4:	0018      	movs	r0, r3
   1ead6:	4b09      	ldr	r3, [pc, #36]	; (1eafc <configure_usart_callbacks+0x48>)
   1ead8:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1eada:	4b05      	ldr	r3, [pc, #20]	; (1eaf0 <configure_usart_callbacks+0x3c>)
   1eadc:	2101      	movs	r1, #1
   1eade:	0018      	movs	r0, r3
   1eae0:	4b06      	ldr	r3, [pc, #24]	; (1eafc <configure_usart_callbacks+0x48>)
   1eae2:	4798      	blx	r3
}
   1eae4:	46c0      	nop			; (mov r8, r8)
   1eae6:	46bd      	mov	sp, r7
   1eae8:	bd80      	pop	{r7, pc}
   1eaea:	46c0      	nop			; (mov r8, r8)
   1eaec:	0001eb49 	.word	0x0001eb49
   1eaf0:	20005280 	.word	0x20005280
   1eaf4:	00029a05 	.word	0x00029a05
   1eaf8:	0001eb01 	.word	0x0001eb01
   1eafc:	0001e831 	.word	0x0001e831

0001eb00 <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1eb00:	b580      	push	{r7, lr}
   1eb02:	b082      	sub	sp, #8
   1eb04:	af00      	add	r7, sp, #0
   1eb06:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1eb08:	4b09      	ldr	r3, [pc, #36]	; (1eb30 <usart_read_callback+0x30>)
   1eb0a:	681a      	ldr	r2, [r3, #0]
   1eb0c:	4b09      	ldr	r3, [pc, #36]	; (1eb34 <usart_read_callback+0x34>)
   1eb0e:	781b      	ldrb	r3, [r3, #0]
   1eb10:	0019      	movs	r1, r3
   1eb12:	0010      	movs	r0, r2
   1eb14:	4b08      	ldr	r3, [pc, #32]	; (1eb38 <usart_read_callback+0x38>)
   1eb16:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1eb18:	4906      	ldr	r1, [pc, #24]	; (1eb34 <usart_read_callback+0x34>)
   1eb1a:	4b08      	ldr	r3, [pc, #32]	; (1eb3c <usart_read_callback+0x3c>)
   1eb1c:	2201      	movs	r2, #1
   1eb1e:	0018      	movs	r0, r3
   1eb20:	4b07      	ldr	r3, [pc, #28]	; (1eb40 <usart_read_callback+0x40>)
   1eb22:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1eb24:	4b07      	ldr	r3, [pc, #28]	; (1eb44 <usart_read_callback+0x44>)
   1eb26:	4798      	blx	r3
}
   1eb28:	46c0      	nop			; (mov r8, r8)
   1eb2a:	46bd      	mov	sp, r7
   1eb2c:	b002      	add	sp, #8
   1eb2e:	bd80      	pop	{r7, pc}
   1eb30:	200052b4 	.word	0x200052b4
   1eb34:	200052b8 	.word	0x200052b8
   1eb38:	0001e5f9 	.word	0x0001e5f9
   1eb3c:	20005280 	.word	0x20005280
   1eb40:	00029a95 	.word	0x00029a95
   1eb44:	00013e21 	.word	0x00013e21

0001eb48 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1eb48:	b580      	push	{r7, lr}
   1eb4a:	b082      	sub	sp, #8
   1eb4c:	af00      	add	r7, sp, #0
   1eb4e:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1eb50:	4b09      	ldr	r3, [pc, #36]	; (1eb78 <usart_write_callback+0x30>)
   1eb52:	681b      	ldr	r3, [r3, #0]
   1eb54:	4a09      	ldr	r2, [pc, #36]	; (1eb7c <usart_write_callback+0x34>)
   1eb56:	0011      	movs	r1, r2
   1eb58:	0018      	movs	r0, r3
   1eb5a:	4b09      	ldr	r3, [pc, #36]	; (1eb80 <usart_write_callback+0x38>)
   1eb5c:	4798      	blx	r3
   1eb5e:	0003      	movs	r3, r0
   1eb60:	3301      	adds	r3, #1
   1eb62:	d005      	beq.n	1eb70 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1eb64:	4905      	ldr	r1, [pc, #20]	; (1eb7c <usart_write_callback+0x34>)
   1eb66:	4b07      	ldr	r3, [pc, #28]	; (1eb84 <usart_write_callback+0x3c>)
   1eb68:	2201      	movs	r2, #1
   1eb6a:	0018      	movs	r0, r3
   1eb6c:	4b06      	ldr	r3, [pc, #24]	; (1eb88 <usart_write_callback+0x40>)
   1eb6e:	4798      	blx	r3
    }
}
   1eb70:	46c0      	nop			; (mov r8, r8)
   1eb72:	46bd      	mov	sp, r7
   1eb74:	b002      	add	sp, #8
   1eb76:	bd80      	pop	{r7, pc}
   1eb78:	200056c0 	.word	0x200056c0
   1eb7c:	200056bc 	.word	0x200056bc
   1eb80:	0001e62d 	.word	0x0001e62d
   1eb84:	20005280 	.word	0x20005280
   1eb88:	00029a4d 	.word	0x00029a4d

0001eb8c <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1eb8c:	b590      	push	{r4, r7, lr}
   1eb8e:	b087      	sub	sp, #28
   1eb90:	af00      	add	r7, sp, #0
   1eb92:	60f8      	str	r0, [r7, #12]
   1eb94:	000c      	movs	r4, r1
   1eb96:	0010      	movs	r0, r2
   1eb98:	0019      	movs	r1, r3
   1eb9a:	230a      	movs	r3, #10
   1eb9c:	18fb      	adds	r3, r7, r3
   1eb9e:	1c22      	adds	r2, r4, #0
   1eba0:	801a      	strh	r2, [r3, #0]
   1eba2:	2308      	movs	r3, #8
   1eba4:	18fb      	adds	r3, r7, r3
   1eba6:	1c02      	adds	r2, r0, #0
   1eba8:	801a      	strh	r2, [r3, #0]
   1ebaa:	1dfb      	adds	r3, r7, #7
   1ebac:	1c0a      	adds	r2, r1, #0
   1ebae:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1ebb0:	230a      	movs	r3, #10
   1ebb2:	18fb      	adds	r3, r7, r3
   1ebb4:	881a      	ldrh	r2, [r3, #0]
   1ebb6:	2308      	movs	r3, #8
   1ebb8:	18fb      	adds	r3, r7, r3
   1ebba:	881b      	ldrh	r3, [r3, #0]
   1ebbc:	1ad3      	subs	r3, r2, r3
   1ebbe:	3307      	adds	r3, #7
   1ebc0:	2b00      	cmp	r3, #0
   1ebc2:	da00      	bge.n	1ebc6 <SDMMC_UNSTUFF_BITS+0x3a>
   1ebc4:	3307      	adds	r3, #7
   1ebc6:	10db      	asrs	r3, r3, #3
   1ebc8:	3b01      	subs	r3, #1
   1ebca:	68fa      	ldr	r2, [r7, #12]
   1ebcc:	18d3      	adds	r3, r2, r3
   1ebce:	781b      	ldrb	r3, [r3, #0]
   1ebd0:	0019      	movs	r1, r3
   1ebd2:	2308      	movs	r3, #8
   1ebd4:	18fb      	adds	r3, r7, r3
   1ebd6:	881b      	ldrh	r3, [r3, #0]
   1ebd8:	2207      	movs	r2, #7
   1ebda:	4013      	ands	r3, r2
   1ebdc:	4119      	asrs	r1, r3
   1ebde:	000b      	movs	r3, r1
   1ebe0:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1ebe2:	2308      	movs	r3, #8
   1ebe4:	18fb      	adds	r3, r7, r3
   1ebe6:	881b      	ldrh	r3, [r3, #0]
   1ebe8:	2207      	movs	r2, #7
   1ebea:	401a      	ands	r2, r3
   1ebec:	1dfb      	adds	r3, r7, #7
   1ebee:	781b      	ldrb	r3, [r3, #0]
   1ebf0:	18d3      	adds	r3, r2, r3
   1ebf2:	2b08      	cmp	r3, #8
   1ebf4:	dd1c      	ble.n	1ec30 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1ebf6:	230a      	movs	r3, #10
   1ebf8:	18fb      	adds	r3, r7, r3
   1ebfa:	881a      	ldrh	r2, [r3, #0]
   1ebfc:	2308      	movs	r3, #8
   1ebfe:	18fb      	adds	r3, r7, r3
   1ec00:	881b      	ldrh	r3, [r3, #0]
   1ec02:	1ad3      	subs	r3, r2, r3
   1ec04:	3307      	adds	r3, #7
   1ec06:	2b00      	cmp	r3, #0
   1ec08:	da00      	bge.n	1ec0c <SDMMC_UNSTUFF_BITS+0x80>
   1ec0a:	3307      	adds	r3, #7
   1ec0c:	10db      	asrs	r3, r3, #3
   1ec0e:	3b02      	subs	r3, #2
   1ec10:	68fa      	ldr	r2, [r7, #12]
   1ec12:	18d3      	adds	r3, r2, r3
   1ec14:	781b      	ldrb	r3, [r3, #0]
   1ec16:	0019      	movs	r1, r3
   1ec18:	2308      	movs	r3, #8
   1ec1a:	18fb      	adds	r3, r7, r3
   1ec1c:	881b      	ldrh	r3, [r3, #0]
   1ec1e:	2207      	movs	r2, #7
   1ec20:	4013      	ands	r3, r2
   1ec22:	2208      	movs	r2, #8
   1ec24:	1ad3      	subs	r3, r2, r3
   1ec26:	4099      	lsls	r1, r3
   1ec28:	000b      	movs	r3, r1
   1ec2a:	697a      	ldr	r2, [r7, #20]
   1ec2c:	4313      	orrs	r3, r2
   1ec2e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ec30:	2308      	movs	r3, #8
   1ec32:	18fb      	adds	r3, r7, r3
   1ec34:	881b      	ldrh	r3, [r3, #0]
   1ec36:	2207      	movs	r2, #7
   1ec38:	401a      	ands	r2, r3
   1ec3a:	1dfb      	adds	r3, r7, #7
   1ec3c:	781b      	ldrb	r3, [r3, #0]
   1ec3e:	18d3      	adds	r3, r2, r3
   1ec40:	2b10      	cmp	r3, #16
   1ec42:	dd1c      	ble.n	1ec7e <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ec44:	230a      	movs	r3, #10
   1ec46:	18fb      	adds	r3, r7, r3
   1ec48:	881a      	ldrh	r2, [r3, #0]
   1ec4a:	2308      	movs	r3, #8
   1ec4c:	18fb      	adds	r3, r7, r3
   1ec4e:	881b      	ldrh	r3, [r3, #0]
   1ec50:	1ad3      	subs	r3, r2, r3
   1ec52:	3307      	adds	r3, #7
   1ec54:	2b00      	cmp	r3, #0
   1ec56:	da00      	bge.n	1ec5a <SDMMC_UNSTUFF_BITS+0xce>
   1ec58:	3307      	adds	r3, #7
   1ec5a:	10db      	asrs	r3, r3, #3
   1ec5c:	3b03      	subs	r3, #3
   1ec5e:	68fa      	ldr	r2, [r7, #12]
   1ec60:	18d3      	adds	r3, r2, r3
   1ec62:	781b      	ldrb	r3, [r3, #0]
   1ec64:	0019      	movs	r1, r3
   1ec66:	2308      	movs	r3, #8
   1ec68:	18fb      	adds	r3, r7, r3
   1ec6a:	881b      	ldrh	r3, [r3, #0]
   1ec6c:	2207      	movs	r2, #7
   1ec6e:	4013      	ands	r3, r2
   1ec70:	2210      	movs	r2, #16
   1ec72:	1ad3      	subs	r3, r2, r3
   1ec74:	4099      	lsls	r1, r3
   1ec76:	000b      	movs	r3, r1
   1ec78:	697a      	ldr	r2, [r7, #20]
   1ec7a:	4313      	orrs	r3, r2
   1ec7c:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ec7e:	2308      	movs	r3, #8
   1ec80:	18fb      	adds	r3, r7, r3
   1ec82:	881b      	ldrh	r3, [r3, #0]
   1ec84:	2207      	movs	r2, #7
   1ec86:	401a      	ands	r2, r3
   1ec88:	1dfb      	adds	r3, r7, #7
   1ec8a:	781b      	ldrb	r3, [r3, #0]
   1ec8c:	18d3      	adds	r3, r2, r3
   1ec8e:	2b10      	cmp	r3, #16
   1ec90:	dd1c      	ble.n	1eccc <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ec92:	230a      	movs	r3, #10
   1ec94:	18fb      	adds	r3, r7, r3
   1ec96:	881a      	ldrh	r2, [r3, #0]
   1ec98:	2308      	movs	r3, #8
   1ec9a:	18fb      	adds	r3, r7, r3
   1ec9c:	881b      	ldrh	r3, [r3, #0]
   1ec9e:	1ad3      	subs	r3, r2, r3
   1eca0:	3307      	adds	r3, #7
   1eca2:	2b00      	cmp	r3, #0
   1eca4:	da00      	bge.n	1eca8 <SDMMC_UNSTUFF_BITS+0x11c>
   1eca6:	3307      	adds	r3, #7
   1eca8:	10db      	asrs	r3, r3, #3
   1ecaa:	3b03      	subs	r3, #3
   1ecac:	68fa      	ldr	r2, [r7, #12]
   1ecae:	18d3      	adds	r3, r2, r3
   1ecb0:	781b      	ldrb	r3, [r3, #0]
   1ecb2:	0019      	movs	r1, r3
   1ecb4:	2308      	movs	r3, #8
   1ecb6:	18fb      	adds	r3, r7, r3
   1ecb8:	881b      	ldrh	r3, [r3, #0]
   1ecba:	2207      	movs	r2, #7
   1ecbc:	4013      	ands	r3, r2
   1ecbe:	2210      	movs	r2, #16
   1ecc0:	1ad3      	subs	r3, r2, r3
   1ecc2:	4099      	lsls	r1, r3
   1ecc4:	000b      	movs	r3, r1
   1ecc6:	697a      	ldr	r2, [r7, #20]
   1ecc8:	4313      	orrs	r3, r2
   1ecca:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1eccc:	1dfb      	adds	r3, r7, #7
   1ecce:	781b      	ldrb	r3, [r3, #0]
   1ecd0:	2201      	movs	r2, #1
   1ecd2:	409a      	lsls	r2, r3
   1ecd4:	0013      	movs	r3, r2
   1ecd6:	1e5a      	subs	r2, r3, #1
   1ecd8:	697b      	ldr	r3, [r7, #20]
   1ecda:	4013      	ands	r3, r2
   1ecdc:	617b      	str	r3, [r7, #20]
	return value;
   1ecde:	697b      	ldr	r3, [r7, #20]
}
   1ece0:	0018      	movs	r0, r3
   1ece2:	46bd      	mov	sp, r7
   1ece4:	b007      	add	sp, #28
   1ece6:	bd90      	pop	{r4, r7, pc}

0001ece8 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1ece8:	b580      	push	{r7, lr}
   1ecea:	b082      	sub	sp, #8
   1ecec:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1ecee:	4b23      	ldr	r3, [pc, #140]	; (1ed7c <mmc_spi_op_cond+0x94>)
   1ecf0:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1ecf2:	4b23      	ldr	r3, [pc, #140]	; (1ed80 <mmc_spi_op_cond+0x98>)
   1ecf4:	2100      	movs	r1, #0
   1ecf6:	0018      	movs	r0, r3
   1ecf8:	4b22      	ldr	r3, [pc, #136]	; (1ed84 <mmc_spi_op_cond+0x9c>)
   1ecfa:	4798      	blx	r3
   1ecfc:	0003      	movs	r3, r0
   1ecfe:	001a      	movs	r2, r3
   1ed00:	2301      	movs	r3, #1
   1ed02:	4053      	eors	r3, r2
   1ed04:	b2db      	uxtb	r3, r3
   1ed06:	2b00      	cmp	r3, #0
   1ed08:	d001      	beq.n	1ed0e <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1ed0a:	2300      	movs	r3, #0
   1ed0c:	e031      	b.n	1ed72 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1ed0e:	4b1e      	ldr	r3, [pc, #120]	; (1ed88 <mmc_spi_op_cond+0xa0>)
   1ed10:	4798      	blx	r3
   1ed12:	0003      	movs	r3, r0
   1ed14:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1ed16:	683b      	ldr	r3, [r7, #0]
   1ed18:	2201      	movs	r2, #1
   1ed1a:	4013      	ands	r3, r2
   1ed1c:	d006      	beq.n	1ed2c <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1ed1e:	687b      	ldr	r3, [r7, #4]
   1ed20:	1e5a      	subs	r2, r3, #1
   1ed22:	607a      	str	r2, [r7, #4]
   1ed24:	2b00      	cmp	r3, #0
   1ed26:	d1e4      	bne.n	1ecf2 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1ed28:	2300      	movs	r3, #0
   1ed2a:	e022      	b.n	1ed72 <mmc_spi_op_cond+0x8a>
			break;
   1ed2c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ed2e:	4b17      	ldr	r3, [pc, #92]	; (1ed8c <mmc_spi_op_cond+0xa4>)
   1ed30:	2100      	movs	r1, #0
   1ed32:	0018      	movs	r0, r3
   1ed34:	4b13      	ldr	r3, [pc, #76]	; (1ed84 <mmc_spi_op_cond+0x9c>)
   1ed36:	4798      	blx	r3
   1ed38:	0003      	movs	r3, r0
   1ed3a:	001a      	movs	r2, r3
   1ed3c:	2301      	movs	r3, #1
   1ed3e:	4053      	eors	r3, r2
   1ed40:	b2db      	uxtb	r3, r3
   1ed42:	2b00      	cmp	r3, #0
   1ed44:	d001      	beq.n	1ed4a <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1ed46:	2300      	movs	r3, #0
   1ed48:	e013      	b.n	1ed72 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1ed4a:	4b0f      	ldr	r3, [pc, #60]	; (1ed88 <mmc_spi_op_cond+0xa0>)
   1ed4c:	4798      	blx	r3
   1ed4e:	0002      	movs	r2, r0
   1ed50:	23c0      	movs	r3, #192	; 0xc0
   1ed52:	05db      	lsls	r3, r3, #23
   1ed54:	401a      	ands	r2, r3
   1ed56:	2380      	movs	r3, #128	; 0x80
   1ed58:	05db      	lsls	r3, r3, #23
   1ed5a:	429a      	cmp	r2, r3
   1ed5c:	d108      	bne.n	1ed70 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ed5e:	4b0c      	ldr	r3, [pc, #48]	; (1ed90 <mmc_spi_op_cond+0xa8>)
   1ed60:	681a      	ldr	r2, [r3, #0]
   1ed62:	4b0b      	ldr	r3, [pc, #44]	; (1ed90 <mmc_spi_op_cond+0xa8>)
   1ed64:	681b      	ldr	r3, [r3, #0]
   1ed66:	7adb      	ldrb	r3, [r3, #11]
   1ed68:	2108      	movs	r1, #8
   1ed6a:	430b      	orrs	r3, r1
   1ed6c:	b2db      	uxtb	r3, r3
   1ed6e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1ed70:	2301      	movs	r3, #1
}
   1ed72:	0018      	movs	r0, r3
   1ed74:	46bd      	mov	sp, r7
   1ed76:	b002      	add	sp, #8
   1ed78:	bd80      	pop	{r7, pc}
   1ed7a:	46c0      	nop			; (mov r8, r8)
   1ed7c:	00001bee 	.word	0x00001bee
   1ed80:	00001101 	.word	0x00001101
   1ed84:	00020765 	.word	0x00020765
   1ed88:	000209a5 	.word	0x000209a5
   1ed8c:	0000053a 	.word	0x0000053a
   1ed90:	20003e7c 	.word	0x20003e7c

0001ed94 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1ed94:	b580      	push	{r7, lr}
   1ed96:	b086      	sub	sp, #24
   1ed98:	af00      	add	r7, sp, #0
   1ed9a:	0002      	movs	r2, r0
   1ed9c:	1dfb      	adds	r3, r7, #7
   1ed9e:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1eda0:	4b2e      	ldr	r3, [pc, #184]	; (1ee5c <sd_spi_op_cond+0xc8>)
   1eda2:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1eda4:	4b2e      	ldr	r3, [pc, #184]	; (1ee60 <sd_spi_op_cond+0xcc>)
   1eda6:	2100      	movs	r1, #0
   1eda8:	0018      	movs	r0, r3
   1edaa:	4b2e      	ldr	r3, [pc, #184]	; (1ee64 <sd_spi_op_cond+0xd0>)
   1edac:	4798      	blx	r3
   1edae:	0003      	movs	r3, r0
   1edb0:	001a      	movs	r2, r3
   1edb2:	2301      	movs	r3, #1
   1edb4:	4053      	eors	r3, r2
   1edb6:	b2db      	uxtb	r3, r3
   1edb8:	2b00      	cmp	r3, #0
   1edba:	d001      	beq.n	1edc0 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1edbc:	2300      	movs	r3, #0
   1edbe:	e048      	b.n	1ee52 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1edc0:	2300      	movs	r3, #0
   1edc2:	617b      	str	r3, [r7, #20]
		if (v2) {
   1edc4:	1dfb      	adds	r3, r7, #7
   1edc6:	781b      	ldrb	r3, [r3, #0]
   1edc8:	2b00      	cmp	r3, #0
   1edca:	d004      	beq.n	1edd6 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1edcc:	697b      	ldr	r3, [r7, #20]
   1edce:	2280      	movs	r2, #128	; 0x80
   1edd0:	05d2      	lsls	r2, r2, #23
   1edd2:	4313      	orrs	r3, r2
   1edd4:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1edd6:	697b      	ldr	r3, [r7, #20]
   1edd8:	4a23      	ldr	r2, [pc, #140]	; (1ee68 <sd_spi_op_cond+0xd4>)
   1edda:	0019      	movs	r1, r3
   1eddc:	0010      	movs	r0, r2
   1edde:	4b21      	ldr	r3, [pc, #132]	; (1ee64 <sd_spi_op_cond+0xd0>)
   1ede0:	4798      	blx	r3
   1ede2:	0003      	movs	r3, r0
   1ede4:	001a      	movs	r2, r3
   1ede6:	2301      	movs	r3, #1
   1ede8:	4053      	eors	r3, r2
   1edea:	b2db      	uxtb	r3, r3
   1edec:	2b00      	cmp	r3, #0
   1edee:	d001      	beq.n	1edf4 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1edf0:	2300      	movs	r3, #0
   1edf2:	e02e      	b.n	1ee52 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1edf4:	4b1d      	ldr	r3, [pc, #116]	; (1ee6c <sd_spi_op_cond+0xd8>)
   1edf6:	4798      	blx	r3
   1edf8:	0003      	movs	r3, r0
   1edfa:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1edfc:	68fb      	ldr	r3, [r7, #12]
   1edfe:	2201      	movs	r2, #1
   1ee00:	4013      	ands	r3, r2
   1ee02:	d006      	beq.n	1ee12 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1ee04:	693b      	ldr	r3, [r7, #16]
   1ee06:	1e5a      	subs	r2, r3, #1
   1ee08:	613a      	str	r2, [r7, #16]
   1ee0a:	2b00      	cmp	r3, #0
   1ee0c:	d1ca      	bne.n	1eda4 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1ee0e:	2300      	movs	r3, #0
   1ee10:	e01f      	b.n	1ee52 <sd_spi_op_cond+0xbe>
			break;
   1ee12:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ee14:	4b16      	ldr	r3, [pc, #88]	; (1ee70 <sd_spi_op_cond+0xdc>)
   1ee16:	2100      	movs	r1, #0
   1ee18:	0018      	movs	r0, r3
   1ee1a:	4b12      	ldr	r3, [pc, #72]	; (1ee64 <sd_spi_op_cond+0xd0>)
   1ee1c:	4798      	blx	r3
   1ee1e:	0003      	movs	r3, r0
   1ee20:	001a      	movs	r2, r3
   1ee22:	2301      	movs	r3, #1
   1ee24:	4053      	eors	r3, r2
   1ee26:	b2db      	uxtb	r3, r3
   1ee28:	2b00      	cmp	r3, #0
   1ee2a:	d001      	beq.n	1ee30 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1ee2c:	2300      	movs	r3, #0
   1ee2e:	e010      	b.n	1ee52 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1ee30:	4b0e      	ldr	r3, [pc, #56]	; (1ee6c <sd_spi_op_cond+0xd8>)
   1ee32:	4798      	blx	r3
   1ee34:	0002      	movs	r2, r0
   1ee36:	2380      	movs	r3, #128	; 0x80
   1ee38:	05db      	lsls	r3, r3, #23
   1ee3a:	4013      	ands	r3, r2
   1ee3c:	d008      	beq.n	1ee50 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ee3e:	4b0d      	ldr	r3, [pc, #52]	; (1ee74 <sd_spi_op_cond+0xe0>)
   1ee40:	681a      	ldr	r2, [r3, #0]
   1ee42:	4b0c      	ldr	r3, [pc, #48]	; (1ee74 <sd_spi_op_cond+0xe0>)
   1ee44:	681b      	ldr	r3, [r3, #0]
   1ee46:	7adb      	ldrb	r3, [r3, #11]
   1ee48:	2108      	movs	r1, #8
   1ee4a:	430b      	orrs	r3, r1
   1ee4c:	b2db      	uxtb	r3, r3
   1ee4e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1ee50:	2301      	movs	r3, #1
}
   1ee52:	0018      	movs	r0, r3
   1ee54:	46bd      	mov	sp, r7
   1ee56:	b006      	add	sp, #24
   1ee58:	bd80      	pop	{r7, pc}
   1ee5a:	46c0      	nop			; (mov r8, r8)
   1ee5c:	00001bee 	.word	0x00001bee
   1ee60:	00001137 	.word	0x00001137
   1ee64:	00020765 	.word	0x00020765
   1ee68:	00001129 	.word	0x00001129
   1ee6c:	000209a5 	.word	0x000209a5
   1ee70:	0000053a 	.word	0x0000053a
   1ee74:	20003e7c 	.word	0x20003e7c

0001ee78 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1ee78:	b580      	push	{r7, lr}
   1ee7a:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1ee7c:	2301      	movs	r3, #1
}
   1ee7e:	0018      	movs	r0, r3
   1ee80:	46bd      	mov	sp, r7
   1ee82:	bd80      	pop	{r7, pc}

0001ee84 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1ee84:	b580      	push	{r7, lr}
   1ee86:	b084      	sub	sp, #16
   1ee88:	af00      	add	r7, sp, #0
   1ee8a:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1ee8c:	687b      	ldr	r3, [r7, #4]
   1ee8e:	2200      	movs	r2, #0
   1ee90:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1ee92:	23d5      	movs	r3, #213	; 0xd5
   1ee94:	005b      	lsls	r3, r3, #1
   1ee96:	4a14      	ldr	r2, [pc, #80]	; (1eee8 <sd_cmd8+0x64>)
   1ee98:	0019      	movs	r1, r3
   1ee9a:	0010      	movs	r0, r2
   1ee9c:	4b13      	ldr	r3, [pc, #76]	; (1eeec <sd_cmd8+0x68>)
   1ee9e:	4798      	blx	r3
   1eea0:	0003      	movs	r3, r0
   1eea2:	001a      	movs	r2, r3
   1eea4:	2301      	movs	r3, #1
   1eea6:	4053      	eors	r3, r2
   1eea8:	b2db      	uxtb	r3, r3
   1eeaa:	2b00      	cmp	r3, #0
   1eeac:	d001      	beq.n	1eeb2 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1eeae:	2301      	movs	r3, #1
   1eeb0:	e015      	b.n	1eede <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1eeb2:	4b0f      	ldr	r3, [pc, #60]	; (1eef0 <sd_cmd8+0x6c>)
   1eeb4:	4798      	blx	r3
   1eeb6:	0003      	movs	r3, r0
   1eeb8:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1eeba:	68fb      	ldr	r3, [r7, #12]
   1eebc:	3301      	adds	r3, #1
   1eebe:	d101      	bne.n	1eec4 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1eec0:	2301      	movs	r3, #1
   1eec2:	e00c      	b.n	1eede <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1eec4:	68fb      	ldr	r3, [r7, #12]
   1eec6:	051b      	lsls	r3, r3, #20
   1eec8:	0d1a      	lsrs	r2, r3, #20
   1eeca:	23d5      	movs	r3, #213	; 0xd5
   1eecc:	005b      	lsls	r3, r3, #1
   1eece:	429a      	cmp	r2, r3
   1eed0:	d001      	beq.n	1eed6 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1eed2:	2300      	movs	r3, #0
   1eed4:	e003      	b.n	1eede <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1eed6:	687b      	ldr	r3, [r7, #4]
   1eed8:	2201      	movs	r2, #1
   1eeda:	701a      	strb	r2, [r3, #0]
	return true;
   1eedc:	2301      	movs	r3, #1
}
   1eede:	0018      	movs	r0, r3
   1eee0:	46bd      	mov	sp, r7
   1eee2:	b004      	add	sp, #16
   1eee4:	bd80      	pop	{r7, pc}
   1eee6:	46c0      	nop			; (mov r8, r8)
   1eee8:	00005508 	.word	0x00005508
   1eeec:	00020765 	.word	0x00020765
   1eef0:	000209a5 	.word	0x000209a5

0001eef4 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1eef4:	b590      	push	{r4, r7, lr}
   1eef6:	b089      	sub	sp, #36	; 0x24
   1eef8:	af02      	add	r7, sp, #8
   1eefa:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1eefc:	2380      	movs	r3, #128	; 0x80
   1eefe:	009a      	lsls	r2, r3, #2
   1ef00:	4841      	ldr	r0, [pc, #260]	; (1f008 <mmc_cmd8+0x114>)
   1ef02:	2300      	movs	r3, #0
   1ef04:	9300      	str	r3, [sp, #0]
   1ef06:	2301      	movs	r3, #1
   1ef08:	2100      	movs	r1, #0
   1ef0a:	4c40      	ldr	r4, [pc, #256]	; (1f00c <mmc_cmd8+0x118>)
   1ef0c:	47a0      	blx	r4
   1ef0e:	0003      	movs	r3, r0
   1ef10:	001a      	movs	r2, r3
   1ef12:	2301      	movs	r3, #1
   1ef14:	4053      	eors	r3, r2
   1ef16:	b2db      	uxtb	r3, r3
   1ef18:	2b00      	cmp	r3, #0
   1ef1a:	d001      	beq.n	1ef20 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1ef1c:	2300      	movs	r3, #0
   1ef1e:	e06e      	b.n	1effe <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ef20:	2316      	movs	r3, #22
   1ef22:	18fb      	adds	r3, r7, r3
   1ef24:	2200      	movs	r2, #0
   1ef26:	801a      	strh	r2, [r3, #0]
   1ef28:	e014      	b.n	1ef54 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1ef2a:	2310      	movs	r3, #16
   1ef2c:	18fb      	adds	r3, r7, r3
   1ef2e:	0018      	movs	r0, r3
   1ef30:	4b37      	ldr	r3, [pc, #220]	; (1f010 <mmc_cmd8+0x11c>)
   1ef32:	4798      	blx	r3
   1ef34:	0003      	movs	r3, r0
   1ef36:	001a      	movs	r2, r3
   1ef38:	2301      	movs	r3, #1
   1ef3a:	4053      	eors	r3, r2
   1ef3c:	b2db      	uxtb	r3, r3
   1ef3e:	2b00      	cmp	r3, #0
   1ef40:	d001      	beq.n	1ef46 <mmc_cmd8+0x52>
			return false;
   1ef42:	2300      	movs	r3, #0
   1ef44:	e05b      	b.n	1effe <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ef46:	2316      	movs	r3, #22
   1ef48:	18fb      	adds	r3, r7, r3
   1ef4a:	881a      	ldrh	r2, [r3, #0]
   1ef4c:	2316      	movs	r3, #22
   1ef4e:	18fb      	adds	r3, r7, r3
   1ef50:	3201      	adds	r2, #1
   1ef52:	801a      	strh	r2, [r3, #0]
   1ef54:	2316      	movs	r3, #22
   1ef56:	18fb      	adds	r3, r7, r3
   1ef58:	881b      	ldrh	r3, [r3, #0]
   1ef5a:	2b31      	cmp	r3, #49	; 0x31
   1ef5c:	d9e5      	bls.n	1ef2a <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1ef5e:	693b      	ldr	r3, [r7, #16]
   1ef60:	b2db      	uxtb	r3, r3
   1ef62:	2202      	movs	r2, #2
   1ef64:	4013      	ands	r3, r2
   1ef66:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1ef68:	687b      	ldr	r3, [r7, #4]
   1ef6a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1ef6c:	4b29      	ldr	r3, [pc, #164]	; (1f014 <mmc_cmd8+0x120>)
   1ef6e:	681b      	ldr	r3, [r3, #0]
   1ef70:	330e      	adds	r3, #14
   1ef72:	0018      	movs	r0, r3
   1ef74:	230c      	movs	r3, #12
   1ef76:	223e      	movs	r2, #62	; 0x3e
   1ef78:	2180      	movs	r1, #128	; 0x80
   1ef7a:	4c27      	ldr	r4, [pc, #156]	; (1f018 <mmc_cmd8+0x124>)
   1ef7c:	47a0      	blx	r4
   1ef7e:	0002      	movs	r2, r0
   1ef80:	4b26      	ldr	r3, [pc, #152]	; (1f01c <mmc_cmd8+0x128>)
   1ef82:	429a      	cmp	r2, r3
   1ef84:	d135      	bne.n	1eff2 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1ef86:	e014      	b.n	1efb2 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1ef88:	230c      	movs	r3, #12
   1ef8a:	18fb      	adds	r3, r7, r3
   1ef8c:	0018      	movs	r0, r3
   1ef8e:	4b20      	ldr	r3, [pc, #128]	; (1f010 <mmc_cmd8+0x11c>)
   1ef90:	4798      	blx	r3
   1ef92:	0003      	movs	r3, r0
   1ef94:	001a      	movs	r2, r3
   1ef96:	2301      	movs	r3, #1
   1ef98:	4053      	eors	r3, r2
   1ef9a:	b2db      	uxtb	r3, r3
   1ef9c:	2b00      	cmp	r3, #0
   1ef9e:	d001      	beq.n	1efa4 <mmc_cmd8+0xb0>
				return false;
   1efa0:	2300      	movs	r3, #0
   1efa2:	e02c      	b.n	1effe <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1efa4:	2316      	movs	r3, #22
   1efa6:	18fb      	adds	r3, r7, r3
   1efa8:	881a      	ldrh	r2, [r3, #0]
   1efaa:	2316      	movs	r3, #22
   1efac:	18fb      	adds	r3, r7, r3
   1efae:	3201      	adds	r2, #1
   1efb0:	801a      	strh	r2, [r3, #0]
   1efb2:	2316      	movs	r3, #22
   1efb4:	18fb      	adds	r3, r7, r3
   1efb6:	881b      	ldrh	r3, [r3, #0]
   1efb8:	2b35      	cmp	r3, #53	; 0x35
   1efba:	d9e5      	bls.n	1ef88 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1efbc:	4b15      	ldr	r3, [pc, #84]	; (1f014 <mmc_cmd8+0x120>)
   1efbe:	681b      	ldr	r3, [r3, #0]
   1efc0:	68fa      	ldr	r2, [r7, #12]
   1efc2:	0852      	lsrs	r2, r2, #1
   1efc4:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1efc6:	e014      	b.n	1eff2 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1efc8:	230c      	movs	r3, #12
   1efca:	18fb      	adds	r3, r7, r3
   1efcc:	0018      	movs	r0, r3
   1efce:	4b10      	ldr	r3, [pc, #64]	; (1f010 <mmc_cmd8+0x11c>)
   1efd0:	4798      	blx	r3
   1efd2:	0003      	movs	r3, r0
   1efd4:	001a      	movs	r2, r3
   1efd6:	2301      	movs	r3, #1
   1efd8:	4053      	eors	r3, r2
   1efda:	b2db      	uxtb	r3, r3
   1efdc:	2b00      	cmp	r3, #0
   1efde:	d001      	beq.n	1efe4 <mmc_cmd8+0xf0>
			return false;
   1efe0:	2300      	movs	r3, #0
   1efe2:	e00c      	b.n	1effe <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1efe4:	2316      	movs	r3, #22
   1efe6:	18fb      	adds	r3, r7, r3
   1efe8:	881a      	ldrh	r2, [r3, #0]
   1efea:	2316      	movs	r3, #22
   1efec:	18fb      	adds	r3, r7, r3
   1efee:	3201      	adds	r2, #1
   1eff0:	801a      	strh	r2, [r3, #0]
   1eff2:	2316      	movs	r3, #22
   1eff4:	18fb      	adds	r3, r7, r3
   1eff6:	881b      	ldrh	r3, [r3, #0]
   1eff8:	2b7f      	cmp	r3, #127	; 0x7f
   1effa:	d9e5      	bls.n	1efc8 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1effc:	2301      	movs	r3, #1
}
   1effe:	0018      	movs	r0, r3
   1f000:	46bd      	mov	sp, r7
   1f002:	b007      	add	sp, #28
   1f004:	bd90      	pop	{r4, r7, pc}
   1f006:	46c0      	nop			; (mov r8, r8)
   1f008:	00081108 	.word	0x00081108
   1f00c:	0002078d 	.word	0x0002078d
   1f010:	000209b9 	.word	0x000209b9
   1f014:	20003e7c 	.word	0x20003e7c
   1f018:	0001eb8d 	.word	0x0001eb8d
   1f01c:	00000fff 	.word	0x00000fff

0001f020 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1f020:	b590      	push	{r4, r7, lr}
   1f022:	b083      	sub	sp, #12
   1f024:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1f026:	4b15      	ldr	r3, [pc, #84]	; (1f07c <sd_mmc_cmd9_spi+0x5c>)
   1f028:	681b      	ldr	r3, [r3, #0]
   1f02a:	891b      	ldrh	r3, [r3, #8]
   1f02c:	0419      	lsls	r1, r3, #16
   1f02e:	4814      	ldr	r0, [pc, #80]	; (1f080 <sd_mmc_cmd9_spi+0x60>)
   1f030:	2301      	movs	r3, #1
   1f032:	9300      	str	r3, [sp, #0]
   1f034:	2301      	movs	r3, #1
   1f036:	2210      	movs	r2, #16
   1f038:	4c12      	ldr	r4, [pc, #72]	; (1f084 <sd_mmc_cmd9_spi+0x64>)
   1f03a:	47a0      	blx	r4
   1f03c:	0003      	movs	r3, r0
   1f03e:	001a      	movs	r2, r3
   1f040:	2301      	movs	r3, #1
   1f042:	4053      	eors	r3, r2
   1f044:	b2db      	uxtb	r3, r3
   1f046:	2b00      	cmp	r3, #0
   1f048:	d001      	beq.n	1f04e <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1f04a:	2300      	movs	r3, #0
   1f04c:	e012      	b.n	1f074 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1f04e:	4b0b      	ldr	r3, [pc, #44]	; (1f07c <sd_mmc_cmd9_spi+0x5c>)
   1f050:	681b      	ldr	r3, [r3, #0]
   1f052:	330e      	adds	r3, #14
   1f054:	2101      	movs	r1, #1
   1f056:	0018      	movs	r0, r3
   1f058:	4b0b      	ldr	r3, [pc, #44]	; (1f088 <sd_mmc_cmd9_spi+0x68>)
   1f05a:	4798      	blx	r3
   1f05c:	0003      	movs	r3, r0
   1f05e:	001a      	movs	r2, r3
   1f060:	2301      	movs	r3, #1
   1f062:	4053      	eors	r3, r2
   1f064:	b2db      	uxtb	r3, r3
   1f066:	2b00      	cmp	r3, #0
   1f068:	d001      	beq.n	1f06e <sd_mmc_cmd9_spi+0x4e>
		return false;
   1f06a:	2300      	movs	r3, #0
   1f06c:	e002      	b.n	1f074 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1f06e:	4b07      	ldr	r3, [pc, #28]	; (1f08c <sd_mmc_cmd9_spi+0x6c>)
   1f070:	4798      	blx	r3
   1f072:	0003      	movs	r3, r0
}
   1f074:	0018      	movs	r0, r3
   1f076:	46bd      	mov	sp, r7
   1f078:	b001      	add	sp, #4
   1f07a:	bd90      	pop	{r4, r7, pc}
   1f07c:	20003e7c 	.word	0x20003e7c
   1f080:	00081109 	.word	0x00081109
   1f084:	0002078d 	.word	0x0002078d
   1f088:	00020a5d 	.word	0x00020a5d
   1f08c:	00020b01 	.word	0x00020b01

0001f090 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1f090:	b5b0      	push	{r4, r5, r7, lr}
   1f092:	b084      	sub	sp, #16
   1f094:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1f096:	4b45      	ldr	r3, [pc, #276]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f098:	681b      	ldr	r3, [r3, #0]
   1f09a:	330e      	adds	r3, #14
   1f09c:	0018      	movs	r0, r3
   1f09e:	2304      	movs	r3, #4
   1f0a0:	227a      	movs	r2, #122	; 0x7a
   1f0a2:	2180      	movs	r1, #128	; 0x80
   1f0a4:	4c42      	ldr	r4, [pc, #264]	; (1f1b0 <mmc_decode_csd+0x120>)
   1f0a6:	47a0      	blx	r4
   1f0a8:	0003      	movs	r3, r0
   1f0aa:	2b02      	cmp	r3, #2
   1f0ac:	d011      	beq.n	1f0d2 <mmc_decode_csd+0x42>
   1f0ae:	d802      	bhi.n	1f0b6 <mmc_decode_csd+0x26>
   1f0b0:	2b01      	cmp	r3, #1
   1f0b2:	d009      	beq.n	1f0c8 <mmc_decode_csd+0x38>
   1f0b4:	e003      	b.n	1f0be <mmc_decode_csd+0x2e>
   1f0b6:	2b03      	cmp	r3, #3
   1f0b8:	d010      	beq.n	1f0dc <mmc_decode_csd+0x4c>
   1f0ba:	2b04      	cmp	r3, #4
   1f0bc:	d013      	beq.n	1f0e6 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1f0be:	4b3b      	ldr	r3, [pc, #236]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f0c0:	681b      	ldr	r3, [r3, #0]
   1f0c2:	2212      	movs	r2, #18
   1f0c4:	731a      	strb	r2, [r3, #12]
		break;
   1f0c6:	e013      	b.n	1f0f0 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1f0c8:	4b38      	ldr	r3, [pc, #224]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f0ca:	681b      	ldr	r3, [r3, #0]
   1f0cc:	2214      	movs	r2, #20
   1f0ce:	731a      	strb	r2, [r3, #12]
		break;
   1f0d0:	e00e      	b.n	1f0f0 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1f0d2:	4b36      	ldr	r3, [pc, #216]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f0d4:	681b      	ldr	r3, [r3, #0]
   1f0d6:	2222      	movs	r2, #34	; 0x22
   1f0d8:	731a      	strb	r2, [r3, #12]
		break;
   1f0da:	e009      	b.n	1f0f0 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1f0dc:	4b33      	ldr	r3, [pc, #204]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f0de:	681b      	ldr	r3, [r3, #0]
   1f0e0:	2230      	movs	r2, #48	; 0x30
   1f0e2:	731a      	strb	r2, [r3, #12]
		break;
   1f0e4:	e004      	b.n	1f0f0 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1f0e6:	4b31      	ldr	r3, [pc, #196]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f0e8:	681b      	ldr	r3, [r3, #0]
   1f0ea:	2240      	movs	r2, #64	; 0x40
   1f0ec:	731a      	strb	r2, [r3, #12]
		break;
   1f0ee:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f0f0:	4b2e      	ldr	r3, [pc, #184]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f0f2:	681b      	ldr	r3, [r3, #0]
   1f0f4:	330e      	adds	r3, #14
   1f0f6:	0018      	movs	r0, r3
   1f0f8:	2308      	movs	r3, #8
   1f0fa:	2260      	movs	r2, #96	; 0x60
   1f0fc:	2180      	movs	r1, #128	; 0x80
   1f0fe:	4c2c      	ldr	r4, [pc, #176]	; (1f1b0 <mmc_decode_csd+0x120>)
   1f100:	47a0      	blx	r4
   1f102:	0003      	movs	r3, r0
   1f104:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f106:	68fb      	ldr	r3, [r7, #12]
   1f108:	2207      	movs	r2, #7
   1f10a:	401a      	ands	r2, r3
   1f10c:	4b29      	ldr	r3, [pc, #164]	; (1f1b4 <mmc_decode_csd+0x124>)
   1f10e:	0092      	lsls	r2, r2, #2
   1f110:	58d3      	ldr	r3, [r2, r3]
   1f112:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f114:	68fb      	ldr	r3, [r7, #12]
   1f116:	08db      	lsrs	r3, r3, #3
   1f118:	220f      	movs	r2, #15
   1f11a:	401a      	ands	r2, r3
   1f11c:	4b26      	ldr	r3, [pc, #152]	; (1f1b8 <mmc_decode_csd+0x128>)
   1f11e:	0092      	lsls	r2, r2, #2
   1f120:	58d3      	ldr	r3, [r2, r3]
   1f122:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f124:	4b21      	ldr	r3, [pc, #132]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f126:	681b      	ldr	r3, [r3, #0]
   1f128:	68ba      	ldr	r2, [r7, #8]
   1f12a:	6879      	ldr	r1, [r7, #4]
   1f12c:	434a      	muls	r2, r1
   1f12e:	21fa      	movs	r1, #250	; 0xfa
   1f130:	0089      	lsls	r1, r1, #2
   1f132:	434a      	muls	r2, r1
   1f134:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1f136:	4b1d      	ldr	r3, [pc, #116]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f138:	681b      	ldr	r3, [r3, #0]
   1f13a:	330e      	adds	r3, #14
   1f13c:	0018      	movs	r0, r3
   1f13e:	230c      	movs	r3, #12
   1f140:	223e      	movs	r2, #62	; 0x3e
   1f142:	2180      	movs	r1, #128	; 0x80
   1f144:	4c1a      	ldr	r4, [pc, #104]	; (1f1b0 <mmc_decode_csd+0x120>)
   1f146:	47a0      	blx	r4
   1f148:	0002      	movs	r2, r0
   1f14a:	4b1c      	ldr	r3, [pc, #112]	; (1f1bc <mmc_decode_csd+0x12c>)
   1f14c:	429a      	cmp	r2, r3
   1f14e:	d028      	beq.n	1f1a2 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f150:	4b16      	ldr	r3, [pc, #88]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f152:	681b      	ldr	r3, [r3, #0]
   1f154:	330e      	adds	r3, #14
   1f156:	0018      	movs	r0, r3
   1f158:	230c      	movs	r3, #12
   1f15a:	223e      	movs	r2, #62	; 0x3e
   1f15c:	2180      	movs	r1, #128	; 0x80
   1f15e:	4c14      	ldr	r4, [pc, #80]	; (1f1b0 <mmc_decode_csd+0x120>)
   1f160:	47a0      	blx	r4
   1f162:	0003      	movs	r3, r0
   1f164:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f166:	4b11      	ldr	r3, [pc, #68]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f168:	681b      	ldr	r3, [r3, #0]
   1f16a:	330e      	adds	r3, #14
   1f16c:	0018      	movs	r0, r3
   1f16e:	2303      	movs	r3, #3
   1f170:	222f      	movs	r2, #47	; 0x2f
   1f172:	2180      	movs	r1, #128	; 0x80
   1f174:	4d0e      	ldr	r5, [pc, #56]	; (1f1b0 <mmc_decode_csd+0x120>)
   1f176:	47a8      	blx	r5
   1f178:	0003      	movs	r3, r0
   1f17a:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f17c:	409c      	lsls	r4, r3
   1f17e:	0023      	movs	r3, r4
   1f180:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f182:	4b0a      	ldr	r3, [pc, #40]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f184:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f186:	4b09      	ldr	r3, [pc, #36]	; (1f1ac <mmc_decode_csd+0x11c>)
   1f188:	681b      	ldr	r3, [r3, #0]
   1f18a:	330e      	adds	r3, #14
   1f18c:	0018      	movs	r0, r3
   1f18e:	2304      	movs	r3, #4
   1f190:	2250      	movs	r2, #80	; 0x50
   1f192:	2180      	movs	r1, #128	; 0x80
   1f194:	4d06      	ldr	r5, [pc, #24]	; (1f1b0 <mmc_decode_csd+0x120>)
   1f196:	47a8      	blx	r5
   1f198:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f19a:	683b      	ldr	r3, [r7, #0]
   1f19c:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f19e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f1a0:	6063      	str	r3, [r4, #4]
	}
}
   1f1a2:	46c0      	nop			; (mov r8, r8)
   1f1a4:	46bd      	mov	sp, r7
   1f1a6:	b004      	add	sp, #16
   1f1a8:	bdb0      	pop	{r4, r5, r7, pc}
   1f1aa:	46c0      	nop			; (mov r8, r8)
   1f1ac:	20003e7c 	.word	0x20003e7c
   1f1b0:	0001eb8d 	.word	0x0001eb8d
   1f1b4:	00038df4 	.word	0x00038df4
   1f1b8:	00038e50 	.word	0x00038e50
   1f1bc:	00000fff 	.word	0x00000fff

0001f1c0 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1f1c0:	b5b0      	push	{r4, r5, r7, lr}
   1f1c2:	b084      	sub	sp, #16
   1f1c4:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f1c6:	4b35      	ldr	r3, [pc, #212]	; (1f29c <sd_decode_csd+0xdc>)
   1f1c8:	681b      	ldr	r3, [r3, #0]
   1f1ca:	330e      	adds	r3, #14
   1f1cc:	0018      	movs	r0, r3
   1f1ce:	2308      	movs	r3, #8
   1f1d0:	2260      	movs	r2, #96	; 0x60
   1f1d2:	2180      	movs	r1, #128	; 0x80
   1f1d4:	4c32      	ldr	r4, [pc, #200]	; (1f2a0 <sd_decode_csd+0xe0>)
   1f1d6:	47a0      	blx	r4
   1f1d8:	0003      	movs	r3, r0
   1f1da:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f1dc:	68fb      	ldr	r3, [r7, #12]
   1f1de:	2207      	movs	r2, #7
   1f1e0:	401a      	ands	r2, r3
   1f1e2:	4b30      	ldr	r3, [pc, #192]	; (1f2a4 <sd_decode_csd+0xe4>)
   1f1e4:	0092      	lsls	r2, r2, #2
   1f1e6:	58d3      	ldr	r3, [r2, r3]
   1f1e8:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f1ea:	68fb      	ldr	r3, [r7, #12]
   1f1ec:	08db      	lsrs	r3, r3, #3
   1f1ee:	220f      	movs	r2, #15
   1f1f0:	401a      	ands	r2, r3
   1f1f2:	4b2d      	ldr	r3, [pc, #180]	; (1f2a8 <sd_decode_csd+0xe8>)
   1f1f4:	0092      	lsls	r2, r2, #2
   1f1f6:	58d3      	ldr	r3, [r2, r3]
   1f1f8:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f1fa:	4b28      	ldr	r3, [pc, #160]	; (1f29c <sd_decode_csd+0xdc>)
   1f1fc:	681b      	ldr	r3, [r3, #0]
   1f1fe:	68ba      	ldr	r2, [r7, #8]
   1f200:	6879      	ldr	r1, [r7, #4]
   1f202:	434a      	muls	r2, r1
   1f204:	21fa      	movs	r1, #250	; 0xfa
   1f206:	0089      	lsls	r1, r1, #2
   1f208:	434a      	muls	r2, r1
   1f20a:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1f20c:	4b23      	ldr	r3, [pc, #140]	; (1f29c <sd_decode_csd+0xdc>)
   1f20e:	681b      	ldr	r3, [r3, #0]
   1f210:	330e      	adds	r3, #14
   1f212:	0018      	movs	r0, r3
   1f214:	2302      	movs	r3, #2
   1f216:	227e      	movs	r2, #126	; 0x7e
   1f218:	2180      	movs	r1, #128	; 0x80
   1f21a:	4c21      	ldr	r4, [pc, #132]	; (1f2a0 <sd_decode_csd+0xe0>)
   1f21c:	47a0      	blx	r4
   1f21e:	1e03      	subs	r3, r0, #0
   1f220:	d00f      	beq.n	1f242 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1f222:	4b1e      	ldr	r3, [pc, #120]	; (1f29c <sd_decode_csd+0xdc>)
   1f224:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1f226:	4b1d      	ldr	r3, [pc, #116]	; (1f29c <sd_decode_csd+0xdc>)
   1f228:	681b      	ldr	r3, [r3, #0]
   1f22a:	330e      	adds	r3, #14
   1f22c:	0018      	movs	r0, r3
   1f22e:	2316      	movs	r3, #22
   1f230:	2230      	movs	r2, #48	; 0x30
   1f232:	2180      	movs	r1, #128	; 0x80
   1f234:	4d1a      	ldr	r5, [pc, #104]	; (1f2a0 <sd_decode_csd+0xe0>)
   1f236:	47a8      	blx	r5
   1f238:	0003      	movs	r3, r0
				* 512;
   1f23a:	3301      	adds	r3, #1
   1f23c:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1f23e:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1f240:	e028      	b.n	1f294 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f242:	4b16      	ldr	r3, [pc, #88]	; (1f29c <sd_decode_csd+0xdc>)
   1f244:	681b      	ldr	r3, [r3, #0]
   1f246:	330e      	adds	r3, #14
   1f248:	0018      	movs	r0, r3
   1f24a:	230c      	movs	r3, #12
   1f24c:	223e      	movs	r2, #62	; 0x3e
   1f24e:	2180      	movs	r1, #128	; 0x80
   1f250:	4c13      	ldr	r4, [pc, #76]	; (1f2a0 <sd_decode_csd+0xe0>)
   1f252:	47a0      	blx	r4
   1f254:	0003      	movs	r3, r0
   1f256:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f258:	4b10      	ldr	r3, [pc, #64]	; (1f29c <sd_decode_csd+0xdc>)
   1f25a:	681b      	ldr	r3, [r3, #0]
   1f25c:	330e      	adds	r3, #14
   1f25e:	0018      	movs	r0, r3
   1f260:	2303      	movs	r3, #3
   1f262:	222f      	movs	r2, #47	; 0x2f
   1f264:	2180      	movs	r1, #128	; 0x80
   1f266:	4d0e      	ldr	r5, [pc, #56]	; (1f2a0 <sd_decode_csd+0xe0>)
   1f268:	47a8      	blx	r5
   1f26a:	0003      	movs	r3, r0
   1f26c:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f26e:	409c      	lsls	r4, r3
   1f270:	0023      	movs	r3, r4
   1f272:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f274:	4b09      	ldr	r3, [pc, #36]	; (1f29c <sd_decode_csd+0xdc>)
   1f276:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1f278:	4b08      	ldr	r3, [pc, #32]	; (1f29c <sd_decode_csd+0xdc>)
   1f27a:	681b      	ldr	r3, [r3, #0]
   1f27c:	330e      	adds	r3, #14
   1f27e:	0018      	movs	r0, r3
   1f280:	2304      	movs	r3, #4
   1f282:	2250      	movs	r2, #80	; 0x50
   1f284:	2180      	movs	r1, #128	; 0x80
   1f286:	4d06      	ldr	r5, [pc, #24]	; (1f2a0 <sd_decode_csd+0xe0>)
   1f288:	47a8      	blx	r5
   1f28a:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f28c:	683b      	ldr	r3, [r7, #0]
   1f28e:	4093      	lsls	r3, r2
				/ 1024;
   1f290:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f292:	6063      	str	r3, [r4, #4]
}
   1f294:	46c0      	nop			; (mov r8, r8)
   1f296:	46bd      	mov	sp, r7
   1f298:	b004      	add	sp, #16
   1f29a:	bdb0      	pop	{r4, r5, r7, pc}
   1f29c:	20003e7c 	.word	0x20003e7c
   1f2a0:	0001eb8d 	.word	0x0001eb8d
   1f2a4:	00038df4 	.word	0x00038df4
   1f2a8:	00038e10 	.word	0x00038e10

0001f2ac <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1f2ac:	b580      	push	{r7, lr}
   1f2ae:	b082      	sub	sp, #8
   1f2b0:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1f2b2:	4b11      	ldr	r3, [pc, #68]	; (1f2f8 <sd_mmc_cmd13+0x4c>)
   1f2b4:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1f2b6:	4b11      	ldr	r3, [pc, #68]	; (1f2fc <sd_mmc_cmd13+0x50>)
   1f2b8:	2100      	movs	r1, #0
   1f2ba:	0018      	movs	r0, r3
   1f2bc:	4b10      	ldr	r3, [pc, #64]	; (1f300 <sd_mmc_cmd13+0x54>)
   1f2be:	4798      	blx	r3
   1f2c0:	0003      	movs	r3, r0
   1f2c2:	001a      	movs	r2, r3
   1f2c4:	2301      	movs	r3, #1
   1f2c6:	4053      	eors	r3, r2
   1f2c8:	b2db      	uxtb	r3, r3
   1f2ca:	2b00      	cmp	r3, #0
   1f2cc:	d001      	beq.n	1f2d2 <sd_mmc_cmd13+0x26>
				return false;
   1f2ce:	2300      	movs	r3, #0
   1f2d0:	e00e      	b.n	1f2f0 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1f2d2:	4b0c      	ldr	r3, [pc, #48]	; (1f304 <sd_mmc_cmd13+0x58>)
   1f2d4:	4798      	blx	r3
   1f2d6:	0002      	movs	r2, r0
   1f2d8:	23ff      	movs	r3, #255	; 0xff
   1f2da:	4013      	ands	r3, r2
   1f2dc:	d006      	beq.n	1f2ec <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1f2de:	687b      	ldr	r3, [r7, #4]
   1f2e0:	1e5a      	subs	r2, r3, #1
   1f2e2:	607a      	str	r2, [r7, #4]
   1f2e4:	2b00      	cmp	r3, #0
   1f2e6:	d1e6      	bne.n	1f2b6 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1f2e8:	2300      	movs	r3, #0
   1f2ea:	e001      	b.n	1f2f0 <sd_mmc_cmd13+0x44>
				break;
   1f2ec:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1f2ee:	2301      	movs	r3, #1
}
   1f2f0:	0018      	movs	r0, r3
   1f2f2:	46bd      	mov	sp, r7
   1f2f4:	b002      	add	sp, #8
   1f2f6:	bd80      	pop	{r7, pc}
   1f2f8:	00030d40 	.word	0x00030d40
   1f2fc:	00001b0d 	.word	0x00001b0d
   1f300:	00020765 	.word	0x00020765
   1f304:	000209a5 	.word	0x000209a5

0001f308 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1f308:	b590      	push	{r4, r7, lr}
   1f30a:	b085      	sub	sp, #20
   1f30c:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1f30e:	4b38      	ldr	r3, [pc, #224]	; (1f3f0 <sd_acmd51+0xe8>)
   1f310:	681b      	ldr	r3, [r3, #0]
   1f312:	891b      	ldrh	r3, [r3, #8]
   1f314:	041b      	lsls	r3, r3, #16
   1f316:	4a37      	ldr	r2, [pc, #220]	; (1f3f4 <sd_acmd51+0xec>)
   1f318:	0019      	movs	r1, r3
   1f31a:	0010      	movs	r0, r2
   1f31c:	4b36      	ldr	r3, [pc, #216]	; (1f3f8 <sd_acmd51+0xf0>)
   1f31e:	4798      	blx	r3
   1f320:	0003      	movs	r3, r0
   1f322:	001a      	movs	r2, r3
   1f324:	2301      	movs	r3, #1
   1f326:	4053      	eors	r3, r2
   1f328:	b2db      	uxtb	r3, r3
   1f32a:	2b00      	cmp	r3, #0
   1f32c:	d001      	beq.n	1f332 <sd_acmd51+0x2a>
		return false;
   1f32e:	2300      	movs	r3, #0
   1f330:	e059      	b.n	1f3e6 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1f332:	4832      	ldr	r0, [pc, #200]	; (1f3fc <sd_acmd51+0xf4>)
   1f334:	2301      	movs	r3, #1
   1f336:	9300      	str	r3, [sp, #0]
   1f338:	2301      	movs	r3, #1
   1f33a:	2208      	movs	r2, #8
   1f33c:	2100      	movs	r1, #0
   1f33e:	4c30      	ldr	r4, [pc, #192]	; (1f400 <sd_acmd51+0xf8>)
   1f340:	47a0      	blx	r4
   1f342:	0003      	movs	r3, r0
   1f344:	001a      	movs	r2, r3
   1f346:	2301      	movs	r3, #1
   1f348:	4053      	eors	r3, r2
   1f34a:	b2db      	uxtb	r3, r3
   1f34c:	2b00      	cmp	r3, #0
   1f34e:	d001      	beq.n	1f354 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1f350:	2300      	movs	r3, #0
   1f352:	e048      	b.n	1f3e6 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1f354:	003b      	movs	r3, r7
   1f356:	2101      	movs	r1, #1
   1f358:	0018      	movs	r0, r3
   1f35a:	4b2a      	ldr	r3, [pc, #168]	; (1f404 <sd_acmd51+0xfc>)
   1f35c:	4798      	blx	r3
   1f35e:	0003      	movs	r3, r0
   1f360:	001a      	movs	r2, r3
   1f362:	2301      	movs	r3, #1
   1f364:	4053      	eors	r3, r2
   1f366:	b2db      	uxtb	r3, r3
   1f368:	2b00      	cmp	r3, #0
   1f36a:	d001      	beq.n	1f370 <sd_acmd51+0x68>
		return false;
   1f36c:	2300      	movs	r3, #0
   1f36e:	e03a      	b.n	1f3e6 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1f370:	4b25      	ldr	r3, [pc, #148]	; (1f408 <sd_acmd51+0x100>)
   1f372:	4798      	blx	r3
   1f374:	0003      	movs	r3, r0
   1f376:	001a      	movs	r2, r3
   1f378:	2301      	movs	r3, #1
   1f37a:	4053      	eors	r3, r2
   1f37c:	b2db      	uxtb	r3, r3
   1f37e:	2b00      	cmp	r3, #0
   1f380:	d001      	beq.n	1f386 <sd_acmd51+0x7e>
		return false;
   1f382:	2300      	movs	r3, #0
   1f384:	e02f      	b.n	1f3e6 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1f386:	0038      	movs	r0, r7
   1f388:	2304      	movs	r3, #4
   1f38a:	2238      	movs	r2, #56	; 0x38
   1f38c:	2140      	movs	r1, #64	; 0x40
   1f38e:	4c1f      	ldr	r4, [pc, #124]	; (1f40c <sd_acmd51+0x104>)
   1f390:	47a0      	blx	r4
   1f392:	0003      	movs	r3, r0
   1f394:	2b01      	cmp	r3, #1
   1f396:	d008      	beq.n	1f3aa <sd_acmd51+0xa2>
   1f398:	d302      	bcc.n	1f3a0 <sd_acmd51+0x98>
   1f39a:	2b02      	cmp	r3, #2
   1f39c:	d00a      	beq.n	1f3b4 <sd_acmd51+0xac>
   1f39e:	e01c      	b.n	1f3da <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f3a0:	4b13      	ldr	r3, [pc, #76]	; (1f3f0 <sd_acmd51+0xe8>)
   1f3a2:	681b      	ldr	r3, [r3, #0]
   1f3a4:	2210      	movs	r2, #16
   1f3a6:	731a      	strb	r2, [r3, #12]
		break;
   1f3a8:	e01c      	b.n	1f3e4 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1f3aa:	4b11      	ldr	r3, [pc, #68]	; (1f3f0 <sd_acmd51+0xe8>)
   1f3ac:	681b      	ldr	r3, [r3, #0]
   1f3ae:	221a      	movs	r2, #26
   1f3b0:	731a      	strb	r2, [r3, #12]
		break;
   1f3b2:	e017      	b.n	1f3e4 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1f3b4:	0038      	movs	r0, r7
   1f3b6:	2301      	movs	r3, #1
   1f3b8:	222f      	movs	r2, #47	; 0x2f
   1f3ba:	2140      	movs	r1, #64	; 0x40
   1f3bc:	4c13      	ldr	r4, [pc, #76]	; (1f40c <sd_acmd51+0x104>)
   1f3be:	47a0      	blx	r4
   1f3c0:	0003      	movs	r3, r0
   1f3c2:	2b01      	cmp	r3, #1
   1f3c4:	d104      	bne.n	1f3d0 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1f3c6:	4b0a      	ldr	r3, [pc, #40]	; (1f3f0 <sd_acmd51+0xe8>)
   1f3c8:	681b      	ldr	r3, [r3, #0]
   1f3ca:	2230      	movs	r2, #48	; 0x30
   1f3cc:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1f3ce:	e009      	b.n	1f3e4 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1f3d0:	4b07      	ldr	r3, [pc, #28]	; (1f3f0 <sd_acmd51+0xe8>)
   1f3d2:	681b      	ldr	r3, [r3, #0]
   1f3d4:	2220      	movs	r2, #32
   1f3d6:	731a      	strb	r2, [r3, #12]
		break;
   1f3d8:	e004      	b.n	1f3e4 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f3da:	4b05      	ldr	r3, [pc, #20]	; (1f3f0 <sd_acmd51+0xe8>)
   1f3dc:	681b      	ldr	r3, [r3, #0]
   1f3de:	2210      	movs	r2, #16
   1f3e0:	731a      	strb	r2, [r3, #12]
		break;
   1f3e2:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f3e4:	2301      	movs	r3, #1
}
   1f3e6:	0018      	movs	r0, r3
   1f3e8:	46bd      	mov	sp, r7
   1f3ea:	b003      	add	sp, #12
   1f3ec:	bd90      	pop	{r4, r7, pc}
   1f3ee:	46c0      	nop			; (mov r8, r8)
   1f3f0:	20003e7c 	.word	0x20003e7c
   1f3f4:	00001137 	.word	0x00001137
   1f3f8:	00020765 	.word	0x00020765
   1f3fc:	00081133 	.word	0x00081133
   1f400:	0002078d 	.word	0x0002078d
   1f404:	00020a5d 	.word	0x00020a5d
   1f408:	00020b01 	.word	0x00020b01
   1f40c:	0001eb8d 	.word	0x0001eb8d

0001f410 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1f410:	b580      	push	{r7, lr}
   1f412:	b082      	sub	sp, #8
   1f414:	af00      	add	r7, sp, #0
   1f416:	0002      	movs	r2, r0
   1f418:	1dfb      	adds	r3, r7, #7
   1f41a:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1f41c:	1dfb      	adds	r3, r7, #7
   1f41e:	781b      	ldrb	r3, [r3, #0]
   1f420:	2b00      	cmp	r3, #0
   1f422:	d001      	beq.n	1f428 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1f424:	2304      	movs	r3, #4
   1f426:	e047      	b.n	1f4b8 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1f428:	1dfb      	adds	r3, r7, #7
   1f42a:	781b      	ldrb	r3, [r3, #0]
   1f42c:	4a24      	ldr	r2, [pc, #144]	; (1f4c0 <sd_mmc_select_slot+0xb0>)
   1f42e:	015b      	lsls	r3, r3, #5
   1f430:	18d3      	adds	r3, r2, r3
   1f432:	330a      	adds	r3, #10
   1f434:	781b      	ldrb	r3, [r3, #0]
   1f436:	2b04      	cmp	r3, #4
   1f438:	d008      	beq.n	1f44c <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1f43a:	1dfb      	adds	r3, r7, #7
   1f43c:	781b      	ldrb	r3, [r3, #0]
   1f43e:	4a20      	ldr	r2, [pc, #128]	; (1f4c0 <sd_mmc_select_slot+0xb0>)
   1f440:	015b      	lsls	r3, r3, #5
   1f442:	18d3      	adds	r3, r2, r3
   1f444:	330a      	adds	r3, #10
   1f446:	781b      	ldrb	r3, [r3, #0]
   1f448:	2b03      	cmp	r3, #3
   1f44a:	d11d      	bne.n	1f488 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1f44c:	1dfb      	adds	r3, r7, #7
   1f44e:	781b      	ldrb	r3, [r3, #0]
   1f450:	4a1b      	ldr	r2, [pc, #108]	; (1f4c0 <sd_mmc_select_slot+0xb0>)
   1f452:	015b      	lsls	r3, r3, #5
   1f454:	18d3      	adds	r3, r2, r3
   1f456:	330a      	adds	r3, #10
   1f458:	2202      	movs	r2, #2
   1f45a:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1f45c:	1dfb      	adds	r3, r7, #7
   1f45e:	781a      	ldrb	r2, [r3, #0]
   1f460:	4b17      	ldr	r3, [pc, #92]	; (1f4c0 <sd_mmc_select_slot+0xb0>)
   1f462:	0152      	lsls	r2, r2, #5
   1f464:	4917      	ldr	r1, [pc, #92]	; (1f4c4 <sd_mmc_select_slot+0xb4>)
   1f466:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1f468:	1dfb      	adds	r3, r7, #7
   1f46a:	781b      	ldrb	r3, [r3, #0]
   1f46c:	4a14      	ldr	r2, [pc, #80]	; (1f4c0 <sd_mmc_select_slot+0xb0>)
   1f46e:	015b      	lsls	r3, r3, #5
   1f470:	18d3      	adds	r3, r2, r3
   1f472:	330d      	adds	r3, #13
   1f474:	2201      	movs	r2, #1
   1f476:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1f478:	1dfb      	adds	r3, r7, #7
   1f47a:	781b      	ldrb	r3, [r3, #0]
   1f47c:	4a10      	ldr	r2, [pc, #64]	; (1f4c0 <sd_mmc_select_slot+0xb0>)
   1f47e:	015b      	lsls	r3, r3, #5
   1f480:	18d3      	adds	r3, r2, r3
   1f482:	331e      	adds	r3, #30
   1f484:	2200      	movs	r2, #0
   1f486:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1f488:	4b0f      	ldr	r3, [pc, #60]	; (1f4c8 <sd_mmc_select_slot+0xb8>)
   1f48a:	1dfa      	adds	r2, r7, #7
   1f48c:	7812      	ldrb	r2, [r2, #0]
   1f48e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1f490:	1dfb      	adds	r3, r7, #7
   1f492:	781b      	ldrb	r3, [r3, #0]
   1f494:	015a      	lsls	r2, r3, #5
   1f496:	4b0a      	ldr	r3, [pc, #40]	; (1f4c0 <sd_mmc_select_slot+0xb0>)
   1f498:	18d2      	adds	r2, r2, r3
   1f49a:	4b0c      	ldr	r3, [pc, #48]	; (1f4cc <sd_mmc_select_slot+0xbc>)
   1f49c:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1f49e:	4b0c      	ldr	r3, [pc, #48]	; (1f4d0 <sd_mmc_select_slot+0xc0>)
   1f4a0:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1f4a2:	1dfb      	adds	r3, r7, #7
   1f4a4:	781b      	ldrb	r3, [r3, #0]
   1f4a6:	4a06      	ldr	r2, [pc, #24]	; (1f4c0 <sd_mmc_select_slot+0xb0>)
   1f4a8:	015b      	lsls	r3, r3, #5
   1f4aa:	18d3      	adds	r3, r2, r3
   1f4ac:	330a      	adds	r3, #10
   1f4ae:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1f4b0:	3b02      	subs	r3, #2
   1f4b2:	425a      	negs	r2, r3
   1f4b4:	4153      	adcs	r3, r2
   1f4b6:	b2db      	uxtb	r3, r3
}
   1f4b8:	0018      	movs	r0, r3
   1f4ba:	46bd      	mov	sp, r7
   1f4bc:	b002      	add	sp, #8
   1f4be:	bd80      	pop	{r7, pc}
   1f4c0:	20003e58 	.word	0x20003e58
   1f4c4:	00061a80 	.word	0x00061a80
   1f4c8:	20003e78 	.word	0x20003e78
   1f4cc:	20003e7c 	.word	0x20003e7c
   1f4d0:	0001f4d5 	.word	0x0001f4d5

0001f4d4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1f4d4:	b5b0      	push	{r4, r5, r7, lr}
   1f4d6:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f4d8:	4b09      	ldr	r3, [pc, #36]	; (1f500 <sd_mmc_configure_slot+0x2c>)
   1f4da:	7818      	ldrb	r0, [r3, #0]
   1f4dc:	4b09      	ldr	r3, [pc, #36]	; (1f504 <sd_mmc_configure_slot+0x30>)
   1f4de:	681b      	ldr	r3, [r3, #0]
   1f4e0:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f4e2:	4b08      	ldr	r3, [pc, #32]	; (1f504 <sd_mmc_configure_slot+0x30>)
   1f4e4:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f4e6:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f4e8:	4b06      	ldr	r3, [pc, #24]	; (1f504 <sd_mmc_configure_slot+0x30>)
   1f4ea:	681b      	ldr	r3, [r3, #0]
   1f4ec:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f4ee:	1e5c      	subs	r4, r3, #1
   1f4f0:	41a3      	sbcs	r3, r4
   1f4f2:	b2db      	uxtb	r3, r3
   1f4f4:	4c04      	ldr	r4, [pc, #16]	; (1f508 <sd_mmc_configure_slot+0x34>)
   1f4f6:	47a0      	blx	r4
}
   1f4f8:	46c0      	nop			; (mov r8, r8)
   1f4fa:	46bd      	mov	sp, r7
   1f4fc:	bdb0      	pop	{r4, r5, r7, pc}
   1f4fe:	46c0      	nop			; (mov r8, r8)
   1f500:	20003e78 	.word	0x20003e78
   1f504:	20003e7c 	.word	0x20003e7c
   1f508:	0002064d 	.word	0x0002064d

0001f50c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1f50c:	b580      	push	{r7, lr}
   1f50e:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1f510:	4b05      	ldr	r3, [pc, #20]	; (1f528 <sd_mmc_deselect_slot+0x1c>)
   1f512:	781b      	ldrb	r3, [r3, #0]
   1f514:	2b00      	cmp	r3, #0
   1f516:	d104      	bne.n	1f522 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1f518:	4b03      	ldr	r3, [pc, #12]	; (1f528 <sd_mmc_deselect_slot+0x1c>)
   1f51a:	781b      	ldrb	r3, [r3, #0]
   1f51c:	0018      	movs	r0, r3
   1f51e:	4b03      	ldr	r3, [pc, #12]	; (1f52c <sd_mmc_deselect_slot+0x20>)
   1f520:	4798      	blx	r3
	}
}
   1f522:	46c0      	nop			; (mov r8, r8)
   1f524:	46bd      	mov	sp, r7
   1f526:	bd80      	pop	{r7, pc}
   1f528:	20003e78 	.word	0x20003e78
   1f52c:	000206d5 	.word	0x000206d5

0001f530 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1f530:	b580      	push	{r7, lr}
   1f532:	b082      	sub	sp, #8
   1f534:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1f536:	1dfb      	adds	r3, r7, #7
   1f538:	2200      	movs	r2, #0
   1f53a:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1f53c:	4b59      	ldr	r3, [pc, #356]	; (1f6a4 <sd_mmc_spi_card_init+0x174>)
   1f53e:	681b      	ldr	r3, [r3, #0]
   1f540:	2201      	movs	r2, #1
   1f542:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1f544:	4b57      	ldr	r3, [pc, #348]	; (1f6a4 <sd_mmc_spi_card_init+0x174>)
   1f546:	681b      	ldr	r3, [r3, #0]
   1f548:	2200      	movs	r2, #0
   1f54a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1f54c:	4b55      	ldr	r3, [pc, #340]	; (1f6a4 <sd_mmc_spi_card_init+0x174>)
   1f54e:	681b      	ldr	r3, [r3, #0]
   1f550:	2200      	movs	r2, #0
   1f552:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1f554:	4b54      	ldr	r3, [pc, #336]	; (1f6a8 <sd_mmc_spi_card_init+0x178>)
   1f556:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f558:	2388      	movs	r3, #136	; 0x88
   1f55a:	015b      	lsls	r3, r3, #5
   1f55c:	2100      	movs	r1, #0
   1f55e:	0018      	movs	r0, r3
   1f560:	4b52      	ldr	r3, [pc, #328]	; (1f6ac <sd_mmc_spi_card_init+0x17c>)
   1f562:	4798      	blx	r3
   1f564:	0003      	movs	r3, r0
   1f566:	001a      	movs	r2, r3
   1f568:	2301      	movs	r3, #1
   1f56a:	4053      	eors	r3, r2
   1f56c:	b2db      	uxtb	r3, r3
   1f56e:	2b00      	cmp	r3, #0
   1f570:	d001      	beq.n	1f576 <sd_mmc_spi_card_init+0x46>
		return false;
   1f572:	2300      	movs	r3, #0
   1f574:	e092      	b.n	1f69c <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1f576:	1dfb      	adds	r3, r7, #7
   1f578:	0018      	movs	r0, r3
   1f57a:	4b4d      	ldr	r3, [pc, #308]	; (1f6b0 <sd_mmc_spi_card_init+0x180>)
   1f57c:	4798      	blx	r3
   1f57e:	0003      	movs	r3, r0
   1f580:	001a      	movs	r2, r3
   1f582:	2301      	movs	r3, #1
   1f584:	4053      	eors	r3, r2
   1f586:	b2db      	uxtb	r3, r3
   1f588:	2b00      	cmp	r3, #0
   1f58a:	d001      	beq.n	1f590 <sd_mmc_spi_card_init+0x60>
		return false;
   1f58c:	2300      	movs	r3, #0
   1f58e:	e085      	b.n	1f69c <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1f590:	4b48      	ldr	r3, [pc, #288]	; (1f6b4 <sd_mmc_spi_card_init+0x184>)
   1f592:	4798      	blx	r3
   1f594:	0003      	movs	r3, r0
   1f596:	001a      	movs	r2, r3
   1f598:	2301      	movs	r3, #1
   1f59a:	4053      	eors	r3, r2
   1f59c:	b2db      	uxtb	r3, r3
   1f59e:	2b00      	cmp	r3, #0
   1f5a0:	d001      	beq.n	1f5a6 <sd_mmc_spi_card_init+0x76>
		return false;
   1f5a2:	2300      	movs	r3, #0
   1f5a4:	e07a      	b.n	1f69c <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f5a6:	4b3f      	ldr	r3, [pc, #252]	; (1f6a4 <sd_mmc_spi_card_init+0x174>)
   1f5a8:	681b      	ldr	r3, [r3, #0]
   1f5aa:	7adb      	ldrb	r3, [r3, #11]
   1f5ac:	001a      	movs	r2, r3
   1f5ae:	2301      	movs	r3, #1
   1f5b0:	4013      	ands	r3, r2
   1f5b2:	d021      	beq.n	1f5f8 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1f5b4:	1dfb      	adds	r3, r7, #7
   1f5b6:	781b      	ldrb	r3, [r3, #0]
   1f5b8:	0018      	movs	r0, r3
   1f5ba:	4b3f      	ldr	r3, [pc, #252]	; (1f6b8 <sd_mmc_spi_card_init+0x188>)
   1f5bc:	4798      	blx	r3
   1f5be:	0003      	movs	r3, r0
   1f5c0:	001a      	movs	r2, r3
   1f5c2:	2301      	movs	r3, #1
   1f5c4:	4053      	eors	r3, r2
   1f5c6:	b2db      	uxtb	r3, r3
   1f5c8:	2b00      	cmp	r3, #0
   1f5ca:	d007      	beq.n	1f5dc <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1f5cc:	4b35      	ldr	r3, [pc, #212]	; (1f6a4 <sd_mmc_spi_card_init+0x174>)
   1f5ce:	681b      	ldr	r3, [r3, #0]
   1f5d0:	2202      	movs	r2, #2
   1f5d2:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1f5d4:	4b39      	ldr	r3, [pc, #228]	; (1f6bc <sd_mmc_spi_card_init+0x18c>)
   1f5d6:	4798      	blx	r3
   1f5d8:	0003      	movs	r3, r0
   1f5da:	e05f      	b.n	1f69c <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f5dc:	4b38      	ldr	r3, [pc, #224]	; (1f6c0 <sd_mmc_spi_card_init+0x190>)
   1f5de:	2100      	movs	r1, #0
   1f5e0:	0018      	movs	r0, r3
   1f5e2:	4b32      	ldr	r3, [pc, #200]	; (1f6ac <sd_mmc_spi_card_init+0x17c>)
   1f5e4:	4798      	blx	r3
   1f5e6:	0003      	movs	r3, r0
   1f5e8:	001a      	movs	r2, r3
   1f5ea:	2301      	movs	r3, #1
   1f5ec:	4053      	eors	r3, r2
   1f5ee:	b2db      	uxtb	r3, r3
   1f5f0:	2b00      	cmp	r3, #0
   1f5f2:	d001      	beq.n	1f5f8 <sd_mmc_spi_card_init+0xc8>
			return false;
   1f5f4:	2300      	movs	r3, #0
   1f5f6:	e051      	b.n	1f69c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f5f8:	4b2a      	ldr	r3, [pc, #168]	; (1f6a4 <sd_mmc_spi_card_init+0x174>)
   1f5fa:	681b      	ldr	r3, [r3, #0]
   1f5fc:	7adb      	ldrb	r3, [r3, #11]
   1f5fe:	001a      	movs	r2, r3
   1f600:	2301      	movs	r3, #1
   1f602:	4013      	ands	r3, r2
   1f604:	d017      	beq.n	1f636 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1f606:	4b2f      	ldr	r3, [pc, #188]	; (1f6c4 <sd_mmc_spi_card_init+0x194>)
   1f608:	4798      	blx	r3
   1f60a:	0003      	movs	r3, r0
   1f60c:	001a      	movs	r2, r3
   1f60e:	2301      	movs	r3, #1
   1f610:	4053      	eors	r3, r2
   1f612:	b2db      	uxtb	r3, r3
   1f614:	2b00      	cmp	r3, #0
   1f616:	d001      	beq.n	1f61c <sd_mmc_spi_card_init+0xec>
			return false;
   1f618:	2300      	movs	r3, #0
   1f61a:	e03f      	b.n	1f69c <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1f61c:	4b2a      	ldr	r3, [pc, #168]	; (1f6c8 <sd_mmc_spi_card_init+0x198>)
   1f61e:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1f620:	4b2a      	ldr	r3, [pc, #168]	; (1f6cc <sd_mmc_spi_card_init+0x19c>)
   1f622:	4798      	blx	r3
   1f624:	0003      	movs	r3, r0
   1f626:	001a      	movs	r2, r3
   1f628:	2301      	movs	r3, #1
   1f62a:	4053      	eors	r3, r2
   1f62c:	b2db      	uxtb	r3, r3
   1f62e:	2b00      	cmp	r3, #0
   1f630:	d001      	beq.n	1f636 <sd_mmc_spi_card_init+0x106>
			return false;
   1f632:	2300      	movs	r3, #0
   1f634:	e032      	b.n	1f69c <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f636:	4b1b      	ldr	r3, [pc, #108]	; (1f6a4 <sd_mmc_spi_card_init+0x174>)
   1f638:	681b      	ldr	r3, [r3, #0]
   1f63a:	7adb      	ldrb	r3, [r3, #11]
   1f63c:	001a      	movs	r2, r3
   1f63e:	2301      	movs	r3, #1
   1f640:	4013      	ands	r3, r2
   1f642:	d016      	beq.n	1f672 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1f644:	4b17      	ldr	r3, [pc, #92]	; (1f6a4 <sd_mmc_spi_card_init+0x174>)
   1f646:	681b      	ldr	r3, [r3, #0]
   1f648:	7adb      	ldrb	r3, [r3, #11]
   1f64a:	001a      	movs	r2, r3
   1f64c:	2308      	movs	r3, #8
   1f64e:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f650:	d10f      	bne.n	1f672 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f652:	2380      	movs	r3, #128	; 0x80
   1f654:	009b      	lsls	r3, r3, #2
   1f656:	4a1e      	ldr	r2, [pc, #120]	; (1f6d0 <sd_mmc_spi_card_init+0x1a0>)
   1f658:	0019      	movs	r1, r3
   1f65a:	0010      	movs	r0, r2
   1f65c:	4b13      	ldr	r3, [pc, #76]	; (1f6ac <sd_mmc_spi_card_init+0x17c>)
   1f65e:	4798      	blx	r3
   1f660:	0003      	movs	r3, r0
   1f662:	001a      	movs	r2, r3
   1f664:	2301      	movs	r3, #1
   1f666:	4053      	eors	r3, r2
   1f668:	b2db      	uxtb	r3, r3
   1f66a:	2b00      	cmp	r3, #0
   1f66c:	d001      	beq.n	1f672 <sd_mmc_spi_card_init+0x142>
			return false;
   1f66e:	2300      	movs	r3, #0
   1f670:	e014      	b.n	1f69c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f672:	4b0c      	ldr	r3, [pc, #48]	; (1f6a4 <sd_mmc_spi_card_init+0x174>)
   1f674:	681b      	ldr	r3, [r3, #0]
   1f676:	7adb      	ldrb	r3, [r3, #11]
   1f678:	001a      	movs	r2, r3
   1f67a:	2301      	movs	r3, #1
   1f67c:	4013      	ands	r3, r2
   1f67e:	d00a      	beq.n	1f696 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1f680:	4b14      	ldr	r3, [pc, #80]	; (1f6d4 <sd_mmc_spi_card_init+0x1a4>)
   1f682:	4798      	blx	r3
   1f684:	0003      	movs	r3, r0
   1f686:	001a      	movs	r2, r3
   1f688:	2301      	movs	r3, #1
   1f68a:	4053      	eors	r3, r2
   1f68c:	b2db      	uxtb	r3, r3
   1f68e:	2b00      	cmp	r3, #0
   1f690:	d001      	beq.n	1f696 <sd_mmc_spi_card_init+0x166>
			return false;
   1f692:	2300      	movs	r3, #0
   1f694:	e002      	b.n	1f69c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f696:	4b10      	ldr	r3, [pc, #64]	; (1f6d8 <sd_mmc_spi_card_init+0x1a8>)
   1f698:	4798      	blx	r3
	return true;
   1f69a:	2301      	movs	r3, #1
}
   1f69c:	0018      	movs	r0, r3
   1f69e:	46bd      	mov	sp, r7
   1f6a0:	b002      	add	sp, #8
   1f6a2:	bd80      	pop	{r7, pc}
   1f6a4:	20003e7c 	.word	0x20003e7c
   1f6a8:	00020719 	.word	0x00020719
   1f6ac:	00020765 	.word	0x00020765
   1f6b0:	0001ee85 	.word	0x0001ee85
   1f6b4:	0001ee79 	.word	0x0001ee79
   1f6b8:	0001ed95 	.word	0x0001ed95
   1f6bc:	0001f6dd 	.word	0x0001f6dd
   1f6c0:	0000113b 	.word	0x0000113b
   1f6c4:	0001f021 	.word	0x0001f021
   1f6c8:	0001f1c1 	.word	0x0001f1c1
   1f6cc:	0001f309 	.word	0x0001f309
   1f6d0:	00001110 	.word	0x00001110
   1f6d4:	0001f2ad 	.word	0x0001f2ad
   1f6d8:	0001f4d5 	.word	0x0001f4d5

0001f6dc <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1f6dc:	b580      	push	{r7, lr}
   1f6de:	b082      	sub	sp, #8
   1f6e0:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f6e2:	2388      	movs	r3, #136	; 0x88
   1f6e4:	015b      	lsls	r3, r3, #5
   1f6e6:	2100      	movs	r1, #0
   1f6e8:	0018      	movs	r0, r3
   1f6ea:	4b32      	ldr	r3, [pc, #200]	; (1f7b4 <sd_mmc_spi_install_mmc+0xd8>)
   1f6ec:	4798      	blx	r3
   1f6ee:	0003      	movs	r3, r0
   1f6f0:	001a      	movs	r2, r3
   1f6f2:	2301      	movs	r3, #1
   1f6f4:	4053      	eors	r3, r2
   1f6f6:	b2db      	uxtb	r3, r3
   1f6f8:	2b00      	cmp	r3, #0
   1f6fa:	d001      	beq.n	1f700 <sd_mmc_spi_install_mmc+0x24>
		return false;
   1f6fc:	2300      	movs	r3, #0
   1f6fe:	e055      	b.n	1f7ac <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1f700:	4b2d      	ldr	r3, [pc, #180]	; (1f7b8 <sd_mmc_spi_install_mmc+0xdc>)
   1f702:	4798      	blx	r3
   1f704:	0003      	movs	r3, r0
   1f706:	001a      	movs	r2, r3
   1f708:	2301      	movs	r3, #1
   1f70a:	4053      	eors	r3, r2
   1f70c:	b2db      	uxtb	r3, r3
   1f70e:	2b00      	cmp	r3, #0
   1f710:	d001      	beq.n	1f716 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1f712:	2300      	movs	r3, #0
   1f714:	e04a      	b.n	1f7ac <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f716:	4b29      	ldr	r3, [pc, #164]	; (1f7bc <sd_mmc_spi_install_mmc+0xe0>)
   1f718:	2100      	movs	r1, #0
   1f71a:	0018      	movs	r0, r3
   1f71c:	4b25      	ldr	r3, [pc, #148]	; (1f7b4 <sd_mmc_spi_install_mmc+0xd8>)
   1f71e:	4798      	blx	r3
   1f720:	0003      	movs	r3, r0
   1f722:	001a      	movs	r2, r3
   1f724:	2301      	movs	r3, #1
   1f726:	4053      	eors	r3, r2
   1f728:	b2db      	uxtb	r3, r3
   1f72a:	2b00      	cmp	r3, #0
   1f72c:	d001      	beq.n	1f732 <sd_mmc_spi_install_mmc+0x56>
		return false;
   1f72e:	2300      	movs	r3, #0
   1f730:	e03c      	b.n	1f7ac <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1f732:	4b23      	ldr	r3, [pc, #140]	; (1f7c0 <sd_mmc_spi_install_mmc+0xe4>)
   1f734:	4798      	blx	r3
   1f736:	0003      	movs	r3, r0
   1f738:	001a      	movs	r2, r3
   1f73a:	2301      	movs	r3, #1
   1f73c:	4053      	eors	r3, r2
   1f73e:	b2db      	uxtb	r3, r3
   1f740:	2b00      	cmp	r3, #0
   1f742:	d001      	beq.n	1f748 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1f744:	2300      	movs	r3, #0
   1f746:	e031      	b.n	1f7ac <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1f748:	4b1e      	ldr	r3, [pc, #120]	; (1f7c4 <sd_mmc_spi_install_mmc+0xe8>)
   1f74a:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1f74c:	4b1e      	ldr	r3, [pc, #120]	; (1f7c8 <sd_mmc_spi_install_mmc+0xec>)
   1f74e:	681b      	ldr	r3, [r3, #0]
   1f750:	7b1b      	ldrb	r3, [r3, #12]
   1f752:	2b3f      	cmp	r3, #63	; 0x3f
   1f754:	d90c      	bls.n	1f770 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1f756:	1dfb      	adds	r3, r7, #7
   1f758:	0018      	movs	r0, r3
   1f75a:	4b1c      	ldr	r3, [pc, #112]	; (1f7cc <sd_mmc_spi_install_mmc+0xf0>)
   1f75c:	4798      	blx	r3
   1f75e:	0003      	movs	r3, r0
   1f760:	001a      	movs	r2, r3
   1f762:	2301      	movs	r3, #1
   1f764:	4053      	eors	r3, r2
   1f766:	b2db      	uxtb	r3, r3
   1f768:	2b00      	cmp	r3, #0
   1f76a:	d001      	beq.n	1f770 <sd_mmc_spi_install_mmc+0x94>
			return false;
   1f76c:	2300      	movs	r3, #0
   1f76e:	e01d      	b.n	1f7ac <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f770:	2380      	movs	r3, #128	; 0x80
   1f772:	009b      	lsls	r3, r3, #2
   1f774:	4a16      	ldr	r2, [pc, #88]	; (1f7d0 <sd_mmc_spi_install_mmc+0xf4>)
   1f776:	0019      	movs	r1, r3
   1f778:	0010      	movs	r0, r2
   1f77a:	4b0e      	ldr	r3, [pc, #56]	; (1f7b4 <sd_mmc_spi_install_mmc+0xd8>)
   1f77c:	4798      	blx	r3
   1f77e:	0003      	movs	r3, r0
   1f780:	001a      	movs	r2, r3
   1f782:	2301      	movs	r3, #1
   1f784:	4053      	eors	r3, r2
   1f786:	b2db      	uxtb	r3, r3
   1f788:	2b00      	cmp	r3, #0
   1f78a:	d001      	beq.n	1f790 <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1f78c:	2300      	movs	r3, #0
   1f78e:	e00d      	b.n	1f7ac <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1f790:	4b10      	ldr	r3, [pc, #64]	; (1f7d4 <sd_mmc_spi_install_mmc+0xf8>)
   1f792:	4798      	blx	r3
   1f794:	0003      	movs	r3, r0
   1f796:	001a      	movs	r2, r3
   1f798:	2301      	movs	r3, #1
   1f79a:	4053      	eors	r3, r2
   1f79c:	b2db      	uxtb	r3, r3
   1f79e:	2b00      	cmp	r3, #0
   1f7a0:	d001      	beq.n	1f7a6 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1f7a2:	2300      	movs	r3, #0
   1f7a4:	e002      	b.n	1f7ac <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f7a6:	4b0c      	ldr	r3, [pc, #48]	; (1f7d8 <sd_mmc_spi_install_mmc+0xfc>)
   1f7a8:	4798      	blx	r3
	return true;
   1f7aa:	2301      	movs	r3, #1
}
   1f7ac:	0018      	movs	r0, r3
   1f7ae:	46bd      	mov	sp, r7
   1f7b0:	b002      	add	sp, #8
   1f7b2:	bd80      	pop	{r7, pc}
   1f7b4:	00020765 	.word	0x00020765
   1f7b8:	0001ece9 	.word	0x0001ece9
   1f7bc:	0000113b 	.word	0x0000113b
   1f7c0:	0001f021 	.word	0x0001f021
   1f7c4:	0001f091 	.word	0x0001f091
   1f7c8:	20003e7c 	.word	0x20003e7c
   1f7cc:	0001eef5 	.word	0x0001eef5
   1f7d0:	00001110 	.word	0x00001110
   1f7d4:	0001f2ad 	.word	0x0001f2ad
   1f7d8:	0001f4d5 	.word	0x0001f4d5

0001f7dc <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1f7dc:	b580      	push	{r7, lr}
   1f7de:	b082      	sub	sp, #8
   1f7e0:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f7e2:	1dfb      	adds	r3, r7, #7
   1f7e4:	2200      	movs	r2, #0
   1f7e6:	701a      	strb	r2, [r3, #0]
   1f7e8:	e00c      	b.n	1f804 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1f7ea:	1dfb      	adds	r3, r7, #7
   1f7ec:	781b      	ldrb	r3, [r3, #0]
   1f7ee:	4a0c      	ldr	r2, [pc, #48]	; (1f820 <sd_mmc_init+0x44>)
   1f7f0:	015b      	lsls	r3, r3, #5
   1f7f2:	18d3      	adds	r3, r2, r3
   1f7f4:	330a      	adds	r3, #10
   1f7f6:	2204      	movs	r2, #4
   1f7f8:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f7fa:	1dfb      	adds	r3, r7, #7
   1f7fc:	781a      	ldrb	r2, [r3, #0]
   1f7fe:	1dfb      	adds	r3, r7, #7
   1f800:	3201      	adds	r2, #1
   1f802:	701a      	strb	r2, [r3, #0]
   1f804:	1dfb      	adds	r3, r7, #7
   1f806:	781b      	ldrb	r3, [r3, #0]
   1f808:	2b00      	cmp	r3, #0
   1f80a:	d0ee      	beq.n	1f7ea <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1f80c:	4b05      	ldr	r3, [pc, #20]	; (1f824 <sd_mmc_init+0x48>)
   1f80e:	22ff      	movs	r2, #255	; 0xff
   1f810:	701a      	strb	r2, [r3, #0]
	driver_init();
   1f812:	4b05      	ldr	r3, [pc, #20]	; (1f828 <sd_mmc_init+0x4c>)
   1f814:	4798      	blx	r3
}
   1f816:	46c0      	nop			; (mov r8, r8)
   1f818:	46bd      	mov	sp, r7
   1f81a:	b002      	add	sp, #8
   1f81c:	bd80      	pop	{r7, pc}
   1f81e:	46c0      	nop			; (mov r8, r8)
   1f820:	20003e58 	.word	0x20003e58
   1f824:	20003e78 	.word	0x20003e78
   1f828:	00020585 	.word	0x00020585

0001f82c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1f82c:	b590      	push	{r4, r7, lr}
   1f82e:	b085      	sub	sp, #20
   1f830:	af00      	add	r7, sp, #0
   1f832:	0002      	movs	r2, r0
   1f834:	1dfb      	adds	r3, r7, #7
   1f836:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f838:	230f      	movs	r3, #15
   1f83a:	18fc      	adds	r4, r7, r3
   1f83c:	1dfb      	adds	r3, r7, #7
   1f83e:	781b      	ldrb	r3, [r3, #0]
   1f840:	0018      	movs	r0, r3
   1f842:	4b13      	ldr	r3, [pc, #76]	; (1f890 <sd_mmc_check+0x64>)
   1f844:	4798      	blx	r3
   1f846:	0003      	movs	r3, r0
   1f848:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1f84a:	230f      	movs	r3, #15
   1f84c:	18fb      	adds	r3, r7, r3
   1f84e:	781b      	ldrb	r3, [r3, #0]
   1f850:	2b01      	cmp	r3, #1
   1f852:	d005      	beq.n	1f860 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1f854:	4b0f      	ldr	r3, [pc, #60]	; (1f894 <sd_mmc_check+0x68>)
   1f856:	4798      	blx	r3
		return sd_mmc_err;
   1f858:	230f      	movs	r3, #15
   1f85a:	18fb      	adds	r3, r7, r3
   1f85c:	781b      	ldrb	r3, [r3, #0]
   1f85e:	e012      	b.n	1f886 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1f860:	4b0d      	ldr	r3, [pc, #52]	; (1f898 <sd_mmc_check+0x6c>)
   1f862:	4798      	blx	r3
   1f864:	1e03      	subs	r3, r0, #0
   1f866:	d007      	beq.n	1f878 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1f868:	4b0c      	ldr	r3, [pc, #48]	; (1f89c <sd_mmc_check+0x70>)
   1f86a:	681b      	ldr	r3, [r3, #0]
   1f86c:	2200      	movs	r2, #0
   1f86e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1f870:	4b08      	ldr	r3, [pc, #32]	; (1f894 <sd_mmc_check+0x68>)
   1f872:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1f874:	2301      	movs	r3, #1
   1f876:	e006      	b.n	1f886 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1f878:	4b08      	ldr	r3, [pc, #32]	; (1f89c <sd_mmc_check+0x70>)
   1f87a:	681b      	ldr	r3, [r3, #0]
   1f87c:	2203      	movs	r2, #3
   1f87e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1f880:	4b04      	ldr	r3, [pc, #16]	; (1f894 <sd_mmc_check+0x68>)
   1f882:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1f884:	2303      	movs	r3, #3
}
   1f886:	0018      	movs	r0, r3
   1f888:	46bd      	mov	sp, r7
   1f88a:	b005      	add	sp, #20
   1f88c:	bd90      	pop	{r4, r7, pc}
   1f88e:	46c0      	nop			; (mov r8, r8)
   1f890:	0001f411 	.word	0x0001f411
   1f894:	0001f50d 	.word	0x0001f50d
   1f898:	0001f531 	.word	0x0001f531
   1f89c:	20003e7c 	.word	0x20003e7c

0001f8a0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1f8a0:	b580      	push	{r7, lr}
   1f8a2:	b082      	sub	sp, #8
   1f8a4:	af00      	add	r7, sp, #0
   1f8a6:	0002      	movs	r2, r0
   1f8a8:	1dfb      	adds	r3, r7, #7
   1f8aa:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f8ac:	1dfb      	adds	r3, r7, #7
   1f8ae:	781b      	ldrb	r3, [r3, #0]
   1f8b0:	0018      	movs	r0, r3
   1f8b2:	4b07      	ldr	r3, [pc, #28]	; (1f8d0 <sd_mmc_get_type+0x30>)
   1f8b4:	4798      	blx	r3
   1f8b6:	1e03      	subs	r3, r0, #0
   1f8b8:	d001      	beq.n	1f8be <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1f8ba:	2300      	movs	r3, #0
   1f8bc:	e004      	b.n	1f8c8 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1f8be:	4b05      	ldr	r3, [pc, #20]	; (1f8d4 <sd_mmc_get_type+0x34>)
   1f8c0:	4798      	blx	r3
	return sd_mmc_card->type;
   1f8c2:	4b05      	ldr	r3, [pc, #20]	; (1f8d8 <sd_mmc_get_type+0x38>)
   1f8c4:	681b      	ldr	r3, [r3, #0]
   1f8c6:	7adb      	ldrb	r3, [r3, #11]
}
   1f8c8:	0018      	movs	r0, r3
   1f8ca:	46bd      	mov	sp, r7
   1f8cc:	b002      	add	sp, #8
   1f8ce:	bd80      	pop	{r7, pc}
   1f8d0:	0001f411 	.word	0x0001f411
   1f8d4:	0001f50d 	.word	0x0001f50d
   1f8d8:	20003e7c 	.word	0x20003e7c

0001f8dc <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1f8dc:	b580      	push	{r7, lr}
   1f8de:	b082      	sub	sp, #8
   1f8e0:	af00      	add	r7, sp, #0
   1f8e2:	0002      	movs	r2, r0
   1f8e4:	1dfb      	adds	r3, r7, #7
   1f8e6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f8e8:	1dfb      	adds	r3, r7, #7
   1f8ea:	781b      	ldrb	r3, [r3, #0]
   1f8ec:	0018      	movs	r0, r3
   1f8ee:	4b07      	ldr	r3, [pc, #28]	; (1f90c <sd_mmc_get_capacity+0x30>)
   1f8f0:	4798      	blx	r3
   1f8f2:	1e03      	subs	r3, r0, #0
   1f8f4:	d001      	beq.n	1f8fa <sd_mmc_get_capacity+0x1e>
		return 0;
   1f8f6:	2300      	movs	r3, #0
   1f8f8:	e004      	b.n	1f904 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1f8fa:	4b05      	ldr	r3, [pc, #20]	; (1f910 <sd_mmc_get_capacity+0x34>)
   1f8fc:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1f8fe:	4b05      	ldr	r3, [pc, #20]	; (1f914 <sd_mmc_get_capacity+0x38>)
   1f900:	681b      	ldr	r3, [r3, #0]
   1f902:	685b      	ldr	r3, [r3, #4]
}
   1f904:	0018      	movs	r0, r3
   1f906:	46bd      	mov	sp, r7
   1f908:	b002      	add	sp, #8
   1f90a:	bd80      	pop	{r7, pc}
   1f90c:	0001f411 	.word	0x0001f411
   1f910:	0001f50d 	.word	0x0001f50d
   1f914:	20003e7c 	.word	0x20003e7c

0001f918 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1f918:	b580      	push	{r7, lr}
   1f91a:	b082      	sub	sp, #8
   1f91c:	af00      	add	r7, sp, #0
   1f91e:	0002      	movs	r2, r0
   1f920:	1dfb      	adds	r3, r7, #7
   1f922:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1f924:	2300      	movs	r3, #0
}
   1f926:	0018      	movs	r0, r3
   1f928:	46bd      	mov	sp, r7
   1f92a:	b002      	add	sp, #8
   1f92c:	bd80      	pop	{r7, pc}
	...

0001f930 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f930:	b590      	push	{r4, r7, lr}
   1f932:	b089      	sub	sp, #36	; 0x24
   1f934:	af02      	add	r7, sp, #8
   1f936:	6039      	str	r1, [r7, #0]
   1f938:	0011      	movs	r1, r2
   1f93a:	1dfb      	adds	r3, r7, #7
   1f93c:	1c02      	adds	r2, r0, #0
   1f93e:	701a      	strb	r2, [r3, #0]
   1f940:	1d3b      	adds	r3, r7, #4
   1f942:	1c0a      	adds	r2, r1, #0
   1f944:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f946:	230f      	movs	r3, #15
   1f948:	18fc      	adds	r4, r7, r3
   1f94a:	1dfb      	adds	r3, r7, #7
   1f94c:	781b      	ldrb	r3, [r3, #0]
   1f94e:	0018      	movs	r0, r3
   1f950:	4b29      	ldr	r3, [pc, #164]	; (1f9f8 <sd_mmc_init_read_blocks+0xc8>)
   1f952:	4798      	blx	r3
   1f954:	0003      	movs	r3, r0
   1f956:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f958:	230f      	movs	r3, #15
   1f95a:	18fb      	adds	r3, r7, r3
   1f95c:	781b      	ldrb	r3, [r3, #0]
   1f95e:	2b00      	cmp	r3, #0
   1f960:	d003      	beq.n	1f96a <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1f962:	230f      	movs	r3, #15
   1f964:	18fb      	adds	r3, r7, r3
   1f966:	781b      	ldrb	r3, [r3, #0]
   1f968:	e041      	b.n	1f9ee <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1f96a:	4b24      	ldr	r3, [pc, #144]	; (1f9fc <sd_mmc_init_read_blocks+0xcc>)
   1f96c:	4798      	blx	r3
   1f96e:	0003      	movs	r3, r0
   1f970:	001a      	movs	r2, r3
   1f972:	2301      	movs	r3, #1
   1f974:	4053      	eors	r3, r2
   1f976:	b2db      	uxtb	r3, r3
   1f978:	2b00      	cmp	r3, #0
   1f97a:	d003      	beq.n	1f984 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1f97c:	4b20      	ldr	r3, [pc, #128]	; (1fa00 <sd_mmc_init_read_blocks+0xd0>)
   1f97e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f980:	2305      	movs	r3, #5
   1f982:	e034      	b.n	1f9ee <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1f984:	1d3b      	adds	r3, r7, #4
   1f986:	881b      	ldrh	r3, [r3, #0]
   1f988:	2b01      	cmp	r3, #1
   1f98a:	d902      	bls.n	1f992 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1f98c:	4b1d      	ldr	r3, [pc, #116]	; (1fa04 <sd_mmc_init_read_blocks+0xd4>)
   1f98e:	617b      	str	r3, [r7, #20]
   1f990:	e001      	b.n	1f996 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1f992:	4b1d      	ldr	r3, [pc, #116]	; (1fa08 <sd_mmc_init_read_blocks+0xd8>)
   1f994:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f996:	4b1d      	ldr	r3, [pc, #116]	; (1fa0c <sd_mmc_init_read_blocks+0xdc>)
   1f998:	681b      	ldr	r3, [r3, #0]
   1f99a:	7adb      	ldrb	r3, [r3, #11]
   1f99c:	001a      	movs	r2, r3
   1f99e:	2308      	movs	r3, #8
   1f9a0:	4013      	ands	r3, r2
   1f9a2:	d002      	beq.n	1f9aa <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1f9a4:	683b      	ldr	r3, [r7, #0]
   1f9a6:	613b      	str	r3, [r7, #16]
   1f9a8:	e002      	b.n	1f9b0 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f9aa:	683b      	ldr	r3, [r7, #0]
   1f9ac:	025b      	lsls	r3, r3, #9
   1f9ae:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f9b0:	1d3b      	adds	r3, r7, #4
   1f9b2:	881c      	ldrh	r4, [r3, #0]
   1f9b4:	2380      	movs	r3, #128	; 0x80
   1f9b6:	009a      	lsls	r2, r3, #2
   1f9b8:	6939      	ldr	r1, [r7, #16]
   1f9ba:	6978      	ldr	r0, [r7, #20]
   1f9bc:	2301      	movs	r3, #1
   1f9be:	9300      	str	r3, [sp, #0]
   1f9c0:	0023      	movs	r3, r4
   1f9c2:	4c13      	ldr	r4, [pc, #76]	; (1fa10 <sd_mmc_init_read_blocks+0xe0>)
   1f9c4:	47a0      	blx	r4
   1f9c6:	0003      	movs	r3, r0
   1f9c8:	001a      	movs	r2, r3
   1f9ca:	2301      	movs	r3, #1
   1f9cc:	4053      	eors	r3, r2
   1f9ce:	b2db      	uxtb	r3, r3
   1f9d0:	2b00      	cmp	r3, #0
   1f9d2:	d003      	beq.n	1f9dc <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1f9d4:	4b0a      	ldr	r3, [pc, #40]	; (1fa00 <sd_mmc_init_read_blocks+0xd0>)
   1f9d6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f9d8:	2305      	movs	r3, #5
   1f9da:	e008      	b.n	1f9ee <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f9dc:	4b0d      	ldr	r3, [pc, #52]	; (1fa14 <sd_mmc_init_read_blocks+0xe4>)
   1f9de:	1d3a      	adds	r2, r7, #4
   1f9e0:	8812      	ldrh	r2, [r2, #0]
   1f9e2:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f9e4:	4b0c      	ldr	r3, [pc, #48]	; (1fa18 <sd_mmc_init_read_blocks+0xe8>)
   1f9e6:	1d3a      	adds	r2, r7, #4
   1f9e8:	8812      	ldrh	r2, [r2, #0]
   1f9ea:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f9ec:	2300      	movs	r3, #0
}
   1f9ee:	0018      	movs	r0, r3
   1f9f0:	46bd      	mov	sp, r7
   1f9f2:	b007      	add	sp, #28
   1f9f4:	bd90      	pop	{r4, r7, pc}
   1f9f6:	46c0      	nop			; (mov r8, r8)
   1f9f8:	0001f411 	.word	0x0001f411
   1f9fc:	0001f2ad 	.word	0x0001f2ad
   1fa00:	0001f50d 	.word	0x0001f50d
   1fa04:	00101112 	.word	0x00101112
   1fa08:	00081111 	.word	0x00081111
   1fa0c:	20003e7c 	.word	0x20003e7c
   1fa10:	0002078d 	.word	0x0002078d
   1fa14:	20003e82 	.word	0x20003e82
   1fa18:	20003e80 	.word	0x20003e80

0001fa1c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1fa1c:	b580      	push	{r7, lr}
   1fa1e:	b082      	sub	sp, #8
   1fa20:	af00      	add	r7, sp, #0
   1fa22:	6078      	str	r0, [r7, #4]
   1fa24:	000a      	movs	r2, r1
   1fa26:	1cbb      	adds	r3, r7, #2
   1fa28:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1fa2a:	1cbb      	adds	r3, r7, #2
   1fa2c:	881a      	ldrh	r2, [r3, #0]
   1fa2e:	687b      	ldr	r3, [r7, #4]
   1fa30:	0011      	movs	r1, r2
   1fa32:	0018      	movs	r0, r3
   1fa34:	4b0d      	ldr	r3, [pc, #52]	; (1fa6c <sd_mmc_start_read_blocks+0x50>)
   1fa36:	4798      	blx	r3
   1fa38:	0003      	movs	r3, r0
   1fa3a:	001a      	movs	r2, r3
   1fa3c:	2301      	movs	r3, #1
   1fa3e:	4053      	eors	r3, r2
   1fa40:	b2db      	uxtb	r3, r3
   1fa42:	2b00      	cmp	r3, #0
   1fa44:	d004      	beq.n	1fa50 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fa46:	4b0a      	ldr	r3, [pc, #40]	; (1fa70 <sd_mmc_start_read_blocks+0x54>)
   1fa48:	2200      	movs	r2, #0
   1fa4a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fa4c:	2305      	movs	r3, #5
   1fa4e:	e008      	b.n	1fa62 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fa50:	4b07      	ldr	r3, [pc, #28]	; (1fa70 <sd_mmc_start_read_blocks+0x54>)
   1fa52:	881a      	ldrh	r2, [r3, #0]
   1fa54:	1cbb      	adds	r3, r7, #2
   1fa56:	881b      	ldrh	r3, [r3, #0]
   1fa58:	1ad3      	subs	r3, r2, r3
   1fa5a:	b29a      	uxth	r2, r3
   1fa5c:	4b04      	ldr	r3, [pc, #16]	; (1fa70 <sd_mmc_start_read_blocks+0x54>)
   1fa5e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fa60:	2300      	movs	r3, #0
}
   1fa62:	0018      	movs	r0, r3
   1fa64:	46bd      	mov	sp, r7
   1fa66:	b002      	add	sp, #8
   1fa68:	bd80      	pop	{r7, pc}
   1fa6a:	46c0      	nop			; (mov r8, r8)
   1fa6c:	00020a5d 	.word	0x00020a5d
   1fa70:	20003e82 	.word	0x20003e82

0001fa74 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1fa74:	b580      	push	{r7, lr}
   1fa76:	b082      	sub	sp, #8
   1fa78:	af00      	add	r7, sp, #0
   1fa7a:	0002      	movs	r2, r0
   1fa7c:	1dfb      	adds	r3, r7, #7
   1fa7e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1fa80:	4b1c      	ldr	r3, [pc, #112]	; (1faf4 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1fa82:	4798      	blx	r3
   1fa84:	0003      	movs	r3, r0
   1fa86:	001a      	movs	r2, r3
   1fa88:	2301      	movs	r3, #1
   1fa8a:	4053      	eors	r3, r2
   1fa8c:	b2db      	uxtb	r3, r3
   1fa8e:	2b00      	cmp	r3, #0
   1fa90:	d001      	beq.n	1fa96 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fa92:	2305      	movs	r3, #5
   1fa94:	e029      	b.n	1faea <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1fa96:	1dfb      	adds	r3, r7, #7
   1fa98:	781b      	ldrb	r3, [r3, #0]
   1fa9a:	2b00      	cmp	r3, #0
   1fa9c:	d003      	beq.n	1faa6 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fa9e:	4b16      	ldr	r3, [pc, #88]	; (1faf8 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1faa0:	2200      	movs	r2, #0
   1faa2:	801a      	strh	r2, [r3, #0]
   1faa4:	e005      	b.n	1fab2 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1faa6:	4b14      	ldr	r3, [pc, #80]	; (1faf8 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1faa8:	881b      	ldrh	r3, [r3, #0]
   1faaa:	2b00      	cmp	r3, #0
   1faac:	d001      	beq.n	1fab2 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1faae:	2300      	movs	r3, #0
   1fab0:	e01b      	b.n	1faea <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fab2:	4b12      	ldr	r3, [pc, #72]	; (1fafc <sd_mmc_wait_end_of_read_blocks+0x88>)
   1fab4:	881b      	ldrh	r3, [r3, #0]
   1fab6:	2b01      	cmp	r3, #1
   1fab8:	d103      	bne.n	1fac2 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1faba:	4b11      	ldr	r3, [pc, #68]	; (1fb00 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fabc:	4798      	blx	r3
		return SD_MMC_OK;
   1fabe:	2300      	movs	r3, #0
   1fac0:	e013      	b.n	1faea <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1fac2:	4b10      	ldr	r3, [pc, #64]	; (1fb04 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fac4:	2100      	movs	r1, #0
   1fac6:	0018      	movs	r0, r3
   1fac8:	4b0f      	ldr	r3, [pc, #60]	; (1fb08 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1faca:	4798      	blx	r3
   1facc:	0003      	movs	r3, r0
   1face:	001a      	movs	r2, r3
   1fad0:	2301      	movs	r3, #1
   1fad2:	4053      	eors	r3, r2
   1fad4:	b2db      	uxtb	r3, r3
   1fad6:	2b00      	cmp	r3, #0
   1fad8:	d004      	beq.n	1fae4 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1fada:	4b0a      	ldr	r3, [pc, #40]	; (1fb04 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fadc:	2100      	movs	r1, #0
   1fade:	0018      	movs	r0, r3
   1fae0:	4b09      	ldr	r3, [pc, #36]	; (1fb08 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fae2:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1fae4:	4b06      	ldr	r3, [pc, #24]	; (1fb00 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fae6:	4798      	blx	r3
	return SD_MMC_OK;
   1fae8:	2300      	movs	r3, #0
}
   1faea:	0018      	movs	r0, r3
   1faec:	46bd      	mov	sp, r7
   1faee:	b002      	add	sp, #8
   1faf0:	bd80      	pop	{r7, pc}
   1faf2:	46c0      	nop			; (mov r8, r8)
   1faf4:	00020b01 	.word	0x00020b01
   1faf8:	20003e82 	.word	0x20003e82
   1fafc:	20003e80 	.word	0x20003e80
   1fb00:	0001f50d 	.word	0x0001f50d
   1fb04:	0000310c 	.word	0x0000310c
   1fb08:	00020765 	.word	0x00020765

0001fb0c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fb0c:	b590      	push	{r4, r7, lr}
   1fb0e:	b089      	sub	sp, #36	; 0x24
   1fb10:	af02      	add	r7, sp, #8
   1fb12:	6039      	str	r1, [r7, #0]
   1fb14:	0011      	movs	r1, r2
   1fb16:	1dfb      	adds	r3, r7, #7
   1fb18:	1c02      	adds	r2, r0, #0
   1fb1a:	701a      	strb	r2, [r3, #0]
   1fb1c:	1d3b      	adds	r3, r7, #4
   1fb1e:	1c0a      	adds	r2, r1, #0
   1fb20:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fb22:	230f      	movs	r3, #15
   1fb24:	18fc      	adds	r4, r7, r3
   1fb26:	1dfb      	adds	r3, r7, #7
   1fb28:	781b      	ldrb	r3, [r3, #0]
   1fb2a:	0018      	movs	r0, r3
   1fb2c:	4b28      	ldr	r3, [pc, #160]	; (1fbd0 <sd_mmc_init_write_blocks+0xc4>)
   1fb2e:	4798      	blx	r3
   1fb30:	0003      	movs	r3, r0
   1fb32:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fb34:	230f      	movs	r3, #15
   1fb36:	18fb      	adds	r3, r7, r3
   1fb38:	781b      	ldrb	r3, [r3, #0]
   1fb3a:	2b00      	cmp	r3, #0
   1fb3c:	d003      	beq.n	1fb46 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1fb3e:	230f      	movs	r3, #15
   1fb40:	18fb      	adds	r3, r7, r3
   1fb42:	781b      	ldrb	r3, [r3, #0]
   1fb44:	e03f      	b.n	1fbc6 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1fb46:	1dfb      	adds	r3, r7, #7
   1fb48:	781b      	ldrb	r3, [r3, #0]
   1fb4a:	0018      	movs	r0, r3
   1fb4c:	4b21      	ldr	r3, [pc, #132]	; (1fbd4 <sd_mmc_init_write_blocks+0xc8>)
   1fb4e:	4798      	blx	r3
   1fb50:	1e03      	subs	r3, r0, #0
   1fb52:	d003      	beq.n	1fb5c <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1fb54:	4b20      	ldr	r3, [pc, #128]	; (1fbd8 <sd_mmc_init_write_blocks+0xcc>)
   1fb56:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1fb58:	2307      	movs	r3, #7
   1fb5a:	e034      	b.n	1fbc6 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1fb5c:	1d3b      	adds	r3, r7, #4
   1fb5e:	881b      	ldrh	r3, [r3, #0]
   1fb60:	2b01      	cmp	r3, #1
   1fb62:	d902      	bls.n	1fb6a <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1fb64:	4b1d      	ldr	r3, [pc, #116]	; (1fbdc <sd_mmc_init_write_blocks+0xd0>)
   1fb66:	617b      	str	r3, [r7, #20]
   1fb68:	e001      	b.n	1fb6e <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1fb6a:	4b1d      	ldr	r3, [pc, #116]	; (1fbe0 <sd_mmc_init_write_blocks+0xd4>)
   1fb6c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1fb6e:	4b1d      	ldr	r3, [pc, #116]	; (1fbe4 <sd_mmc_init_write_blocks+0xd8>)
   1fb70:	681b      	ldr	r3, [r3, #0]
   1fb72:	7adb      	ldrb	r3, [r3, #11]
   1fb74:	001a      	movs	r2, r3
   1fb76:	2308      	movs	r3, #8
   1fb78:	4013      	ands	r3, r2
   1fb7a:	d002      	beq.n	1fb82 <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1fb7c:	683b      	ldr	r3, [r7, #0]
   1fb7e:	613b      	str	r3, [r7, #16]
   1fb80:	e002      	b.n	1fb88 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1fb82:	683b      	ldr	r3, [r7, #0]
   1fb84:	025b      	lsls	r3, r3, #9
   1fb86:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fb88:	1d3b      	adds	r3, r7, #4
   1fb8a:	881c      	ldrh	r4, [r3, #0]
   1fb8c:	2380      	movs	r3, #128	; 0x80
   1fb8e:	009a      	lsls	r2, r3, #2
   1fb90:	6939      	ldr	r1, [r7, #16]
   1fb92:	6978      	ldr	r0, [r7, #20]
   1fb94:	2301      	movs	r3, #1
   1fb96:	9300      	str	r3, [sp, #0]
   1fb98:	0023      	movs	r3, r4
   1fb9a:	4c13      	ldr	r4, [pc, #76]	; (1fbe8 <sd_mmc_init_write_blocks+0xdc>)
   1fb9c:	47a0      	blx	r4
   1fb9e:	0003      	movs	r3, r0
   1fba0:	001a      	movs	r2, r3
   1fba2:	2301      	movs	r3, #1
   1fba4:	4053      	eors	r3, r2
   1fba6:	b2db      	uxtb	r3, r3
   1fba8:	2b00      	cmp	r3, #0
   1fbaa:	d003      	beq.n	1fbb4 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1fbac:	4b0a      	ldr	r3, [pc, #40]	; (1fbd8 <sd_mmc_init_write_blocks+0xcc>)
   1fbae:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fbb0:	2305      	movs	r3, #5
   1fbb2:	e008      	b.n	1fbc6 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fbb4:	4b0d      	ldr	r3, [pc, #52]	; (1fbec <sd_mmc_init_write_blocks+0xe0>)
   1fbb6:	1d3a      	adds	r2, r7, #4
   1fbb8:	8812      	ldrh	r2, [r2, #0]
   1fbba:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fbbc:	4b0c      	ldr	r3, [pc, #48]	; (1fbf0 <sd_mmc_init_write_blocks+0xe4>)
   1fbbe:	1d3a      	adds	r2, r7, #4
   1fbc0:	8812      	ldrh	r2, [r2, #0]
   1fbc2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fbc4:	2300      	movs	r3, #0
}
   1fbc6:	0018      	movs	r0, r3
   1fbc8:	46bd      	mov	sp, r7
   1fbca:	b007      	add	sp, #28
   1fbcc:	bd90      	pop	{r4, r7, pc}
   1fbce:	46c0      	nop			; (mov r8, r8)
   1fbd0:	0001f411 	.word	0x0001f411
   1fbd4:	0001f919 	.word	0x0001f919
   1fbd8:	0001f50d 	.word	0x0001f50d
   1fbdc:	00109119 	.word	0x00109119
   1fbe0:	00089118 	.word	0x00089118
   1fbe4:	20003e7c 	.word	0x20003e7c
   1fbe8:	0002078d 	.word	0x0002078d
   1fbec:	20003e82 	.word	0x20003e82
   1fbf0:	20003e80 	.word	0x20003e80

0001fbf4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1fbf4:	b580      	push	{r7, lr}
   1fbf6:	b082      	sub	sp, #8
   1fbf8:	af00      	add	r7, sp, #0
   1fbfa:	6078      	str	r0, [r7, #4]
   1fbfc:	000a      	movs	r2, r1
   1fbfe:	1cbb      	adds	r3, r7, #2
   1fc00:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1fc02:	1cbb      	adds	r3, r7, #2
   1fc04:	881a      	ldrh	r2, [r3, #0]
   1fc06:	687b      	ldr	r3, [r7, #4]
   1fc08:	0011      	movs	r1, r2
   1fc0a:	0018      	movs	r0, r3
   1fc0c:	4b0d      	ldr	r3, [pc, #52]	; (1fc44 <sd_mmc_start_write_blocks+0x50>)
   1fc0e:	4798      	blx	r3
   1fc10:	0003      	movs	r3, r0
   1fc12:	001a      	movs	r2, r3
   1fc14:	2301      	movs	r3, #1
   1fc16:	4053      	eors	r3, r2
   1fc18:	b2db      	uxtb	r3, r3
   1fc1a:	2b00      	cmp	r3, #0
   1fc1c:	d004      	beq.n	1fc28 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fc1e:	4b0a      	ldr	r3, [pc, #40]	; (1fc48 <sd_mmc_start_write_blocks+0x54>)
   1fc20:	2200      	movs	r2, #0
   1fc22:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fc24:	2305      	movs	r3, #5
   1fc26:	e008      	b.n	1fc3a <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fc28:	4b07      	ldr	r3, [pc, #28]	; (1fc48 <sd_mmc_start_write_blocks+0x54>)
   1fc2a:	881a      	ldrh	r2, [r3, #0]
   1fc2c:	1cbb      	adds	r3, r7, #2
   1fc2e:	881b      	ldrh	r3, [r3, #0]
   1fc30:	1ad3      	subs	r3, r2, r3
   1fc32:	b29a      	uxth	r2, r3
   1fc34:	4b04      	ldr	r3, [pc, #16]	; (1fc48 <sd_mmc_start_write_blocks+0x54>)
   1fc36:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fc38:	2300      	movs	r3, #0
}
   1fc3a:	0018      	movs	r0, r3
   1fc3c:	46bd      	mov	sp, r7
   1fc3e:	b002      	add	sp, #8
   1fc40:	bd80      	pop	{r7, pc}
   1fc42:	46c0      	nop			; (mov r8, r8)
   1fc44:	00020b0d 	.word	0x00020b0d
   1fc48:	20003e82 	.word	0x20003e82

0001fc4c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1fc4c:	b580      	push	{r7, lr}
   1fc4e:	b082      	sub	sp, #8
   1fc50:	af00      	add	r7, sp, #0
   1fc52:	0002      	movs	r2, r0
   1fc54:	1dfb      	adds	r3, r7, #7
   1fc56:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1fc58:	4b13      	ldr	r3, [pc, #76]	; (1fca8 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1fc5a:	4798      	blx	r3
   1fc5c:	0003      	movs	r3, r0
   1fc5e:	001a      	movs	r2, r3
   1fc60:	2301      	movs	r3, #1
   1fc62:	4053      	eors	r3, r2
   1fc64:	b2db      	uxtb	r3, r3
   1fc66:	2b00      	cmp	r3, #0
   1fc68:	d001      	beq.n	1fc6e <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fc6a:	2305      	movs	r3, #5
   1fc6c:	e018      	b.n	1fca0 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1fc6e:	1dfb      	adds	r3, r7, #7
   1fc70:	781b      	ldrb	r3, [r3, #0]
   1fc72:	2b00      	cmp	r3, #0
   1fc74:	d003      	beq.n	1fc7e <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fc76:	4b0d      	ldr	r3, [pc, #52]	; (1fcac <sd_mmc_wait_end_of_write_blocks+0x60>)
   1fc78:	2200      	movs	r2, #0
   1fc7a:	801a      	strh	r2, [r3, #0]
   1fc7c:	e005      	b.n	1fc8a <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fc7e:	4b0b      	ldr	r3, [pc, #44]	; (1fcac <sd_mmc_wait_end_of_write_blocks+0x60>)
   1fc80:	881b      	ldrh	r3, [r3, #0]
   1fc82:	2b00      	cmp	r3, #0
   1fc84:	d001      	beq.n	1fc8a <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1fc86:	2300      	movs	r3, #0
   1fc88:	e00a      	b.n	1fca0 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fc8a:	4b09      	ldr	r3, [pc, #36]	; (1fcb0 <sd_mmc_wait_end_of_write_blocks+0x64>)
   1fc8c:	881b      	ldrh	r3, [r3, #0]
   1fc8e:	2b01      	cmp	r3, #1
   1fc90:	d103      	bne.n	1fc9a <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1fc92:	4b08      	ldr	r3, [pc, #32]	; (1fcb4 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1fc94:	4798      	blx	r3
		return SD_MMC_OK;
   1fc96:	2300      	movs	r3, #0
   1fc98:	e002      	b.n	1fca0 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1fc9a:	4b06      	ldr	r3, [pc, #24]	; (1fcb4 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1fc9c:	4798      	blx	r3
	return SD_MMC_OK;
   1fc9e:	2300      	movs	r3, #0
}
   1fca0:	0018      	movs	r0, r3
   1fca2:	46bd      	mov	sp, r7
   1fca4:	b002      	add	sp, #8
   1fca6:	bd80      	pop	{r7, pc}
   1fca8:	00020bcd 	.word	0x00020bcd
   1fcac:	20003e82 	.word	0x20003e82
   1fcb0:	20003e80 	.word	0x20003e80
   1fcb4:	0001f50d 	.word	0x0001f50d

0001fcb8 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1fcb8:	b580      	push	{r7, lr}
   1fcba:	b082      	sub	sp, #8
   1fcbc:	af00      	add	r7, sp, #0
   1fcbe:	0002      	movs	r2, r0
   1fcc0:	1dfb      	adds	r3, r7, #7
   1fcc2:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1fcc4:	1dfb      	adds	r3, r7, #7
   1fcc6:	781b      	ldrb	r3, [r3, #0]
   1fcc8:	0018      	movs	r0, r3
   1fcca:	4b16      	ldr	r3, [pc, #88]	; (1fd24 <sd_mmc_test_unit_ready+0x6c>)
   1fccc:	4798      	blx	r3
   1fcce:	0003      	movs	r3, r0
   1fcd0:	2b01      	cmp	r3, #1
   1fcd2:	d019      	beq.n	1fd08 <sd_mmc_test_unit_ready+0x50>
   1fcd4:	2b02      	cmp	r3, #2
   1fcd6:	d019      	beq.n	1fd0c <sd_mmc_test_unit_ready+0x54>
   1fcd8:	2b00      	cmp	r3, #0
   1fcda:	d11e      	bne.n	1fd1a <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1fcdc:	1dfb      	adds	r3, r7, #7
   1fcde:	781b      	ldrb	r3, [r3, #0]
   1fce0:	4a11      	ldr	r2, [pc, #68]	; (1fd28 <sd_mmc_test_unit_ready+0x70>)
   1fce2:	5cd3      	ldrb	r3, [r2, r3]
   1fce4:	2b00      	cmp	r3, #0
   1fce6:	d001      	beq.n	1fcec <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1fce8:	2302      	movs	r3, #2
   1fcea:	e017      	b.n	1fd1c <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1fcec:	1dfb      	adds	r3, r7, #7
   1fcee:	781b      	ldrb	r3, [r3, #0]
   1fcf0:	0018      	movs	r0, r3
   1fcf2:	4b0e      	ldr	r3, [pc, #56]	; (1fd2c <sd_mmc_test_unit_ready+0x74>)
   1fcf4:	4798      	blx	r3
   1fcf6:	0003      	movs	r3, r0
   1fcf8:	001a      	movs	r2, r3
   1fcfa:	2303      	movs	r3, #3
   1fcfc:	4013      	ands	r3, r2
   1fcfe:	d001      	beq.n	1fd04 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1fd00:	2300      	movs	r3, #0
   1fd02:	e00b      	b.n	1fd1c <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1fd04:	2302      	movs	r3, #2
   1fd06:	e009      	b.n	1fd1c <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1fd08:	2303      	movs	r3, #3
   1fd0a:	e007      	b.n	1fd1c <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1fd0c:	1dfb      	adds	r3, r7, #7
   1fd0e:	781b      	ldrb	r3, [r3, #0]
   1fd10:	4a05      	ldr	r2, [pc, #20]	; (1fd28 <sd_mmc_test_unit_ready+0x70>)
   1fd12:	2100      	movs	r1, #0
   1fd14:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1fd16:	2302      	movs	r3, #2
   1fd18:	e000      	b.n	1fd1c <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1fd1a:	2301      	movs	r3, #1
	}
}
   1fd1c:	0018      	movs	r0, r3
   1fd1e:	46bd      	mov	sp, r7
   1fd20:	b002      	add	sp, #8
   1fd22:	bd80      	pop	{r7, pc}
   1fd24:	0001f82d 	.word	0x0001f82d
   1fd28:	20003e84 	.word	0x20003e84
   1fd2c:	0001f8a1 	.word	0x0001f8a1

0001fd30 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1fd30:	b580      	push	{r7, lr}
   1fd32:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1fd34:	2000      	movs	r0, #0
   1fd36:	4b03      	ldr	r3, [pc, #12]	; (1fd44 <sd_mmc_test_unit_ready_0+0x14>)
   1fd38:	4798      	blx	r3
   1fd3a:	0003      	movs	r3, r0
}
   1fd3c:	0018      	movs	r0, r3
   1fd3e:	46bd      	mov	sp, r7
   1fd40:	bd80      	pop	{r7, pc}
   1fd42:	46c0      	nop			; (mov r8, r8)
   1fd44:	0001fcb9 	.word	0x0001fcb9

0001fd48 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1fd48:	b580      	push	{r7, lr}
   1fd4a:	b082      	sub	sp, #8
   1fd4c:	af00      	add	r7, sp, #0
   1fd4e:	0002      	movs	r2, r0
   1fd50:	6039      	str	r1, [r7, #0]
   1fd52:	1dfb      	adds	r3, r7, #7
   1fd54:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1fd56:	1dfb      	adds	r3, r7, #7
   1fd58:	781b      	ldrb	r3, [r3, #0]
   1fd5a:	0018      	movs	r0, r3
   1fd5c:	4b08      	ldr	r3, [pc, #32]	; (1fd80 <sd_mmc_read_capacity+0x38>)
   1fd5e:	4798      	blx	r3
   1fd60:	0003      	movs	r3, r0
   1fd62:	005b      	lsls	r3, r3, #1
   1fd64:	1e5a      	subs	r2, r3, #1
   1fd66:	683b      	ldr	r3, [r7, #0]
   1fd68:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1fd6a:	1dfb      	adds	r3, r7, #7
   1fd6c:	781b      	ldrb	r3, [r3, #0]
   1fd6e:	0018      	movs	r0, r3
   1fd70:	4b04      	ldr	r3, [pc, #16]	; (1fd84 <sd_mmc_read_capacity+0x3c>)
   1fd72:	4798      	blx	r3
   1fd74:	0003      	movs	r3, r0
}
   1fd76:	0018      	movs	r0, r3
   1fd78:	46bd      	mov	sp, r7
   1fd7a:	b002      	add	sp, #8
   1fd7c:	bd80      	pop	{r7, pc}
   1fd7e:	46c0      	nop			; (mov r8, r8)
   1fd80:	0001f8dd 	.word	0x0001f8dd
   1fd84:	0001fcb9 	.word	0x0001fcb9

0001fd88 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1fd88:	b580      	push	{r7, lr}
   1fd8a:	b082      	sub	sp, #8
   1fd8c:	af00      	add	r7, sp, #0
   1fd8e:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1fd90:	687b      	ldr	r3, [r7, #4]
   1fd92:	0019      	movs	r1, r3
   1fd94:	2000      	movs	r0, #0
   1fd96:	4b03      	ldr	r3, [pc, #12]	; (1fda4 <sd_mmc_read_capacity_0+0x1c>)
   1fd98:	4798      	blx	r3
   1fd9a:	0003      	movs	r3, r0
}
   1fd9c:	0018      	movs	r0, r3
   1fd9e:	46bd      	mov	sp, r7
   1fda0:	b002      	add	sp, #8
   1fda2:	bd80      	pop	{r7, pc}
   1fda4:	0001fd49 	.word	0x0001fd49

0001fda8 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1fda8:	b580      	push	{r7, lr}
   1fdaa:	b082      	sub	sp, #8
   1fdac:	af00      	add	r7, sp, #0
   1fdae:	0002      	movs	r2, r0
   1fdb0:	1dfb      	adds	r3, r7, #7
   1fdb2:	701a      	strb	r2, [r3, #0]
   1fdb4:	1dbb      	adds	r3, r7, #6
   1fdb6:	1c0a      	adds	r2, r1, #0
   1fdb8:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1fdba:	1dfb      	adds	r3, r7, #7
   1fdbc:	781b      	ldrb	r3, [r3, #0]
   1fdbe:	4a04      	ldr	r2, [pc, #16]	; (1fdd0 <sd_mmc_unload+0x28>)
   1fdc0:	1db9      	adds	r1, r7, #6
   1fdc2:	7809      	ldrb	r1, [r1, #0]
   1fdc4:	54d1      	strb	r1, [r2, r3]
	return true;
   1fdc6:	2301      	movs	r3, #1
}
   1fdc8:	0018      	movs	r0, r3
   1fdca:	46bd      	mov	sp, r7
   1fdcc:	b002      	add	sp, #8
   1fdce:	bd80      	pop	{r7, pc}
   1fdd0:	20003e84 	.word	0x20003e84

0001fdd4 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1fdd4:	b580      	push	{r7, lr}
   1fdd6:	b082      	sub	sp, #8
   1fdd8:	af00      	add	r7, sp, #0
   1fdda:	0002      	movs	r2, r0
   1fddc:	1dfb      	adds	r3, r7, #7
   1fdde:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1fde0:	1dfb      	adds	r3, r7, #7
   1fde2:	781b      	ldrb	r3, [r3, #0]
   1fde4:	0019      	movs	r1, r3
   1fde6:	2000      	movs	r0, #0
   1fde8:	4b03      	ldr	r3, [pc, #12]	; (1fdf8 <sd_mmc_unload_0+0x24>)
   1fdea:	4798      	blx	r3
   1fdec:	0003      	movs	r3, r0
}
   1fdee:	0018      	movs	r0, r3
   1fdf0:	46bd      	mov	sp, r7
   1fdf2:	b002      	add	sp, #8
   1fdf4:	bd80      	pop	{r7, pc}
   1fdf6:	46c0      	nop			; (mov r8, r8)
   1fdf8:	0001fda9 	.word	0x0001fda9

0001fdfc <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1fdfc:	b580      	push	{r7, lr}
   1fdfe:	b082      	sub	sp, #8
   1fe00:	af00      	add	r7, sp, #0
   1fe02:	0002      	movs	r2, r0
   1fe04:	1dfb      	adds	r3, r7, #7
   1fe06:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1fe08:	1dfb      	adds	r3, r7, #7
   1fe0a:	781b      	ldrb	r3, [r3, #0]
   1fe0c:	0018      	movs	r0, r3
   1fe0e:	4b03      	ldr	r3, [pc, #12]	; (1fe1c <sd_mmc_wr_protect+0x20>)
   1fe10:	4798      	blx	r3
   1fe12:	0003      	movs	r3, r0
}
   1fe14:	0018      	movs	r0, r3
   1fe16:	46bd      	mov	sp, r7
   1fe18:	b002      	add	sp, #8
   1fe1a:	bd80      	pop	{r7, pc}
   1fe1c:	0001f919 	.word	0x0001f919

0001fe20 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1fe20:	b580      	push	{r7, lr}
   1fe22:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1fe24:	2000      	movs	r0, #0
   1fe26:	4b03      	ldr	r3, [pc, #12]	; (1fe34 <sd_mmc_wr_protect_0+0x14>)
   1fe28:	4798      	blx	r3
   1fe2a:	0003      	movs	r3, r0
}
   1fe2c:	0018      	movs	r0, r3
   1fe2e:	46bd      	mov	sp, r7
   1fe30:	bd80      	pop	{r7, pc}
   1fe32:	46c0      	nop			; (mov r8, r8)
   1fe34:	0001fdfd 	.word	0x0001fdfd

0001fe38 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1fe38:	b580      	push	{r7, lr}
   1fe3a:	b082      	sub	sp, #8
   1fe3c:	af00      	add	r7, sp, #0
   1fe3e:	0002      	movs	r2, r0
   1fe40:	1dfb      	adds	r3, r7, #7
   1fe42:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1fe44:	2301      	movs	r3, #1
}
   1fe46:	0018      	movs	r0, r3
   1fe48:	46bd      	mov	sp, r7
   1fe4a:	b002      	add	sp, #8
   1fe4c:	bd80      	pop	{r7, pc}
	...

0001fe50 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1fe50:	b580      	push	{r7, lr}
   1fe52:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1fe54:	2000      	movs	r0, #0
   1fe56:	4b03      	ldr	r3, [pc, #12]	; (1fe64 <sd_mmc_removal_0+0x14>)
   1fe58:	4798      	blx	r3
   1fe5a:	0003      	movs	r3, r0
}
   1fe5c:	0018      	movs	r0, r3
   1fe5e:	46bd      	mov	sp, r7
   1fe60:	bd80      	pop	{r7, pc}
   1fe62:	46c0      	nop			; (mov r8, r8)
   1fe64:	0001fe39 	.word	0x0001fe39

0001fe68 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1fe68:	b580      	push	{r7, lr}
   1fe6a:	b084      	sub	sp, #16
   1fe6c:	af00      	add	r7, sp, #0
   1fe6e:	60b9      	str	r1, [r7, #8]
   1fe70:	607a      	str	r2, [r7, #4]
   1fe72:	230f      	movs	r3, #15
   1fe74:	18fb      	adds	r3, r7, r3
   1fe76:	1c02      	adds	r2, r0, #0
   1fe78:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1fe7a:	68b9      	ldr	r1, [r7, #8]
   1fe7c:	230f      	movs	r3, #15
   1fe7e:	18fb      	adds	r3, r7, r3
   1fe80:	781b      	ldrb	r3, [r3, #0]
   1fe82:	2201      	movs	r2, #1
   1fe84:	0018      	movs	r0, r3
   1fe86:	4b10      	ldr	r3, [pc, #64]	; (1fec8 <sd_mmc_mem_2_ram+0x60>)
   1fe88:	4798      	blx	r3
   1fe8a:	1e03      	subs	r3, r0, #0
   1fe8c:	d005      	beq.n	1fe9a <sd_mmc_mem_2_ram+0x32>
   1fe8e:	2b02      	cmp	r3, #2
   1fe90:	d101      	bne.n	1fe96 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1fe92:	2302      	movs	r3, #2
   1fe94:	e013      	b.n	1febe <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1fe96:	2301      	movs	r3, #1
   1fe98:	e011      	b.n	1febe <sd_mmc_mem_2_ram+0x56>
		break;
   1fe9a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1fe9c:	687b      	ldr	r3, [r7, #4]
   1fe9e:	2101      	movs	r1, #1
   1fea0:	0018      	movs	r0, r3
   1fea2:	4b0a      	ldr	r3, [pc, #40]	; (1fecc <sd_mmc_mem_2_ram+0x64>)
   1fea4:	4798      	blx	r3
   1fea6:	1e03      	subs	r3, r0, #0
   1fea8:	d001      	beq.n	1feae <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1feaa:	2301      	movs	r3, #1
   1feac:	e007      	b.n	1febe <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1feae:	2000      	movs	r0, #0
   1feb0:	4b07      	ldr	r3, [pc, #28]	; (1fed0 <sd_mmc_mem_2_ram+0x68>)
   1feb2:	4798      	blx	r3
   1feb4:	1e03      	subs	r3, r0, #0
   1feb6:	d001      	beq.n	1febc <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1feb8:	2301      	movs	r3, #1
   1feba:	e000      	b.n	1febe <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1febc:	2300      	movs	r3, #0
}
   1febe:	0018      	movs	r0, r3
   1fec0:	46bd      	mov	sp, r7
   1fec2:	b004      	add	sp, #16
   1fec4:	bd80      	pop	{r7, pc}
   1fec6:	46c0      	nop			; (mov r8, r8)
   1fec8:	0001f931 	.word	0x0001f931
   1fecc:	0001fa1d 	.word	0x0001fa1d
   1fed0:	0001fa75 	.word	0x0001fa75

0001fed4 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1fed4:	b580      	push	{r7, lr}
   1fed6:	b082      	sub	sp, #8
   1fed8:	af00      	add	r7, sp, #0
   1feda:	6078      	str	r0, [r7, #4]
   1fedc:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1fede:	683a      	ldr	r2, [r7, #0]
   1fee0:	687b      	ldr	r3, [r7, #4]
   1fee2:	0019      	movs	r1, r3
   1fee4:	2000      	movs	r0, #0
   1fee6:	4b03      	ldr	r3, [pc, #12]	; (1fef4 <sd_mmc_mem_2_ram_0+0x20>)
   1fee8:	4798      	blx	r3
   1feea:	0003      	movs	r3, r0
}
   1feec:	0018      	movs	r0, r3
   1feee:	46bd      	mov	sp, r7
   1fef0:	b002      	add	sp, #8
   1fef2:	bd80      	pop	{r7, pc}
   1fef4:	0001fe69 	.word	0x0001fe69

0001fef8 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1fef8:	b580      	push	{r7, lr}
   1fefa:	b084      	sub	sp, #16
   1fefc:	af00      	add	r7, sp, #0
   1fefe:	60b9      	str	r1, [r7, #8]
   1ff00:	607a      	str	r2, [r7, #4]
   1ff02:	230f      	movs	r3, #15
   1ff04:	18fb      	adds	r3, r7, r3
   1ff06:	1c02      	adds	r2, r0, #0
   1ff08:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1ff0a:	68b9      	ldr	r1, [r7, #8]
   1ff0c:	230f      	movs	r3, #15
   1ff0e:	18fb      	adds	r3, r7, r3
   1ff10:	781b      	ldrb	r3, [r3, #0]
   1ff12:	2201      	movs	r2, #1
   1ff14:	0018      	movs	r0, r3
   1ff16:	4b10      	ldr	r3, [pc, #64]	; (1ff58 <sd_mmc_ram_2_mem+0x60>)
   1ff18:	4798      	blx	r3
   1ff1a:	1e03      	subs	r3, r0, #0
   1ff1c:	d005      	beq.n	1ff2a <sd_mmc_ram_2_mem+0x32>
   1ff1e:	2b02      	cmp	r3, #2
   1ff20:	d101      	bne.n	1ff26 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1ff22:	2302      	movs	r3, #2
   1ff24:	e013      	b.n	1ff4e <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1ff26:	2301      	movs	r3, #1
   1ff28:	e011      	b.n	1ff4e <sd_mmc_ram_2_mem+0x56>
		break;
   1ff2a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1ff2c:	687b      	ldr	r3, [r7, #4]
   1ff2e:	2101      	movs	r1, #1
   1ff30:	0018      	movs	r0, r3
   1ff32:	4b0a      	ldr	r3, [pc, #40]	; (1ff5c <sd_mmc_ram_2_mem+0x64>)
   1ff34:	4798      	blx	r3
   1ff36:	1e03      	subs	r3, r0, #0
   1ff38:	d001      	beq.n	1ff3e <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1ff3a:	2301      	movs	r3, #1
   1ff3c:	e007      	b.n	1ff4e <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1ff3e:	2000      	movs	r0, #0
   1ff40:	4b07      	ldr	r3, [pc, #28]	; (1ff60 <sd_mmc_ram_2_mem+0x68>)
   1ff42:	4798      	blx	r3
   1ff44:	1e03      	subs	r3, r0, #0
   1ff46:	d001      	beq.n	1ff4c <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1ff48:	2301      	movs	r3, #1
   1ff4a:	e000      	b.n	1ff4e <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1ff4c:	2300      	movs	r3, #0
}
   1ff4e:	0018      	movs	r0, r3
   1ff50:	46bd      	mov	sp, r7
   1ff52:	b004      	add	sp, #16
   1ff54:	bd80      	pop	{r7, pc}
   1ff56:	46c0      	nop			; (mov r8, r8)
   1ff58:	0001fb0d 	.word	0x0001fb0d
   1ff5c:	0001fbf5 	.word	0x0001fbf5
   1ff60:	0001fc4d 	.word	0x0001fc4d

0001ff64 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1ff64:	b580      	push	{r7, lr}
   1ff66:	b082      	sub	sp, #8
   1ff68:	af00      	add	r7, sp, #0
   1ff6a:	6078      	str	r0, [r7, #4]
   1ff6c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1ff6e:	683a      	ldr	r2, [r7, #0]
   1ff70:	687b      	ldr	r3, [r7, #4]
   1ff72:	0019      	movs	r1, r3
   1ff74:	2000      	movs	r0, #0
   1ff76:	4b03      	ldr	r3, [pc, #12]	; (1ff84 <sd_mmc_ram_2_mem_0+0x20>)
   1ff78:	4798      	blx	r3
   1ff7a:	0003      	movs	r3, r0
}
   1ff7c:	0018      	movs	r0, r3
   1ff7e:	46bd      	mov	sp, r7
   1ff80:	b002      	add	sp, #8
   1ff82:	bd80      	pop	{r7, pc}
   1ff84:	0001fef9 	.word	0x0001fef9

0001ff88 <system_pinmux_get_group_from_gpio_pin>:
{
   1ff88:	b580      	push	{r7, lr}
   1ff8a:	b084      	sub	sp, #16
   1ff8c:	af00      	add	r7, sp, #0
   1ff8e:	0002      	movs	r2, r0
   1ff90:	1dfb      	adds	r3, r7, #7
   1ff92:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1ff94:	230f      	movs	r3, #15
   1ff96:	18fb      	adds	r3, r7, r3
   1ff98:	1dfa      	adds	r2, r7, #7
   1ff9a:	7812      	ldrb	r2, [r2, #0]
   1ff9c:	09d2      	lsrs	r2, r2, #7
   1ff9e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ffa0:	230e      	movs	r3, #14
   1ffa2:	18fb      	adds	r3, r7, r3
   1ffa4:	1dfa      	adds	r2, r7, #7
   1ffa6:	7812      	ldrb	r2, [r2, #0]
   1ffa8:	0952      	lsrs	r2, r2, #5
   1ffaa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1ffac:	4b0d      	ldr	r3, [pc, #52]	; (1ffe4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1ffae:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1ffb0:	230f      	movs	r3, #15
   1ffb2:	18fb      	adds	r3, r7, r3
   1ffb4:	781b      	ldrb	r3, [r3, #0]
   1ffb6:	2b00      	cmp	r3, #0
   1ffb8:	d10f      	bne.n	1ffda <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1ffba:	230f      	movs	r3, #15
   1ffbc:	18fb      	adds	r3, r7, r3
   1ffbe:	781b      	ldrb	r3, [r3, #0]
   1ffc0:	009b      	lsls	r3, r3, #2
   1ffc2:	2210      	movs	r2, #16
   1ffc4:	4694      	mov	ip, r2
   1ffc6:	44bc      	add	ip, r7
   1ffc8:	4463      	add	r3, ip
   1ffca:	3b08      	subs	r3, #8
   1ffcc:	681a      	ldr	r2, [r3, #0]
   1ffce:	230e      	movs	r3, #14
   1ffd0:	18fb      	adds	r3, r7, r3
   1ffd2:	781b      	ldrb	r3, [r3, #0]
   1ffd4:	01db      	lsls	r3, r3, #7
   1ffd6:	18d3      	adds	r3, r2, r3
   1ffd8:	e000      	b.n	1ffdc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1ffda:	2300      	movs	r3, #0
}
   1ffdc:	0018      	movs	r0, r3
   1ffde:	46bd      	mov	sp, r7
   1ffe0:	b004      	add	sp, #16
   1ffe2:	bd80      	pop	{r7, pc}
   1ffe4:	41004400 	.word	0x41004400

0001ffe8 <system_interrupt_enable>:
{
   1ffe8:	b580      	push	{r7, lr}
   1ffea:	b082      	sub	sp, #8
   1ffec:	af00      	add	r7, sp, #0
   1ffee:	0002      	movs	r2, r0
   1fff0:	1dfb      	adds	r3, r7, #7
   1fff2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fff4:	4b06      	ldr	r3, [pc, #24]	; (20010 <system_interrupt_enable+0x28>)
   1fff6:	1dfa      	adds	r2, r7, #7
   1fff8:	7812      	ldrb	r2, [r2, #0]
   1fffa:	0011      	movs	r1, r2
   1fffc:	221f      	movs	r2, #31
   1fffe:	400a      	ands	r2, r1
   20000:	2101      	movs	r1, #1
   20002:	4091      	lsls	r1, r2
   20004:	000a      	movs	r2, r1
   20006:	601a      	str	r2, [r3, #0]
}
   20008:	46c0      	nop			; (mov r8, r8)
   2000a:	46bd      	mov	sp, r7
   2000c:	b002      	add	sp, #8
   2000e:	bd80      	pop	{r7, pc}
   20010:	e000e100 	.word	0xe000e100

00020014 <port_get_group_from_gpio_pin>:
{
   20014:	b580      	push	{r7, lr}
   20016:	b082      	sub	sp, #8
   20018:	af00      	add	r7, sp, #0
   2001a:	0002      	movs	r2, r0
   2001c:	1dfb      	adds	r3, r7, #7
   2001e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20020:	1dfb      	adds	r3, r7, #7
   20022:	781b      	ldrb	r3, [r3, #0]
   20024:	0018      	movs	r0, r3
   20026:	4b03      	ldr	r3, [pc, #12]	; (20034 <port_get_group_from_gpio_pin+0x20>)
   20028:	4798      	blx	r3
   2002a:	0003      	movs	r3, r0
}
   2002c:	0018      	movs	r0, r3
   2002e:	46bd      	mov	sp, r7
   20030:	b002      	add	sp, #8
   20032:	bd80      	pop	{r7, pc}
   20034:	0001ff89 	.word	0x0001ff89

00020038 <port_get_config_defaults>:
{
   20038:	b580      	push	{r7, lr}
   2003a:	b082      	sub	sp, #8
   2003c:	af00      	add	r7, sp, #0
   2003e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20040:	687b      	ldr	r3, [r7, #4]
   20042:	2200      	movs	r2, #0
   20044:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20046:	687b      	ldr	r3, [r7, #4]
   20048:	2201      	movs	r2, #1
   2004a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2004c:	687b      	ldr	r3, [r7, #4]
   2004e:	2200      	movs	r2, #0
   20050:	709a      	strb	r2, [r3, #2]
}
   20052:	46c0      	nop			; (mov r8, r8)
   20054:	46bd      	mov	sp, r7
   20056:	b002      	add	sp, #8
   20058:	bd80      	pop	{r7, pc}
	...

0002005c <port_pin_set_output_level>:
{
   2005c:	b580      	push	{r7, lr}
   2005e:	b084      	sub	sp, #16
   20060:	af00      	add	r7, sp, #0
   20062:	0002      	movs	r2, r0
   20064:	1dfb      	adds	r3, r7, #7
   20066:	701a      	strb	r2, [r3, #0]
   20068:	1dbb      	adds	r3, r7, #6
   2006a:	1c0a      	adds	r2, r1, #0
   2006c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2006e:	1dfb      	adds	r3, r7, #7
   20070:	781b      	ldrb	r3, [r3, #0]
   20072:	0018      	movs	r0, r3
   20074:	4b0d      	ldr	r3, [pc, #52]	; (200ac <port_pin_set_output_level+0x50>)
   20076:	4798      	blx	r3
   20078:	0003      	movs	r3, r0
   2007a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2007c:	1dfb      	adds	r3, r7, #7
   2007e:	781b      	ldrb	r3, [r3, #0]
   20080:	221f      	movs	r2, #31
   20082:	4013      	ands	r3, r2
   20084:	2201      	movs	r2, #1
   20086:	409a      	lsls	r2, r3
   20088:	0013      	movs	r3, r2
   2008a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2008c:	1dbb      	adds	r3, r7, #6
   2008e:	781b      	ldrb	r3, [r3, #0]
   20090:	2b00      	cmp	r3, #0
   20092:	d003      	beq.n	2009c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20094:	68fb      	ldr	r3, [r7, #12]
   20096:	68ba      	ldr	r2, [r7, #8]
   20098:	619a      	str	r2, [r3, #24]
}
   2009a:	e002      	b.n	200a2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2009c:	68fb      	ldr	r3, [r7, #12]
   2009e:	68ba      	ldr	r2, [r7, #8]
   200a0:	615a      	str	r2, [r3, #20]
}
   200a2:	46c0      	nop			; (mov r8, r8)
   200a4:	46bd      	mov	sp, r7
   200a6:	b004      	add	sp, #16
   200a8:	bd80      	pop	{r7, pc}
   200aa:	46c0      	nop			; (mov r8, r8)
   200ac:	00020015 	.word	0x00020015

000200b0 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   200b0:	b580      	push	{r7, lr}
   200b2:	b084      	sub	sp, #16
   200b4:	af00      	add	r7, sp, #0
   200b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   200b8:	687b      	ldr	r3, [r7, #4]
   200ba:	681b      	ldr	r3, [r3, #0]
   200bc:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   200be:	68fb      	ldr	r3, [r7, #12]
   200c0:	69db      	ldr	r3, [r3, #28]
   200c2:	1e5a      	subs	r2, r3, #1
   200c4:	4193      	sbcs	r3, r2
   200c6:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   200c8:	0018      	movs	r0, r3
   200ca:	46bd      	mov	sp, r7
   200cc:	b004      	add	sp, #16
   200ce:	bd80      	pop	{r7, pc}

000200d0 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   200d0:	b580      	push	{r7, lr}
   200d2:	b082      	sub	sp, #8
   200d4:	af00      	add	r7, sp, #0
   200d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   200d8:	687b      	ldr	r3, [r7, #4]
   200da:	2201      	movs	r2, #1
   200dc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   200de:	687b      	ldr	r3, [r7, #4]
   200e0:	2200      	movs	r2, #0
   200e2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   200e4:	687b      	ldr	r3, [r7, #4]
   200e6:	2200      	movs	r2, #0
   200e8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   200ea:	687b      	ldr	r3, [r7, #4]
   200ec:	22c0      	movs	r2, #192	; 0xc0
   200ee:	0392      	lsls	r2, r2, #14
   200f0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   200f2:	687b      	ldr	r3, [r7, #4]
   200f4:	2200      	movs	r2, #0
   200f6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   200f8:	687b      	ldr	r3, [r7, #4]
   200fa:	2200      	movs	r2, #0
   200fc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   200fe:	687b      	ldr	r3, [r7, #4]
   20100:	2201      	movs	r2, #1
   20102:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   20104:	687b      	ldr	r3, [r7, #4]
   20106:	2201      	movs	r2, #1
   20108:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   2010a:	687b      	ldr	r3, [r7, #4]
   2010c:	2200      	movs	r2, #0
   2010e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   20110:	687b      	ldr	r3, [r7, #4]
   20112:	2224      	movs	r2, #36	; 0x24
   20114:	2100      	movs	r1, #0
   20116:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20118:	687b      	ldr	r3, [r7, #4]
   2011a:	3318      	adds	r3, #24
   2011c:	220c      	movs	r2, #12
   2011e:	2100      	movs	r1, #0
   20120:	0018      	movs	r0, r3
   20122:	4b0a      	ldr	r3, [pc, #40]	; (2014c <spi_get_config_defaults+0x7c>)
   20124:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   20126:	687b      	ldr	r3, [r7, #4]
   20128:	4a09      	ldr	r2, [pc, #36]	; (20150 <spi_get_config_defaults+0x80>)
   2012a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   2012c:	687b      	ldr	r3, [r7, #4]
   2012e:	2200      	movs	r2, #0
   20130:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   20132:	687b      	ldr	r3, [r7, #4]
   20134:	2200      	movs	r2, #0
   20136:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20138:	687b      	ldr	r3, [r7, #4]
   2013a:	2200      	movs	r2, #0
   2013c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2013e:	687b      	ldr	r3, [r7, #4]
   20140:	2200      	movs	r2, #0
   20142:	635a      	str	r2, [r3, #52]	; 0x34

};
   20144:	46c0      	nop			; (mov r8, r8)
   20146:	46bd      	mov	sp, r7
   20148:	b002      	add	sp, #8
   2014a:	bd80      	pop	{r7, pc}
   2014c:	00035543 	.word	0x00035543
   20150:	000186a0 	.word	0x000186a0

00020154 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   20154:	b580      	push	{r7, lr}
   20156:	b082      	sub	sp, #8
   20158:	af00      	add	r7, sp, #0
   2015a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   2015c:	687b      	ldr	r3, [r7, #4]
   2015e:	220a      	movs	r2, #10
   20160:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   20162:	687b      	ldr	r3, [r7, #4]
   20164:	2200      	movs	r2, #0
   20166:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   20168:	687b      	ldr	r3, [r7, #4]
   2016a:	2200      	movs	r2, #0
   2016c:	709a      	strb	r2, [r3, #2]
}
   2016e:	46c0      	nop			; (mov r8, r8)
   20170:	46bd      	mov	sp, r7
   20172:	b002      	add	sp, #8
   20174:	bd80      	pop	{r7, pc}
	...

00020178 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   20178:	b580      	push	{r7, lr}
   2017a:	b084      	sub	sp, #16
   2017c:	af00      	add	r7, sp, #0
   2017e:	6078      	str	r0, [r7, #4]
   20180:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   20182:	683b      	ldr	r3, [r7, #0]
   20184:	781a      	ldrb	r2, [r3, #0]
   20186:	687b      	ldr	r3, [r7, #4]
   20188:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2018a:	683b      	ldr	r3, [r7, #0]
   2018c:	785a      	ldrb	r2, [r3, #1]
   2018e:	687b      	ldr	r3, [r7, #4]
   20190:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   20192:	683b      	ldr	r3, [r7, #0]
   20194:	789a      	ldrb	r2, [r3, #2]
   20196:	687b      	ldr	r3, [r7, #4]
   20198:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2019a:	230c      	movs	r3, #12
   2019c:	18fb      	adds	r3, r7, r3
   2019e:	0018      	movs	r0, r3
   201a0:	4b0b      	ldr	r3, [pc, #44]	; (201d0 <spi_attach_slave+0x58>)
   201a2:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   201a4:	230c      	movs	r3, #12
   201a6:	18fb      	adds	r3, r7, r3
   201a8:	2201      	movs	r2, #1
   201aa:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   201ac:	687b      	ldr	r3, [r7, #4]
   201ae:	781b      	ldrb	r3, [r3, #0]
   201b0:	220c      	movs	r2, #12
   201b2:	18ba      	adds	r2, r7, r2
   201b4:	0011      	movs	r1, r2
   201b6:	0018      	movs	r0, r3
   201b8:	4b06      	ldr	r3, [pc, #24]	; (201d4 <spi_attach_slave+0x5c>)
   201ba:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   201bc:	687b      	ldr	r3, [r7, #4]
   201be:	781b      	ldrb	r3, [r3, #0]
   201c0:	2101      	movs	r1, #1
   201c2:	0018      	movs	r0, r3
   201c4:	4b04      	ldr	r3, [pc, #16]	; (201d8 <spi_attach_slave+0x60>)
   201c6:	4798      	blx	r3
}
   201c8:	46c0      	nop			; (mov r8, r8)
   201ca:	46bd      	mov	sp, r7
   201cc:	b004      	add	sp, #16
   201ce:	bd80      	pop	{r7, pc}
   201d0:	00020039 	.word	0x00020039
   201d4:	0002751d 	.word	0x0002751d
   201d8:	0002005d 	.word	0x0002005d

000201dc <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   201dc:	b580      	push	{r7, lr}
   201de:	b084      	sub	sp, #16
   201e0:	af00      	add	r7, sp, #0
   201e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   201e4:	687b      	ldr	r3, [r7, #4]
   201e6:	681b      	ldr	r3, [r3, #0]
   201e8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   201ea:	687b      	ldr	r3, [r7, #4]
   201ec:	681b      	ldr	r3, [r3, #0]
   201ee:	0018      	movs	r0, r3
   201f0:	4b0b      	ldr	r3, [pc, #44]	; (20220 <spi_enable+0x44>)
   201f2:	4798      	blx	r3
   201f4:	0003      	movs	r3, r0
   201f6:	0018      	movs	r0, r3
   201f8:	4b0a      	ldr	r3, [pc, #40]	; (20224 <spi_enable+0x48>)
   201fa:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   201fc:	46c0      	nop			; (mov r8, r8)
   201fe:	687b      	ldr	r3, [r7, #4]
   20200:	0018      	movs	r0, r3
   20202:	4b09      	ldr	r3, [pc, #36]	; (20228 <spi_enable+0x4c>)
   20204:	4798      	blx	r3
   20206:	1e03      	subs	r3, r0, #0
   20208:	d1f9      	bne.n	201fe <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2020a:	68fb      	ldr	r3, [r7, #12]
   2020c:	681b      	ldr	r3, [r3, #0]
   2020e:	2202      	movs	r2, #2
   20210:	431a      	orrs	r2, r3
   20212:	68fb      	ldr	r3, [r7, #12]
   20214:	601a      	str	r2, [r3, #0]
}
   20216:	46c0      	nop			; (mov r8, r8)
   20218:	46bd      	mov	sp, r7
   2021a:	b004      	add	sp, #16
   2021c:	bd80      	pop	{r7, pc}
   2021e:	46c0      	nop			; (mov r8, r8)
   20220:	000281ed 	.word	0x000281ed
   20224:	0001ffe9 	.word	0x0001ffe9
   20228:	000200b1 	.word	0x000200b1

0002022c <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   2022c:	b580      	push	{r7, lr}
   2022e:	b084      	sub	sp, #16
   20230:	af00      	add	r7, sp, #0
   20232:	6078      	str	r0, [r7, #4]
   20234:	000a      	movs	r2, r1
   20236:	1cfb      	adds	r3, r7, #3
   20238:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   2023a:	230f      	movs	r3, #15
   2023c:	18fb      	adds	r3, r7, r3
   2023e:	2200      	movs	r2, #0
   20240:	701a      	strb	r2, [r3, #0]
	while (size--) {
   20242:	e038      	b.n	202b6 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   20244:	687b      	ldr	r3, [r7, #4]
   20246:	1c5a      	adds	r2, r3, #1
   20248:	607a      	str	r2, [r7, #4]
   2024a:	220e      	movs	r2, #14
   2024c:	18ba      	adds	r2, r7, r2
   2024e:	781b      	ldrb	r3, [r3, #0]
   20250:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   20252:	230d      	movs	r3, #13
   20254:	18fb      	adds	r3, r7, r3
   20256:	2200      	movs	r2, #0
   20258:	701a      	strb	r2, [r3, #0]
   2025a:	e027      	b.n	202ac <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   2025c:	230f      	movs	r3, #15
   2025e:	18fa      	adds	r2, r7, r3
   20260:	230f      	movs	r3, #15
   20262:	18fb      	adds	r3, r7, r3
   20264:	781b      	ldrb	r3, [r3, #0]
   20266:	18db      	adds	r3, r3, r3
   20268:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   2026a:	230e      	movs	r3, #14
   2026c:	18fa      	adds	r2, r7, r3
   2026e:	230f      	movs	r3, #15
   20270:	18fb      	adds	r3, r7, r3
   20272:	7812      	ldrb	r2, [r2, #0]
   20274:	781b      	ldrb	r3, [r3, #0]
   20276:	4053      	eors	r3, r2
   20278:	b2db      	uxtb	r3, r3
   2027a:	b25b      	sxtb	r3, r3
   2027c:	2b00      	cmp	r3, #0
   2027e:	da07      	bge.n	20290 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   20280:	230f      	movs	r3, #15
   20282:	18fb      	adds	r3, r7, r3
   20284:	220f      	movs	r2, #15
   20286:	18ba      	adds	r2, r7, r2
   20288:	7812      	ldrb	r2, [r2, #0]
   2028a:	2109      	movs	r1, #9
   2028c:	404a      	eors	r2, r1
   2028e:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   20290:	230e      	movs	r3, #14
   20292:	18fa      	adds	r2, r7, r3
   20294:	230e      	movs	r3, #14
   20296:	18fb      	adds	r3, r7, r3
   20298:	781b      	ldrb	r3, [r3, #0]
   2029a:	18db      	adds	r3, r3, r3
   2029c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   2029e:	230d      	movs	r3, #13
   202a0:	18fb      	adds	r3, r7, r3
   202a2:	781a      	ldrb	r2, [r3, #0]
   202a4:	230d      	movs	r3, #13
   202a6:	18fb      	adds	r3, r7, r3
   202a8:	3201      	adds	r2, #1
   202aa:	701a      	strb	r2, [r3, #0]
   202ac:	230d      	movs	r3, #13
   202ae:	18fb      	adds	r3, r7, r3
   202b0:	781b      	ldrb	r3, [r3, #0]
   202b2:	2b07      	cmp	r3, #7
   202b4:	d9d2      	bls.n	2025c <sd_mmc_spi_crc7+0x30>
	while (size--) {
   202b6:	1cfb      	adds	r3, r7, #3
   202b8:	781b      	ldrb	r3, [r3, #0]
   202ba:	1cfa      	adds	r2, r7, #3
   202bc:	1e59      	subs	r1, r3, #1
   202be:	7011      	strb	r1, [r2, #0]
   202c0:	2b00      	cmp	r3, #0
   202c2:	d1bf      	bne.n	20244 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   202c4:	230f      	movs	r3, #15
   202c6:	18fb      	adds	r3, r7, r3
   202c8:	781b      	ldrb	r3, [r3, #0]
   202ca:	005b      	lsls	r3, r3, #1
   202cc:	b25b      	sxtb	r3, r3
   202ce:	2201      	movs	r2, #1
   202d0:	4313      	orrs	r3, r2
   202d2:	b25a      	sxtb	r2, r3
   202d4:	230f      	movs	r3, #15
   202d6:	18fb      	adds	r3, r7, r3
   202d8:	701a      	strb	r2, [r3, #0]
	return crc;
   202da:	230f      	movs	r3, #15
   202dc:	18fb      	adds	r3, r7, r3
   202de:	781b      	ldrb	r3, [r3, #0]
}
   202e0:	0018      	movs	r0, r3
   202e2:	46bd      	mov	sp, r7
   202e4:	b004      	add	sp, #16
   202e6:	bd80      	pop	{r7, pc}

000202e8 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   202e8:	b590      	push	{r4, r7, lr}
   202ea:	b083      	sub	sp, #12
   202ec:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   202ee:	1c7b      	adds	r3, r7, #1
   202f0:	22ff      	movs	r2, #255	; 0xff
   202f2:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   202f4:	1cbb      	adds	r3, r7, #2
   202f6:	22ff      	movs	r2, #255	; 0xff
   202f8:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   202fa:	1cbb      	adds	r3, r7, #2
   202fc:	881b      	ldrh	r3, [r3, #0]
   202fe:	1c79      	adds	r1, r7, #1
   20300:	4811      	ldr	r0, [pc, #68]	; (20348 <sd_mmc_spi_wait_busy+0x60>)
   20302:	2201      	movs	r2, #1
   20304:	4c11      	ldr	r4, [pc, #68]	; (2034c <sd_mmc_spi_wait_busy+0x64>)
   20306:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   20308:	4b11      	ldr	r3, [pc, #68]	; (20350 <sd_mmc_spi_wait_busy+0x68>)
   2030a:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   2030c:	1cbb      	adds	r3, r7, #2
   2030e:	881b      	ldrh	r3, [r3, #0]
   20310:	1c79      	adds	r1, r7, #1
   20312:	480d      	ldr	r0, [pc, #52]	; (20348 <sd_mmc_spi_wait_busy+0x60>)
   20314:	2201      	movs	r2, #1
   20316:	4c0d      	ldr	r4, [pc, #52]	; (2034c <sd_mmc_spi_wait_busy+0x64>)
   20318:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   2031a:	1cbb      	adds	r3, r7, #2
   2031c:	881b      	ldrh	r3, [r3, #0]
   2031e:	1c79      	adds	r1, r7, #1
   20320:	4809      	ldr	r0, [pc, #36]	; (20348 <sd_mmc_spi_wait_busy+0x60>)
   20322:	2201      	movs	r2, #1
   20324:	4c09      	ldr	r4, [pc, #36]	; (2034c <sd_mmc_spi_wait_busy+0x64>)
   20326:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   20328:	687b      	ldr	r3, [r7, #4]
   2032a:	1e5a      	subs	r2, r3, #1
   2032c:	607a      	str	r2, [r7, #4]
   2032e:	2b00      	cmp	r3, #0
   20330:	d101      	bne.n	20336 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   20332:	2300      	movs	r3, #0
   20334:	e004      	b.n	20340 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   20336:	1c7b      	adds	r3, r7, #1
   20338:	781b      	ldrb	r3, [r3, #0]
   2033a:	2bff      	cmp	r3, #255	; 0xff
   2033c:	d1ed      	bne.n	2031a <sd_mmc_spi_wait_busy+0x32>
	return true;
   2033e:	2301      	movs	r3, #1
}
   20340:	0018      	movs	r0, r3
   20342:	46bd      	mov	sp, r7
   20344:	b003      	add	sp, #12
   20346:	bd90      	pop	{r4, r7, pc}
   20348:	20003e88 	.word	0x20003e88
   2034c:	00028b2d 	.word	0x00028b2d
   20350:	00030d40 	.word	0x00030d40

00020354 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   20354:	b590      	push	{r4, r7, lr}
   20356:	b083      	sub	sp, #12
   20358:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   2035a:	1cbb      	adds	r3, r7, #2
   2035c:	22ff      	movs	r2, #255	; 0xff
   2035e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   20360:	1c7b      	adds	r3, r7, #1
   20362:	2200      	movs	r2, #0
   20364:	701a      	strb	r2, [r3, #0]
	i = 500000;
   20366:	4b18      	ldr	r3, [pc, #96]	; (203c8 <sd_mmc_spi_start_read_block+0x74>)
   20368:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   2036a:	687b      	ldr	r3, [r7, #4]
   2036c:	1e5a      	subs	r2, r3, #1
   2036e:	607a      	str	r2, [r7, #4]
   20370:	2b00      	cmp	r3, #0
   20372:	d104      	bne.n	2037e <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   20374:	4b15      	ldr	r3, [pc, #84]	; (203cc <sd_mmc_spi_start_read_block+0x78>)
   20376:	2204      	movs	r2, #4
   20378:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   2037a:	2300      	movs	r3, #0
   2037c:	e020      	b.n	203c0 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   2037e:	1cbb      	adds	r3, r7, #2
   20380:	881b      	ldrh	r3, [r3, #0]
   20382:	1c79      	adds	r1, r7, #1
   20384:	4812      	ldr	r0, [pc, #72]	; (203d0 <sd_mmc_spi_start_read_block+0x7c>)
   20386:	2201      	movs	r2, #1
   20388:	4c12      	ldr	r4, [pc, #72]	; (203d4 <sd_mmc_spi_start_read_block+0x80>)
   2038a:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   2038c:	1c7b      	adds	r3, r7, #1
   2038e:	781b      	ldrb	r3, [r3, #0]
   20390:	001a      	movs	r2, r3
   20392:	23f0      	movs	r3, #240	; 0xf0
   20394:	4013      	ands	r3, r2
   20396:	d10e      	bne.n	203b6 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   20398:	1c7b      	adds	r3, r7, #1
   2039a:	781b      	ldrb	r3, [r3, #0]
   2039c:	001a      	movs	r2, r3
   2039e:	2307      	movs	r3, #7
   203a0:	4013      	ands	r3, r2
   203a2:	d003      	beq.n	203ac <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   203a4:	4b09      	ldr	r3, [pc, #36]	; (203cc <sd_mmc_spi_start_read_block+0x78>)
   203a6:	2207      	movs	r2, #7
   203a8:	701a      	strb	r2, [r3, #0]
   203aa:	e002      	b.n	203b2 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   203ac:	4b07      	ldr	r3, [pc, #28]	; (203cc <sd_mmc_spi_start_read_block+0x78>)
   203ae:	220b      	movs	r2, #11
   203b0:	701a      	strb	r2, [r3, #0]
			}
			return false;
   203b2:	2300      	movs	r3, #0
   203b4:	e004      	b.n	203c0 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   203b6:	1c7b      	adds	r3, r7, #1
   203b8:	781b      	ldrb	r3, [r3, #0]
   203ba:	2bfe      	cmp	r3, #254	; 0xfe
   203bc:	d1d5      	bne.n	2036a <sd_mmc_spi_start_read_block+0x16>

	return true;
   203be:	2301      	movs	r3, #1
}
   203c0:	0018      	movs	r0, r3
   203c2:	46bd      	mov	sp, r7
   203c4:	b003      	add	sp, #12
   203c6:	bd90      	pop	{r4, r7, pc}
   203c8:	0007a120 	.word	0x0007a120
   203cc:	20003ecb 	.word	0x20003ecb
   203d0:	20003e88 	.word	0x20003e88
   203d4:	00028b2d 	.word	0x00028b2d

000203d8 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   203d8:	b590      	push	{r4, r7, lr}
   203da:	b083      	sub	sp, #12
   203dc:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   203de:	1dbb      	adds	r3, r7, #6
   203e0:	22ff      	movs	r2, #255	; 0xff
   203e2:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   203e4:	1dbb      	adds	r3, r7, #6
   203e6:	881b      	ldrh	r3, [r3, #0]
   203e8:	1d39      	adds	r1, r7, #4
   203ea:	4804      	ldr	r0, [pc, #16]	; (203fc <sd_mmc_spi_stop_read_block+0x24>)
   203ec:	2202      	movs	r2, #2
   203ee:	4c04      	ldr	r4, [pc, #16]	; (20400 <sd_mmc_spi_stop_read_block+0x28>)
   203f0:	47a0      	blx	r4
			dummy);
}
   203f2:	46c0      	nop			; (mov r8, r8)
   203f4:	46bd      	mov	sp, r7
   203f6:	b003      	add	sp, #12
   203f8:	bd90      	pop	{r4, r7, pc}
   203fa:	46c0      	nop			; (mov r8, r8)
   203fc:	20003e88 	.word	0x20003e88
   20400:	00028b2d 	.word	0x00028b2d

00020404 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   20404:	b580      	push	{r7, lr}
   20406:	b082      	sub	sp, #8
   20408:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   2040a:	1dfb      	adds	r3, r7, #7
   2040c:	22ff      	movs	r2, #255	; 0xff
   2040e:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   20410:	1df9      	adds	r1, r7, #7
   20412:	4b0d      	ldr	r3, [pc, #52]	; (20448 <sd_mmc_spi_start_write_block+0x44>)
   20414:	2201      	movs	r2, #1
   20416:	0018      	movs	r0, r3
   20418:	4b0c      	ldr	r3, [pc, #48]	; (2044c <sd_mmc_spi_start_write_block+0x48>)
   2041a:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   2041c:	4b0c      	ldr	r3, [pc, #48]	; (20450 <sd_mmc_spi_start_write_block+0x4c>)
   2041e:	881b      	ldrh	r3, [r3, #0]
   20420:	2b01      	cmp	r3, #1
   20422:	d103      	bne.n	2042c <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   20424:	1dbb      	adds	r3, r7, #6
   20426:	22fe      	movs	r2, #254	; 0xfe
   20428:	701a      	strb	r2, [r3, #0]
   2042a:	e002      	b.n	20432 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   2042c:	1dbb      	adds	r3, r7, #6
   2042e:	22fc      	movs	r2, #252	; 0xfc
   20430:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   20432:	1db9      	adds	r1, r7, #6
   20434:	4b04      	ldr	r3, [pc, #16]	; (20448 <sd_mmc_spi_start_write_block+0x44>)
   20436:	2201      	movs	r2, #1
   20438:	0018      	movs	r0, r3
   2043a:	4b04      	ldr	r3, [pc, #16]	; (2044c <sd_mmc_spi_start_write_block+0x48>)
   2043c:	4798      	blx	r3
}
   2043e:	46c0      	nop			; (mov r8, r8)
   20440:	46bd      	mov	sp, r7
   20442:	b002      	add	sp, #8
   20444:	bd80      	pop	{r7, pc}
   20446:	46c0      	nop			; (mov r8, r8)
   20448:	20003e88 	.word	0x20003e88
   2044c:	00028d51 	.word	0x00028d51
   20450:	20003ed6 	.word	0x20003ed6

00020454 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   20454:	b590      	push	{r4, r7, lr}
   20456:	b083      	sub	sp, #12
   20458:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   2045a:	1dbb      	adds	r3, r7, #6
   2045c:	22ff      	movs	r2, #255	; 0xff
   2045e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   20460:	1cbb      	adds	r3, r7, #2
   20462:	2201      	movs	r2, #1
   20464:	4252      	negs	r2, r2
   20466:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   20468:	1cb9      	adds	r1, r7, #2
   2046a:	4b1b      	ldr	r3, [pc, #108]	; (204d8 <sd_mmc_spi_stop_write_block+0x84>)
   2046c:	2202      	movs	r2, #2
   2046e:	0018      	movs	r0, r3
   20470:	4b1a      	ldr	r3, [pc, #104]	; (204dc <sd_mmc_spi_stop_write_block+0x88>)
   20472:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   20474:	1dbb      	adds	r3, r7, #6
   20476:	881b      	ldrh	r3, [r3, #0]
   20478:	1d79      	adds	r1, r7, #5
   2047a:	4817      	ldr	r0, [pc, #92]	; (204d8 <sd_mmc_spi_stop_write_block+0x84>)
   2047c:	2201      	movs	r2, #1
   2047e:	4c18      	ldr	r4, [pc, #96]	; (204e0 <sd_mmc_spi_stop_write_block+0x8c>)
   20480:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   20482:	1d7b      	adds	r3, r7, #5
   20484:	781b      	ldrb	r3, [r3, #0]
   20486:	001a      	movs	r2, r3
   20488:	2310      	movs	r3, #16
   2048a:	4013      	ands	r3, r2
   2048c:	d105      	bne.n	2049a <sd_mmc_spi_stop_write_block+0x46>
   2048e:	1d7b      	adds	r3, r7, #5
   20490:	781b      	ldrb	r3, [r3, #0]
   20492:	001a      	movs	r2, r3
   20494:	2301      	movs	r3, #1
   20496:	4013      	ands	r3, r2
   20498:	d104      	bne.n	204a4 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   2049a:	4b12      	ldr	r3, [pc, #72]	; (204e4 <sd_mmc_spi_stop_write_block+0x90>)
   2049c:	2201      	movs	r2, #1
   2049e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   204a0:	2300      	movs	r3, #0
   204a2:	e014      	b.n	204ce <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   204a4:	1d7b      	adds	r3, r7, #5
   204a6:	781b      	ldrb	r3, [r3, #0]
   204a8:	001a      	movs	r2, r3
   204aa:	231e      	movs	r3, #30
   204ac:	4013      	ands	r3, r2
   204ae:	2b04      	cmp	r3, #4
   204b0:	d00b      	beq.n	204ca <sd_mmc_spi_stop_write_block+0x76>
   204b2:	2b0a      	cmp	r3, #10
   204b4:	d104      	bne.n	204c0 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   204b6:	4b0b      	ldr	r3, [pc, #44]	; (204e4 <sd_mmc_spi_stop_write_block+0x90>)
   204b8:	2208      	movs	r2, #8
   204ba:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   204bc:	2300      	movs	r3, #0
   204be:	e006      	b.n	204ce <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   204c0:	4b08      	ldr	r3, [pc, #32]	; (204e4 <sd_mmc_spi_stop_write_block+0x90>)
   204c2:	220a      	movs	r2, #10
   204c4:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   204c6:	2300      	movs	r3, #0
   204c8:	e001      	b.n	204ce <sd_mmc_spi_stop_write_block+0x7a>
		break;
   204ca:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   204cc:	2301      	movs	r3, #1
}
   204ce:	0018      	movs	r0, r3
   204d0:	46bd      	mov	sp, r7
   204d2:	b003      	add	sp, #12
   204d4:	bd90      	pop	{r4, r7, pc}
   204d6:	46c0      	nop			; (mov r8, r8)
   204d8:	20003e88 	.word	0x20003e88
   204dc:	00028d51 	.word	0x00028d51
   204e0:	00028b2d 	.word	0x00028b2d
   204e4:	20003ecb 	.word	0x20003ecb

000204e8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   204e8:	b590      	push	{r4, r7, lr}
   204ea:	b083      	sub	sp, #12
   204ec:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   204ee:	4b1d      	ldr	r3, [pc, #116]	; (20564 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   204f0:	881b      	ldrh	r3, [r3, #0]
   204f2:	2b01      	cmp	r3, #1
   204f4:	d101      	bne.n	204fa <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   204f6:	2301      	movs	r3, #1
   204f8:	e030      	b.n	2055c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   204fa:	4b1a      	ldr	r3, [pc, #104]	; (20564 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   204fc:	881b      	ldrh	r3, [r3, #0]
   204fe:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   20500:	4b19      	ldr	r3, [pc, #100]	; (20568 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   20502:	681a      	ldr	r2, [r3, #0]
   20504:	4b19      	ldr	r3, [pc, #100]	; (2056c <sd_mmc_spi_stop_multiwrite_block+0x84>)
   20506:	881b      	ldrh	r3, [r3, #0]
   20508:	0019      	movs	r1, r3
   2050a:	4b19      	ldr	r3, [pc, #100]	; (20570 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   2050c:	0010      	movs	r0, r2
   2050e:	4798      	blx	r3
   20510:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   20512:	429c      	cmp	r4, r3
   20514:	d901      	bls.n	2051a <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   20516:	2301      	movs	r3, #1
   20518:	e020      	b.n	2055c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   2051a:	1dfb      	adds	r3, r7, #7
   2051c:	22ff      	movs	r2, #255	; 0xff
   2051e:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   20520:	1df9      	adds	r1, r7, #7
   20522:	4b14      	ldr	r3, [pc, #80]	; (20574 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20524:	2201      	movs	r2, #1
   20526:	0018      	movs	r0, r3
   20528:	4b13      	ldr	r3, [pc, #76]	; (20578 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   2052a:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   2052c:	1dfb      	adds	r3, r7, #7
   2052e:	22fd      	movs	r2, #253	; 0xfd
   20530:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   20532:	1df9      	adds	r1, r7, #7
   20534:	4b0f      	ldr	r3, [pc, #60]	; (20574 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20536:	2201      	movs	r2, #1
   20538:	0018      	movs	r0, r3
   2053a:	4b0f      	ldr	r3, [pc, #60]	; (20578 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   2053c:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   2053e:	4b0f      	ldr	r3, [pc, #60]	; (2057c <sd_mmc_spi_stop_multiwrite_block+0x94>)
   20540:	4798      	blx	r3
   20542:	0003      	movs	r3, r0
   20544:	001a      	movs	r2, r3
   20546:	2301      	movs	r3, #1
   20548:	4053      	eors	r3, r2
   2054a:	b2db      	uxtb	r3, r3
   2054c:	2b00      	cmp	r3, #0
   2054e:	d004      	beq.n	2055a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20550:	4b0b      	ldr	r3, [pc, #44]	; (20580 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   20552:	2205      	movs	r2, #5
   20554:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   20556:	2300      	movs	r3, #0
   20558:	e000      	b.n	2055c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   2055a:	2301      	movs	r3, #1
}
   2055c:	0018      	movs	r0, r3
   2055e:	46bd      	mov	sp, r7
   20560:	b003      	add	sp, #12
   20562:	bd90      	pop	{r4, r7, pc}
   20564:	20003ed6 	.word	0x20003ed6
   20568:	20003ed0 	.word	0x20003ed0
   2056c:	20003ed4 	.word	0x20003ed4
   20570:	00033569 	.word	0x00033569
   20574:	20003e88 	.word	0x20003e88
   20578:	00028d51 	.word	0x00028d51
   2057c:	000202e9 	.word	0x000202e9
   20580:	20003ecb 	.word	0x20003ecb

00020584 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   20584:	b580      	push	{r7, lr}
   20586:	b090      	sub	sp, #64	; 0x40
   20588:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2058a:	4b1f      	ldr	r3, [pc, #124]	; (20608 <sd_mmc_spi_init+0x84>)
   2058c:	2200      	movs	r2, #0
   2058e:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   20590:	233c      	movs	r3, #60	; 0x3c
   20592:	18fb      	adds	r3, r7, r3
   20594:	0018      	movs	r0, r3
   20596:	4b1d      	ldr	r3, [pc, #116]	; (2060c <sd_mmc_spi_init+0x88>)
   20598:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   2059a:	1d3b      	adds	r3, r7, #4
   2059c:	0018      	movs	r0, r3
   2059e:	4b1c      	ldr	r3, [pc, #112]	; (20610 <sd_mmc_spi_init+0x8c>)
   205a0:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   205a2:	1d3b      	adds	r3, r7, #4
   205a4:	2280      	movs	r2, #128	; 0x80
   205a6:	0252      	lsls	r2, r2, #9
   205a8:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   205aa:	1d3b      	adds	r3, r7, #4
   205ac:	4a19      	ldr	r2, [pc, #100]	; (20614 <sd_mmc_spi_init+0x90>)
   205ae:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   205b0:	1d3b      	adds	r3, r7, #4
   205b2:	4a19      	ldr	r2, [pc, #100]	; (20618 <sd_mmc_spi_init+0x94>)
   205b4:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   205b6:	1d3b      	adds	r3, r7, #4
   205b8:	4a18      	ldr	r2, [pc, #96]	; (2061c <sd_mmc_spi_init+0x98>)
   205ba:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   205bc:	1d3b      	adds	r3, r7, #4
   205be:	4a18      	ldr	r2, [pc, #96]	; (20620 <sd_mmc_spi_init+0x9c>)
   205c0:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   205c2:	1d3b      	adds	r3, r7, #4
   205c4:	2224      	movs	r2, #36	; 0x24
   205c6:	2100      	movs	r1, #0
   205c8:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   205ca:	1d3b      	adds	r3, r7, #4
   205cc:	4a15      	ldr	r2, [pc, #84]	; (20624 <sd_mmc_spi_init+0xa0>)
   205ce:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   205d0:	1d3a      	adds	r2, r7, #4
   205d2:	4915      	ldr	r1, [pc, #84]	; (20628 <sd_mmc_spi_init+0xa4>)
   205d4:	4b15      	ldr	r3, [pc, #84]	; (2062c <sd_mmc_spi_init+0xa8>)
   205d6:	0018      	movs	r0, r3
   205d8:	4b15      	ldr	r3, [pc, #84]	; (20630 <sd_mmc_spi_init+0xac>)
   205da:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   205dc:	4b13      	ldr	r3, [pc, #76]	; (2062c <sd_mmc_spi_init+0xa8>)
   205de:	0018      	movs	r0, r3
   205e0:	4b14      	ldr	r3, [pc, #80]	; (20634 <sd_mmc_spi_init+0xb0>)
   205e2:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   205e4:	4b14      	ldr	r3, [pc, #80]	; (20638 <sd_mmc_spi_init+0xb4>)
   205e6:	0018      	movs	r0, r3
   205e8:	4b14      	ldr	r3, [pc, #80]	; (2063c <sd_mmc_spi_init+0xb8>)
   205ea:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   205ec:	4b14      	ldr	r3, [pc, #80]	; (20640 <sd_mmc_spi_init+0xbc>)
   205ee:	781a      	ldrb	r2, [r3, #0]
   205f0:	4b11      	ldr	r3, [pc, #68]	; (20638 <sd_mmc_spi_init+0xb4>)
   205f2:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   205f4:	4a10      	ldr	r2, [pc, #64]	; (20638 <sd_mmc_spi_init+0xb4>)
   205f6:	4b13      	ldr	r3, [pc, #76]	; (20644 <sd_mmc_spi_init+0xc0>)
   205f8:	0011      	movs	r1, r2
   205fa:	0018      	movs	r0, r3
   205fc:	4b12      	ldr	r3, [pc, #72]	; (20648 <sd_mmc_spi_init+0xc4>)
   205fe:	4798      	blx	r3
}
   20600:	46c0      	nop			; (mov r8, r8)
   20602:	46bd      	mov	sp, r7
   20604:	b010      	add	sp, #64	; 0x40
   20606:	bd80      	pop	{r7, pc}
   20608:	20003ecb 	.word	0x20003ecb
   2060c:	00020039 	.word	0x00020039
   20610:	000200d1 	.word	0x000200d1
   20614:	00100002 	.word	0x00100002
   20618:	00110002 	.word	0x00110002
   2061c:	00120002 	.word	0x00120002
   20620:	00130002 	.word	0x00130002
   20624:	00061a80 	.word	0x00061a80
   20628:	42000c00 	.word	0x42000c00
   2062c:	20003e88 	.word	0x20003e88
   20630:	0002899d 	.word	0x0002899d
   20634:	000201dd 	.word	0x000201dd
   20638:	20003ec8 	.word	0x20003ec8
   2063c:	00020155 	.word	0x00020155
   20640:	2000010c 	.word	0x2000010c
   20644:	20003ec4 	.word	0x20003ec4
   20648:	00020179 	.word	0x00020179

0002064c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   2064c:	b590      	push	{r4, r7, lr}
   2064e:	b083      	sub	sp, #12
   20650:	af00      	add	r7, sp, #0
   20652:	0004      	movs	r4, r0
   20654:	6039      	str	r1, [r7, #0]
   20656:	0010      	movs	r0, r2
   20658:	0019      	movs	r1, r3
   2065a:	1dfb      	adds	r3, r7, #7
   2065c:	1c22      	adds	r2, r4, #0
   2065e:	701a      	strb	r2, [r3, #0]
   20660:	1dbb      	adds	r3, r7, #6
   20662:	1c02      	adds	r2, r0, #0
   20664:	701a      	strb	r2, [r3, #0]
   20666:	1d7b      	adds	r3, r7, #5
   20668:	1c0a      	adds	r2, r1, #0
   2066a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2066c:	4b13      	ldr	r3, [pc, #76]	; (206bc <sd_mmc_spi_select_device+0x70>)
   2066e:	2200      	movs	r2, #0
   20670:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   20672:	683b      	ldr	r3, [r7, #0]
   20674:	4a12      	ldr	r2, [pc, #72]	; (206c0 <sd_mmc_spi_select_device+0x74>)
   20676:	4293      	cmp	r3, r2
   20678:	d907      	bls.n	2068a <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   2067a:	4b11      	ldr	r3, [pc, #68]	; (206c0 <sd_mmc_spi_select_device+0x74>)
   2067c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   2067e:	e004      	b.n	2068a <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   20680:	683b      	ldr	r3, [r7, #0]
   20682:	08db      	lsrs	r3, r3, #3
   20684:	683a      	ldr	r2, [r7, #0]
   20686:	1ad3      	subs	r3, r2, r3
   20688:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   2068a:	683a      	ldr	r2, [r7, #0]
   2068c:	4b0d      	ldr	r3, [pc, #52]	; (206c4 <sd_mmc_spi_select_device+0x78>)
   2068e:	0011      	movs	r1, r2
   20690:	0018      	movs	r0, r3
   20692:	4b0d      	ldr	r3, [pc, #52]	; (206c8 <sd_mmc_spi_select_device+0x7c>)
   20694:	4798      	blx	r3
   20696:	0003      	movs	r3, r0
   20698:	2b17      	cmp	r3, #23
   2069a:	d0f1      	beq.n	20680 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   2069c:	1dfb      	adds	r3, r7, #7
   2069e:	781a      	ldrb	r2, [r3, #0]
   206a0:	0013      	movs	r3, r2
   206a2:	005b      	lsls	r3, r3, #1
   206a4:	189b      	adds	r3, r3, r2
   206a6:	4a09      	ldr	r2, [pc, #36]	; (206cc <sd_mmc_spi_select_device+0x80>)
   206a8:	1899      	adds	r1, r3, r2
   206aa:	4b06      	ldr	r3, [pc, #24]	; (206c4 <sd_mmc_spi_select_device+0x78>)
   206ac:	2201      	movs	r2, #1
   206ae:	0018      	movs	r0, r3
   206b0:	4b07      	ldr	r3, [pc, #28]	; (206d0 <sd_mmc_spi_select_device+0x84>)
   206b2:	4798      	blx	r3
}
   206b4:	46c0      	nop			; (mov r8, r8)
   206b6:	46bd      	mov	sp, r7
   206b8:	b003      	add	sp, #12
   206ba:	bd90      	pop	{r4, r7, pc}
   206bc:	20003ecb 	.word	0x20003ecb
   206c0:	00989680 	.word	0x00989680
   206c4:	20003e88 	.word	0x20003e88
   206c8:	000286c5 	.word	0x000286c5
   206cc:	20003ec4 	.word	0x20003ec4
   206d0:	00028c61 	.word	0x00028c61

000206d4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   206d4:	b580      	push	{r7, lr}
   206d6:	b082      	sub	sp, #8
   206d8:	af00      	add	r7, sp, #0
   206da:	0002      	movs	r2, r0
   206dc:	1dfb      	adds	r3, r7, #7
   206de:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   206e0:	4b09      	ldr	r3, [pc, #36]	; (20708 <sd_mmc_spi_deselect_device+0x34>)
   206e2:	2200      	movs	r2, #0
   206e4:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   206e6:	1dfb      	adds	r3, r7, #7
   206e8:	781a      	ldrb	r2, [r3, #0]
   206ea:	0013      	movs	r3, r2
   206ec:	005b      	lsls	r3, r3, #1
   206ee:	189b      	adds	r3, r3, r2
   206f0:	4a06      	ldr	r2, [pc, #24]	; (2070c <sd_mmc_spi_deselect_device+0x38>)
   206f2:	1899      	adds	r1, r3, r2
   206f4:	4b06      	ldr	r3, [pc, #24]	; (20710 <sd_mmc_spi_deselect_device+0x3c>)
   206f6:	2200      	movs	r2, #0
   206f8:	0018      	movs	r0, r3
   206fa:	4b06      	ldr	r3, [pc, #24]	; (20714 <sd_mmc_spi_deselect_device+0x40>)
   206fc:	4798      	blx	r3
}
   206fe:	46c0      	nop			; (mov r8, r8)
   20700:	46bd      	mov	sp, r7
   20702:	b002      	add	sp, #8
   20704:	bd80      	pop	{r7, pc}
   20706:	46c0      	nop			; (mov r8, r8)
   20708:	20003ecb 	.word	0x20003ecb
   2070c:	20003ec4 	.word	0x20003ec4
   20710:	20003e88 	.word	0x20003e88
   20714:	00028c61 	.word	0x00028c61

00020718 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   20718:	b580      	push	{r7, lr}
   2071a:	b082      	sub	sp, #8
   2071c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   2071e:	1dbb      	adds	r3, r7, #6
   20720:	22ff      	movs	r2, #255	; 0xff
   20722:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20724:	4b0c      	ldr	r3, [pc, #48]	; (20758 <sd_mmc_spi_send_clock+0x40>)
   20726:	2200      	movs	r2, #0
   20728:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   2072a:	1dfb      	adds	r3, r7, #7
   2072c:	2200      	movs	r2, #0
   2072e:	701a      	strb	r2, [r3, #0]
   20730:	e00a      	b.n	20748 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   20732:	1db9      	adds	r1, r7, #6
   20734:	4b09      	ldr	r3, [pc, #36]	; (2075c <sd_mmc_spi_send_clock+0x44>)
   20736:	2201      	movs	r2, #1
   20738:	0018      	movs	r0, r3
   2073a:	4b09      	ldr	r3, [pc, #36]	; (20760 <sd_mmc_spi_send_clock+0x48>)
   2073c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   2073e:	1dfb      	adds	r3, r7, #7
   20740:	781a      	ldrb	r2, [r3, #0]
   20742:	1dfb      	adds	r3, r7, #7
   20744:	3201      	adds	r2, #1
   20746:	701a      	strb	r2, [r3, #0]
   20748:	1dfb      	adds	r3, r7, #7
   2074a:	781b      	ldrb	r3, [r3, #0]
   2074c:	2b09      	cmp	r3, #9
   2074e:	d9f0      	bls.n	20732 <sd_mmc_spi_send_clock+0x1a>
	}
}
   20750:	46c0      	nop			; (mov r8, r8)
   20752:	46bd      	mov	sp, r7
   20754:	b002      	add	sp, #8
   20756:	bd80      	pop	{r7, pc}
   20758:	20003ecb 	.word	0x20003ecb
   2075c:	20003e88 	.word	0x20003e88
   20760:	00028d51 	.word	0x00028d51

00020764 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   20764:	b590      	push	{r4, r7, lr}
   20766:	b085      	sub	sp, #20
   20768:	af02      	add	r7, sp, #8
   2076a:	6078      	str	r0, [r7, #4]
   2076c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   2076e:	6839      	ldr	r1, [r7, #0]
   20770:	6878      	ldr	r0, [r7, #4]
   20772:	2300      	movs	r3, #0
   20774:	9300      	str	r3, [sp, #0]
   20776:	2300      	movs	r3, #0
   20778:	2200      	movs	r2, #0
   2077a:	4c03      	ldr	r4, [pc, #12]	; (20788 <sd_mmc_spi_send_cmd+0x24>)
   2077c:	47a0      	blx	r4
   2077e:	0003      	movs	r3, r0
}
   20780:	0018      	movs	r0, r3
   20782:	46bd      	mov	sp, r7
   20784:	b003      	add	sp, #12
   20786:	bd90      	pop	{r4, r7, pc}
   20788:	0002078d 	.word	0x0002078d

0002078c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   2078c:	b590      	push	{r4, r7, lr}
   2078e:	b089      	sub	sp, #36	; 0x24
   20790:	af00      	add	r7, sp, #0
   20792:	60f8      	str	r0, [r7, #12]
   20794:	60b9      	str	r1, [r7, #8]
   20796:	0019      	movs	r1, r3
   20798:	1dbb      	adds	r3, r7, #6
   2079a:	801a      	strh	r2, [r3, #0]
   2079c:	1d3b      	adds	r3, r7, #4
   2079e:	1c0a      	adds	r2, r1, #0
   207a0:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   207a2:	231b      	movs	r3, #27
   207a4:	18fb      	adds	r3, r7, r3
   207a6:	22ff      	movs	r2, #255	; 0xff
   207a8:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   207aa:	231c      	movs	r3, #28
   207ac:	18fb      	adds	r3, r7, r3
   207ae:	22ff      	movs	r2, #255	; 0xff
   207b0:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   207b2:	4b72      	ldr	r3, [pc, #456]	; (2097c <sd_mmc_spi_adtc_start+0x1f0>)
   207b4:	2200      	movs	r2, #0
   207b6:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   207b8:	68fb      	ldr	r3, [r7, #12]
   207ba:	b2db      	uxtb	r3, r3
   207bc:	223f      	movs	r2, #63	; 0x3f
   207be:	4013      	ands	r3, r2
   207c0:	b2db      	uxtb	r3, r3
   207c2:	2240      	movs	r2, #64	; 0x40
   207c4:	4313      	orrs	r3, r2
   207c6:	b2da      	uxtb	r2, r3
   207c8:	2314      	movs	r3, #20
   207ca:	18fb      	adds	r3, r7, r3
   207cc:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   207ce:	68bb      	ldr	r3, [r7, #8]
   207d0:	0e1b      	lsrs	r3, r3, #24
   207d2:	b2da      	uxtb	r2, r3
   207d4:	2314      	movs	r3, #20
   207d6:	18fb      	adds	r3, r7, r3
   207d8:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   207da:	68bb      	ldr	r3, [r7, #8]
   207dc:	0c1b      	lsrs	r3, r3, #16
   207de:	b2da      	uxtb	r2, r3
   207e0:	2314      	movs	r3, #20
   207e2:	18fb      	adds	r3, r7, r3
   207e4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   207e6:	68bb      	ldr	r3, [r7, #8]
   207e8:	0a1b      	lsrs	r3, r3, #8
   207ea:	b2da      	uxtb	r2, r3
   207ec:	2314      	movs	r3, #20
   207ee:	18fb      	adds	r3, r7, r3
   207f0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   207f2:	68bb      	ldr	r3, [r7, #8]
   207f4:	b2da      	uxtb	r2, r3
   207f6:	2314      	movs	r3, #20
   207f8:	18fb      	adds	r3, r7, r3
   207fa:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   207fc:	2314      	movs	r3, #20
   207fe:	18fb      	adds	r3, r7, r3
   20800:	2105      	movs	r1, #5
   20802:	0018      	movs	r0, r3
   20804:	4b5e      	ldr	r3, [pc, #376]	; (20980 <sd_mmc_spi_adtc_start+0x1f4>)
   20806:	4798      	blx	r3
   20808:	0003      	movs	r3, r0
   2080a:	001a      	movs	r2, r3
   2080c:	2314      	movs	r3, #20
   2080e:	18fb      	adds	r3, r7, r3
   20810:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   20812:	231b      	movs	r3, #27
   20814:	18f9      	adds	r1, r7, r3
   20816:	4b5b      	ldr	r3, [pc, #364]	; (20984 <sd_mmc_spi_adtc_start+0x1f8>)
   20818:	2201      	movs	r2, #1
   2081a:	0018      	movs	r0, r3
   2081c:	4b5a      	ldr	r3, [pc, #360]	; (20988 <sd_mmc_spi_adtc_start+0x1fc>)
   2081e:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   20820:	2314      	movs	r3, #20
   20822:	18f9      	adds	r1, r7, r3
   20824:	4b57      	ldr	r3, [pc, #348]	; (20984 <sd_mmc_spi_adtc_start+0x1f8>)
   20826:	2206      	movs	r2, #6
   20828:	0018      	movs	r0, r3
   2082a:	4b57      	ldr	r3, [pc, #348]	; (20988 <sd_mmc_spi_adtc_start+0x1fc>)
   2082c:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   2082e:	2313      	movs	r3, #19
   20830:	18fb      	adds	r3, r7, r3
   20832:	22ff      	movs	r2, #255	; 0xff
   20834:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20836:	231c      	movs	r3, #28
   20838:	18fb      	adds	r3, r7, r3
   2083a:	881b      	ldrh	r3, [r3, #0]
   2083c:	2213      	movs	r2, #19
   2083e:	18b9      	adds	r1, r7, r2
   20840:	4850      	ldr	r0, [pc, #320]	; (20984 <sd_mmc_spi_adtc_start+0x1f8>)
   20842:	2201      	movs	r2, #1
   20844:	4c51      	ldr	r4, [pc, #324]	; (2098c <sd_mmc_spi_adtc_start+0x200>)
   20846:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   20848:	231f      	movs	r3, #31
   2084a:	18fb      	adds	r3, r7, r3
   2084c:	2207      	movs	r2, #7
   2084e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20850:	231c      	movs	r3, #28
   20852:	18fb      	adds	r3, r7, r3
   20854:	881b      	ldrh	r3, [r3, #0]
   20856:	2213      	movs	r2, #19
   20858:	18b9      	adds	r1, r7, r2
   2085a:	484a      	ldr	r0, [pc, #296]	; (20984 <sd_mmc_spi_adtc_start+0x1f8>)
   2085c:	2201      	movs	r2, #1
   2085e:	4c4b      	ldr	r4, [pc, #300]	; (2098c <sd_mmc_spi_adtc_start+0x200>)
   20860:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   20862:	2313      	movs	r3, #19
   20864:	18fb      	adds	r3, r7, r3
   20866:	781b      	ldrb	r3, [r3, #0]
   20868:	b25b      	sxtb	r3, r3
   2086a:	2b00      	cmp	r3, #0
   2086c:	da10      	bge.n	20890 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   2086e:	231f      	movs	r3, #31
   20870:	18fb      	adds	r3, r7, r3
   20872:	221f      	movs	r2, #31
   20874:	18ba      	adds	r2, r7, r2
   20876:	7812      	ldrb	r2, [r2, #0]
   20878:	3a01      	subs	r2, #1
   2087a:	701a      	strb	r2, [r3, #0]
   2087c:	231f      	movs	r3, #31
   2087e:	18fb      	adds	r3, r7, r3
   20880:	781b      	ldrb	r3, [r3, #0]
   20882:	2b00      	cmp	r3, #0
   20884:	d1e4      	bne.n	20850 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   20886:	4b3d      	ldr	r3, [pc, #244]	; (2097c <sd_mmc_spi_adtc_start+0x1f0>)
   20888:	2202      	movs	r2, #2
   2088a:	701a      	strb	r2, [r3, #0]
			return false;
   2088c:	2300      	movs	r3, #0
   2088e:	e070      	b.n	20972 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   20890:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   20892:	2313      	movs	r3, #19
   20894:	18fb      	adds	r3, r7, r3
   20896:	781b      	ldrb	r3, [r3, #0]
   20898:	001a      	movs	r2, r3
   2089a:	4b3d      	ldr	r3, [pc, #244]	; (20990 <sd_mmc_spi_adtc_start+0x204>)
   2089c:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   2089e:	2313      	movs	r3, #19
   208a0:	18fb      	adds	r3, r7, r3
   208a2:	781b      	ldrb	r3, [r3, #0]
   208a4:	001a      	movs	r2, r3
   208a6:	2308      	movs	r3, #8
   208a8:	4013      	ands	r3, r2
   208aa:	d004      	beq.n	208b6 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   208ac:	4b33      	ldr	r3, [pc, #204]	; (2097c <sd_mmc_spi_adtc_start+0x1f0>)
   208ae:	2206      	movs	r2, #6
   208b0:	701a      	strb	r2, [r3, #0]
		return false;
   208b2:	2300      	movs	r3, #0
   208b4:	e05d      	b.n	20972 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   208b6:	2313      	movs	r3, #19
   208b8:	18fb      	adds	r3, r7, r3
   208ba:	781b      	ldrb	r3, [r3, #0]
   208bc:	001a      	movs	r2, r3
   208be:	2304      	movs	r3, #4
   208c0:	4013      	ands	r3, r2
   208c2:	d004      	beq.n	208ce <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   208c4:	4b2d      	ldr	r3, [pc, #180]	; (2097c <sd_mmc_spi_adtc_start+0x1f0>)
   208c6:	2209      	movs	r2, #9
   208c8:	701a      	strb	r2, [r3, #0]
		return false;
   208ca:	2300      	movs	r3, #0
   208cc:	e051      	b.n	20972 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   208ce:	2313      	movs	r3, #19
   208d0:	18fb      	adds	r3, r7, r3
   208d2:	781b      	ldrb	r3, [r3, #0]
   208d4:	001a      	movs	r2, r3
   208d6:	2301      	movs	r3, #1
   208d8:	439a      	bics	r2, r3
   208da:	1e13      	subs	r3, r2, #0
   208dc:	d004      	beq.n	208e8 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   208de:	4b27      	ldr	r3, [pc, #156]	; (2097c <sd_mmc_spi_adtc_start+0x1f0>)
   208e0:	2201      	movs	r2, #1
   208e2:	701a      	strb	r2, [r3, #0]
		return false;
   208e4:	2300      	movs	r3, #0
   208e6:	e044      	b.n	20972 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   208e8:	68fa      	ldr	r2, [r7, #12]
   208ea:	2380      	movs	r3, #128	; 0x80
   208ec:	019b      	lsls	r3, r3, #6
   208ee:	4013      	ands	r3, r2
   208f0:	d00d      	beq.n	2090e <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   208f2:	4b28      	ldr	r3, [pc, #160]	; (20994 <sd_mmc_spi_adtc_start+0x208>)
   208f4:	4798      	blx	r3
   208f6:	0003      	movs	r3, r0
   208f8:	001a      	movs	r2, r3
   208fa:	2301      	movs	r3, #1
   208fc:	4053      	eors	r3, r2
   208fe:	b2db      	uxtb	r3, r3
   20900:	2b00      	cmp	r3, #0
   20902:	d004      	beq.n	2090e <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   20904:	4b1d      	ldr	r3, [pc, #116]	; (2097c <sd_mmc_spi_adtc_start+0x1f0>)
   20906:	2203      	movs	r2, #3
   20908:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   2090a:	2300      	movs	r3, #0
   2090c:	e031      	b.n	20972 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   2090e:	68fa      	ldr	r2, [r7, #12]
   20910:	2380      	movs	r3, #128	; 0x80
   20912:	009b      	lsls	r3, r3, #2
   20914:	4013      	ands	r3, r2
   20916:	d00e      	beq.n	20936 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   20918:	4b1d      	ldr	r3, [pc, #116]	; (20990 <sd_mmc_spi_adtc_start+0x204>)
   2091a:	2200      	movs	r2, #0
   2091c:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   2091e:	231c      	movs	r3, #28
   20920:	18fb      	adds	r3, r7, r3
   20922:	881b      	ldrh	r3, [r3, #0]
   20924:	491a      	ldr	r1, [pc, #104]	; (20990 <sd_mmc_spi_adtc_start+0x204>)
   20926:	4817      	ldr	r0, [pc, #92]	; (20984 <sd_mmc_spi_adtc_start+0x1f8>)
   20928:	2201      	movs	r2, #1
   2092a:	4c18      	ldr	r4, [pc, #96]	; (2098c <sd_mmc_spi_adtc_start+0x200>)
   2092c:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   2092e:	4b18      	ldr	r3, [pc, #96]	; (20990 <sd_mmc_spi_adtc_start+0x204>)
   20930:	681a      	ldr	r2, [r3, #0]
   20932:	4b17      	ldr	r3, [pc, #92]	; (20990 <sd_mmc_spi_adtc_start+0x204>)
   20934:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   20936:	68fa      	ldr	r2, [r7, #12]
   20938:	2380      	movs	r3, #128	; 0x80
   2093a:	00db      	lsls	r3, r3, #3
   2093c:	4013      	ands	r3, r2
   2093e:	d00c      	beq.n	2095a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   20940:	231c      	movs	r3, #28
   20942:	18fb      	adds	r3, r7, r3
   20944:	881b      	ldrh	r3, [r3, #0]
   20946:	4912      	ldr	r1, [pc, #72]	; (20990 <sd_mmc_spi_adtc_start+0x204>)
   20948:	480e      	ldr	r0, [pc, #56]	; (20984 <sd_mmc_spi_adtc_start+0x1f8>)
   2094a:	2204      	movs	r2, #4
   2094c:	4c0f      	ldr	r4, [pc, #60]	; (2098c <sd_mmc_spi_adtc_start+0x200>)
   2094e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   20950:	4b0f      	ldr	r3, [pc, #60]	; (20990 <sd_mmc_spi_adtc_start+0x204>)
   20952:	681b      	ldr	r3, [r3, #0]
   20954:	ba1a      	rev	r2, r3
   20956:	4b0e      	ldr	r3, [pc, #56]	; (20990 <sd_mmc_spi_adtc_start+0x204>)
   20958:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   2095a:	4b0f      	ldr	r3, [pc, #60]	; (20998 <sd_mmc_spi_adtc_start+0x20c>)
   2095c:	1dba      	adds	r2, r7, #6
   2095e:	8812      	ldrh	r2, [r2, #0]
   20960:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   20962:	4b0e      	ldr	r3, [pc, #56]	; (2099c <sd_mmc_spi_adtc_start+0x210>)
   20964:	1d3a      	adds	r2, r7, #4
   20966:	8812      	ldrh	r2, [r2, #0]
   20968:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   2096a:	4b0d      	ldr	r3, [pc, #52]	; (209a0 <sd_mmc_spi_adtc_start+0x214>)
   2096c:	2200      	movs	r2, #0
   2096e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   20970:	2301      	movs	r3, #1
}
   20972:	0018      	movs	r0, r3
   20974:	46bd      	mov	sp, r7
   20976:	b009      	add	sp, #36	; 0x24
   20978:	bd90      	pop	{r4, r7, pc}
   2097a:	46c0      	nop			; (mov r8, r8)
   2097c:	20003ecb 	.word	0x20003ecb
   20980:	0002022d 	.word	0x0002022d
   20984:	20003e88 	.word	0x20003e88
   20988:	00028d51 	.word	0x00028d51
   2098c:	00028b2d 	.word	0x00028b2d
   20990:	20003ecc 	.word	0x20003ecc
   20994:	000202e9 	.word	0x000202e9
   20998:	20003ed4 	.word	0x20003ed4
   2099c:	20003ed6 	.word	0x20003ed6
   209a0:	20003ed0 	.word	0x20003ed0

000209a4 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   209a4:	b580      	push	{r7, lr}
   209a6:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   209a8:	4b02      	ldr	r3, [pc, #8]	; (209b4 <sd_mmc_spi_get_response+0x10>)
   209aa:	681b      	ldr	r3, [r3, #0]
}
   209ac:	0018      	movs	r0, r3
   209ae:	46bd      	mov	sp, r7
   209b0:	bd80      	pop	{r7, pc}
   209b2:	46c0      	nop			; (mov r8, r8)
   209b4:	20003ecc 	.word	0x20003ecc

000209b8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   209b8:	b590      	push	{r4, r7, lr}
   209ba:	b085      	sub	sp, #20
   209bc:	af00      	add	r7, sp, #0
   209be:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   209c0:	230e      	movs	r3, #14
   209c2:	18fb      	adds	r3, r7, r3
   209c4:	22ff      	movs	r2, #255	; 0xff
   209c6:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   209c8:	4b1c      	ldr	r3, [pc, #112]	; (20a3c <sd_mmc_spi_read_word+0x84>)
   209ca:	2200      	movs	r2, #0
   209cc:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   209ce:	4b1c      	ldr	r3, [pc, #112]	; (20a40 <sd_mmc_spi_read_word+0x88>)
   209d0:	681a      	ldr	r2, [r3, #0]
   209d2:	4b1c      	ldr	r3, [pc, #112]	; (20a44 <sd_mmc_spi_read_word+0x8c>)
   209d4:	881b      	ldrh	r3, [r3, #0]
   209d6:	0019      	movs	r1, r3
   209d8:	4b1b      	ldr	r3, [pc, #108]	; (20a48 <sd_mmc_spi_read_word+0x90>)
   209da:	0010      	movs	r0, r2
   209dc:	4798      	blx	r3
   209de:	1e0b      	subs	r3, r1, #0
   209e0:	d10a      	bne.n	209f8 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   209e2:	4b1a      	ldr	r3, [pc, #104]	; (20a4c <sd_mmc_spi_read_word+0x94>)
   209e4:	4798      	blx	r3
   209e6:	0003      	movs	r3, r0
   209e8:	001a      	movs	r2, r3
   209ea:	2301      	movs	r3, #1
   209ec:	4053      	eors	r3, r2
   209ee:	b2db      	uxtb	r3, r3
   209f0:	2b00      	cmp	r3, #0
   209f2:	d001      	beq.n	209f8 <sd_mmc_spi_read_word+0x40>
			return false;
   209f4:	2300      	movs	r3, #0
   209f6:	e01d      	b.n	20a34 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   209f8:	230e      	movs	r3, #14
   209fa:	18fb      	adds	r3, r7, r3
   209fc:	881b      	ldrh	r3, [r3, #0]
   209fe:	1d39      	adds	r1, r7, #4
   20a00:	4813      	ldr	r0, [pc, #76]	; (20a50 <sd_mmc_spi_read_word+0x98>)
   20a02:	2204      	movs	r2, #4
   20a04:	4c13      	ldr	r4, [pc, #76]	; (20a54 <sd_mmc_spi_read_word+0x9c>)
   20a06:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   20a08:	687b      	ldr	r3, [r7, #4]
   20a0a:	687a      	ldr	r2, [r7, #4]
   20a0c:	6812      	ldr	r2, [r2, #0]
   20a0e:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   20a10:	4b0b      	ldr	r3, [pc, #44]	; (20a40 <sd_mmc_spi_read_word+0x88>)
   20a12:	681b      	ldr	r3, [r3, #0]
   20a14:	1d1a      	adds	r2, r3, #4
   20a16:	4b0a      	ldr	r3, [pc, #40]	; (20a40 <sd_mmc_spi_read_word+0x88>)
   20a18:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20a1a:	4b09      	ldr	r3, [pc, #36]	; (20a40 <sd_mmc_spi_read_word+0x88>)
   20a1c:	681a      	ldr	r2, [r3, #0]
   20a1e:	4b09      	ldr	r3, [pc, #36]	; (20a44 <sd_mmc_spi_read_word+0x8c>)
   20a20:	881b      	ldrh	r3, [r3, #0]
   20a22:	0019      	movs	r1, r3
   20a24:	4b08      	ldr	r3, [pc, #32]	; (20a48 <sd_mmc_spi_read_word+0x90>)
   20a26:	0010      	movs	r0, r2
   20a28:	4798      	blx	r3
   20a2a:	1e0b      	subs	r3, r1, #0
   20a2c:	d101      	bne.n	20a32 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   20a2e:	4b0a      	ldr	r3, [pc, #40]	; (20a58 <sd_mmc_spi_read_word+0xa0>)
   20a30:	4798      	blx	r3
	}
	return true;
   20a32:	2301      	movs	r3, #1
}
   20a34:	0018      	movs	r0, r3
   20a36:	46bd      	mov	sp, r7
   20a38:	b005      	add	sp, #20
   20a3a:	bd90      	pop	{r4, r7, pc}
   20a3c:	20003ecb 	.word	0x20003ecb
   20a40:	20003ed0 	.word	0x20003ed0
   20a44:	20003ed4 	.word	0x20003ed4
   20a48:	00033675 	.word	0x00033675
   20a4c:	00020355 	.word	0x00020355
   20a50:	20003e88 	.word	0x20003e88
   20a54:	00028b2d 	.word	0x00028b2d
   20a58:	000203d9 	.word	0x000203d9

00020a5c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   20a5c:	b590      	push	{r4, r7, lr}
   20a5e:	b085      	sub	sp, #20
   20a60:	af00      	add	r7, sp, #0
   20a62:	6078      	str	r0, [r7, #4]
   20a64:	000a      	movs	r2, r1
   20a66:	1cbb      	adds	r3, r7, #2
   20a68:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   20a6a:	230a      	movs	r3, #10
   20a6c:	18fb      	adds	r3, r7, r3
   20a6e:	22ff      	movs	r2, #255	; 0xff
   20a70:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20a72:	4b1c      	ldr	r3, [pc, #112]	; (20ae4 <sd_mmc_spi_start_read_blocks+0x88>)
   20a74:	2200      	movs	r2, #0
   20a76:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20a78:	2300      	movs	r3, #0
   20a7a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20a7c:	e025      	b.n	20aca <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   20a7e:	4b1a      	ldr	r3, [pc, #104]	; (20ae8 <sd_mmc_spi_start_read_blocks+0x8c>)
   20a80:	4798      	blx	r3
   20a82:	0003      	movs	r3, r0
   20a84:	001a      	movs	r2, r3
   20a86:	2301      	movs	r3, #1
   20a88:	4053      	eors	r3, r2
   20a8a:	b2db      	uxtb	r3, r3
   20a8c:	2b00      	cmp	r3, #0
   20a8e:	d001      	beq.n	20a94 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   20a90:	2300      	movs	r3, #0
   20a92:	e022      	b.n	20ada <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   20a94:	687a      	ldr	r2, [r7, #4]
   20a96:	68fb      	ldr	r3, [r7, #12]
   20a98:	18d1      	adds	r1, r2, r3
   20a9a:	4b14      	ldr	r3, [pc, #80]	; (20aec <sd_mmc_spi_start_read_blocks+0x90>)
   20a9c:	881a      	ldrh	r2, [r3, #0]
   20a9e:	230a      	movs	r3, #10
   20aa0:	18fb      	adds	r3, r7, r3
   20aa2:	881b      	ldrh	r3, [r3, #0]
   20aa4:	4812      	ldr	r0, [pc, #72]	; (20af0 <sd_mmc_spi_start_read_blocks+0x94>)
   20aa6:	4c13      	ldr	r4, [pc, #76]	; (20af4 <sd_mmc_spi_start_read_blocks+0x98>)
   20aa8:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   20aaa:	4b10      	ldr	r3, [pc, #64]	; (20aec <sd_mmc_spi_start_read_blocks+0x90>)
   20aac:	881b      	ldrh	r3, [r3, #0]
   20aae:	001a      	movs	r2, r3
   20ab0:	68fb      	ldr	r3, [r7, #12]
   20ab2:	189b      	adds	r3, r3, r2
   20ab4:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20ab6:	4b0d      	ldr	r3, [pc, #52]	; (20aec <sd_mmc_spi_start_read_blocks+0x90>)
   20ab8:	881b      	ldrh	r3, [r3, #0]
   20aba:	001a      	movs	r2, r3
   20abc:	4b0e      	ldr	r3, [pc, #56]	; (20af8 <sd_mmc_spi_start_read_blocks+0x9c>)
   20abe:	681b      	ldr	r3, [r3, #0]
   20ac0:	18d2      	adds	r2, r2, r3
   20ac2:	4b0d      	ldr	r3, [pc, #52]	; (20af8 <sd_mmc_spi_start_read_blocks+0x9c>)
   20ac4:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   20ac6:	4b0d      	ldr	r3, [pc, #52]	; (20afc <sd_mmc_spi_start_read_blocks+0xa0>)
   20ac8:	4798      	blx	r3
	while (nb_block--) {
   20aca:	1cbb      	adds	r3, r7, #2
   20acc:	881b      	ldrh	r3, [r3, #0]
   20ace:	1cba      	adds	r2, r7, #2
   20ad0:	1e59      	subs	r1, r3, #1
   20ad2:	8011      	strh	r1, [r2, #0]
   20ad4:	2b00      	cmp	r3, #0
   20ad6:	d1d2      	bne.n	20a7e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   20ad8:	2301      	movs	r3, #1
}
   20ada:	0018      	movs	r0, r3
   20adc:	46bd      	mov	sp, r7
   20ade:	b005      	add	sp, #20
   20ae0:	bd90      	pop	{r4, r7, pc}
   20ae2:	46c0      	nop			; (mov r8, r8)
   20ae4:	20003ecb 	.word	0x20003ecb
   20ae8:	00020355 	.word	0x00020355
   20aec:	20003ed4 	.word	0x20003ed4
   20af0:	20003e88 	.word	0x20003e88
   20af4:	00028b2d 	.word	0x00028b2d
   20af8:	20003ed0 	.word	0x20003ed0
   20afc:	000203d9 	.word	0x000203d9

00020b00 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   20b00:	b580      	push	{r7, lr}
   20b02:	af00      	add	r7, sp, #0
	return true;
   20b04:	2301      	movs	r3, #1
}
   20b06:	0018      	movs	r0, r3
   20b08:	46bd      	mov	sp, r7
   20b0a:	bd80      	pop	{r7, pc}

00020b0c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   20b0c:	b580      	push	{r7, lr}
   20b0e:	b084      	sub	sp, #16
   20b10:	af00      	add	r7, sp, #0
   20b12:	6078      	str	r0, [r7, #4]
   20b14:	000a      	movs	r2, r1
   20b16:	1cbb      	adds	r3, r7, #2
   20b18:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20b1a:	4b24      	ldr	r3, [pc, #144]	; (20bac <sd_mmc_spi_start_write_blocks+0xa0>)
   20b1c:	2200      	movs	r2, #0
   20b1e:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20b20:	2300      	movs	r3, #0
   20b22:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20b24:	e035      	b.n	20b92 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20b26:	4b22      	ldr	r3, [pc, #136]	; (20bb0 <sd_mmc_spi_start_write_blocks+0xa4>)
   20b28:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   20b2a:	687a      	ldr	r2, [r7, #4]
   20b2c:	68fb      	ldr	r3, [r7, #12]
   20b2e:	18d1      	adds	r1, r2, r3
   20b30:	4b20      	ldr	r3, [pc, #128]	; (20bb4 <sd_mmc_spi_start_write_blocks+0xa8>)
   20b32:	881a      	ldrh	r2, [r3, #0]
   20b34:	4b20      	ldr	r3, [pc, #128]	; (20bb8 <sd_mmc_spi_start_write_blocks+0xac>)
   20b36:	0018      	movs	r0, r3
   20b38:	4b20      	ldr	r3, [pc, #128]	; (20bbc <sd_mmc_spi_start_write_blocks+0xb0>)
   20b3a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   20b3c:	4b1d      	ldr	r3, [pc, #116]	; (20bb4 <sd_mmc_spi_start_write_blocks+0xa8>)
   20b3e:	881b      	ldrh	r3, [r3, #0]
   20b40:	001a      	movs	r2, r3
   20b42:	68fb      	ldr	r3, [r7, #12]
   20b44:	189b      	adds	r3, r3, r2
   20b46:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20b48:	4b1a      	ldr	r3, [pc, #104]	; (20bb4 <sd_mmc_spi_start_write_blocks+0xa8>)
   20b4a:	881b      	ldrh	r3, [r3, #0]
   20b4c:	001a      	movs	r2, r3
   20b4e:	4b1c      	ldr	r3, [pc, #112]	; (20bc0 <sd_mmc_spi_start_write_blocks+0xb4>)
   20b50:	681b      	ldr	r3, [r3, #0]
   20b52:	18d2      	adds	r2, r2, r3
   20b54:	4b1a      	ldr	r3, [pc, #104]	; (20bc0 <sd_mmc_spi_start_write_blocks+0xb4>)
   20b56:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   20b58:	4b1a      	ldr	r3, [pc, #104]	; (20bc4 <sd_mmc_spi_start_write_blocks+0xb8>)
   20b5a:	4798      	blx	r3
   20b5c:	0003      	movs	r3, r0
   20b5e:	001a      	movs	r2, r3
   20b60:	2301      	movs	r3, #1
   20b62:	4053      	eors	r3, r2
   20b64:	b2db      	uxtb	r3, r3
   20b66:	2b00      	cmp	r3, #0
   20b68:	d001      	beq.n	20b6e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   20b6a:	2300      	movs	r3, #0
   20b6c:	e019      	b.n	20ba2 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   20b6e:	1cbb      	adds	r3, r7, #2
   20b70:	881b      	ldrh	r3, [r3, #0]
   20b72:	2b00      	cmp	r3, #0
   20b74:	d00d      	beq.n	20b92 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   20b76:	4b14      	ldr	r3, [pc, #80]	; (20bc8 <sd_mmc_spi_start_write_blocks+0xbc>)
   20b78:	4798      	blx	r3
   20b7a:	0003      	movs	r3, r0
   20b7c:	001a      	movs	r2, r3
   20b7e:	2301      	movs	r3, #1
   20b80:	4053      	eors	r3, r2
   20b82:	b2db      	uxtb	r3, r3
   20b84:	2b00      	cmp	r3, #0
   20b86:	d004      	beq.n	20b92 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20b88:	4b08      	ldr	r3, [pc, #32]	; (20bac <sd_mmc_spi_start_write_blocks+0xa0>)
   20b8a:	2205      	movs	r2, #5
   20b8c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   20b8e:	2300      	movs	r3, #0
   20b90:	e007      	b.n	20ba2 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   20b92:	1cbb      	adds	r3, r7, #2
   20b94:	881b      	ldrh	r3, [r3, #0]
   20b96:	1cba      	adds	r2, r7, #2
   20b98:	1e59      	subs	r1, r3, #1
   20b9a:	8011      	strh	r1, [r2, #0]
   20b9c:	2b00      	cmp	r3, #0
   20b9e:	d1c2      	bne.n	20b26 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   20ba0:	2301      	movs	r3, #1
}
   20ba2:	0018      	movs	r0, r3
   20ba4:	46bd      	mov	sp, r7
   20ba6:	b004      	add	sp, #16
   20ba8:	bd80      	pop	{r7, pc}
   20baa:	46c0      	nop			; (mov r8, r8)
   20bac:	20003ecb 	.word	0x20003ecb
   20bb0:	00020405 	.word	0x00020405
   20bb4:	20003ed4 	.word	0x20003ed4
   20bb8:	20003e88 	.word	0x20003e88
   20bbc:	00028d51 	.word	0x00028d51
   20bc0:	20003ed0 	.word	0x20003ed0
   20bc4:	00020455 	.word	0x00020455
   20bc8:	000202e9 	.word	0x000202e9

00020bcc <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   20bcc:	b580      	push	{r7, lr}
   20bce:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   20bd0:	4b09      	ldr	r3, [pc, #36]	; (20bf8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   20bd2:	4798      	blx	r3
   20bd4:	0003      	movs	r3, r0
   20bd6:	001a      	movs	r2, r3
   20bd8:	2301      	movs	r3, #1
   20bda:	4053      	eors	r3, r2
   20bdc:	b2db      	uxtb	r3, r3
   20bde:	2b00      	cmp	r3, #0
   20be0:	d004      	beq.n	20bec <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20be2:	4b06      	ldr	r3, [pc, #24]	; (20bfc <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20be4:	2205      	movs	r2, #5
   20be6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20be8:	2300      	movs	r3, #0
   20bea:	e002      	b.n	20bf2 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   20bec:	4b04      	ldr	r3, [pc, #16]	; (20c00 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   20bee:	4798      	blx	r3
   20bf0:	0003      	movs	r3, r0
}
   20bf2:	0018      	movs	r0, r3
   20bf4:	46bd      	mov	sp, r7
   20bf6:	bd80      	pop	{r7, pc}
   20bf8:	000202e9 	.word	0x000202e9
   20bfc:	20003ecb 	.word	0x20003ecb
   20c00:	000204e9 	.word	0x000204e9

00020c04 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20c04:	b580      	push	{r7, lr}
   20c06:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20c08:	2000      	movs	r0, #0
   20c0a:	4b0f      	ldr	r3, [pc, #60]	; (20c48 <delay_init+0x44>)
   20c0c:	4798      	blx	r3
   20c0e:	0002      	movs	r2, r0
   20c10:	4b0e      	ldr	r3, [pc, #56]	; (20c4c <delay_init+0x48>)
   20c12:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20c14:	4b0d      	ldr	r3, [pc, #52]	; (20c4c <delay_init+0x48>)
   20c16:	6818      	ldr	r0, [r3, #0]
   20c18:	4b0d      	ldr	r3, [pc, #52]	; (20c50 <delay_init+0x4c>)
   20c1a:	22fa      	movs	r2, #250	; 0xfa
   20c1c:	0091      	lsls	r1, r2, #2
   20c1e:	4798      	blx	r3
   20c20:	0003      	movs	r3, r0
   20c22:	001a      	movs	r2, r3
   20c24:	4b09      	ldr	r3, [pc, #36]	; (20c4c <delay_init+0x48>)
   20c26:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   20c28:	4b08      	ldr	r3, [pc, #32]	; (20c4c <delay_init+0x48>)
   20c2a:	6818      	ldr	r0, [r3, #0]
   20c2c:	4b08      	ldr	r3, [pc, #32]	; (20c50 <delay_init+0x4c>)
   20c2e:	22fa      	movs	r2, #250	; 0xfa
   20c30:	0091      	lsls	r1, r2, #2
   20c32:	4798      	blx	r3
   20c34:	0003      	movs	r3, r0
   20c36:	001a      	movs	r2, r3
   20c38:	4b06      	ldr	r3, [pc, #24]	; (20c54 <delay_init+0x50>)
   20c3a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   20c3c:	4b06      	ldr	r3, [pc, #24]	; (20c58 <delay_init+0x54>)
   20c3e:	2205      	movs	r2, #5
   20c40:	601a      	str	r2, [r3, #0]
}
   20c42:	46c0      	nop			; (mov r8, r8)
   20c44:	46bd      	mov	sp, r7
   20c46:	bd80      	pop	{r7, pc}
   20c48:	0002a8d5 	.word	0x0002a8d5
   20c4c:	20000110 	.word	0x20000110
   20c50:	00033569 	.word	0x00033569
   20c54:	20000114 	.word	0x20000114
   20c58:	e000e010 	.word	0xe000e010

00020c5c <system_pinmux_get_group_from_gpio_pin>:
{
   20c5c:	b580      	push	{r7, lr}
   20c5e:	b084      	sub	sp, #16
   20c60:	af00      	add	r7, sp, #0
   20c62:	0002      	movs	r2, r0
   20c64:	1dfb      	adds	r3, r7, #7
   20c66:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20c68:	230f      	movs	r3, #15
   20c6a:	18fb      	adds	r3, r7, r3
   20c6c:	1dfa      	adds	r2, r7, #7
   20c6e:	7812      	ldrb	r2, [r2, #0]
   20c70:	09d2      	lsrs	r2, r2, #7
   20c72:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20c74:	230e      	movs	r3, #14
   20c76:	18fb      	adds	r3, r7, r3
   20c78:	1dfa      	adds	r2, r7, #7
   20c7a:	7812      	ldrb	r2, [r2, #0]
   20c7c:	0952      	lsrs	r2, r2, #5
   20c7e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20c80:	4b0d      	ldr	r3, [pc, #52]	; (20cb8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20c82:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20c84:	230f      	movs	r3, #15
   20c86:	18fb      	adds	r3, r7, r3
   20c88:	781b      	ldrb	r3, [r3, #0]
   20c8a:	2b00      	cmp	r3, #0
   20c8c:	d10f      	bne.n	20cae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20c8e:	230f      	movs	r3, #15
   20c90:	18fb      	adds	r3, r7, r3
   20c92:	781b      	ldrb	r3, [r3, #0]
   20c94:	009b      	lsls	r3, r3, #2
   20c96:	2210      	movs	r2, #16
   20c98:	4694      	mov	ip, r2
   20c9a:	44bc      	add	ip, r7
   20c9c:	4463      	add	r3, ip
   20c9e:	3b08      	subs	r3, #8
   20ca0:	681a      	ldr	r2, [r3, #0]
   20ca2:	230e      	movs	r3, #14
   20ca4:	18fb      	adds	r3, r7, r3
   20ca6:	781b      	ldrb	r3, [r3, #0]
   20ca8:	01db      	lsls	r3, r3, #7
   20caa:	18d3      	adds	r3, r2, r3
   20cac:	e000      	b.n	20cb0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20cae:	2300      	movs	r3, #0
}
   20cb0:	0018      	movs	r0, r3
   20cb2:	46bd      	mov	sp, r7
   20cb4:	b004      	add	sp, #16
   20cb6:	bd80      	pop	{r7, pc}
   20cb8:	41004400 	.word	0x41004400

00020cbc <system_interrupt_enable_global>:
{
   20cbc:	b580      	push	{r7, lr}
   20cbe:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   20cc0:	4b04      	ldr	r3, [pc, #16]	; (20cd4 <system_interrupt_enable_global+0x18>)
   20cc2:	2201      	movs	r2, #1
   20cc4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   20cc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   20cca:	b662      	cpsie	i
}
   20ccc:	46c0      	nop			; (mov r8, r8)
   20cce:	46bd      	mov	sp, r7
   20cd0:	bd80      	pop	{r7, pc}
   20cd2:	46c0      	nop			; (mov r8, r8)
   20cd4:	2000011a 	.word	0x2000011a

00020cd8 <port_get_group_from_gpio_pin>:
{
   20cd8:	b580      	push	{r7, lr}
   20cda:	b082      	sub	sp, #8
   20cdc:	af00      	add	r7, sp, #0
   20cde:	0002      	movs	r2, r0
   20ce0:	1dfb      	adds	r3, r7, #7
   20ce2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20ce4:	1dfb      	adds	r3, r7, #7
   20ce6:	781b      	ldrb	r3, [r3, #0]
   20ce8:	0018      	movs	r0, r3
   20cea:	4b03      	ldr	r3, [pc, #12]	; (20cf8 <port_get_group_from_gpio_pin+0x20>)
   20cec:	4798      	blx	r3
   20cee:	0003      	movs	r3, r0
}
   20cf0:	0018      	movs	r0, r3
   20cf2:	46bd      	mov	sp, r7
   20cf4:	b002      	add	sp, #8
   20cf6:	bd80      	pop	{r7, pc}
   20cf8:	00020c5d 	.word	0x00020c5d

00020cfc <port_get_config_defaults>:
{
   20cfc:	b580      	push	{r7, lr}
   20cfe:	b082      	sub	sp, #8
   20d00:	af00      	add	r7, sp, #0
   20d02:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20d04:	687b      	ldr	r3, [r7, #4]
   20d06:	2200      	movs	r2, #0
   20d08:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20d0a:	687b      	ldr	r3, [r7, #4]
   20d0c:	2201      	movs	r2, #1
   20d0e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20d10:	687b      	ldr	r3, [r7, #4]
   20d12:	2200      	movs	r2, #0
   20d14:	709a      	strb	r2, [r3, #2]
}
   20d16:	46c0      	nop			; (mov r8, r8)
   20d18:	46bd      	mov	sp, r7
   20d1a:	b002      	add	sp, #8
   20d1c:	bd80      	pop	{r7, pc}
	...

00020d20 <port_pin_set_output_level>:
{
   20d20:	b580      	push	{r7, lr}
   20d22:	b084      	sub	sp, #16
   20d24:	af00      	add	r7, sp, #0
   20d26:	0002      	movs	r2, r0
   20d28:	1dfb      	adds	r3, r7, #7
   20d2a:	701a      	strb	r2, [r3, #0]
   20d2c:	1dbb      	adds	r3, r7, #6
   20d2e:	1c0a      	adds	r2, r1, #0
   20d30:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   20d32:	1dfb      	adds	r3, r7, #7
   20d34:	781b      	ldrb	r3, [r3, #0]
   20d36:	0018      	movs	r0, r3
   20d38:	4b0d      	ldr	r3, [pc, #52]	; (20d70 <port_pin_set_output_level+0x50>)
   20d3a:	4798      	blx	r3
   20d3c:	0003      	movs	r3, r0
   20d3e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20d40:	1dfb      	adds	r3, r7, #7
   20d42:	781b      	ldrb	r3, [r3, #0]
   20d44:	221f      	movs	r2, #31
   20d46:	4013      	ands	r3, r2
   20d48:	2201      	movs	r2, #1
   20d4a:	409a      	lsls	r2, r3
   20d4c:	0013      	movs	r3, r2
   20d4e:	60bb      	str	r3, [r7, #8]
	if (level) {
   20d50:	1dbb      	adds	r3, r7, #6
   20d52:	781b      	ldrb	r3, [r3, #0]
   20d54:	2b00      	cmp	r3, #0
   20d56:	d003      	beq.n	20d60 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20d58:	68fb      	ldr	r3, [r7, #12]
   20d5a:	68ba      	ldr	r2, [r7, #8]
   20d5c:	619a      	str	r2, [r3, #24]
}
   20d5e:	e002      	b.n	20d66 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20d60:	68fb      	ldr	r3, [r7, #12]
   20d62:	68ba      	ldr	r2, [r7, #8]
   20d64:	615a      	str	r2, [r3, #20]
}
   20d66:	46c0      	nop			; (mov r8, r8)
   20d68:	46bd      	mov	sp, r7
   20d6a:	b004      	add	sp, #16
   20d6c:	bd80      	pop	{r7, pc}
   20d6e:	46c0      	nop			; (mov r8, r8)
   20d70:	00020cd9 	.word	0x00020cd9

00020d74 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   20d74:	b580      	push	{r7, lr}
   20d76:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   20d78:	4b04      	ldr	r3, [pc, #16]	; (20d8c <chip_isr+0x18>)
   20d7a:	681b      	ldr	r3, [r3, #0]
   20d7c:	2b00      	cmp	r3, #0
   20d7e:	d002      	beq.n	20d86 <chip_isr+0x12>
		gpfIsr();
   20d80:	4b02      	ldr	r3, [pc, #8]	; (20d8c <chip_isr+0x18>)
   20d82:	681b      	ldr	r3, [r3, #0]
   20d84:	4798      	blx	r3
	}
}
   20d86:	46c0      	nop			; (mov r8, r8)
   20d88:	46bd      	mov	sp, r7
   20d8a:	bd80      	pop	{r7, pc}
   20d8c:	20003ed8 	.word	0x20003ed8

00020d90 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   20d90:	b580      	push	{r7, lr}
   20d92:	b082      	sub	sp, #8
   20d94:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   20d96:	1d3b      	adds	r3, r7, #4
   20d98:	0018      	movs	r0, r3
   20d9a:	4b10      	ldr	r3, [pc, #64]	; (20ddc <init_chip_pins+0x4c>)
   20d9c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   20d9e:	1d3b      	adds	r3, r7, #4
   20da0:	2201      	movs	r2, #1
   20da2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   20da4:	1d3b      	adds	r3, r7, #4
   20da6:	0019      	movs	r1, r3
   20da8:	201b      	movs	r0, #27
   20daa:	4b0d      	ldr	r3, [pc, #52]	; (20de0 <init_chip_pins+0x50>)
   20dac:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   20dae:	1d3b      	adds	r3, r7, #4
   20db0:	0019      	movs	r1, r3
   20db2:	201c      	movs	r0, #28
   20db4:	4b0a      	ldr	r3, [pc, #40]	; (20de0 <init_chip_pins+0x50>)
   20db6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   20db8:	1d3b      	adds	r3, r7, #4
   20dba:	0019      	movs	r1, r3
   20dbc:	2028      	movs	r0, #40	; 0x28
   20dbe:	4b08      	ldr	r3, [pc, #32]	; (20de0 <init_chip_pins+0x50>)
   20dc0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20dc2:	2100      	movs	r1, #0
   20dc4:	201c      	movs	r0, #28
   20dc6:	4b07      	ldr	r3, [pc, #28]	; (20de4 <init_chip_pins+0x54>)
   20dc8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20dca:	2100      	movs	r1, #0
   20dcc:	201b      	movs	r0, #27
   20dce:	4b05      	ldr	r3, [pc, #20]	; (20de4 <init_chip_pins+0x54>)
   20dd0:	4798      	blx	r3
}
   20dd2:	46c0      	nop			; (mov r8, r8)
   20dd4:	46bd      	mov	sp, r7
   20dd6:	b002      	add	sp, #8
   20dd8:	bd80      	pop	{r7, pc}
   20dda:	46c0      	nop			; (mov r8, r8)
   20ddc:	00020cfd 	.word	0x00020cfd
   20de0:	0002751d 	.word	0x0002751d
   20de4:	00020d21 	.word	0x00020d21

00020de8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   20de8:	b580      	push	{r7, lr}
   20dea:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   20dec:	4b0b      	ldr	r3, [pc, #44]	; (20e1c <nm_bsp_init+0x34>)
   20dee:	2200      	movs	r2, #0
   20df0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   20df2:	4b0b      	ldr	r3, [pc, #44]	; (20e20 <nm_bsp_init+0x38>)
   20df4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   20df6:	4b0b      	ldr	r3, [pc, #44]	; (20e24 <nm_bsp_init+0x3c>)
   20df8:	681b      	ldr	r3, [r3, #0]
   20dfa:	2201      	movs	r2, #1
   20dfc:	4013      	ands	r3, r2
   20dfe:	d004      	beq.n	20e0a <nm_bsp_init+0x22>
   20e00:	4b08      	ldr	r3, [pc, #32]	; (20e24 <nm_bsp_init+0x3c>)
   20e02:	681b      	ldr	r3, [r3, #0]
   20e04:	2202      	movs	r2, #2
   20e06:	4013      	ands	r3, r2
   20e08:	d101      	bne.n	20e0e <nm_bsp_init+0x26>
	    delay_init();
   20e0a:	4b07      	ldr	r3, [pc, #28]	; (20e28 <nm_bsp_init+0x40>)
   20e0c:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   20e0e:	4b07      	ldr	r3, [pc, #28]	; (20e2c <nm_bsp_init+0x44>)
   20e10:	4798      	blx	r3

	return M2M_SUCCESS;
   20e12:	2300      	movs	r3, #0
}
   20e14:	0018      	movs	r0, r3
   20e16:	46bd      	mov	sp, r7
   20e18:	bd80      	pop	{r7, pc}
   20e1a:	46c0      	nop			; (mov r8, r8)
   20e1c:	20003ed8 	.word	0x20003ed8
   20e20:	00020d91 	.word	0x00020d91
   20e24:	e000e010 	.word	0xe000e010
   20e28:	00020c05 	.word	0x00020c05
   20e2c:	00020cbd 	.word	0x00020cbd

00020e30 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   20e30:	b580      	push	{r7, lr}
   20e32:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20e34:	2100      	movs	r1, #0
   20e36:	201c      	movs	r0, #28
   20e38:	4b0b      	ldr	r3, [pc, #44]	; (20e68 <nm_bsp_reset+0x38>)
   20e3a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20e3c:	2100      	movs	r1, #0
   20e3e:	201b      	movs	r0, #27
   20e40:	4b09      	ldr	r3, [pc, #36]	; (20e68 <nm_bsp_reset+0x38>)
   20e42:	4798      	blx	r3
	nm_bsp_sleep(1);
   20e44:	2001      	movs	r0, #1
   20e46:	4b09      	ldr	r3, [pc, #36]	; (20e6c <nm_bsp_reset+0x3c>)
   20e48:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   20e4a:	2101      	movs	r1, #1
   20e4c:	201c      	movs	r0, #28
   20e4e:	4b06      	ldr	r3, [pc, #24]	; (20e68 <nm_bsp_reset+0x38>)
   20e50:	4798      	blx	r3
	nm_bsp_sleep(10);
   20e52:	200a      	movs	r0, #10
   20e54:	4b05      	ldr	r3, [pc, #20]	; (20e6c <nm_bsp_reset+0x3c>)
   20e56:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   20e58:	2101      	movs	r1, #1
   20e5a:	201b      	movs	r0, #27
   20e5c:	4b02      	ldr	r3, [pc, #8]	; (20e68 <nm_bsp_reset+0x38>)
   20e5e:	4798      	blx	r3
}
   20e60:	46c0      	nop			; (mov r8, r8)
   20e62:	46bd      	mov	sp, r7
   20e64:	bd80      	pop	{r7, pc}
   20e66:	46c0      	nop			; (mov r8, r8)
   20e68:	00020d21 	.word	0x00020d21
   20e6c:	00020e71 	.word	0x00020e71

00020e70 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   20e70:	b580      	push	{r7, lr}
   20e72:	b082      	sub	sp, #8
   20e74:	af00      	add	r7, sp, #0
   20e76:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   20e78:	687b      	ldr	r3, [r7, #4]
   20e7a:	0018      	movs	r0, r3
   20e7c:	4b02      	ldr	r3, [pc, #8]	; (20e88 <nm_bsp_sleep+0x18>)
   20e7e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   20e80:	46c0      	nop			; (mov r8, r8)
   20e82:	46bd      	mov	sp, r7
   20e84:	b002      	add	sp, #8
   20e86:	bd80      	pop	{r7, pc}
   20e88:	0001cc85 	.word	0x0001cc85

00020e8c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   20e8c:	b580      	push	{r7, lr}
   20e8e:	b086      	sub	sp, #24
   20e90:	af00      	add	r7, sp, #0
   20e92:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   20e94:	4b15      	ldr	r3, [pc, #84]	; (20eec <nm_bsp_register_isr+0x60>)
   20e96:	687a      	ldr	r2, [r7, #4]
   20e98:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   20e9a:	230c      	movs	r3, #12
   20e9c:	18fb      	adds	r3, r7, r3
   20e9e:	0018      	movs	r0, r3
   20ea0:	4b13      	ldr	r3, [pc, #76]	; (20ef0 <nm_bsp_register_isr+0x64>)
   20ea2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   20ea4:	230c      	movs	r3, #12
   20ea6:	18fb      	adds	r3, r7, r3
   20ea8:	2229      	movs	r2, #41	; 0x29
   20eaa:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   20eac:	230c      	movs	r3, #12
   20eae:	18fb      	adds	r3, r7, r3
   20eb0:	2200      	movs	r2, #0
   20eb2:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   20eb4:	230c      	movs	r3, #12
   20eb6:	18fb      	adds	r3, r7, r3
   20eb8:	2201      	movs	r2, #1
   20eba:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   20ebc:	230c      	movs	r3, #12
   20ebe:	18fb      	adds	r3, r7, r3
   20ec0:	2202      	movs	r2, #2
   20ec2:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   20ec4:	230c      	movs	r3, #12
   20ec6:	18fb      	adds	r3, r7, r3
   20ec8:	0019      	movs	r1, r3
   20eca:	2009      	movs	r0, #9
   20ecc:	4b09      	ldr	r3, [pc, #36]	; (20ef4 <nm_bsp_register_isr+0x68>)
   20ece:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   20ed0:	4b09      	ldr	r3, [pc, #36]	; (20ef8 <nm_bsp_register_isr+0x6c>)
   20ed2:	2200      	movs	r2, #0
   20ed4:	2109      	movs	r1, #9
   20ed6:	0018      	movs	r0, r3
   20ed8:	4b08      	ldr	r3, [pc, #32]	; (20efc <nm_bsp_register_isr+0x70>)
   20eda:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20edc:	2100      	movs	r1, #0
   20ede:	2009      	movs	r0, #9
   20ee0:	4b07      	ldr	r3, [pc, #28]	; (20f00 <nm_bsp_register_isr+0x74>)
   20ee2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   20ee4:	46c0      	nop			; (mov r8, r8)
   20ee6:	46bd      	mov	sp, r7
   20ee8:	b006      	add	sp, #24
   20eea:	bd80      	pop	{r7, pc}
   20eec:	20003ed8 	.word	0x20003ed8
   20ef0:	000273c5 	.word	0x000273c5
   20ef4:	000273f9 	.word	0x000273f9
   20ef8:	00020d75 	.word	0x00020d75
   20efc:	00026fc5 	.word	0x00026fc5
   20f00:	00027029 	.word	0x00027029

00020f04 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   20f04:	b580      	push	{r7, lr}
   20f06:	b082      	sub	sp, #8
   20f08:	af00      	add	r7, sp, #0
   20f0a:	0002      	movs	r2, r0
   20f0c:	1dfb      	adds	r3, r7, #7
   20f0e:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   20f10:	1dfb      	adds	r3, r7, #7
   20f12:	781b      	ldrb	r3, [r3, #0]
   20f14:	2b00      	cmp	r3, #0
   20f16:	d004      	beq.n	20f22 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20f18:	2100      	movs	r1, #0
   20f1a:	2009      	movs	r0, #9
   20f1c:	4b05      	ldr	r3, [pc, #20]	; (20f34 <nm_bsp_interrupt_ctrl+0x30>)
   20f1e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   20f20:	e003      	b.n	20f2a <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   20f22:	2100      	movs	r1, #0
   20f24:	2009      	movs	r0, #9
   20f26:	4b04      	ldr	r3, [pc, #16]	; (20f38 <nm_bsp_interrupt_ctrl+0x34>)
   20f28:	4798      	blx	r3
}
   20f2a:	46c0      	nop			; (mov r8, r8)
   20f2c:	46bd      	mov	sp, r7
   20f2e:	b002      	add	sp, #8
   20f30:	bd80      	pop	{r7, pc}
   20f32:	46c0      	nop			; (mov r8, r8)
   20f34:	00027029 	.word	0x00027029
   20f38:	00027071 	.word	0x00027071

00020f3c <system_pinmux_get_group_from_gpio_pin>:
{
   20f3c:	b580      	push	{r7, lr}
   20f3e:	b084      	sub	sp, #16
   20f40:	af00      	add	r7, sp, #0
   20f42:	0002      	movs	r2, r0
   20f44:	1dfb      	adds	r3, r7, #7
   20f46:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20f48:	230f      	movs	r3, #15
   20f4a:	18fb      	adds	r3, r7, r3
   20f4c:	1dfa      	adds	r2, r7, #7
   20f4e:	7812      	ldrb	r2, [r2, #0]
   20f50:	09d2      	lsrs	r2, r2, #7
   20f52:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20f54:	230e      	movs	r3, #14
   20f56:	18fb      	adds	r3, r7, r3
   20f58:	1dfa      	adds	r2, r7, #7
   20f5a:	7812      	ldrb	r2, [r2, #0]
   20f5c:	0952      	lsrs	r2, r2, #5
   20f5e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20f60:	4b0d      	ldr	r3, [pc, #52]	; (20f98 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20f62:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20f64:	230f      	movs	r3, #15
   20f66:	18fb      	adds	r3, r7, r3
   20f68:	781b      	ldrb	r3, [r3, #0]
   20f6a:	2b00      	cmp	r3, #0
   20f6c:	d10f      	bne.n	20f8e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20f6e:	230f      	movs	r3, #15
   20f70:	18fb      	adds	r3, r7, r3
   20f72:	781b      	ldrb	r3, [r3, #0]
   20f74:	009b      	lsls	r3, r3, #2
   20f76:	2210      	movs	r2, #16
   20f78:	4694      	mov	ip, r2
   20f7a:	44bc      	add	ip, r7
   20f7c:	4463      	add	r3, ip
   20f7e:	3b08      	subs	r3, #8
   20f80:	681a      	ldr	r2, [r3, #0]
   20f82:	230e      	movs	r3, #14
   20f84:	18fb      	adds	r3, r7, r3
   20f86:	781b      	ldrb	r3, [r3, #0]
   20f88:	01db      	lsls	r3, r3, #7
   20f8a:	18d3      	adds	r3, r2, r3
   20f8c:	e000      	b.n	20f90 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20f8e:	2300      	movs	r3, #0
}
   20f90:	0018      	movs	r0, r3
   20f92:	46bd      	mov	sp, r7
   20f94:	b004      	add	sp, #16
   20f96:	bd80      	pop	{r7, pc}
   20f98:	41004400 	.word	0x41004400

00020f9c <system_interrupt_enable>:
{
   20f9c:	b580      	push	{r7, lr}
   20f9e:	b082      	sub	sp, #8
   20fa0:	af00      	add	r7, sp, #0
   20fa2:	0002      	movs	r2, r0
   20fa4:	1dfb      	adds	r3, r7, #7
   20fa6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20fa8:	4b06      	ldr	r3, [pc, #24]	; (20fc4 <system_interrupt_enable+0x28>)
   20faa:	1dfa      	adds	r2, r7, #7
   20fac:	7812      	ldrb	r2, [r2, #0]
   20fae:	0011      	movs	r1, r2
   20fb0:	221f      	movs	r2, #31
   20fb2:	400a      	ands	r2, r1
   20fb4:	2101      	movs	r1, #1
   20fb6:	4091      	lsls	r1, r2
   20fb8:	000a      	movs	r2, r1
   20fba:	601a      	str	r2, [r3, #0]
}
   20fbc:	46c0      	nop			; (mov r8, r8)
   20fbe:	46bd      	mov	sp, r7
   20fc0:	b002      	add	sp, #8
   20fc2:	bd80      	pop	{r7, pc}
   20fc4:	e000e100 	.word	0xe000e100

00020fc8 <system_interrupt_disable>:
{
   20fc8:	b580      	push	{r7, lr}
   20fca:	b082      	sub	sp, #8
   20fcc:	af00      	add	r7, sp, #0
   20fce:	0002      	movs	r2, r0
   20fd0:	1dfb      	adds	r3, r7, #7
   20fd2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20fd4:	4a07      	ldr	r2, [pc, #28]	; (20ff4 <system_interrupt_disable+0x2c>)
   20fd6:	1dfb      	adds	r3, r7, #7
   20fd8:	781b      	ldrb	r3, [r3, #0]
   20fda:	0019      	movs	r1, r3
   20fdc:	231f      	movs	r3, #31
   20fde:	400b      	ands	r3, r1
   20fe0:	2101      	movs	r1, #1
   20fe2:	4099      	lsls	r1, r3
   20fe4:	000b      	movs	r3, r1
   20fe6:	0019      	movs	r1, r3
   20fe8:	2380      	movs	r3, #128	; 0x80
   20fea:	50d1      	str	r1, [r2, r3]
}
   20fec:	46c0      	nop			; (mov r8, r8)
   20fee:	46bd      	mov	sp, r7
   20ff0:	b002      	add	sp, #8
   20ff2:	bd80      	pop	{r7, pc}
   20ff4:	e000e100 	.word	0xe000e100

00020ff8 <port_get_group_from_gpio_pin>:
{
   20ff8:	b580      	push	{r7, lr}
   20ffa:	b082      	sub	sp, #8
   20ffc:	af00      	add	r7, sp, #0
   20ffe:	0002      	movs	r2, r0
   21000:	1dfb      	adds	r3, r7, #7
   21002:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   21004:	1dfb      	adds	r3, r7, #7
   21006:	781b      	ldrb	r3, [r3, #0]
   21008:	0018      	movs	r0, r3
   2100a:	4b03      	ldr	r3, [pc, #12]	; (21018 <port_get_group_from_gpio_pin+0x20>)
   2100c:	4798      	blx	r3
   2100e:	0003      	movs	r3, r0
}
   21010:	0018      	movs	r0, r3
   21012:	46bd      	mov	sp, r7
   21014:	b002      	add	sp, #8
   21016:	bd80      	pop	{r7, pc}
   21018:	00020f3d 	.word	0x00020f3d

0002101c <port_get_config_defaults>:
{
   2101c:	b580      	push	{r7, lr}
   2101e:	b082      	sub	sp, #8
   21020:	af00      	add	r7, sp, #0
   21022:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   21024:	687b      	ldr	r3, [r7, #4]
   21026:	2200      	movs	r2, #0
   21028:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2102a:	687b      	ldr	r3, [r7, #4]
   2102c:	2201      	movs	r2, #1
   2102e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   21030:	687b      	ldr	r3, [r7, #4]
   21032:	2200      	movs	r2, #0
   21034:	709a      	strb	r2, [r3, #2]
}
   21036:	46c0      	nop			; (mov r8, r8)
   21038:	46bd      	mov	sp, r7
   2103a:	b002      	add	sp, #8
   2103c:	bd80      	pop	{r7, pc}
	...

00021040 <port_pin_set_output_level>:
{
   21040:	b580      	push	{r7, lr}
   21042:	b084      	sub	sp, #16
   21044:	af00      	add	r7, sp, #0
   21046:	0002      	movs	r2, r0
   21048:	1dfb      	adds	r3, r7, #7
   2104a:	701a      	strb	r2, [r3, #0]
   2104c:	1dbb      	adds	r3, r7, #6
   2104e:	1c0a      	adds	r2, r1, #0
   21050:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   21052:	1dfb      	adds	r3, r7, #7
   21054:	781b      	ldrb	r3, [r3, #0]
   21056:	0018      	movs	r0, r3
   21058:	4b0d      	ldr	r3, [pc, #52]	; (21090 <port_pin_set_output_level+0x50>)
   2105a:	4798      	blx	r3
   2105c:	0003      	movs	r3, r0
   2105e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   21060:	1dfb      	adds	r3, r7, #7
   21062:	781b      	ldrb	r3, [r3, #0]
   21064:	221f      	movs	r2, #31
   21066:	4013      	ands	r3, r2
   21068:	2201      	movs	r2, #1
   2106a:	409a      	lsls	r2, r3
   2106c:	0013      	movs	r3, r2
   2106e:	60bb      	str	r3, [r7, #8]
	if (level) {
   21070:	1dbb      	adds	r3, r7, #6
   21072:	781b      	ldrb	r3, [r3, #0]
   21074:	2b00      	cmp	r3, #0
   21076:	d003      	beq.n	21080 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   21078:	68fb      	ldr	r3, [r7, #12]
   2107a:	68ba      	ldr	r2, [r7, #8]
   2107c:	619a      	str	r2, [r3, #24]
}
   2107e:	e002      	b.n	21086 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   21080:	68fb      	ldr	r3, [r7, #12]
   21082:	68ba      	ldr	r2, [r7, #8]
   21084:	615a      	str	r2, [r3, #20]
}
   21086:	46c0      	nop			; (mov r8, r8)
   21088:	46bd      	mov	sp, r7
   2108a:	b004      	add	sp, #16
   2108c:	bd80      	pop	{r7, pc}
   2108e:	46c0      	nop			; (mov r8, r8)
   21090:	00020ff9 	.word	0x00020ff9

00021094 <spi_is_syncing>:
{
   21094:	b580      	push	{r7, lr}
   21096:	b084      	sub	sp, #16
   21098:	af00      	add	r7, sp, #0
   2109a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2109c:	687b      	ldr	r3, [r7, #4]
   2109e:	681b      	ldr	r3, [r3, #0]
   210a0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   210a2:	68fb      	ldr	r3, [r7, #12]
   210a4:	69db      	ldr	r3, [r3, #28]
   210a6:	1e5a      	subs	r2, r3, #1
   210a8:	4193      	sbcs	r3, r2
   210aa:	b2db      	uxtb	r3, r3
}
   210ac:	0018      	movs	r0, r3
   210ae:	46bd      	mov	sp, r7
   210b0:	b004      	add	sp, #16
   210b2:	bd80      	pop	{r7, pc}

000210b4 <spi_get_config_defaults>:
{
   210b4:	b580      	push	{r7, lr}
   210b6:	b082      	sub	sp, #8
   210b8:	af00      	add	r7, sp, #0
   210ba:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   210bc:	687b      	ldr	r3, [r7, #4]
   210be:	2201      	movs	r2, #1
   210c0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   210c2:	687b      	ldr	r3, [r7, #4]
   210c4:	2200      	movs	r2, #0
   210c6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   210c8:	687b      	ldr	r3, [r7, #4]
   210ca:	2200      	movs	r2, #0
   210cc:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   210ce:	687b      	ldr	r3, [r7, #4]
   210d0:	22c0      	movs	r2, #192	; 0xc0
   210d2:	0392      	lsls	r2, r2, #14
   210d4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   210d6:	687b      	ldr	r3, [r7, #4]
   210d8:	2200      	movs	r2, #0
   210da:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   210dc:	687b      	ldr	r3, [r7, #4]
   210de:	2200      	movs	r2, #0
   210e0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   210e2:	687b      	ldr	r3, [r7, #4]
   210e4:	2201      	movs	r2, #1
   210e6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   210e8:	687b      	ldr	r3, [r7, #4]
   210ea:	2201      	movs	r2, #1
   210ec:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   210ee:	687b      	ldr	r3, [r7, #4]
   210f0:	2200      	movs	r2, #0
   210f2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   210f4:	687b      	ldr	r3, [r7, #4]
   210f6:	2224      	movs	r2, #36	; 0x24
   210f8:	2100      	movs	r1, #0
   210fa:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   210fc:	687b      	ldr	r3, [r7, #4]
   210fe:	3318      	adds	r3, #24
   21100:	220c      	movs	r2, #12
   21102:	2100      	movs	r1, #0
   21104:	0018      	movs	r0, r3
   21106:	4b0a      	ldr	r3, [pc, #40]	; (21130 <spi_get_config_defaults+0x7c>)
   21108:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   2110a:	687b      	ldr	r3, [r7, #4]
   2110c:	4a09      	ldr	r2, [pc, #36]	; (21134 <spi_get_config_defaults+0x80>)
   2110e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   21110:	687b      	ldr	r3, [r7, #4]
   21112:	2200      	movs	r2, #0
   21114:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   21116:	687b      	ldr	r3, [r7, #4]
   21118:	2200      	movs	r2, #0
   2111a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   2111c:	687b      	ldr	r3, [r7, #4]
   2111e:	2200      	movs	r2, #0
   21120:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   21122:	687b      	ldr	r3, [r7, #4]
   21124:	2200      	movs	r2, #0
   21126:	635a      	str	r2, [r3, #52]	; 0x34
};
   21128:	46c0      	nop			; (mov r8, r8)
   2112a:	46bd      	mov	sp, r7
   2112c:	b002      	add	sp, #8
   2112e:	bd80      	pop	{r7, pc}
   21130:	00035543 	.word	0x00035543
   21134:	000186a0 	.word	0x000186a0

00021138 <spi_slave_inst_get_config_defaults>:
{
   21138:	b580      	push	{r7, lr}
   2113a:	b082      	sub	sp, #8
   2113c:	af00      	add	r7, sp, #0
   2113e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   21140:	687b      	ldr	r3, [r7, #4]
   21142:	220a      	movs	r2, #10
   21144:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   21146:	687b      	ldr	r3, [r7, #4]
   21148:	2200      	movs	r2, #0
   2114a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   2114c:	687b      	ldr	r3, [r7, #4]
   2114e:	2200      	movs	r2, #0
   21150:	709a      	strb	r2, [r3, #2]
}
   21152:	46c0      	nop			; (mov r8, r8)
   21154:	46bd      	mov	sp, r7
   21156:	b002      	add	sp, #8
   21158:	bd80      	pop	{r7, pc}
	...

0002115c <spi_attach_slave>:
{
   2115c:	b580      	push	{r7, lr}
   2115e:	b084      	sub	sp, #16
   21160:	af00      	add	r7, sp, #0
   21162:	6078      	str	r0, [r7, #4]
   21164:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   21166:	683b      	ldr	r3, [r7, #0]
   21168:	781a      	ldrb	r2, [r3, #0]
   2116a:	687b      	ldr	r3, [r7, #4]
   2116c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2116e:	683b      	ldr	r3, [r7, #0]
   21170:	785a      	ldrb	r2, [r3, #1]
   21172:	687b      	ldr	r3, [r7, #4]
   21174:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   21176:	683b      	ldr	r3, [r7, #0]
   21178:	789a      	ldrb	r2, [r3, #2]
   2117a:	687b      	ldr	r3, [r7, #4]
   2117c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   2117e:	230c      	movs	r3, #12
   21180:	18fb      	adds	r3, r7, r3
   21182:	0018      	movs	r0, r3
   21184:	4b0b      	ldr	r3, [pc, #44]	; (211b4 <spi_attach_slave+0x58>)
   21186:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   21188:	230c      	movs	r3, #12
   2118a:	18fb      	adds	r3, r7, r3
   2118c:	2201      	movs	r2, #1
   2118e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   21190:	687b      	ldr	r3, [r7, #4]
   21192:	781b      	ldrb	r3, [r3, #0]
   21194:	220c      	movs	r2, #12
   21196:	18ba      	adds	r2, r7, r2
   21198:	0011      	movs	r1, r2
   2119a:	0018      	movs	r0, r3
   2119c:	4b06      	ldr	r3, [pc, #24]	; (211b8 <spi_attach_slave+0x5c>)
   2119e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   211a0:	687b      	ldr	r3, [r7, #4]
   211a2:	781b      	ldrb	r3, [r3, #0]
   211a4:	2101      	movs	r1, #1
   211a6:	0018      	movs	r0, r3
   211a8:	4b04      	ldr	r3, [pc, #16]	; (211bc <spi_attach_slave+0x60>)
   211aa:	4798      	blx	r3
}
   211ac:	46c0      	nop			; (mov r8, r8)
   211ae:	46bd      	mov	sp, r7
   211b0:	b004      	add	sp, #16
   211b2:	bd80      	pop	{r7, pc}
   211b4:	0002101d 	.word	0x0002101d
   211b8:	0002751d 	.word	0x0002751d
   211bc:	00021041 	.word	0x00021041

000211c0 <spi_enable>:
{
   211c0:	b580      	push	{r7, lr}
   211c2:	b084      	sub	sp, #16
   211c4:	af00      	add	r7, sp, #0
   211c6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   211c8:	687b      	ldr	r3, [r7, #4]
   211ca:	681b      	ldr	r3, [r3, #0]
   211cc:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   211ce:	687b      	ldr	r3, [r7, #4]
   211d0:	681b      	ldr	r3, [r3, #0]
   211d2:	0018      	movs	r0, r3
   211d4:	4b0b      	ldr	r3, [pc, #44]	; (21204 <spi_enable+0x44>)
   211d6:	4798      	blx	r3
   211d8:	0003      	movs	r3, r0
   211da:	0018      	movs	r0, r3
   211dc:	4b0a      	ldr	r3, [pc, #40]	; (21208 <spi_enable+0x48>)
   211de:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   211e0:	46c0      	nop			; (mov r8, r8)
   211e2:	687b      	ldr	r3, [r7, #4]
   211e4:	0018      	movs	r0, r3
   211e6:	4b09      	ldr	r3, [pc, #36]	; (2120c <spi_enable+0x4c>)
   211e8:	4798      	blx	r3
   211ea:	1e03      	subs	r3, r0, #0
   211ec:	d1f9      	bne.n	211e2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   211ee:	68fb      	ldr	r3, [r7, #12]
   211f0:	681b      	ldr	r3, [r3, #0]
   211f2:	2202      	movs	r2, #2
   211f4:	431a      	orrs	r2, r3
   211f6:	68fb      	ldr	r3, [r7, #12]
   211f8:	601a      	str	r2, [r3, #0]
}
   211fa:	46c0      	nop			; (mov r8, r8)
   211fc:	46bd      	mov	sp, r7
   211fe:	b004      	add	sp, #16
   21200:	bd80      	pop	{r7, pc}
   21202:	46c0      	nop			; (mov r8, r8)
   21204:	000281ed 	.word	0x000281ed
   21208:	00020f9d 	.word	0x00020f9d
   2120c:	00021095 	.word	0x00021095

00021210 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   21210:	b580      	push	{r7, lr}
   21212:	b084      	sub	sp, #16
   21214:	af00      	add	r7, sp, #0
   21216:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21218:	687b      	ldr	r3, [r7, #4]
   2121a:	681b      	ldr	r3, [r3, #0]
   2121c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2121e:	687b      	ldr	r3, [r7, #4]
   21220:	681b      	ldr	r3, [r3, #0]
   21222:	0018      	movs	r0, r3
   21224:	4b0e      	ldr	r3, [pc, #56]	; (21260 <spi_disable+0x50>)
   21226:	4798      	blx	r3
   21228:	0003      	movs	r3, r0
   2122a:	0018      	movs	r0, r3
   2122c:	4b0d      	ldr	r3, [pc, #52]	; (21264 <spi_disable+0x54>)
   2122e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   21230:	46c0      	nop			; (mov r8, r8)
   21232:	687b      	ldr	r3, [r7, #4]
   21234:	0018      	movs	r0, r3
   21236:	4b0c      	ldr	r3, [pc, #48]	; (21268 <spi_disable+0x58>)
   21238:	4798      	blx	r3
   2123a:	1e03      	subs	r3, r0, #0
   2123c:	d1f9      	bne.n	21232 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2123e:	68fb      	ldr	r3, [r7, #12]
   21240:	228f      	movs	r2, #143	; 0x8f
   21242:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   21244:	68fb      	ldr	r3, [r7, #12]
   21246:	228f      	movs	r2, #143	; 0x8f
   21248:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2124a:	68fb      	ldr	r3, [r7, #12]
   2124c:	681b      	ldr	r3, [r3, #0]
   2124e:	2202      	movs	r2, #2
   21250:	4393      	bics	r3, r2
   21252:	001a      	movs	r2, r3
   21254:	68fb      	ldr	r3, [r7, #12]
   21256:	601a      	str	r2, [r3, #0]
}
   21258:	46c0      	nop			; (mov r8, r8)
   2125a:	46bd      	mov	sp, r7
   2125c:	b004      	add	sp, #16
   2125e:	bd80      	pop	{r7, pc}
   21260:	000281ed 	.word	0x000281ed
   21264:	00020fc9 	.word	0x00020fc9
   21268:	00021095 	.word	0x00021095

0002126c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   2126c:	b580      	push	{r7, lr}
   2126e:	b084      	sub	sp, #16
   21270:	af00      	add	r7, sp, #0
   21272:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21274:	687b      	ldr	r3, [r7, #4]
   21276:	681b      	ldr	r3, [r3, #0]
   21278:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2127a:	68fb      	ldr	r3, [r7, #12]
   2127c:	7e1b      	ldrb	r3, [r3, #24]
   2127e:	b2db      	uxtb	r3, r3
   21280:	001a      	movs	r2, r3
   21282:	2302      	movs	r3, #2
   21284:	4013      	ands	r3, r2
   21286:	1e5a      	subs	r2, r3, #1
   21288:	4193      	sbcs	r3, r2
   2128a:	b2db      	uxtb	r3, r3
}
   2128c:	0018      	movs	r0, r3
   2128e:	46bd      	mov	sp, r7
   21290:	b004      	add	sp, #16
   21292:	bd80      	pop	{r7, pc}

00021294 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   21294:	b580      	push	{r7, lr}
   21296:	b084      	sub	sp, #16
   21298:	af00      	add	r7, sp, #0
   2129a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2129c:	687b      	ldr	r3, [r7, #4]
   2129e:	681b      	ldr	r3, [r3, #0]
   212a0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   212a2:	68fb      	ldr	r3, [r7, #12]
   212a4:	7e1b      	ldrb	r3, [r3, #24]
   212a6:	b2db      	uxtb	r3, r3
   212a8:	001a      	movs	r2, r3
   212aa:	2301      	movs	r3, #1
   212ac:	4013      	ands	r3, r2
   212ae:	1e5a      	subs	r2, r3, #1
   212b0:	4193      	sbcs	r3, r2
   212b2:	b2db      	uxtb	r3, r3
}
   212b4:	0018      	movs	r0, r3
   212b6:	46bd      	mov	sp, r7
   212b8:	b004      	add	sp, #16
   212ba:	bd80      	pop	{r7, pc}

000212bc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   212bc:	b580      	push	{r7, lr}
   212be:	b084      	sub	sp, #16
   212c0:	af00      	add	r7, sp, #0
   212c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   212c4:	687b      	ldr	r3, [r7, #4]
   212c6:	681b      	ldr	r3, [r3, #0]
   212c8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   212ca:	68fb      	ldr	r3, [r7, #12]
   212cc:	7e1b      	ldrb	r3, [r3, #24]
   212ce:	b2db      	uxtb	r3, r3
   212d0:	001a      	movs	r2, r3
   212d2:	2304      	movs	r3, #4
   212d4:	4013      	ands	r3, r2
   212d6:	1e5a      	subs	r2, r3, #1
   212d8:	4193      	sbcs	r3, r2
   212da:	b2db      	uxtb	r3, r3
}
   212dc:	0018      	movs	r0, r3
   212de:	46bd      	mov	sp, r7
   212e0:	b004      	add	sp, #16
   212e2:	bd80      	pop	{r7, pc}

000212e4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   212e4:	b580      	push	{r7, lr}
   212e6:	b084      	sub	sp, #16
   212e8:	af00      	add	r7, sp, #0
   212ea:	6078      	str	r0, [r7, #4]
   212ec:	000a      	movs	r2, r1
   212ee:	1cbb      	adds	r3, r7, #2
   212f0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   212f2:	687b      	ldr	r3, [r7, #4]
   212f4:	681b      	ldr	r3, [r3, #0]
   212f6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   212f8:	687b      	ldr	r3, [r7, #4]
   212fa:	0018      	movs	r0, r3
   212fc:	4b0a      	ldr	r3, [pc, #40]	; (21328 <spi_write+0x44>)
   212fe:	4798      	blx	r3
   21300:	0003      	movs	r3, r0
   21302:	001a      	movs	r2, r3
   21304:	2301      	movs	r3, #1
   21306:	4053      	eors	r3, r2
   21308:	b2db      	uxtb	r3, r3
   2130a:	2b00      	cmp	r3, #0
   2130c:	d001      	beq.n	21312 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   2130e:	2305      	movs	r3, #5
   21310:	e006      	b.n	21320 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   21312:	1cbb      	adds	r3, r7, #2
   21314:	881b      	ldrh	r3, [r3, #0]
   21316:	05db      	lsls	r3, r3, #23
   21318:	0dda      	lsrs	r2, r3, #23
   2131a:	68fb      	ldr	r3, [r7, #12]
   2131c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   2131e:	2300      	movs	r3, #0
}
   21320:	0018      	movs	r0, r3
   21322:	46bd      	mov	sp, r7
   21324:	b004      	add	sp, #16
   21326:	bd80      	pop	{r7, pc}
   21328:	00021295 	.word	0x00021295

0002132c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   2132c:	b580      	push	{r7, lr}
   2132e:	b084      	sub	sp, #16
   21330:	af00      	add	r7, sp, #0
   21332:	6078      	str	r0, [r7, #4]
   21334:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21336:	687b      	ldr	r3, [r7, #4]
   21338:	681b      	ldr	r3, [r3, #0]
   2133a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   2133c:	687b      	ldr	r3, [r7, #4]
   2133e:	0018      	movs	r0, r3
   21340:	4b1b      	ldr	r3, [pc, #108]	; (213b0 <spi_read+0x84>)
   21342:	4798      	blx	r3
   21344:	0003      	movs	r3, r0
   21346:	001a      	movs	r2, r3
   21348:	2301      	movs	r3, #1
   2134a:	4053      	eors	r3, r2
   2134c:	b2db      	uxtb	r3, r3
   2134e:	2b00      	cmp	r3, #0
   21350:	d001      	beq.n	21356 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   21352:	2310      	movs	r3, #16
   21354:	e027      	b.n	213a6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   21356:	230f      	movs	r3, #15
   21358:	18fb      	adds	r3, r7, r3
   2135a:	2200      	movs	r2, #0
   2135c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2135e:	68bb      	ldr	r3, [r7, #8]
   21360:	8b5b      	ldrh	r3, [r3, #26]
   21362:	b29b      	uxth	r3, r3
   21364:	001a      	movs	r2, r3
   21366:	2304      	movs	r3, #4
   21368:	4013      	ands	r3, r2
   2136a:	d006      	beq.n	2137a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2136c:	230f      	movs	r3, #15
   2136e:	18fb      	adds	r3, r7, r3
   21370:	221e      	movs	r2, #30
   21372:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   21374:	68bb      	ldr	r3, [r7, #8]
   21376:	2204      	movs	r2, #4
   21378:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2137a:	687b      	ldr	r3, [r7, #4]
   2137c:	799b      	ldrb	r3, [r3, #6]
   2137e:	2b01      	cmp	r3, #1
   21380:	d108      	bne.n	21394 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   21382:	68bb      	ldr	r3, [r7, #8]
   21384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21386:	b29b      	uxth	r3, r3
   21388:	05db      	lsls	r3, r3, #23
   2138a:	0ddb      	lsrs	r3, r3, #23
   2138c:	b29a      	uxth	r2, r3
   2138e:	683b      	ldr	r3, [r7, #0]
   21390:	801a      	strh	r2, [r3, #0]
   21392:	e005      	b.n	213a0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   21394:	68bb      	ldr	r3, [r7, #8]
   21396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21398:	b2db      	uxtb	r3, r3
   2139a:	b29a      	uxth	r2, r3
   2139c:	683b      	ldr	r3, [r7, #0]
   2139e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   213a0:	230f      	movs	r3, #15
   213a2:	18fb      	adds	r3, r7, r3
   213a4:	781b      	ldrb	r3, [r3, #0]
}
   213a6:	0018      	movs	r0, r3
   213a8:	46bd      	mov	sp, r7
   213aa:	b004      	add	sp, #16
   213ac:	bd80      	pop	{r7, pc}
   213ae:	46c0      	nop			; (mov r8, r8)
   213b0:	000212bd 	.word	0x000212bd

000213b4 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   213b4:	b580      	push	{r7, lr}
   213b6:	b086      	sub	sp, #24
   213b8:	af00      	add	r7, sp, #0
   213ba:	60f8      	str	r0, [r7, #12]
   213bc:	60b9      	str	r1, [r7, #8]
   213be:	1dbb      	adds	r3, r7, #6
   213c0:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   213c2:	2313      	movs	r3, #19
   213c4:	18fb      	adds	r3, r7, r3
   213c6:	22ff      	movs	r2, #255	; 0xff
   213c8:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   213ca:	2317      	movs	r3, #23
   213cc:	18fb      	adds	r3, r7, r3
   213ce:	2200      	movs	r2, #0
   213d0:	701a      	strb	r2, [r3, #0]
   213d2:	2316      	movs	r3, #22
   213d4:	18fb      	adds	r3, r7, r3
   213d6:	2200      	movs	r2, #0
   213d8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   213da:	2314      	movs	r3, #20
   213dc:	18fb      	adds	r3, r7, r3
   213de:	2200      	movs	r2, #0
   213e0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   213e2:	2310      	movs	r3, #16
   213e4:	18fb      	adds	r3, r7, r3
   213e6:	2200      	movs	r2, #0
   213e8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   213ea:	68bb      	ldr	r3, [r7, #8]
   213ec:	2b00      	cmp	r3, #0
   213ee:	d102      	bne.n	213f6 <spi_rw+0x42>
   213f0:	68fb      	ldr	r3, [r7, #12]
   213f2:	2b00      	cmp	r3, #0
   213f4:	d003      	beq.n	213fe <spi_rw+0x4a>
   213f6:	1dbb      	adds	r3, r7, #6
   213f8:	881b      	ldrh	r3, [r3, #0]
   213fa:	2b00      	cmp	r3, #0
   213fc:	d102      	bne.n	21404 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   213fe:	230f      	movs	r3, #15
   21400:	425b      	negs	r3, r3
   21402:	e07e      	b.n	21502 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   21404:	68fb      	ldr	r3, [r7, #12]
   21406:	2b00      	cmp	r3, #0
   21408:	d106      	bne.n	21418 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   2140a:	2313      	movs	r3, #19
   2140c:	18fb      	adds	r3, r7, r3
   2140e:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   21410:	2317      	movs	r3, #23
   21412:	18fb      	adds	r3, r7, r3
   21414:	2201      	movs	r2, #1
   21416:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   21418:	68bb      	ldr	r3, [r7, #8]
   2141a:	2b00      	cmp	r3, #0
   2141c:	d106      	bne.n	2142c <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   2141e:	2313      	movs	r3, #19
   21420:	18fb      	adds	r3, r7, r3
   21422:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   21424:	2316      	movs	r3, #22
   21426:	18fb      	adds	r3, r7, r3
   21428:	2201      	movs	r2, #1
   2142a:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   2142c:	4937      	ldr	r1, [pc, #220]	; (2150c <spi_rw+0x158>)
   2142e:	4b38      	ldr	r3, [pc, #224]	; (21510 <spi_rw+0x15c>)
   21430:	2201      	movs	r2, #1
   21432:	0018      	movs	r0, r3
   21434:	4b37      	ldr	r3, [pc, #220]	; (21514 <spi_rw+0x160>)
   21436:	4798      	blx	r3

	while (u16Sz) {
   21438:	e04c      	b.n	214d4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   2143a:	68fb      	ldr	r3, [r7, #12]
   2143c:	781a      	ldrb	r2, [r3, #0]
   2143e:	2314      	movs	r3, #20
   21440:	18fb      	adds	r3, r7, r3
   21442:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   21444:	46c0      	nop			; (mov r8, r8)
   21446:	4b32      	ldr	r3, [pc, #200]	; (21510 <spi_rw+0x15c>)
   21448:	0018      	movs	r0, r3
   2144a:	4b33      	ldr	r3, [pc, #204]	; (21518 <spi_rw+0x164>)
   2144c:	4798      	blx	r3
   2144e:	0003      	movs	r3, r0
   21450:	001a      	movs	r2, r3
   21452:	2301      	movs	r3, #1
   21454:	4053      	eors	r3, r2
   21456:	b2db      	uxtb	r3, r3
   21458:	2b00      	cmp	r3, #0
   2145a:	d1f4      	bne.n	21446 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   2145c:	46c0      	nop			; (mov r8, r8)
   2145e:	2314      	movs	r3, #20
   21460:	18fb      	adds	r3, r7, r3
   21462:	881a      	ldrh	r2, [r3, #0]
   21464:	4b2a      	ldr	r3, [pc, #168]	; (21510 <spi_rw+0x15c>)
   21466:	0011      	movs	r1, r2
   21468:	0018      	movs	r0, r3
   2146a:	4b2c      	ldr	r3, [pc, #176]	; (2151c <spi_rw+0x168>)
   2146c:	4798      	blx	r3
   2146e:	1e03      	subs	r3, r0, #0
   21470:	d1f5      	bne.n	2145e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   21472:	46c0      	nop			; (mov r8, r8)
   21474:	4b26      	ldr	r3, [pc, #152]	; (21510 <spi_rw+0x15c>)
   21476:	0018      	movs	r0, r3
   21478:	4b29      	ldr	r3, [pc, #164]	; (21520 <spi_rw+0x16c>)
   2147a:	4798      	blx	r3
   2147c:	0003      	movs	r3, r0
   2147e:	001a      	movs	r2, r3
   21480:	2301      	movs	r3, #1
   21482:	4053      	eors	r3, r2
   21484:	b2db      	uxtb	r3, r3
   21486:	2b00      	cmp	r3, #0
   21488:	d1f4      	bne.n	21474 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   2148a:	46c0      	nop			; (mov r8, r8)
   2148c:	2310      	movs	r3, #16
   2148e:	18fa      	adds	r2, r7, r3
   21490:	4b1f      	ldr	r3, [pc, #124]	; (21510 <spi_rw+0x15c>)
   21492:	0011      	movs	r1, r2
   21494:	0018      	movs	r0, r3
   21496:	4b23      	ldr	r3, [pc, #140]	; (21524 <spi_rw+0x170>)
   21498:	4798      	blx	r3
   2149a:	1e03      	subs	r3, r0, #0
   2149c:	d1f6      	bne.n	2148c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   2149e:	2310      	movs	r3, #16
   214a0:	18fb      	adds	r3, r7, r3
   214a2:	881b      	ldrh	r3, [r3, #0]
   214a4:	b2da      	uxtb	r2, r3
   214a6:	68bb      	ldr	r3, [r7, #8]
   214a8:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   214aa:	1dbb      	adds	r3, r7, #6
   214ac:	881a      	ldrh	r2, [r3, #0]
   214ae:	1dbb      	adds	r3, r7, #6
   214b0:	3a01      	subs	r2, #1
   214b2:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   214b4:	2316      	movs	r3, #22
   214b6:	18fb      	adds	r3, r7, r3
   214b8:	781b      	ldrb	r3, [r3, #0]
   214ba:	2b00      	cmp	r3, #0
   214bc:	d102      	bne.n	214c4 <spi_rw+0x110>
			pu8Miso++;
   214be:	68bb      	ldr	r3, [r7, #8]
   214c0:	3301      	adds	r3, #1
   214c2:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   214c4:	2317      	movs	r3, #23
   214c6:	18fb      	adds	r3, r7, r3
   214c8:	781b      	ldrb	r3, [r3, #0]
   214ca:	2b00      	cmp	r3, #0
   214cc:	d102      	bne.n	214d4 <spi_rw+0x120>
			pu8Mosi++;
   214ce:	68fb      	ldr	r3, [r7, #12]
   214d0:	3301      	adds	r3, #1
   214d2:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   214d4:	1dbb      	adds	r3, r7, #6
   214d6:	881b      	ldrh	r3, [r3, #0]
   214d8:	2b00      	cmp	r3, #0
   214da:	d1ae      	bne.n	2143a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   214dc:	46c0      	nop			; (mov r8, r8)
   214de:	4b0c      	ldr	r3, [pc, #48]	; (21510 <spi_rw+0x15c>)
   214e0:	0018      	movs	r0, r3
   214e2:	4b11      	ldr	r3, [pc, #68]	; (21528 <spi_rw+0x174>)
   214e4:	4798      	blx	r3
   214e6:	0003      	movs	r3, r0
   214e8:	001a      	movs	r2, r3
   214ea:	2301      	movs	r3, #1
   214ec:	4053      	eors	r3, r2
   214ee:	b2db      	uxtb	r3, r3
   214f0:	2b00      	cmp	r3, #0
   214f2:	d1f4      	bne.n	214de <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   214f4:	4905      	ldr	r1, [pc, #20]	; (2150c <spi_rw+0x158>)
   214f6:	4b06      	ldr	r3, [pc, #24]	; (21510 <spi_rw+0x15c>)
   214f8:	2200      	movs	r2, #0
   214fa:	0018      	movs	r0, r3
   214fc:	4b05      	ldr	r3, [pc, #20]	; (21514 <spi_rw+0x160>)
   214fe:	4798      	blx	r3

	return M2M_SUCCESS;
   21500:	2300      	movs	r3, #0
}
   21502:	0018      	movs	r0, r3
   21504:	46bd      	mov	sp, r7
   21506:	b006      	add	sp, #24
   21508:	bd80      	pop	{r7, pc}
   2150a:	46c0      	nop			; (mov r8, r8)
   2150c:	200056c4 	.word	0x200056c4
   21510:	200056c8 	.word	0x200056c8
   21514:	00028c61 	.word	0x00028c61
   21518:	00021295 	.word	0x00021295
   2151c:	000212e5 	.word	0x000212e5
   21520:	000212bd 	.word	0x000212bd
   21524:	0002132d 	.word	0x0002132d
   21528:	0002126d 	.word	0x0002126d

0002152c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   2152c:	b580      	push	{r7, lr}
   2152e:	b092      	sub	sp, #72	; 0x48
   21530:	af00      	add	r7, sp, #0
   21532:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   21534:	2347      	movs	r3, #71	; 0x47
   21536:	18fb      	adds	r3, r7, r3
   21538:	2200      	movs	r2, #0
   2153a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   2153c:	2308      	movs	r3, #8
   2153e:	18fb      	adds	r3, r7, r3
   21540:	0018      	movs	r0, r3
   21542:	4b26      	ldr	r3, [pc, #152]	; (215dc <nm_bus_init+0xb0>)
   21544:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   21546:	2308      	movs	r3, #8
   21548:	18fb      	adds	r3, r7, r3
   2154a:	220e      	movs	r2, #14
   2154c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   2154e:	2308      	movs	r3, #8
   21550:	18fa      	adds	r2, r7, r3
   21552:	4b23      	ldr	r3, [pc, #140]	; (215e0 <nm_bus_init+0xb4>)
   21554:	0011      	movs	r1, r2
   21556:	0018      	movs	r0, r3
   21558:	4b22      	ldr	r3, [pc, #136]	; (215e4 <nm_bus_init+0xb8>)
   2155a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   2155c:	230c      	movs	r3, #12
   2155e:	18fb      	adds	r3, r7, r3
   21560:	0018      	movs	r0, r3
   21562:	4b21      	ldr	r3, [pc, #132]	; (215e8 <nm_bus_init+0xbc>)
   21564:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   21566:	230c      	movs	r3, #12
   21568:	18fb      	adds	r3, r7, r3
   2156a:	22c0      	movs	r2, #192	; 0xc0
   2156c:	0392      	lsls	r2, r2, #14
   2156e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   21570:	230c      	movs	r3, #12
   21572:	18fb      	adds	r3, r7, r3
   21574:	4a1d      	ldr	r2, [pc, #116]	; (215ec <nm_bus_init+0xc0>)
   21576:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   21578:	230c      	movs	r3, #12
   2157a:	18fb      	adds	r3, r7, r3
   2157c:	4a1c      	ldr	r2, [pc, #112]	; (215f0 <nm_bus_init+0xc4>)
   2157e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   21580:	230c      	movs	r3, #12
   21582:	18fb      	adds	r3, r7, r3
   21584:	2201      	movs	r2, #1
   21586:	4252      	negs	r2, r2
   21588:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   2158a:	230c      	movs	r3, #12
   2158c:	18fb      	adds	r3, r7, r3
   2158e:	4a19      	ldr	r2, [pc, #100]	; (215f4 <nm_bus_init+0xc8>)
   21590:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   21592:	230c      	movs	r3, #12
   21594:	18fb      	adds	r3, r7, r3
   21596:	2200      	movs	r2, #0
   21598:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   2159a:	230c      	movs	r3, #12
   2159c:	18fb      	adds	r3, r7, r3
   2159e:	4a16      	ldr	r2, [pc, #88]	; (215f8 <nm_bus_init+0xcc>)
   215a0:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   215a2:	230c      	movs	r3, #12
   215a4:	18fa      	adds	r2, r7, r3
   215a6:	4915      	ldr	r1, [pc, #84]	; (215fc <nm_bus_init+0xd0>)
   215a8:	4b15      	ldr	r3, [pc, #84]	; (21600 <nm_bus_init+0xd4>)
   215aa:	0018      	movs	r0, r3
   215ac:	4b15      	ldr	r3, [pc, #84]	; (21604 <nm_bus_init+0xd8>)
   215ae:	4798      	blx	r3
   215b0:	1e03      	subs	r3, r0, #0
   215b2:	d002      	beq.n	215ba <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   215b4:	2306      	movs	r3, #6
   215b6:	425b      	negs	r3, r3
   215b8:	e00c      	b.n	215d4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   215ba:	4b11      	ldr	r3, [pc, #68]	; (21600 <nm_bus_init+0xd4>)
   215bc:	0018      	movs	r0, r3
   215be:	4b12      	ldr	r3, [pc, #72]	; (21608 <nm_bus_init+0xdc>)
   215c0:	4798      	blx	r3

	nm_bsp_reset();
   215c2:	4b12      	ldr	r3, [pc, #72]	; (2160c <nm_bus_init+0xe0>)
   215c4:	4798      	blx	r3
	nm_bsp_sleep(1);
   215c6:	2001      	movs	r0, #1
   215c8:	4b11      	ldr	r3, [pc, #68]	; (21610 <nm_bus_init+0xe4>)
   215ca:	4798      	blx	r3
#endif
	return result;
   215cc:	2347      	movs	r3, #71	; 0x47
   215ce:	18fb      	adds	r3, r7, r3
   215d0:	781b      	ldrb	r3, [r3, #0]
   215d2:	b25b      	sxtb	r3, r3
}
   215d4:	0018      	movs	r0, r3
   215d6:	46bd      	mov	sp, r7
   215d8:	b012      	add	sp, #72	; 0x48
   215da:	bd80      	pop	{r7, pc}
   215dc:	00021139 	.word	0x00021139
   215e0:	200056c4 	.word	0x200056c4
   215e4:	0002115d 	.word	0x0002115d
   215e8:	000210b5 	.word	0x000210b5
   215ec:	000c0002 	.word	0x000c0002
   215f0:	000d0002 	.word	0x000d0002
   215f4:	000f0002 	.word	0x000f0002
   215f8:	00124f80 	.word	0x00124f80
   215fc:	42001000 	.word	0x42001000
   21600:	200056c8 	.word	0x200056c8
   21604:	0002899d 	.word	0x0002899d
   21608:	000211c1 	.word	0x000211c1
   2160c:	00020e31 	.word	0x00020e31
   21610:	00020e71 	.word	0x00020e71

00021614 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   21614:	b590      	push	{r4, r7, lr}
   21616:	b085      	sub	sp, #20
   21618:	af00      	add	r7, sp, #0
   2161a:	0002      	movs	r2, r0
   2161c:	6039      	str	r1, [r7, #0]
   2161e:	1dfb      	adds	r3, r7, #7
   21620:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   21622:	230f      	movs	r3, #15
   21624:	18fb      	adds	r3, r7, r3
   21626:	2200      	movs	r2, #0
   21628:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   2162a:	1dfb      	adds	r3, r7, #7
   2162c:	781b      	ldrb	r3, [r3, #0]
   2162e:	2b03      	cmp	r3, #3
   21630:	d10f      	bne.n	21652 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   21632:	683b      	ldr	r3, [r7, #0]
   21634:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   21636:	68bb      	ldr	r3, [r7, #8]
   21638:	6818      	ldr	r0, [r3, #0]
   2163a:	68bb      	ldr	r3, [r7, #8]
   2163c:	6859      	ldr	r1, [r3, #4]
   2163e:	68bb      	ldr	r3, [r7, #8]
   21640:	891b      	ldrh	r3, [r3, #8]
   21642:	220f      	movs	r2, #15
   21644:	18bc      	adds	r4, r7, r2
   21646:	001a      	movs	r2, r3
   21648:	4b10      	ldr	r3, [pc, #64]	; (2168c <nm_bus_ioctl+0x78>)
   2164a:	4798      	blx	r3
   2164c:	0003      	movs	r3, r0
   2164e:	7023      	strb	r3, [r4, #0]
		}
		break;
   21650:	e013      	b.n	2167a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   21652:	230f      	movs	r3, #15
   21654:	18fb      	adds	r3, r7, r3
   21656:	22ff      	movs	r2, #255	; 0xff
   21658:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   2165a:	2383      	movs	r3, #131	; 0x83
   2165c:	005a      	lsls	r2, r3, #1
   2165e:	490c      	ldr	r1, [pc, #48]	; (21690 <nm_bus_ioctl+0x7c>)
   21660:	4b0c      	ldr	r3, [pc, #48]	; (21694 <nm_bus_ioctl+0x80>)
   21662:	0018      	movs	r0, r3
   21664:	4b0c      	ldr	r3, [pc, #48]	; (21698 <nm_bus_ioctl+0x84>)
   21666:	4798      	blx	r3
   21668:	4b0c      	ldr	r3, [pc, #48]	; (2169c <nm_bus_ioctl+0x88>)
   2166a:	0018      	movs	r0, r3
   2166c:	4b0a      	ldr	r3, [pc, #40]	; (21698 <nm_bus_ioctl+0x84>)
   2166e:	4798      	blx	r3
   21670:	4b0b      	ldr	r3, [pc, #44]	; (216a0 <nm_bus_ioctl+0x8c>)
   21672:	0018      	movs	r0, r3
   21674:	4b08      	ldr	r3, [pc, #32]	; (21698 <nm_bus_ioctl+0x84>)
   21676:	4798      	blx	r3
			break;
   21678:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   2167a:	230f      	movs	r3, #15
   2167c:	18fb      	adds	r3, r7, r3
   2167e:	781b      	ldrb	r3, [r3, #0]
   21680:	b25b      	sxtb	r3, r3
}
   21682:	0018      	movs	r0, r3
   21684:	46bd      	mov	sp, r7
   21686:	b005      	add	sp, #20
   21688:	bd90      	pop	{r4, r7, pc}
   2168a:	46c0      	nop			; (mov r8, r8)
   2168c:	000213b5 	.word	0x000213b5
   21690:	00038ebc 	.word	0x00038ebc
   21694:	00038e90 	.word	0x00038e90
   21698:	0001ea1d 	.word	0x0001ea1d
   2169c:	00038ea4 	.word	0x00038ea4
   216a0:	00038eb8 	.word	0x00038eb8

000216a4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   216a4:	b580      	push	{r7, lr}
   216a6:	b082      	sub	sp, #8
   216a8:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   216aa:	1dfb      	adds	r3, r7, #7
   216ac:	2200      	movs	r2, #0
   216ae:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   216b0:	1d3b      	adds	r3, r7, #4
   216b2:	0018      	movs	r0, r3
   216b4:	4b13      	ldr	r3, [pc, #76]	; (21704 <nm_bus_deinit+0x60>)
   216b6:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   216b8:	1d3b      	adds	r3, r7, #4
   216ba:	2200      	movs	r2, #0
   216bc:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   216be:	1d3b      	adds	r3, r7, #4
   216c0:	2200      	movs	r2, #0
   216c2:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   216c4:	4b10      	ldr	r3, [pc, #64]	; (21708 <nm_bus_deinit+0x64>)
   216c6:	0018      	movs	r0, r3
   216c8:	4b10      	ldr	r3, [pc, #64]	; (2170c <nm_bus_deinit+0x68>)
   216ca:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   216cc:	1d3b      	adds	r3, r7, #4
   216ce:	0019      	movs	r1, r3
   216d0:	200c      	movs	r0, #12
   216d2:	4b0f      	ldr	r3, [pc, #60]	; (21710 <nm_bus_deinit+0x6c>)
   216d4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   216d6:	1d3b      	adds	r3, r7, #4
   216d8:	0019      	movs	r1, r3
   216da:	200f      	movs	r0, #15
   216dc:	4b0c      	ldr	r3, [pc, #48]	; (21710 <nm_bus_deinit+0x6c>)
   216de:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   216e0:	1d3b      	adds	r3, r7, #4
   216e2:	0019      	movs	r1, r3
   216e4:	200d      	movs	r0, #13
   216e6:	4b0a      	ldr	r3, [pc, #40]	; (21710 <nm_bus_deinit+0x6c>)
   216e8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   216ea:	1d3b      	adds	r3, r7, #4
   216ec:	0019      	movs	r1, r3
   216ee:	200e      	movs	r0, #14
   216f0:	4b07      	ldr	r3, [pc, #28]	; (21710 <nm_bus_deinit+0x6c>)
   216f2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   216f4:	1dfb      	adds	r3, r7, #7
   216f6:	781b      	ldrb	r3, [r3, #0]
   216f8:	b25b      	sxtb	r3, r3
}
   216fa:	0018      	movs	r0, r3
   216fc:	46bd      	mov	sp, r7
   216fe:	b002      	add	sp, #8
   21700:	bd80      	pop	{r7, pc}
   21702:	46c0      	nop			; (mov r8, r8)
   21704:	0002101d 	.word	0x0002101d
   21708:	200056c8 	.word	0x200056c8
   2170c:	00021211 	.word	0x00021211
   21710:	0002751d 	.word	0x0002751d

00021714 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   21714:	b580      	push	{r7, lr}
   21716:	b084      	sub	sp, #16
   21718:	af00      	add	r7, sp, #0
   2171a:	60f8      	str	r0, [r7, #12]
   2171c:	60b9      	str	r1, [r7, #8]
   2171e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   21720:	687b      	ldr	r3, [r7, #4]
   21722:	2b00      	cmp	r3, #0
   21724:	d010      	beq.n	21748 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   21726:	68bb      	ldr	r3, [r7, #8]
   21728:	781a      	ldrb	r2, [r3, #0]
   2172a:	68fb      	ldr	r3, [r7, #12]
   2172c:	701a      	strb	r2, [r3, #0]
		pDst++;
   2172e:	68fb      	ldr	r3, [r7, #12]
   21730:	3301      	adds	r3, #1
   21732:	60fb      	str	r3, [r7, #12]
		pSrc++;
   21734:	68bb      	ldr	r3, [r7, #8]
   21736:	3301      	adds	r3, #1
   21738:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   2173a:	687b      	ldr	r3, [r7, #4]
   2173c:	3b01      	subs	r3, #1
   2173e:	607b      	str	r3, [r7, #4]
   21740:	687b      	ldr	r3, [r7, #4]
   21742:	2b00      	cmp	r3, #0
   21744:	d1ef      	bne.n	21726 <m2m_memcpy+0x12>
   21746:	e000      	b.n	2174a <m2m_memcpy+0x36>
	if(sz == 0) return;
   21748:	46c0      	nop			; (mov r8, r8)
}
   2174a:	46bd      	mov	sp, r7
   2174c:	b004      	add	sp, #16
   2174e:	bd80      	pop	{r7, pc}

00021750 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   21750:	b580      	push	{r7, lr}
   21752:	b084      	sub	sp, #16
   21754:	af00      	add	r7, sp, #0
   21756:	60f8      	str	r0, [r7, #12]
   21758:	607a      	str	r2, [r7, #4]
   2175a:	230b      	movs	r3, #11
   2175c:	18fb      	adds	r3, r7, r3
   2175e:	1c0a      	adds	r2, r1, #0
   21760:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   21762:	687b      	ldr	r3, [r7, #4]
   21764:	2b00      	cmp	r3, #0
   21766:	d00e      	beq.n	21786 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   21768:	68fb      	ldr	r3, [r7, #12]
   2176a:	220b      	movs	r2, #11
   2176c:	18ba      	adds	r2, r7, r2
   2176e:	7812      	ldrb	r2, [r2, #0]
   21770:	701a      	strb	r2, [r3, #0]
		pBuf++;
   21772:	68fb      	ldr	r3, [r7, #12]
   21774:	3301      	adds	r3, #1
   21776:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   21778:	687b      	ldr	r3, [r7, #4]
   2177a:	3b01      	subs	r3, #1
   2177c:	607b      	str	r3, [r7, #4]
   2177e:	687b      	ldr	r3, [r7, #4]
   21780:	2b00      	cmp	r3, #0
   21782:	d1f1      	bne.n	21768 <m2m_memset+0x18>
   21784:	e000      	b.n	21788 <m2m_memset+0x38>
	if(sz == 0) return;
   21786:	46c0      	nop			; (mov r8, r8)
}
   21788:	46bd      	mov	sp, r7
   2178a:	b004      	add	sp, #16
   2178c:	bd80      	pop	{r7, pc}

0002178e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2178e:	b580      	push	{r7, lr}
   21790:	b084      	sub	sp, #16
   21792:	af00      	add	r7, sp, #0
   21794:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   21796:	230e      	movs	r3, #14
   21798:	18fb      	adds	r3, r7, r3
   2179a:	2200      	movs	r2, #0
   2179c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   2179e:	e009      	b.n	217b4 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   217a0:	230e      	movs	r3, #14
   217a2:	18fb      	adds	r3, r7, r3
   217a4:	881a      	ldrh	r2, [r3, #0]
   217a6:	230e      	movs	r3, #14
   217a8:	18fb      	adds	r3, r7, r3
   217aa:	3201      	adds	r2, #1
   217ac:	801a      	strh	r2, [r3, #0]
		pcStr++;
   217ae:	687b      	ldr	r3, [r7, #4]
   217b0:	3301      	adds	r3, #1
   217b2:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   217b4:	687b      	ldr	r3, [r7, #4]
   217b6:	781b      	ldrb	r3, [r3, #0]
   217b8:	2b00      	cmp	r3, #0
   217ba:	d1f1      	bne.n	217a0 <m2m_strlen+0x12>
	}
	return u16StrLen;
   217bc:	230e      	movs	r3, #14
   217be:	18fb      	adds	r3, r7, r3
   217c0:	881b      	ldrh	r3, [r3, #0]
}
   217c2:	0018      	movs	r0, r3
   217c4:	46bd      	mov	sp, r7
   217c6:	b004      	add	sp, #16
   217c8:	bd80      	pop	{r7, pc}
	...

000217cc <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   217cc:	b580      	push	{r7, lr}
   217ce:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   217d0:	4b04      	ldr	r3, [pc, #16]	; (217e4 <isr+0x18>)
   217d2:	78db      	ldrb	r3, [r3, #3]
   217d4:	b2db      	uxtb	r3, r3
   217d6:	3301      	adds	r3, #1
   217d8:	b2da      	uxtb	r2, r3
   217da:	4b02      	ldr	r3, [pc, #8]	; (217e4 <isr+0x18>)
   217dc:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   217de:	46c0      	nop			; (mov r8, r8)
   217e0:	46bd      	mov	sp, r7
   217e2:	bd80      	pop	{r7, pc}
   217e4:	20005704 	.word	0x20005704

000217e8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   217e8:	b590      	push	{r4, r7, lr}
   217ea:	b083      	sub	sp, #12
   217ec:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   217ee:	1dfb      	adds	r3, r7, #7
   217f0:	2200      	movs	r2, #0
   217f2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   217f4:	4b14      	ldr	r3, [pc, #80]	; (21848 <hif_set_rx_done+0x60>)
   217f6:	2200      	movs	r2, #0
   217f8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   217fa:	2001      	movs	r0, #1
   217fc:	4b13      	ldr	r3, [pc, #76]	; (2184c <hif_set_rx_done+0x64>)
   217fe:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   21800:	1dfc      	adds	r4, r7, #7
   21802:	003b      	movs	r3, r7
   21804:	4a12      	ldr	r2, [pc, #72]	; (21850 <hif_set_rx_done+0x68>)
   21806:	0019      	movs	r1, r3
   21808:	0010      	movs	r0, r2
   2180a:	4b12      	ldr	r3, [pc, #72]	; (21854 <hif_set_rx_done+0x6c>)
   2180c:	4798      	blx	r3
   2180e:	0003      	movs	r3, r0
   21810:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21812:	1dfb      	adds	r3, r7, #7
   21814:	781b      	ldrb	r3, [r3, #0]
   21816:	b25b      	sxtb	r3, r3
   21818:	2b00      	cmp	r3, #0
   2181a:	d10d      	bne.n	21838 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   2181c:	683b      	ldr	r3, [r7, #0]
   2181e:	2202      	movs	r2, #2
   21820:	4313      	orrs	r3, r2
   21822:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21824:	683b      	ldr	r3, [r7, #0]
   21826:	1dfc      	adds	r4, r7, #7
   21828:	4a09      	ldr	r2, [pc, #36]	; (21850 <hif_set_rx_done+0x68>)
   2182a:	0019      	movs	r1, r3
   2182c:	0010      	movs	r0, r2
   2182e:	4b0a      	ldr	r3, [pc, #40]	; (21858 <hif_set_rx_done+0x70>)
   21830:	4798      	blx	r3
   21832:	0003      	movs	r3, r0
   21834:	7023      	strb	r3, [r4, #0]
   21836:	e000      	b.n	2183a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   21838:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   2183a:	1dfb      	adds	r3, r7, #7
   2183c:	781b      	ldrb	r3, [r3, #0]
   2183e:	b25b      	sxtb	r3, r3

}
   21840:	0018      	movs	r0, r3
   21842:	46bd      	mov	sp, r7
   21844:	b003      	add	sp, #12
   21846:	bd90      	pop	{r4, r7, pc}
   21848:	20005704 	.word	0x20005704
   2184c:	00020f05 	.word	0x00020f05
   21850:	00001070 	.word	0x00001070
   21854:	000237e1 	.word	0x000237e1
   21858:	00023805 	.word	0x00023805

0002185c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   2185c:	b580      	push	{r7, lr}
   2185e:	b082      	sub	sp, #8
   21860:	af00      	add	r7, sp, #0
   21862:	603a      	str	r2, [r7, #0]
   21864:	1dfb      	adds	r3, r7, #7
   21866:	1c02      	adds	r2, r0, #0
   21868:	701a      	strb	r2, [r3, #0]
   2186a:	1d3b      	adds	r3, r7, #4
   2186c:	1c0a      	adds	r2, r1, #0
   2186e:	801a      	strh	r2, [r3, #0]


}
   21870:	46c0      	nop			; (mov r8, r8)
   21872:	46bd      	mov	sp, r7
   21874:	b002      	add	sp, #8
   21876:	bd80      	pop	{r7, pc}

00021878 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   21878:	b590      	push	{r4, r7, lr}
   2187a:	b083      	sub	sp, #12
   2187c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2187e:	1dfb      	adds	r3, r7, #7
   21880:	2200      	movs	r2, #0
   21882:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   21884:	4b16      	ldr	r3, [pc, #88]	; (218e0 <hif_chip_wake+0x68>)
   21886:	789b      	ldrb	r3, [r3, #2]
   21888:	b2db      	uxtb	r3, r3
   2188a:	2b00      	cmp	r3, #0
   2188c:	d003      	beq.n	21896 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   2188e:	1dfb      	adds	r3, r7, #7
   21890:	781b      	ldrb	r3, [r3, #0]
   21892:	b25b      	sxtb	r3, r3
   21894:	e01f      	b.n	218d6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   21896:	4b12      	ldr	r3, [pc, #72]	; (218e0 <hif_chip_wake+0x68>)
   21898:	785b      	ldrb	r3, [r3, #1]
   2189a:	b2db      	uxtb	r3, r3
   2189c:	2b00      	cmp	r3, #0
   2189e:	d10e      	bne.n	218be <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   218a0:	4b0f      	ldr	r3, [pc, #60]	; (218e0 <hif_chip_wake+0x68>)
   218a2:	781b      	ldrb	r3, [r3, #0]
   218a4:	b2db      	uxtb	r3, r3
   218a6:	2b00      	cmp	r3, #0
   218a8:	d009      	beq.n	218be <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   218aa:	1dfc      	adds	r4, r7, #7
   218ac:	4b0d      	ldr	r3, [pc, #52]	; (218e4 <hif_chip_wake+0x6c>)
   218ae:	4798      	blx	r3
   218b0:	0003      	movs	r3, r0
   218b2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   218b4:	1dfb      	adds	r3, r7, #7
   218b6:	781b      	ldrb	r3, [r3, #0]
   218b8:	b25b      	sxtb	r3, r3
   218ba:	2b00      	cmp	r3, #0
   218bc:	d107      	bne.n	218ce <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   218be:	4b08      	ldr	r3, [pc, #32]	; (218e0 <hif_chip_wake+0x68>)
   218c0:	785b      	ldrb	r3, [r3, #1]
   218c2:	b2db      	uxtb	r3, r3
   218c4:	3301      	adds	r3, #1
   218c6:	b2da      	uxtb	r2, r3
   218c8:	4b05      	ldr	r3, [pc, #20]	; (218e0 <hif_chip_wake+0x68>)
   218ca:	705a      	strb	r2, [r3, #1]
   218cc:	e000      	b.n	218d0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   218ce:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   218d0:	1dfb      	adds	r3, r7, #7
   218d2:	781b      	ldrb	r3, [r3, #0]
   218d4:	b25b      	sxtb	r3, r3
}
   218d6:	0018      	movs	r0, r3
   218d8:	46bd      	mov	sp, r7
   218da:	b003      	add	sp, #12
   218dc:	bd90      	pop	{r4, r7, pc}
   218de:	46c0      	nop			; (mov r8, r8)
   218e0:	20005704 	.word	0x20005704
   218e4:	000232b1 	.word	0x000232b1

000218e8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   218e8:	b580      	push	{r7, lr}
   218ea:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   218ec:	4b07      	ldr	r3, [pc, #28]	; (2190c <hif_chip_sleep_sc+0x24>)
   218ee:	785b      	ldrb	r3, [r3, #1]
   218f0:	b2db      	uxtb	r3, r3
   218f2:	2b00      	cmp	r3, #0
   218f4:	d006      	beq.n	21904 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   218f6:	4b05      	ldr	r3, [pc, #20]	; (2190c <hif_chip_sleep_sc+0x24>)
   218f8:	785b      	ldrb	r3, [r3, #1]
   218fa:	b2db      	uxtb	r3, r3
   218fc:	3b01      	subs	r3, #1
   218fe:	b2da      	uxtb	r2, r3
   21900:	4b02      	ldr	r3, [pc, #8]	; (2190c <hif_chip_sleep_sc+0x24>)
   21902:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   21904:	2300      	movs	r3, #0
}
   21906:	0018      	movs	r0, r3
   21908:	46bd      	mov	sp, r7
   2190a:	bd80      	pop	{r7, pc}
   2190c:	20005704 	.word	0x20005704

00021910 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   21910:	b590      	push	{r4, r7, lr}
   21912:	b083      	sub	sp, #12
   21914:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21916:	1dfb      	adds	r3, r7, #7
   21918:	2200      	movs	r2, #0
   2191a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   2191c:	4b10      	ldr	r3, [pc, #64]	; (21960 <hif_chip_sleep+0x50>)
   2191e:	785b      	ldrb	r3, [r3, #1]
   21920:	b2db      	uxtb	r3, r3
   21922:	2b00      	cmp	r3, #0
   21924:	d006      	beq.n	21934 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   21926:	4b0e      	ldr	r3, [pc, #56]	; (21960 <hif_chip_sleep+0x50>)
   21928:	785b      	ldrb	r3, [r3, #1]
   2192a:	b2db      	uxtb	r3, r3
   2192c:	3b01      	subs	r3, #1
   2192e:	b2da      	uxtb	r2, r3
   21930:	4b0b      	ldr	r3, [pc, #44]	; (21960 <hif_chip_sleep+0x50>)
   21932:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   21934:	4b0a      	ldr	r3, [pc, #40]	; (21960 <hif_chip_sleep+0x50>)
   21936:	785b      	ldrb	r3, [r3, #1]
   21938:	b2db      	uxtb	r3, r3
   2193a:	2b00      	cmp	r3, #0
   2193c:	d109      	bne.n	21952 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   2193e:	4b08      	ldr	r3, [pc, #32]	; (21960 <hif_chip_sleep+0x50>)
   21940:	781b      	ldrb	r3, [r3, #0]
   21942:	b2db      	uxtb	r3, r3
   21944:	2b00      	cmp	r3, #0
   21946:	d004      	beq.n	21952 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   21948:	1dfc      	adds	r4, r7, #7
   2194a:	4b06      	ldr	r3, [pc, #24]	; (21964 <hif_chip_sleep+0x54>)
   2194c:	4798      	blx	r3
   2194e:	0003      	movs	r3, r0
   21950:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   21952:	1dfb      	adds	r3, r7, #7
   21954:	781b      	ldrb	r3, [r3, #0]
   21956:	b25b      	sxtb	r3, r3
}
   21958:	0018      	movs	r0, r3
   2195a:	46bd      	mov	sp, r7
   2195c:	b003      	add	sp, #12
   2195e:	bd90      	pop	{r4, r7, pc}
   21960:	20005704 	.word	0x20005704
   21964:	000231d9 	.word	0x000231d9

00021968 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   21968:	b580      	push	{r7, lr}
   2196a:	b082      	sub	sp, #8
   2196c:	af00      	add	r7, sp, #0
   2196e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   21970:	4b09      	ldr	r3, [pc, #36]	; (21998 <hif_init+0x30>)
   21972:	222c      	movs	r2, #44	; 0x2c
   21974:	2100      	movs	r1, #0
   21976:	0018      	movs	r0, r3
   21978:	4b08      	ldr	r3, [pc, #32]	; (2199c <hif_init+0x34>)
   2197a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   2197c:	4b08      	ldr	r3, [pc, #32]	; (219a0 <hif_init+0x38>)
   2197e:	0018      	movs	r0, r3
   21980:	4b08      	ldr	r3, [pc, #32]	; (219a4 <hif_init+0x3c>)
   21982:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   21984:	4b08      	ldr	r3, [pc, #32]	; (219a8 <hif_init+0x40>)
   21986:	0019      	movs	r1, r3
   21988:	2003      	movs	r0, #3
   2198a:	4b08      	ldr	r3, [pc, #32]	; (219ac <hif_init+0x44>)
   2198c:	4798      	blx	r3
	return M2M_SUCCESS;
   2198e:	2300      	movs	r3, #0
}
   21990:	0018      	movs	r0, r3
   21992:	46bd      	mov	sp, r7
   21994:	b002      	add	sp, #8
   21996:	bd80      	pop	{r7, pc}
   21998:	20005704 	.word	0x20005704
   2199c:	00021751 	.word	0x00021751
   219a0:	000217cd 	.word	0x000217cd
   219a4:	00020e8d 	.word	0x00020e8d
   219a8:	0002185d 	.word	0x0002185d
   219ac:	0002244d 	.word	0x0002244d

000219b0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   219b0:	b590      	push	{r4, r7, lr}
   219b2:	b089      	sub	sp, #36	; 0x24
   219b4:	af00      	add	r7, sp, #0
   219b6:	0004      	movs	r4, r0
   219b8:	0008      	movs	r0, r1
   219ba:	603a      	str	r2, [r7, #0]
   219bc:	0019      	movs	r1, r3
   219be:	1dfb      	adds	r3, r7, #7
   219c0:	1c22      	adds	r2, r4, #0
   219c2:	701a      	strb	r2, [r3, #0]
   219c4:	1dbb      	adds	r3, r7, #6
   219c6:	1c02      	adds	r2, r0, #0
   219c8:	701a      	strb	r2, [r3, #0]
   219ca:	1d3b      	adds	r3, r7, #4
   219cc:	1c0a      	adds	r2, r1, #0
   219ce:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   219d0:	231f      	movs	r3, #31
   219d2:	18fb      	adds	r3, r7, r3
   219d4:	22ff      	movs	r2, #255	; 0xff
   219d6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   219d8:	1dbb      	adds	r3, r7, #6
   219da:	781b      	ldrb	r3, [r3, #0]
   219dc:	227f      	movs	r2, #127	; 0x7f
   219de:	4013      	ands	r3, r2
   219e0:	b2da      	uxtb	r2, r3
   219e2:	2318      	movs	r3, #24
   219e4:	18fb      	adds	r3, r7, r3
   219e6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   219e8:	2318      	movs	r3, #24
   219ea:	18fb      	adds	r3, r7, r3
   219ec:	1dfa      	adds	r2, r7, #7
   219ee:	7812      	ldrb	r2, [r2, #0]
   219f0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   219f2:	2318      	movs	r3, #24
   219f4:	18fb      	adds	r3, r7, r3
   219f6:	2208      	movs	r2, #8
   219f8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   219fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   219fc:	2b00      	cmp	r3, #0
   219fe:	d011      	beq.n	21a24 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   21a00:	2318      	movs	r3, #24
   21a02:	18fb      	adds	r3, r7, r3
   21a04:	885b      	ldrh	r3, [r3, #2]
   21a06:	b29a      	uxth	r2, r3
   21a08:	2338      	movs	r3, #56	; 0x38
   21a0a:	18f9      	adds	r1, r7, r3
   21a0c:	2334      	movs	r3, #52	; 0x34
   21a0e:	18fb      	adds	r3, r7, r3
   21a10:	8809      	ldrh	r1, [r1, #0]
   21a12:	881b      	ldrh	r3, [r3, #0]
   21a14:	18cb      	adds	r3, r1, r3
   21a16:	b29b      	uxth	r3, r3
   21a18:	18d3      	adds	r3, r2, r3
   21a1a:	b29a      	uxth	r2, r3
   21a1c:	2318      	movs	r3, #24
   21a1e:	18fb      	adds	r3, r7, r3
   21a20:	805a      	strh	r2, [r3, #2]
   21a22:	e00a      	b.n	21a3a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   21a24:	2318      	movs	r3, #24
   21a26:	18fb      	adds	r3, r7, r3
   21a28:	885b      	ldrh	r3, [r3, #2]
   21a2a:	b29a      	uxth	r2, r3
   21a2c:	1d3b      	adds	r3, r7, #4
   21a2e:	881b      	ldrh	r3, [r3, #0]
   21a30:	18d3      	adds	r3, r2, r3
   21a32:	b29a      	uxth	r2, r3
   21a34:	2318      	movs	r3, #24
   21a36:	18fb      	adds	r3, r7, r3
   21a38:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   21a3a:	231f      	movs	r3, #31
   21a3c:	18fc      	adds	r4, r7, r3
   21a3e:	4bb2      	ldr	r3, [pc, #712]	; (21d08 <hif_send+0x358>)
   21a40:	4798      	blx	r3
   21a42:	0003      	movs	r3, r0
   21a44:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   21a46:	231f      	movs	r3, #31
   21a48:	18fb      	adds	r3, r7, r3
   21a4a:	781b      	ldrb	r3, [r3, #0]
   21a4c:	b25b      	sxtb	r3, r3
   21a4e:	2b00      	cmp	r3, #0
   21a50:	d000      	beq.n	21a54 <hif_send+0xa4>
   21a52:	e129      	b.n	21ca8 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   21a54:	2300      	movs	r3, #0
   21a56:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   21a58:	230e      	movs	r3, #14
   21a5a:	18fb      	adds	r3, r7, r3
   21a5c:	2200      	movs	r2, #0
   21a5e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   21a60:	2300      	movs	r3, #0
   21a62:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   21a64:	1dfb      	adds	r3, r7, #7
   21a66:	781a      	ldrb	r2, [r3, #0]
   21a68:	697b      	ldr	r3, [r7, #20]
   21a6a:	4313      	orrs	r3, r2
   21a6c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   21a6e:	1dbb      	adds	r3, r7, #6
   21a70:	781b      	ldrb	r3, [r3, #0]
   21a72:	021a      	lsls	r2, r3, #8
   21a74:	697b      	ldr	r3, [r7, #20]
   21a76:	4313      	orrs	r3, r2
   21a78:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   21a7a:	2318      	movs	r3, #24
   21a7c:	18fb      	adds	r3, r7, r3
   21a7e:	885b      	ldrh	r3, [r3, #2]
   21a80:	b29b      	uxth	r3, r3
   21a82:	041a      	lsls	r2, r3, #16
   21a84:	697b      	ldr	r3, [r7, #20]
   21a86:	4313      	orrs	r3, r2
   21a88:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   21a8a:	697b      	ldr	r3, [r7, #20]
   21a8c:	221f      	movs	r2, #31
   21a8e:	18bc      	adds	r4, r7, r2
   21a90:	4a9e      	ldr	r2, [pc, #632]	; (21d0c <hif_send+0x35c>)
   21a92:	0019      	movs	r1, r3
   21a94:	0010      	movs	r0, r2
   21a96:	4b9e      	ldr	r3, [pc, #632]	; (21d10 <hif_send+0x360>)
   21a98:	4798      	blx	r3
   21a9a:	0003      	movs	r3, r0
   21a9c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21a9e:	231f      	movs	r3, #31
   21aa0:	18fb      	adds	r3, r7, r3
   21aa2:	781b      	ldrb	r3, [r3, #0]
   21aa4:	b25b      	sxtb	r3, r3
   21aa6:	2b00      	cmp	r3, #0
   21aa8:	d000      	beq.n	21aac <hif_send+0xfc>
   21aaa:	e119      	b.n	21ce0 <hif_send+0x330>

		reg = 0UL;
   21aac:	2300      	movs	r3, #0
   21aae:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   21ab0:	697b      	ldr	r3, [r7, #20]
   21ab2:	2202      	movs	r2, #2
   21ab4:	4313      	orrs	r3, r2
   21ab6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   21ab8:	697b      	ldr	r3, [r7, #20]
   21aba:	221f      	movs	r2, #31
   21abc:	18bc      	adds	r4, r7, r2
   21abe:	4a95      	ldr	r2, [pc, #596]	; (21d14 <hif_send+0x364>)
   21ac0:	0019      	movs	r1, r3
   21ac2:	0010      	movs	r0, r2
   21ac4:	4b92      	ldr	r3, [pc, #584]	; (21d10 <hif_send+0x360>)
   21ac6:	4798      	blx	r3
   21ac8:	0003      	movs	r3, r0
   21aca:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21acc:	231f      	movs	r3, #31
   21ace:	18fb      	adds	r3, r7, r3
   21ad0:	781b      	ldrb	r3, [r3, #0]
   21ad2:	b25b      	sxtb	r3, r3
   21ad4:	2b00      	cmp	r3, #0
   21ad6:	d000      	beq.n	21ada <hif_send+0x12a>
   21ad8:	e104      	b.n	21ce4 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   21ada:	2300      	movs	r3, #0
   21adc:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   21ade:	230e      	movs	r3, #14
   21ae0:	18fb      	adds	r3, r7, r3
   21ae2:	2200      	movs	r2, #0
   21ae4:	801a      	strh	r2, [r3, #0]
   21ae6:	e050      	b.n	21b8a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21ae8:	231f      	movs	r3, #31
   21aea:	18fc      	adds	r4, r7, r3
   21aec:	2314      	movs	r3, #20
   21aee:	18fb      	adds	r3, r7, r3
   21af0:	4a88      	ldr	r2, [pc, #544]	; (21d14 <hif_send+0x364>)
   21af2:	0019      	movs	r1, r3
   21af4:	0010      	movs	r0, r2
   21af6:	4b88      	ldr	r3, [pc, #544]	; (21d18 <hif_send+0x368>)
   21af8:	4798      	blx	r3
   21afa:	0003      	movs	r3, r0
   21afc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   21afe:	231f      	movs	r3, #31
   21b00:	18fb      	adds	r3, r7, r3
   21b02:	781b      	ldrb	r3, [r3, #0]
   21b04:	b25b      	sxtb	r3, r3
   21b06:	2b00      	cmp	r3, #0
   21b08:	d147      	bne.n	21b9a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   21b0a:	230e      	movs	r3, #14
   21b0c:	18fb      	adds	r3, r7, r3
   21b0e:	881b      	ldrh	r3, [r3, #0]
   21b10:	b29a      	uxth	r2, r3
   21b12:	23f4      	movs	r3, #244	; 0xf4
   21b14:	33ff      	adds	r3, #255	; 0xff
   21b16:	429a      	cmp	r2, r3
   21b18:	d916      	bls.n	21b48 <hif_send+0x198>
				if(cnt < 501) {
   21b1a:	230e      	movs	r3, #14
   21b1c:	18fb      	adds	r3, r7, r3
   21b1e:	881b      	ldrh	r3, [r3, #0]
   21b20:	b29a      	uxth	r2, r3
   21b22:	23fa      	movs	r3, #250	; 0xfa
   21b24:	005b      	lsls	r3, r3, #1
   21b26:	429a      	cmp	r2, r3
   21b28:	d80b      	bhi.n	21b42 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   21b2a:	4b7c      	ldr	r3, [pc, #496]	; (21d1c <hif_send+0x36c>)
   21b2c:	0018      	movs	r0, r3
   21b2e:	4b7c      	ldr	r3, [pc, #496]	; (21d20 <hif_send+0x370>)
   21b30:	4798      	blx	r3
   21b32:	4b7c      	ldr	r3, [pc, #496]	; (21d24 <hif_send+0x374>)
   21b34:	0018      	movs	r0, r3
   21b36:	4b7a      	ldr	r3, [pc, #488]	; (21d20 <hif_send+0x370>)
   21b38:	4798      	blx	r3
   21b3a:	4b7b      	ldr	r3, [pc, #492]	; (21d28 <hif_send+0x378>)
   21b3c:	0018      	movs	r0, r3
   21b3e:	4b78      	ldr	r3, [pc, #480]	; (21d20 <hif_send+0x370>)
   21b40:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   21b42:	2001      	movs	r0, #1
   21b44:	4b79      	ldr	r3, [pc, #484]	; (21d2c <hif_send+0x37c>)
   21b46:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21b48:	697b      	ldr	r3, [r7, #20]
   21b4a:	2202      	movs	r2, #2
   21b4c:	4013      	ands	r3, r2
   21b4e:	d113      	bne.n	21b78 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   21b50:	231f      	movs	r3, #31
   21b52:	18fc      	adds	r4, r7, r3
   21b54:	2310      	movs	r3, #16
   21b56:	18fb      	adds	r3, r7, r3
   21b58:	4a75      	ldr	r2, [pc, #468]	; (21d30 <hif_send+0x380>)
   21b5a:	0019      	movs	r1, r3
   21b5c:	0010      	movs	r0, r2
   21b5e:	4b6e      	ldr	r3, [pc, #440]	; (21d18 <hif_send+0x368>)
   21b60:	4798      	blx	r3
   21b62:	0003      	movs	r3, r0
   21b64:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   21b66:	231f      	movs	r3, #31
   21b68:	18fb      	adds	r3, r7, r3
   21b6a:	781b      	ldrb	r3, [r3, #0]
   21b6c:	b25b      	sxtb	r3, r3
   21b6e:	2b00      	cmp	r3, #0
   21b70:	d015      	beq.n	21b9e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   21b72:	2300      	movs	r3, #0
   21b74:	613b      	str	r3, [r7, #16]
					goto ERR1;
   21b76:	e0bc      	b.n	21cf2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   21b78:	230e      	movs	r3, #14
   21b7a:	18fb      	adds	r3, r7, r3
   21b7c:	881b      	ldrh	r3, [r3, #0]
   21b7e:	b29b      	uxth	r3, r3
   21b80:	3301      	adds	r3, #1
   21b82:	b29a      	uxth	r2, r3
   21b84:	230e      	movs	r3, #14
   21b86:	18fb      	adds	r3, r7, r3
   21b88:	801a      	strh	r2, [r3, #0]
   21b8a:	230e      	movs	r3, #14
   21b8c:	18fb      	adds	r3, r7, r3
   21b8e:	881b      	ldrh	r3, [r3, #0]
   21b90:	b29b      	uxth	r3, r3
   21b92:	4a68      	ldr	r2, [pc, #416]	; (21d34 <hif_send+0x384>)
   21b94:	4293      	cmp	r3, r2
   21b96:	d9a7      	bls.n	21ae8 <hif_send+0x138>
   21b98:	e002      	b.n	21ba0 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   21b9a:	46c0      	nop			; (mov r8, r8)
   21b9c:	e000      	b.n	21ba0 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   21b9e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   21ba0:	693b      	ldr	r3, [r7, #16]
   21ba2:	2b00      	cmp	r3, #0
   21ba4:	d100      	bne.n	21ba8 <hif_send+0x1f8>
   21ba6:	e074      	b.n	21c92 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   21ba8:	693b      	ldr	r3, [r7, #16]
   21baa:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   21bac:	2318      	movs	r3, #24
   21bae:	18fb      	adds	r3, r7, r3
   21bb0:	885b      	ldrh	r3, [r3, #2]
   21bb2:	b29a      	uxth	r2, r3
   21bb4:	2318      	movs	r3, #24
   21bb6:	18fb      	adds	r3, r7, r3
   21bb8:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   21bba:	68bb      	ldr	r3, [r7, #8]
   21bbc:	221f      	movs	r2, #31
   21bbe:	18bc      	adds	r4, r7, r2
   21bc0:	2218      	movs	r2, #24
   21bc2:	18b9      	adds	r1, r7, r2
   21bc4:	2208      	movs	r2, #8
   21bc6:	0018      	movs	r0, r3
   21bc8:	4b5b      	ldr	r3, [pc, #364]	; (21d38 <hif_send+0x388>)
   21bca:	4798      	blx	r3
   21bcc:	0003      	movs	r3, r0
   21bce:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21bd0:	231f      	movs	r3, #31
   21bd2:	18fb      	adds	r3, r7, r3
   21bd4:	781b      	ldrb	r3, [r3, #0]
   21bd6:	b25b      	sxtb	r3, r3
   21bd8:	2b00      	cmp	r3, #0
   21bda:	d000      	beq.n	21bde <hif_send+0x22e>
   21bdc:	e084      	b.n	21ce8 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   21bde:	68bb      	ldr	r3, [r7, #8]
   21be0:	3308      	adds	r3, #8
   21be2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21be4:	683b      	ldr	r3, [r7, #0]
   21be6:	2b00      	cmp	r3, #0
   21be8:	d016      	beq.n	21c18 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   21bea:	68b8      	ldr	r0, [r7, #8]
   21bec:	1d3b      	adds	r3, r7, #4
   21bee:	881a      	ldrh	r2, [r3, #0]
   21bf0:	231f      	movs	r3, #31
   21bf2:	18fc      	adds	r4, r7, r3
   21bf4:	683b      	ldr	r3, [r7, #0]
   21bf6:	0019      	movs	r1, r3
   21bf8:	4b4f      	ldr	r3, [pc, #316]	; (21d38 <hif_send+0x388>)
   21bfa:	4798      	blx	r3
   21bfc:	0003      	movs	r3, r0
   21bfe:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21c00:	231f      	movs	r3, #31
   21c02:	18fb      	adds	r3, r7, r3
   21c04:	781b      	ldrb	r3, [r3, #0]
   21c06:	b25b      	sxtb	r3, r3
   21c08:	2b00      	cmp	r3, #0
   21c0a:	d000      	beq.n	21c0e <hif_send+0x25e>
   21c0c:	e06e      	b.n	21cec <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   21c0e:	1d3b      	adds	r3, r7, #4
   21c10:	881a      	ldrh	r2, [r3, #0]
   21c12:	68bb      	ldr	r3, [r7, #8]
   21c14:	18d3      	adds	r3, r2, r3
   21c16:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21c1a:	2b00      	cmp	r3, #0
   21c1c:	d021      	beq.n	21c62 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   21c1e:	2338      	movs	r3, #56	; 0x38
   21c20:	18fb      	adds	r3, r7, r3
   21c22:	881a      	ldrh	r2, [r3, #0]
   21c24:	1d3b      	adds	r3, r7, #4
   21c26:	881b      	ldrh	r3, [r3, #0]
   21c28:	1ad3      	subs	r3, r2, r3
   21c2a:	001a      	movs	r2, r3
   21c2c:	68bb      	ldr	r3, [r7, #8]
   21c2e:	18d3      	adds	r3, r2, r3
   21c30:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   21c32:	68b8      	ldr	r0, [r7, #8]
   21c34:	2334      	movs	r3, #52	; 0x34
   21c36:	18fb      	adds	r3, r7, r3
   21c38:	881a      	ldrh	r2, [r3, #0]
   21c3a:	231f      	movs	r3, #31
   21c3c:	18fc      	adds	r4, r7, r3
   21c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21c40:	0019      	movs	r1, r3
   21c42:	4b3d      	ldr	r3, [pc, #244]	; (21d38 <hif_send+0x388>)
   21c44:	4798      	blx	r3
   21c46:	0003      	movs	r3, r0
   21c48:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21c4a:	231f      	movs	r3, #31
   21c4c:	18fb      	adds	r3, r7, r3
   21c4e:	781b      	ldrb	r3, [r3, #0]
   21c50:	b25b      	sxtb	r3, r3
   21c52:	2b00      	cmp	r3, #0
   21c54:	d14c      	bne.n	21cf0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21c56:	2334      	movs	r3, #52	; 0x34
   21c58:	18fb      	adds	r3, r7, r3
   21c5a:	881a      	ldrh	r2, [r3, #0]
   21c5c:	68bb      	ldr	r3, [r7, #8]
   21c5e:	18d3      	adds	r3, r2, r3
   21c60:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   21c62:	693b      	ldr	r3, [r7, #16]
   21c64:	009b      	lsls	r3, r3, #2
   21c66:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   21c68:	697b      	ldr	r3, [r7, #20]
   21c6a:	2202      	movs	r2, #2
   21c6c:	4313      	orrs	r3, r2
   21c6e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   21c70:	697b      	ldr	r3, [r7, #20]
   21c72:	221f      	movs	r2, #31
   21c74:	18bc      	adds	r4, r7, r2
   21c76:	4a31      	ldr	r2, [pc, #196]	; (21d3c <hif_send+0x38c>)
   21c78:	0019      	movs	r1, r3
   21c7a:	0010      	movs	r0, r2
   21c7c:	4b24      	ldr	r3, [pc, #144]	; (21d10 <hif_send+0x360>)
   21c7e:	4798      	blx	r3
   21c80:	0003      	movs	r3, r0
   21c82:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21c84:	231f      	movs	r3, #31
   21c86:	18fb      	adds	r3, r7, r3
   21c88:	781b      	ldrb	r3, [r3, #0]
   21c8a:	b25b      	sxtb	r3, r3
   21c8c:	2b00      	cmp	r3, #0
   21c8e:	d01c      	beq.n	21cca <hif_send+0x31a>
   21c90:	e02f      	b.n	21cf2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   21c92:	231f      	movs	r3, #31
   21c94:	18fc      	adds	r4, r7, r3
   21c96:	4b2a      	ldr	r3, [pc, #168]	; (21d40 <hif_send+0x390>)
   21c98:	4798      	blx	r3
   21c9a:	0003      	movs	r3, r0
   21c9c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   21c9e:	231f      	movs	r3, #31
   21ca0:	18fb      	adds	r3, r7, r3
   21ca2:	22fd      	movs	r2, #253	; 0xfd
   21ca4:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   21ca6:	e026      	b.n	21cf6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   21ca8:	2398      	movs	r3, #152	; 0x98
   21caa:	33ff      	adds	r3, #255	; 0xff
   21cac:	001a      	movs	r2, r3
   21cae:	4925      	ldr	r1, [pc, #148]	; (21d44 <hif_send+0x394>)
   21cb0:	4b25      	ldr	r3, [pc, #148]	; (21d48 <hif_send+0x398>)
   21cb2:	0018      	movs	r0, r3
   21cb4:	4b1a      	ldr	r3, [pc, #104]	; (21d20 <hif_send+0x370>)
   21cb6:	4798      	blx	r3
   21cb8:	4b24      	ldr	r3, [pc, #144]	; (21d4c <hif_send+0x39c>)
   21cba:	0018      	movs	r0, r3
   21cbc:	4b18      	ldr	r3, [pc, #96]	; (21d20 <hif_send+0x370>)
   21cbe:	4798      	blx	r3
   21cc0:	4b19      	ldr	r3, [pc, #100]	; (21d28 <hif_send+0x378>)
   21cc2:	0018      	movs	r0, r3
   21cc4:	4b16      	ldr	r3, [pc, #88]	; (21d20 <hif_send+0x370>)
   21cc6:	4798      	blx	r3
		goto ERR2;
   21cc8:	e015      	b.n	21cf6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   21cca:	231f      	movs	r3, #31
   21ccc:	18fc      	adds	r4, r7, r3
   21cce:	4b1c      	ldr	r3, [pc, #112]	; (21d40 <hif_send+0x390>)
   21cd0:	4798      	blx	r3
   21cd2:	0003      	movs	r3, r0
   21cd4:	7023      	strb	r3, [r4, #0]
	return ret;
   21cd6:	231f      	movs	r3, #31
   21cd8:	18fb      	adds	r3, r7, r3
   21cda:	781b      	ldrb	r3, [r3, #0]
   21cdc:	b25b      	sxtb	r3, r3
   21cde:	e00e      	b.n	21cfe <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   21ce0:	46c0      	nop			; (mov r8, r8)
   21ce2:	e006      	b.n	21cf2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21ce4:	46c0      	nop			; (mov r8, r8)
   21ce6:	e004      	b.n	21cf2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21ce8:	46c0      	nop			; (mov r8, r8)
   21cea:	e002      	b.n	21cf2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21cec:	46c0      	nop			; (mov r8, r8)
   21cee:	e000      	b.n	21cf2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21cf0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   21cf2:	4b17      	ldr	r3, [pc, #92]	; (21d50 <hif_send+0x3a0>)
   21cf4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   21cf6:	231f      	movs	r3, #31
   21cf8:	18fb      	adds	r3, r7, r3
   21cfa:	781b      	ldrb	r3, [r3, #0]
   21cfc:	b25b      	sxtb	r3, r3
}
   21cfe:	0018      	movs	r0, r3
   21d00:	46bd      	mov	sp, r7
   21d02:	b009      	add	sp, #36	; 0x24
   21d04:	bd90      	pop	{r4, r7, pc}
   21d06:	46c0      	nop			; (mov r8, r8)
   21d08:	00021879 	.word	0x00021879
   21d0c:	0000108c 	.word	0x0000108c
   21d10:	00023805 	.word	0x00023805
   21d14:	00001078 	.word	0x00001078
   21d18:	000237e1 	.word	0x000237e1
   21d1c:	00038ecc 	.word	0x00038ecc
   21d20:	0001ea1d 	.word	0x0001ea1d
   21d24:	00038ed8 	.word	0x00038ed8
   21d28:	00038eec 	.word	0x00038eec
   21d2c:	00020e71 	.word	0x00020e71
   21d30:	00150400 	.word	0x00150400
   21d34:	000003e7 	.word	0x000003e7
   21d38:	0002394d 	.word	0x0002394d
   21d3c:	0000106c 	.word	0x0000106c
   21d40:	00021911 	.word	0x00021911
   21d44:	000391f4 	.word	0x000391f4
   21d48:	00038ef0 	.word	0x00038ef0
   21d4c:	00038f04 	.word	0x00038f04
   21d50:	000218e9 	.word	0x000218e9

00021d54 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   21d54:	b590      	push	{r4, r7, lr}
   21d56:	b087      	sub	sp, #28
   21d58:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   21d5a:	230f      	movs	r3, #15
   21d5c:	18fb      	adds	r3, r7, r3
   21d5e:	2200      	movs	r2, #0
   21d60:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   21d62:	230f      	movs	r3, #15
   21d64:	18fc      	adds	r4, r7, r3
   21d66:	2308      	movs	r3, #8
   21d68:	18fb      	adds	r3, r7, r3
   21d6a:	4adc      	ldr	r2, [pc, #880]	; (220dc <hif_isr+0x388>)
   21d6c:	0019      	movs	r1, r3
   21d6e:	0010      	movs	r0, r2
   21d70:	4bdb      	ldr	r3, [pc, #876]	; (220e0 <hif_isr+0x38c>)
   21d72:	4798      	blx	r3
   21d74:	0003      	movs	r3, r0
   21d76:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   21d78:	230f      	movs	r3, #15
   21d7a:	18fb      	adds	r3, r7, r3
   21d7c:	781b      	ldrb	r3, [r3, #0]
   21d7e:	b25b      	sxtb	r3, r3
   21d80:	2b00      	cmp	r3, #0
   21d82:	d000      	beq.n	21d86 <hif_isr+0x32>
   21d84:	e21e      	b.n	221c4 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   21d86:	68bb      	ldr	r3, [r7, #8]
   21d88:	2201      	movs	r2, #1
   21d8a:	4013      	ands	r3, r2
   21d8c:	d100      	bne.n	21d90 <hif_isr+0x3c>
   21d8e:	e204      	b.n	2219a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   21d90:	2000      	movs	r0, #0
   21d92:	4bd4      	ldr	r3, [pc, #848]	; (220e4 <hif_isr+0x390>)
   21d94:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   21d96:	68bb      	ldr	r3, [r7, #8]
   21d98:	2201      	movs	r2, #1
   21d9a:	4393      	bics	r3, r2
   21d9c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21d9e:	68bb      	ldr	r3, [r7, #8]
   21da0:	220f      	movs	r2, #15
   21da2:	18bc      	adds	r4, r7, r2
   21da4:	4acd      	ldr	r2, [pc, #820]	; (220dc <hif_isr+0x388>)
   21da6:	0019      	movs	r1, r3
   21da8:	0010      	movs	r0, r2
   21daa:	4bcf      	ldr	r3, [pc, #828]	; (220e8 <hif_isr+0x394>)
   21dac:	4798      	blx	r3
   21dae:	0003      	movs	r3, r0
   21db0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21db2:	230f      	movs	r3, #15
   21db4:	18fb      	adds	r3, r7, r3
   21db6:	781b      	ldrb	r3, [r3, #0]
   21db8:	b25b      	sxtb	r3, r3
   21dba:	2b00      	cmp	r3, #0
   21dbc:	d000      	beq.n	21dc0 <hif_isr+0x6c>
   21dbe:	e210      	b.n	221e2 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   21dc0:	4bca      	ldr	r3, [pc, #808]	; (220ec <hif_isr+0x398>)
   21dc2:	2201      	movs	r2, #1
   21dc4:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   21dc6:	68bb      	ldr	r3, [r7, #8]
   21dc8:	089b      	lsrs	r3, r3, #2
   21dca:	b29a      	uxth	r2, r3
   21dcc:	230c      	movs	r3, #12
   21dce:	18fb      	adds	r3, r7, r3
   21dd0:	0512      	lsls	r2, r2, #20
   21dd2:	0d12      	lsrs	r2, r2, #20
   21dd4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   21dd6:	230c      	movs	r3, #12
   21dd8:	18fb      	adds	r3, r7, r3
   21dda:	881b      	ldrh	r3, [r3, #0]
   21ddc:	2b00      	cmp	r3, #0
   21dde:	d100      	bne.n	21de2 <hif_isr+0x8e>
   21de0:	e1c8      	b.n	22174 <hif_isr+0x420>
				uint32 address = 0;
   21de2:	2300      	movs	r3, #0
   21de4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   21de6:	230f      	movs	r3, #15
   21de8:	18fc      	adds	r4, r7, r3
   21dea:	003b      	movs	r3, r7
   21dec:	4ac0      	ldr	r2, [pc, #768]	; (220f0 <hif_isr+0x39c>)
   21dee:	0019      	movs	r1, r3
   21df0:	0010      	movs	r0, r2
   21df2:	4bbb      	ldr	r3, [pc, #748]	; (220e0 <hif_isr+0x38c>)
   21df4:	4798      	blx	r3
   21df6:	0003      	movs	r3, r0
   21df8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   21dfa:	230f      	movs	r3, #15
   21dfc:	18fb      	adds	r3, r7, r3
   21dfe:	781b      	ldrb	r3, [r3, #0]
   21e00:	b25b      	sxtb	r3, r3
   21e02:	2b00      	cmp	r3, #0
   21e04:	d012      	beq.n	21e2c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   21e06:	23e4      	movs	r3, #228	; 0xe4
   21e08:	005a      	lsls	r2, r3, #1
   21e0a:	49ba      	ldr	r1, [pc, #744]	; (220f4 <hif_isr+0x3a0>)
   21e0c:	4bba      	ldr	r3, [pc, #744]	; (220f8 <hif_isr+0x3a4>)
   21e0e:	0018      	movs	r0, r3
   21e10:	4bba      	ldr	r3, [pc, #744]	; (220fc <hif_isr+0x3a8>)
   21e12:	4798      	blx	r3
   21e14:	4bba      	ldr	r3, [pc, #744]	; (22100 <hif_isr+0x3ac>)
   21e16:	0018      	movs	r0, r3
   21e18:	4bb8      	ldr	r3, [pc, #736]	; (220fc <hif_isr+0x3a8>)
   21e1a:	4798      	blx	r3
   21e1c:	4bb9      	ldr	r3, [pc, #740]	; (22104 <hif_isr+0x3b0>)
   21e1e:	0018      	movs	r0, r3
   21e20:	4bb6      	ldr	r3, [pc, #728]	; (220fc <hif_isr+0x3a8>)
   21e22:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21e24:	2001      	movs	r0, #1
   21e26:	4baf      	ldr	r3, [pc, #700]	; (220e4 <hif_isr+0x390>)
   21e28:	4798      	blx	r3
					goto ERR1;
   21e2a:	e1db      	b.n	221e4 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   21e2c:	683a      	ldr	r2, [r7, #0]
   21e2e:	4baf      	ldr	r3, [pc, #700]	; (220ec <hif_isr+0x398>)
   21e30:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   21e32:	230c      	movs	r3, #12
   21e34:	18fb      	adds	r3, r7, r3
   21e36:	881a      	ldrh	r2, [r3, #0]
   21e38:	4bac      	ldr	r3, [pc, #688]	; (220ec <hif_isr+0x398>)
   21e3a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   21e3c:	683b      	ldr	r3, [r7, #0]
   21e3e:	220f      	movs	r2, #15
   21e40:	18bc      	adds	r4, r7, r2
   21e42:	1d39      	adds	r1, r7, #4
   21e44:	2204      	movs	r2, #4
   21e46:	0018      	movs	r0, r3
   21e48:	4baf      	ldr	r3, [pc, #700]	; (22108 <hif_isr+0x3b4>)
   21e4a:	4798      	blx	r3
   21e4c:	0003      	movs	r3, r0
   21e4e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   21e50:	1d3b      	adds	r3, r7, #4
   21e52:	885b      	ldrh	r3, [r3, #2]
   21e54:	b29a      	uxth	r2, r3
   21e56:	1d3b      	adds	r3, r7, #4
   21e58:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   21e5a:	230f      	movs	r3, #15
   21e5c:	18fb      	adds	r3, r7, r3
   21e5e:	781b      	ldrb	r3, [r3, #0]
   21e60:	b25b      	sxtb	r3, r3
   21e62:	2b00      	cmp	r3, #0
   21e64:	d012      	beq.n	21e8c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   21e66:	23e9      	movs	r3, #233	; 0xe9
   21e68:	005a      	lsls	r2, r3, #1
   21e6a:	49a2      	ldr	r1, [pc, #648]	; (220f4 <hif_isr+0x3a0>)
   21e6c:	4ba2      	ldr	r3, [pc, #648]	; (220f8 <hif_isr+0x3a4>)
   21e6e:	0018      	movs	r0, r3
   21e70:	4ba2      	ldr	r3, [pc, #648]	; (220fc <hif_isr+0x3a8>)
   21e72:	4798      	blx	r3
   21e74:	4ba5      	ldr	r3, [pc, #660]	; (2210c <hif_isr+0x3b8>)
   21e76:	0018      	movs	r0, r3
   21e78:	4ba0      	ldr	r3, [pc, #640]	; (220fc <hif_isr+0x3a8>)
   21e7a:	4798      	blx	r3
   21e7c:	4ba1      	ldr	r3, [pc, #644]	; (22104 <hif_isr+0x3b0>)
   21e7e:	0018      	movs	r0, r3
   21e80:	4b9e      	ldr	r3, [pc, #632]	; (220fc <hif_isr+0x3a8>)
   21e82:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21e84:	2001      	movs	r0, #1
   21e86:	4b97      	ldr	r3, [pc, #604]	; (220e4 <hif_isr+0x390>)
   21e88:	4798      	blx	r3
					goto ERR1;
   21e8a:	e1ab      	b.n	221e4 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   21e8c:	1d3b      	adds	r3, r7, #4
   21e8e:	885b      	ldrh	r3, [r3, #2]
   21e90:	b29b      	uxth	r3, r3
   21e92:	220c      	movs	r2, #12
   21e94:	18ba      	adds	r2, r7, r2
   21e96:	8812      	ldrh	r2, [r2, #0]
   21e98:	429a      	cmp	r2, r3
   21e9a:	d02f      	beq.n	21efc <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   21e9c:	230c      	movs	r3, #12
   21e9e:	18fb      	adds	r3, r7, r3
   21ea0:	881b      	ldrh	r3, [r3, #0]
   21ea2:	1d3a      	adds	r2, r7, #4
   21ea4:	8852      	ldrh	r2, [r2, #2]
   21ea6:	b292      	uxth	r2, r2
   21ea8:	1a9b      	subs	r3, r3, r2
   21eaa:	2b04      	cmp	r3, #4
   21eac:	dd26      	ble.n	21efc <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   21eae:	23dc      	movs	r3, #220	; 0xdc
   21eb0:	33ff      	adds	r3, #255	; 0xff
   21eb2:	001a      	movs	r2, r3
   21eb4:	498f      	ldr	r1, [pc, #572]	; (220f4 <hif_isr+0x3a0>)
   21eb6:	4b90      	ldr	r3, [pc, #576]	; (220f8 <hif_isr+0x3a4>)
   21eb8:	0018      	movs	r0, r3
   21eba:	4b90      	ldr	r3, [pc, #576]	; (220fc <hif_isr+0x3a8>)
   21ebc:	4798      	blx	r3
   21ebe:	230c      	movs	r3, #12
   21ec0:	18fb      	adds	r3, r7, r3
   21ec2:	8819      	ldrh	r1, [r3, #0]
   21ec4:	1d3b      	adds	r3, r7, #4
   21ec6:	885b      	ldrh	r3, [r3, #2]
   21ec8:	b29b      	uxth	r3, r3
   21eca:	001a      	movs	r2, r3
   21ecc:	1d3b      	adds	r3, r7, #4
   21ece:	781b      	ldrb	r3, [r3, #0]
   21ed0:	b2db      	uxtb	r3, r3
   21ed2:	001c      	movs	r4, r3
   21ed4:	1d3b      	adds	r3, r7, #4
   21ed6:	785b      	ldrb	r3, [r3, #1]
   21ed8:	b2db      	uxtb	r3, r3
   21eda:	488d      	ldr	r0, [pc, #564]	; (22110 <hif_isr+0x3bc>)
   21edc:	9300      	str	r3, [sp, #0]
   21ede:	0023      	movs	r3, r4
   21ee0:	4c86      	ldr	r4, [pc, #536]	; (220fc <hif_isr+0x3a8>)
   21ee2:	47a0      	blx	r4
   21ee4:	4b87      	ldr	r3, [pc, #540]	; (22104 <hif_isr+0x3b0>)
   21ee6:	0018      	movs	r0, r3
   21ee8:	4b84      	ldr	r3, [pc, #528]	; (220fc <hif_isr+0x3a8>)
   21eea:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   21eec:	2001      	movs	r0, #1
   21eee:	4b7d      	ldr	r3, [pc, #500]	; (220e4 <hif_isr+0x390>)
   21ef0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   21ef2:	230f      	movs	r3, #15
   21ef4:	18fb      	adds	r3, r7, r3
   21ef6:	22fa      	movs	r2, #250	; 0xfa
   21ef8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   21efa:	e173      	b.n	221e4 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   21efc:	1d3b      	adds	r3, r7, #4
   21efe:	781b      	ldrb	r3, [r3, #0]
   21f00:	b2db      	uxtb	r3, r3
   21f02:	2b01      	cmp	r3, #1
   21f04:	d122      	bne.n	21f4c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   21f06:	4b79      	ldr	r3, [pc, #484]	; (220ec <hif_isr+0x398>)
   21f08:	691b      	ldr	r3, [r3, #16]
   21f0a:	2b00      	cmp	r3, #0
   21f0c:	d00d      	beq.n	21f2a <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21f0e:	4b77      	ldr	r3, [pc, #476]	; (220ec <hif_isr+0x398>)
   21f10:	691b      	ldr	r3, [r3, #16]
   21f12:	1d3a      	adds	r2, r7, #4
   21f14:	7852      	ldrb	r2, [r2, #1]
   21f16:	b2d0      	uxtb	r0, r2
   21f18:	1d3a      	adds	r2, r7, #4
   21f1a:	8852      	ldrh	r2, [r2, #2]
   21f1c:	b292      	uxth	r2, r2
   21f1e:	3a08      	subs	r2, #8
   21f20:	b291      	uxth	r1, r2
   21f22:	683a      	ldr	r2, [r7, #0]
   21f24:	3208      	adds	r2, #8
   21f26:	4798      	blx	r3
   21f28:	e102      	b.n	22130 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   21f2a:	23e8      	movs	r3, #232	; 0xe8
   21f2c:	33ff      	adds	r3, #255	; 0xff
   21f2e:	001a      	movs	r2, r3
   21f30:	4970      	ldr	r1, [pc, #448]	; (220f4 <hif_isr+0x3a0>)
   21f32:	4b71      	ldr	r3, [pc, #452]	; (220f8 <hif_isr+0x3a4>)
   21f34:	0018      	movs	r0, r3
   21f36:	4b71      	ldr	r3, [pc, #452]	; (220fc <hif_isr+0x3a8>)
   21f38:	4798      	blx	r3
   21f3a:	4b76      	ldr	r3, [pc, #472]	; (22114 <hif_isr+0x3c0>)
   21f3c:	0018      	movs	r0, r3
   21f3e:	4b6f      	ldr	r3, [pc, #444]	; (220fc <hif_isr+0x3a8>)
   21f40:	4798      	blx	r3
   21f42:	4b70      	ldr	r3, [pc, #448]	; (22104 <hif_isr+0x3b0>)
   21f44:	0018      	movs	r0, r3
   21f46:	4b6d      	ldr	r3, [pc, #436]	; (220fc <hif_isr+0x3a8>)
   21f48:	4798      	blx	r3
   21f4a:	e0f1      	b.n	22130 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   21f4c:	1d3b      	adds	r3, r7, #4
   21f4e:	781b      	ldrb	r3, [r3, #0]
   21f50:	b2db      	uxtb	r3, r3
   21f52:	2b02      	cmp	r3, #2
   21f54:	d122      	bne.n	21f9c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   21f56:	4b65      	ldr	r3, [pc, #404]	; (220ec <hif_isr+0x398>)
   21f58:	695b      	ldr	r3, [r3, #20]
   21f5a:	2b00      	cmp	r3, #0
   21f5c:	d00d      	beq.n	21f7a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21f5e:	4b63      	ldr	r3, [pc, #396]	; (220ec <hif_isr+0x398>)
   21f60:	695b      	ldr	r3, [r3, #20]
   21f62:	1d3a      	adds	r2, r7, #4
   21f64:	7852      	ldrb	r2, [r2, #1]
   21f66:	b2d0      	uxtb	r0, r2
   21f68:	1d3a      	adds	r2, r7, #4
   21f6a:	8852      	ldrh	r2, [r2, #2]
   21f6c:	b292      	uxth	r2, r2
   21f6e:	3a08      	subs	r2, #8
   21f70:	b291      	uxth	r1, r2
   21f72:	683a      	ldr	r2, [r7, #0]
   21f74:	3208      	adds	r2, #8
   21f76:	4798      	blx	r3
   21f78:	e0da      	b.n	22130 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   21f7a:	23f0      	movs	r3, #240	; 0xf0
   21f7c:	33ff      	adds	r3, #255	; 0xff
   21f7e:	001a      	movs	r2, r3
   21f80:	495c      	ldr	r1, [pc, #368]	; (220f4 <hif_isr+0x3a0>)
   21f82:	4b5d      	ldr	r3, [pc, #372]	; (220f8 <hif_isr+0x3a4>)
   21f84:	0018      	movs	r0, r3
   21f86:	4b5d      	ldr	r3, [pc, #372]	; (220fc <hif_isr+0x3a8>)
   21f88:	4798      	blx	r3
   21f8a:	4b63      	ldr	r3, [pc, #396]	; (22118 <hif_isr+0x3c4>)
   21f8c:	0018      	movs	r0, r3
   21f8e:	4b5b      	ldr	r3, [pc, #364]	; (220fc <hif_isr+0x3a8>)
   21f90:	4798      	blx	r3
   21f92:	4b5c      	ldr	r3, [pc, #368]	; (22104 <hif_isr+0x3b0>)
   21f94:	0018      	movs	r0, r3
   21f96:	4b59      	ldr	r3, [pc, #356]	; (220fc <hif_isr+0x3a8>)
   21f98:	4798      	blx	r3
   21f9a:	e0c9      	b.n	22130 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   21f9c:	1d3b      	adds	r3, r7, #4
   21f9e:	781b      	ldrb	r3, [r3, #0]
   21fa0:	b2db      	uxtb	r3, r3
   21fa2:	2b04      	cmp	r3, #4
   21fa4:	d122      	bne.n	21fec <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   21fa6:	4b51      	ldr	r3, [pc, #324]	; (220ec <hif_isr+0x398>)
   21fa8:	699b      	ldr	r3, [r3, #24]
   21faa:	2b00      	cmp	r3, #0
   21fac:	d00d      	beq.n	21fca <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21fae:	4b4f      	ldr	r3, [pc, #316]	; (220ec <hif_isr+0x398>)
   21fb0:	699b      	ldr	r3, [r3, #24]
   21fb2:	1d3a      	adds	r2, r7, #4
   21fb4:	7852      	ldrb	r2, [r2, #1]
   21fb6:	b2d0      	uxtb	r0, r2
   21fb8:	1d3a      	adds	r2, r7, #4
   21fba:	8852      	ldrh	r2, [r2, #2]
   21fbc:	b292      	uxth	r2, r2
   21fbe:	3a08      	subs	r2, #8
   21fc0:	b291      	uxth	r1, r2
   21fc2:	683a      	ldr	r2, [r7, #0]
   21fc4:	3208      	adds	r2, #8
   21fc6:	4798      	blx	r3
   21fc8:	e0b2      	b.n	22130 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   21fca:	23f8      	movs	r3, #248	; 0xf8
   21fcc:	33ff      	adds	r3, #255	; 0xff
   21fce:	001a      	movs	r2, r3
   21fd0:	4948      	ldr	r1, [pc, #288]	; (220f4 <hif_isr+0x3a0>)
   21fd2:	4b49      	ldr	r3, [pc, #292]	; (220f8 <hif_isr+0x3a4>)
   21fd4:	0018      	movs	r0, r3
   21fd6:	4b49      	ldr	r3, [pc, #292]	; (220fc <hif_isr+0x3a8>)
   21fd8:	4798      	blx	r3
   21fda:	4b50      	ldr	r3, [pc, #320]	; (2211c <hif_isr+0x3c8>)
   21fdc:	0018      	movs	r0, r3
   21fde:	4b47      	ldr	r3, [pc, #284]	; (220fc <hif_isr+0x3a8>)
   21fe0:	4798      	blx	r3
   21fe2:	4b48      	ldr	r3, [pc, #288]	; (22104 <hif_isr+0x3b0>)
   21fe4:	0018      	movs	r0, r3
   21fe6:	4b45      	ldr	r3, [pc, #276]	; (220fc <hif_isr+0x3a8>)
   21fe8:	4798      	blx	r3
   21fea:	e0a1      	b.n	22130 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   21fec:	1d3b      	adds	r3, r7, #4
   21fee:	781b      	ldrb	r3, [r3, #0]
   21ff0:	b2db      	uxtb	r3, r3
   21ff2:	2b06      	cmp	r3, #6
   21ff4:	d121      	bne.n	2203a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   21ff6:	4b3d      	ldr	r3, [pc, #244]	; (220ec <hif_isr+0x398>)
   21ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21ffa:	2b00      	cmp	r3, #0
   21ffc:	d00d      	beq.n	2201a <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21ffe:	4b3b      	ldr	r3, [pc, #236]	; (220ec <hif_isr+0x398>)
   22000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22002:	1d3a      	adds	r2, r7, #4
   22004:	7852      	ldrb	r2, [r2, #1]
   22006:	b2d0      	uxtb	r0, r2
   22008:	1d3a      	adds	r2, r7, #4
   2200a:	8852      	ldrh	r2, [r2, #2]
   2200c:	b292      	uxth	r2, r2
   2200e:	3a08      	subs	r2, #8
   22010:	b291      	uxth	r1, r2
   22012:	683a      	ldr	r2, [r7, #0]
   22014:	3208      	adds	r2, #8
   22016:	4798      	blx	r3
   22018:	e08a      	b.n	22130 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   2201a:	2380      	movs	r3, #128	; 0x80
   2201c:	009a      	lsls	r2, r3, #2
   2201e:	4935      	ldr	r1, [pc, #212]	; (220f4 <hif_isr+0x3a0>)
   22020:	4b35      	ldr	r3, [pc, #212]	; (220f8 <hif_isr+0x3a4>)
   22022:	0018      	movs	r0, r3
   22024:	4b35      	ldr	r3, [pc, #212]	; (220fc <hif_isr+0x3a8>)
   22026:	4798      	blx	r3
   22028:	4b3d      	ldr	r3, [pc, #244]	; (22120 <hif_isr+0x3cc>)
   2202a:	0018      	movs	r0, r3
   2202c:	4b33      	ldr	r3, [pc, #204]	; (220fc <hif_isr+0x3a8>)
   2202e:	4798      	blx	r3
   22030:	4b34      	ldr	r3, [pc, #208]	; (22104 <hif_isr+0x3b0>)
   22032:	0018      	movs	r0, r3
   22034:	4b31      	ldr	r3, [pc, #196]	; (220fc <hif_isr+0x3a8>)
   22036:	4798      	blx	r3
   22038:	e07a      	b.n	22130 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   2203a:	1d3b      	adds	r3, r7, #4
   2203c:	781b      	ldrb	r3, [r3, #0]
   2203e:	b2db      	uxtb	r3, r3
   22040:	2b07      	cmp	r3, #7
   22042:	d120      	bne.n	22086 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   22044:	4b29      	ldr	r3, [pc, #164]	; (220ec <hif_isr+0x398>)
   22046:	69db      	ldr	r3, [r3, #28]
   22048:	2b00      	cmp	r3, #0
   2204a:	d00d      	beq.n	22068 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2204c:	4b27      	ldr	r3, [pc, #156]	; (220ec <hif_isr+0x398>)
   2204e:	69db      	ldr	r3, [r3, #28]
   22050:	1d3a      	adds	r2, r7, #4
   22052:	7852      	ldrb	r2, [r2, #1]
   22054:	b2d0      	uxtb	r0, r2
   22056:	1d3a      	adds	r2, r7, #4
   22058:	8852      	ldrh	r2, [r2, #2]
   2205a:	b292      	uxth	r2, r2
   2205c:	3a08      	subs	r2, #8
   2205e:	b291      	uxth	r1, r2
   22060:	683a      	ldr	r2, [r7, #0]
   22062:	3208      	adds	r2, #8
   22064:	4798      	blx	r3
   22066:	e063      	b.n	22130 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   22068:	4a2e      	ldr	r2, [pc, #184]	; (22124 <hif_isr+0x3d0>)
   2206a:	4922      	ldr	r1, [pc, #136]	; (220f4 <hif_isr+0x3a0>)
   2206c:	4b22      	ldr	r3, [pc, #136]	; (220f8 <hif_isr+0x3a4>)
   2206e:	0018      	movs	r0, r3
   22070:	4b22      	ldr	r3, [pc, #136]	; (220fc <hif_isr+0x3a8>)
   22072:	4798      	blx	r3
   22074:	4b2c      	ldr	r3, [pc, #176]	; (22128 <hif_isr+0x3d4>)
   22076:	0018      	movs	r0, r3
   22078:	4b20      	ldr	r3, [pc, #128]	; (220fc <hif_isr+0x3a8>)
   2207a:	4798      	blx	r3
   2207c:	4b21      	ldr	r3, [pc, #132]	; (22104 <hif_isr+0x3b0>)
   2207e:	0018      	movs	r0, r3
   22080:	4b1e      	ldr	r3, [pc, #120]	; (220fc <hif_isr+0x3a8>)
   22082:	4798      	blx	r3
   22084:	e054      	b.n	22130 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   22086:	1d3b      	adds	r3, r7, #4
   22088:	781b      	ldrb	r3, [r3, #0]
   2208a:	b2db      	uxtb	r3, r3
   2208c:	2b05      	cmp	r3, #5
   2208e:	d111      	bne.n	220b4 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   22090:	4b16      	ldr	r3, [pc, #88]	; (220ec <hif_isr+0x398>)
   22092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22094:	2b00      	cmp	r3, #0
   22096:	d04b      	beq.n	22130 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   22098:	4b14      	ldr	r3, [pc, #80]	; (220ec <hif_isr+0x398>)
   2209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2209c:	1d3a      	adds	r2, r7, #4
   2209e:	7852      	ldrb	r2, [r2, #1]
   220a0:	b2d0      	uxtb	r0, r2
   220a2:	1d3a      	adds	r2, r7, #4
   220a4:	8852      	ldrh	r2, [r2, #2]
   220a6:	b292      	uxth	r2, r2
   220a8:	3a08      	subs	r2, #8
   220aa:	b291      	uxth	r1, r2
   220ac:	683a      	ldr	r2, [r7, #0]
   220ae:	3208      	adds	r2, #8
   220b0:	4798      	blx	r3
   220b2:	e03d      	b.n	22130 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   220b4:	2384      	movs	r3, #132	; 0x84
   220b6:	009a      	lsls	r2, r3, #2
   220b8:	490e      	ldr	r1, [pc, #56]	; (220f4 <hif_isr+0x3a0>)
   220ba:	4b0f      	ldr	r3, [pc, #60]	; (220f8 <hif_isr+0x3a4>)
   220bc:	0018      	movs	r0, r3
   220be:	4b0f      	ldr	r3, [pc, #60]	; (220fc <hif_isr+0x3a8>)
   220c0:	4798      	blx	r3
   220c2:	4b1a      	ldr	r3, [pc, #104]	; (2212c <hif_isr+0x3d8>)
   220c4:	0018      	movs	r0, r3
   220c6:	4b0d      	ldr	r3, [pc, #52]	; (220fc <hif_isr+0x3a8>)
   220c8:	4798      	blx	r3
   220ca:	4b0e      	ldr	r3, [pc, #56]	; (22104 <hif_isr+0x3b0>)
   220cc:	0018      	movs	r0, r3
   220ce:	4b0b      	ldr	r3, [pc, #44]	; (220fc <hif_isr+0x3a8>)
   220d0:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   220d2:	230f      	movs	r3, #15
   220d4:	18fb      	adds	r3, r7, r3
   220d6:	22fa      	movs	r2, #250	; 0xfa
   220d8:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   220da:	e083      	b.n	221e4 <hif_isr+0x490>
   220dc:	00001070 	.word	0x00001070
   220e0:	000237e1 	.word	0x000237e1
   220e4:	00020f05 	.word	0x00020f05
   220e8:	00023805 	.word	0x00023805
   220ec:	20005704 	.word	0x20005704
   220f0:	00001084 	.word	0x00001084
   220f4:	00039200 	.word	0x00039200
   220f8:	00038ef0 	.word	0x00038ef0
   220fc:	0001ea1d 	.word	0x0001ea1d
   22100:	00038f24 	.word	0x00038f24
   22104:	00038eec 	.word	0x00038eec
   22108:	00023855 	.word	0x00023855
   2210c:	00038f4c 	.word	0x00038f4c
   22110:	00038f64 	.word	0x00038f64
   22114:	00038fa4 	.word	0x00038fa4
   22118:	00038fc8 	.word	0x00038fc8
   2211c:	00038fec 	.word	0x00038fec
   22120:	0003900c 	.word	0x0003900c
   22124:	00000207 	.word	0x00000207
   22128:	00039030 	.word	0x00039030
   2212c:	00039054 	.word	0x00039054
				}
				if(gstrHifCxt.u8HifRXDone)
   22130:	4b30      	ldr	r3, [pc, #192]	; (221f4 <hif_isr+0x4a0>)
   22132:	789b      	ldrb	r3, [r3, #2]
   22134:	b2db      	uxtb	r3, r3
   22136:	2b00      	cmp	r3, #0
   22138:	d054      	beq.n	221e4 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   2213a:	4a2f      	ldr	r2, [pc, #188]	; (221f8 <hif_isr+0x4a4>)
   2213c:	492f      	ldr	r1, [pc, #188]	; (221fc <hif_isr+0x4a8>)
   2213e:	4b30      	ldr	r3, [pc, #192]	; (22200 <hif_isr+0x4ac>)
   22140:	0018      	movs	r0, r3
   22142:	4b30      	ldr	r3, [pc, #192]	; (22204 <hif_isr+0x4b0>)
   22144:	4798      	blx	r3
   22146:	1d3b      	adds	r3, r7, #4
   22148:	781b      	ldrb	r3, [r3, #0]
   2214a:	b2db      	uxtb	r3, r3
   2214c:	0019      	movs	r1, r3
   2214e:	1d3b      	adds	r3, r7, #4
   22150:	785b      	ldrb	r3, [r3, #1]
   22152:	b2db      	uxtb	r3, r3
   22154:	001a      	movs	r2, r3
   22156:	4b2c      	ldr	r3, [pc, #176]	; (22208 <hif_isr+0x4b4>)
   22158:	0018      	movs	r0, r3
   2215a:	4b2a      	ldr	r3, [pc, #168]	; (22204 <hif_isr+0x4b0>)
   2215c:	4798      	blx	r3
   2215e:	4b2b      	ldr	r3, [pc, #172]	; (2220c <hif_isr+0x4b8>)
   22160:	0018      	movs	r0, r3
   22162:	4b28      	ldr	r3, [pc, #160]	; (22204 <hif_isr+0x4b0>)
   22164:	4798      	blx	r3
					ret = hif_set_rx_done();
   22166:	230f      	movs	r3, #15
   22168:	18fc      	adds	r4, r7, r3
   2216a:	4b29      	ldr	r3, [pc, #164]	; (22210 <hif_isr+0x4bc>)
   2216c:	4798      	blx	r3
   2216e:	0003      	movs	r3, r0
   22170:	7023      	strb	r3, [r4, #0]
   22172:	e037      	b.n	221e4 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   22174:	4a27      	ldr	r2, [pc, #156]	; (22214 <hif_isr+0x4c0>)
   22176:	4921      	ldr	r1, [pc, #132]	; (221fc <hif_isr+0x4a8>)
   22178:	4b21      	ldr	r3, [pc, #132]	; (22200 <hif_isr+0x4ac>)
   2217a:	0018      	movs	r0, r3
   2217c:	4b21      	ldr	r3, [pc, #132]	; (22204 <hif_isr+0x4b0>)
   2217e:	4798      	blx	r3
   22180:	4b25      	ldr	r3, [pc, #148]	; (22218 <hif_isr+0x4c4>)
   22182:	0018      	movs	r0, r3
   22184:	4b1f      	ldr	r3, [pc, #124]	; (22204 <hif_isr+0x4b0>)
   22186:	4798      	blx	r3
   22188:	4b20      	ldr	r3, [pc, #128]	; (2220c <hif_isr+0x4b8>)
   2218a:	0018      	movs	r0, r3
   2218c:	4b1d      	ldr	r3, [pc, #116]	; (22204 <hif_isr+0x4b0>)
   2218e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   22190:	230f      	movs	r3, #15
   22192:	18fb      	adds	r3, r7, r3
   22194:	22fe      	movs	r2, #254	; 0xfe
   22196:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   22198:	e024      	b.n	221e4 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   2219a:	4a20      	ldr	r2, [pc, #128]	; (2221c <hif_isr+0x4c8>)
   2219c:	4917      	ldr	r1, [pc, #92]	; (221fc <hif_isr+0x4a8>)
   2219e:	4b18      	ldr	r3, [pc, #96]	; (22200 <hif_isr+0x4ac>)
   221a0:	0018      	movs	r0, r3
   221a2:	4b18      	ldr	r3, [pc, #96]	; (22204 <hif_isr+0x4b0>)
   221a4:	4798      	blx	r3
   221a6:	68ba      	ldr	r2, [r7, #8]
   221a8:	4b1d      	ldr	r3, [pc, #116]	; (22220 <hif_isr+0x4cc>)
   221aa:	0011      	movs	r1, r2
   221ac:	0018      	movs	r0, r3
   221ae:	4b15      	ldr	r3, [pc, #84]	; (22204 <hif_isr+0x4b0>)
   221b0:	4798      	blx	r3
   221b2:	4b16      	ldr	r3, [pc, #88]	; (2220c <hif_isr+0x4b8>)
   221b4:	0018      	movs	r0, r3
   221b6:	4b13      	ldr	r3, [pc, #76]	; (22204 <hif_isr+0x4b0>)
   221b8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   221ba:	230f      	movs	r3, #15
   221bc:	18fb      	adds	r3, r7, r3
   221be:	22f4      	movs	r2, #244	; 0xf4
   221c0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   221c2:	e00f      	b.n	221e4 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   221c4:	4a17      	ldr	r2, [pc, #92]	; (22224 <hif_isr+0x4d0>)
   221c6:	490d      	ldr	r1, [pc, #52]	; (221fc <hif_isr+0x4a8>)
   221c8:	4b0d      	ldr	r3, [pc, #52]	; (22200 <hif_isr+0x4ac>)
   221ca:	0018      	movs	r0, r3
   221cc:	4b0d      	ldr	r3, [pc, #52]	; (22204 <hif_isr+0x4b0>)
   221ce:	4798      	blx	r3
   221d0:	4b15      	ldr	r3, [pc, #84]	; (22228 <hif_isr+0x4d4>)
   221d2:	0018      	movs	r0, r3
   221d4:	4b0b      	ldr	r3, [pc, #44]	; (22204 <hif_isr+0x4b0>)
   221d6:	4798      	blx	r3
   221d8:	4b0c      	ldr	r3, [pc, #48]	; (2220c <hif_isr+0x4b8>)
   221da:	0018      	movs	r0, r3
   221dc:	4b09      	ldr	r3, [pc, #36]	; (22204 <hif_isr+0x4b0>)
   221de:	4798      	blx	r3
		goto ERR1;
   221e0:	e000      	b.n	221e4 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   221e2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   221e4:	230f      	movs	r3, #15
   221e6:	18fb      	adds	r3, r7, r3
   221e8:	781b      	ldrb	r3, [r3, #0]
   221ea:	b25b      	sxtb	r3, r3
}
   221ec:	0018      	movs	r0, r3
   221ee:	46bd      	mov	sp, r7
   221f0:	b005      	add	sp, #20
   221f2:	bd90      	pop	{r4, r7, pc}
   221f4:	20005704 	.word	0x20005704
   221f8:	00000216 	.word	0x00000216
   221fc:	00039200 	.word	0x00039200
   22200:	00038ef0 	.word	0x00038ef0
   22204:	0001ea1d 	.word	0x0001ea1d
   22208:	0003906c 	.word	0x0003906c
   2220c:	00038eec 	.word	0x00038eec
   22210:	000217e9 	.word	0x000217e9
   22214:	0000021d 	.word	0x0000021d
   22218:	00039098 	.word	0x00039098
   2221c:	00000225 	.word	0x00000225
   22220:	000390ac 	.word	0x000390ac
   22224:	0000022e 	.word	0x0000022e
   22228:	000390c8 	.word	0x000390c8

0002222c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   2222c:	b590      	push	{r4, r7, lr}
   2222e:	b083      	sub	sp, #12
   22230:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   22232:	1dfb      	adds	r3, r7, #7
   22234:	2200      	movs	r2, #0
   22236:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   22238:	4b1c      	ldr	r3, [pc, #112]	; (222ac <hif_handle_isr+0x80>)
   2223a:	2200      	movs	r2, #0
   2223c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2223e:	e024      	b.n	2228a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   22240:	4b1a      	ldr	r3, [pc, #104]	; (222ac <hif_handle_isr+0x80>)
   22242:	78db      	ldrb	r3, [r3, #3]
   22244:	b2db      	uxtb	r3, r3
   22246:	3b01      	subs	r3, #1
   22248:	b2da      	uxtb	r2, r3
   2224a:	4b18      	ldr	r3, [pc, #96]	; (222ac <hif_handle_isr+0x80>)
   2224c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2224e:	1dfc      	adds	r4, r7, #7
   22250:	4b17      	ldr	r3, [pc, #92]	; (222b0 <hif_handle_isr+0x84>)
   22252:	4798      	blx	r3
   22254:	0003      	movs	r3, r0
   22256:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   22258:	1dfb      	adds	r3, r7, #7
   2225a:	781b      	ldrb	r3, [r3, #0]
   2225c:	b25b      	sxtb	r3, r3
   2225e:	2b00      	cmp	r3, #0
   22260:	d100      	bne.n	22264 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   22262:	e012      	b.n	2228a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   22264:	4a13      	ldr	r2, [pc, #76]	; (222b4 <hif_handle_isr+0x88>)
   22266:	4914      	ldr	r1, [pc, #80]	; (222b8 <hif_handle_isr+0x8c>)
   22268:	4b14      	ldr	r3, [pc, #80]	; (222bc <hif_handle_isr+0x90>)
   2226a:	0018      	movs	r0, r3
   2226c:	4b14      	ldr	r3, [pc, #80]	; (222c0 <hif_handle_isr+0x94>)
   2226e:	4798      	blx	r3
   22270:	1dfb      	adds	r3, r7, #7
   22272:	2200      	movs	r2, #0
   22274:	569a      	ldrsb	r2, [r3, r2]
   22276:	4b13      	ldr	r3, [pc, #76]	; (222c4 <hif_handle_isr+0x98>)
   22278:	0011      	movs	r1, r2
   2227a:	0018      	movs	r0, r3
   2227c:	4b10      	ldr	r3, [pc, #64]	; (222c0 <hif_handle_isr+0x94>)
   2227e:	4798      	blx	r3
   22280:	4b11      	ldr	r3, [pc, #68]	; (222c8 <hif_handle_isr+0x9c>)
   22282:	0018      	movs	r0, r3
   22284:	4b0e      	ldr	r3, [pc, #56]	; (222c0 <hif_handle_isr+0x94>)
   22286:	4798      	blx	r3
			ret = hif_isr();
   22288:	e7e1      	b.n	2224e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2228a:	4b08      	ldr	r3, [pc, #32]	; (222ac <hif_handle_isr+0x80>)
   2228c:	78db      	ldrb	r3, [r3, #3]
   2228e:	b2db      	uxtb	r3, r3
   22290:	2b00      	cmp	r3, #0
   22292:	d004      	beq.n	2229e <hif_handle_isr+0x72>
   22294:	4b05      	ldr	r3, [pc, #20]	; (222ac <hif_handle_isr+0x80>)
   22296:	791b      	ldrb	r3, [r3, #4]
   22298:	b2db      	uxtb	r3, r3
   2229a:	2b00      	cmp	r3, #0
   2229c:	d0d0      	beq.n	22240 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2229e:	1dfb      	adds	r3, r7, #7
   222a0:	781b      	ldrb	r3, [r3, #0]
   222a2:	b25b      	sxtb	r3, r3
}
   222a4:	0018      	movs	r0, r3
   222a6:	46bd      	mov	sp, r7
   222a8:	b003      	add	sp, #12
   222aa:	bd90      	pop	{r4, r7, pc}
   222ac:	20005704 	.word	0x20005704
   222b0:	00021d55 	.word	0x00021d55
   222b4:	00000257 	.word	0x00000257
   222b8:	00039208 	.word	0x00039208
   222bc:	00038ef0 	.word	0x00038ef0
   222c0:	0001ea1d 	.word	0x0001ea1d
   222c4:	000390ec 	.word	0x000390ec
   222c8:	00038eec 	.word	0x00038eec

000222cc <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   222cc:	b590      	push	{r4, r7, lr}
   222ce:	b087      	sub	sp, #28
   222d0:	af00      	add	r7, sp, #0
   222d2:	60f8      	str	r0, [r7, #12]
   222d4:	60b9      	str	r1, [r7, #8]
   222d6:	0019      	movs	r1, r3
   222d8:	1dbb      	adds	r3, r7, #6
   222da:	801a      	strh	r2, [r3, #0]
   222dc:	1d7b      	adds	r3, r7, #5
   222de:	1c0a      	adds	r2, r1, #0
   222e0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   222e2:	2317      	movs	r3, #23
   222e4:	18fb      	adds	r3, r7, r3
   222e6:	2200      	movs	r2, #0
   222e8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   222ea:	68fb      	ldr	r3, [r7, #12]
   222ec:	2b00      	cmp	r3, #0
   222ee:	d006      	beq.n	222fe <hif_receive+0x32>
   222f0:	68bb      	ldr	r3, [r7, #8]
   222f2:	2b00      	cmp	r3, #0
   222f4:	d003      	beq.n	222fe <hif_receive+0x32>
   222f6:	1dbb      	adds	r3, r7, #6
   222f8:	881b      	ldrh	r3, [r3, #0]
   222fa:	2b00      	cmp	r3, #0
   222fc:	d11e      	bne.n	2233c <hif_receive+0x70>
	{
		if(isDone)
   222fe:	1d7b      	adds	r3, r7, #5
   22300:	781b      	ldrb	r3, [r3, #0]
   22302:	2b00      	cmp	r3, #0
   22304:	d006      	beq.n	22314 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   22306:	2317      	movs	r3, #23
   22308:	18fc      	adds	r4, r7, r3
   2230a:	4b45      	ldr	r3, [pc, #276]	; (22420 <hif_receive+0x154>)
   2230c:	4798      	blx	r3
   2230e:	0003      	movs	r3, r0
   22310:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   22312:	e07c      	b.n	2240e <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   22314:	2317      	movs	r3, #23
   22316:	18fb      	adds	r3, r7, r3
   22318:	22f4      	movs	r2, #244	; 0xf4
   2231a:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   2231c:	239e      	movs	r3, #158	; 0x9e
   2231e:	009a      	lsls	r2, r3, #2
   22320:	4940      	ldr	r1, [pc, #256]	; (22424 <hif_receive+0x158>)
   22322:	4b41      	ldr	r3, [pc, #260]	; (22428 <hif_receive+0x15c>)
   22324:	0018      	movs	r0, r3
   22326:	4b41      	ldr	r3, [pc, #260]	; (2242c <hif_receive+0x160>)
   22328:	4798      	blx	r3
   2232a:	4b41      	ldr	r3, [pc, #260]	; (22430 <hif_receive+0x164>)
   2232c:	0018      	movs	r0, r3
   2232e:	4b3f      	ldr	r3, [pc, #252]	; (2242c <hif_receive+0x160>)
   22330:	4798      	blx	r3
   22332:	4b40      	ldr	r3, [pc, #256]	; (22434 <hif_receive+0x168>)
   22334:	0018      	movs	r0, r3
   22336:	4b3d      	ldr	r3, [pc, #244]	; (2242c <hif_receive+0x160>)
   22338:	4798      	blx	r3
		goto ERR1;
   2233a:	e068      	b.n	2240e <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   2233c:	1dbb      	adds	r3, r7, #6
   2233e:	881a      	ldrh	r2, [r3, #0]
   22340:	4b3d      	ldr	r3, [pc, #244]	; (22438 <hif_receive+0x16c>)
   22342:	68db      	ldr	r3, [r3, #12]
   22344:	429a      	cmp	r2, r3
   22346:	d917      	bls.n	22378 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   22348:	2317      	movs	r3, #23
   2234a:	18fb      	adds	r3, r7, r3
   2234c:	22f4      	movs	r2, #244	; 0xf4
   2234e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   22350:	23a0      	movs	r3, #160	; 0xa0
   22352:	009a      	lsls	r2, r3, #2
   22354:	4933      	ldr	r1, [pc, #204]	; (22424 <hif_receive+0x158>)
   22356:	4b34      	ldr	r3, [pc, #208]	; (22428 <hif_receive+0x15c>)
   22358:	0018      	movs	r0, r3
   2235a:	4b34      	ldr	r3, [pc, #208]	; (2242c <hif_receive+0x160>)
   2235c:	4798      	blx	r3
   2235e:	1dbb      	adds	r3, r7, #6
   22360:	8819      	ldrh	r1, [r3, #0]
   22362:	4b35      	ldr	r3, [pc, #212]	; (22438 <hif_receive+0x16c>)
   22364:	68da      	ldr	r2, [r3, #12]
   22366:	4b35      	ldr	r3, [pc, #212]	; (2243c <hif_receive+0x170>)
   22368:	0018      	movs	r0, r3
   2236a:	4b30      	ldr	r3, [pc, #192]	; (2242c <hif_receive+0x160>)
   2236c:	4798      	blx	r3
   2236e:	4b31      	ldr	r3, [pc, #196]	; (22434 <hif_receive+0x168>)
   22370:	0018      	movs	r0, r3
   22372:	4b2e      	ldr	r3, [pc, #184]	; (2242c <hif_receive+0x160>)
   22374:	4798      	blx	r3
		goto ERR1;
   22376:	e04a      	b.n	2240e <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   22378:	4b2f      	ldr	r3, [pc, #188]	; (22438 <hif_receive+0x16c>)
   2237a:	689a      	ldr	r2, [r3, #8]
   2237c:	68fb      	ldr	r3, [r7, #12]
   2237e:	429a      	cmp	r2, r3
   22380:	d80a      	bhi.n	22398 <hif_receive+0xcc>
   22382:	1dbb      	adds	r3, r7, #6
   22384:	881a      	ldrh	r2, [r3, #0]
   22386:	68fb      	ldr	r3, [r7, #12]
   22388:	18d2      	adds	r2, r2, r3
   2238a:	4b2b      	ldr	r3, [pc, #172]	; (22438 <hif_receive+0x16c>)
   2238c:	6899      	ldr	r1, [r3, #8]
   2238e:	4b2a      	ldr	r3, [pc, #168]	; (22438 <hif_receive+0x16c>)
   22390:	68db      	ldr	r3, [r3, #12]
   22392:	18cb      	adds	r3, r1, r3
   22394:	429a      	cmp	r2, r3
   22396:	d912      	bls.n	223be <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   22398:	2317      	movs	r3, #23
   2239a:	18fb      	adds	r3, r7, r3
   2239c:	22f4      	movs	r2, #244	; 0xf4
   2239e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   223a0:	4a27      	ldr	r2, [pc, #156]	; (22440 <hif_receive+0x174>)
   223a2:	4920      	ldr	r1, [pc, #128]	; (22424 <hif_receive+0x158>)
   223a4:	4b20      	ldr	r3, [pc, #128]	; (22428 <hif_receive+0x15c>)
   223a6:	0018      	movs	r0, r3
   223a8:	4b20      	ldr	r3, [pc, #128]	; (2242c <hif_receive+0x160>)
   223aa:	4798      	blx	r3
   223ac:	4b25      	ldr	r3, [pc, #148]	; (22444 <hif_receive+0x178>)
   223ae:	0018      	movs	r0, r3
   223b0:	4b1e      	ldr	r3, [pc, #120]	; (2242c <hif_receive+0x160>)
   223b2:	4798      	blx	r3
   223b4:	4b1f      	ldr	r3, [pc, #124]	; (22434 <hif_receive+0x168>)
   223b6:	0018      	movs	r0, r3
   223b8:	4b1c      	ldr	r3, [pc, #112]	; (2242c <hif_receive+0x160>)
   223ba:	4798      	blx	r3
		goto ERR1;
   223bc:	e027      	b.n	2240e <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   223be:	1dbb      	adds	r3, r7, #6
   223c0:	881a      	ldrh	r2, [r3, #0]
   223c2:	2317      	movs	r3, #23
   223c4:	18fc      	adds	r4, r7, r3
   223c6:	68b9      	ldr	r1, [r7, #8]
   223c8:	68fb      	ldr	r3, [r7, #12]
   223ca:	0018      	movs	r0, r3
   223cc:	4b1e      	ldr	r3, [pc, #120]	; (22448 <hif_receive+0x17c>)
   223ce:	4798      	blx	r3
   223d0:	0003      	movs	r3, r0
   223d2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   223d4:	2317      	movs	r3, #23
   223d6:	18fb      	adds	r3, r7, r3
   223d8:	781b      	ldrb	r3, [r3, #0]
   223da:	b25b      	sxtb	r3, r3
   223dc:	2b00      	cmp	r3, #0
   223de:	d115      	bne.n	2240c <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   223e0:	4b15      	ldr	r3, [pc, #84]	; (22438 <hif_receive+0x16c>)
   223e2:	689a      	ldr	r2, [r3, #8]
   223e4:	4b14      	ldr	r3, [pc, #80]	; (22438 <hif_receive+0x16c>)
   223e6:	68db      	ldr	r3, [r3, #12]
   223e8:	18d2      	adds	r2, r2, r3
   223ea:	1dbb      	adds	r3, r7, #6
   223ec:	8819      	ldrh	r1, [r3, #0]
   223ee:	68fb      	ldr	r3, [r7, #12]
   223f0:	18cb      	adds	r3, r1, r3
   223f2:	429a      	cmp	r2, r3
   223f4:	d003      	beq.n	223fe <hif_receive+0x132>
   223f6:	1d7b      	adds	r3, r7, #5
   223f8:	781b      	ldrb	r3, [r3, #0]
   223fa:	2b00      	cmp	r3, #0
   223fc:	d007      	beq.n	2240e <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   223fe:	2317      	movs	r3, #23
   22400:	18fc      	adds	r4, r7, r3
   22402:	4b07      	ldr	r3, [pc, #28]	; (22420 <hif_receive+0x154>)
   22404:	4798      	blx	r3
   22406:	0003      	movs	r3, r0
   22408:	7023      	strb	r3, [r4, #0]
   2240a:	e000      	b.n	2240e <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   2240c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2240e:	2317      	movs	r3, #23
   22410:	18fb      	adds	r3, r7, r3
   22412:	781b      	ldrb	r3, [r3, #0]
   22414:	b25b      	sxtb	r3, r3
}
   22416:	0018      	movs	r0, r3
   22418:	46bd      	mov	sp, r7
   2241a:	b007      	add	sp, #28
   2241c:	bd90      	pop	{r4, r7, pc}
   2241e:	46c0      	nop			; (mov r8, r8)
   22420:	000217e9 	.word	0x000217e9
   22424:	00039218 	.word	0x00039218
   22428:	00038ef0 	.word	0x00038ef0
   2242c:	0001ea1d 	.word	0x0001ea1d
   22430:	0003911c 	.word	0x0003911c
   22434:	00038eec 	.word	0x00038eec
   22438:	20005704 	.word	0x20005704
   2243c:	0003913c 	.word	0x0003913c
   22440:	00000286 	.word	0x00000286
   22444:	00039184 	.word	0x00039184
   22448:	00023855 	.word	0x00023855

0002244c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   2244c:	b580      	push	{r7, lr}
   2244e:	b084      	sub	sp, #16
   22450:	af00      	add	r7, sp, #0
   22452:	0002      	movs	r2, r0
   22454:	6039      	str	r1, [r7, #0]
   22456:	1dfb      	adds	r3, r7, #7
   22458:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2245a:	230f      	movs	r3, #15
   2245c:	18fb      	adds	r3, r7, r3
   2245e:	2200      	movs	r2, #0
   22460:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   22462:	1dfb      	adds	r3, r7, #7
   22464:	781b      	ldrb	r3, [r3, #0]
   22466:	2b07      	cmp	r3, #7
   22468:	d820      	bhi.n	224ac <hif_register_cb+0x60>
   2246a:	009a      	lsls	r2, r3, #2
   2246c:	4b1e      	ldr	r3, [pc, #120]	; (224e8 <hif_register_cb+0x9c>)
   2246e:	18d3      	adds	r3, r2, r3
   22470:	681b      	ldr	r3, [r3, #0]
   22472:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   22474:	4b1d      	ldr	r3, [pc, #116]	; (224ec <hif_register_cb+0xa0>)
   22476:	683a      	ldr	r2, [r7, #0]
   22478:	615a      	str	r2, [r3, #20]
			break;
   2247a:	e02d      	b.n	224d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   2247c:	4b1b      	ldr	r3, [pc, #108]	; (224ec <hif_register_cb+0xa0>)
   2247e:	683a      	ldr	r2, [r7, #0]
   22480:	611a      	str	r2, [r3, #16]
			break;
   22482:	e029      	b.n	224d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   22484:	4b19      	ldr	r3, [pc, #100]	; (224ec <hif_register_cb+0xa0>)
   22486:	683a      	ldr	r2, [r7, #0]
   22488:	619a      	str	r2, [r3, #24]
			break;
   2248a:	e025      	b.n	224d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   2248c:	4b17      	ldr	r3, [pc, #92]	; (224ec <hif_register_cb+0xa0>)
   2248e:	683a      	ldr	r2, [r7, #0]
   22490:	621a      	str	r2, [r3, #32]
			break;
   22492:	e021      	b.n	224d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   22494:	4b15      	ldr	r3, [pc, #84]	; (224ec <hif_register_cb+0xa0>)
   22496:	683a      	ldr	r2, [r7, #0]
   22498:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   2249a:	e01d      	b.n	224d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   2249c:	4b13      	ldr	r3, [pc, #76]	; (224ec <hif_register_cb+0xa0>)
   2249e:	683a      	ldr	r2, [r7, #0]
   224a0:	61da      	str	r2, [r3, #28]
			break;
   224a2:	e019      	b.n	224d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   224a4:	4b11      	ldr	r3, [pc, #68]	; (224ec <hif_register_cb+0xa0>)
   224a6:	683a      	ldr	r2, [r7, #0]
   224a8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   224aa:	e015      	b.n	224d8 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   224ac:	4a10      	ldr	r2, [pc, #64]	; (224f0 <hif_register_cb+0xa4>)
   224ae:	4911      	ldr	r1, [pc, #68]	; (224f4 <hif_register_cb+0xa8>)
   224b0:	4b11      	ldr	r3, [pc, #68]	; (224f8 <hif_register_cb+0xac>)
   224b2:	0018      	movs	r0, r3
   224b4:	4b11      	ldr	r3, [pc, #68]	; (224fc <hif_register_cb+0xb0>)
   224b6:	4798      	blx	r3
   224b8:	1dfb      	adds	r3, r7, #7
   224ba:	781a      	ldrb	r2, [r3, #0]
   224bc:	4b10      	ldr	r3, [pc, #64]	; (22500 <hif_register_cb+0xb4>)
   224be:	0011      	movs	r1, r2
   224c0:	0018      	movs	r0, r3
   224c2:	4b0e      	ldr	r3, [pc, #56]	; (224fc <hif_register_cb+0xb0>)
   224c4:	4798      	blx	r3
   224c6:	4b0f      	ldr	r3, [pc, #60]	; (22504 <hif_register_cb+0xb8>)
   224c8:	0018      	movs	r0, r3
   224ca:	4b0c      	ldr	r3, [pc, #48]	; (224fc <hif_register_cb+0xb0>)
   224cc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   224ce:	230f      	movs	r3, #15
   224d0:	18fb      	adds	r3, r7, r3
   224d2:	22f4      	movs	r2, #244	; 0xf4
   224d4:	701a      	strb	r2, [r3, #0]
			break;
   224d6:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   224d8:	230f      	movs	r3, #15
   224da:	18fb      	adds	r3, r7, r3
   224dc:	781b      	ldrb	r3, [r3, #0]
   224de:	b25b      	sxtb	r3, r3
}
   224e0:	0018      	movs	r0, r3
   224e2:	46bd      	mov	sp, r7
   224e4:	b004      	add	sp, #16
   224e6:	bd80      	pop	{r7, pc}
   224e8:	000391d4 	.word	0x000391d4
   224ec:	20005704 	.word	0x20005704
   224f0:	000002be 	.word	0x000002be
   224f4:	00039224 	.word	0x00039224
   224f8:	00038ef0 	.word	0x00038ef0
   224fc:	0001ea1d 	.word	0x0001ea1d
   22500:	000391c8 	.word	0x000391c8
   22504:	00038eec 	.word	0x00038eec

00022508 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   22508:	b590      	push	{r4, r7, lr}
   2250a:	b0af      	sub	sp, #188	; 0xbc
   2250c:	af02      	add	r7, sp, #8
   2250e:	603a      	str	r2, [r7, #0]
   22510:	1dfb      	adds	r3, r7, #7
   22512:	1c02      	adds	r2, r0, #0
   22514:	701a      	strb	r2, [r3, #0]
   22516:	1d3b      	adds	r3, r7, #4
   22518:	1c0a      	adds	r2, r1, #0
   2251a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   2251c:	1dfb      	adds	r3, r7, #7
   2251e:	781b      	ldrb	r3, [r3, #0]
   22520:	2b2c      	cmp	r3, #44	; 0x2c
   22522:	d116      	bne.n	22552 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   22524:	23a4      	movs	r3, #164	; 0xa4
   22526:	18f9      	adds	r1, r7, r3
   22528:	6838      	ldr	r0, [r7, #0]
   2252a:	2300      	movs	r3, #0
   2252c:	2204      	movs	r2, #4
   2252e:	4cca      	ldr	r4, [pc, #808]	; (22858 <m2m_wifi_cb+0x350>)
   22530:	47a0      	blx	r4
   22532:	1e03      	subs	r3, r0, #0
   22534:	d000      	beq.n	22538 <m2m_wifi_cb+0x30>
   22536:	e1b4      	b.n	228a2 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   22538:	4bc8      	ldr	r3, [pc, #800]	; (2285c <m2m_wifi_cb+0x354>)
   2253a:	681b      	ldr	r3, [r3, #0]
   2253c:	2b00      	cmp	r3, #0
   2253e:	d100      	bne.n	22542 <m2m_wifi_cb+0x3a>
   22540:	e1af      	b.n	228a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   22542:	4bc6      	ldr	r3, [pc, #792]	; (2285c <m2m_wifi_cb+0x354>)
   22544:	681b      	ldr	r3, [r3, #0]
   22546:	22a4      	movs	r2, #164	; 0xa4
   22548:	18ba      	adds	r2, r7, r2
   2254a:	0011      	movs	r1, r2
   2254c:	202c      	movs	r0, #44	; 0x2c
   2254e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   22550:	e1a7      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   22552:	1dfb      	adds	r3, r7, #7
   22554:	781b      	ldrb	r3, [r3, #0]
   22556:	2b1b      	cmp	r3, #27
   22558:	d116      	bne.n	22588 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   2255a:	239c      	movs	r3, #156	; 0x9c
   2255c:	18f9      	adds	r1, r7, r3
   2255e:	6838      	ldr	r0, [r7, #0]
   22560:	2300      	movs	r3, #0
   22562:	2208      	movs	r2, #8
   22564:	4cbc      	ldr	r4, [pc, #752]	; (22858 <m2m_wifi_cb+0x350>)
   22566:	47a0      	blx	r4
   22568:	1e03      	subs	r3, r0, #0
   2256a:	d000      	beq.n	2256e <m2m_wifi_cb+0x66>
   2256c:	e199      	b.n	228a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2256e:	4bbb      	ldr	r3, [pc, #748]	; (2285c <m2m_wifi_cb+0x354>)
   22570:	681b      	ldr	r3, [r3, #0]
   22572:	2b00      	cmp	r3, #0
   22574:	d100      	bne.n	22578 <m2m_wifi_cb+0x70>
   22576:	e194      	b.n	228a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   22578:	4bb8      	ldr	r3, [pc, #736]	; (2285c <m2m_wifi_cb+0x354>)
   2257a:	681b      	ldr	r3, [r3, #0]
   2257c:	229c      	movs	r2, #156	; 0x9c
   2257e:	18ba      	adds	r2, r7, r2
   22580:	0011      	movs	r1, r2
   22582:	201b      	movs	r0, #27
   22584:	4798      	blx	r3
}
   22586:	e18c      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   22588:	1dfb      	adds	r3, r7, #7
   2258a:	781b      	ldrb	r3, [r3, #0]
   2258c:	2b06      	cmp	r3, #6
   2258e:	d116      	bne.n	225be <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   22590:	230c      	movs	r3, #12
   22592:	18f9      	adds	r1, r7, r3
   22594:	6838      	ldr	r0, [r7, #0]
   22596:	2301      	movs	r3, #1
   22598:	2230      	movs	r2, #48	; 0x30
   2259a:	4caf      	ldr	r4, [pc, #700]	; (22858 <m2m_wifi_cb+0x350>)
   2259c:	47a0      	blx	r4
   2259e:	1e03      	subs	r3, r0, #0
   225a0:	d000      	beq.n	225a4 <m2m_wifi_cb+0x9c>
   225a2:	e17e      	b.n	228a2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   225a4:	4bad      	ldr	r3, [pc, #692]	; (2285c <m2m_wifi_cb+0x354>)
   225a6:	681b      	ldr	r3, [r3, #0]
   225a8:	2b00      	cmp	r3, #0
   225aa:	d100      	bne.n	225ae <m2m_wifi_cb+0xa6>
   225ac:	e179      	b.n	228a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   225ae:	4bab      	ldr	r3, [pc, #684]	; (2285c <m2m_wifi_cb+0x354>)
   225b0:	681b      	ldr	r3, [r3, #0]
   225b2:	220c      	movs	r2, #12
   225b4:	18ba      	adds	r2, r7, r2
   225b6:	0011      	movs	r1, r2
   225b8:	2006      	movs	r0, #6
   225ba:	4798      	blx	r3
}
   225bc:	e171      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   225be:	1dfb      	adds	r3, r7, #7
   225c0:	781b      	ldrb	r3, [r3, #0]
   225c2:	2b0e      	cmp	r3, #14
   225c4:	d100      	bne.n	225c8 <m2m_wifi_cb+0xc0>
   225c6:	e16c      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   225c8:	1dfb      	adds	r3, r7, #7
   225ca:	781b      	ldrb	r3, [r3, #0]
   225cc:	2b32      	cmp	r3, #50	; 0x32
   225ce:	d116      	bne.n	225fe <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   225d0:	2384      	movs	r3, #132	; 0x84
   225d2:	18f9      	adds	r1, r7, r3
   225d4:	6838      	ldr	r0, [r7, #0]
   225d6:	2300      	movs	r3, #0
   225d8:	2218      	movs	r2, #24
   225da:	4c9f      	ldr	r4, [pc, #636]	; (22858 <m2m_wifi_cb+0x350>)
   225dc:	47a0      	blx	r4
   225de:	1e03      	subs	r3, r0, #0
   225e0:	d000      	beq.n	225e4 <m2m_wifi_cb+0xdc>
   225e2:	e15e      	b.n	228a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   225e4:	4b9d      	ldr	r3, [pc, #628]	; (2285c <m2m_wifi_cb+0x354>)
   225e6:	681b      	ldr	r3, [r3, #0]
   225e8:	2b00      	cmp	r3, #0
   225ea:	d100      	bne.n	225ee <m2m_wifi_cb+0xe6>
   225ec:	e159      	b.n	228a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   225ee:	4b9b      	ldr	r3, [pc, #620]	; (2285c <m2m_wifi_cb+0x354>)
   225f0:	681b      	ldr	r3, [r3, #0]
   225f2:	2284      	movs	r2, #132	; 0x84
   225f4:	18ba      	adds	r2, r7, r2
   225f6:	0011      	movs	r1, r2
   225f8:	2032      	movs	r0, #50	; 0x32
   225fa:	4798      	blx	r3
}
   225fc:	e151      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   225fe:	1dfb      	adds	r3, r7, #7
   22600:	781b      	ldrb	r3, [r3, #0]
   22602:	2b2f      	cmp	r3, #47	; 0x2f
   22604:	d11d      	bne.n	22642 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   22606:	230c      	movs	r3, #12
   22608:	18fb      	adds	r3, r7, r3
   2260a:	2264      	movs	r2, #100	; 0x64
   2260c:	2100      	movs	r1, #0
   2260e:	0018      	movs	r0, r3
   22610:	4b93      	ldr	r3, [pc, #588]	; (22860 <m2m_wifi_cb+0x358>)
   22612:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   22614:	230c      	movs	r3, #12
   22616:	18f9      	adds	r1, r7, r3
   22618:	6838      	ldr	r0, [r7, #0]
   2261a:	2300      	movs	r3, #0
   2261c:	2264      	movs	r2, #100	; 0x64
   2261e:	4c8e      	ldr	r4, [pc, #568]	; (22858 <m2m_wifi_cb+0x350>)
   22620:	47a0      	blx	r4
   22622:	1e03      	subs	r3, r0, #0
   22624:	d000      	beq.n	22628 <m2m_wifi_cb+0x120>
   22626:	e13c      	b.n	228a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22628:	4b8c      	ldr	r3, [pc, #560]	; (2285c <m2m_wifi_cb+0x354>)
   2262a:	681b      	ldr	r3, [r3, #0]
   2262c:	2b00      	cmp	r3, #0
   2262e:	d100      	bne.n	22632 <m2m_wifi_cb+0x12a>
   22630:	e137      	b.n	228a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   22632:	4b8a      	ldr	r3, [pc, #552]	; (2285c <m2m_wifi_cb+0x354>)
   22634:	681b      	ldr	r3, [r3, #0]
   22636:	220c      	movs	r2, #12
   22638:	18ba      	adds	r2, r7, r2
   2263a:	0011      	movs	r1, r2
   2263c:	202f      	movs	r0, #47	; 0x2f
   2263e:	4798      	blx	r3
}
   22640:	e12f      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   22642:	1dfb      	adds	r3, r7, #7
   22644:	781b      	ldrb	r3, [r3, #0]
   22646:	2b34      	cmp	r3, #52	; 0x34
   22648:	d137      	bne.n	226ba <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   2264a:	2380      	movs	r3, #128	; 0x80
   2264c:	18f9      	adds	r1, r7, r3
   2264e:	6838      	ldr	r0, [r7, #0]
   22650:	2300      	movs	r3, #0
   22652:	2204      	movs	r2, #4
   22654:	4c80      	ldr	r4, [pc, #512]	; (22858 <m2m_wifi_cb+0x350>)
   22656:	47a0      	blx	r4
   22658:	1e03      	subs	r3, r0, #0
   2265a:	d000      	beq.n	2265e <m2m_wifi_cb+0x156>
   2265c:	e121      	b.n	228a2 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2265e:	4b81      	ldr	r3, [pc, #516]	; (22864 <m2m_wifi_cb+0x35c>)
   22660:	0018      	movs	r0, r3
   22662:	4b81      	ldr	r3, [pc, #516]	; (22868 <m2m_wifi_cb+0x360>)
   22664:	4798      	blx	r3
   22666:	2380      	movs	r3, #128	; 0x80
   22668:	18fb      	adds	r3, r7, r3
   2266a:	681b      	ldr	r3, [r3, #0]
   2266c:	0e1b      	lsrs	r3, r3, #24
   2266e:	b2db      	uxtb	r3, r3
   22670:	0019      	movs	r1, r3
   22672:	2380      	movs	r3, #128	; 0x80
   22674:	18fb      	adds	r3, r7, r3
   22676:	681b      	ldr	r3, [r3, #0]
   22678:	0c1b      	lsrs	r3, r3, #16
   2267a:	b2db      	uxtb	r3, r3
   2267c:	001a      	movs	r2, r3
   2267e:	2380      	movs	r3, #128	; 0x80
   22680:	18fb      	adds	r3, r7, r3
   22682:	681b      	ldr	r3, [r3, #0]
   22684:	0a1b      	lsrs	r3, r3, #8
   22686:	b2db      	uxtb	r3, r3
   22688:	001c      	movs	r4, r3
   2268a:	2380      	movs	r3, #128	; 0x80
   2268c:	18fb      	adds	r3, r7, r3
   2268e:	681b      	ldr	r3, [r3, #0]
   22690:	b2db      	uxtb	r3, r3
   22692:	4876      	ldr	r0, [pc, #472]	; (2286c <m2m_wifi_cb+0x364>)
   22694:	9300      	str	r3, [sp, #0]
   22696:	0023      	movs	r3, r4
   22698:	4c73      	ldr	r4, [pc, #460]	; (22868 <m2m_wifi_cb+0x360>)
   2269a:	47a0      	blx	r4
   2269c:	4b74      	ldr	r3, [pc, #464]	; (22870 <m2m_wifi_cb+0x368>)
   2269e:	0018      	movs	r0, r3
   226a0:	4b71      	ldr	r3, [pc, #452]	; (22868 <m2m_wifi_cb+0x360>)
   226a2:	4798      	blx	r3
			if (gpfAppWifiCb)
   226a4:	4b6d      	ldr	r3, [pc, #436]	; (2285c <m2m_wifi_cb+0x354>)
   226a6:	681b      	ldr	r3, [r3, #0]
   226a8:	2b00      	cmp	r3, #0
   226aa:	d100      	bne.n	226ae <m2m_wifi_cb+0x1a6>
   226ac:	e0f9      	b.n	228a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   226ae:	4b6b      	ldr	r3, [pc, #428]	; (2285c <m2m_wifi_cb+0x354>)
   226b0:	681b      	ldr	r3, [r3, #0]
   226b2:	2100      	movs	r1, #0
   226b4:	2034      	movs	r0, #52	; 0x34
   226b6:	4798      	blx	r3
}
   226b8:	e0f3      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   226ba:	1dfb      	adds	r3, r7, #7
   226bc:	781b      	ldrb	r3, [r3, #0]
   226be:	2b11      	cmp	r3, #17
   226c0:	d11e      	bne.n	22700 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   226c2:	4b6c      	ldr	r3, [pc, #432]	; (22874 <m2m_wifi_cb+0x36c>)
   226c4:	2200      	movs	r2, #0
   226c6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   226c8:	237c      	movs	r3, #124	; 0x7c
   226ca:	18f9      	adds	r1, r7, r3
   226cc:	6838      	ldr	r0, [r7, #0]
   226ce:	2300      	movs	r3, #0
   226d0:	2204      	movs	r2, #4
   226d2:	4c61      	ldr	r4, [pc, #388]	; (22858 <m2m_wifi_cb+0x350>)
   226d4:	47a0      	blx	r4
   226d6:	1e03      	subs	r3, r0, #0
   226d8:	d000      	beq.n	226dc <m2m_wifi_cb+0x1d4>
   226da:	e0e2      	b.n	228a2 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   226dc:	237c      	movs	r3, #124	; 0x7c
   226de:	18fb      	adds	r3, r7, r3
   226e0:	781a      	ldrb	r2, [r3, #0]
   226e2:	4b65      	ldr	r3, [pc, #404]	; (22878 <m2m_wifi_cb+0x370>)
   226e4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   226e6:	4b5d      	ldr	r3, [pc, #372]	; (2285c <m2m_wifi_cb+0x354>)
   226e8:	681b      	ldr	r3, [r3, #0]
   226ea:	2b00      	cmp	r3, #0
   226ec:	d100      	bne.n	226f0 <m2m_wifi_cb+0x1e8>
   226ee:	e0d8      	b.n	228a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   226f0:	4b5a      	ldr	r3, [pc, #360]	; (2285c <m2m_wifi_cb+0x354>)
   226f2:	681b      	ldr	r3, [r3, #0]
   226f4:	227c      	movs	r2, #124	; 0x7c
   226f6:	18ba      	adds	r2, r7, r2
   226f8:	0011      	movs	r1, r2
   226fa:	2011      	movs	r0, #17
   226fc:	4798      	blx	r3
}
   226fe:	e0d0      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   22700:	1dfb      	adds	r3, r7, #7
   22702:	781b      	ldrb	r3, [r3, #0]
   22704:	2b13      	cmp	r3, #19
   22706:	d116      	bne.n	22736 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   22708:	230c      	movs	r3, #12
   2270a:	18f9      	adds	r1, r7, r3
   2270c:	6838      	ldr	r0, [r7, #0]
   2270e:	2300      	movs	r3, #0
   22710:	222c      	movs	r2, #44	; 0x2c
   22712:	4c51      	ldr	r4, [pc, #324]	; (22858 <m2m_wifi_cb+0x350>)
   22714:	47a0      	blx	r4
   22716:	1e03      	subs	r3, r0, #0
   22718:	d000      	beq.n	2271c <m2m_wifi_cb+0x214>
   2271a:	e0c2      	b.n	228a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2271c:	4b4f      	ldr	r3, [pc, #316]	; (2285c <m2m_wifi_cb+0x354>)
   2271e:	681b      	ldr	r3, [r3, #0]
   22720:	2b00      	cmp	r3, #0
   22722:	d100      	bne.n	22726 <m2m_wifi_cb+0x21e>
   22724:	e0bd      	b.n	228a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   22726:	4b4d      	ldr	r3, [pc, #308]	; (2285c <m2m_wifi_cb+0x354>)
   22728:	681b      	ldr	r3, [r3, #0]
   2272a:	220c      	movs	r2, #12
   2272c:	18ba      	adds	r2, r7, r2
   2272e:	0011      	movs	r1, r2
   22730:	2013      	movs	r0, #19
   22732:	4798      	blx	r3
}
   22734:	e0b5      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   22736:	1dfb      	adds	r3, r7, #7
   22738:	781b      	ldrb	r3, [r3, #0]
   2273a:	2b04      	cmp	r3, #4
   2273c:	d116      	bne.n	2276c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   2273e:	23a8      	movs	r3, #168	; 0xa8
   22740:	18f9      	adds	r1, r7, r3
   22742:	6838      	ldr	r0, [r7, #0]
   22744:	2300      	movs	r3, #0
   22746:	2204      	movs	r2, #4
   22748:	4c43      	ldr	r4, [pc, #268]	; (22858 <m2m_wifi_cb+0x350>)
   2274a:	47a0      	blx	r4
   2274c:	1e03      	subs	r3, r0, #0
   2274e:	d000      	beq.n	22752 <m2m_wifi_cb+0x24a>
   22750:	e0a7      	b.n	228a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22752:	4b42      	ldr	r3, [pc, #264]	; (2285c <m2m_wifi_cb+0x354>)
   22754:	681b      	ldr	r3, [r3, #0]
   22756:	2b00      	cmp	r3, #0
   22758:	d100      	bne.n	2275c <m2m_wifi_cb+0x254>
   2275a:	e0a2      	b.n	228a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   2275c:	4b3f      	ldr	r3, [pc, #252]	; (2285c <m2m_wifi_cb+0x354>)
   2275e:	681b      	ldr	r3, [r3, #0]
   22760:	22a8      	movs	r2, #168	; 0xa8
   22762:	18ba      	adds	r2, r7, r2
   22764:	0011      	movs	r1, r2
   22766:	2004      	movs	r0, #4
   22768:	4798      	blx	r3
}
   2276a:	e09a      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   2276c:	1dfb      	adds	r3, r7, #7
   2276e:	781b      	ldrb	r3, [r3, #0]
   22770:	2b65      	cmp	r3, #101	; 0x65
   22772:	d116      	bne.n	227a2 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22774:	23a8      	movs	r3, #168	; 0xa8
   22776:	18f9      	adds	r1, r7, r3
   22778:	6838      	ldr	r0, [r7, #0]
   2277a:	2300      	movs	r3, #0
   2277c:	2204      	movs	r2, #4
   2277e:	4c36      	ldr	r4, [pc, #216]	; (22858 <m2m_wifi_cb+0x350>)
   22780:	47a0      	blx	r4
   22782:	1e03      	subs	r3, r0, #0
   22784:	d000      	beq.n	22788 <m2m_wifi_cb+0x280>
   22786:	e08c      	b.n	228a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22788:	4b34      	ldr	r3, [pc, #208]	; (2285c <m2m_wifi_cb+0x354>)
   2278a:	681b      	ldr	r3, [r3, #0]
   2278c:	2b00      	cmp	r3, #0
   2278e:	d100      	bne.n	22792 <m2m_wifi_cb+0x28a>
   22790:	e087      	b.n	228a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   22792:	4b32      	ldr	r3, [pc, #200]	; (2285c <m2m_wifi_cb+0x354>)
   22794:	681b      	ldr	r3, [r3, #0]
   22796:	22a8      	movs	r2, #168	; 0xa8
   22798:	18ba      	adds	r2, r7, r2
   2279a:	0011      	movs	r1, r2
   2279c:	2065      	movs	r0, #101	; 0x65
   2279e:	4798      	blx	r3
}
   227a0:	e07f      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   227a2:	1dfb      	adds	r3, r7, #7
   227a4:	781b      	ldrb	r3, [r3, #0]
   227a6:	2b09      	cmp	r3, #9
   227a8:	d116      	bne.n	227d8 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   227aa:	230c      	movs	r3, #12
   227ac:	18f9      	adds	r1, r7, r3
   227ae:	6838      	ldr	r0, [r7, #0]
   227b0:	2301      	movs	r3, #1
   227b2:	2264      	movs	r2, #100	; 0x64
   227b4:	4c28      	ldr	r4, [pc, #160]	; (22858 <m2m_wifi_cb+0x350>)
   227b6:	47a0      	blx	r4
   227b8:	1e03      	subs	r3, r0, #0
   227ba:	d000      	beq.n	227be <m2m_wifi_cb+0x2b6>
   227bc:	e071      	b.n	228a2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   227be:	4b27      	ldr	r3, [pc, #156]	; (2285c <m2m_wifi_cb+0x354>)
   227c0:	681b      	ldr	r3, [r3, #0]
   227c2:	2b00      	cmp	r3, #0
   227c4:	d100      	bne.n	227c8 <m2m_wifi_cb+0x2c0>
   227c6:	e06c      	b.n	228a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   227c8:	4b24      	ldr	r3, [pc, #144]	; (2285c <m2m_wifi_cb+0x354>)
   227ca:	681b      	ldr	r3, [r3, #0]
   227cc:	220c      	movs	r2, #12
   227ce:	18ba      	adds	r2, r7, r2
   227d0:	0011      	movs	r1, r2
   227d2:	2009      	movs	r0, #9
   227d4:	4798      	blx	r3
}
   227d6:	e064      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   227d8:	1dfb      	adds	r3, r7, #7
   227da:	781b      	ldrb	r3, [r3, #0]
   227dc:	2b2a      	cmp	r3, #42	; 0x2a
   227de:	d114      	bne.n	2280a <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   227e0:	2378      	movs	r3, #120	; 0x78
   227e2:	18f9      	adds	r1, r7, r3
   227e4:	6838      	ldr	r0, [r7, #0]
   227e6:	2301      	movs	r3, #1
   227e8:	2204      	movs	r2, #4
   227ea:	4c1b      	ldr	r4, [pc, #108]	; (22858 <m2m_wifi_cb+0x350>)
   227ec:	47a0      	blx	r4
   227ee:	1e03      	subs	r3, r0, #0
   227f0:	d157      	bne.n	228a2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   227f2:	4b1a      	ldr	r3, [pc, #104]	; (2285c <m2m_wifi_cb+0x354>)
   227f4:	681b      	ldr	r3, [r3, #0]
   227f6:	2b00      	cmp	r3, #0
   227f8:	d053      	beq.n	228a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   227fa:	4b18      	ldr	r3, [pc, #96]	; (2285c <m2m_wifi_cb+0x354>)
   227fc:	681b      	ldr	r3, [r3, #0]
   227fe:	2278      	movs	r2, #120	; 0x78
   22800:	18ba      	adds	r2, r7, r2
   22802:	0011      	movs	r1, r2
   22804:	202a      	movs	r0, #42	; 0x2a
   22806:	4798      	blx	r3
}
   22808:	e04b      	b.n	228a2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   2280a:	1dfb      	adds	r3, r7, #7
   2280c:	781b      	ldrb	r3, [r3, #0]
   2280e:	2b20      	cmp	r3, #32
   22810:	d134      	bne.n	2287c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   22812:	2370      	movs	r3, #112	; 0x70
   22814:	18f9      	adds	r1, r7, r3
   22816:	6838      	ldr	r0, [r7, #0]
   22818:	2300      	movs	r3, #0
   2281a:	2208      	movs	r2, #8
   2281c:	4c0e      	ldr	r4, [pc, #56]	; (22858 <m2m_wifi_cb+0x350>)
   2281e:	47a0      	blx	r4
   22820:	1e03      	subs	r3, r0, #0
   22822:	d13e      	bne.n	228a2 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   22824:	683b      	ldr	r3, [r7, #0]
   22826:	3308      	adds	r3, #8
   22828:	0018      	movs	r0, r3
   2282a:	2370      	movs	r3, #112	; 0x70
   2282c:	18fb      	adds	r3, r7, r3
   2282e:	6819      	ldr	r1, [r3, #0]
   22830:	2370      	movs	r3, #112	; 0x70
   22832:	18fb      	adds	r3, r7, r3
   22834:	889a      	ldrh	r2, [r3, #4]
   22836:	2301      	movs	r3, #1
   22838:	4c07      	ldr	r4, [pc, #28]	; (22858 <m2m_wifi_cb+0x350>)
   2283a:	47a0      	blx	r4
   2283c:	1e03      	subs	r3, r0, #0
   2283e:	d130      	bne.n	228a2 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   22840:	4b06      	ldr	r3, [pc, #24]	; (2285c <m2m_wifi_cb+0x354>)
   22842:	681b      	ldr	r3, [r3, #0]
   22844:	2b00      	cmp	r3, #0
   22846:	d02c      	beq.n	228a2 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   22848:	4b04      	ldr	r3, [pc, #16]	; (2285c <m2m_wifi_cb+0x354>)
   2284a:	681b      	ldr	r3, [r3, #0]
   2284c:	2270      	movs	r2, #112	; 0x70
   2284e:	18ba      	adds	r2, r7, r2
   22850:	0011      	movs	r1, r2
   22852:	2020      	movs	r0, #32
   22854:	4798      	blx	r3
}
   22856:	e024      	b.n	228a2 <m2m_wifi_cb+0x39a>
   22858:	000222cd 	.word	0x000222cd
   2285c:	20003ee0 	.word	0x20003ee0
   22860:	00021751 	.word	0x00021751
   22864:	00039234 	.word	0x00039234
   22868:	0001ea1d 	.word	0x0001ea1d
   2286c:	00039240 	.word	0x00039240
   22870:	00039260 	.word	0x00039260
   22874:	20003edd 	.word	0x20003edd
   22878:	20003edc 	.word	0x20003edc
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   2287c:	2324      	movs	r3, #36	; 0x24
   2287e:	33ff      	adds	r3, #255	; 0xff
   22880:	001a      	movs	r2, r3
   22882:	490a      	ldr	r1, [pc, #40]	; (228ac <m2m_wifi_cb+0x3a4>)
   22884:	4b0a      	ldr	r3, [pc, #40]	; (228b0 <m2m_wifi_cb+0x3a8>)
   22886:	0018      	movs	r0, r3
   22888:	4b0a      	ldr	r3, [pc, #40]	; (228b4 <m2m_wifi_cb+0x3ac>)
   2288a:	4798      	blx	r3
   2288c:	1dfb      	adds	r3, r7, #7
   2288e:	781a      	ldrb	r2, [r3, #0]
   22890:	4b09      	ldr	r3, [pc, #36]	; (228b8 <m2m_wifi_cb+0x3b0>)
   22892:	0011      	movs	r1, r2
   22894:	0018      	movs	r0, r3
   22896:	4b07      	ldr	r3, [pc, #28]	; (228b4 <m2m_wifi_cb+0x3ac>)
   22898:	4798      	blx	r3
   2289a:	4b08      	ldr	r3, [pc, #32]	; (228bc <m2m_wifi_cb+0x3b4>)
   2289c:	0018      	movs	r0, r3
   2289e:	4b05      	ldr	r3, [pc, #20]	; (228b4 <m2m_wifi_cb+0x3ac>)
   228a0:	4798      	blx	r3
}
   228a2:	46c0      	nop			; (mov r8, r8)
   228a4:	46bd      	mov	sp, r7
   228a6:	b02d      	add	sp, #180	; 0xb4
   228a8:	bd90      	pop	{r4, r7, pc}
   228aa:	46c0      	nop			; (mov r8, r8)
   228ac:	00039600 	.word	0x00039600
   228b0:	00039264 	.word	0x00039264
   228b4:	0001ea1d 	.word	0x0001ea1d
   228b8:	00039278 	.word	0x00039278
   228bc:	00039260 	.word	0x00039260

000228c0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   228c0:	b590      	push	{r4, r7, lr}
   228c2:	b091      	sub	sp, #68	; 0x44
   228c4:	af02      	add	r7, sp, #8
   228c6:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   228c8:	2337      	movs	r3, #55	; 0x37
   228ca:	18fb      	adds	r3, r7, r3
   228cc:	2200      	movs	r2, #0
   228ce:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   228d0:	230b      	movs	r3, #11
   228d2:	18fb      	adds	r3, r7, r3
   228d4:	2201      	movs	r2, #1
   228d6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   228d8:	687b      	ldr	r3, [r7, #4]
   228da:	2b00      	cmp	r3, #0
   228dc:	d104      	bne.n	228e8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   228de:	2337      	movs	r3, #55	; 0x37
   228e0:	18fb      	adds	r3, r7, r3
   228e2:	22f4      	movs	r2, #244	; 0xf4
   228e4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   228e6:	e0b3      	b.n	22a50 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   228e8:	687b      	ldr	r3, [r7, #4]
   228ea:	681a      	ldr	r2, [r3, #0]
   228ec:	4b5c      	ldr	r3, [pc, #368]	; (22a60 <m2m_wifi_init+0x1a0>)
   228ee:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   228f0:	4b5c      	ldr	r3, [pc, #368]	; (22a64 <m2m_wifi_init+0x1a4>)
   228f2:	2200      	movs	r2, #0
   228f4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   228f6:	2337      	movs	r3, #55	; 0x37
   228f8:	18fc      	adds	r4, r7, r3
   228fa:	230b      	movs	r3, #11
   228fc:	18fb      	adds	r3, r7, r3
   228fe:	0018      	movs	r0, r3
   22900:	4b59      	ldr	r3, [pc, #356]	; (22a68 <m2m_wifi_init+0x1a8>)
   22902:	4798      	blx	r3
   22904:	0003      	movs	r3, r0
   22906:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22908:	2337      	movs	r3, #55	; 0x37
   2290a:	18fb      	adds	r3, r7, r3
   2290c:	781b      	ldrb	r3, [r3, #0]
   2290e:	b25b      	sxtb	r3, r3
   22910:	2b00      	cmp	r3, #0
   22912:	d000      	beq.n	22916 <m2m_wifi_init+0x56>
   22914:	e099      	b.n	22a4a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   22916:	2337      	movs	r3, #55	; 0x37
   22918:	18fc      	adds	r4, r7, r3
   2291a:	2000      	movs	r0, #0
   2291c:	4b53      	ldr	r3, [pc, #332]	; (22a6c <m2m_wifi_init+0x1ac>)
   2291e:	4798      	blx	r3
   22920:	0003      	movs	r3, r0
   22922:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22924:	2337      	movs	r3, #55	; 0x37
   22926:	18fb      	adds	r3, r7, r3
   22928:	781b      	ldrb	r3, [r3, #0]
   2292a:	b25b      	sxtb	r3, r3
   2292c:	2b00      	cmp	r3, #0
   2292e:	d000      	beq.n	22932 <m2m_wifi_init+0x72>
   22930:	e086      	b.n	22a40 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   22932:	4b4f      	ldr	r3, [pc, #316]	; (22a70 <m2m_wifi_init+0x1b0>)
   22934:	0019      	movs	r1, r3
   22936:	2001      	movs	r0, #1
   22938:	4b4e      	ldr	r3, [pc, #312]	; (22a74 <m2m_wifi_init+0x1b4>)
   2293a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   2293c:	2337      	movs	r3, #55	; 0x37
   2293e:	18fc      	adds	r4, r7, r3
   22940:	230c      	movs	r3, #12
   22942:	18fb      	adds	r3, r7, r3
   22944:	0018      	movs	r0, r3
   22946:	4b4c      	ldr	r3, [pc, #304]	; (22a78 <m2m_wifi_init+0x1b8>)
   22948:	4798      	blx	r3
   2294a:	0003      	movs	r3, r0
   2294c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   2294e:	4b4b      	ldr	r3, [pc, #300]	; (22a7c <m2m_wifi_init+0x1bc>)
   22950:	0018      	movs	r0, r3
   22952:	4b4b      	ldr	r3, [pc, #300]	; (22a80 <m2m_wifi_init+0x1c0>)
   22954:	4798      	blx	r3
   22956:	230c      	movs	r3, #12
   22958:	18fb      	adds	r3, r7, r3
   2295a:	791b      	ldrb	r3, [r3, #4]
   2295c:	0019      	movs	r1, r3
   2295e:	230c      	movs	r3, #12
   22960:	18fb      	adds	r3, r7, r3
   22962:	795b      	ldrb	r3, [r3, #5]
   22964:	001a      	movs	r2, r3
   22966:	230c      	movs	r3, #12
   22968:	18fb      	adds	r3, r7, r3
   2296a:	799b      	ldrb	r3, [r3, #6]
   2296c:	001c      	movs	r4, r3
   2296e:	230c      	movs	r3, #12
   22970:	18fb      	adds	r3, r7, r3
   22972:	8c1b      	ldrh	r3, [r3, #32]
   22974:	4843      	ldr	r0, [pc, #268]	; (22a84 <m2m_wifi_init+0x1c4>)
   22976:	9300      	str	r3, [sp, #0]
   22978:	0023      	movs	r3, r4
   2297a:	4c41      	ldr	r4, [pc, #260]	; (22a80 <m2m_wifi_init+0x1c0>)
   2297c:	47a0      	blx	r4
   2297e:	4b42      	ldr	r3, [pc, #264]	; (22a88 <m2m_wifi_init+0x1c8>)
   22980:	0018      	movs	r0, r3
   22982:	4b3f      	ldr	r3, [pc, #252]	; (22a80 <m2m_wifi_init+0x1c0>)
   22984:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   22986:	4b3d      	ldr	r3, [pc, #244]	; (22a7c <m2m_wifi_init+0x1bc>)
   22988:	0018      	movs	r0, r3
   2298a:	4b3d      	ldr	r3, [pc, #244]	; (22a80 <m2m_wifi_init+0x1c0>)
   2298c:	4798      	blx	r3
   2298e:	230c      	movs	r3, #12
   22990:	18fb      	adds	r3, r7, r3
   22992:	3316      	adds	r3, #22
   22994:	001a      	movs	r2, r3
   22996:	230c      	movs	r3, #12
   22998:	18fb      	adds	r3, r7, r3
   2299a:	330a      	adds	r3, #10
   2299c:	0019      	movs	r1, r3
   2299e:	4b3b      	ldr	r3, [pc, #236]	; (22a8c <m2m_wifi_init+0x1cc>)
   229a0:	0018      	movs	r0, r3
   229a2:	4b37      	ldr	r3, [pc, #220]	; (22a80 <m2m_wifi_init+0x1c0>)
   229a4:	4798      	blx	r3
   229a6:	4b38      	ldr	r3, [pc, #224]	; (22a88 <m2m_wifi_init+0x1c8>)
   229a8:	0018      	movs	r0, r3
   229aa:	4b35      	ldr	r3, [pc, #212]	; (22a80 <m2m_wifi_init+0x1c0>)
   229ac:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   229ae:	4b33      	ldr	r3, [pc, #204]	; (22a7c <m2m_wifi_init+0x1bc>)
   229b0:	0018      	movs	r0, r3
   229b2:	4b33      	ldr	r3, [pc, #204]	; (22a80 <m2m_wifi_init+0x1c0>)
   229b4:	4798      	blx	r3
   229b6:	230c      	movs	r3, #12
   229b8:	18fb      	adds	r3, r7, r3
   229ba:	79db      	ldrb	r3, [r3, #7]
   229bc:	0019      	movs	r1, r3
   229be:	230c      	movs	r3, #12
   229c0:	18fb      	adds	r3, r7, r3
   229c2:	7a1b      	ldrb	r3, [r3, #8]
   229c4:	001a      	movs	r2, r3
   229c6:	230c      	movs	r3, #12
   229c8:	18fb      	adds	r3, r7, r3
   229ca:	7a5b      	ldrb	r3, [r3, #9]
   229cc:	4830      	ldr	r0, [pc, #192]	; (22a90 <m2m_wifi_init+0x1d0>)
   229ce:	4c2c      	ldr	r4, [pc, #176]	; (22a80 <m2m_wifi_init+0x1c0>)
   229d0:	47a0      	blx	r4
   229d2:	4b2d      	ldr	r3, [pc, #180]	; (22a88 <m2m_wifi_init+0x1c8>)
   229d4:	0018      	movs	r0, r3
   229d6:	4b2a      	ldr	r3, [pc, #168]	; (22a80 <m2m_wifi_init+0x1c0>)
   229d8:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   229da:	4b28      	ldr	r3, [pc, #160]	; (22a7c <m2m_wifi_init+0x1bc>)
   229dc:	0018      	movs	r0, r3
   229de:	4b28      	ldr	r3, [pc, #160]	; (22a80 <m2m_wifi_init+0x1c0>)
   229e0:	4798      	blx	r3
   229e2:	482c      	ldr	r0, [pc, #176]	; (22a94 <m2m_wifi_init+0x1d4>)
   229e4:	2304      	movs	r3, #4
   229e6:	2205      	movs	r2, #5
   229e8:	2113      	movs	r1, #19
   229ea:	4c25      	ldr	r4, [pc, #148]	; (22a80 <m2m_wifi_init+0x1c0>)
   229ec:	47a0      	blx	r4
   229ee:	4b26      	ldr	r3, [pc, #152]	; (22a88 <m2m_wifi_init+0x1c8>)
   229f0:	0018      	movs	r0, r3
   229f2:	4b23      	ldr	r3, [pc, #140]	; (22a80 <m2m_wifi_init+0x1c0>)
   229f4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   229f6:	4b21      	ldr	r3, [pc, #132]	; (22a7c <m2m_wifi_init+0x1bc>)
   229f8:	0018      	movs	r0, r3
   229fa:	4b21      	ldr	r3, [pc, #132]	; (22a80 <m2m_wifi_init+0x1c0>)
   229fc:	4798      	blx	r3
   229fe:	4a26      	ldr	r2, [pc, #152]	; (22a98 <m2m_wifi_init+0x1d8>)
   22a00:	4926      	ldr	r1, [pc, #152]	; (22a9c <m2m_wifi_init+0x1dc>)
   22a02:	4b27      	ldr	r3, [pc, #156]	; (22aa0 <m2m_wifi_init+0x1e0>)
   22a04:	0018      	movs	r0, r3
   22a06:	4b1e      	ldr	r3, [pc, #120]	; (22a80 <m2m_wifi_init+0x1c0>)
   22a08:	4798      	blx	r3
   22a0a:	4b1f      	ldr	r3, [pc, #124]	; (22a88 <m2m_wifi_init+0x1c8>)
   22a0c:	0018      	movs	r0, r3
   22a0e:	4b1c      	ldr	r3, [pc, #112]	; (22a80 <m2m_wifi_init+0x1c0>)
   22a10:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   22a12:	2337      	movs	r3, #55	; 0x37
   22a14:	18fb      	adds	r3, r7, r3
   22a16:	781b      	ldrb	r3, [r3, #0]
   22a18:	b25b      	sxtb	r3, r3
   22a1a:	330d      	adds	r3, #13
   22a1c:	d117      	bne.n	22a4e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   22a1e:	23e8      	movs	r3, #232	; 0xe8
   22a20:	33ff      	adds	r3, #255	; 0xff
   22a22:	001a      	movs	r2, r3
   22a24:	491f      	ldr	r1, [pc, #124]	; (22aa4 <m2m_wifi_init+0x1e4>)
   22a26:	4b20      	ldr	r3, [pc, #128]	; (22aa8 <m2m_wifi_init+0x1e8>)
   22a28:	0018      	movs	r0, r3
   22a2a:	4b15      	ldr	r3, [pc, #84]	; (22a80 <m2m_wifi_init+0x1c0>)
   22a2c:	4798      	blx	r3
   22a2e:	4b1f      	ldr	r3, [pc, #124]	; (22aac <m2m_wifi_init+0x1ec>)
   22a30:	0018      	movs	r0, r3
   22a32:	4b13      	ldr	r3, [pc, #76]	; (22a80 <m2m_wifi_init+0x1c0>)
   22a34:	4798      	blx	r3
   22a36:	4b14      	ldr	r3, [pc, #80]	; (22a88 <m2m_wifi_init+0x1c8>)
   22a38:	0018      	movs	r0, r3
   22a3a:	4b11      	ldr	r3, [pc, #68]	; (22a80 <m2m_wifi_init+0x1c0>)
   22a3c:	4798      	blx	r3
	}

	goto _EXIT0;
   22a3e:	e006      	b.n	22a4e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22a40:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   22a42:	2000      	movs	r0, #0
   22a44:	4b1a      	ldr	r3, [pc, #104]	; (22ab0 <m2m_wifi_init+0x1f0>)
   22a46:	4798      	blx	r3
   22a48:	e002      	b.n	22a50 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22a4a:	46c0      	nop			; (mov r8, r8)
   22a4c:	e000      	b.n	22a50 <m2m_wifi_init+0x190>
	goto _EXIT0;
   22a4e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   22a50:	2337      	movs	r3, #55	; 0x37
   22a52:	18fb      	adds	r3, r7, r3
   22a54:	781b      	ldrb	r3, [r3, #0]
   22a56:	b25b      	sxtb	r3, r3
}
   22a58:	0018      	movs	r0, r3
   22a5a:	46bd      	mov	sp, r7
   22a5c:	b00f      	add	sp, #60	; 0x3c
   22a5e:	bd90      	pop	{r4, r7, pc}
   22a60:	20003ee0 	.word	0x20003ee0
   22a64:	20003edd 	.word	0x20003edd
   22a68:	00023be5 	.word	0x00023be5
   22a6c:	00021969 	.word	0x00021969
   22a70:	00022509 	.word	0x00022509
   22a74:	0002244d 	.word	0x0002244d
   22a78:	00023a19 	.word	0x00023a19
   22a7c:	00039234 	.word	0x00039234
   22a80:	0001ea1d 	.word	0x0001ea1d
   22a84:	000393d8 	.word	0x000393d8
   22a88:	00039260 	.word	0x00039260
   22a8c:	00039400 	.word	0x00039400
   22a90:	0003941c 	.word	0x0003941c
   22a94:	00039440 	.word	0x00039440
   22a98:	00039458 	.word	0x00039458
   22a9c:	00039464 	.word	0x00039464
   22aa0:	00039470 	.word	0x00039470
   22aa4:	0003960c 	.word	0x0003960c
   22aa8:	00039264 	.word	0x00039264
   22aac:	00039488 	.word	0x00039488
   22ab0:	00023d75 	.word	0x00023d75

00022ab4 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   22ab4:	b580      	push	{r7, lr}
   22ab6:	b082      	sub	sp, #8
   22ab8:	af00      	add	r7, sp, #0
   22aba:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   22abc:	4b03      	ldr	r3, [pc, #12]	; (22acc <m2m_wifi_handle_events+0x18>)
   22abe:	4798      	blx	r3
   22ac0:	0003      	movs	r3, r0
}
   22ac2:	0018      	movs	r0, r3
   22ac4:	46bd      	mov	sp, r7
   22ac6:	b002      	add	sp, #8
   22ac8:	bd80      	pop	{r7, pc}
   22aca:	46c0      	nop			; (mov r8, r8)
   22acc:	0002222d 	.word	0x0002222d

00022ad0 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22ad0:	b590      	push	{r4, r7, lr}
   22ad2:	b087      	sub	sp, #28
   22ad4:	af02      	add	r7, sp, #8
   22ad6:	60f8      	str	r0, [r7, #12]
   22ad8:	0008      	movs	r0, r1
   22ada:	0011      	movs	r1, r2
   22adc:	607b      	str	r3, [r7, #4]
   22ade:	230b      	movs	r3, #11
   22ae0:	18fb      	adds	r3, r7, r3
   22ae2:	1c02      	adds	r2, r0, #0
   22ae4:	701a      	strb	r2, [r3, #0]
   22ae6:	230a      	movs	r3, #10
   22ae8:	18fb      	adds	r3, r7, r3
   22aea:	1c0a      	adds	r2, r1, #0
   22aec:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   22aee:	687c      	ldr	r4, [r7, #4]
   22af0:	230a      	movs	r3, #10
   22af2:	18fb      	adds	r3, r7, r3
   22af4:	781a      	ldrb	r2, [r3, #0]
   22af6:	230b      	movs	r3, #11
   22af8:	18fb      	adds	r3, r7, r3
   22afa:	7819      	ldrb	r1, [r3, #0]
   22afc:	68f8      	ldr	r0, [r7, #12]
   22afe:	2300      	movs	r3, #0
   22b00:	9301      	str	r3, [sp, #4]
   22b02:	2320      	movs	r3, #32
   22b04:	18fb      	adds	r3, r7, r3
   22b06:	881b      	ldrh	r3, [r3, #0]
   22b08:	9300      	str	r3, [sp, #0]
   22b0a:	0023      	movs	r3, r4
   22b0c:	4c03      	ldr	r4, [pc, #12]	; (22b1c <m2m_wifi_connect+0x4c>)
   22b0e:	47a0      	blx	r4
   22b10:	0003      	movs	r3, r0
}
   22b12:	0018      	movs	r0, r3
   22b14:	46bd      	mov	sp, r7
   22b16:	b005      	add	sp, #20
   22b18:	bd90      	pop	{r4, r7, pc}
   22b1a:	46c0      	nop			; (mov r8, r8)
   22b1c:	00022b21 	.word	0x00022b21

00022b20 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   22b20:	b5b0      	push	{r4, r5, r7, lr}
   22b22:	b0aa      	sub	sp, #168	; 0xa8
   22b24:	af04      	add	r7, sp, #16
   22b26:	60f8      	str	r0, [r7, #12]
   22b28:	0008      	movs	r0, r1
   22b2a:	0011      	movs	r1, r2
   22b2c:	607b      	str	r3, [r7, #4]
   22b2e:	230b      	movs	r3, #11
   22b30:	18fb      	adds	r3, r7, r3
   22b32:	1c02      	adds	r2, r0, #0
   22b34:	701a      	strb	r2, [r3, #0]
   22b36:	230a      	movs	r3, #10
   22b38:	18fb      	adds	r3, r7, r3
   22b3a:	1c0a      	adds	r2, r1, #0
   22b3c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   22b3e:	2397      	movs	r3, #151	; 0x97
   22b40:	18fb      	adds	r3, r7, r3
   22b42:	2200      	movs	r2, #0
   22b44:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   22b46:	230a      	movs	r3, #10
   22b48:	18fb      	adds	r3, r7, r3
   22b4a:	781b      	ldrb	r3, [r3, #0]
   22b4c:	2b01      	cmp	r3, #1
   22b4e:	d100      	bne.n	22b52 <m2m_wifi_connect_sc+0x32>
   22b50:	e085      	b.n	22c5e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   22b52:	687b      	ldr	r3, [r7, #4]
   22b54:	2b00      	cmp	r3, #0
   22b56:	d112      	bne.n	22b7e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   22b58:	4ad8      	ldr	r2, [pc, #864]	; (22ebc <m2m_wifi_connect_sc+0x39c>)
   22b5a:	49d9      	ldr	r1, [pc, #868]	; (22ec0 <m2m_wifi_connect_sc+0x3a0>)
   22b5c:	4bd9      	ldr	r3, [pc, #868]	; (22ec4 <m2m_wifi_connect_sc+0x3a4>)
   22b5e:	0018      	movs	r0, r3
   22b60:	4bd9      	ldr	r3, [pc, #868]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22b62:	4798      	blx	r3
   22b64:	4bd9      	ldr	r3, [pc, #868]	; (22ecc <m2m_wifi_connect_sc+0x3ac>)
   22b66:	0018      	movs	r0, r3
   22b68:	4bd7      	ldr	r3, [pc, #860]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22b6a:	4798      	blx	r3
   22b6c:	4bd8      	ldr	r3, [pc, #864]	; (22ed0 <m2m_wifi_connect_sc+0x3b0>)
   22b6e:	0018      	movs	r0, r3
   22b70:	4bd5      	ldr	r3, [pc, #852]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22b72:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22b74:	2397      	movs	r3, #151	; 0x97
   22b76:	18fb      	adds	r3, r7, r3
   22b78:	22f4      	movs	r2, #244	; 0xf4
   22b7a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22b7c:	e1f9      	b.n	22f72 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   22b7e:	230a      	movs	r3, #10
   22b80:	18fb      	adds	r3, r7, r3
   22b82:	781b      	ldrb	r3, [r3, #0]
   22b84:	2b02      	cmp	r3, #2
   22b86:	d16a      	bne.n	22c5e <m2m_wifi_connect_sc+0x13e>
   22b88:	687b      	ldr	r3, [r7, #4]
   22b8a:	0018      	movs	r0, r3
   22b8c:	4bd1      	ldr	r3, [pc, #836]	; (22ed4 <m2m_wifi_connect_sc+0x3b4>)
   22b8e:	4798      	blx	r3
   22b90:	0003      	movs	r3, r0
   22b92:	2b40      	cmp	r3, #64	; 0x40
   22b94:	d163      	bne.n	22c5e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   22b96:	2396      	movs	r3, #150	; 0x96
   22b98:	18fb      	adds	r3, r7, r3
   22b9a:	2200      	movs	r2, #0
   22b9c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   22b9e:	687b      	ldr	r3, [r7, #4]
   22ba0:	2290      	movs	r2, #144	; 0x90
   22ba2:	18ba      	adds	r2, r7, r2
   22ba4:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22ba6:	e055      	b.n	22c54 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   22ba8:	2396      	movs	r3, #150	; 0x96
   22baa:	18fb      	adds	r3, r7, r3
   22bac:	781b      	ldrb	r3, [r3, #0]
   22bae:	2290      	movs	r2, #144	; 0x90
   22bb0:	18ba      	adds	r2, r7, r2
   22bb2:	6812      	ldr	r2, [r2, #0]
   22bb4:	18d3      	adds	r3, r2, r3
   22bb6:	781b      	ldrb	r3, [r3, #0]
   22bb8:	2b2f      	cmp	r3, #47	; 0x2f
   22bba:	d931      	bls.n	22c20 <m2m_wifi_connect_sc+0x100>
   22bbc:	2396      	movs	r3, #150	; 0x96
   22bbe:	18fb      	adds	r3, r7, r3
   22bc0:	781b      	ldrb	r3, [r3, #0]
   22bc2:	2290      	movs	r2, #144	; 0x90
   22bc4:	18ba      	adds	r2, r7, r2
   22bc6:	6812      	ldr	r2, [r2, #0]
   22bc8:	18d3      	adds	r3, r2, r3
   22bca:	781b      	ldrb	r3, [r3, #0]
   22bcc:	2b39      	cmp	r3, #57	; 0x39
   22bce:	d909      	bls.n	22be4 <m2m_wifi_connect_sc+0xc4>
   22bd0:	2396      	movs	r3, #150	; 0x96
   22bd2:	18fb      	adds	r3, r7, r3
   22bd4:	781b      	ldrb	r3, [r3, #0]
   22bd6:	2290      	movs	r2, #144	; 0x90
   22bd8:	18ba      	adds	r2, r7, r2
   22bda:	6812      	ldr	r2, [r2, #0]
   22bdc:	18d3      	adds	r3, r2, r3
   22bde:	781b      	ldrb	r3, [r3, #0]
   22be0:	2b40      	cmp	r3, #64	; 0x40
   22be2:	d91d      	bls.n	22c20 <m2m_wifi_connect_sc+0x100>
   22be4:	2396      	movs	r3, #150	; 0x96
   22be6:	18fb      	adds	r3, r7, r3
   22be8:	781b      	ldrb	r3, [r3, #0]
   22bea:	2290      	movs	r2, #144	; 0x90
   22bec:	18ba      	adds	r2, r7, r2
   22bee:	6812      	ldr	r2, [r2, #0]
   22bf0:	18d3      	adds	r3, r2, r3
   22bf2:	781b      	ldrb	r3, [r3, #0]
   22bf4:	2b46      	cmp	r3, #70	; 0x46
   22bf6:	d909      	bls.n	22c0c <m2m_wifi_connect_sc+0xec>
   22bf8:	2396      	movs	r3, #150	; 0x96
   22bfa:	18fb      	adds	r3, r7, r3
   22bfc:	781b      	ldrb	r3, [r3, #0]
   22bfe:	2290      	movs	r2, #144	; 0x90
   22c00:	18ba      	adds	r2, r7, r2
   22c02:	6812      	ldr	r2, [r2, #0]
   22c04:	18d3      	adds	r3, r2, r3
   22c06:	781b      	ldrb	r3, [r3, #0]
   22c08:	2b60      	cmp	r3, #96	; 0x60
   22c0a:	d909      	bls.n	22c20 <m2m_wifi_connect_sc+0x100>
   22c0c:	2396      	movs	r3, #150	; 0x96
   22c0e:	18fb      	adds	r3, r7, r3
   22c10:	781b      	ldrb	r3, [r3, #0]
   22c12:	2290      	movs	r2, #144	; 0x90
   22c14:	18ba      	adds	r2, r7, r2
   22c16:	6812      	ldr	r2, [r2, #0]
   22c18:	18d3      	adds	r3, r2, r3
   22c1a:	781b      	ldrb	r3, [r3, #0]
   22c1c:	2b66      	cmp	r3, #102	; 0x66
   22c1e:	d912      	bls.n	22c46 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   22c20:	4aad      	ldr	r2, [pc, #692]	; (22ed8 <m2m_wifi_connect_sc+0x3b8>)
   22c22:	49a7      	ldr	r1, [pc, #668]	; (22ec0 <m2m_wifi_connect_sc+0x3a0>)
   22c24:	4ba7      	ldr	r3, [pc, #668]	; (22ec4 <m2m_wifi_connect_sc+0x3a4>)
   22c26:	0018      	movs	r0, r3
   22c28:	4ba7      	ldr	r3, [pc, #668]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22c2a:	4798      	blx	r3
   22c2c:	4bab      	ldr	r3, [pc, #684]	; (22edc <m2m_wifi_connect_sc+0x3bc>)
   22c2e:	0018      	movs	r0, r3
   22c30:	4ba5      	ldr	r3, [pc, #660]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22c32:	4798      	blx	r3
   22c34:	4ba6      	ldr	r3, [pc, #664]	; (22ed0 <m2m_wifi_connect_sc+0x3b0>)
   22c36:	0018      	movs	r0, r3
   22c38:	4ba3      	ldr	r3, [pc, #652]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22c3a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   22c3c:	2397      	movs	r3, #151	; 0x97
   22c3e:	18fb      	adds	r3, r7, r3
   22c40:	22f4      	movs	r2, #244	; 0xf4
   22c42:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22c44:	e195      	b.n	22f72 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   22c46:	2396      	movs	r3, #150	; 0x96
   22c48:	18fb      	adds	r3, r7, r3
   22c4a:	781a      	ldrb	r2, [r3, #0]
   22c4c:	2396      	movs	r3, #150	; 0x96
   22c4e:	18fb      	adds	r3, r7, r3
   22c50:	3201      	adds	r2, #1
   22c52:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22c54:	2396      	movs	r3, #150	; 0x96
   22c56:	18fb      	adds	r3, r7, r3
   22c58:	781b      	ldrb	r3, [r3, #0]
   22c5a:	2b3f      	cmp	r3, #63	; 0x3f
   22c5c:	d9a4      	bls.n	22ba8 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   22c5e:	230b      	movs	r3, #11
   22c60:	18fb      	adds	r3, r7, r3
   22c62:	781b      	ldrb	r3, [r3, #0]
   22c64:	2b00      	cmp	r3, #0
   22c66:	d004      	beq.n	22c72 <m2m_wifi_connect_sc+0x152>
   22c68:	230b      	movs	r3, #11
   22c6a:	18fb      	adds	r3, r7, r3
   22c6c:	781b      	ldrb	r3, [r3, #0]
   22c6e:	2b20      	cmp	r3, #32
   22c70:	d913      	bls.n	22c9a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   22c72:	238c      	movs	r3, #140	; 0x8c
   22c74:	009a      	lsls	r2, r3, #2
   22c76:	4992      	ldr	r1, [pc, #584]	; (22ec0 <m2m_wifi_connect_sc+0x3a0>)
   22c78:	4b92      	ldr	r3, [pc, #584]	; (22ec4 <m2m_wifi_connect_sc+0x3a4>)
   22c7a:	0018      	movs	r0, r3
   22c7c:	4b92      	ldr	r3, [pc, #584]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22c7e:	4798      	blx	r3
   22c80:	4b97      	ldr	r3, [pc, #604]	; (22ee0 <m2m_wifi_connect_sc+0x3c0>)
   22c82:	0018      	movs	r0, r3
   22c84:	4b90      	ldr	r3, [pc, #576]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22c86:	4798      	blx	r3
   22c88:	4b91      	ldr	r3, [pc, #580]	; (22ed0 <m2m_wifi_connect_sc+0x3b0>)
   22c8a:	0018      	movs	r0, r3
   22c8c:	4b8e      	ldr	r3, [pc, #568]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22c8e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22c90:	2397      	movs	r3, #151	; 0x97
   22c92:	18fb      	adds	r3, r7, r3
   22c94:	22f4      	movs	r2, #244	; 0xf4
   22c96:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22c98:	e16b      	b.n	22f72 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   22c9a:	23a8      	movs	r3, #168	; 0xa8
   22c9c:	18fb      	adds	r3, r7, r3
   22c9e:	881b      	ldrh	r3, [r3, #0]
   22ca0:	2b00      	cmp	r3, #0
   22ca2:	d004      	beq.n	22cae <m2m_wifi_connect_sc+0x18e>
   22ca4:	23a8      	movs	r3, #168	; 0xa8
   22ca6:	18fb      	adds	r3, r7, r3
   22ca8:	881b      	ldrh	r3, [r3, #0]
   22caa:	2b0e      	cmp	r3, #14
   22cac:	d917      	bls.n	22cde <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   22cae:	23a8      	movs	r3, #168	; 0xa8
   22cb0:	18fb      	adds	r3, r7, r3
   22cb2:	881b      	ldrh	r3, [r3, #0]
   22cb4:	2bff      	cmp	r3, #255	; 0xff
   22cb6:	d012      	beq.n	22cde <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   22cb8:	4a8a      	ldr	r2, [pc, #552]	; (22ee4 <m2m_wifi_connect_sc+0x3c4>)
   22cba:	4981      	ldr	r1, [pc, #516]	; (22ec0 <m2m_wifi_connect_sc+0x3a0>)
   22cbc:	4b81      	ldr	r3, [pc, #516]	; (22ec4 <m2m_wifi_connect_sc+0x3a4>)
   22cbe:	0018      	movs	r0, r3
   22cc0:	4b81      	ldr	r3, [pc, #516]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22cc2:	4798      	blx	r3
   22cc4:	4b88      	ldr	r3, [pc, #544]	; (22ee8 <m2m_wifi_connect_sc+0x3c8>)
   22cc6:	0018      	movs	r0, r3
   22cc8:	4b7f      	ldr	r3, [pc, #508]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22cca:	4798      	blx	r3
   22ccc:	4b80      	ldr	r3, [pc, #512]	; (22ed0 <m2m_wifi_connect_sc+0x3b0>)
   22cce:	0018      	movs	r0, r3
   22cd0:	4b7d      	ldr	r3, [pc, #500]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22cd2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22cd4:	2397      	movs	r3, #151	; 0x97
   22cd6:	18fb      	adds	r3, r7, r3
   22cd8:	22f4      	movs	r2, #244	; 0xf4
   22cda:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22cdc:	e149      	b.n	22f72 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   22cde:	230b      	movs	r3, #11
   22ce0:	18fb      	adds	r3, r7, r3
   22ce2:	781a      	ldrb	r2, [r3, #0]
   22ce4:	68f9      	ldr	r1, [r7, #12]
   22ce6:	2314      	movs	r3, #20
   22ce8:	18fb      	adds	r3, r7, r3
   22cea:	3346      	adds	r3, #70	; 0x46
   22cec:	0018      	movs	r0, r3
   22cee:	4b7f      	ldr	r3, [pc, #508]	; (22eec <m2m_wifi_connect_sc+0x3cc>)
   22cf0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22cf2:	230b      	movs	r3, #11
   22cf4:	18fb      	adds	r3, r7, r3
   22cf6:	781b      	ldrb	r3, [r3, #0]
   22cf8:	2214      	movs	r2, #20
   22cfa:	18ba      	adds	r2, r7, r2
   22cfc:	2146      	movs	r1, #70	; 0x46
   22cfe:	18d3      	adds	r3, r2, r3
   22d00:	185b      	adds	r3, r3, r1
   22d02:	2200      	movs	r2, #0
   22d04:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   22d06:	2314      	movs	r3, #20
   22d08:	18fb      	adds	r3, r7, r3
   22d0a:	22a8      	movs	r2, #168	; 0xa8
   22d0c:	18ba      	adds	r2, r7, r2
   22d0e:	2144      	movs	r1, #68	; 0x44
   22d10:	8812      	ldrh	r2, [r2, #0]
   22d12:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   22d14:	23ac      	movs	r3, #172	; 0xac
   22d16:	18fb      	adds	r3, r7, r3
   22d18:	781b      	ldrb	r3, [r3, #0]
   22d1a:	1e5a      	subs	r2, r3, #1
   22d1c:	4193      	sbcs	r3, r2
   22d1e:	b2db      	uxtb	r3, r3
   22d20:	0019      	movs	r1, r3
   22d22:	2314      	movs	r3, #20
   22d24:	18fb      	adds	r3, r7, r3
   22d26:	2267      	movs	r2, #103	; 0x67
   22d28:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   22d2a:	2314      	movs	r3, #20
   22d2c:	18fb      	adds	r3, r7, r3
   22d2e:	228c      	movs	r2, #140	; 0x8c
   22d30:	18ba      	adds	r2, r7, r2
   22d32:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   22d34:	238c      	movs	r3, #140	; 0x8c
   22d36:	18fb      	adds	r3, r7, r3
   22d38:	681b      	ldr	r3, [r3, #0]
   22d3a:	220a      	movs	r2, #10
   22d3c:	18ba      	adds	r2, r7, r2
   22d3e:	2141      	movs	r1, #65	; 0x41
   22d40:	7812      	ldrb	r2, [r2, #0]
   22d42:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   22d44:	230a      	movs	r3, #10
   22d46:	18fb      	adds	r3, r7, r3
   22d48:	781b      	ldrb	r3, [r3, #0]
   22d4a:	2b03      	cmp	r3, #3
   22d4c:	d000      	beq.n	22d50 <m2m_wifi_connect_sc+0x230>
   22d4e:	e07d      	b.n	22e4c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   22d50:	687b      	ldr	r3, [r7, #4]
   22d52:	2288      	movs	r2, #136	; 0x88
   22d54:	18ba      	adds	r2, r7, r2
   22d56:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   22d58:	238c      	movs	r3, #140	; 0x8c
   22d5a:	18fb      	adds	r3, r7, r3
   22d5c:	681b      	ldr	r3, [r3, #0]
   22d5e:	2284      	movs	r2, #132	; 0x84
   22d60:	18ba      	adds	r2, r7, r2
   22d62:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   22d64:	2388      	movs	r3, #136	; 0x88
   22d66:	18fb      	adds	r3, r7, r3
   22d68:	681b      	ldr	r3, [r3, #0]
   22d6a:	781b      	ldrb	r3, [r3, #0]
   22d6c:	3b01      	subs	r3, #1
   22d6e:	b2da      	uxtb	r2, r3
   22d70:	2384      	movs	r3, #132	; 0x84
   22d72:	18fb      	adds	r3, r7, r3
   22d74:	681b      	ldr	r3, [r3, #0]
   22d76:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   22d78:	2384      	movs	r3, #132	; 0x84
   22d7a:	18fb      	adds	r3, r7, r3
   22d7c:	681b      	ldr	r3, [r3, #0]
   22d7e:	781b      	ldrb	r3, [r3, #0]
   22d80:	2b03      	cmp	r3, #3
   22d82:	d919      	bls.n	22db8 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   22d84:	2394      	movs	r3, #148	; 0x94
   22d86:	009a      	lsls	r2, r3, #2
   22d88:	494d      	ldr	r1, [pc, #308]	; (22ec0 <m2m_wifi_connect_sc+0x3a0>)
   22d8a:	4b4e      	ldr	r3, [pc, #312]	; (22ec4 <m2m_wifi_connect_sc+0x3a4>)
   22d8c:	0018      	movs	r0, r3
   22d8e:	4b4e      	ldr	r3, [pc, #312]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22d90:	4798      	blx	r3
   22d92:	2384      	movs	r3, #132	; 0x84
   22d94:	18fb      	adds	r3, r7, r3
   22d96:	681b      	ldr	r3, [r3, #0]
   22d98:	781b      	ldrb	r3, [r3, #0]
   22d9a:	001a      	movs	r2, r3
   22d9c:	4b54      	ldr	r3, [pc, #336]	; (22ef0 <m2m_wifi_connect_sc+0x3d0>)
   22d9e:	0011      	movs	r1, r2
   22da0:	0018      	movs	r0, r3
   22da2:	4b49      	ldr	r3, [pc, #292]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22da4:	4798      	blx	r3
   22da6:	4b4a      	ldr	r3, [pc, #296]	; (22ed0 <m2m_wifi_connect_sc+0x3b0>)
   22da8:	0018      	movs	r0, r3
   22daa:	4b47      	ldr	r3, [pc, #284]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22dac:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22dae:	2397      	movs	r3, #151	; 0x97
   22db0:	18fb      	adds	r3, r7, r3
   22db2:	22f4      	movs	r2, #244	; 0xf4
   22db4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22db6:	e0dc      	b.n	22f72 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   22db8:	2388      	movs	r3, #136	; 0x88
   22dba:	18fb      	adds	r3, r7, r3
   22dbc:	681b      	ldr	r3, [r3, #0]
   22dbe:	785b      	ldrb	r3, [r3, #1]
   22dc0:	3b01      	subs	r3, #1
   22dc2:	b2da      	uxtb	r2, r3
   22dc4:	2384      	movs	r3, #132	; 0x84
   22dc6:	18fb      	adds	r3, r7, r3
   22dc8:	681b      	ldr	r3, [r3, #0]
   22dca:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   22dcc:	2384      	movs	r3, #132	; 0x84
   22dce:	18fb      	adds	r3, r7, r3
   22dd0:	681b      	ldr	r3, [r3, #0]
   22dd2:	785b      	ldrb	r3, [r3, #1]
   22dd4:	2b0a      	cmp	r3, #10
   22dd6:	d01e      	beq.n	22e16 <m2m_wifi_connect_sc+0x2f6>
   22dd8:	2384      	movs	r3, #132	; 0x84
   22dda:	18fb      	adds	r3, r7, r3
   22ddc:	681b      	ldr	r3, [r3, #0]
   22dde:	785b      	ldrb	r3, [r3, #1]
   22de0:	2b1a      	cmp	r3, #26
   22de2:	d018      	beq.n	22e16 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22de4:	4a43      	ldr	r2, [pc, #268]	; (22ef4 <m2m_wifi_connect_sc+0x3d4>)
   22de6:	4936      	ldr	r1, [pc, #216]	; (22ec0 <m2m_wifi_connect_sc+0x3a0>)
   22de8:	4b36      	ldr	r3, [pc, #216]	; (22ec4 <m2m_wifi_connect_sc+0x3a4>)
   22dea:	0018      	movs	r0, r3
   22dec:	4b36      	ldr	r3, [pc, #216]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22dee:	4798      	blx	r3
   22df0:	2384      	movs	r3, #132	; 0x84
   22df2:	18fb      	adds	r3, r7, r3
   22df4:	681b      	ldr	r3, [r3, #0]
   22df6:	785b      	ldrb	r3, [r3, #1]
   22df8:	001a      	movs	r2, r3
   22dfa:	4b3f      	ldr	r3, [pc, #252]	; (22ef8 <m2m_wifi_connect_sc+0x3d8>)
   22dfc:	0011      	movs	r1, r2
   22dfe:	0018      	movs	r0, r3
   22e00:	4b31      	ldr	r3, [pc, #196]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22e02:	4798      	blx	r3
   22e04:	4b32      	ldr	r3, [pc, #200]	; (22ed0 <m2m_wifi_connect_sc+0x3b0>)
   22e06:	0018      	movs	r0, r3
   22e08:	4b2f      	ldr	r3, [pc, #188]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22e0a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22e0c:	2397      	movs	r3, #151	; 0x97
   22e0e:	18fb      	adds	r3, r7, r3
   22e10:	22f4      	movs	r2, #244	; 0xf4
   22e12:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22e14:	e0ad      	b.n	22f72 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   22e16:	2384      	movs	r3, #132	; 0x84
   22e18:	18fb      	adds	r3, r7, r3
   22e1a:	681b      	ldr	r3, [r3, #0]
   22e1c:	1c98      	adds	r0, r3, #2
   22e1e:	2388      	movs	r3, #136	; 0x88
   22e20:	18fb      	adds	r3, r7, r3
   22e22:	681b      	ldr	r3, [r3, #0]
   22e24:	1c99      	adds	r1, r3, #2
   22e26:	2388      	movs	r3, #136	; 0x88
   22e28:	18fb      	adds	r3, r7, r3
   22e2a:	681b      	ldr	r3, [r3, #0]
   22e2c:	785b      	ldrb	r3, [r3, #1]
   22e2e:	001a      	movs	r2, r3
   22e30:	4b2e      	ldr	r3, [pc, #184]	; (22eec <m2m_wifi_connect_sc+0x3cc>)
   22e32:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   22e34:	2388      	movs	r3, #136	; 0x88
   22e36:	18fb      	adds	r3, r7, r3
   22e38:	681b      	ldr	r3, [r3, #0]
   22e3a:	785b      	ldrb	r3, [r3, #1]
   22e3c:	001a      	movs	r2, r3
   22e3e:	2384      	movs	r3, #132	; 0x84
   22e40:	18fb      	adds	r3, r7, r3
   22e42:	681b      	ldr	r3, [r3, #0]
   22e44:	189b      	adds	r3, r3, r2
   22e46:	2200      	movs	r2, #0
   22e48:	709a      	strb	r2, [r3, #2]
   22e4a:	e081      	b.n	22f50 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   22e4c:	230a      	movs	r3, #10
   22e4e:	18fb      	adds	r3, r7, r3
   22e50:	781b      	ldrb	r3, [r3, #0]
   22e52:	2b02      	cmp	r3, #2
   22e54:	d156      	bne.n	22f04 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   22e56:	2382      	movs	r3, #130	; 0x82
   22e58:	18fc      	adds	r4, r7, r3
   22e5a:	687b      	ldr	r3, [r7, #4]
   22e5c:	0018      	movs	r0, r3
   22e5e:	4b1d      	ldr	r3, [pc, #116]	; (22ed4 <m2m_wifi_connect_sc+0x3b4>)
   22e60:	4798      	blx	r3
   22e62:	0003      	movs	r3, r0
   22e64:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   22e66:	2382      	movs	r3, #130	; 0x82
   22e68:	18fb      	adds	r3, r7, r3
   22e6a:	881b      	ldrh	r3, [r3, #0]
   22e6c:	2b00      	cmp	r3, #0
   22e6e:	d004      	beq.n	22e7a <m2m_wifi_connect_sc+0x35a>
   22e70:	2382      	movs	r3, #130	; 0x82
   22e72:	18fb      	adds	r3, r7, r3
   22e74:	881b      	ldrh	r3, [r3, #0]
   22e76:	2b40      	cmp	r3, #64	; 0x40
   22e78:	d912      	bls.n	22ea0 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   22e7a:	4a20      	ldr	r2, [pc, #128]	; (22efc <m2m_wifi_connect_sc+0x3dc>)
   22e7c:	4910      	ldr	r1, [pc, #64]	; (22ec0 <m2m_wifi_connect_sc+0x3a0>)
   22e7e:	4b11      	ldr	r3, [pc, #68]	; (22ec4 <m2m_wifi_connect_sc+0x3a4>)
   22e80:	0018      	movs	r0, r3
   22e82:	4b11      	ldr	r3, [pc, #68]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22e84:	4798      	blx	r3
   22e86:	4b1e      	ldr	r3, [pc, #120]	; (22f00 <m2m_wifi_connect_sc+0x3e0>)
   22e88:	0018      	movs	r0, r3
   22e8a:	4b0f      	ldr	r3, [pc, #60]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22e8c:	4798      	blx	r3
   22e8e:	4b10      	ldr	r3, [pc, #64]	; (22ed0 <m2m_wifi_connect_sc+0x3b0>)
   22e90:	0018      	movs	r0, r3
   22e92:	4b0d      	ldr	r3, [pc, #52]	; (22ec8 <m2m_wifi_connect_sc+0x3a8>)
   22e94:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22e96:	2397      	movs	r3, #151	; 0x97
   22e98:	18fb      	adds	r3, r7, r3
   22e9a:	22f4      	movs	r2, #244	; 0xf4
   22e9c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22e9e:	e068      	b.n	22f72 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   22ea0:	238c      	movs	r3, #140	; 0x8c
   22ea2:	18fb      	adds	r3, r7, r3
   22ea4:	6818      	ldr	r0, [r3, #0]
   22ea6:	2382      	movs	r3, #130	; 0x82
   22ea8:	18fb      	adds	r3, r7, r3
   22eaa:	881b      	ldrh	r3, [r3, #0]
   22eac:	3301      	adds	r3, #1
   22eae:	001a      	movs	r2, r3
   22eb0:	687b      	ldr	r3, [r7, #4]
   22eb2:	0019      	movs	r1, r3
   22eb4:	4b0d      	ldr	r3, [pc, #52]	; (22eec <m2m_wifi_connect_sc+0x3cc>)
   22eb6:	4798      	blx	r3
   22eb8:	e04a      	b.n	22f50 <m2m_wifi_connect_sc+0x430>
   22eba:	46c0      	nop			; (mov r8, r8)
   22ebc:	0000021a 	.word	0x0000021a
   22ec0:	0003961c 	.word	0x0003961c
   22ec4:	00039264 	.word	0x00039264
   22ec8:	0001ea1d 	.word	0x0001ea1d
   22ecc:	000394a4 	.word	0x000394a4
   22ed0:	00039260 	.word	0x00039260
   22ed4:	0002178f 	.word	0x0002178f
   22ed8:	00000226 	.word	0x00000226
   22edc:	000394b8 	.word	0x000394b8
   22ee0:	000394c8 	.word	0x000394c8
   22ee4:	00000239 	.word	0x00000239
   22ee8:	000394dc 	.word	0x000394dc
   22eec:	00021715 	.word	0x00021715
   22ef0:	000394e8 	.word	0x000394e8
   22ef4:	00000257 	.word	0x00000257
   22ef8:	00039504 	.word	0x00039504
   22efc:	00000266 	.word	0x00000266
   22f00:	00039520 	.word	0x00039520
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   22f04:	230a      	movs	r3, #10
   22f06:	18fb      	adds	r3, r7, r3
   22f08:	781b      	ldrb	r3, [r3, #0]
   22f0a:	2b04      	cmp	r3, #4
   22f0c:	d108      	bne.n	22f20 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   22f0e:	238c      	movs	r3, #140	; 0x8c
   22f10:	18fb      	adds	r3, r7, r3
   22f12:	681b      	ldr	r3, [r3, #0]
   22f14:	6879      	ldr	r1, [r7, #4]
   22f16:	223e      	movs	r2, #62	; 0x3e
   22f18:	0018      	movs	r0, r3
   22f1a:	4b1a      	ldr	r3, [pc, #104]	; (22f84 <m2m_wifi_connect_sc+0x464>)
   22f1c:	4798      	blx	r3
   22f1e:	e017      	b.n	22f50 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   22f20:	230a      	movs	r3, #10
   22f22:	18fb      	adds	r3, r7, r3
   22f24:	781b      	ldrb	r3, [r3, #0]
   22f26:	2b01      	cmp	r3, #1
   22f28:	d012      	beq.n	22f50 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   22f2a:	4a17      	ldr	r2, [pc, #92]	; (22f88 <m2m_wifi_connect_sc+0x468>)
   22f2c:	4917      	ldr	r1, [pc, #92]	; (22f8c <m2m_wifi_connect_sc+0x46c>)
   22f2e:	4b18      	ldr	r3, [pc, #96]	; (22f90 <m2m_wifi_connect_sc+0x470>)
   22f30:	0018      	movs	r0, r3
   22f32:	4b18      	ldr	r3, [pc, #96]	; (22f94 <m2m_wifi_connect_sc+0x474>)
   22f34:	4798      	blx	r3
   22f36:	4b18      	ldr	r3, [pc, #96]	; (22f98 <m2m_wifi_connect_sc+0x478>)
   22f38:	0018      	movs	r0, r3
   22f3a:	4b16      	ldr	r3, [pc, #88]	; (22f94 <m2m_wifi_connect_sc+0x474>)
   22f3c:	4798      	blx	r3
   22f3e:	4b17      	ldr	r3, [pc, #92]	; (22f9c <m2m_wifi_connect_sc+0x47c>)
   22f40:	0018      	movs	r0, r3
   22f42:	4b14      	ldr	r3, [pc, #80]	; (22f94 <m2m_wifi_connect_sc+0x474>)
   22f44:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22f46:	2397      	movs	r3, #151	; 0x97
   22f48:	18fb      	adds	r3, r7, r3
   22f4a:	22f4      	movs	r2, #244	; 0xf4
   22f4c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22f4e:	e010      	b.n	22f72 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   22f50:	2397      	movs	r3, #151	; 0x97
   22f52:	18fc      	adds	r4, r7, r3
   22f54:	2314      	movs	r3, #20
   22f56:	18fa      	adds	r2, r7, r3
   22f58:	2300      	movs	r3, #0
   22f5a:	9302      	str	r3, [sp, #8]
   22f5c:	2300      	movs	r3, #0
   22f5e:	9301      	str	r3, [sp, #4]
   22f60:	2300      	movs	r3, #0
   22f62:	9300      	str	r3, [sp, #0]
   22f64:	236c      	movs	r3, #108	; 0x6c
   22f66:	2128      	movs	r1, #40	; 0x28
   22f68:	2001      	movs	r0, #1
   22f6a:	4d0d      	ldr	r5, [pc, #52]	; (22fa0 <m2m_wifi_connect_sc+0x480>)
   22f6c:	47a8      	blx	r5
   22f6e:	0003      	movs	r3, r0
   22f70:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   22f72:	2397      	movs	r3, #151	; 0x97
   22f74:	18fb      	adds	r3, r7, r3
   22f76:	781b      	ldrb	r3, [r3, #0]
   22f78:	b25b      	sxtb	r3, r3
}
   22f7a:	0018      	movs	r0, r3
   22f7c:	46bd      	mov	sp, r7
   22f7e:	b026      	add	sp, #152	; 0x98
   22f80:	bdb0      	pop	{r4, r5, r7, pc}
   22f82:	46c0      	nop			; (mov r8, r8)
   22f84:	00021715 	.word	0x00021715
   22f88:	00000276 	.word	0x00000276
   22f8c:	0003961c 	.word	0x0003961c
   22f90:	00039264 	.word	0x00039264
   22f94:	0001ea1d 	.word	0x0001ea1d
   22f98:	0003953c 	.word	0x0003953c
   22f9c:	00039260 	.word	0x00039260
   22fa0:	000219b1 	.word	0x000219b1

00022fa4 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   22fa4:	b580      	push	{r7, lr}
   22fa6:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   22fa8:	2300      	movs	r3, #0
}
   22faa:	0018      	movs	r0, r3
   22fac:	46bd      	mov	sp, r7
   22fae:	bd80      	pop	{r7, pc}

00022fb0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   22fb0:	b590      	push	{r4, r7, lr}
   22fb2:	b087      	sub	sp, #28
   22fb4:	af00      	add	r7, sp, #0
   22fb6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22fb8:	2317      	movs	r3, #23
   22fba:	18fb      	adds	r3, r7, r3
   22fbc:	2200      	movs	r2, #0
   22fbe:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   22fc0:	687b      	ldr	r3, [r7, #4]
   22fc2:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   22fc4:	693b      	ldr	r3, [r7, #16]
   22fc6:	2280      	movs	r2, #128	; 0x80
   22fc8:	0052      	lsls	r2, r2, #1
   22fca:	4313      	orrs	r3, r2
   22fcc:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   22fce:	693a      	ldr	r2, [r7, #16]
   22fd0:	23a5      	movs	r3, #165	; 0xa5
   22fd2:	015b      	lsls	r3, r3, #5
   22fd4:	0011      	movs	r1, r2
   22fd6:	0018      	movs	r0, r3
   22fd8:	4b12      	ldr	r3, [pc, #72]	; (23024 <chip_apply_conf+0x74>)
   22fda:	4798      	blx	r3
		if(val32 != 0) {		
   22fdc:	693b      	ldr	r3, [r7, #16]
   22fde:	2b00      	cmp	r3, #0
   22fe0:	d018      	beq.n	23014 <chip_apply_conf+0x64>
			uint32 reg = 0;
   22fe2:	2300      	movs	r3, #0
   22fe4:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   22fe6:	2317      	movs	r3, #23
   22fe8:	18fc      	adds	r4, r7, r3
   22fea:	230c      	movs	r3, #12
   22fec:	18fa      	adds	r2, r7, r3
   22fee:	23a5      	movs	r3, #165	; 0xa5
   22ff0:	015b      	lsls	r3, r3, #5
   22ff2:	0011      	movs	r1, r2
   22ff4:	0018      	movs	r0, r3
   22ff6:	4b0c      	ldr	r3, [pc, #48]	; (23028 <chip_apply_conf+0x78>)
   22ff8:	4798      	blx	r3
   22ffa:	0003      	movs	r3, r0
   22ffc:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   22ffe:	2317      	movs	r3, #23
   23000:	18fb      	adds	r3, r7, r3
   23002:	781b      	ldrb	r3, [r3, #0]
   23004:	b25b      	sxtb	r3, r3
   23006:	2b00      	cmp	r3, #0
   23008:	d1e1      	bne.n	22fce <chip_apply_conf+0x1e>
				if(reg == val32)
   2300a:	68fa      	ldr	r2, [r7, #12]
   2300c:	693b      	ldr	r3, [r7, #16]
   2300e:	429a      	cmp	r2, r3
   23010:	d002      	beq.n	23018 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   23012:	e7dc      	b.n	22fce <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   23014:	46c0      	nop			; (mov r8, r8)
   23016:	e000      	b.n	2301a <chip_apply_conf+0x6a>
					break;
   23018:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   2301a:	2300      	movs	r3, #0
}
   2301c:	0018      	movs	r0, r3
   2301e:	46bd      	mov	sp, r7
   23020:	b007      	add	sp, #28
   23022:	bd90      	pop	{r4, r7, pc}
   23024:	00023805 	.word	0x00023805
   23028:	000237e1 	.word	0x000237e1

0002302c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   2302c:	b590      	push	{r4, r7, lr}
   2302e:	b083      	sub	sp, #12
   23030:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   23032:	2300      	movs	r3, #0
   23034:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   23036:	1dfb      	adds	r3, r7, #7
   23038:	2200      	movs	r2, #0
   2303a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   2303c:	1dfc      	adds	r4, r7, #7
   2303e:	003b      	movs	r3, r7
   23040:	4a24      	ldr	r2, [pc, #144]	; (230d4 <enable_interrupts+0xa8>)
   23042:	0019      	movs	r1, r3
   23044:	0010      	movs	r0, r2
   23046:	4b24      	ldr	r3, [pc, #144]	; (230d8 <enable_interrupts+0xac>)
   23048:	4798      	blx	r3
   2304a:	0003      	movs	r3, r0
   2304c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2304e:	1dfb      	adds	r3, r7, #7
   23050:	781b      	ldrb	r3, [r3, #0]
   23052:	b25b      	sxtb	r3, r3
   23054:	2b00      	cmp	r3, #0
   23056:	d131      	bne.n	230bc <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   23058:	683b      	ldr	r3, [r7, #0]
   2305a:	2280      	movs	r2, #128	; 0x80
   2305c:	0052      	lsls	r2, r2, #1
   2305e:	4313      	orrs	r3, r2
   23060:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   23062:	683b      	ldr	r3, [r7, #0]
   23064:	1dfc      	adds	r4, r7, #7
   23066:	4a1b      	ldr	r2, [pc, #108]	; (230d4 <enable_interrupts+0xa8>)
   23068:	0019      	movs	r1, r3
   2306a:	0010      	movs	r0, r2
   2306c:	4b1b      	ldr	r3, [pc, #108]	; (230dc <enable_interrupts+0xb0>)
   2306e:	4798      	blx	r3
   23070:	0003      	movs	r3, r0
   23072:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23074:	1dfb      	adds	r3, r7, #7
   23076:	781b      	ldrb	r3, [r3, #0]
   23078:	b25b      	sxtb	r3, r3
   2307a:	2b00      	cmp	r3, #0
   2307c:	d120      	bne.n	230c0 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   2307e:	1dfc      	adds	r4, r7, #7
   23080:	003a      	movs	r2, r7
   23082:	23d0      	movs	r3, #208	; 0xd0
   23084:	015b      	lsls	r3, r3, #5
   23086:	0011      	movs	r1, r2
   23088:	0018      	movs	r0, r3
   2308a:	4b13      	ldr	r3, [pc, #76]	; (230d8 <enable_interrupts+0xac>)
   2308c:	4798      	blx	r3
   2308e:	0003      	movs	r3, r0
   23090:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23092:	1dfb      	adds	r3, r7, #7
   23094:	781b      	ldrb	r3, [r3, #0]
   23096:	b25b      	sxtb	r3, r3
   23098:	2b00      	cmp	r3, #0
   2309a:	d113      	bne.n	230c4 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   2309c:	683b      	ldr	r3, [r7, #0]
   2309e:	2280      	movs	r2, #128	; 0x80
   230a0:	0252      	lsls	r2, r2, #9
   230a2:	4313      	orrs	r3, r2
   230a4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   230a6:	683a      	ldr	r2, [r7, #0]
   230a8:	1dfc      	adds	r4, r7, #7
   230aa:	23d0      	movs	r3, #208	; 0xd0
   230ac:	015b      	lsls	r3, r3, #5
   230ae:	0011      	movs	r1, r2
   230b0:	0018      	movs	r0, r3
   230b2:	4b0a      	ldr	r3, [pc, #40]	; (230dc <enable_interrupts+0xb0>)
   230b4:	4798      	blx	r3
   230b6:	0003      	movs	r3, r0
   230b8:	7023      	strb	r3, [r4, #0]
   230ba:	e004      	b.n	230c6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   230bc:	46c0      	nop			; (mov r8, r8)
   230be:	e002      	b.n	230c6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   230c0:	46c0      	nop			; (mov r8, r8)
   230c2:	e000      	b.n	230c6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   230c4:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   230c6:	1dfb      	adds	r3, r7, #7
   230c8:	781b      	ldrb	r3, [r3, #0]
   230ca:	b25b      	sxtb	r3, r3
}
   230cc:	0018      	movs	r0, r3
   230ce:	46bd      	mov	sp, r7
   230d0:	b003      	add	sp, #12
   230d2:	bd90      	pop	{r4, r7, pc}
   230d4:	00001408 	.word	0x00001408
   230d8:	000237e1 	.word	0x000237e1
   230dc:	00023805 	.word	0x00023805

000230e0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   230e0:	b580      	push	{r7, lr}
   230e2:	b082      	sub	sp, #8
   230e4:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   230e6:	4b32      	ldr	r3, [pc, #200]	; (231b0 <nmi_get_chipid+0xd0>)
   230e8:	681b      	ldr	r3, [r3, #0]
   230ea:	2b00      	cmp	r3, #0
   230ec:	d159      	bne.n	231a2 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   230ee:	4a30      	ldr	r2, [pc, #192]	; (231b0 <nmi_get_chipid+0xd0>)
   230f0:	2380      	movs	r3, #128	; 0x80
   230f2:	015b      	lsls	r3, r3, #5
   230f4:	0011      	movs	r1, r2
   230f6:	0018      	movs	r0, r3
   230f8:	4b2e      	ldr	r3, [pc, #184]	; (231b4 <nmi_get_chipid+0xd4>)
   230fa:	4798      	blx	r3
   230fc:	1e03      	subs	r3, r0, #0
   230fe:	d004      	beq.n	2310a <nmi_get_chipid+0x2a>
			chipid = 0;
   23100:	4b2b      	ldr	r3, [pc, #172]	; (231b0 <nmi_get_chipid+0xd0>)
   23102:	2200      	movs	r2, #0
   23104:	601a      	str	r2, [r3, #0]
			return 0;
   23106:	2300      	movs	r3, #0
   23108:	e04d      	b.n	231a6 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   2310a:	1d3b      	adds	r3, r7, #4
   2310c:	4a2a      	ldr	r2, [pc, #168]	; (231b8 <nmi_get_chipid+0xd8>)
   2310e:	0019      	movs	r1, r3
   23110:	0010      	movs	r0, r2
   23112:	4b28      	ldr	r3, [pc, #160]	; (231b4 <nmi_get_chipid+0xd4>)
   23114:	4798      	blx	r3
   23116:	1e03      	subs	r3, r0, #0
   23118:	d004      	beq.n	23124 <nmi_get_chipid+0x44>
			chipid = 0;
   2311a:	4b25      	ldr	r3, [pc, #148]	; (231b0 <nmi_get_chipid+0xd0>)
   2311c:	2200      	movs	r2, #0
   2311e:	601a      	str	r2, [r3, #0]
			return 0;
   23120:	2300      	movs	r3, #0
   23122:	e040      	b.n	231a6 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   23124:	4b22      	ldr	r3, [pc, #136]	; (231b0 <nmi_get_chipid+0xd0>)
   23126:	681b      	ldr	r3, [r3, #0]
   23128:	4a24      	ldr	r2, [pc, #144]	; (231bc <nmi_get_chipid+0xdc>)
   2312a:	4293      	cmp	r3, r2
   2312c:	d106      	bne.n	2313c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   2312e:	687b      	ldr	r3, [r7, #4]
   23130:	2b01      	cmp	r3, #1
   23132:	d029      	beq.n	23188 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   23134:	4b1e      	ldr	r3, [pc, #120]	; (231b0 <nmi_get_chipid+0xd0>)
   23136:	4a22      	ldr	r2, [pc, #136]	; (231c0 <nmi_get_chipid+0xe0>)
   23138:	601a      	str	r2, [r3, #0]
   2313a:	e025      	b.n	23188 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   2313c:	4b1c      	ldr	r3, [pc, #112]	; (231b0 <nmi_get_chipid+0xd0>)
   2313e:	681b      	ldr	r3, [r3, #0]
   23140:	4a20      	ldr	r2, [pc, #128]	; (231c4 <nmi_get_chipid+0xe4>)
   23142:	4293      	cmp	r3, r2
   23144:	d10d      	bne.n	23162 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   23146:	687b      	ldr	r3, [r7, #4]
   23148:	2b03      	cmp	r3, #3
   2314a:	d01d      	beq.n	23188 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   2314c:	687b      	ldr	r3, [r7, #4]
   2314e:	2b04      	cmp	r3, #4
   23150:	d103      	bne.n	2315a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   23152:	4b17      	ldr	r3, [pc, #92]	; (231b0 <nmi_get_chipid+0xd0>)
   23154:	4a1c      	ldr	r2, [pc, #112]	; (231c8 <nmi_get_chipid+0xe8>)
   23156:	601a      	str	r2, [r3, #0]
   23158:	e016      	b.n	23188 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2315a:	4b15      	ldr	r3, [pc, #84]	; (231b0 <nmi_get_chipid+0xd0>)
   2315c:	4a1b      	ldr	r2, [pc, #108]	; (231cc <nmi_get_chipid+0xec>)
   2315e:	601a      	str	r2, [r3, #0]
   23160:	e012      	b.n	23188 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   23162:	4b13      	ldr	r3, [pc, #76]	; (231b0 <nmi_get_chipid+0xd0>)
   23164:	681b      	ldr	r3, [r3, #0]
   23166:	4a1a      	ldr	r2, [pc, #104]	; (231d0 <nmi_get_chipid+0xf0>)
   23168:	4293      	cmp	r3, r2
   2316a:	d10d      	bne.n	23188 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   2316c:	4a10      	ldr	r2, [pc, #64]	; (231b0 <nmi_get_chipid+0xd0>)
   2316e:	23ec      	movs	r3, #236	; 0xec
   23170:	039b      	lsls	r3, r3, #14
   23172:	0011      	movs	r1, r2
   23174:	0018      	movs	r0, r3
   23176:	4b0f      	ldr	r3, [pc, #60]	; (231b4 <nmi_get_chipid+0xd4>)
   23178:	4798      	blx	r3
   2317a:	1e03      	subs	r3, r0, #0
   2317c:	d004      	beq.n	23188 <nmi_get_chipid+0xa8>
			chipid = 0;
   2317e:	4b0c      	ldr	r3, [pc, #48]	; (231b0 <nmi_get_chipid+0xd0>)
   23180:	2200      	movs	r2, #0
   23182:	601a      	str	r2, [r3, #0]
			return 0;
   23184:	2300      	movs	r3, #0
   23186:	e00e      	b.n	231a6 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   23188:	4b09      	ldr	r3, [pc, #36]	; (231b0 <nmi_get_chipid+0xd0>)
   2318a:	681b      	ldr	r3, [r3, #0]
   2318c:	4a11      	ldr	r2, [pc, #68]	; (231d4 <nmi_get_chipid+0xf4>)
   2318e:	401a      	ands	r2, r3
   23190:	4b07      	ldr	r3, [pc, #28]	; (231b0 <nmi_get_chipid+0xd0>)
   23192:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   23194:	4b06      	ldr	r3, [pc, #24]	; (231b0 <nmi_get_chipid+0xd0>)
   23196:	681b      	ldr	r3, [r3, #0]
   23198:	22a0      	movs	r2, #160	; 0xa0
   2319a:	02d2      	lsls	r2, r2, #11
   2319c:	431a      	orrs	r2, r3
   2319e:	4b04      	ldr	r3, [pc, #16]	; (231b0 <nmi_get_chipid+0xd0>)
   231a0:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   231a2:	4b03      	ldr	r3, [pc, #12]	; (231b0 <nmi_get_chipid+0xd0>)
   231a4:	681b      	ldr	r3, [r3, #0]
}
   231a6:	0018      	movs	r0, r3
   231a8:	46bd      	mov	sp, r7
   231aa:	b002      	add	sp, #8
   231ac:	bd80      	pop	{r7, pc}
   231ae:	46c0      	nop			; (mov r8, r8)
   231b0:	20003ee4 	.word	0x20003ee4
   231b4:	000237e1 	.word	0x000237e1
   231b8:	000013f4 	.word	0x000013f4
   231bc:	001002a0 	.word	0x001002a0
   231c0:	001002a1 	.word	0x001002a1
   231c4:	001002b0 	.word	0x001002b0
   231c8:	001002b1 	.word	0x001002b1
   231cc:	001002b2 	.word	0x001002b2
   231d0:	001000f0 	.word	0x001000f0
   231d4:	fff0ffff 	.word	0xfff0ffff

000231d8 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   231d8:	b590      	push	{r4, r7, lr}
   231da:	b083      	sub	sp, #12
   231dc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   231de:	1dfb      	adds	r3, r7, #7
   231e0:	2200      	movs	r2, #0
   231e2:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   231e4:	1dfc      	adds	r4, r7, #7
   231e6:	003b      	movs	r3, r7
   231e8:	0019      	movs	r1, r3
   231ea:	2010      	movs	r0, #16
   231ec:	4b2e      	ldr	r3, [pc, #184]	; (232a8 <chip_sleep+0xd0>)
   231ee:	4798      	blx	r3
   231f0:	0003      	movs	r3, r0
   231f2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   231f4:	1dfb      	adds	r3, r7, #7
   231f6:	781b      	ldrb	r3, [r3, #0]
   231f8:	b25b      	sxtb	r3, r3
   231fa:	2b00      	cmp	r3, #0
   231fc:	d145      	bne.n	2328a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   231fe:	683b      	ldr	r3, [r7, #0]
   23200:	2201      	movs	r2, #1
   23202:	4013      	ands	r3, r2
   23204:	d000      	beq.n	23208 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   23206:	e7ed      	b.n	231e4 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   23208:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2320a:	1dfc      	adds	r4, r7, #7
   2320c:	003b      	movs	r3, r7
   2320e:	0019      	movs	r1, r3
   23210:	2001      	movs	r0, #1
   23212:	4b25      	ldr	r3, [pc, #148]	; (232a8 <chip_sleep+0xd0>)
   23214:	4798      	blx	r3
   23216:	0003      	movs	r3, r0
   23218:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2321a:	1dfb      	adds	r3, r7, #7
   2321c:	781b      	ldrb	r3, [r3, #0]
   2321e:	b25b      	sxtb	r3, r3
   23220:	2b00      	cmp	r3, #0
   23222:	d134      	bne.n	2328e <chip_sleep+0xb6>
	if(reg & NBIT1)
   23224:	683b      	ldr	r3, [r7, #0]
   23226:	2202      	movs	r2, #2
   23228:	4013      	ands	r3, r2
   2322a:	d010      	beq.n	2324e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   2322c:	683b      	ldr	r3, [r7, #0]
   2322e:	2202      	movs	r2, #2
   23230:	4393      	bics	r3, r2
   23232:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   23234:	683b      	ldr	r3, [r7, #0]
   23236:	1dfc      	adds	r4, r7, #7
   23238:	0019      	movs	r1, r3
   2323a:	2001      	movs	r0, #1
   2323c:	4b1b      	ldr	r3, [pc, #108]	; (232ac <chip_sleep+0xd4>)
   2323e:	4798      	blx	r3
   23240:	0003      	movs	r3, r0
   23242:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   23244:	1dfb      	adds	r3, r7, #7
   23246:	781b      	ldrb	r3, [r3, #0]
   23248:	b25b      	sxtb	r3, r3
   2324a:	2b00      	cmp	r3, #0
   2324c:	d121      	bne.n	23292 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2324e:	1dfc      	adds	r4, r7, #7
   23250:	003b      	movs	r3, r7
   23252:	0019      	movs	r1, r3
   23254:	200b      	movs	r0, #11
   23256:	4b14      	ldr	r3, [pc, #80]	; (232a8 <chip_sleep+0xd0>)
   23258:	4798      	blx	r3
   2325a:	0003      	movs	r3, r0
   2325c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2325e:	1dfb      	adds	r3, r7, #7
   23260:	781b      	ldrb	r3, [r3, #0]
   23262:	b25b      	sxtb	r3, r3
   23264:	2b00      	cmp	r3, #0
   23266:	d116      	bne.n	23296 <chip_sleep+0xbe>
	if(reg & NBIT0)
   23268:	683b      	ldr	r3, [r7, #0]
   2326a:	2201      	movs	r2, #1
   2326c:	4013      	ands	r3, r2
   2326e:	d013      	beq.n	23298 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   23270:	683b      	ldr	r3, [r7, #0]
   23272:	2201      	movs	r2, #1
   23274:	4393      	bics	r3, r2
   23276:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   23278:	683b      	ldr	r3, [r7, #0]
   2327a:	1dfc      	adds	r4, r7, #7
   2327c:	0019      	movs	r1, r3
   2327e:	200b      	movs	r0, #11
   23280:	4b0a      	ldr	r3, [pc, #40]	; (232ac <chip_sleep+0xd4>)
   23282:	4798      	blx	r3
   23284:	0003      	movs	r3, r0
   23286:	7023      	strb	r3, [r4, #0]
   23288:	e006      	b.n	23298 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2328a:	46c0      	nop			; (mov r8, r8)
   2328c:	e004      	b.n	23298 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2328e:	46c0      	nop			; (mov r8, r8)
   23290:	e002      	b.n	23298 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   23292:	46c0      	nop			; (mov r8, r8)
   23294:	e000      	b.n	23298 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   23296:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   23298:	1dfb      	adds	r3, r7, #7
   2329a:	781b      	ldrb	r3, [r3, #0]
   2329c:	b25b      	sxtb	r3, r3
}
   2329e:	0018      	movs	r0, r3
   232a0:	46bd      	mov	sp, r7
   232a2:	b003      	add	sp, #12
   232a4:	bd90      	pop	{r4, r7, pc}
   232a6:	46c0      	nop			; (mov r8, r8)
   232a8:	000237e1 	.word	0x000237e1
   232ac:	00023805 	.word	0x00023805

000232b0 <chip_wake>:
sint8 chip_wake(void)
{
   232b0:	b590      	push	{r4, r7, lr}
   232b2:	b085      	sub	sp, #20
   232b4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   232b6:	230f      	movs	r3, #15
   232b8:	18fb      	adds	r3, r7, r3
   232ba:	2200      	movs	r2, #0
   232bc:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   232be:	2300      	movs	r3, #0
   232c0:	607b      	str	r3, [r7, #4]
   232c2:	2300      	movs	r3, #0
   232c4:	603b      	str	r3, [r7, #0]
   232c6:	2300      	movs	r3, #0
   232c8:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   232ca:	230f      	movs	r3, #15
   232cc:	18fc      	adds	r4, r7, r3
   232ce:	1d3b      	adds	r3, r7, #4
   232d0:	0019      	movs	r1, r3
   232d2:	200b      	movs	r0, #11
   232d4:	4b4e      	ldr	r3, [pc, #312]	; (23410 <chip_wake+0x160>)
   232d6:	4798      	blx	r3
   232d8:	0003      	movs	r3, r0
   232da:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   232dc:	230f      	movs	r3, #15
   232de:	18fb      	adds	r3, r7, r3
   232e0:	781b      	ldrb	r3, [r3, #0]
   232e2:	b25b      	sxtb	r3, r3
   232e4:	2b00      	cmp	r3, #0
   232e6:	d000      	beq.n	232ea <chip_wake+0x3a>
   232e8:	e082      	b.n	233f0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   232ea:	687b      	ldr	r3, [r7, #4]
   232ec:	2201      	movs	r2, #1
   232ee:	4013      	ands	r3, r2
   232f0:	d111      	bne.n	23316 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   232f2:	687b      	ldr	r3, [r7, #4]
   232f4:	2201      	movs	r2, #1
   232f6:	4313      	orrs	r3, r2
   232f8:	220f      	movs	r2, #15
   232fa:	18bc      	adds	r4, r7, r2
   232fc:	0019      	movs	r1, r3
   232fe:	200b      	movs	r0, #11
   23300:	4b44      	ldr	r3, [pc, #272]	; (23414 <chip_wake+0x164>)
   23302:	4798      	blx	r3
   23304:	0003      	movs	r3, r0
   23306:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23308:	230f      	movs	r3, #15
   2330a:	18fb      	adds	r3, r7, r3
   2330c:	781b      	ldrb	r3, [r3, #0]
   2330e:	b25b      	sxtb	r3, r3
   23310:	2b00      	cmp	r3, #0
   23312:	d000      	beq.n	23316 <chip_wake+0x66>
   23314:	e06e      	b.n	233f4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   23316:	230f      	movs	r3, #15
   23318:	18fc      	adds	r4, r7, r3
   2331a:	1d3b      	adds	r3, r7, #4
   2331c:	0019      	movs	r1, r3
   2331e:	2001      	movs	r0, #1
   23320:	4b3b      	ldr	r3, [pc, #236]	; (23410 <chip_wake+0x160>)
   23322:	4798      	blx	r3
   23324:	0003      	movs	r3, r0
   23326:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23328:	230f      	movs	r3, #15
   2332a:	18fb      	adds	r3, r7, r3
   2332c:	781b      	ldrb	r3, [r3, #0]
   2332e:	b25b      	sxtb	r3, r3
   23330:	2b00      	cmp	r3, #0
   23332:	d161      	bne.n	233f8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   23334:	687b      	ldr	r3, [r7, #4]
   23336:	2202      	movs	r2, #2
   23338:	4013      	ands	r3, r2
   2333a:	d110      	bne.n	2335e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   2333c:	687b      	ldr	r3, [r7, #4]
   2333e:	2202      	movs	r2, #2
   23340:	4313      	orrs	r3, r2
   23342:	220f      	movs	r2, #15
   23344:	18bc      	adds	r4, r7, r2
   23346:	0019      	movs	r1, r3
   23348:	2001      	movs	r0, #1
   2334a:	4b32      	ldr	r3, [pc, #200]	; (23414 <chip_wake+0x164>)
   2334c:	4798      	blx	r3
   2334e:	0003      	movs	r3, r0
   23350:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   23352:	230f      	movs	r3, #15
   23354:	18fb      	adds	r3, r7, r3
   23356:	781b      	ldrb	r3, [r3, #0]
   23358:	b25b      	sxtb	r3, r3
   2335a:	2b00      	cmp	r3, #0
   2335c:	d14e      	bne.n	233fc <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2335e:	230f      	movs	r3, #15
   23360:	18fc      	adds	r4, r7, r3
   23362:	003b      	movs	r3, r7
   23364:	0019      	movs	r1, r3
   23366:	200f      	movs	r0, #15
   23368:	4b29      	ldr	r3, [pc, #164]	; (23410 <chip_wake+0x160>)
   2336a:	4798      	blx	r3
   2336c:	0003      	movs	r3, r0
   2336e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   23370:	230f      	movs	r3, #15
   23372:	18fb      	adds	r3, r7, r3
   23374:	781b      	ldrb	r3, [r3, #0]
   23376:	b25b      	sxtb	r3, r3
   23378:	2b00      	cmp	r3, #0
   2337a:	d014      	beq.n	233a6 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   2337c:	23a8      	movs	r3, #168	; 0xa8
   2337e:	005a      	lsls	r2, r3, #1
   23380:	4925      	ldr	r1, [pc, #148]	; (23418 <chip_wake+0x168>)
   23382:	4b26      	ldr	r3, [pc, #152]	; (2341c <chip_wake+0x16c>)
   23384:	0018      	movs	r0, r3
   23386:	4b26      	ldr	r3, [pc, #152]	; (23420 <chip_wake+0x170>)
   23388:	4798      	blx	r3
   2338a:	230f      	movs	r3, #15
   2338c:	18fb      	adds	r3, r7, r3
   2338e:	2100      	movs	r1, #0
   23390:	5659      	ldrsb	r1, [r3, r1]
   23392:	683a      	ldr	r2, [r7, #0]
   23394:	4b23      	ldr	r3, [pc, #140]	; (23424 <chip_wake+0x174>)
   23396:	0018      	movs	r0, r3
   23398:	4b21      	ldr	r3, [pc, #132]	; (23420 <chip_wake+0x170>)
   2339a:	4798      	blx	r3
   2339c:	4b22      	ldr	r3, [pc, #136]	; (23428 <chip_wake+0x178>)
   2339e:	0018      	movs	r0, r3
   233a0:	4b1f      	ldr	r3, [pc, #124]	; (23420 <chip_wake+0x170>)
   233a2:	4798      	blx	r3
			goto _WAKE_EXIT;
   233a4:	e02b      	b.n	233fe <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   233a6:	683b      	ldr	r3, [r7, #0]
   233a8:	2204      	movs	r2, #4
   233aa:	4013      	ands	r3, r2
   233ac:	d11c      	bne.n	233e8 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   233ae:	2002      	movs	r0, #2
   233b0:	4b1e      	ldr	r3, [pc, #120]	; (2342c <chip_wake+0x17c>)
   233b2:	4798      	blx	r3
		trials++;
   233b4:	68bb      	ldr	r3, [r7, #8]
   233b6:	3301      	adds	r3, #1
   233b8:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   233ba:	68bb      	ldr	r3, [r7, #8]
   233bc:	2b04      	cmp	r3, #4
   233be:	d9ce      	bls.n	2335e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   233c0:	23ad      	movs	r3, #173	; 0xad
   233c2:	005a      	lsls	r2, r3, #1
   233c4:	4914      	ldr	r1, [pc, #80]	; (23418 <chip_wake+0x168>)
   233c6:	4b15      	ldr	r3, [pc, #84]	; (2341c <chip_wake+0x16c>)
   233c8:	0018      	movs	r0, r3
   233ca:	4b15      	ldr	r3, [pc, #84]	; (23420 <chip_wake+0x170>)
   233cc:	4798      	blx	r3
   233ce:	4b18      	ldr	r3, [pc, #96]	; (23430 <chip_wake+0x180>)
   233d0:	0018      	movs	r0, r3
   233d2:	4b13      	ldr	r3, [pc, #76]	; (23420 <chip_wake+0x170>)
   233d4:	4798      	blx	r3
   233d6:	4b14      	ldr	r3, [pc, #80]	; (23428 <chip_wake+0x178>)
   233d8:	0018      	movs	r0, r3
   233da:	4b11      	ldr	r3, [pc, #68]	; (23420 <chip_wake+0x170>)
   233dc:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   233de:	230f      	movs	r3, #15
   233e0:	18fb      	adds	r3, r7, r3
   233e2:	22fc      	movs	r2, #252	; 0xfc
   233e4:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   233e6:	e00a      	b.n	233fe <chip_wake+0x14e>
			break;
   233e8:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   233ea:	4b12      	ldr	r3, [pc, #72]	; (23434 <chip_wake+0x184>)
   233ec:	4798      	blx	r3
   233ee:	e006      	b.n	233fe <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   233f0:	46c0      	nop			; (mov r8, r8)
   233f2:	e004      	b.n	233fe <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   233f4:	46c0      	nop			; (mov r8, r8)
   233f6:	e002      	b.n	233fe <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   233f8:	46c0      	nop			; (mov r8, r8)
   233fa:	e000      	b.n	233fe <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   233fc:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   233fe:	230f      	movs	r3, #15
   23400:	18fb      	adds	r3, r7, r3
   23402:	781b      	ldrb	r3, [r3, #0]
   23404:	b25b      	sxtb	r3, r3
}
   23406:	0018      	movs	r0, r3
   23408:	46bd      	mov	sp, r7
   2340a:	b005      	add	sp, #20
   2340c:	bd90      	pop	{r4, r7, pc}
   2340e:	46c0      	nop			; (mov r8, r8)
   23410:	000237e1 	.word	0x000237e1
   23414:	00023805 	.word	0x00023805
   23418:	000396bc 	.word	0x000396bc
   2341c:	00039630 	.word	0x00039630
   23420:	0001ea1d 	.word	0x0001ea1d
   23424:	00039644 	.word	0x00039644
   23428:	0003965c 	.word	0x0003965c
   2342c:	00020e71 	.word	0x00020e71
   23430:	00039660 	.word	0x00039660
   23434:	000237a1 	.word	0x000237a1

00023438 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   23438:	b580      	push	{r7, lr}
   2343a:	b088      	sub	sp, #32
   2343c:	af00      	add	r7, sp, #0
   2343e:	0002      	movs	r2, r0
   23440:	1dfb      	adds	r3, r7, #7
   23442:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23444:	2313      	movs	r3, #19
   23446:	18fb      	adds	r3, r7, r3
   23448:	2200      	movs	r2, #0
   2344a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   2344c:	2300      	movs	r3, #0
   2344e:	61fb      	str	r3, [r7, #28]
   23450:	2300      	movs	r3, #0
   23452:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   23454:	2300      	movs	r3, #0
   23456:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   23458:	4b4a      	ldr	r3, [pc, #296]	; (23584 <wait_for_bootrom+0x14c>)
   2345a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   2345c:	2300      	movs	r3, #0
   2345e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   23460:	4b49      	ldr	r3, [pc, #292]	; (23588 <wait_for_bootrom+0x150>)
   23462:	0018      	movs	r0, r3
   23464:	4b49      	ldr	r3, [pc, #292]	; (2358c <wait_for_bootrom+0x154>)
   23466:	4798      	blx	r3
   23468:	0003      	movs	r3, r0
   2346a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   2346c:	69fb      	ldr	r3, [r7, #28]
   2346e:	2b00      	cmp	r3, #0
   23470:	db03      	blt.n	2347a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   23472:	2001      	movs	r0, #1
   23474:	4b46      	ldr	r3, [pc, #280]	; (23590 <wait_for_bootrom+0x158>)
   23476:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   23478:	e7f2      	b.n	23460 <wait_for_bootrom+0x28>
			break;
   2347a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   2347c:	4b45      	ldr	r3, [pc, #276]	; (23594 <wait_for_bootrom+0x15c>)
   2347e:	0018      	movs	r0, r3
   23480:	4b42      	ldr	r3, [pc, #264]	; (2358c <wait_for_bootrom+0x154>)
   23482:	4798      	blx	r3
   23484:	0003      	movs	r3, r0
   23486:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   23488:	69fb      	ldr	r3, [r7, #28]
   2348a:	2201      	movs	r2, #1
   2348c:	4013      	ands	r3, r2
   2348e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   23490:	69fb      	ldr	r3, [r7, #28]
   23492:	2b00      	cmp	r3, #0
   23494:	d112      	bne.n	234bc <wait_for_bootrom+0x84>
	{
		reg = 0;
   23496:	2300      	movs	r3, #0
   23498:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2349a:	e00b      	b.n	234b4 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   2349c:	2001      	movs	r0, #1
   2349e:	4b3c      	ldr	r3, [pc, #240]	; (23590 <wait_for_bootrom+0x158>)
   234a0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   234a2:	4b3d      	ldr	r3, [pc, #244]	; (23598 <wait_for_bootrom+0x160>)
   234a4:	0018      	movs	r0, r3
   234a6:	4b39      	ldr	r3, [pc, #228]	; (2358c <wait_for_bootrom+0x154>)
   234a8:	4798      	blx	r3
   234aa:	0003      	movs	r3, r0
   234ac:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   234ae:	69bb      	ldr	r3, [r7, #24]
   234b0:	3301      	adds	r3, #1
   234b2:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   234b4:	69fb      	ldr	r3, [r7, #28]
   234b6:	4a39      	ldr	r2, [pc, #228]	; (2359c <wait_for_bootrom+0x164>)
   234b8:	4293      	cmp	r3, r2
   234ba:	d1ef      	bne.n	2349c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   234bc:	1dfb      	adds	r3, r7, #7
   234be:	781b      	ldrb	r3, [r3, #0]
   234c0:	2b02      	cmp	r3, #2
   234c2:	d10d      	bne.n	234e0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   234c4:	4a36      	ldr	r2, [pc, #216]	; (235a0 <wait_for_bootrom+0x168>)
   234c6:	4b37      	ldr	r3, [pc, #220]	; (235a4 <wait_for_bootrom+0x16c>)
   234c8:	0011      	movs	r1, r2
   234ca:	0018      	movs	r0, r3
   234cc:	4b36      	ldr	r3, [pc, #216]	; (235a8 <wait_for_bootrom+0x170>)
   234ce:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   234d0:	2380      	movs	r3, #128	; 0x80
   234d2:	035b      	lsls	r3, r3, #13
   234d4:	4a35      	ldr	r2, [pc, #212]	; (235ac <wait_for_bootrom+0x174>)
   234d6:	0019      	movs	r1, r3
   234d8:	0010      	movs	r0, r2
   234da:	4b33      	ldr	r3, [pc, #204]	; (235a8 <wait_for_bootrom+0x170>)
   234dc:	4798      	blx	r3
   234de:	e022      	b.n	23526 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   234e0:	1dfb      	adds	r3, r7, #7
   234e2:	781b      	ldrb	r3, [r3, #0]
   234e4:	2b03      	cmp	r3, #3
   234e6:	d10b      	bne.n	23500 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   234e8:	4a2d      	ldr	r2, [pc, #180]	; (235a0 <wait_for_bootrom+0x168>)
   234ea:	4b2e      	ldr	r3, [pc, #184]	; (235a4 <wait_for_bootrom+0x16c>)
   234ec:	0011      	movs	r1, r2
   234ee:	0018      	movs	r0, r3
   234f0:	4b2d      	ldr	r3, [pc, #180]	; (235a8 <wait_for_bootrom+0x170>)
   234f2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   234f4:	4b2d      	ldr	r3, [pc, #180]	; (235ac <wait_for_bootrom+0x174>)
   234f6:	2100      	movs	r1, #0
   234f8:	0018      	movs	r0, r3
   234fa:	4b2b      	ldr	r3, [pc, #172]	; (235a8 <wait_for_bootrom+0x170>)
   234fc:	4798      	blx	r3
   234fe:	e012      	b.n	23526 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   23500:	1dfb      	adds	r3, r7, #7
   23502:	781b      	ldrb	r3, [r3, #0]
   23504:	2b04      	cmp	r3, #4
   23506:	d108      	bne.n	2351a <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   23508:	2380      	movs	r3, #128	; 0x80
   2350a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2350c:	68fb      	ldr	r3, [r7, #12]
   2350e:	4a27      	ldr	r2, [pc, #156]	; (235ac <wait_for_bootrom+0x174>)
   23510:	0019      	movs	r1, r3
   23512:	0010      	movs	r0, r2
   23514:	4b24      	ldr	r3, [pc, #144]	; (235a8 <wait_for_bootrom+0x170>)
   23516:	4798      	blx	r3
   23518:	e005      	b.n	23526 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2351a:	68fb      	ldr	r3, [r7, #12]
   2351c:	4a23      	ldr	r2, [pc, #140]	; (235ac <wait_for_bootrom+0x174>)
   2351e:	0019      	movs	r1, r3
   23520:	0010      	movs	r0, r2
   23522:	4b21      	ldr	r3, [pc, #132]	; (235a8 <wait_for_bootrom+0x170>)
   23524:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   23526:	4b22      	ldr	r3, [pc, #136]	; (235b0 <wait_for_bootrom+0x178>)
   23528:	4798      	blx	r3
   2352a:	0003      	movs	r3, r0
   2352c:	051b      	lsls	r3, r3, #20
   2352e:	0d1b      	lsrs	r3, r3, #20
   23530:	4a20      	ldr	r2, [pc, #128]	; (235b4 <wait_for_bootrom+0x17c>)
   23532:	4293      	cmp	r3, r2
   23534:	d906      	bls.n	23544 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   23536:	697b      	ldr	r3, [r7, #20]
   23538:	2202      	movs	r2, #2
   2353a:	4313      	orrs	r3, r2
   2353c:	0018      	movs	r0, r3
   2353e:	4b1e      	ldr	r3, [pc, #120]	; (235b8 <wait_for_bootrom+0x180>)
   23540:	4798      	blx	r3
   23542:	e003      	b.n	2354c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   23544:	697b      	ldr	r3, [r7, #20]
   23546:	0018      	movs	r0, r3
   23548:	4b1b      	ldr	r3, [pc, #108]	; (235b8 <wait_for_bootrom+0x180>)
   2354a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   2354c:	4b1b      	ldr	r3, [pc, #108]	; (235bc <wait_for_bootrom+0x184>)
   2354e:	0018      	movs	r0, r3
   23550:	4b1b      	ldr	r3, [pc, #108]	; (235c0 <wait_for_bootrom+0x188>)
   23552:	4798      	blx	r3
   23554:	68fa      	ldr	r2, [r7, #12]
   23556:	4b1b      	ldr	r3, [pc, #108]	; (235c4 <wait_for_bootrom+0x18c>)
   23558:	0011      	movs	r1, r2
   2355a:	0018      	movs	r0, r3
   2355c:	4b18      	ldr	r3, [pc, #96]	; (235c0 <wait_for_bootrom+0x188>)
   2355e:	4798      	blx	r3
   23560:	4b19      	ldr	r3, [pc, #100]	; (235c8 <wait_for_bootrom+0x190>)
   23562:	0018      	movs	r0, r3
   23564:	4b16      	ldr	r3, [pc, #88]	; (235c0 <wait_for_bootrom+0x188>)
   23566:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   23568:	4a18      	ldr	r2, [pc, #96]	; (235cc <wait_for_bootrom+0x194>)
   2356a:	4b0b      	ldr	r3, [pc, #44]	; (23598 <wait_for_bootrom+0x160>)
   2356c:	0011      	movs	r1, r2
   2356e:	0018      	movs	r0, r3
   23570:	4b0d      	ldr	r3, [pc, #52]	; (235a8 <wait_for_bootrom+0x170>)
   23572:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   23574:	2313      	movs	r3, #19
   23576:	18fb      	adds	r3, r7, r3
   23578:	781b      	ldrb	r3, [r3, #0]
   2357a:	b25b      	sxtb	r3, r3
}
   2357c:	0018      	movs	r0, r3
   2357e:	46bd      	mov	sp, r7
   23580:	b008      	add	sp, #32
   23582:	bd80      	pop	{r7, pc}
   23584:	13301354 	.word	0x13301354
   23588:	00001014 	.word	0x00001014
   2358c:	000237c1 	.word	0x000237c1
   23590:	00020e71 	.word	0x00020e71
   23594:	000207bc 	.word	0x000207bc
   23598:	000c000c 	.word	0x000c000c
   2359c:	10add09e 	.word	0x10add09e
   235a0:	3c1cd57d 	.word	0x3c1cd57d
   235a4:	000207ac 	.word	0x000207ac
   235a8:	00023805 	.word	0x00023805
   235ac:	0000108c 	.word	0x0000108c
   235b0:	000230e1 	.word	0x000230e1
   235b4:	0000039f 	.word	0x0000039f
   235b8:	00022fb1 	.word	0x00022fb1
   235bc:	0003967c 	.word	0x0003967c
   235c0:	0001ea1d 	.word	0x0001ea1d
   235c4:	00039688 	.word	0x00039688
   235c8:	0003965c 	.word	0x0003965c
   235cc:	ef522f61 	.word	0xef522f61

000235d0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   235d0:	b580      	push	{r7, lr}
   235d2:	b088      	sub	sp, #32
   235d4:	af00      	add	r7, sp, #0
   235d6:	0002      	movs	r2, r0
   235d8:	1dfb      	adds	r3, r7, #7
   235da:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   235dc:	231f      	movs	r3, #31
   235de:	18fb      	adds	r3, r7, r3
   235e0:	2200      	movs	r2, #0
   235e2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   235e4:	2300      	movs	r3, #0
   235e6:	61bb      	str	r3, [r7, #24]
   235e8:	2300      	movs	r3, #0
   235ea:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   235ec:	2301      	movs	r3, #1
   235ee:	425b      	negs	r3, r3
   235f0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   235f2:	4b1d      	ldr	r3, [pc, #116]	; (23668 <wait_for_firmware_start+0x98>)
   235f4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   235f6:	4b1d      	ldr	r3, [pc, #116]	; (2366c <wait_for_firmware_start+0x9c>)
   235f8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   235fa:	1dfb      	adds	r3, r7, #7
   235fc:	781b      	ldrb	r3, [r3, #0]
   235fe:	2b02      	cmp	r3, #2
   23600:	d003      	beq.n	2360a <wait_for_firmware_start+0x3a>
   23602:	1dfb      	adds	r3, r7, #7
   23604:	781b      	ldrb	r3, [r3, #0]
   23606:	2b03      	cmp	r3, #3
   23608:	d119      	bne.n	2363e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   2360a:	4b19      	ldr	r3, [pc, #100]	; (23670 <wait_for_firmware_start+0xa0>)
   2360c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   2360e:	4b19      	ldr	r3, [pc, #100]	; (23674 <wait_for_firmware_start+0xa4>)
   23610:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   23612:	e014      	b.n	2363e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   23614:	2002      	movs	r0, #2
   23616:	4b18      	ldr	r3, [pc, #96]	; (23678 <wait_for_firmware_start+0xa8>)
   23618:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   2361a:	68fb      	ldr	r3, [r7, #12]
   2361c:	0018      	movs	r0, r3
   2361e:	4b17      	ldr	r3, [pc, #92]	; (2367c <wait_for_firmware_start+0xac>)
   23620:	4798      	blx	r3
   23622:	0003      	movs	r3, r0
   23624:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   23626:	697b      	ldr	r3, [r7, #20]
   23628:	3301      	adds	r3, #1
   2362a:	617b      	str	r3, [r7, #20]
   2362c:	697a      	ldr	r2, [r7, #20]
   2362e:	693b      	ldr	r3, [r7, #16]
   23630:	429a      	cmp	r2, r3
   23632:	d304      	bcc.n	2363e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   23634:	231f      	movs	r3, #31
   23636:	18fb      	adds	r3, r7, r3
   23638:	22fb      	movs	r2, #251	; 0xfb
   2363a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   2363c:	e00c      	b.n	23658 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   2363e:	68ba      	ldr	r2, [r7, #8]
   23640:	69bb      	ldr	r3, [r7, #24]
   23642:	429a      	cmp	r2, r3
   23644:	d1e6      	bne.n	23614 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   23646:	68bb      	ldr	r3, [r7, #8]
   23648:	4a08      	ldr	r2, [pc, #32]	; (2366c <wait_for_firmware_start+0x9c>)
   2364a:	4293      	cmp	r3, r2
   2364c:	d104      	bne.n	23658 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2364e:	4b06      	ldr	r3, [pc, #24]	; (23668 <wait_for_firmware_start+0x98>)
   23650:	2100      	movs	r1, #0
   23652:	0018      	movs	r0, r3
   23654:	4b0a      	ldr	r3, [pc, #40]	; (23680 <wait_for_firmware_start+0xb0>)
   23656:	4798      	blx	r3
	}
ERR:
	return ret;
   23658:	231f      	movs	r3, #31
   2365a:	18fb      	adds	r3, r7, r3
   2365c:	781b      	ldrb	r3, [r3, #0]
   2365e:	b25b      	sxtb	r3, r3
}
   23660:	0018      	movs	r0, r3
   23662:	46bd      	mov	sp, r7
   23664:	b008      	add	sp, #32
   23666:	bd80      	pop	{r7, pc}
   23668:	0000108c 	.word	0x0000108c
   2366c:	02532636 	.word	0x02532636
   23670:	000207ac 	.word	0x000207ac
   23674:	d75dc1c3 	.word	0xd75dc1c3
   23678:	00020e71 	.word	0x00020e71
   2367c:	000237c1 	.word	0x000237c1
   23680:	00023805 	.word	0x00023805

00023684 <chip_deinit>:

sint8 chip_deinit(void)
{
   23684:	b590      	push	{r4, r7, lr}
   23686:	b083      	sub	sp, #12
   23688:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2368a:	2300      	movs	r3, #0
   2368c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2368e:	1dfc      	adds	r4, r7, #7
   23690:	003a      	movs	r2, r7
   23692:	23a0      	movs	r3, #160	; 0xa0
   23694:	015b      	lsls	r3, r3, #5
   23696:	0011      	movs	r1, r2
   23698:	0018      	movs	r0, r3
   2369a:	4b20      	ldr	r3, [pc, #128]	; (2371c <chip_deinit+0x98>)
   2369c:	4798      	blx	r3
   2369e:	0003      	movs	r3, r0
   236a0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   236a2:	1dfb      	adds	r3, r7, #7
   236a4:	781b      	ldrb	r3, [r3, #0]
   236a6:	b25b      	sxtb	r3, r3
   236a8:	2b00      	cmp	r3, #0
   236aa:	d00e      	beq.n	236ca <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   236ac:	4a1c      	ldr	r2, [pc, #112]	; (23720 <chip_deinit+0x9c>)
   236ae:	491d      	ldr	r1, [pc, #116]	; (23724 <chip_deinit+0xa0>)
   236b0:	4b1d      	ldr	r3, [pc, #116]	; (23728 <chip_deinit+0xa4>)
   236b2:	0018      	movs	r0, r3
   236b4:	4b1d      	ldr	r3, [pc, #116]	; (2372c <chip_deinit+0xa8>)
   236b6:	4798      	blx	r3
   236b8:	4b1d      	ldr	r3, [pc, #116]	; (23730 <chip_deinit+0xac>)
   236ba:	0018      	movs	r0, r3
   236bc:	4b1b      	ldr	r3, [pc, #108]	; (2372c <chip_deinit+0xa8>)
   236be:	4798      	blx	r3
   236c0:	4b1c      	ldr	r3, [pc, #112]	; (23734 <chip_deinit+0xb0>)
   236c2:	0018      	movs	r0, r3
   236c4:	4b19      	ldr	r3, [pc, #100]	; (2372c <chip_deinit+0xa8>)
   236c6:	4798      	blx	r3
		goto ERR1;
   236c8:	e021      	b.n	2370e <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   236ca:	683b      	ldr	r3, [r7, #0]
   236cc:	4a1a      	ldr	r2, [pc, #104]	; (23738 <chip_deinit+0xb4>)
   236ce:	4013      	ands	r3, r2
   236d0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   236d2:	683a      	ldr	r2, [r7, #0]
   236d4:	1dfc      	adds	r4, r7, #7
   236d6:	23a0      	movs	r3, #160	; 0xa0
   236d8:	015b      	lsls	r3, r3, #5
   236da:	0011      	movs	r1, r2
   236dc:	0018      	movs	r0, r3
   236de:	4b17      	ldr	r3, [pc, #92]	; (2373c <chip_deinit+0xb8>)
   236e0:	4798      	blx	r3
   236e2:	0003      	movs	r3, r0
   236e4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   236e6:	1dfb      	adds	r3, r7, #7
   236e8:	781b      	ldrb	r3, [r3, #0]
   236ea:	b25b      	sxtb	r3, r3
   236ec:	2b00      	cmp	r3, #0
   236ee:	d00e      	beq.n	2370e <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   236f0:	4a13      	ldr	r2, [pc, #76]	; (23740 <chip_deinit+0xbc>)
   236f2:	490c      	ldr	r1, [pc, #48]	; (23724 <chip_deinit+0xa0>)
   236f4:	4b0c      	ldr	r3, [pc, #48]	; (23728 <chip_deinit+0xa4>)
   236f6:	0018      	movs	r0, r3
   236f8:	4b0c      	ldr	r3, [pc, #48]	; (2372c <chip_deinit+0xa8>)
   236fa:	4798      	blx	r3
   236fc:	4b0c      	ldr	r3, [pc, #48]	; (23730 <chip_deinit+0xac>)
   236fe:	0018      	movs	r0, r3
   23700:	4b0a      	ldr	r3, [pc, #40]	; (2372c <chip_deinit+0xa8>)
   23702:	4798      	blx	r3
   23704:	4b0b      	ldr	r3, [pc, #44]	; (23734 <chip_deinit+0xb0>)
   23706:	0018      	movs	r0, r3
   23708:	4b08      	ldr	r3, [pc, #32]	; (2372c <chip_deinit+0xa8>)
   2370a:	4798      	blx	r3
		goto ERR1;
   2370c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2370e:	1dfb      	adds	r3, r7, #7
   23710:	781b      	ldrb	r3, [r3, #0]
   23712:	b25b      	sxtb	r3, r3
}
   23714:	0018      	movs	r0, r3
   23716:	46bd      	mov	sp, r7
   23718:	b003      	add	sp, #12
   2371a:	bd90      	pop	{r4, r7, pc}
   2371c:	000237e1 	.word	0x000237e1
   23720:	00000201 	.word	0x00000201
   23724:	000396c8 	.word	0x000396c8
   23728:	00039630 	.word	0x00039630
   2372c:	0001ea1d 	.word	0x0001ea1d
   23730:	000396a0 	.word	0x000396a0
   23734:	0003965c 	.word	0x0003965c
   23738:	fffffbff 	.word	0xfffffbff
   2373c:	00023805 	.word	0x00023805
   23740:	00000207 	.word	0x00000207

00023744 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   23744:	b590      	push	{r4, r7, lr}
   23746:	b085      	sub	sp, #20
   23748:	af00      	add	r7, sp, #0
   2374a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2374c:	230f      	movs	r3, #15
   2374e:	18fb      	adds	r3, r7, r3
   23750:	2200      	movs	r2, #0
   23752:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   23754:	230f      	movs	r3, #15
   23756:	18fc      	adds	r4, r7, r3
   23758:	687b      	ldr	r3, [r7, #4]
   2375a:	0018      	movs	r0, r3
   2375c:	4b05      	ldr	r3, [pc, #20]	; (23774 <nm_bus_iface_init+0x30>)
   2375e:	4798      	blx	r3
   23760:	0003      	movs	r3, r0
   23762:	7023      	strb	r3, [r4, #0]
	return ret;
   23764:	230f      	movs	r3, #15
   23766:	18fb      	adds	r3, r7, r3
   23768:	781b      	ldrb	r3, [r3, #0]
   2376a:	b25b      	sxtb	r3, r3
}
   2376c:	0018      	movs	r0, r3
   2376e:	46bd      	mov	sp, r7
   23770:	b005      	add	sp, #20
   23772:	bd90      	pop	{r4, r7, pc}
   23774:	0002152d 	.word	0x0002152d

00023778 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   23778:	b590      	push	{r4, r7, lr}
   2377a:	b083      	sub	sp, #12
   2377c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2377e:	1dfb      	adds	r3, r7, #7
   23780:	2200      	movs	r2, #0
   23782:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   23784:	1dfc      	adds	r4, r7, #7
   23786:	4b05      	ldr	r3, [pc, #20]	; (2379c <nm_bus_iface_deinit+0x24>)
   23788:	4798      	blx	r3
   2378a:	0003      	movs	r3, r0
   2378c:	7023      	strb	r3, [r4, #0]

	return ret;
   2378e:	1dfb      	adds	r3, r7, #7
   23790:	781b      	ldrb	r3, [r3, #0]
   23792:	b25b      	sxtb	r3, r3
}
   23794:	0018      	movs	r0, r3
   23796:	46bd      	mov	sp, r7
   23798:	b003      	add	sp, #12
   2379a:	bd90      	pop	{r4, r7, pc}
   2379c:	000216a5 	.word	0x000216a5

000237a0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   237a0:	b580      	push	{r7, lr}
   237a2:	b082      	sub	sp, #8
   237a4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   237a6:	1dfb      	adds	r3, r7, #7
   237a8:	2200      	movs	r2, #0
   237aa:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   237ac:	4b03      	ldr	r3, [pc, #12]	; (237bc <nm_bus_reset+0x1c>)
   237ae:	4798      	blx	r3
   237b0:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   237b2:	0018      	movs	r0, r3
   237b4:	46bd      	mov	sp, r7
   237b6:	b002      	add	sp, #8
   237b8:	bd80      	pop	{r7, pc}
   237ba:	46c0      	nop			; (mov r8, r8)
   237bc:	000255cd 	.word	0x000255cd

000237c0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   237c0:	b580      	push	{r7, lr}
   237c2:	b082      	sub	sp, #8
   237c4:	af00      	add	r7, sp, #0
   237c6:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   237c8:	687b      	ldr	r3, [r7, #4]
   237ca:	0018      	movs	r0, r3
   237cc:	4b03      	ldr	r3, [pc, #12]	; (237dc <nm_read_reg+0x1c>)
   237ce:	4798      	blx	r3
   237d0:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   237d2:	0018      	movs	r0, r3
   237d4:	46bd      	mov	sp, r7
   237d6:	b002      	add	sp, #8
   237d8:	bd80      	pop	{r7, pc}
   237da:	46c0      	nop			; (mov r8, r8)
   237dc:	00025761 	.word	0x00025761

000237e0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   237e0:	b580      	push	{r7, lr}
   237e2:	b082      	sub	sp, #8
   237e4:	af00      	add	r7, sp, #0
   237e6:	6078      	str	r0, [r7, #4]
   237e8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   237ea:	683a      	ldr	r2, [r7, #0]
   237ec:	687b      	ldr	r3, [r7, #4]
   237ee:	0011      	movs	r1, r2
   237f0:	0018      	movs	r0, r3
   237f2:	4b03      	ldr	r3, [pc, #12]	; (23800 <nm_read_reg_with_ret+0x20>)
   237f4:	4798      	blx	r3
   237f6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   237f8:	0018      	movs	r0, r3
   237fa:	46bd      	mov	sp, r7
   237fc:	b002      	add	sp, #8
   237fe:	bd80      	pop	{r7, pc}
   23800:	00025785 	.word	0x00025785

00023804 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   23804:	b580      	push	{r7, lr}
   23806:	b082      	sub	sp, #8
   23808:	af00      	add	r7, sp, #0
   2380a:	6078      	str	r0, [r7, #4]
   2380c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   2380e:	683a      	ldr	r2, [r7, #0]
   23810:	687b      	ldr	r3, [r7, #4]
   23812:	0011      	movs	r1, r2
   23814:	0018      	movs	r0, r3
   23816:	4b03      	ldr	r3, [pc, #12]	; (23824 <nm_write_reg+0x20>)
   23818:	4798      	blx	r3
   2381a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   2381c:	0018      	movs	r0, r3
   2381e:	46bd      	mov	sp, r7
   23820:	b002      	add	sp, #8
   23822:	bd80      	pop	{r7, pc}
   23824:	000257d5 	.word	0x000257d5

00023828 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23828:	b580      	push	{r7, lr}
   2382a:	b084      	sub	sp, #16
   2382c:	af00      	add	r7, sp, #0
   2382e:	60f8      	str	r0, [r7, #12]
   23830:	60b9      	str	r1, [r7, #8]
   23832:	1dbb      	adds	r3, r7, #6
   23834:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   23836:	1dbb      	adds	r3, r7, #6
   23838:	881a      	ldrh	r2, [r3, #0]
   2383a:	68b9      	ldr	r1, [r7, #8]
   2383c:	68fb      	ldr	r3, [r7, #12]
   2383e:	0018      	movs	r0, r3
   23840:	4b03      	ldr	r3, [pc, #12]	; (23850 <p_nm_read_block+0x28>)
   23842:	4798      	blx	r3
   23844:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23846:	0018      	movs	r0, r3
   23848:	46bd      	mov	sp, r7
   2384a:	b004      	add	sp, #16
   2384c:	bd80      	pop	{r7, pc}
   2384e:	46c0      	nop			; (mov r8, r8)
   23850:	00025825 	.word	0x00025825

00023854 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23854:	b580      	push	{r7, lr}
   23856:	b086      	sub	sp, #24
   23858:	af00      	add	r7, sp, #0
   2385a:	60f8      	str	r0, [r7, #12]
   2385c:	60b9      	str	r1, [r7, #8]
   2385e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23860:	4b2d      	ldr	r3, [pc, #180]	; (23918 <nm_read_block+0xc4>)
   23862:	881a      	ldrh	r2, [r3, #0]
   23864:	2310      	movs	r3, #16
   23866:	18fb      	adds	r3, r7, r3
   23868:	3a08      	subs	r2, #8
   2386a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   2386c:	2300      	movs	r3, #0
   2386e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23870:	2313      	movs	r3, #19
   23872:	18fb      	adds	r3, r7, r3
   23874:	2200      	movs	r2, #0
   23876:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23878:	2310      	movs	r3, #16
   2387a:	18fb      	adds	r3, r7, r3
   2387c:	881a      	ldrh	r2, [r3, #0]
   2387e:	687b      	ldr	r3, [r7, #4]
   23880:	429a      	cmp	r2, r3
   23882:	d313      	bcc.n	238ac <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23884:	68ba      	ldr	r2, [r7, #8]
   23886:	697b      	ldr	r3, [r7, #20]
   23888:	18d1      	adds	r1, r2, r3
   2388a:	687b      	ldr	r3, [r7, #4]
   2388c:	b29a      	uxth	r2, r3
   2388e:	68fb      	ldr	r3, [r7, #12]
   23890:	0018      	movs	r0, r3
   23892:	4b22      	ldr	r3, [pc, #136]	; (2391c <nm_read_block+0xc8>)
   23894:	4798      	blx	r3
   23896:	0003      	movs	r3, r0
   23898:	b2da      	uxtb	r2, r3
   2389a:	2313      	movs	r3, #19
   2389c:	18fb      	adds	r3, r7, r3
   2389e:	781b      	ldrb	r3, [r3, #0]
   238a0:	18d3      	adds	r3, r2, r3
   238a2:	b2da      	uxtb	r2, r3
   238a4:	2313      	movs	r3, #19
   238a6:	18fb      	adds	r3, r7, r3
   238a8:	701a      	strb	r2, [r3, #0]
			break;
   238aa:	e02d      	b.n	23908 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   238ac:	68ba      	ldr	r2, [r7, #8]
   238ae:	697b      	ldr	r3, [r7, #20]
   238b0:	18d1      	adds	r1, r2, r3
   238b2:	2310      	movs	r3, #16
   238b4:	18fb      	adds	r3, r7, r3
   238b6:	881a      	ldrh	r2, [r3, #0]
   238b8:	68fb      	ldr	r3, [r7, #12]
   238ba:	0018      	movs	r0, r3
   238bc:	4b17      	ldr	r3, [pc, #92]	; (2391c <nm_read_block+0xc8>)
   238be:	4798      	blx	r3
   238c0:	0003      	movs	r3, r0
   238c2:	b2da      	uxtb	r2, r3
   238c4:	2313      	movs	r3, #19
   238c6:	18fb      	adds	r3, r7, r3
   238c8:	781b      	ldrb	r3, [r3, #0]
   238ca:	18d3      	adds	r3, r2, r3
   238cc:	b2da      	uxtb	r2, r3
   238ce:	2313      	movs	r3, #19
   238d0:	18fb      	adds	r3, r7, r3
   238d2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   238d4:	2313      	movs	r3, #19
   238d6:	18fb      	adds	r3, r7, r3
   238d8:	781b      	ldrb	r3, [r3, #0]
   238da:	b25b      	sxtb	r3, r3
   238dc:	2b00      	cmp	r3, #0
   238de:	d112      	bne.n	23906 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   238e0:	2310      	movs	r3, #16
   238e2:	18fb      	adds	r3, r7, r3
   238e4:	881b      	ldrh	r3, [r3, #0]
   238e6:	687a      	ldr	r2, [r7, #4]
   238e8:	1ad3      	subs	r3, r2, r3
   238ea:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   238ec:	2310      	movs	r3, #16
   238ee:	18fb      	adds	r3, r7, r3
   238f0:	881b      	ldrh	r3, [r3, #0]
   238f2:	697a      	ldr	r2, [r7, #20]
   238f4:	18d3      	adds	r3, r2, r3
   238f6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   238f8:	2310      	movs	r3, #16
   238fa:	18fb      	adds	r3, r7, r3
   238fc:	881b      	ldrh	r3, [r3, #0]
   238fe:	68fa      	ldr	r2, [r7, #12]
   23900:	18d3      	adds	r3, r2, r3
   23902:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23904:	e7b8      	b.n	23878 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23906:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23908:	2313      	movs	r3, #19
   2390a:	18fb      	adds	r3, r7, r3
   2390c:	781b      	ldrb	r3, [r3, #0]
   2390e:	b25b      	sxtb	r3, r3
}
   23910:	0018      	movs	r0, r3
   23912:	46bd      	mov	sp, r7
   23914:	b006      	add	sp, #24
   23916:	bd80      	pop	{r7, pc}
   23918:	20000118 	.word	0x20000118
   2391c:	00023829 	.word	0x00023829

00023920 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23920:	b580      	push	{r7, lr}
   23922:	b084      	sub	sp, #16
   23924:	af00      	add	r7, sp, #0
   23926:	60f8      	str	r0, [r7, #12]
   23928:	60b9      	str	r1, [r7, #8]
   2392a:	1dbb      	adds	r3, r7, #6
   2392c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   2392e:	1dbb      	adds	r3, r7, #6
   23930:	881a      	ldrh	r2, [r3, #0]
   23932:	68b9      	ldr	r1, [r7, #8]
   23934:	68fb      	ldr	r3, [r7, #12]
   23936:	0018      	movs	r0, r3
   23938:	4b03      	ldr	r3, [pc, #12]	; (23948 <p_nm_write_block+0x28>)
   2393a:	4798      	blx	r3
   2393c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   2393e:	0018      	movs	r0, r3
   23940:	46bd      	mov	sp, r7
   23942:	b004      	add	sp, #16
   23944:	bd80      	pop	{r7, pc}
   23946:	46c0      	nop			; (mov r8, r8)
   23948:	0002587d 	.word	0x0002587d

0002394c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   2394c:	b580      	push	{r7, lr}
   2394e:	b086      	sub	sp, #24
   23950:	af00      	add	r7, sp, #0
   23952:	60f8      	str	r0, [r7, #12]
   23954:	60b9      	str	r1, [r7, #8]
   23956:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23958:	4b2d      	ldr	r3, [pc, #180]	; (23a10 <nm_write_block+0xc4>)
   2395a:	881a      	ldrh	r2, [r3, #0]
   2395c:	2310      	movs	r3, #16
   2395e:	18fb      	adds	r3, r7, r3
   23960:	3a08      	subs	r2, #8
   23962:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23964:	2300      	movs	r3, #0
   23966:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23968:	2313      	movs	r3, #19
   2396a:	18fb      	adds	r3, r7, r3
   2396c:	2200      	movs	r2, #0
   2396e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23970:	2310      	movs	r3, #16
   23972:	18fb      	adds	r3, r7, r3
   23974:	881a      	ldrh	r2, [r3, #0]
   23976:	687b      	ldr	r3, [r7, #4]
   23978:	429a      	cmp	r2, r3
   2397a:	d313      	bcc.n	239a4 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   2397c:	68ba      	ldr	r2, [r7, #8]
   2397e:	697b      	ldr	r3, [r7, #20]
   23980:	18d1      	adds	r1, r2, r3
   23982:	687b      	ldr	r3, [r7, #4]
   23984:	b29a      	uxth	r2, r3
   23986:	68fb      	ldr	r3, [r7, #12]
   23988:	0018      	movs	r0, r3
   2398a:	4b22      	ldr	r3, [pc, #136]	; (23a14 <nm_write_block+0xc8>)
   2398c:	4798      	blx	r3
   2398e:	0003      	movs	r3, r0
   23990:	b2da      	uxtb	r2, r3
   23992:	2313      	movs	r3, #19
   23994:	18fb      	adds	r3, r7, r3
   23996:	781b      	ldrb	r3, [r3, #0]
   23998:	18d3      	adds	r3, r2, r3
   2399a:	b2da      	uxtb	r2, r3
   2399c:	2313      	movs	r3, #19
   2399e:	18fb      	adds	r3, r7, r3
   239a0:	701a      	strb	r2, [r3, #0]
			break;
   239a2:	e02d      	b.n	23a00 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   239a4:	68ba      	ldr	r2, [r7, #8]
   239a6:	697b      	ldr	r3, [r7, #20]
   239a8:	18d1      	adds	r1, r2, r3
   239aa:	2310      	movs	r3, #16
   239ac:	18fb      	adds	r3, r7, r3
   239ae:	881a      	ldrh	r2, [r3, #0]
   239b0:	68fb      	ldr	r3, [r7, #12]
   239b2:	0018      	movs	r0, r3
   239b4:	4b17      	ldr	r3, [pc, #92]	; (23a14 <nm_write_block+0xc8>)
   239b6:	4798      	blx	r3
   239b8:	0003      	movs	r3, r0
   239ba:	b2da      	uxtb	r2, r3
   239bc:	2313      	movs	r3, #19
   239be:	18fb      	adds	r3, r7, r3
   239c0:	781b      	ldrb	r3, [r3, #0]
   239c2:	18d3      	adds	r3, r2, r3
   239c4:	b2da      	uxtb	r2, r3
   239c6:	2313      	movs	r3, #19
   239c8:	18fb      	adds	r3, r7, r3
   239ca:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   239cc:	2313      	movs	r3, #19
   239ce:	18fb      	adds	r3, r7, r3
   239d0:	781b      	ldrb	r3, [r3, #0]
   239d2:	b25b      	sxtb	r3, r3
   239d4:	2b00      	cmp	r3, #0
   239d6:	d112      	bne.n	239fe <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   239d8:	2310      	movs	r3, #16
   239da:	18fb      	adds	r3, r7, r3
   239dc:	881b      	ldrh	r3, [r3, #0]
   239de:	687a      	ldr	r2, [r7, #4]
   239e0:	1ad3      	subs	r3, r2, r3
   239e2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   239e4:	2310      	movs	r3, #16
   239e6:	18fb      	adds	r3, r7, r3
   239e8:	881b      	ldrh	r3, [r3, #0]
   239ea:	697a      	ldr	r2, [r7, #20]
   239ec:	18d3      	adds	r3, r2, r3
   239ee:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   239f0:	2310      	movs	r3, #16
   239f2:	18fb      	adds	r3, r7, r3
   239f4:	881b      	ldrh	r3, [r3, #0]
   239f6:	68fa      	ldr	r2, [r7, #12]
   239f8:	18d3      	adds	r3, r2, r3
   239fa:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   239fc:	e7b8      	b.n	23970 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   239fe:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23a00:	2313      	movs	r3, #19
   23a02:	18fb      	adds	r3, r7, r3
   23a04:	781b      	ldrb	r3, [r3, #0]
   23a06:	b25b      	sxtb	r3, r3
}
   23a08:	0018      	movs	r0, r3
   23a0a:	46bd      	mov	sp, r7
   23a0c:	b006      	add	sp, #24
   23a0e:	bd80      	pop	{r7, pc}
   23a10:	20000118 	.word	0x20000118
   23a14:	00023921 	.word	0x00023921

00023a18 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   23a18:	b590      	push	{r4, r7, lr}
   23a1a:	b089      	sub	sp, #36	; 0x24
   23a1c:	af00      	add	r7, sp, #0
   23a1e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   23a20:	2300      	movs	r3, #0
   23a22:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   23a24:	231f      	movs	r3, #31
   23a26:	18fb      	adds	r3, r7, r3
   23a28:	2200      	movs	r2, #0
   23a2a:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   23a2c:	230c      	movs	r3, #12
   23a2e:	18fb      	adds	r3, r7, r3
   23a30:	0018      	movs	r0, r3
   23a32:	2308      	movs	r3, #8
   23a34:	001a      	movs	r2, r3
   23a36:	2100      	movs	r1, #0
   23a38:	4b64      	ldr	r3, [pc, #400]	; (23bcc <nm_get_firmware_full_info+0x1b4>)
   23a3a:	4798      	blx	r3
	if (pstrRev != NULL)
   23a3c:	687b      	ldr	r3, [r7, #4]
   23a3e:	2b00      	cmp	r3, #0
   23a40:	d100      	bne.n	23a44 <nm_get_firmware_full_info+0x2c>
   23a42:	e0ba      	b.n	23bba <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   23a44:	687b      	ldr	r3, [r7, #4]
   23a46:	2228      	movs	r2, #40	; 0x28
   23a48:	2100      	movs	r1, #0
   23a4a:	0018      	movs	r0, r3
   23a4c:	4b60      	ldr	r3, [pc, #384]	; (23bd0 <nm_get_firmware_full_info+0x1b8>)
   23a4e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   23a50:	231f      	movs	r3, #31
   23a52:	18fc      	adds	r4, r7, r3
   23a54:	2314      	movs	r3, #20
   23a56:	18fb      	adds	r3, r7, r3
   23a58:	4a5e      	ldr	r2, [pc, #376]	; (23bd4 <nm_get_firmware_full_info+0x1bc>)
   23a5a:	0019      	movs	r1, r3
   23a5c:	0010      	movs	r0, r2
   23a5e:	4b5e      	ldr	r3, [pc, #376]	; (23bd8 <nm_get_firmware_full_info+0x1c0>)
   23a60:	4798      	blx	r3
   23a62:	0003      	movs	r3, r0
   23a64:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   23a66:	231f      	movs	r3, #31
   23a68:	18fb      	adds	r3, r7, r3
   23a6a:	781b      	ldrb	r3, [r3, #0]
   23a6c:	b25b      	sxtb	r3, r3
   23a6e:	2b00      	cmp	r3, #0
   23a70:	d000      	beq.n	23a74 <nm_get_firmware_full_info+0x5c>
   23a72:	e0a2      	b.n	23bba <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   23a74:	697b      	ldr	r3, [r7, #20]
   23a76:	2b00      	cmp	r3, #0
   23a78:	d100      	bne.n	23a7c <nm_get_firmware_full_info+0x64>
   23a7a:	e09a      	b.n	23bb2 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   23a7c:	697b      	ldr	r3, [r7, #20]
   23a7e:	22c0      	movs	r2, #192	; 0xc0
   23a80:	0292      	lsls	r2, r2, #10
   23a82:	4313      	orrs	r3, r2
   23a84:	221f      	movs	r2, #31
   23a86:	18bc      	adds	r4, r7, r2
   23a88:	220c      	movs	r2, #12
   23a8a:	18b9      	adds	r1, r7, r2
   23a8c:	2208      	movs	r2, #8
   23a8e:	0018      	movs	r0, r3
   23a90:	4b52      	ldr	r3, [pc, #328]	; (23bdc <nm_get_firmware_full_info+0x1c4>)
   23a92:	4798      	blx	r3
   23a94:	0003      	movs	r3, r0
   23a96:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   23a98:	231f      	movs	r3, #31
   23a9a:	18fb      	adds	r3, r7, r3
   23a9c:	781b      	ldrb	r3, [r3, #0]
   23a9e:	b25b      	sxtb	r3, r3
   23aa0:	2b00      	cmp	r3, #0
   23aa2:	d000      	beq.n	23aa6 <nm_get_firmware_full_info+0x8e>
   23aa4:	e089      	b.n	23bba <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   23aa6:	230c      	movs	r3, #12
   23aa8:	18fb      	adds	r3, r7, r3
   23aaa:	685b      	ldr	r3, [r3, #4]
   23aac:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   23aae:	697b      	ldr	r3, [r7, #20]
   23ab0:	041b      	lsls	r3, r3, #16
   23ab2:	0c1b      	lsrs	r3, r3, #16
   23ab4:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   23ab6:	697b      	ldr	r3, [r7, #20]
   23ab8:	2b00      	cmp	r3, #0
   23aba:	d100      	bne.n	23abe <nm_get_firmware_full_info+0xa6>
   23abc:	e074      	b.n	23ba8 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   23abe:	697b      	ldr	r3, [r7, #20]
   23ac0:	22c0      	movs	r2, #192	; 0xc0
   23ac2:	0292      	lsls	r2, r2, #10
   23ac4:	4313      	orrs	r3, r2
   23ac6:	221f      	movs	r2, #31
   23ac8:	18bc      	adds	r4, r7, r2
   23aca:	6879      	ldr	r1, [r7, #4]
   23acc:	2228      	movs	r2, #40	; 0x28
   23ace:	0018      	movs	r0, r3
   23ad0:	4b42      	ldr	r3, [pc, #264]	; (23bdc <nm_get_firmware_full_info+0x1c4>)
   23ad2:	4798      	blx	r3
   23ad4:	0003      	movs	r3, r0
   23ad6:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   23ad8:	231f      	movs	r3, #31
   23ada:	18fb      	adds	r3, r7, r3
   23adc:	781b      	ldrb	r3, [r3, #0]
   23ade:	b25b      	sxtb	r3, r3
   23ae0:	2b00      	cmp	r3, #0
   23ae2:	d16a      	bne.n	23bba <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23ae4:	687b      	ldr	r3, [r7, #4]
   23ae6:	791b      	ldrb	r3, [r3, #4]
   23ae8:	021b      	lsls	r3, r3, #8
   23aea:	b21a      	sxth	r2, r3
   23aec:	687b      	ldr	r3, [r7, #4]
   23aee:	795b      	ldrb	r3, [r3, #5]
   23af0:	011b      	lsls	r3, r3, #4
   23af2:	b21b      	sxth	r3, r3
   23af4:	21ff      	movs	r1, #255	; 0xff
   23af6:	400b      	ands	r3, r1
   23af8:	b21b      	sxth	r3, r3
   23afa:	4313      	orrs	r3, r2
   23afc:	b21a      	sxth	r2, r3
   23afe:	687b      	ldr	r3, [r7, #4]
   23b00:	799b      	ldrb	r3, [r3, #6]
   23b02:	b21b      	sxth	r3, r3
   23b04:	210f      	movs	r1, #15
   23b06:	400b      	ands	r3, r1
   23b08:	b21b      	sxth	r3, r3
   23b0a:	4313      	orrs	r3, r2
   23b0c:	b21a      	sxth	r2, r3
   23b0e:	231c      	movs	r3, #28
   23b10:	18fb      	adds	r3, r7, r3
   23b12:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23b14:	231a      	movs	r3, #26
   23b16:	18fb      	adds	r3, r7, r3
   23b18:	4a31      	ldr	r2, [pc, #196]	; (23be0 <nm_get_firmware_full_info+0x1c8>)
   23b1a:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   23b1c:	687b      	ldr	r3, [r7, #4]
   23b1e:	79db      	ldrb	r3, [r3, #7]
   23b20:	021b      	lsls	r3, r3, #8
   23b22:	b21a      	sxth	r2, r3
   23b24:	687b      	ldr	r3, [r7, #4]
   23b26:	7a1b      	ldrb	r3, [r3, #8]
   23b28:	011b      	lsls	r3, r3, #4
   23b2a:	b21b      	sxth	r3, r3
   23b2c:	21ff      	movs	r1, #255	; 0xff
   23b2e:	400b      	ands	r3, r1
   23b30:	b21b      	sxth	r3, r3
   23b32:	4313      	orrs	r3, r2
   23b34:	b21a      	sxth	r2, r3
   23b36:	687b      	ldr	r3, [r7, #4]
   23b38:	7a5b      	ldrb	r3, [r3, #9]
   23b3a:	b21b      	sxth	r3, r3
   23b3c:	210f      	movs	r1, #15
   23b3e:	400b      	ands	r3, r1
   23b40:	b21b      	sxth	r3, r3
   23b42:	4313      	orrs	r3, r2
   23b44:	b21a      	sxth	r2, r3
   23b46:	2318      	movs	r3, #24
   23b48:	18fb      	adds	r3, r7, r3
   23b4a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   23b4c:	231c      	movs	r3, #28
   23b4e:	18fb      	adds	r3, r7, r3
   23b50:	881b      	ldrh	r3, [r3, #0]
   23b52:	2b00      	cmp	r3, #0
   23b54:	d009      	beq.n	23b6a <nm_get_firmware_full_info+0x152>
   23b56:	2318      	movs	r3, #24
   23b58:	18fb      	adds	r3, r7, r3
   23b5a:	881b      	ldrh	r3, [r3, #0]
   23b5c:	2b00      	cmp	r3, #0
   23b5e:	d004      	beq.n	23b6a <nm_get_firmware_full_info+0x152>
   23b60:	2318      	movs	r3, #24
   23b62:	18fb      	adds	r3, r7, r3
   23b64:	881b      	ldrh	r3, [r3, #0]
   23b66:	2b00      	cmp	r3, #0
   23b68:	d104      	bne.n	23b74 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   23b6a:	231f      	movs	r3, #31
   23b6c:	18fb      	adds	r3, r7, r3
   23b6e:	22f4      	movs	r2, #244	; 0xf4
   23b70:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23b72:	e022      	b.n	23bba <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   23b74:	231a      	movs	r3, #26
   23b76:	18fa      	adds	r2, r7, r3
   23b78:	2318      	movs	r3, #24
   23b7a:	18fb      	adds	r3, r7, r3
   23b7c:	8812      	ldrh	r2, [r2, #0]
   23b7e:	881b      	ldrh	r3, [r3, #0]
   23b80:	429a      	cmp	r2, r3
   23b82:	d204      	bcs.n	23b8e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   23b84:	231f      	movs	r3, #31
   23b86:	18fb      	adds	r3, r7, r3
   23b88:	22f3      	movs	r2, #243	; 0xf3
   23b8a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23b8c:	e015      	b.n	23bba <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   23b8e:	231a      	movs	r3, #26
   23b90:	18fa      	adds	r2, r7, r3
   23b92:	231c      	movs	r3, #28
   23b94:	18fb      	adds	r3, r7, r3
   23b96:	8812      	ldrh	r2, [r2, #0]
   23b98:	881b      	ldrh	r3, [r3, #0]
   23b9a:	429a      	cmp	r2, r3
   23b9c:	d90d      	bls.n	23bba <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   23b9e:	231f      	movs	r3, #31
   23ba0:	18fb      	adds	r3, r7, r3
   23ba2:	22f3      	movs	r2, #243	; 0xf3
   23ba4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23ba6:	e008      	b.n	23bba <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   23ba8:	231f      	movs	r3, #31
   23baa:	18fb      	adds	r3, r7, r3
   23bac:	22f4      	movs	r2, #244	; 0xf4
   23bae:	701a      	strb	r2, [r3, #0]
   23bb0:	e003      	b.n	23bba <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   23bb2:	231f      	movs	r3, #31
   23bb4:	18fb      	adds	r3, r7, r3
   23bb6:	22f4      	movs	r2, #244	; 0xf4
   23bb8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   23bba:	231f      	movs	r3, #31
   23bbc:	18fb      	adds	r3, r7, r3
   23bbe:	781b      	ldrb	r3, [r3, #0]
   23bc0:	b25b      	sxtb	r3, r3
}
   23bc2:	0018      	movs	r0, r3
   23bc4:	46bd      	mov	sp, r7
   23bc6:	b009      	add	sp, #36	; 0x24
   23bc8:	bd90      	pop	{r4, r7, pc}
   23bca:	46c0      	nop			; (mov r8, r8)
   23bcc:	00035543 	.word	0x00035543
   23bd0:	00021751 	.word	0x00021751
   23bd4:	000c0008 	.word	0x000c0008
   23bd8:	000237e1 	.word	0x000237e1
   23bdc:	00023855 	.word	0x00023855
   23be0:	00001354 	.word	0x00001354

00023be4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23be4:	b590      	push	{r4, r7, lr}
   23be6:	b085      	sub	sp, #20
   23be8:	af00      	add	r7, sp, #0
   23bea:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23bec:	230f      	movs	r3, #15
   23bee:	18fb      	adds	r3, r7, r3
   23bf0:	2200      	movs	r2, #0
   23bf2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23bf4:	687b      	ldr	r3, [r7, #4]
   23bf6:	2b00      	cmp	r3, #0
   23bf8:	d013      	beq.n	23c22 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   23bfa:	230e      	movs	r3, #14
   23bfc:	18fb      	adds	r3, r7, r3
   23bfe:	687a      	ldr	r2, [r7, #4]
   23c00:	7812      	ldrb	r2, [r2, #0]
   23c02:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   23c04:	230e      	movs	r3, #14
   23c06:	18fb      	adds	r3, r7, r3
   23c08:	781b      	ldrb	r3, [r3, #0]
   23c0a:	2b00      	cmp	r3, #0
   23c0c:	d004      	beq.n	23c18 <nm_drv_init+0x34>
   23c0e:	230e      	movs	r3, #14
   23c10:	18fb      	adds	r3, r7, r3
   23c12:	781b      	ldrb	r3, [r3, #0]
   23c14:	2b04      	cmp	r3, #4
   23c16:	d908      	bls.n	23c2a <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   23c18:	230e      	movs	r3, #14
   23c1a:	18fb      	adds	r3, r7, r3
   23c1c:	2201      	movs	r2, #1
   23c1e:	701a      	strb	r2, [r3, #0]
   23c20:	e003      	b.n	23c2a <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   23c22:	230e      	movs	r3, #14
   23c24:	18fb      	adds	r3, r7, r3
   23c26:	2201      	movs	r2, #1
   23c28:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   23c2a:	230f      	movs	r3, #15
   23c2c:	18fc      	adds	r4, r7, r3
   23c2e:	2000      	movs	r0, #0
   23c30:	4b41      	ldr	r3, [pc, #260]	; (23d38 <nm_drv_init+0x154>)
   23c32:	4798      	blx	r3
   23c34:	0003      	movs	r3, r0
   23c36:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23c38:	230f      	movs	r3, #15
   23c3a:	18fb      	adds	r3, r7, r3
   23c3c:	781b      	ldrb	r3, [r3, #0]
   23c3e:	b25b      	sxtb	r3, r3
   23c40:	2b00      	cmp	r3, #0
   23c42:	d00f      	beq.n	23c64 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   23c44:	2390      	movs	r3, #144	; 0x90
   23c46:	005a      	lsls	r2, r3, #1
   23c48:	493c      	ldr	r1, [pc, #240]	; (23d3c <nm_drv_init+0x158>)
   23c4a:	4b3d      	ldr	r3, [pc, #244]	; (23d40 <nm_drv_init+0x15c>)
   23c4c:	0018      	movs	r0, r3
   23c4e:	4b3d      	ldr	r3, [pc, #244]	; (23d44 <nm_drv_init+0x160>)
   23c50:	4798      	blx	r3
   23c52:	4b3d      	ldr	r3, [pc, #244]	; (23d48 <nm_drv_init+0x164>)
   23c54:	0018      	movs	r0, r3
   23c56:	4b3b      	ldr	r3, [pc, #236]	; (23d44 <nm_drv_init+0x160>)
   23c58:	4798      	blx	r3
   23c5a:	4b3c      	ldr	r3, [pc, #240]	; (23d4c <nm_drv_init+0x168>)
   23c5c:	0018      	movs	r0, r3
   23c5e:	4b39      	ldr	r3, [pc, #228]	; (23d44 <nm_drv_init+0x160>)
   23c60:	4798      	blx	r3
		goto ERR1;
   23c62:	e061      	b.n	23d28 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   23c64:	4b3a      	ldr	r3, [pc, #232]	; (23d50 <nm_drv_init+0x16c>)
   23c66:	0018      	movs	r0, r3
   23c68:	4b36      	ldr	r3, [pc, #216]	; (23d44 <nm_drv_init+0x160>)
   23c6a:	4798      	blx	r3
   23c6c:	4b39      	ldr	r3, [pc, #228]	; (23d54 <nm_drv_init+0x170>)
   23c6e:	4798      	blx	r3
   23c70:	0002      	movs	r2, r0
   23c72:	4b39      	ldr	r3, [pc, #228]	; (23d58 <nm_drv_init+0x174>)
   23c74:	0011      	movs	r1, r2
   23c76:	0018      	movs	r0, r3
   23c78:	4b32      	ldr	r3, [pc, #200]	; (23d44 <nm_drv_init+0x160>)
   23c7a:	4798      	blx	r3
   23c7c:	4b33      	ldr	r3, [pc, #204]	; (23d4c <nm_drv_init+0x168>)
   23c7e:	0018      	movs	r0, r3
   23c80:	4b30      	ldr	r3, [pc, #192]	; (23d44 <nm_drv_init+0x160>)
   23c82:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   23c84:	4b35      	ldr	r3, [pc, #212]	; (23d5c <nm_drv_init+0x178>)
   23c86:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   23c88:	230f      	movs	r3, #15
   23c8a:	18fc      	adds	r4, r7, r3
   23c8c:	230e      	movs	r3, #14
   23c8e:	18fb      	adds	r3, r7, r3
   23c90:	781b      	ldrb	r3, [r3, #0]
   23c92:	0018      	movs	r0, r3
   23c94:	4b32      	ldr	r3, [pc, #200]	; (23d60 <nm_drv_init+0x17c>)
   23c96:	4798      	blx	r3
   23c98:	0003      	movs	r3, r0
   23c9a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23c9c:	230f      	movs	r3, #15
   23c9e:	18fb      	adds	r3, r7, r3
   23ca0:	781b      	ldrb	r3, [r3, #0]
   23ca2:	b25b      	sxtb	r3, r3
   23ca4:	2b00      	cmp	r3, #0
   23ca6:	d13a      	bne.n	23d1e <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   23ca8:	230f      	movs	r3, #15
   23caa:	18fc      	adds	r4, r7, r3
   23cac:	230e      	movs	r3, #14
   23cae:	18fb      	adds	r3, r7, r3
   23cb0:	781b      	ldrb	r3, [r3, #0]
   23cb2:	0018      	movs	r0, r3
   23cb4:	4b2b      	ldr	r3, [pc, #172]	; (23d64 <nm_drv_init+0x180>)
   23cb6:	4798      	blx	r3
   23cb8:	0003      	movs	r3, r0
   23cba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23cbc:	230f      	movs	r3, #15
   23cbe:	18fb      	adds	r3, r7, r3
   23cc0:	781b      	ldrb	r3, [r3, #0]
   23cc2:	b25b      	sxtb	r3, r3
   23cc4:	2b00      	cmp	r3, #0
   23cc6:	d12c      	bne.n	23d22 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   23cc8:	230e      	movs	r3, #14
   23cca:	18fb      	adds	r3, r7, r3
   23ccc:	781b      	ldrb	r3, [r3, #0]
   23cce:	2b02      	cmp	r3, #2
   23cd0:	d02a      	beq.n	23d28 <nm_drv_init+0x144>
   23cd2:	230e      	movs	r3, #14
   23cd4:	18fb      	adds	r3, r7, r3
   23cd6:	781b      	ldrb	r3, [r3, #0]
   23cd8:	2b03      	cmp	r3, #3
   23cda:	d025      	beq.n	23d28 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   23cdc:	230f      	movs	r3, #15
   23cde:	18fc      	adds	r4, r7, r3
   23ce0:	4b21      	ldr	r3, [pc, #132]	; (23d68 <nm_drv_init+0x184>)
   23ce2:	4798      	blx	r3
   23ce4:	0003      	movs	r3, r0
   23ce6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23ce8:	230f      	movs	r3, #15
   23cea:	18fb      	adds	r3, r7, r3
   23cec:	781b      	ldrb	r3, [r3, #0]
   23cee:	b25b      	sxtb	r3, r3
   23cf0:	2b00      	cmp	r3, #0
   23cf2:	d00f      	beq.n	23d14 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23cf4:	23a7      	movs	r3, #167	; 0xa7
   23cf6:	005a      	lsls	r2, r3, #1
   23cf8:	4910      	ldr	r1, [pc, #64]	; (23d3c <nm_drv_init+0x158>)
   23cfa:	4b11      	ldr	r3, [pc, #68]	; (23d40 <nm_drv_init+0x15c>)
   23cfc:	0018      	movs	r0, r3
   23cfe:	4b11      	ldr	r3, [pc, #68]	; (23d44 <nm_drv_init+0x160>)
   23d00:	4798      	blx	r3
   23d02:	4b1a      	ldr	r3, [pc, #104]	; (23d6c <nm_drv_init+0x188>)
   23d04:	0018      	movs	r0, r3
   23d06:	4b0f      	ldr	r3, [pc, #60]	; (23d44 <nm_drv_init+0x160>)
   23d08:	4798      	blx	r3
   23d0a:	4b10      	ldr	r3, [pc, #64]	; (23d4c <nm_drv_init+0x168>)
   23d0c:	0018      	movs	r0, r3
   23d0e:	4b0d      	ldr	r3, [pc, #52]	; (23d44 <nm_drv_init+0x160>)
   23d10:	4798      	blx	r3
		goto ERR2;
   23d12:	e007      	b.n	23d24 <nm_drv_init+0x140>
	}
	return ret;
   23d14:	230f      	movs	r3, #15
   23d16:	18fb      	adds	r3, r7, r3
   23d18:	781b      	ldrb	r3, [r3, #0]
   23d1a:	b25b      	sxtb	r3, r3
   23d1c:	e008      	b.n	23d30 <nm_drv_init+0x14c>
		goto ERR2;
   23d1e:	46c0      	nop			; (mov r8, r8)
   23d20:	e000      	b.n	23d24 <nm_drv_init+0x140>
		goto ERR2;
   23d22:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   23d24:	4b12      	ldr	r3, [pc, #72]	; (23d70 <nm_drv_init+0x18c>)
   23d26:	4798      	blx	r3
ERR1:
	return ret;
   23d28:	230f      	movs	r3, #15
   23d2a:	18fb      	adds	r3, r7, r3
   23d2c:	781b      	ldrb	r3, [r3, #0]
   23d2e:	b25b      	sxtb	r3, r3
}
   23d30:	0018      	movs	r0, r3
   23d32:	46bd      	mov	sp, r7
   23d34:	b005      	add	sp, #20
   23d36:	bd90      	pop	{r4, r7, pc}
   23d38:	00023745 	.word	0x00023745
   23d3c:	000397a4 	.word	0x000397a4
   23d40:	000396d4 	.word	0x000396d4
   23d44:	0001ea1d 	.word	0x0001ea1d
   23d48:	000396e8 	.word	0x000396e8
   23d4c:	00039704 	.word	0x00039704
   23d50:	00039708 	.word	0x00039708
   23d54:	000230e1 	.word	0x000230e1
   23d58:	00039714 	.word	0x00039714
   23d5c:	000255fd 	.word	0x000255fd
   23d60:	00023439 	.word	0x00023439
   23d64:	000235d1 	.word	0x000235d1
   23d68:	0002302d 	.word	0x0002302d
   23d6c:	00039724 	.word	0x00039724
   23d70:	00023779 	.word	0x00023779

00023d74 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   23d74:	b590      	push	{r4, r7, lr}
   23d76:	b085      	sub	sp, #20
   23d78:	af00      	add	r7, sp, #0
   23d7a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   23d7c:	230f      	movs	r3, #15
   23d7e:	18fc      	adds	r4, r7, r3
   23d80:	4b2e      	ldr	r3, [pc, #184]	; (23e3c <nm_drv_deinit+0xc8>)
   23d82:	4798      	blx	r3
   23d84:	0003      	movs	r3, r0
   23d86:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23d88:	230f      	movs	r3, #15
   23d8a:	18fb      	adds	r3, r7, r3
   23d8c:	781b      	ldrb	r3, [r3, #0]
   23d8e:	b25b      	sxtb	r3, r3
   23d90:	2b00      	cmp	r3, #0
   23d92:	d010      	beq.n	23db6 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   23d94:	2366      	movs	r3, #102	; 0x66
   23d96:	33ff      	adds	r3, #255	; 0xff
   23d98:	001a      	movs	r2, r3
   23d9a:	4929      	ldr	r1, [pc, #164]	; (23e40 <nm_drv_deinit+0xcc>)
   23d9c:	4b29      	ldr	r3, [pc, #164]	; (23e44 <nm_drv_deinit+0xd0>)
   23d9e:	0018      	movs	r0, r3
   23da0:	4b29      	ldr	r3, [pc, #164]	; (23e48 <nm_drv_deinit+0xd4>)
   23da2:	4798      	blx	r3
   23da4:	4b29      	ldr	r3, [pc, #164]	; (23e4c <nm_drv_deinit+0xd8>)
   23da6:	0018      	movs	r0, r3
   23da8:	4b27      	ldr	r3, [pc, #156]	; (23e48 <nm_drv_deinit+0xd4>)
   23daa:	4798      	blx	r3
   23dac:	4b28      	ldr	r3, [pc, #160]	; (23e50 <nm_drv_deinit+0xdc>)
   23dae:	0018      	movs	r0, r3
   23db0:	4b25      	ldr	r3, [pc, #148]	; (23e48 <nm_drv_deinit+0xd4>)
   23db2:	4798      	blx	r3
		goto ERR1;
   23db4:	e03a      	b.n	23e2c <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   23db6:	230f      	movs	r3, #15
   23db8:	18fc      	adds	r4, r7, r3
   23dba:	2000      	movs	r0, #0
   23dbc:	4b25      	ldr	r3, [pc, #148]	; (23e54 <nm_drv_deinit+0xe0>)
   23dbe:	4798      	blx	r3
   23dc0:	0003      	movs	r3, r0
   23dc2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23dc4:	230f      	movs	r3, #15
   23dc6:	18fb      	adds	r3, r7, r3
   23dc8:	781b      	ldrb	r3, [r3, #0]
   23dca:	b25b      	sxtb	r3, r3
   23dcc:	2b00      	cmp	r3, #0
   23dce:	d00f      	beq.n	23df0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   23dd0:	23b6      	movs	r3, #182	; 0xb6
   23dd2:	005a      	lsls	r2, r3, #1
   23dd4:	491a      	ldr	r1, [pc, #104]	; (23e40 <nm_drv_deinit+0xcc>)
   23dd6:	4b1b      	ldr	r3, [pc, #108]	; (23e44 <nm_drv_deinit+0xd0>)
   23dd8:	0018      	movs	r0, r3
   23dda:	4b1b      	ldr	r3, [pc, #108]	; (23e48 <nm_drv_deinit+0xd4>)
   23ddc:	4798      	blx	r3
   23dde:	4b1e      	ldr	r3, [pc, #120]	; (23e58 <nm_drv_deinit+0xe4>)
   23de0:	0018      	movs	r0, r3
   23de2:	4b19      	ldr	r3, [pc, #100]	; (23e48 <nm_drv_deinit+0xd4>)
   23de4:	4798      	blx	r3
   23de6:	4b1a      	ldr	r3, [pc, #104]	; (23e50 <nm_drv_deinit+0xdc>)
   23de8:	0018      	movs	r0, r3
   23dea:	4b17      	ldr	r3, [pc, #92]	; (23e48 <nm_drv_deinit+0xd4>)
   23dec:	4798      	blx	r3
		goto ERR1;
   23dee:	e01d      	b.n	23e2c <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   23df0:	230f      	movs	r3, #15
   23df2:	18fc      	adds	r4, r7, r3
   23df4:	4b19      	ldr	r3, [pc, #100]	; (23e5c <nm_drv_deinit+0xe8>)
   23df6:	4798      	blx	r3
   23df8:	0003      	movs	r3, r0
   23dfa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23dfc:	230f      	movs	r3, #15
   23dfe:	18fb      	adds	r3, r7, r3
   23e00:	781b      	ldrb	r3, [r3, #0]
   23e02:	b25b      	sxtb	r3, r3
   23e04:	2b00      	cmp	r3, #0
   23e06:	d00f      	beq.n	23e28 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   23e08:	23b9      	movs	r3, #185	; 0xb9
   23e0a:	005a      	lsls	r2, r3, #1
   23e0c:	490c      	ldr	r1, [pc, #48]	; (23e40 <nm_drv_deinit+0xcc>)
   23e0e:	4b0d      	ldr	r3, [pc, #52]	; (23e44 <nm_drv_deinit+0xd0>)
   23e10:	0018      	movs	r0, r3
   23e12:	4b0d      	ldr	r3, [pc, #52]	; (23e48 <nm_drv_deinit+0xd4>)
   23e14:	4798      	blx	r3
   23e16:	4b12      	ldr	r3, [pc, #72]	; (23e60 <nm_drv_deinit+0xec>)
   23e18:	0018      	movs	r0, r3
   23e1a:	4b0b      	ldr	r3, [pc, #44]	; (23e48 <nm_drv_deinit+0xd4>)
   23e1c:	4798      	blx	r3
   23e1e:	4b0c      	ldr	r3, [pc, #48]	; (23e50 <nm_drv_deinit+0xdc>)
   23e20:	0018      	movs	r0, r3
   23e22:	4b09      	ldr	r3, [pc, #36]	; (23e48 <nm_drv_deinit+0xd4>)
   23e24:	4798      	blx	r3
		goto ERR1;
   23e26:	e001      	b.n	23e2c <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   23e28:	4b0e      	ldr	r3, [pc, #56]	; (23e64 <nm_drv_deinit+0xf0>)
   23e2a:	4798      	blx	r3
#endif

ERR1:
	return ret;
   23e2c:	230f      	movs	r3, #15
   23e2e:	18fb      	adds	r3, r7, r3
   23e30:	781b      	ldrb	r3, [r3, #0]
   23e32:	b25b      	sxtb	r3, r3
}
   23e34:	0018      	movs	r0, r3
   23e36:	46bd      	mov	sp, r7
   23e38:	b005      	add	sp, #20
   23e3a:	bd90      	pop	{r4, r7, pc}
   23e3c:	00023685 	.word	0x00023685
   23e40:	000397b0 	.word	0x000397b0
   23e44:	000396d4 	.word	0x000396d4
   23e48:	0001ea1d 	.word	0x0001ea1d
   23e4c:	00039744 	.word	0x00039744
   23e50:	00039704 	.word	0x00039704
   23e54:	00026aa5 	.word	0x00026aa5
   23e58:	00039764 	.word	0x00039764
   23e5c:	00023779 	.word	0x00023779
   23e60:	00039788 	.word	0x00039788
   23e64:	00025749 	.word	0x00025749

00023e68 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   23e68:	b580      	push	{r7, lr}
   23e6a:	b086      	sub	sp, #24
   23e6c:	af00      	add	r7, sp, #0
   23e6e:	6078      	str	r0, [r7, #4]
   23e70:	000a      	movs	r2, r1
   23e72:	1cbb      	adds	r3, r7, #2
   23e74:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   23e76:	230c      	movs	r3, #12
   23e78:	18fb      	adds	r3, r7, r3
   23e7a:	2200      	movs	r2, #0
   23e7c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   23e7e:	230c      	movs	r3, #12
   23e80:	18fb      	adds	r3, r7, r3
   23e82:	687a      	ldr	r2, [r7, #4]
   23e84:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23e86:	230c      	movs	r3, #12
   23e88:	18fb      	adds	r3, r7, r3
   23e8a:	1cba      	adds	r2, r7, #2
   23e8c:	8812      	ldrh	r2, [r2, #0]
   23e8e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23e90:	230c      	movs	r3, #12
   23e92:	18fb      	adds	r3, r7, r3
   23e94:	0019      	movs	r1, r3
   23e96:	2003      	movs	r0, #3
   23e98:	4b03      	ldr	r3, [pc, #12]	; (23ea8 <nmi_spi_read+0x40>)
   23e9a:	4798      	blx	r3
   23e9c:	0003      	movs	r3, r0
}
   23e9e:	0018      	movs	r0, r3
   23ea0:	46bd      	mov	sp, r7
   23ea2:	b006      	add	sp, #24
   23ea4:	bd80      	pop	{r7, pc}
   23ea6:	46c0      	nop			; (mov r8, r8)
   23ea8:	00021615 	.word	0x00021615

00023eac <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   23eac:	b580      	push	{r7, lr}
   23eae:	b086      	sub	sp, #24
   23eb0:	af00      	add	r7, sp, #0
   23eb2:	6078      	str	r0, [r7, #4]
   23eb4:	000a      	movs	r2, r1
   23eb6:	1cbb      	adds	r3, r7, #2
   23eb8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   23eba:	230c      	movs	r3, #12
   23ebc:	18fb      	adds	r3, r7, r3
   23ebe:	687a      	ldr	r2, [r7, #4]
   23ec0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   23ec2:	230c      	movs	r3, #12
   23ec4:	18fb      	adds	r3, r7, r3
   23ec6:	2200      	movs	r2, #0
   23ec8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23eca:	230c      	movs	r3, #12
   23ecc:	18fb      	adds	r3, r7, r3
   23ece:	1cba      	adds	r2, r7, #2
   23ed0:	8812      	ldrh	r2, [r2, #0]
   23ed2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23ed4:	230c      	movs	r3, #12
   23ed6:	18fb      	adds	r3, r7, r3
   23ed8:	0019      	movs	r1, r3
   23eda:	2003      	movs	r0, #3
   23edc:	4b03      	ldr	r3, [pc, #12]	; (23eec <nmi_spi_write+0x40>)
   23ede:	4798      	blx	r3
   23ee0:	0003      	movs	r3, r0
}
   23ee2:	0018      	movs	r0, r3
   23ee4:	46bd      	mov	sp, r7
   23ee6:	b006      	add	sp, #24
   23ee8:	bd80      	pop	{r7, pc}
   23eea:	46c0      	nop			; (mov r8, r8)
   23eec:	00021615 	.word	0x00021615

00023ef0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   23ef0:	b580      	push	{r7, lr}
   23ef2:	b088      	sub	sp, #32
   23ef4:	af00      	add	r7, sp, #0
   23ef6:	60f8      	str	r0, [r7, #12]
   23ef8:	60b9      	str	r1, [r7, #8]
   23efa:	1dbb      	adds	r3, r7, #6
   23efc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   23efe:	2314      	movs	r3, #20
   23f00:	18fb      	adds	r3, r7, r3
   23f02:	68fa      	ldr	r2, [r7, #12]
   23f04:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   23f06:	2314      	movs	r3, #20
   23f08:	18fb      	adds	r3, r7, r3
   23f0a:	68ba      	ldr	r2, [r7, #8]
   23f0c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23f0e:	2314      	movs	r3, #20
   23f10:	18fb      	adds	r3, r7, r3
   23f12:	1dba      	adds	r2, r7, #6
   23f14:	8812      	ldrh	r2, [r2, #0]
   23f16:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   23f18:	2314      	movs	r3, #20
   23f1a:	18fb      	adds	r3, r7, r3
   23f1c:	0019      	movs	r1, r3
   23f1e:	2003      	movs	r0, #3
   23f20:	4b03      	ldr	r3, [pc, #12]	; (23f30 <nmi_spi_rw+0x40>)
   23f22:	4798      	blx	r3
   23f24:	0003      	movs	r3, r0
}
   23f26:	0018      	movs	r0, r3
   23f28:	46bd      	mov	sp, r7
   23f2a:	b008      	add	sp, #32
   23f2c:	bd80      	pop	{r7, pc}
   23f2e:	46c0      	nop			; (mov r8, r8)
   23f30:	00021615 	.word	0x00021615

00023f34 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   23f34:	b580      	push	{r7, lr}
   23f36:	b082      	sub	sp, #8
   23f38:	af00      	add	r7, sp, #0
   23f3a:	0002      	movs	r2, r0
   23f3c:	1dfb      	adds	r3, r7, #7
   23f3e:	701a      	strb	r2, [r3, #0]
   23f40:	1dbb      	adds	r3, r7, #6
   23f42:	1c0a      	adds	r2, r1, #0
   23f44:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   23f46:	1dfb      	adds	r3, r7, #7
   23f48:	781b      	ldrb	r3, [r3, #0]
   23f4a:	005a      	lsls	r2, r3, #1
   23f4c:	1dbb      	adds	r3, r7, #6
   23f4e:	781b      	ldrb	r3, [r3, #0]
   23f50:	4053      	eors	r3, r2
   23f52:	4a03      	ldr	r2, [pc, #12]	; (23f60 <crc7_byte+0x2c>)
   23f54:	5cd3      	ldrb	r3, [r2, r3]
}
   23f56:	0018      	movs	r0, r3
   23f58:	46bd      	mov	sp, r7
   23f5a:	b002      	add	sp, #8
   23f5c:	bd80      	pop	{r7, pc}
   23f5e:	46c0      	nop			; (mov r8, r8)
   23f60:	000397c0 	.word	0x000397c0

00023f64 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   23f64:	b590      	push	{r4, r7, lr}
   23f66:	b085      	sub	sp, #20
   23f68:	af00      	add	r7, sp, #0
   23f6a:	60b9      	str	r1, [r7, #8]
   23f6c:	607a      	str	r2, [r7, #4]
   23f6e:	230f      	movs	r3, #15
   23f70:	18fb      	adds	r3, r7, r3
   23f72:	1c02      	adds	r2, r0, #0
   23f74:	701a      	strb	r2, [r3, #0]
	while (len--)
   23f76:	e00e      	b.n	23f96 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   23f78:	68bb      	ldr	r3, [r7, #8]
   23f7a:	1c5a      	adds	r2, r3, #1
   23f7c:	60ba      	str	r2, [r7, #8]
   23f7e:	781a      	ldrb	r2, [r3, #0]
   23f80:	230f      	movs	r3, #15
   23f82:	18fc      	adds	r4, r7, r3
   23f84:	230f      	movs	r3, #15
   23f86:	18fb      	adds	r3, r7, r3
   23f88:	781b      	ldrb	r3, [r3, #0]
   23f8a:	0011      	movs	r1, r2
   23f8c:	0018      	movs	r0, r3
   23f8e:	4b08      	ldr	r3, [pc, #32]	; (23fb0 <crc7+0x4c>)
   23f90:	4798      	blx	r3
   23f92:	0003      	movs	r3, r0
   23f94:	7023      	strb	r3, [r4, #0]
	while (len--)
   23f96:	687b      	ldr	r3, [r7, #4]
   23f98:	1e5a      	subs	r2, r3, #1
   23f9a:	607a      	str	r2, [r7, #4]
   23f9c:	2b00      	cmp	r3, #0
   23f9e:	d1eb      	bne.n	23f78 <crc7+0x14>
	return crc;
   23fa0:	230f      	movs	r3, #15
   23fa2:	18fb      	adds	r3, r7, r3
   23fa4:	781b      	ldrb	r3, [r3, #0]
}
   23fa6:	0018      	movs	r0, r3
   23fa8:	46bd      	mov	sp, r7
   23faa:	b005      	add	sp, #20
   23fac:	bd90      	pop	{r4, r7, pc}
   23fae:	46c0      	nop			; (mov r8, r8)
   23fb0:	00023f35 	.word	0x00023f35

00023fb4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   23fb4:	b590      	push	{r4, r7, lr}
   23fb6:	b089      	sub	sp, #36	; 0x24
   23fb8:	af00      	add	r7, sp, #0
   23fba:	60b9      	str	r1, [r7, #8]
   23fbc:	607a      	str	r2, [r7, #4]
   23fbe:	603b      	str	r3, [r7, #0]
   23fc0:	230f      	movs	r3, #15
   23fc2:	18fb      	adds	r3, r7, r3
   23fc4:	1c02      	adds	r2, r0, #0
   23fc6:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   23fc8:	231f      	movs	r3, #31
   23fca:	18fb      	adds	r3, r7, r3
   23fcc:	2205      	movs	r2, #5
   23fce:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23fd0:	231e      	movs	r3, #30
   23fd2:	18fb      	adds	r3, r7, r3
   23fd4:	2201      	movs	r2, #1
   23fd6:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   23fd8:	2314      	movs	r3, #20
   23fda:	18fb      	adds	r3, r7, r3
   23fdc:	220f      	movs	r2, #15
   23fde:	18ba      	adds	r2, r7, r2
   23fe0:	7812      	ldrb	r2, [r2, #0]
   23fe2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23fe4:	230f      	movs	r3, #15
   23fe6:	18fb      	adds	r3, r7, r3
   23fe8:	781b      	ldrb	r3, [r3, #0]
   23fea:	3bc1      	subs	r3, #193	; 0xc1
   23fec:	2b0e      	cmp	r3, #14
   23fee:	d900      	bls.n	23ff2 <spi_cmd+0x3e>
   23ff0:	e11b      	b.n	2422a <spi_cmd+0x276>
   23ff2:	009a      	lsls	r2, r3, #2
   23ff4:	4bb6      	ldr	r3, [pc, #728]	; (242d0 <spi_cmd+0x31c>)
   23ff6:	18d3      	adds	r3, r2, r3
   23ff8:	681b      	ldr	r3, [r3, #0]
   23ffa:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   23ffc:	68bb      	ldr	r3, [r7, #8]
   23ffe:	0c1b      	lsrs	r3, r3, #16
   24000:	b2da      	uxtb	r2, r3
   24002:	2314      	movs	r3, #20
   24004:	18fb      	adds	r3, r7, r3
   24006:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24008:	68bb      	ldr	r3, [r7, #8]
   2400a:	0a1b      	lsrs	r3, r3, #8
   2400c:	b2da      	uxtb	r2, r3
   2400e:	2314      	movs	r3, #20
   24010:	18fb      	adds	r3, r7, r3
   24012:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   24014:	68bb      	ldr	r3, [r7, #8]
   24016:	b2da      	uxtb	r2, r3
   24018:	2314      	movs	r3, #20
   2401a:	18fb      	adds	r3, r7, r3
   2401c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2401e:	231f      	movs	r3, #31
   24020:	18fb      	adds	r3, r7, r3
   24022:	2205      	movs	r2, #5
   24024:	701a      	strb	r2, [r3, #0]
		break;
   24026:	e105      	b.n	24234 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   24028:	68bb      	ldr	r3, [r7, #8]
   2402a:	0a1b      	lsrs	r3, r3, #8
   2402c:	b2da      	uxtb	r2, r3
   2402e:	2314      	movs	r3, #20
   24030:	18fb      	adds	r3, r7, r3
   24032:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   24034:	2330      	movs	r3, #48	; 0x30
   24036:	18fb      	adds	r3, r7, r3
   24038:	781b      	ldrb	r3, [r3, #0]
   2403a:	2b00      	cmp	r3, #0
   2403c:	d009      	beq.n	24052 <spi_cmd+0x9e>
   2403e:	2314      	movs	r3, #20
   24040:	18fb      	adds	r3, r7, r3
   24042:	785b      	ldrb	r3, [r3, #1]
   24044:	2280      	movs	r2, #128	; 0x80
   24046:	4252      	negs	r2, r2
   24048:	4313      	orrs	r3, r2
   2404a:	b2da      	uxtb	r2, r3
   2404c:	2314      	movs	r3, #20
   2404e:	18fb      	adds	r3, r7, r3
   24050:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   24052:	68bb      	ldr	r3, [r7, #8]
   24054:	b2da      	uxtb	r2, r3
   24056:	2314      	movs	r3, #20
   24058:	18fb      	adds	r3, r7, r3
   2405a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2405c:	2314      	movs	r3, #20
   2405e:	18fb      	adds	r3, r7, r3
   24060:	2200      	movs	r2, #0
   24062:	70da      	strb	r2, [r3, #3]
		len = 5;
   24064:	231f      	movs	r3, #31
   24066:	18fb      	adds	r3, r7, r3
   24068:	2205      	movs	r2, #5
   2406a:	701a      	strb	r2, [r3, #0]
		break;
   2406c:	e0e2      	b.n	24234 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2406e:	2314      	movs	r3, #20
   24070:	18fb      	adds	r3, r7, r3
   24072:	2200      	movs	r2, #0
   24074:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   24076:	2314      	movs	r3, #20
   24078:	18fb      	adds	r3, r7, r3
   2407a:	2200      	movs	r2, #0
   2407c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2407e:	2314      	movs	r3, #20
   24080:	18fb      	adds	r3, r7, r3
   24082:	2200      	movs	r2, #0
   24084:	70da      	strb	r2, [r3, #3]
		len = 5;
   24086:	231f      	movs	r3, #31
   24088:	18fb      	adds	r3, r7, r3
   2408a:	2205      	movs	r2, #5
   2408c:	701a      	strb	r2, [r3, #0]
		break;
   2408e:	e0d1      	b.n	24234 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   24090:	2314      	movs	r3, #20
   24092:	18fb      	adds	r3, r7, r3
   24094:	2200      	movs	r2, #0
   24096:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   24098:	2314      	movs	r3, #20
   2409a:	18fb      	adds	r3, r7, r3
   2409c:	2200      	movs	r2, #0
   2409e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   240a0:	2314      	movs	r3, #20
   240a2:	18fb      	adds	r3, r7, r3
   240a4:	2200      	movs	r2, #0
   240a6:	70da      	strb	r2, [r3, #3]
		len = 5;
   240a8:	231f      	movs	r3, #31
   240aa:	18fb      	adds	r3, r7, r3
   240ac:	2205      	movs	r2, #5
   240ae:	701a      	strb	r2, [r3, #0]
		break;
   240b0:	e0c0      	b.n	24234 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   240b2:	2314      	movs	r3, #20
   240b4:	18fb      	adds	r3, r7, r3
   240b6:	22ff      	movs	r2, #255	; 0xff
   240b8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   240ba:	2314      	movs	r3, #20
   240bc:	18fb      	adds	r3, r7, r3
   240be:	22ff      	movs	r2, #255	; 0xff
   240c0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   240c2:	2314      	movs	r3, #20
   240c4:	18fb      	adds	r3, r7, r3
   240c6:	22ff      	movs	r2, #255	; 0xff
   240c8:	70da      	strb	r2, [r3, #3]
		len = 5;
   240ca:	231f      	movs	r3, #31
   240cc:	18fb      	adds	r3, r7, r3
   240ce:	2205      	movs	r2, #5
   240d0:	701a      	strb	r2, [r3, #0]
		break;
   240d2:	e0af      	b.n	24234 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   240d4:	68bb      	ldr	r3, [r7, #8]
   240d6:	0c1b      	lsrs	r3, r3, #16
   240d8:	b2da      	uxtb	r2, r3
   240da:	2314      	movs	r3, #20
   240dc:	18fb      	adds	r3, r7, r3
   240de:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   240e0:	68bb      	ldr	r3, [r7, #8]
   240e2:	0a1b      	lsrs	r3, r3, #8
   240e4:	b2da      	uxtb	r2, r3
   240e6:	2314      	movs	r3, #20
   240e8:	18fb      	adds	r3, r7, r3
   240ea:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   240ec:	68bb      	ldr	r3, [r7, #8]
   240ee:	b2da      	uxtb	r2, r3
   240f0:	2314      	movs	r3, #20
   240f2:	18fb      	adds	r3, r7, r3
   240f4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   240f6:	683b      	ldr	r3, [r7, #0]
   240f8:	0a1b      	lsrs	r3, r3, #8
   240fa:	b2da      	uxtb	r2, r3
   240fc:	2314      	movs	r3, #20
   240fe:	18fb      	adds	r3, r7, r3
   24100:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   24102:	683b      	ldr	r3, [r7, #0]
   24104:	b2da      	uxtb	r2, r3
   24106:	2314      	movs	r3, #20
   24108:	18fb      	adds	r3, r7, r3
   2410a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2410c:	231f      	movs	r3, #31
   2410e:	18fb      	adds	r3, r7, r3
   24110:	2207      	movs	r2, #7
   24112:	701a      	strb	r2, [r3, #0]
		break;
   24114:	e08e      	b.n	24234 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   24116:	68bb      	ldr	r3, [r7, #8]
   24118:	0c1b      	lsrs	r3, r3, #16
   2411a:	b2da      	uxtb	r2, r3
   2411c:	2314      	movs	r3, #20
   2411e:	18fb      	adds	r3, r7, r3
   24120:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24122:	68bb      	ldr	r3, [r7, #8]
   24124:	0a1b      	lsrs	r3, r3, #8
   24126:	b2da      	uxtb	r2, r3
   24128:	2314      	movs	r3, #20
   2412a:	18fb      	adds	r3, r7, r3
   2412c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2412e:	68bb      	ldr	r3, [r7, #8]
   24130:	b2da      	uxtb	r2, r3
   24132:	2314      	movs	r3, #20
   24134:	18fb      	adds	r3, r7, r3
   24136:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   24138:	683b      	ldr	r3, [r7, #0]
   2413a:	0c1b      	lsrs	r3, r3, #16
   2413c:	b2da      	uxtb	r2, r3
   2413e:	2314      	movs	r3, #20
   24140:	18fb      	adds	r3, r7, r3
   24142:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   24144:	683b      	ldr	r3, [r7, #0]
   24146:	0a1b      	lsrs	r3, r3, #8
   24148:	b2da      	uxtb	r2, r3
   2414a:	2314      	movs	r3, #20
   2414c:	18fb      	adds	r3, r7, r3
   2414e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   24150:	683b      	ldr	r3, [r7, #0]
   24152:	b2da      	uxtb	r2, r3
   24154:	2314      	movs	r3, #20
   24156:	18fb      	adds	r3, r7, r3
   24158:	719a      	strb	r2, [r3, #6]
		len = 8;
   2415a:	231f      	movs	r3, #31
   2415c:	18fb      	adds	r3, r7, r3
   2415e:	2208      	movs	r2, #8
   24160:	701a      	strb	r2, [r3, #0]
		break;
   24162:	e067      	b.n	24234 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   24164:	68bb      	ldr	r3, [r7, #8]
   24166:	0a1b      	lsrs	r3, r3, #8
   24168:	b2da      	uxtb	r2, r3
   2416a:	2314      	movs	r3, #20
   2416c:	18fb      	adds	r3, r7, r3
   2416e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   24170:	2330      	movs	r3, #48	; 0x30
   24172:	18fb      	adds	r3, r7, r3
   24174:	781b      	ldrb	r3, [r3, #0]
   24176:	2b00      	cmp	r3, #0
   24178:	d009      	beq.n	2418e <spi_cmd+0x1da>
   2417a:	2314      	movs	r3, #20
   2417c:	18fb      	adds	r3, r7, r3
   2417e:	785b      	ldrb	r3, [r3, #1]
   24180:	2280      	movs	r2, #128	; 0x80
   24182:	4252      	negs	r2, r2
   24184:	4313      	orrs	r3, r2
   24186:	b2da      	uxtb	r2, r3
   24188:	2314      	movs	r3, #20
   2418a:	18fb      	adds	r3, r7, r3
   2418c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2418e:	68bb      	ldr	r3, [r7, #8]
   24190:	b2da      	uxtb	r2, r3
   24192:	2314      	movs	r3, #20
   24194:	18fb      	adds	r3, r7, r3
   24196:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   24198:	687b      	ldr	r3, [r7, #4]
   2419a:	0e1b      	lsrs	r3, r3, #24
   2419c:	b2da      	uxtb	r2, r3
   2419e:	2314      	movs	r3, #20
   241a0:	18fb      	adds	r3, r7, r3
   241a2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   241a4:	687b      	ldr	r3, [r7, #4]
   241a6:	0c1b      	lsrs	r3, r3, #16
   241a8:	b2da      	uxtb	r2, r3
   241aa:	2314      	movs	r3, #20
   241ac:	18fb      	adds	r3, r7, r3
   241ae:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   241b0:	687b      	ldr	r3, [r7, #4]
   241b2:	0a1b      	lsrs	r3, r3, #8
   241b4:	b2da      	uxtb	r2, r3
   241b6:	2314      	movs	r3, #20
   241b8:	18fb      	adds	r3, r7, r3
   241ba:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   241bc:	687b      	ldr	r3, [r7, #4]
   241be:	b2da      	uxtb	r2, r3
   241c0:	2314      	movs	r3, #20
   241c2:	18fb      	adds	r3, r7, r3
   241c4:	719a      	strb	r2, [r3, #6]
		len = 8;
   241c6:	231f      	movs	r3, #31
   241c8:	18fb      	adds	r3, r7, r3
   241ca:	2208      	movs	r2, #8
   241cc:	701a      	strb	r2, [r3, #0]
		break;
   241ce:	e031      	b.n	24234 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   241d0:	68bb      	ldr	r3, [r7, #8]
   241d2:	0c1b      	lsrs	r3, r3, #16
   241d4:	b2da      	uxtb	r2, r3
   241d6:	2314      	movs	r3, #20
   241d8:	18fb      	adds	r3, r7, r3
   241da:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   241dc:	68bb      	ldr	r3, [r7, #8]
   241de:	0a1b      	lsrs	r3, r3, #8
   241e0:	b2da      	uxtb	r2, r3
   241e2:	2314      	movs	r3, #20
   241e4:	18fb      	adds	r3, r7, r3
   241e6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   241e8:	68bb      	ldr	r3, [r7, #8]
   241ea:	b2da      	uxtb	r2, r3
   241ec:	2314      	movs	r3, #20
   241ee:	18fb      	adds	r3, r7, r3
   241f0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   241f2:	687b      	ldr	r3, [r7, #4]
   241f4:	0e1b      	lsrs	r3, r3, #24
   241f6:	b2da      	uxtb	r2, r3
   241f8:	2314      	movs	r3, #20
   241fa:	18fb      	adds	r3, r7, r3
   241fc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   241fe:	687b      	ldr	r3, [r7, #4]
   24200:	0c1b      	lsrs	r3, r3, #16
   24202:	b2da      	uxtb	r2, r3
   24204:	2314      	movs	r3, #20
   24206:	18fb      	adds	r3, r7, r3
   24208:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   2420a:	687b      	ldr	r3, [r7, #4]
   2420c:	0a1b      	lsrs	r3, r3, #8
   2420e:	b2da      	uxtb	r2, r3
   24210:	2314      	movs	r3, #20
   24212:	18fb      	adds	r3, r7, r3
   24214:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   24216:	687b      	ldr	r3, [r7, #4]
   24218:	b2da      	uxtb	r2, r3
   2421a:	2314      	movs	r3, #20
   2421c:	18fb      	adds	r3, r7, r3
   2421e:	71da      	strb	r2, [r3, #7]
		len = 9;
   24220:	231f      	movs	r3, #31
   24222:	18fb      	adds	r3, r7, r3
   24224:	2209      	movs	r2, #9
   24226:	701a      	strb	r2, [r3, #0]
		break;
   24228:	e004      	b.n	24234 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   2422a:	231e      	movs	r3, #30
   2422c:	18fb      	adds	r3, r7, r3
   2422e:	2200      	movs	r2, #0
   24230:	701a      	strb	r2, [r3, #0]
		break;
   24232:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   24234:	231e      	movs	r3, #30
   24236:	18fb      	adds	r3, r7, r3
   24238:	781b      	ldrb	r3, [r3, #0]
   2423a:	b25b      	sxtb	r3, r3
   2423c:	2b00      	cmp	r3, #0
   2423e:	d03f      	beq.n	242c0 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   24240:	4b24      	ldr	r3, [pc, #144]	; (242d4 <spi_cmd+0x320>)
   24242:	781b      	ldrb	r3, [r3, #0]
   24244:	2b00      	cmp	r3, #0
   24246:	d115      	bne.n	24274 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   24248:	231f      	movs	r3, #31
   2424a:	18fb      	adds	r3, r7, r3
   2424c:	781b      	ldrb	r3, [r3, #0]
   2424e:	1e5c      	subs	r4, r3, #1
   24250:	231f      	movs	r3, #31
   24252:	18fb      	adds	r3, r7, r3
   24254:	781b      	ldrb	r3, [r3, #0]
   24256:	3b01      	subs	r3, #1
   24258:	001a      	movs	r2, r3
   2425a:	2314      	movs	r3, #20
   2425c:	18fb      	adds	r3, r7, r3
   2425e:	0019      	movs	r1, r3
   24260:	207f      	movs	r0, #127	; 0x7f
   24262:	4b1d      	ldr	r3, [pc, #116]	; (242d8 <spi_cmd+0x324>)
   24264:	4798      	blx	r3
   24266:	0003      	movs	r3, r0
   24268:	18db      	adds	r3, r3, r3
   2426a:	b2da      	uxtb	r2, r3
   2426c:	2314      	movs	r3, #20
   2426e:	18fb      	adds	r3, r7, r3
   24270:	551a      	strb	r2, [r3, r4]
   24272:	e006      	b.n	24282 <spi_cmd+0x2ce>
		else
			len-=1;
   24274:	231f      	movs	r3, #31
   24276:	18fb      	adds	r3, r7, r3
   24278:	221f      	movs	r2, #31
   2427a:	18ba      	adds	r2, r7, r2
   2427c:	7812      	ldrb	r2, [r2, #0]
   2427e:	3a01      	subs	r2, #1
   24280:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   24282:	231f      	movs	r3, #31
   24284:	18fb      	adds	r3, r7, r3
   24286:	781b      	ldrb	r3, [r3, #0]
   24288:	b29a      	uxth	r2, r3
   2428a:	2314      	movs	r3, #20
   2428c:	18fb      	adds	r3, r7, r3
   2428e:	0011      	movs	r1, r2
   24290:	0018      	movs	r0, r3
   24292:	4b12      	ldr	r3, [pc, #72]	; (242dc <spi_cmd+0x328>)
   24294:	4798      	blx	r3
   24296:	1e03      	subs	r3, r0, #0
   24298:	d012      	beq.n	242c0 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2429a:	2390      	movs	r3, #144	; 0x90
   2429c:	005a      	lsls	r2, r3, #1
   2429e:	4910      	ldr	r1, [pc, #64]	; (242e0 <spi_cmd+0x32c>)
   242a0:	4b10      	ldr	r3, [pc, #64]	; (242e4 <spi_cmd+0x330>)
   242a2:	0018      	movs	r0, r3
   242a4:	4b10      	ldr	r3, [pc, #64]	; (242e8 <spi_cmd+0x334>)
   242a6:	4798      	blx	r3
   242a8:	4b10      	ldr	r3, [pc, #64]	; (242ec <spi_cmd+0x338>)
   242aa:	0018      	movs	r0, r3
   242ac:	4b0e      	ldr	r3, [pc, #56]	; (242e8 <spi_cmd+0x334>)
   242ae:	4798      	blx	r3
   242b0:	4b0f      	ldr	r3, [pc, #60]	; (242f0 <spi_cmd+0x33c>)
   242b2:	0018      	movs	r0, r3
   242b4:	4b0c      	ldr	r3, [pc, #48]	; (242e8 <spi_cmd+0x334>)
   242b6:	4798      	blx	r3
			result = N_FAIL;
   242b8:	231e      	movs	r3, #30
   242ba:	18fb      	adds	r3, r7, r3
   242bc:	2200      	movs	r2, #0
   242be:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   242c0:	231e      	movs	r3, #30
   242c2:	18fb      	adds	r3, r7, r3
   242c4:	781b      	ldrb	r3, [r3, #0]
   242c6:	b25b      	sxtb	r3, r3
}
   242c8:	0018      	movs	r0, r3
   242ca:	46bd      	mov	sp, r7
   242cc:	b009      	add	sp, #36	; 0x24
   242ce:	bd90      	pop	{r4, r7, pc}
   242d0:	00039e38 	.word	0x00039e38
   242d4:	20003ee8 	.word	0x20003ee8
   242d8:	00023f65 	.word	0x00023f65
   242dc:	00023ead 	.word	0x00023ead
   242e0:	00039eb0 	.word	0x00039eb0
   242e4:	000398c0 	.word	0x000398c0
   242e8:	0001ea1d 	.word	0x0001ea1d
   242ec:	000398d4 	.word	0x000398d4
   242f0:	00039900 	.word	0x00039900

000242f4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   242f4:	b590      	push	{r4, r7, lr}
   242f6:	b085      	sub	sp, #20
   242f8:	af00      	add	r7, sp, #0
   242fa:	0002      	movs	r2, r0
   242fc:	1dfb      	adds	r3, r7, #7
   242fe:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   24300:	230e      	movs	r3, #14
   24302:	18fb      	adds	r3, r7, r3
   24304:	2201      	movs	r2, #1
   24306:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   24308:	4b32      	ldr	r3, [pc, #200]	; (243d4 <spi_data_rsp+0xe0>)
   2430a:	781b      	ldrb	r3, [r3, #0]
   2430c:	2b00      	cmp	r3, #0
   2430e:	d104      	bne.n	2431a <spi_data_rsp+0x26>
		len = 2;
   24310:	230f      	movs	r3, #15
   24312:	18fb      	adds	r3, r7, r3
   24314:	2202      	movs	r2, #2
   24316:	701a      	strb	r2, [r3, #0]
   24318:	e003      	b.n	24322 <spi_data_rsp+0x2e>
	else
		len = 3;
   2431a:	230f      	movs	r3, #15
   2431c:	18fb      	adds	r3, r7, r3
   2431e:	2203      	movs	r2, #3
   24320:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   24322:	230f      	movs	r3, #15
   24324:	18fb      	adds	r3, r7, r3
   24326:	781b      	ldrb	r3, [r3, #0]
   24328:	b29a      	uxth	r2, r3
   2432a:	2308      	movs	r3, #8
   2432c:	18fb      	adds	r3, r7, r3
   2432e:	0011      	movs	r1, r2
   24330:	0018      	movs	r0, r3
   24332:	4b29      	ldr	r3, [pc, #164]	; (243d8 <spi_data_rsp+0xe4>)
   24334:	4798      	blx	r3
   24336:	1e03      	subs	r3, r0, #0
   24338:	d013      	beq.n	24362 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2433a:	239a      	movs	r3, #154	; 0x9a
   2433c:	005a      	lsls	r2, r3, #1
   2433e:	4927      	ldr	r1, [pc, #156]	; (243dc <spi_data_rsp+0xe8>)
   24340:	4b27      	ldr	r3, [pc, #156]	; (243e0 <spi_data_rsp+0xec>)
   24342:	0018      	movs	r0, r3
   24344:	4b27      	ldr	r3, [pc, #156]	; (243e4 <spi_data_rsp+0xf0>)
   24346:	4798      	blx	r3
   24348:	4b27      	ldr	r3, [pc, #156]	; (243e8 <spi_data_rsp+0xf4>)
   2434a:	0018      	movs	r0, r3
   2434c:	4b25      	ldr	r3, [pc, #148]	; (243e4 <spi_data_rsp+0xf0>)
   2434e:	4798      	blx	r3
   24350:	4b26      	ldr	r3, [pc, #152]	; (243ec <spi_data_rsp+0xf8>)
   24352:	0018      	movs	r0, r3
   24354:	4b23      	ldr	r3, [pc, #140]	; (243e4 <spi_data_rsp+0xf0>)
   24356:	4798      	blx	r3
		result = N_FAIL;
   24358:	230e      	movs	r3, #14
   2435a:	18fb      	adds	r3, r7, r3
   2435c:	2200      	movs	r2, #0
   2435e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   24360:	e030      	b.n	243c4 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   24362:	230f      	movs	r3, #15
   24364:	18fb      	adds	r3, r7, r3
   24366:	781b      	ldrb	r3, [r3, #0]
   24368:	3b01      	subs	r3, #1
   2436a:	2208      	movs	r2, #8
   2436c:	18ba      	adds	r2, r7, r2
   2436e:	5cd3      	ldrb	r3, [r2, r3]
   24370:	2b00      	cmp	r3, #0
   24372:	d108      	bne.n	24386 <spi_data_rsp+0x92>
   24374:	230f      	movs	r3, #15
   24376:	18fb      	adds	r3, r7, r3
   24378:	781b      	ldrb	r3, [r3, #0]
   2437a:	3b02      	subs	r3, #2
   2437c:	2208      	movs	r2, #8
   2437e:	18ba      	adds	r2, r7, r2
   24380:	5cd3      	ldrb	r3, [r2, r3]
   24382:	2bc3      	cmp	r3, #195	; 0xc3
   24384:	d01e      	beq.n	243c4 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   24386:	233c      	movs	r3, #60	; 0x3c
   24388:	33ff      	adds	r3, #255	; 0xff
   2438a:	001a      	movs	r2, r3
   2438c:	4913      	ldr	r1, [pc, #76]	; (243dc <spi_data_rsp+0xe8>)
   2438e:	4b14      	ldr	r3, [pc, #80]	; (243e0 <spi_data_rsp+0xec>)
   24390:	0018      	movs	r0, r3
   24392:	4b14      	ldr	r3, [pc, #80]	; (243e4 <spi_data_rsp+0xf0>)
   24394:	4798      	blx	r3
   24396:	2308      	movs	r3, #8
   24398:	18fb      	adds	r3, r7, r3
   2439a:	781b      	ldrb	r3, [r3, #0]
   2439c:	0019      	movs	r1, r3
   2439e:	2308      	movs	r3, #8
   243a0:	18fb      	adds	r3, r7, r3
   243a2:	785b      	ldrb	r3, [r3, #1]
   243a4:	001a      	movs	r2, r3
   243a6:	2308      	movs	r3, #8
   243a8:	18fb      	adds	r3, r7, r3
   243aa:	789b      	ldrb	r3, [r3, #2]
   243ac:	4810      	ldr	r0, [pc, #64]	; (243f0 <spi_data_rsp+0xfc>)
   243ae:	4c0d      	ldr	r4, [pc, #52]	; (243e4 <spi_data_rsp+0xf0>)
   243b0:	47a0      	blx	r4
   243b2:	4b0e      	ldr	r3, [pc, #56]	; (243ec <spi_data_rsp+0xf8>)
   243b4:	0018      	movs	r0, r3
   243b6:	4b0b      	ldr	r3, [pc, #44]	; (243e4 <spi_data_rsp+0xf0>)
   243b8:	4798      	blx	r3
		result = N_FAIL;
   243ba:	230e      	movs	r3, #14
   243bc:	18fb      	adds	r3, r7, r3
   243be:	2200      	movs	r2, #0
   243c0:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   243c2:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   243c4:	230e      	movs	r3, #14
   243c6:	18fb      	adds	r3, r7, r3
   243c8:	781b      	ldrb	r3, [r3, #0]
   243ca:	b25b      	sxtb	r3, r3
}
   243cc:	0018      	movs	r0, r3
   243ce:	46bd      	mov	sp, r7
   243d0:	b005      	add	sp, #20
   243d2:	bd90      	pop	{r4, r7, pc}
   243d4:	20003ee8 	.word	0x20003ee8
   243d8:	00023e69 	.word	0x00023e69
   243dc:	00039eb8 	.word	0x00039eb8
   243e0:	000398c0 	.word	0x000398c0
   243e4:	0001ea1d 	.word	0x0001ea1d
   243e8:	00039904 	.word	0x00039904
   243ec:	00039900 	.word	0x00039900
   243f0:	00039924 	.word	0x00039924

000243f4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   243f4:	b580      	push	{r7, lr}
   243f6:	b084      	sub	sp, #16
   243f8:	af00      	add	r7, sp, #0
   243fa:	0002      	movs	r2, r0
   243fc:	1dfb      	adds	r3, r7, #7
   243fe:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   24400:	230f      	movs	r3, #15
   24402:	18fb      	adds	r3, r7, r3
   24404:	2201      	movs	r2, #1
   24406:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24408:	1dfb      	adds	r3, r7, #7
   2440a:	781b      	ldrb	r3, [r3, #0]
   2440c:	2bcf      	cmp	r3, #207	; 0xcf
   2440e:	d007      	beq.n	24420 <spi_cmd_rsp+0x2c>
   24410:	1dfb      	adds	r3, r7, #7
   24412:	781b      	ldrb	r3, [r3, #0]
   24414:	2bc5      	cmp	r3, #197	; 0xc5
   24416:	d003      	beq.n	24420 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   24418:	1dfb      	adds	r3, r7, #7
   2441a:	781b      	ldrb	r3, [r3, #0]
   2441c:	2bc6      	cmp	r3, #198	; 0xc6
   2441e:	d10c      	bne.n	2443a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   24420:	230d      	movs	r3, #13
   24422:	18fb      	adds	r3, r7, r3
   24424:	2101      	movs	r1, #1
   24426:	0018      	movs	r0, r3
   24428:	4b3b      	ldr	r3, [pc, #236]	; (24518 <spi_cmd_rsp+0x124>)
   2442a:	4798      	blx	r3
   2442c:	1e03      	subs	r3, r0, #0
   2442e:	d004      	beq.n	2443a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   24430:	230f      	movs	r3, #15
   24432:	18fb      	adds	r3, r7, r3
   24434:	2200      	movs	r2, #0
   24436:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   24438:	e065      	b.n	24506 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2443a:	230e      	movs	r3, #14
   2443c:	18fb      	adds	r3, r7, r3
   2443e:	220a      	movs	r2, #10
   24440:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   24442:	230d      	movs	r3, #13
   24444:	18fb      	adds	r3, r7, r3
   24446:	2101      	movs	r1, #1
   24448:	0018      	movs	r0, r3
   2444a:	4b33      	ldr	r3, [pc, #204]	; (24518 <spi_cmd_rsp+0x124>)
   2444c:	4798      	blx	r3
   2444e:	1e03      	subs	r3, r0, #0
   24450:	d014      	beq.n	2447c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   24452:	235c      	movs	r3, #92	; 0x5c
   24454:	33ff      	adds	r3, #255	; 0xff
   24456:	001a      	movs	r2, r3
   24458:	4930      	ldr	r1, [pc, #192]	; (2451c <spi_cmd_rsp+0x128>)
   2445a:	4b31      	ldr	r3, [pc, #196]	; (24520 <spi_cmd_rsp+0x12c>)
   2445c:	0018      	movs	r0, r3
   2445e:	4b31      	ldr	r3, [pc, #196]	; (24524 <spi_cmd_rsp+0x130>)
   24460:	4798      	blx	r3
   24462:	4b31      	ldr	r3, [pc, #196]	; (24528 <spi_cmd_rsp+0x134>)
   24464:	0018      	movs	r0, r3
   24466:	4b2f      	ldr	r3, [pc, #188]	; (24524 <spi_cmd_rsp+0x130>)
   24468:	4798      	blx	r3
   2446a:	4b30      	ldr	r3, [pc, #192]	; (2452c <spi_cmd_rsp+0x138>)
   2446c:	0018      	movs	r0, r3
   2446e:	4b2d      	ldr	r3, [pc, #180]	; (24524 <spi_cmd_rsp+0x130>)
   24470:	4798      	blx	r3
			result = N_FAIL;
   24472:	230f      	movs	r3, #15
   24474:	18fb      	adds	r3, r7, r3
   24476:	2200      	movs	r2, #0
   24478:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2447a:	e044      	b.n	24506 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   2447c:	230d      	movs	r3, #13
   2447e:	18fb      	adds	r3, r7, r3
   24480:	781b      	ldrb	r3, [r3, #0]
   24482:	1dfa      	adds	r2, r7, #7
   24484:	7812      	ldrb	r2, [r2, #0]
   24486:	429a      	cmp	r2, r3
   24488:	d00b      	beq.n	244a2 <spi_cmd_rsp+0xae>
   2448a:	230e      	movs	r3, #14
   2448c:	18fb      	adds	r3, r7, r3
   2448e:	781b      	ldrb	r3, [r3, #0]
   24490:	b25b      	sxtb	r3, r3
   24492:	b2da      	uxtb	r2, r3
   24494:	3a01      	subs	r2, #1
   24496:	b2d1      	uxtb	r1, r2
   24498:	220e      	movs	r2, #14
   2449a:	18ba      	adds	r2, r7, r2
   2449c:	7011      	strb	r1, [r2, #0]
   2449e:	2b00      	cmp	r3, #0
   244a0:	dccf      	bgt.n	24442 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   244a2:	230e      	movs	r3, #14
   244a4:	18fb      	adds	r3, r7, r3
   244a6:	220a      	movs	r2, #10
   244a8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   244aa:	230d      	movs	r3, #13
   244ac:	18fb      	adds	r3, r7, r3
   244ae:	2101      	movs	r1, #1
   244b0:	0018      	movs	r0, r3
   244b2:	4b19      	ldr	r3, [pc, #100]	; (24518 <spi_cmd_rsp+0x124>)
   244b4:	4798      	blx	r3
   244b6:	1e03      	subs	r3, r0, #0
   244b8:	d014      	beq.n	244e4 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   244ba:	236a      	movs	r3, #106	; 0x6a
   244bc:	33ff      	adds	r3, #255	; 0xff
   244be:	001a      	movs	r2, r3
   244c0:	4916      	ldr	r1, [pc, #88]	; (2451c <spi_cmd_rsp+0x128>)
   244c2:	4b17      	ldr	r3, [pc, #92]	; (24520 <spi_cmd_rsp+0x12c>)
   244c4:	0018      	movs	r0, r3
   244c6:	4b17      	ldr	r3, [pc, #92]	; (24524 <spi_cmd_rsp+0x130>)
   244c8:	4798      	blx	r3
   244ca:	4b17      	ldr	r3, [pc, #92]	; (24528 <spi_cmd_rsp+0x134>)
   244cc:	0018      	movs	r0, r3
   244ce:	4b15      	ldr	r3, [pc, #84]	; (24524 <spi_cmd_rsp+0x130>)
   244d0:	4798      	blx	r3
   244d2:	4b16      	ldr	r3, [pc, #88]	; (2452c <spi_cmd_rsp+0x138>)
   244d4:	0018      	movs	r0, r3
   244d6:	4b13      	ldr	r3, [pc, #76]	; (24524 <spi_cmd_rsp+0x130>)
   244d8:	4798      	blx	r3
			result = N_FAIL;
   244da:	230f      	movs	r3, #15
   244dc:	18fb      	adds	r3, r7, r3
   244de:	2200      	movs	r2, #0
   244e0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   244e2:	e010      	b.n	24506 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   244e4:	230d      	movs	r3, #13
   244e6:	18fb      	adds	r3, r7, r3
   244e8:	781b      	ldrb	r3, [r3, #0]
   244ea:	2b00      	cmp	r3, #0
   244ec:	d00b      	beq.n	24506 <spi_cmd_rsp+0x112>
   244ee:	230e      	movs	r3, #14
   244f0:	18fb      	adds	r3, r7, r3
   244f2:	781b      	ldrb	r3, [r3, #0]
   244f4:	b25b      	sxtb	r3, r3
   244f6:	b2da      	uxtb	r2, r3
   244f8:	3a01      	subs	r2, #1
   244fa:	b2d1      	uxtb	r1, r2
   244fc:	220e      	movs	r2, #14
   244fe:	18ba      	adds	r2, r7, r2
   24500:	7011      	strb	r1, [r2, #0]
   24502:	2b00      	cmp	r3, #0
   24504:	dcd1      	bgt.n	244aa <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   24506:	230f      	movs	r3, #15
   24508:	18fb      	adds	r3, r7, r3
   2450a:	781b      	ldrb	r3, [r3, #0]
   2450c:	b25b      	sxtb	r3, r3
}
   2450e:	0018      	movs	r0, r3
   24510:	46bd      	mov	sp, r7
   24512:	b004      	add	sp, #16
   24514:	bd80      	pop	{r7, pc}
   24516:	46c0      	nop			; (mov r8, r8)
   24518:	00023e69 	.word	0x00023e69
   2451c:	00039ec8 	.word	0x00039ec8
   24520:	000398c0 	.word	0x000398c0
   24524:	0001ea1d 	.word	0x0001ea1d
   24528:	00039954 	.word	0x00039954
   2452c:	00039900 	.word	0x00039900

00024530 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   24530:	b590      	push	{r4, r7, lr}
   24532:	b09f      	sub	sp, #124	; 0x7c
   24534:	af00      	add	r7, sp, #0
   24536:	60b9      	str	r1, [r7, #8]
   24538:	607a      	str	r2, [r7, #4]
   2453a:	603b      	str	r3, [r7, #0]
   2453c:	230f      	movs	r3, #15
   2453e:	18fb      	adds	r3, r7, r3
   24540:	1c02      	adds	r2, r0, #0
   24542:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   24544:	2300      	movs	r3, #0
   24546:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   24548:	2301      	movs	r3, #1
   2454a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   2454c:	2338      	movs	r3, #56	; 0x38
   2454e:	18fb      	adds	r3, r7, r3
   24550:	220f      	movs	r2, #15
   24552:	18ba      	adds	r2, r7, r2
   24554:	7812      	ldrb	r2, [r2, #0]
   24556:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   24558:	230f      	movs	r3, #15
   2455a:	18fb      	adds	r3, r7, r3
   2455c:	781b      	ldrb	r3, [r3, #0]
   2455e:	3bc1      	subs	r3, #193	; 0xc1
   24560:	2b0e      	cmp	r3, #14
   24562:	d900      	bls.n	24566 <spi_cmd_complete+0x36>
   24564:	e103      	b.n	2476e <spi_cmd_complete+0x23e>
   24566:	009a      	lsls	r2, r3, #2
   24568:	4bd1      	ldr	r3, [pc, #836]	; (248b0 <spi_cmd_complete+0x380>)
   2456a:	18d3      	adds	r3, r2, r3
   2456c:	681b      	ldr	r3, [r3, #0]
   2456e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   24570:	68bb      	ldr	r3, [r7, #8]
   24572:	0c1b      	lsrs	r3, r3, #16
   24574:	b2da      	uxtb	r2, r3
   24576:	2338      	movs	r3, #56	; 0x38
   24578:	18fb      	adds	r3, r7, r3
   2457a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2457c:	68bb      	ldr	r3, [r7, #8]
   2457e:	0a1b      	lsrs	r3, r3, #8
   24580:	b2da      	uxtb	r2, r3
   24582:	2338      	movs	r3, #56	; 0x38
   24584:	18fb      	adds	r3, r7, r3
   24586:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   24588:	68bb      	ldr	r3, [r7, #8]
   2458a:	b2da      	uxtb	r2, r3
   2458c:	2338      	movs	r3, #56	; 0x38
   2458e:	18fb      	adds	r3, r7, r3
   24590:	70da      	strb	r2, [r3, #3]
		len = 5;
   24592:	2305      	movs	r3, #5
   24594:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   24596:	e0ed      	b.n	24774 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   24598:	68bb      	ldr	r3, [r7, #8]
   2459a:	0a1b      	lsrs	r3, r3, #8
   2459c:	b2da      	uxtb	r2, r3
   2459e:	2338      	movs	r3, #56	; 0x38
   245a0:	18fb      	adds	r3, r7, r3
   245a2:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   245a4:	2388      	movs	r3, #136	; 0x88
   245a6:	18fb      	adds	r3, r7, r3
   245a8:	781b      	ldrb	r3, [r3, #0]
   245aa:	2b01      	cmp	r3, #1
   245ac:	d109      	bne.n	245c2 <spi_cmd_complete+0x92>
   245ae:	2338      	movs	r3, #56	; 0x38
   245b0:	18fb      	adds	r3, r7, r3
   245b2:	785b      	ldrb	r3, [r3, #1]
   245b4:	2280      	movs	r2, #128	; 0x80
   245b6:	4252      	negs	r2, r2
   245b8:	4313      	orrs	r3, r2
   245ba:	b2da      	uxtb	r2, r3
   245bc:	2338      	movs	r3, #56	; 0x38
   245be:	18fb      	adds	r3, r7, r3
   245c0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   245c2:	68bb      	ldr	r3, [r7, #8]
   245c4:	b2da      	uxtb	r2, r3
   245c6:	2338      	movs	r3, #56	; 0x38
   245c8:	18fb      	adds	r3, r7, r3
   245ca:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   245cc:	2338      	movs	r3, #56	; 0x38
   245ce:	18fb      	adds	r3, r7, r3
   245d0:	2200      	movs	r2, #0
   245d2:	70da      	strb	r2, [r3, #3]
		len = 5;
   245d4:	2305      	movs	r3, #5
   245d6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   245d8:	e0cc      	b.n	24774 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   245da:	2338      	movs	r3, #56	; 0x38
   245dc:	18fb      	adds	r3, r7, r3
   245de:	2200      	movs	r2, #0
   245e0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   245e2:	2338      	movs	r3, #56	; 0x38
   245e4:	18fb      	adds	r3, r7, r3
   245e6:	2200      	movs	r2, #0
   245e8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   245ea:	2338      	movs	r3, #56	; 0x38
   245ec:	18fb      	adds	r3, r7, r3
   245ee:	2200      	movs	r2, #0
   245f0:	70da      	strb	r2, [r3, #3]
		len = 5;
   245f2:	2305      	movs	r3, #5
   245f4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   245f6:	e0bd      	b.n	24774 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   245f8:	2338      	movs	r3, #56	; 0x38
   245fa:	18fb      	adds	r3, r7, r3
   245fc:	2200      	movs	r2, #0
   245fe:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   24600:	2338      	movs	r3, #56	; 0x38
   24602:	18fb      	adds	r3, r7, r3
   24604:	2200      	movs	r2, #0
   24606:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   24608:	2338      	movs	r3, #56	; 0x38
   2460a:	18fb      	adds	r3, r7, r3
   2460c:	2200      	movs	r2, #0
   2460e:	70da      	strb	r2, [r3, #3]
		len = 5;
   24610:	2305      	movs	r3, #5
   24612:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24614:	e0ae      	b.n	24774 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   24616:	2338      	movs	r3, #56	; 0x38
   24618:	18fb      	adds	r3, r7, r3
   2461a:	22ff      	movs	r2, #255	; 0xff
   2461c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   2461e:	2338      	movs	r3, #56	; 0x38
   24620:	18fb      	adds	r3, r7, r3
   24622:	22ff      	movs	r2, #255	; 0xff
   24624:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   24626:	2338      	movs	r3, #56	; 0x38
   24628:	18fb      	adds	r3, r7, r3
   2462a:	22ff      	movs	r2, #255	; 0xff
   2462c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2462e:	2305      	movs	r3, #5
   24630:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24632:	e09f      	b.n	24774 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   24634:	68bb      	ldr	r3, [r7, #8]
   24636:	0c1b      	lsrs	r3, r3, #16
   24638:	b2da      	uxtb	r2, r3
   2463a:	2338      	movs	r3, #56	; 0x38
   2463c:	18fb      	adds	r3, r7, r3
   2463e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24640:	68bb      	ldr	r3, [r7, #8]
   24642:	0a1b      	lsrs	r3, r3, #8
   24644:	b2da      	uxtb	r2, r3
   24646:	2338      	movs	r3, #56	; 0x38
   24648:	18fb      	adds	r3, r7, r3
   2464a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2464c:	68bb      	ldr	r3, [r7, #8]
   2464e:	b2da      	uxtb	r2, r3
   24650:	2338      	movs	r3, #56	; 0x38
   24652:	18fb      	adds	r3, r7, r3
   24654:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   24656:	683b      	ldr	r3, [r7, #0]
   24658:	0a1b      	lsrs	r3, r3, #8
   2465a:	b2da      	uxtb	r2, r3
   2465c:	2338      	movs	r3, #56	; 0x38
   2465e:	18fb      	adds	r3, r7, r3
   24660:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   24662:	683b      	ldr	r3, [r7, #0]
   24664:	b2da      	uxtb	r2, r3
   24666:	2338      	movs	r3, #56	; 0x38
   24668:	18fb      	adds	r3, r7, r3
   2466a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2466c:	2307      	movs	r3, #7
   2466e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24670:	e080      	b.n	24774 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   24672:	68bb      	ldr	r3, [r7, #8]
   24674:	0c1b      	lsrs	r3, r3, #16
   24676:	b2da      	uxtb	r2, r3
   24678:	2338      	movs	r3, #56	; 0x38
   2467a:	18fb      	adds	r3, r7, r3
   2467c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2467e:	68bb      	ldr	r3, [r7, #8]
   24680:	0a1b      	lsrs	r3, r3, #8
   24682:	b2da      	uxtb	r2, r3
   24684:	2338      	movs	r3, #56	; 0x38
   24686:	18fb      	adds	r3, r7, r3
   24688:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2468a:	68bb      	ldr	r3, [r7, #8]
   2468c:	b2da      	uxtb	r2, r3
   2468e:	2338      	movs	r3, #56	; 0x38
   24690:	18fb      	adds	r3, r7, r3
   24692:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   24694:	683b      	ldr	r3, [r7, #0]
   24696:	0c1b      	lsrs	r3, r3, #16
   24698:	b2da      	uxtb	r2, r3
   2469a:	2338      	movs	r3, #56	; 0x38
   2469c:	18fb      	adds	r3, r7, r3
   2469e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   246a0:	683b      	ldr	r3, [r7, #0]
   246a2:	0a1b      	lsrs	r3, r3, #8
   246a4:	b2da      	uxtb	r2, r3
   246a6:	2338      	movs	r3, #56	; 0x38
   246a8:	18fb      	adds	r3, r7, r3
   246aa:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   246ac:	683b      	ldr	r3, [r7, #0]
   246ae:	b2da      	uxtb	r2, r3
   246b0:	2338      	movs	r3, #56	; 0x38
   246b2:	18fb      	adds	r3, r7, r3
   246b4:	719a      	strb	r2, [r3, #6]
		len = 8;
   246b6:	2308      	movs	r3, #8
   246b8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   246ba:	e05b      	b.n	24774 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   246bc:	68bb      	ldr	r3, [r7, #8]
   246be:	0a1b      	lsrs	r3, r3, #8
   246c0:	b2da      	uxtb	r2, r3
   246c2:	2338      	movs	r3, #56	; 0x38
   246c4:	18fb      	adds	r3, r7, r3
   246c6:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   246c8:	2388      	movs	r3, #136	; 0x88
   246ca:	18fb      	adds	r3, r7, r3
   246cc:	781b      	ldrb	r3, [r3, #0]
   246ce:	2b01      	cmp	r3, #1
   246d0:	d109      	bne.n	246e6 <spi_cmd_complete+0x1b6>
   246d2:	2338      	movs	r3, #56	; 0x38
   246d4:	18fb      	adds	r3, r7, r3
   246d6:	785b      	ldrb	r3, [r3, #1]
   246d8:	2280      	movs	r2, #128	; 0x80
   246da:	4252      	negs	r2, r2
   246dc:	4313      	orrs	r3, r2
   246de:	b2da      	uxtb	r2, r3
   246e0:	2338      	movs	r3, #56	; 0x38
   246e2:	18fb      	adds	r3, r7, r3
   246e4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   246e6:	68bb      	ldr	r3, [r7, #8]
   246e8:	b2da      	uxtb	r2, r3
   246ea:	2338      	movs	r3, #56	; 0x38
   246ec:	18fb      	adds	r3, r7, r3
   246ee:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   246f0:	687b      	ldr	r3, [r7, #4]
   246f2:	78da      	ldrb	r2, [r3, #3]
   246f4:	2338      	movs	r3, #56	; 0x38
   246f6:	18fb      	adds	r3, r7, r3
   246f8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   246fa:	687b      	ldr	r3, [r7, #4]
   246fc:	789a      	ldrb	r2, [r3, #2]
   246fe:	2338      	movs	r3, #56	; 0x38
   24700:	18fb      	adds	r3, r7, r3
   24702:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   24704:	687b      	ldr	r3, [r7, #4]
   24706:	785a      	ldrb	r2, [r3, #1]
   24708:	2338      	movs	r3, #56	; 0x38
   2470a:	18fb      	adds	r3, r7, r3
   2470c:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   2470e:	687b      	ldr	r3, [r7, #4]
   24710:	781a      	ldrb	r2, [r3, #0]
   24712:	2338      	movs	r3, #56	; 0x38
   24714:	18fb      	adds	r3, r7, r3
   24716:	719a      	strb	r2, [r3, #6]
		len = 8;
   24718:	2308      	movs	r3, #8
   2471a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2471c:	e02a      	b.n	24774 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   2471e:	68bb      	ldr	r3, [r7, #8]
   24720:	0c1b      	lsrs	r3, r3, #16
   24722:	b2da      	uxtb	r2, r3
   24724:	2338      	movs	r3, #56	; 0x38
   24726:	18fb      	adds	r3, r7, r3
   24728:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2472a:	68bb      	ldr	r3, [r7, #8]
   2472c:	0a1b      	lsrs	r3, r3, #8
   2472e:	b2da      	uxtb	r2, r3
   24730:	2338      	movs	r3, #56	; 0x38
   24732:	18fb      	adds	r3, r7, r3
   24734:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   24736:	68bb      	ldr	r3, [r7, #8]
   24738:	b2da      	uxtb	r2, r3
   2473a:	2338      	movs	r3, #56	; 0x38
   2473c:	18fb      	adds	r3, r7, r3
   2473e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   24740:	687b      	ldr	r3, [r7, #4]
   24742:	78da      	ldrb	r2, [r3, #3]
   24744:	2338      	movs	r3, #56	; 0x38
   24746:	18fb      	adds	r3, r7, r3
   24748:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2474a:	687b      	ldr	r3, [r7, #4]
   2474c:	789a      	ldrb	r2, [r3, #2]
   2474e:	2338      	movs	r3, #56	; 0x38
   24750:	18fb      	adds	r3, r7, r3
   24752:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   24754:	687b      	ldr	r3, [r7, #4]
   24756:	785a      	ldrb	r2, [r3, #1]
   24758:	2338      	movs	r3, #56	; 0x38
   2475a:	18fb      	adds	r3, r7, r3
   2475c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2475e:	687b      	ldr	r3, [r7, #4]
   24760:	781a      	ldrb	r2, [r3, #0]
   24762:	2338      	movs	r3, #56	; 0x38
   24764:	18fb      	adds	r3, r7, r3
   24766:	71da      	strb	r2, [r3, #7]
		len = 9;
   24768:	2309      	movs	r3, #9
   2476a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2476c:	e002      	b.n	24774 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2476e:	2300      	movs	r3, #0
   24770:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   24772:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   24774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24776:	2b01      	cmp	r3, #1
   24778:	d001      	beq.n	2477e <spi_cmd_complete+0x24e>
		return result;
   2477a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2477c:	e33a      	b.n	24df4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2477e:	4b4d      	ldr	r3, [pc, #308]	; (248b4 <spi_cmd_complete+0x384>)
   24780:	781b      	ldrb	r3, [r3, #0]
   24782:	2b00      	cmp	r3, #0
   24784:	d111      	bne.n	247aa <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   24786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24788:	1e5c      	subs	r4, r3, #1
   2478a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2478c:	3b01      	subs	r3, #1
   2478e:	001a      	movs	r2, r3
   24790:	2338      	movs	r3, #56	; 0x38
   24792:	18fb      	adds	r3, r7, r3
   24794:	0019      	movs	r1, r3
   24796:	207f      	movs	r0, #127	; 0x7f
   24798:	4b47      	ldr	r3, [pc, #284]	; (248b8 <spi_cmd_complete+0x388>)
   2479a:	4798      	blx	r3
   2479c:	0003      	movs	r3, r0
   2479e:	18db      	adds	r3, r3, r3
   247a0:	b2da      	uxtb	r2, r3
   247a2:	2338      	movs	r3, #56	; 0x38
   247a4:	18fb      	adds	r3, r7, r3
   247a6:	551a      	strb	r2, [r3, r4]
   247a8:	e002      	b.n	247b0 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   247aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   247ac:	3b01      	subs	r3, #1
   247ae:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   247b0:	230f      	movs	r3, #15
   247b2:	18fb      	adds	r3, r7, r3
   247b4:	781b      	ldrb	r3, [r3, #0]
   247b6:	2bcf      	cmp	r3, #207	; 0xcf
   247b8:	d009      	beq.n	247ce <spi_cmd_complete+0x29e>
   247ba:	230f      	movs	r3, #15
   247bc:	18fb      	adds	r3, r7, r3
   247be:	781b      	ldrb	r3, [r3, #0]
   247c0:	2bc5      	cmp	r3, #197	; 0xc5
   247c2:	d004      	beq.n	247ce <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   247c4:	230f      	movs	r3, #15
   247c6:	18fb      	adds	r3, r7, r3
   247c8:	781b      	ldrb	r3, [r3, #0]
   247ca:	2bc6      	cmp	r3, #198	; 0xc6
   247cc:	d103      	bne.n	247d6 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   247ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   247d0:	3306      	adds	r3, #6
   247d2:	673b      	str	r3, [r7, #112]	; 0x70
   247d4:	e018      	b.n	24808 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   247d6:	230f      	movs	r3, #15
   247d8:	18fb      	adds	r3, r7, r3
   247da:	781b      	ldrb	r3, [r3, #0]
   247dc:	2bc4      	cmp	r3, #196	; 0xc4
   247de:	d004      	beq.n	247ea <spi_cmd_complete+0x2ba>
   247e0:	230f      	movs	r3, #15
   247e2:	18fb      	adds	r3, r7, r3
   247e4:	781b      	ldrb	r3, [r3, #0]
   247e6:	2bca      	cmp	r3, #202	; 0xca
   247e8:	d10b      	bne.n	24802 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   247ea:	4b32      	ldr	r3, [pc, #200]	; (248b4 <spi_cmd_complete+0x384>)
   247ec:	781b      	ldrb	r3, [r3, #0]
   247ee:	2b00      	cmp	r3, #0
   247f0:	d103      	bne.n	247fa <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   247f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   247f4:	330c      	adds	r3, #12
   247f6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   247f8:	e006      	b.n	24808 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   247fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   247fc:	330a      	adds	r3, #10
   247fe:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24800:	e002      	b.n	24808 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24804:	3305      	adds	r3, #5
   24806:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   24808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2480a:	2b20      	cmp	r3, #32
   2480c:	d914      	bls.n	24838 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   2480e:	23f7      	movs	r3, #247	; 0xf7
   24810:	005a      	lsls	r2, r3, #1
   24812:	492a      	ldr	r1, [pc, #168]	; (248bc <spi_cmd_complete+0x38c>)
   24814:	4b2a      	ldr	r3, [pc, #168]	; (248c0 <spi_cmd_complete+0x390>)
   24816:	0018      	movs	r0, r3
   24818:	4b2a      	ldr	r3, [pc, #168]	; (248c4 <spi_cmd_complete+0x394>)
   2481a:	4798      	blx	r3
   2481c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2481e:	4b2a      	ldr	r3, [pc, #168]	; (248c8 <spi_cmd_complete+0x398>)
   24820:	2220      	movs	r2, #32
   24822:	0018      	movs	r0, r3
   24824:	4b27      	ldr	r3, [pc, #156]	; (248c4 <spi_cmd_complete+0x394>)
   24826:	4798      	blx	r3
   24828:	4b28      	ldr	r3, [pc, #160]	; (248cc <spi_cmd_complete+0x39c>)
   2482a:	0018      	movs	r0, r3
   2482c:	4b25      	ldr	r3, [pc, #148]	; (248c4 <spi_cmd_complete+0x394>)
   2482e:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   24830:	2300      	movs	r3, #0
   24832:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24836:	e2dd      	b.n	24df4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   24838:	2377      	movs	r3, #119	; 0x77
   2483a:	18fb      	adds	r3, r7, r3
   2483c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2483e:	701a      	strb	r2, [r3, #0]
   24840:	e00d      	b.n	2485e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   24842:	2377      	movs	r3, #119	; 0x77
   24844:	18fb      	adds	r3, r7, r3
   24846:	781b      	ldrb	r3, [r3, #0]
   24848:	2238      	movs	r2, #56	; 0x38
   2484a:	18ba      	adds	r2, r7, r2
   2484c:	2100      	movs	r1, #0
   2484e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   24850:	2377      	movs	r3, #119	; 0x77
   24852:	18fb      	adds	r3, r7, r3
   24854:	781a      	ldrb	r2, [r3, #0]
   24856:	2377      	movs	r3, #119	; 0x77
   24858:	18fb      	adds	r3, r7, r3
   2485a:	3201      	adds	r2, #1
   2485c:	701a      	strb	r2, [r3, #0]
   2485e:	2377      	movs	r3, #119	; 0x77
   24860:	18fb      	adds	r3, r7, r3
   24862:	781a      	ldrb	r2, [r3, #0]
   24864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24866:	429a      	cmp	r2, r3
   24868:	d3eb      	bcc.n	24842 <spi_cmd_complete+0x312>
	}
	rix = len;
   2486a:	2376      	movs	r3, #118	; 0x76
   2486c:	18fb      	adds	r3, r7, r3
   2486e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24870:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   24872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24874:	b29a      	uxth	r2, r3
   24876:	2318      	movs	r3, #24
   24878:	18f9      	adds	r1, r7, r3
   2487a:	2338      	movs	r3, #56	; 0x38
   2487c:	18fb      	adds	r3, r7, r3
   2487e:	0018      	movs	r0, r3
   24880:	4b13      	ldr	r3, [pc, #76]	; (248d0 <spi_cmd_complete+0x3a0>)
   24882:	4798      	blx	r3
   24884:	1e03      	subs	r3, r0, #0
   24886:	d027      	beq.n	248d8 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   24888:	23fa      	movs	r3, #250	; 0xfa
   2488a:	33ff      	adds	r3, #255	; 0xff
   2488c:	001a      	movs	r2, r3
   2488e:	490b      	ldr	r1, [pc, #44]	; (248bc <spi_cmd_complete+0x38c>)
   24890:	4b0b      	ldr	r3, [pc, #44]	; (248c0 <spi_cmd_complete+0x390>)
   24892:	0018      	movs	r0, r3
   24894:	4b0b      	ldr	r3, [pc, #44]	; (248c4 <spi_cmd_complete+0x394>)
   24896:	4798      	blx	r3
   24898:	4b0e      	ldr	r3, [pc, #56]	; (248d4 <spi_cmd_complete+0x3a4>)
   2489a:	0018      	movs	r0, r3
   2489c:	4b09      	ldr	r3, [pc, #36]	; (248c4 <spi_cmd_complete+0x394>)
   2489e:	4798      	blx	r3
   248a0:	4b0a      	ldr	r3, [pc, #40]	; (248cc <spi_cmd_complete+0x39c>)
   248a2:	0018      	movs	r0, r3
   248a4:	4b07      	ldr	r3, [pc, #28]	; (248c4 <spi_cmd_complete+0x394>)
   248a6:	4798      	blx	r3
		result = N_FAIL;
   248a8:	2300      	movs	r3, #0
   248aa:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   248ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   248ae:	e2a1      	b.n	24df4 <spi_cmd_complete+0x8c4>
   248b0:	00039e74 	.word	0x00039e74
   248b4:	20003ee8 	.word	0x20003ee8
   248b8:	00023f65 	.word	0x00023f65
   248bc:	00039ed4 	.word	0x00039ed4
   248c0:	000398c0 	.word	0x000398c0
   248c4:	0001ea1d 	.word	0x0001ea1d
   248c8:	00039988 	.word	0x00039988
   248cc:	00039900 	.word	0x00039900
   248d0:	00023ef1 	.word	0x00023ef1
   248d4:	000398d4 	.word	0x000398d4
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   248d8:	230f      	movs	r3, #15
   248da:	18fb      	adds	r3, r7, r3
   248dc:	781b      	ldrb	r3, [r3, #0]
   248de:	2bcf      	cmp	r3, #207	; 0xcf
   248e0:	d009      	beq.n	248f6 <spi_cmd_complete+0x3c6>
   248e2:	230f      	movs	r3, #15
   248e4:	18fb      	adds	r3, r7, r3
   248e6:	781b      	ldrb	r3, [r3, #0]
   248e8:	2bc5      	cmp	r3, #197	; 0xc5
   248ea:	d004      	beq.n	248f6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   248ec:	230f      	movs	r3, #15
   248ee:	18fb      	adds	r3, r7, r3
   248f0:	781b      	ldrb	r3, [r3, #0]
   248f2:	2bc6      	cmp	r3, #198	; 0xc6
   248f4:	d106      	bne.n	24904 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   248f6:	2376      	movs	r3, #118	; 0x76
   248f8:	18fb      	adds	r3, r7, r3
   248fa:	781a      	ldrb	r2, [r3, #0]
   248fc:	2376      	movs	r3, #118	; 0x76
   248fe:	18fb      	adds	r3, r7, r3
   24900:	3201      	adds	r2, #1
   24902:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   24904:	2376      	movs	r3, #118	; 0x76
   24906:	18fb      	adds	r3, r7, r3
   24908:	781b      	ldrb	r3, [r3, #0]
   2490a:	2276      	movs	r2, #118	; 0x76
   2490c:	18ba      	adds	r2, r7, r2
   2490e:	1c59      	adds	r1, r3, #1
   24910:	7011      	strb	r1, [r2, #0]
   24912:	001a      	movs	r2, r3
   24914:	2318      	movs	r3, #24
   24916:	18fb      	adds	r3, r7, r3
   24918:	5c9a      	ldrb	r2, [r3, r2]
   2491a:	2317      	movs	r3, #23
   2491c:	18fb      	adds	r3, r7, r3
   2491e:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   24920:	2317      	movs	r3, #23
   24922:	18fb      	adds	r3, r7, r3
   24924:	781b      	ldrb	r3, [r3, #0]
   24926:	220f      	movs	r2, #15
   24928:	18ba      	adds	r2, r7, r2
   2492a:	7812      	ldrb	r2, [r2, #0]
   2492c:	429a      	cmp	r2, r3
   2492e:	d018      	beq.n	24962 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   24930:	4add      	ldr	r2, [pc, #884]	; (24ca8 <spi_cmd_complete+0x778>)
   24932:	49de      	ldr	r1, [pc, #888]	; (24cac <spi_cmd_complete+0x77c>)
   24934:	4bde      	ldr	r3, [pc, #888]	; (24cb0 <spi_cmd_complete+0x780>)
   24936:	0018      	movs	r0, r3
   24938:	4bde      	ldr	r3, [pc, #888]	; (24cb4 <spi_cmd_complete+0x784>)
   2493a:	4798      	blx	r3
   2493c:	230f      	movs	r3, #15
   2493e:	18fb      	adds	r3, r7, r3
   24940:	7819      	ldrb	r1, [r3, #0]
   24942:	2317      	movs	r3, #23
   24944:	18fb      	adds	r3, r7, r3
   24946:	781b      	ldrb	r3, [r3, #0]
   24948:	001a      	movs	r2, r3
   2494a:	4bdb      	ldr	r3, [pc, #876]	; (24cb8 <spi_cmd_complete+0x788>)
   2494c:	0018      	movs	r0, r3
   2494e:	4bd9      	ldr	r3, [pc, #868]	; (24cb4 <spi_cmd_complete+0x784>)
   24950:	4798      	blx	r3
   24952:	4bda      	ldr	r3, [pc, #872]	; (24cbc <spi_cmd_complete+0x78c>)
   24954:	0018      	movs	r0, r3
   24956:	4bd7      	ldr	r3, [pc, #860]	; (24cb4 <spi_cmd_complete+0x784>)
   24958:	4798      	blx	r3
		result = N_FAIL;
   2495a:	2300      	movs	r3, #0
   2495c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2495e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24960:	e248      	b.n	24df4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   24962:	2376      	movs	r3, #118	; 0x76
   24964:	18fb      	adds	r3, r7, r3
   24966:	781b      	ldrb	r3, [r3, #0]
   24968:	2276      	movs	r2, #118	; 0x76
   2496a:	18ba      	adds	r2, r7, r2
   2496c:	1c59      	adds	r1, r3, #1
   2496e:	7011      	strb	r1, [r2, #0]
   24970:	001a      	movs	r2, r3
   24972:	2318      	movs	r3, #24
   24974:	18fb      	adds	r3, r7, r3
   24976:	5c9a      	ldrb	r2, [r3, r2]
   24978:	2317      	movs	r3, #23
   2497a:	18fb      	adds	r3, r7, r3
   2497c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   2497e:	2317      	movs	r3, #23
   24980:	18fb      	adds	r3, r7, r3
   24982:	781b      	ldrb	r3, [r3, #0]
   24984:	2b00      	cmp	r3, #0
   24986:	d016      	beq.n	249b6 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   24988:	4acd      	ldr	r2, [pc, #820]	; (24cc0 <spi_cmd_complete+0x790>)
   2498a:	49c8      	ldr	r1, [pc, #800]	; (24cac <spi_cmd_complete+0x77c>)
   2498c:	4bc8      	ldr	r3, [pc, #800]	; (24cb0 <spi_cmd_complete+0x780>)
   2498e:	0018      	movs	r0, r3
   24990:	4bc8      	ldr	r3, [pc, #800]	; (24cb4 <spi_cmd_complete+0x784>)
   24992:	4798      	blx	r3
   24994:	2317      	movs	r3, #23
   24996:	18fb      	adds	r3, r7, r3
   24998:	781b      	ldrb	r3, [r3, #0]
   2499a:	001a      	movs	r2, r3
   2499c:	4bc9      	ldr	r3, [pc, #804]	; (24cc4 <spi_cmd_complete+0x794>)
   2499e:	0011      	movs	r1, r2
   249a0:	0018      	movs	r0, r3
   249a2:	4bc4      	ldr	r3, [pc, #784]	; (24cb4 <spi_cmd_complete+0x784>)
   249a4:	4798      	blx	r3
   249a6:	4bc5      	ldr	r3, [pc, #788]	; (24cbc <spi_cmd_complete+0x78c>)
   249a8:	0018      	movs	r0, r3
   249aa:	4bc2      	ldr	r3, [pc, #776]	; (24cb4 <spi_cmd_complete+0x784>)
   249ac:	4798      	blx	r3
		result = N_FAIL;
   249ae:	2300      	movs	r3, #0
   249b0:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   249b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   249b4:	e21e      	b.n	24df4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   249b6:	230f      	movs	r3, #15
   249b8:	18fb      	adds	r3, r7, r3
   249ba:	781b      	ldrb	r3, [r3, #0]
   249bc:	2bc4      	cmp	r3, #196	; 0xc4
   249be:	d00f      	beq.n	249e0 <spi_cmd_complete+0x4b0>
   249c0:	230f      	movs	r3, #15
   249c2:	18fb      	adds	r3, r7, r3
   249c4:	781b      	ldrb	r3, [r3, #0]
   249c6:	2bca      	cmp	r3, #202	; 0xca
   249c8:	d00a      	beq.n	249e0 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   249ca:	230f      	movs	r3, #15
   249cc:	18fb      	adds	r3, r7, r3
   249ce:	781b      	ldrb	r3, [r3, #0]
   249d0:	2bc2      	cmp	r3, #194	; 0xc2
   249d2:	d005      	beq.n	249e0 <spi_cmd_complete+0x4b0>
   249d4:	230f      	movs	r3, #15
   249d6:	18fb      	adds	r3, r7, r3
   249d8:	781b      	ldrb	r3, [r3, #0]
   249da:	2bc8      	cmp	r3, #200	; 0xc8
   249dc:	d000      	beq.n	249e0 <spi_cmd_complete+0x4b0>
   249de:	e208      	b.n	24df2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   249e0:	230a      	movs	r3, #10
   249e2:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   249e4:	2376      	movs	r3, #118	; 0x76
   249e6:	18fb      	adds	r3, r7, r3
   249e8:	781a      	ldrb	r2, [r3, #0]
   249ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   249ec:	429a      	cmp	r2, r3
   249ee:	d218      	bcs.n	24a22 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   249f0:	2376      	movs	r3, #118	; 0x76
   249f2:	18fb      	adds	r3, r7, r3
   249f4:	781b      	ldrb	r3, [r3, #0]
   249f6:	2276      	movs	r2, #118	; 0x76
   249f8:	18ba      	adds	r2, r7, r2
   249fa:	1c59      	adds	r1, r3, #1
   249fc:	7011      	strb	r1, [r2, #0]
   249fe:	001a      	movs	r2, r3
   24a00:	2318      	movs	r3, #24
   24a02:	18fb      	adds	r3, r7, r3
   24a04:	5c9a      	ldrb	r2, [r3, r2]
   24a06:	2317      	movs	r3, #23
   24a08:	18fb      	adds	r3, r7, r3
   24a0a:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   24a0c:	2317      	movs	r3, #23
   24a0e:	18fb      	adds	r3, r7, r3
   24a10:	781b      	ldrb	r3, [r3, #0]
   24a12:	091b      	lsrs	r3, r3, #4
   24a14:	b2db      	uxtb	r3, r3
   24a16:	001a      	movs	r2, r3
   24a18:	230f      	movs	r3, #15
   24a1a:	4013      	ands	r3, r2
   24a1c:	2b0f      	cmp	r3, #15
   24a1e:	d103      	bne.n	24a28 <spi_cmd_complete+0x4f8>
					break;
   24a20:	e007      	b.n	24a32 <spi_cmd_complete+0x502>
					retry = 0;
   24a22:	2300      	movs	r3, #0
   24a24:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   24a26:	e004      	b.n	24a32 <spi_cmd_complete+0x502>
			} while (retry--);
   24a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24a2a:	1e5a      	subs	r2, r3, #1
   24a2c:	667a      	str	r2, [r7, #100]	; 0x64
   24a2e:	2b00      	cmp	r3, #0
   24a30:	d1d8      	bne.n	249e4 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   24a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24a34:	2b00      	cmp	r3, #0
   24a36:	dc18      	bgt.n	24a6a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   24a38:	2395      	movs	r3, #149	; 0x95
   24a3a:	009a      	lsls	r2, r3, #2
   24a3c:	499b      	ldr	r1, [pc, #620]	; (24cac <spi_cmd_complete+0x77c>)
   24a3e:	4b9c      	ldr	r3, [pc, #624]	; (24cb0 <spi_cmd_complete+0x780>)
   24a40:	0018      	movs	r0, r3
   24a42:	4b9c      	ldr	r3, [pc, #624]	; (24cb4 <spi_cmd_complete+0x784>)
   24a44:	4798      	blx	r3
   24a46:	2317      	movs	r3, #23
   24a48:	18fb      	adds	r3, r7, r3
   24a4a:	781b      	ldrb	r3, [r3, #0]
   24a4c:	001a      	movs	r2, r3
   24a4e:	4b9e      	ldr	r3, [pc, #632]	; (24cc8 <spi_cmd_complete+0x798>)
   24a50:	0011      	movs	r1, r2
   24a52:	0018      	movs	r0, r3
   24a54:	4b97      	ldr	r3, [pc, #604]	; (24cb4 <spi_cmd_complete+0x784>)
   24a56:	4798      	blx	r3
   24a58:	4b98      	ldr	r3, [pc, #608]	; (24cbc <spi_cmd_complete+0x78c>)
   24a5a:	0018      	movs	r0, r3
   24a5c:	4b95      	ldr	r3, [pc, #596]	; (24cb4 <spi_cmd_complete+0x784>)
   24a5e:	4798      	blx	r3
				result = N_RESET;
   24a60:	2301      	movs	r3, #1
   24a62:	425b      	negs	r3, r3
   24a64:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   24a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24a68:	e1c4      	b.n	24df4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24a6a:	230f      	movs	r3, #15
   24a6c:	18fb      	adds	r3, r7, r3
   24a6e:	781b      	ldrb	r3, [r3, #0]
   24a70:	2bc4      	cmp	r3, #196	; 0xc4
   24a72:	d005      	beq.n	24a80 <spi_cmd_complete+0x550>
   24a74:	230f      	movs	r3, #15
   24a76:	18fb      	adds	r3, r7, r3
   24a78:	781b      	ldrb	r3, [r3, #0]
   24a7a:	2bca      	cmp	r3, #202	; 0xca
   24a7c:	d000      	beq.n	24a80 <spi_cmd_complete+0x550>
   24a7e:	e08e      	b.n	24b9e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   24a80:	2376      	movs	r3, #118	; 0x76
   24a82:	18fb      	adds	r3, r7, r3
   24a84:	781b      	ldrb	r3, [r3, #0]
   24a86:	3303      	adds	r3, #3
   24a88:	001a      	movs	r2, r3
   24a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24a8c:	429a      	cmp	r2, r3
   24a8e:	d23c      	bcs.n	24b0a <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   24a90:	2376      	movs	r3, #118	; 0x76
   24a92:	18fb      	adds	r3, r7, r3
   24a94:	781b      	ldrb	r3, [r3, #0]
   24a96:	2276      	movs	r2, #118	; 0x76
   24a98:	18ba      	adds	r2, r7, r2
   24a9a:	1c59      	adds	r1, r3, #1
   24a9c:	7011      	strb	r1, [r2, #0]
   24a9e:	001a      	movs	r2, r3
   24aa0:	2318      	movs	r3, #24
   24aa2:	18fb      	adds	r3, r7, r3
   24aa4:	5c9a      	ldrb	r2, [r3, r2]
   24aa6:	687b      	ldr	r3, [r7, #4]
   24aa8:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   24aaa:	687b      	ldr	r3, [r7, #4]
   24aac:	1c5a      	adds	r2, r3, #1
   24aae:	2376      	movs	r3, #118	; 0x76
   24ab0:	18fb      	adds	r3, r7, r3
   24ab2:	781b      	ldrb	r3, [r3, #0]
   24ab4:	2176      	movs	r1, #118	; 0x76
   24ab6:	1879      	adds	r1, r7, r1
   24ab8:	1c58      	adds	r0, r3, #1
   24aba:	7008      	strb	r0, [r1, #0]
   24abc:	0019      	movs	r1, r3
   24abe:	2318      	movs	r3, #24
   24ac0:	18fb      	adds	r3, r7, r3
   24ac2:	5c5b      	ldrb	r3, [r3, r1]
   24ac4:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   24ac6:	687b      	ldr	r3, [r7, #4]
   24ac8:	1c9a      	adds	r2, r3, #2
   24aca:	2376      	movs	r3, #118	; 0x76
   24acc:	18fb      	adds	r3, r7, r3
   24ace:	781b      	ldrb	r3, [r3, #0]
   24ad0:	2176      	movs	r1, #118	; 0x76
   24ad2:	1879      	adds	r1, r7, r1
   24ad4:	1c58      	adds	r0, r3, #1
   24ad6:	7008      	strb	r0, [r1, #0]
   24ad8:	0019      	movs	r1, r3
   24ada:	2318      	movs	r3, #24
   24adc:	18fb      	adds	r3, r7, r3
   24ade:	5c5b      	ldrb	r3, [r3, r1]
   24ae0:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24ae2:	687b      	ldr	r3, [r7, #4]
   24ae4:	1cda      	adds	r2, r3, #3
   24ae6:	2376      	movs	r3, #118	; 0x76
   24ae8:	18fb      	adds	r3, r7, r3
   24aea:	781b      	ldrb	r3, [r3, #0]
   24aec:	2176      	movs	r1, #118	; 0x76
   24aee:	1879      	adds	r1, r7, r1
   24af0:	1c58      	adds	r0, r3, #1
   24af2:	7008      	strb	r0, [r1, #0]
   24af4:	0019      	movs	r1, r3
   24af6:	2318      	movs	r3, #24
   24af8:	18fb      	adds	r3, r7, r3
   24afa:	5c5b      	ldrb	r3, [r3, r1]
   24afc:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   24afe:	4b73      	ldr	r3, [pc, #460]	; (24ccc <spi_cmd_complete+0x79c>)
   24b00:	781b      	ldrb	r3, [r3, #0]
   24b02:	2b00      	cmp	r3, #0
   24b04:	d000      	beq.n	24b08 <spi_cmd_complete+0x5d8>
   24b06:	e174      	b.n	24df2 <spi_cmd_complete+0x8c2>
   24b08:	e011      	b.n	24b2e <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   24b0a:	4a71      	ldr	r2, [pc, #452]	; (24cd0 <spi_cmd_complete+0x7a0>)
   24b0c:	4967      	ldr	r1, [pc, #412]	; (24cac <spi_cmd_complete+0x77c>)
   24b0e:	4b68      	ldr	r3, [pc, #416]	; (24cb0 <spi_cmd_complete+0x780>)
   24b10:	0018      	movs	r0, r3
   24b12:	4b68      	ldr	r3, [pc, #416]	; (24cb4 <spi_cmd_complete+0x784>)
   24b14:	4798      	blx	r3
   24b16:	4b6f      	ldr	r3, [pc, #444]	; (24cd4 <spi_cmd_complete+0x7a4>)
   24b18:	0018      	movs	r0, r3
   24b1a:	4b66      	ldr	r3, [pc, #408]	; (24cb4 <spi_cmd_complete+0x784>)
   24b1c:	4798      	blx	r3
   24b1e:	4b67      	ldr	r3, [pc, #412]	; (24cbc <spi_cmd_complete+0x78c>)
   24b20:	0018      	movs	r0, r3
   24b22:	4b64      	ldr	r3, [pc, #400]	; (24cb4 <spi_cmd_complete+0x784>)
   24b24:	4798      	blx	r3
					result = N_FAIL;
   24b26:	2300      	movs	r3, #0
   24b28:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   24b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24b2c:	e162      	b.n	24df4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   24b2e:	2376      	movs	r3, #118	; 0x76
   24b30:	18fb      	adds	r3, r7, r3
   24b32:	781b      	ldrb	r3, [r3, #0]
   24b34:	3301      	adds	r3, #1
   24b36:	001a      	movs	r2, r3
   24b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24b3a:	429a      	cmp	r2, r3
   24b3c:	d21c      	bcs.n	24b78 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   24b3e:	2376      	movs	r3, #118	; 0x76
   24b40:	18fb      	adds	r3, r7, r3
   24b42:	781b      	ldrb	r3, [r3, #0]
   24b44:	2276      	movs	r2, #118	; 0x76
   24b46:	18ba      	adds	r2, r7, r2
   24b48:	1c59      	adds	r1, r3, #1
   24b4a:	7011      	strb	r1, [r2, #0]
   24b4c:	001a      	movs	r2, r3
   24b4e:	2318      	movs	r3, #24
   24b50:	18fb      	adds	r3, r7, r3
   24b52:	5c9a      	ldrb	r2, [r3, r2]
   24b54:	2314      	movs	r3, #20
   24b56:	18fb      	adds	r3, r7, r3
   24b58:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   24b5a:	2376      	movs	r3, #118	; 0x76
   24b5c:	18fb      	adds	r3, r7, r3
   24b5e:	781b      	ldrb	r3, [r3, #0]
   24b60:	2276      	movs	r2, #118	; 0x76
   24b62:	18ba      	adds	r2, r7, r2
   24b64:	1c59      	adds	r1, r3, #1
   24b66:	7011      	strb	r1, [r2, #0]
   24b68:	001a      	movs	r2, r3
   24b6a:	2318      	movs	r3, #24
   24b6c:	18fb      	adds	r3, r7, r3
   24b6e:	5c9a      	ldrb	r2, [r3, r2]
   24b70:	2314      	movs	r3, #20
   24b72:	18fb      	adds	r3, r7, r3
   24b74:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   24b76:	e13c      	b.n	24df2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   24b78:	239c      	movs	r3, #156	; 0x9c
   24b7a:	009a      	lsls	r2, r3, #2
   24b7c:	494b      	ldr	r1, [pc, #300]	; (24cac <spi_cmd_complete+0x77c>)
   24b7e:	4b4c      	ldr	r3, [pc, #304]	; (24cb0 <spi_cmd_complete+0x780>)
   24b80:	0018      	movs	r0, r3
   24b82:	4b4c      	ldr	r3, [pc, #304]	; (24cb4 <spi_cmd_complete+0x784>)
   24b84:	4798      	blx	r3
   24b86:	4b54      	ldr	r3, [pc, #336]	; (24cd8 <spi_cmd_complete+0x7a8>)
   24b88:	0018      	movs	r0, r3
   24b8a:	4b4a      	ldr	r3, [pc, #296]	; (24cb4 <spi_cmd_complete+0x784>)
   24b8c:	4798      	blx	r3
   24b8e:	4b4b      	ldr	r3, [pc, #300]	; (24cbc <spi_cmd_complete+0x78c>)
   24b90:	0018      	movs	r0, r3
   24b92:	4b48      	ldr	r3, [pc, #288]	; (24cb4 <spi_cmd_complete+0x784>)
   24b94:	4798      	blx	r3
						result = N_FAIL;
   24b96:	2300      	movs	r3, #0
   24b98:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   24b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24b9c:	e12a      	b.n	24df4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24b9e:	230f      	movs	r3, #15
   24ba0:	18fb      	adds	r3, r7, r3
   24ba2:	781b      	ldrb	r3, [r3, #0]
   24ba4:	2bc2      	cmp	r3, #194	; 0xc2
   24ba6:	d005      	beq.n	24bb4 <spi_cmd_complete+0x684>
   24ba8:	230f      	movs	r3, #15
   24baa:	18fb      	adds	r3, r7, r3
   24bac:	781b      	ldrb	r3, [r3, #0]
   24bae:	2bc8      	cmp	r3, #200	; 0xc8
   24bb0:	d000      	beq.n	24bb4 <spi_cmd_complete+0x684>
   24bb2:	e11e      	b.n	24df2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   24bb4:	2300      	movs	r3, #0
   24bb6:	663b      	str	r3, [r7, #96]	; 0x60
   24bb8:	e011      	b.n	24bde <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   24bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24bbc:	1c5a      	adds	r2, r3, #1
   24bbe:	663a      	str	r2, [r7, #96]	; 0x60
   24bc0:	001a      	movs	r2, r3
   24bc2:	687b      	ldr	r3, [r7, #4]
   24bc4:	189a      	adds	r2, r3, r2
   24bc6:	2376      	movs	r3, #118	; 0x76
   24bc8:	18fb      	adds	r3, r7, r3
   24bca:	781b      	ldrb	r3, [r3, #0]
   24bcc:	2176      	movs	r1, #118	; 0x76
   24bce:	1879      	adds	r1, r7, r1
   24bd0:	1c58      	adds	r0, r3, #1
   24bd2:	7008      	strb	r0, [r1, #0]
   24bd4:	0019      	movs	r1, r3
   24bd6:	2318      	movs	r3, #24
   24bd8:	18fb      	adds	r3, r7, r3
   24bda:	5c5b      	ldrb	r3, [r3, r1]
   24bdc:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   24bde:	2376      	movs	r3, #118	; 0x76
   24be0:	18fb      	adds	r3, r7, r3
   24be2:	781a      	ldrb	r2, [r3, #0]
   24be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24be6:	429a      	cmp	r2, r3
   24be8:	d203      	bcs.n	24bf2 <spi_cmd_complete+0x6c2>
   24bea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24bec:	683b      	ldr	r3, [r7, #0]
   24bee:	429a      	cmp	r2, r3
   24bf0:	d3e3      	bcc.n	24bba <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   24bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24bf4:	683a      	ldr	r2, [r7, #0]
   24bf6:	1ad3      	subs	r3, r2, r3
   24bf8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   24bfa:	683b      	ldr	r3, [r7, #0]
   24bfc:	2b00      	cmp	r3, #0
   24bfe:	d100      	bne.n	24c02 <spi_cmd_complete+0x6d2>
   24c00:	e0f1      	b.n	24de6 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   24c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24c04:	2280      	movs	r2, #128	; 0x80
   24c06:	0192      	lsls	r2, r2, #6
   24c08:	1ad3      	subs	r3, r2, r3
   24c0a:	001a      	movs	r2, r3
   24c0c:	683b      	ldr	r3, [r7, #0]
   24c0e:	429a      	cmp	r2, r3
   24c10:	d302      	bcc.n	24c18 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   24c12:	683b      	ldr	r3, [r7, #0]
   24c14:	65fb      	str	r3, [r7, #92]	; 0x5c
   24c16:	e004      	b.n	24c22 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   24c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24c1a:	2280      	movs	r2, #128	; 0x80
   24c1c:	0192      	lsls	r2, r2, #6
   24c1e:	1ad3      	subs	r3, r2, r3
   24c20:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24c24:	687a      	ldr	r2, [r7, #4]
   24c26:	18d3      	adds	r3, r2, r3
   24c28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   24c2a:	b292      	uxth	r2, r2
   24c2c:	0011      	movs	r1, r2
   24c2e:	0018      	movs	r0, r3
   24c30:	4b2a      	ldr	r3, [pc, #168]	; (24cdc <spi_cmd_complete+0x7ac>)
   24c32:	4798      	blx	r3
   24c34:	1e03      	subs	r3, r0, #0
   24c36:	d010      	beq.n	24c5a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24c38:	4a29      	ldr	r2, [pc, #164]	; (24ce0 <spi_cmd_complete+0x7b0>)
   24c3a:	491c      	ldr	r1, [pc, #112]	; (24cac <spi_cmd_complete+0x77c>)
   24c3c:	4b1c      	ldr	r3, [pc, #112]	; (24cb0 <spi_cmd_complete+0x780>)
   24c3e:	0018      	movs	r0, r3
   24c40:	4b1c      	ldr	r3, [pc, #112]	; (24cb4 <spi_cmd_complete+0x784>)
   24c42:	4798      	blx	r3
   24c44:	4b27      	ldr	r3, [pc, #156]	; (24ce4 <spi_cmd_complete+0x7b4>)
   24c46:	0018      	movs	r0, r3
   24c48:	4b1a      	ldr	r3, [pc, #104]	; (24cb4 <spi_cmd_complete+0x784>)
   24c4a:	4798      	blx	r3
   24c4c:	4b1b      	ldr	r3, [pc, #108]	; (24cbc <spi_cmd_complete+0x78c>)
   24c4e:	0018      	movs	r0, r3
   24c50:	4b18      	ldr	r3, [pc, #96]	; (24cb4 <spi_cmd_complete+0x784>)
   24c52:	4798      	blx	r3
						result = N_FAIL;
   24c54:	2300      	movs	r3, #0
   24c56:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   24c58:	e0cb      	b.n	24df2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24c5a:	4b1c      	ldr	r3, [pc, #112]	; (24ccc <spi_cmd_complete+0x79c>)
   24c5c:	781b      	ldrb	r3, [r3, #0]
   24c5e:	2b00      	cmp	r3, #0
   24c60:	d119      	bne.n	24c96 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24c62:	2314      	movs	r3, #20
   24c64:	18fb      	adds	r3, r7, r3
   24c66:	2102      	movs	r1, #2
   24c68:	0018      	movs	r0, r3
   24c6a:	4b1c      	ldr	r3, [pc, #112]	; (24cdc <spi_cmd_complete+0x7ac>)
   24c6c:	4798      	blx	r3
   24c6e:	1e03      	subs	r3, r0, #0
   24c70:	d011      	beq.n	24c96 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24c72:	23a6      	movs	r3, #166	; 0xa6
   24c74:	009a      	lsls	r2, r3, #2
   24c76:	490d      	ldr	r1, [pc, #52]	; (24cac <spi_cmd_complete+0x77c>)
   24c78:	4b0d      	ldr	r3, [pc, #52]	; (24cb0 <spi_cmd_complete+0x780>)
   24c7a:	0018      	movs	r0, r3
   24c7c:	4b0d      	ldr	r3, [pc, #52]	; (24cb4 <spi_cmd_complete+0x784>)
   24c7e:	4798      	blx	r3
   24c80:	4b19      	ldr	r3, [pc, #100]	; (24ce8 <spi_cmd_complete+0x7b8>)
   24c82:	0018      	movs	r0, r3
   24c84:	4b0b      	ldr	r3, [pc, #44]	; (24cb4 <spi_cmd_complete+0x784>)
   24c86:	4798      	blx	r3
   24c88:	4b0c      	ldr	r3, [pc, #48]	; (24cbc <spi_cmd_complete+0x78c>)
   24c8a:	0018      	movs	r0, r3
   24c8c:	4b09      	ldr	r3, [pc, #36]	; (24cb4 <spi_cmd_complete+0x784>)
   24c8e:	4798      	blx	r3
							result = N_FAIL;
   24c90:	2300      	movs	r3, #0
   24c92:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   24c94:	e0ad      	b.n	24df2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   24c96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24c9a:	18d3      	adds	r3, r2, r3
   24c9c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24ca0:	683a      	ldr	r2, [r7, #0]
   24ca2:	1ad3      	subs	r3, r2, r3
   24ca4:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   24ca6:	e09e      	b.n	24de6 <spi_cmd_complete+0x8b6>
   24ca8:	0000022f 	.word	0x0000022f
   24cac:	00039ed4 	.word	0x00039ed4
   24cb0:	000398c0 	.word	0x000398c0
   24cb4:	0001ea1d 	.word	0x0001ea1d
   24cb8:	000399b8 	.word	0x000399b8
   24cbc:	00039900 	.word	0x00039900
   24cc0:	00000239 	.word	0x00000239
   24cc4:	000399f4 	.word	0x000399f4
   24cc8:	00039a28 	.word	0x00039a28
   24ccc:	20003ee8 	.word	0x20003ee8
   24cd0:	00000263 	.word	0x00000263
   24cd4:	00039a58 	.word	0x00039a58
   24cd8:	00039a88 	.word	0x00039a88
   24cdc:	00023e69 	.word	0x00023e69
   24ce0:	0000028e 	.word	0x0000028e
   24ce4:	00039ab8 	.word	0x00039ab8
   24ce8:	00039aec 	.word	0x00039aec
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   24cec:	683a      	ldr	r2, [r7, #0]
   24cee:	2380      	movs	r3, #128	; 0x80
   24cf0:	019b      	lsls	r3, r3, #6
   24cf2:	429a      	cmp	r2, r3
   24cf4:	d802      	bhi.n	24cfc <spi_cmd_complete+0x7cc>
						nbytes = sz;
   24cf6:	683b      	ldr	r3, [r7, #0]
   24cf8:	65bb      	str	r3, [r7, #88]	; 0x58
   24cfa:	e002      	b.n	24d02 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   24cfc:	2380      	movs	r3, #128	; 0x80
   24cfe:	019b      	lsls	r3, r3, #6
   24d00:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   24d02:	230a      	movs	r3, #10
   24d04:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   24d06:	2317      	movs	r3, #23
   24d08:	18fb      	adds	r3, r7, r3
   24d0a:	2101      	movs	r1, #1
   24d0c:	0018      	movs	r0, r3
   24d0e:	4b3b      	ldr	r3, [pc, #236]	; (24dfc <spi_cmd_complete+0x8cc>)
   24d10:	4798      	blx	r3
   24d12:	1e03      	subs	r3, r0, #0
   24d14:	d011      	beq.n	24d3a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   24d16:	23ae      	movs	r3, #174	; 0xae
   24d18:	009a      	lsls	r2, r3, #2
   24d1a:	4939      	ldr	r1, [pc, #228]	; (24e00 <spi_cmd_complete+0x8d0>)
   24d1c:	4b39      	ldr	r3, [pc, #228]	; (24e04 <spi_cmd_complete+0x8d4>)
   24d1e:	0018      	movs	r0, r3
   24d20:	4b39      	ldr	r3, [pc, #228]	; (24e08 <spi_cmd_complete+0x8d8>)
   24d22:	4798      	blx	r3
   24d24:	4b39      	ldr	r3, [pc, #228]	; (24e0c <spi_cmd_complete+0x8dc>)
   24d26:	0018      	movs	r0, r3
   24d28:	4b37      	ldr	r3, [pc, #220]	; (24e08 <spi_cmd_complete+0x8d8>)
   24d2a:	4798      	blx	r3
   24d2c:	4b38      	ldr	r3, [pc, #224]	; (24e10 <spi_cmd_complete+0x8e0>)
   24d2e:	0018      	movs	r0, r3
   24d30:	4b35      	ldr	r3, [pc, #212]	; (24e08 <spi_cmd_complete+0x8d8>)
   24d32:	4798      	blx	r3
							result = N_FAIL;
   24d34:	2300      	movs	r3, #0
   24d36:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24d38:	e010      	b.n	24d5c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   24d3a:	2317      	movs	r3, #23
   24d3c:	18fb      	adds	r3, r7, r3
   24d3e:	781b      	ldrb	r3, [r3, #0]
   24d40:	091b      	lsrs	r3, r3, #4
   24d42:	b2db      	uxtb	r3, r3
   24d44:	001a      	movs	r2, r3
   24d46:	230f      	movs	r3, #15
   24d48:	4013      	ands	r3, r2
   24d4a:	2b0f      	cmp	r3, #15
   24d4c:	d005      	beq.n	24d5a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   24d4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24d50:	1e5a      	subs	r2, r3, #1
   24d52:	667a      	str	r2, [r7, #100]	; 0x64
   24d54:	2b00      	cmp	r3, #0
   24d56:	d1d6      	bne.n	24d06 <spi_cmd_complete+0x7d6>
   24d58:	e000      	b.n	24d5c <spi_cmd_complete+0x82c>
							break;
   24d5a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   24d5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24d5e:	2b00      	cmp	r3, #0
   24d60:	d046      	beq.n	24df0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24d64:	687a      	ldr	r2, [r7, #4]
   24d66:	18d3      	adds	r3, r2, r3
   24d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
   24d6a:	b292      	uxth	r2, r2
   24d6c:	0011      	movs	r1, r2
   24d6e:	0018      	movs	r0, r3
   24d70:	4b22      	ldr	r3, [pc, #136]	; (24dfc <spi_cmd_complete+0x8cc>)
   24d72:	4798      	blx	r3
   24d74:	1e03      	subs	r3, r0, #0
   24d76:	d011      	beq.n	24d9c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24d78:	23b2      	movs	r3, #178	; 0xb2
   24d7a:	009a      	lsls	r2, r3, #2
   24d7c:	4920      	ldr	r1, [pc, #128]	; (24e00 <spi_cmd_complete+0x8d0>)
   24d7e:	4b21      	ldr	r3, [pc, #132]	; (24e04 <spi_cmd_complete+0x8d4>)
   24d80:	0018      	movs	r0, r3
   24d82:	4b21      	ldr	r3, [pc, #132]	; (24e08 <spi_cmd_complete+0x8d8>)
   24d84:	4798      	blx	r3
   24d86:	4b23      	ldr	r3, [pc, #140]	; (24e14 <spi_cmd_complete+0x8e4>)
   24d88:	0018      	movs	r0, r3
   24d8a:	4b1f      	ldr	r3, [pc, #124]	; (24e08 <spi_cmd_complete+0x8d8>)
   24d8c:	4798      	blx	r3
   24d8e:	4b20      	ldr	r3, [pc, #128]	; (24e10 <spi_cmd_complete+0x8e0>)
   24d90:	0018      	movs	r0, r3
   24d92:	4b1d      	ldr	r3, [pc, #116]	; (24e08 <spi_cmd_complete+0x8d8>)
   24d94:	4798      	blx	r3
						result = N_FAIL;
   24d96:	2300      	movs	r3, #0
   24d98:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   24d9a:	e02a      	b.n	24df2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24d9c:	4b1e      	ldr	r3, [pc, #120]	; (24e18 <spi_cmd_complete+0x8e8>)
   24d9e:	781b      	ldrb	r3, [r3, #0]
   24da0:	2b00      	cmp	r3, #0
   24da2:	d118      	bne.n	24dd6 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24da4:	2314      	movs	r3, #20
   24da6:	18fb      	adds	r3, r7, r3
   24da8:	2102      	movs	r1, #2
   24daa:	0018      	movs	r0, r3
   24dac:	4b13      	ldr	r3, [pc, #76]	; (24dfc <spi_cmd_complete+0x8cc>)
   24dae:	4798      	blx	r3
   24db0:	1e03      	subs	r3, r0, #0
   24db2:	d010      	beq.n	24dd6 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24db4:	4a19      	ldr	r2, [pc, #100]	; (24e1c <spi_cmd_complete+0x8ec>)
   24db6:	4912      	ldr	r1, [pc, #72]	; (24e00 <spi_cmd_complete+0x8d0>)
   24db8:	4b12      	ldr	r3, [pc, #72]	; (24e04 <spi_cmd_complete+0x8d4>)
   24dba:	0018      	movs	r0, r3
   24dbc:	4b12      	ldr	r3, [pc, #72]	; (24e08 <spi_cmd_complete+0x8d8>)
   24dbe:	4798      	blx	r3
   24dc0:	4b17      	ldr	r3, [pc, #92]	; (24e20 <spi_cmd_complete+0x8f0>)
   24dc2:	0018      	movs	r0, r3
   24dc4:	4b10      	ldr	r3, [pc, #64]	; (24e08 <spi_cmd_complete+0x8d8>)
   24dc6:	4798      	blx	r3
   24dc8:	4b11      	ldr	r3, [pc, #68]	; (24e10 <spi_cmd_complete+0x8e0>)
   24dca:	0018      	movs	r0, r3
   24dcc:	4b0e      	ldr	r3, [pc, #56]	; (24e08 <spi_cmd_complete+0x8d8>)
   24dce:	4798      	blx	r3
							result = N_FAIL;
   24dd0:	2300      	movs	r3, #0
   24dd2:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24dd4:	e00d      	b.n	24df2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   24dd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24dd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24dda:	18d3      	adds	r3, r2, r3
   24ddc:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24de0:	683a      	ldr	r2, [r7, #0]
   24de2:	1ad3      	subs	r3, r2, r3
   24de4:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   24de6:	683b      	ldr	r3, [r7, #0]
   24de8:	2b00      	cmp	r3, #0
   24dea:	d000      	beq.n	24dee <spi_cmd_complete+0x8be>
   24dec:	e77e      	b.n	24cec <spi_cmd_complete+0x7bc>
   24dee:	e000      	b.n	24df2 <spi_cmd_complete+0x8c2>
						break;
   24df0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   24df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   24df4:	0018      	movs	r0, r3
   24df6:	46bd      	mov	sp, r7
   24df8:	b01f      	add	sp, #124	; 0x7c
   24dfa:	bd90      	pop	{r4, r7, pc}
   24dfc:	00023e69 	.word	0x00023e69
   24e00:	00039ed4 	.word	0x00039ed4
   24e04:	000398c0 	.word	0x000398c0
   24e08:	0001ea1d 	.word	0x0001ea1d
   24e0c:	00039b24 	.word	0x00039b24
   24e10:	00039900 	.word	0x00039900
   24e14:	00039ab8 	.word	0x00039ab8
   24e18:	20003ee8 	.word	0x20003ee8
   24e1c:	000002d2 	.word	0x000002d2
   24e20:	00039aec 	.word	0x00039aec

00024e24 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   24e24:	b580      	push	{r7, lr}
   24e26:	b086      	sub	sp, #24
   24e28:	af00      	add	r7, sp, #0
   24e2a:	6078      	str	r0, [r7, #4]
   24e2c:	000a      	movs	r2, r1
   24e2e:	1cbb      	adds	r3, r7, #2
   24e30:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   24e32:	2313      	movs	r3, #19
   24e34:	18fb      	adds	r3, r7, r3
   24e36:	2201      	movs	r2, #1
   24e38:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   24e3a:	230c      	movs	r3, #12
   24e3c:	18fb      	adds	r3, r7, r3
   24e3e:	2200      	movs	r2, #0
   24e40:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   24e42:	2316      	movs	r3, #22
   24e44:	18fb      	adds	r3, r7, r3
   24e46:	2200      	movs	r2, #0
   24e48:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   24e4a:	1cbb      	adds	r3, r7, #2
   24e4c:	881a      	ldrh	r2, [r3, #0]
   24e4e:	2380      	movs	r3, #128	; 0x80
   24e50:	019b      	lsls	r3, r3, #6
   24e52:	429a      	cmp	r2, r3
   24e54:	d805      	bhi.n	24e62 <spi_data_write+0x3e>
			nbytes = sz;
   24e56:	2314      	movs	r3, #20
   24e58:	18fb      	adds	r3, r7, r3
   24e5a:	1cba      	adds	r2, r7, #2
   24e5c:	8812      	ldrh	r2, [r2, #0]
   24e5e:	801a      	strh	r2, [r3, #0]
   24e60:	e004      	b.n	24e6c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   24e62:	2314      	movs	r3, #20
   24e64:	18fb      	adds	r3, r7, r3
   24e66:	2280      	movs	r2, #128	; 0x80
   24e68:	0192      	lsls	r2, r2, #6
   24e6a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   24e6c:	2311      	movs	r3, #17
   24e6e:	18fb      	adds	r3, r7, r3
   24e70:	22f0      	movs	r2, #240	; 0xf0
   24e72:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   24e74:	2316      	movs	r3, #22
   24e76:	18fb      	adds	r3, r7, r3
   24e78:	2200      	movs	r2, #0
   24e7a:	5e9b      	ldrsh	r3, [r3, r2]
   24e7c:	2b00      	cmp	r3, #0
   24e7e:	d10f      	bne.n	24ea0 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   24e80:	1cbb      	adds	r3, r7, #2
   24e82:	881a      	ldrh	r2, [r3, #0]
   24e84:	2380      	movs	r3, #128	; 0x80
   24e86:	019b      	lsls	r3, r3, #6
   24e88:	429a      	cmp	r2, r3
   24e8a:	d804      	bhi.n	24e96 <spi_data_write+0x72>
				order = 0x3;
   24e8c:	2312      	movs	r3, #18
   24e8e:	18fb      	adds	r3, r7, r3
   24e90:	2203      	movs	r2, #3
   24e92:	701a      	strb	r2, [r3, #0]
   24e94:	e013      	b.n	24ebe <spi_data_write+0x9a>
			else
				order = 0x1;
   24e96:	2312      	movs	r3, #18
   24e98:	18fb      	adds	r3, r7, r3
   24e9a:	2201      	movs	r2, #1
   24e9c:	701a      	strb	r2, [r3, #0]
   24e9e:	e00e      	b.n	24ebe <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   24ea0:	1cbb      	adds	r3, r7, #2
   24ea2:	881a      	ldrh	r2, [r3, #0]
   24ea4:	2380      	movs	r3, #128	; 0x80
   24ea6:	019b      	lsls	r3, r3, #6
   24ea8:	429a      	cmp	r2, r3
   24eaa:	d804      	bhi.n	24eb6 <spi_data_write+0x92>
				order = 0x3;
   24eac:	2312      	movs	r3, #18
   24eae:	18fb      	adds	r3, r7, r3
   24eb0:	2203      	movs	r2, #3
   24eb2:	701a      	strb	r2, [r3, #0]
   24eb4:	e003      	b.n	24ebe <spi_data_write+0x9a>
			else
				order = 0x2;
   24eb6:	2312      	movs	r3, #18
   24eb8:	18fb      	adds	r3, r7, r3
   24eba:	2202      	movs	r2, #2
   24ebc:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   24ebe:	2311      	movs	r3, #17
   24ec0:	18fb      	adds	r3, r7, r3
   24ec2:	781a      	ldrb	r2, [r3, #0]
   24ec4:	2312      	movs	r3, #18
   24ec6:	18fb      	adds	r3, r7, r3
   24ec8:	781b      	ldrb	r3, [r3, #0]
   24eca:	4313      	orrs	r3, r2
   24ecc:	b2da      	uxtb	r2, r3
   24ece:	2311      	movs	r3, #17
   24ed0:	18fb      	adds	r3, r7, r3
   24ed2:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24ed4:	2311      	movs	r3, #17
   24ed6:	18fb      	adds	r3, r7, r3
   24ed8:	2101      	movs	r1, #1
   24eda:	0018      	movs	r0, r3
   24edc:	4b3c      	ldr	r3, [pc, #240]	; (24fd0 <spi_data_write+0x1ac>)
   24ede:	4798      	blx	r3
   24ee0:	1e03      	subs	r3, r0, #0
   24ee2:	d012      	beq.n	24f0a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   24ee4:	4a3b      	ldr	r2, [pc, #236]	; (24fd4 <spi_data_write+0x1b0>)
   24ee6:	493c      	ldr	r1, [pc, #240]	; (24fd8 <spi_data_write+0x1b4>)
   24ee8:	4b3c      	ldr	r3, [pc, #240]	; (24fdc <spi_data_write+0x1b8>)
   24eea:	0018      	movs	r0, r3
   24eec:	4b3c      	ldr	r3, [pc, #240]	; (24fe0 <spi_data_write+0x1bc>)
   24eee:	4798      	blx	r3
   24ef0:	4b3c      	ldr	r3, [pc, #240]	; (24fe4 <spi_data_write+0x1c0>)
   24ef2:	0018      	movs	r0, r3
   24ef4:	4b3a      	ldr	r3, [pc, #232]	; (24fe0 <spi_data_write+0x1bc>)
   24ef6:	4798      	blx	r3
   24ef8:	4b3b      	ldr	r3, [pc, #236]	; (24fe8 <spi_data_write+0x1c4>)
   24efa:	0018      	movs	r0, r3
   24efc:	4b38      	ldr	r3, [pc, #224]	; (24fe0 <spi_data_write+0x1bc>)
   24efe:	4798      	blx	r3
			result = N_FAIL;
   24f00:	2313      	movs	r3, #19
   24f02:	18fb      	adds	r3, r7, r3
   24f04:	2200      	movs	r2, #0
   24f06:	701a      	strb	r2, [r3, #0]
			break;
   24f08:	e059      	b.n	24fbe <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   24f0a:	2316      	movs	r3, #22
   24f0c:	18fb      	adds	r3, r7, r3
   24f0e:	2200      	movs	r2, #0
   24f10:	5e9b      	ldrsh	r3, [r3, r2]
   24f12:	687a      	ldr	r2, [r7, #4]
   24f14:	18d2      	adds	r2, r2, r3
   24f16:	2314      	movs	r3, #20
   24f18:	18fb      	adds	r3, r7, r3
   24f1a:	881b      	ldrh	r3, [r3, #0]
   24f1c:	0019      	movs	r1, r3
   24f1e:	0010      	movs	r0, r2
   24f20:	4b2b      	ldr	r3, [pc, #172]	; (24fd0 <spi_data_write+0x1ac>)
   24f22:	4798      	blx	r3
   24f24:	1e03      	subs	r3, r0, #0
   24f26:	d012      	beq.n	24f4e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   24f28:	4a30      	ldr	r2, [pc, #192]	; (24fec <spi_data_write+0x1c8>)
   24f2a:	492b      	ldr	r1, [pc, #172]	; (24fd8 <spi_data_write+0x1b4>)
   24f2c:	4b2b      	ldr	r3, [pc, #172]	; (24fdc <spi_data_write+0x1b8>)
   24f2e:	0018      	movs	r0, r3
   24f30:	4b2b      	ldr	r3, [pc, #172]	; (24fe0 <spi_data_write+0x1bc>)
   24f32:	4798      	blx	r3
   24f34:	4b2e      	ldr	r3, [pc, #184]	; (24ff0 <spi_data_write+0x1cc>)
   24f36:	0018      	movs	r0, r3
   24f38:	4b29      	ldr	r3, [pc, #164]	; (24fe0 <spi_data_write+0x1bc>)
   24f3a:	4798      	blx	r3
   24f3c:	4b2a      	ldr	r3, [pc, #168]	; (24fe8 <spi_data_write+0x1c4>)
   24f3e:	0018      	movs	r0, r3
   24f40:	4b27      	ldr	r3, [pc, #156]	; (24fe0 <spi_data_write+0x1bc>)
   24f42:	4798      	blx	r3
			result = N_FAIL;
   24f44:	2313      	movs	r3, #19
   24f46:	18fb      	adds	r3, r7, r3
   24f48:	2200      	movs	r2, #0
   24f4a:	701a      	strb	r2, [r3, #0]
			break;
   24f4c:	e037      	b.n	24fbe <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   24f4e:	4b29      	ldr	r3, [pc, #164]	; (24ff4 <spi_data_write+0x1d0>)
   24f50:	781b      	ldrb	r3, [r3, #0]
   24f52:	2b00      	cmp	r3, #0
   24f54:	d11b      	bne.n	24f8e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   24f56:	230c      	movs	r3, #12
   24f58:	18fb      	adds	r3, r7, r3
   24f5a:	2102      	movs	r1, #2
   24f5c:	0018      	movs	r0, r3
   24f5e:	4b1c      	ldr	r3, [pc, #112]	; (24fd0 <spi_data_write+0x1ac>)
   24f60:	4798      	blx	r3
   24f62:	1e03      	subs	r3, r0, #0
   24f64:	d013      	beq.n	24f8e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   24f66:	23d7      	movs	r3, #215	; 0xd7
   24f68:	009a      	lsls	r2, r3, #2
   24f6a:	491b      	ldr	r1, [pc, #108]	; (24fd8 <spi_data_write+0x1b4>)
   24f6c:	4b1b      	ldr	r3, [pc, #108]	; (24fdc <spi_data_write+0x1b8>)
   24f6e:	0018      	movs	r0, r3
   24f70:	4b1b      	ldr	r3, [pc, #108]	; (24fe0 <spi_data_write+0x1bc>)
   24f72:	4798      	blx	r3
   24f74:	4b20      	ldr	r3, [pc, #128]	; (24ff8 <spi_data_write+0x1d4>)
   24f76:	0018      	movs	r0, r3
   24f78:	4b19      	ldr	r3, [pc, #100]	; (24fe0 <spi_data_write+0x1bc>)
   24f7a:	4798      	blx	r3
   24f7c:	4b1a      	ldr	r3, [pc, #104]	; (24fe8 <spi_data_write+0x1c4>)
   24f7e:	0018      	movs	r0, r3
   24f80:	4b17      	ldr	r3, [pc, #92]	; (24fe0 <spi_data_write+0x1bc>)
   24f82:	4798      	blx	r3
				result = N_FAIL;
   24f84:	2313      	movs	r3, #19
   24f86:	18fb      	adds	r3, r7, r3
   24f88:	2200      	movs	r2, #0
   24f8a:	701a      	strb	r2, [r3, #0]
				break;
   24f8c:	e017      	b.n	24fbe <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   24f8e:	2316      	movs	r3, #22
   24f90:	18fb      	adds	r3, r7, r3
   24f92:	881a      	ldrh	r2, [r3, #0]
   24f94:	2314      	movs	r3, #20
   24f96:	18fb      	adds	r3, r7, r3
   24f98:	881b      	ldrh	r3, [r3, #0]
   24f9a:	18d3      	adds	r3, r2, r3
   24f9c:	b29a      	uxth	r2, r3
   24f9e:	2316      	movs	r3, #22
   24fa0:	18fb      	adds	r3, r7, r3
   24fa2:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   24fa4:	1cbb      	adds	r3, r7, #2
   24fa6:	1cb9      	adds	r1, r7, #2
   24fa8:	2214      	movs	r2, #20
   24faa:	18ba      	adds	r2, r7, r2
   24fac:	8809      	ldrh	r1, [r1, #0]
   24fae:	8812      	ldrh	r2, [r2, #0]
   24fb0:	1a8a      	subs	r2, r1, r2
   24fb2:	801a      	strh	r2, [r3, #0]
	} while (sz);
   24fb4:	1cbb      	adds	r3, r7, #2
   24fb6:	881b      	ldrh	r3, [r3, #0]
   24fb8:	2b00      	cmp	r3, #0
   24fba:	d000      	beq.n	24fbe <spi_data_write+0x19a>
   24fbc:	e745      	b.n	24e4a <spi_data_write+0x26>


	return result;
   24fbe:	2313      	movs	r3, #19
   24fc0:	18fb      	adds	r3, r7, r3
   24fc2:	781b      	ldrb	r3, [r3, #0]
   24fc4:	b25b      	sxtb	r3, r3
}
   24fc6:	0018      	movs	r0, r3
   24fc8:	46bd      	mov	sp, r7
   24fca:	b006      	add	sp, #24
   24fcc:	bd80      	pop	{r7, pc}
   24fce:	46c0      	nop			; (mov r8, r8)
   24fd0:	00023ead 	.word	0x00023ead
   24fd4:	00000349 	.word	0x00000349
   24fd8:	00039ee8 	.word	0x00039ee8
   24fdc:	000398c0 	.word	0x000398c0
   24fe0:	0001ea1d 	.word	0x0001ea1d
   24fe4:	00039b88 	.word	0x00039b88
   24fe8:	00039900 	.word	0x00039900
   24fec:	00000352 	.word	0x00000352
   24ff0:	00039bc0 	.word	0x00039bc0
   24ff4:	20003ee8 	.word	0x20003ee8
   24ff8:	00039bf4 	.word	0x00039bf4

00024ffc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   24ffc:	b590      	push	{r4, r7, lr}
   24ffe:	b087      	sub	sp, #28
   25000:	af02      	add	r7, sp, #8
   25002:	6078      	str	r0, [r7, #4]
   25004:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   25006:	230f      	movs	r3, #15
   25008:	18fb      	adds	r3, r7, r3
   2500a:	220a      	movs	r2, #10
   2500c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2500e:	230c      	movs	r3, #12
   25010:	18fb      	adds	r3, r7, r3
   25012:	2201      	movs	r2, #1
   25014:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   25016:	230e      	movs	r3, #14
   25018:	18fb      	adds	r3, r7, r3
   2501a:	22c9      	movs	r2, #201	; 0xc9
   2501c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   2501e:	230d      	movs	r3, #13
   25020:	18fb      	adds	r3, r7, r3
   25022:	2200      	movs	r2, #0
   25024:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   25026:	687b      	ldr	r3, [r7, #4]
   25028:	2b30      	cmp	r3, #48	; 0x30
   2502a:	d808      	bhi.n	2503e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   2502c:	230e      	movs	r3, #14
   2502e:	18fb      	adds	r3, r7, r3
   25030:	22c3      	movs	r2, #195	; 0xc3
   25032:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   25034:	230d      	movs	r3, #13
   25036:	18fb      	adds	r3, r7, r3
   25038:	2201      	movs	r2, #1
   2503a:	701a      	strb	r2, [r3, #0]
   2503c:	e007      	b.n	2504e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   2503e:	230e      	movs	r3, #14
   25040:	18fb      	adds	r3, r7, r3
   25042:	22c9      	movs	r2, #201	; 0xc9
   25044:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   25046:	230d      	movs	r3, #13
   25048:	18fb      	adds	r3, r7, r3
   2504a:	2200      	movs	r2, #0
   2504c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2504e:	003a      	movs	r2, r7
   25050:	6879      	ldr	r1, [r7, #4]
   25052:	230e      	movs	r3, #14
   25054:	18fb      	adds	r3, r7, r3
   25056:	7818      	ldrb	r0, [r3, #0]
   25058:	230d      	movs	r3, #13
   2505a:	18fb      	adds	r3, r7, r3
   2505c:	781b      	ldrb	r3, [r3, #0]
   2505e:	9300      	str	r3, [sp, #0]
   25060:	2304      	movs	r3, #4
   25062:	4c2e      	ldr	r4, [pc, #184]	; (2511c <spi_write_reg+0x120>)
   25064:	47a0      	blx	r4
   25066:	0002      	movs	r2, r0
   25068:	230c      	movs	r3, #12
   2506a:	18fb      	adds	r3, r7, r3
   2506c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2506e:	230c      	movs	r3, #12
   25070:	18fb      	adds	r3, r7, r3
   25072:	781b      	ldrb	r3, [r3, #0]
   25074:	b25b      	sxtb	r3, r3
   25076:	2b01      	cmp	r3, #1
   25078:	d010      	beq.n	2509c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   2507a:	4a29      	ldr	r2, [pc, #164]	; (25120 <spi_write_reg+0x124>)
   2507c:	4929      	ldr	r1, [pc, #164]	; (25124 <spi_write_reg+0x128>)
   2507e:	4b2a      	ldr	r3, [pc, #168]	; (25128 <spi_write_reg+0x12c>)
   25080:	0018      	movs	r0, r3
   25082:	4b2a      	ldr	r3, [pc, #168]	; (2512c <spi_write_reg+0x130>)
   25084:	4798      	blx	r3
   25086:	687a      	ldr	r2, [r7, #4]
   25088:	4b29      	ldr	r3, [pc, #164]	; (25130 <spi_write_reg+0x134>)
   2508a:	0011      	movs	r1, r2
   2508c:	0018      	movs	r0, r3
   2508e:	4b27      	ldr	r3, [pc, #156]	; (2512c <spi_write_reg+0x130>)
   25090:	4798      	blx	r3
   25092:	4b28      	ldr	r3, [pc, #160]	; (25134 <spi_write_reg+0x138>)
   25094:	0018      	movs	r0, r3
   25096:	4b25      	ldr	r3, [pc, #148]	; (2512c <spi_write_reg+0x130>)
   25098:	4798      	blx	r3
		goto _FAIL_;
   2509a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   2509c:	230c      	movs	r3, #12
   2509e:	18fb      	adds	r3, r7, r3
   250a0:	781b      	ldrb	r3, [r3, #0]
   250a2:	b25b      	sxtb	r3, r3
   250a4:	2b01      	cmp	r3, #1
   250a6:	d030      	beq.n	2510a <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   250a8:	2001      	movs	r0, #1
   250aa:	4b23      	ldr	r3, [pc, #140]	; (25138 <spi_write_reg+0x13c>)
   250ac:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   250ae:	2300      	movs	r3, #0
   250b0:	9300      	str	r3, [sp, #0]
   250b2:	2300      	movs	r3, #0
   250b4:	2200      	movs	r2, #0
   250b6:	2100      	movs	r1, #0
   250b8:	20cf      	movs	r0, #207	; 0xcf
   250ba:	4c20      	ldr	r4, [pc, #128]	; (2513c <spi_write_reg+0x140>)
   250bc:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   250be:	20cf      	movs	r0, #207	; 0xcf
   250c0:	4b1f      	ldr	r3, [pc, #124]	; (25140 <spi_write_reg+0x144>)
   250c2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   250c4:	23ea      	movs	r3, #234	; 0xea
   250c6:	009a      	lsls	r2, r3, #2
   250c8:	4916      	ldr	r1, [pc, #88]	; (25124 <spi_write_reg+0x128>)
   250ca:	4b17      	ldr	r3, [pc, #92]	; (25128 <spi_write_reg+0x12c>)
   250cc:	0018      	movs	r0, r3
   250ce:	4b17      	ldr	r3, [pc, #92]	; (2512c <spi_write_reg+0x130>)
   250d0:	4798      	blx	r3
   250d2:	230f      	movs	r3, #15
   250d4:	18fb      	adds	r3, r7, r3
   250d6:	7819      	ldrb	r1, [r3, #0]
   250d8:	683b      	ldr	r3, [r7, #0]
   250da:	687a      	ldr	r2, [r7, #4]
   250dc:	4819      	ldr	r0, [pc, #100]	; (25144 <spi_write_reg+0x148>)
   250de:	4c13      	ldr	r4, [pc, #76]	; (2512c <spi_write_reg+0x130>)
   250e0:	47a0      	blx	r4
   250e2:	4b14      	ldr	r3, [pc, #80]	; (25134 <spi_write_reg+0x138>)
   250e4:	0018      	movs	r0, r3
   250e6:	4b11      	ldr	r3, [pc, #68]	; (2512c <spi_write_reg+0x130>)
   250e8:	4798      	blx	r3
		nm_bsp_sleep(1);
   250ea:	2001      	movs	r0, #1
   250ec:	4b12      	ldr	r3, [pc, #72]	; (25138 <spi_write_reg+0x13c>)
   250ee:	4798      	blx	r3
		retry--;
   250f0:	230f      	movs	r3, #15
   250f2:	18fb      	adds	r3, r7, r3
   250f4:	781a      	ldrb	r2, [r3, #0]
   250f6:	230f      	movs	r3, #15
   250f8:	18fb      	adds	r3, r7, r3
   250fa:	3a01      	subs	r2, #1
   250fc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   250fe:	230f      	movs	r3, #15
   25100:	18fb      	adds	r3, r7, r3
   25102:	781b      	ldrb	r3, [r3, #0]
   25104:	2b00      	cmp	r3, #0
   25106:	d000      	beq.n	2510a <spi_write_reg+0x10e>
   25108:	e78d      	b.n	25026 <spi_write_reg+0x2a>
	}

	return result;
   2510a:	230c      	movs	r3, #12
   2510c:	18fb      	adds	r3, r7, r3
   2510e:	781b      	ldrb	r3, [r3, #0]
   25110:	b25b      	sxtb	r3, r3
}
   25112:	0018      	movs	r0, r3
   25114:	46bd      	mov	sp, r7
   25116:	b005      	add	sp, #20
   25118:	bd90      	pop	{r4, r7, pc}
   2511a:	46c0      	nop			; (mov r8, r8)
   2511c:	00024531 	.word	0x00024531
   25120:	0000039d 	.word	0x0000039d
   25124:	00039ef8 	.word	0x00039ef8
   25128:	000398c0 	.word	0x000398c0
   2512c:	0001ea1d 	.word	0x0001ea1d
   25130:	00039c2c 	.word	0x00039c2c
   25134:	00039900 	.word	0x00039900
   25138:	00020e71 	.word	0x00020e71
   2513c:	00023fb5 	.word	0x00023fb5
   25140:	000243f5 	.word	0x000243f5
   25144:	00039c58 	.word	0x00039c58

00025148 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   25148:	b590      	push	{r4, r7, lr}
   2514a:	b089      	sub	sp, #36	; 0x24
   2514c:	af02      	add	r7, sp, #8
   2514e:	60f8      	str	r0, [r7, #12]
   25150:	60b9      	str	r1, [r7, #8]
   25152:	1dbb      	adds	r3, r7, #6
   25154:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   25156:	2316      	movs	r3, #22
   25158:	18fb      	adds	r3, r7, r3
   2515a:	220a      	movs	r2, #10
   2515c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2515e:	2315      	movs	r3, #21
   25160:	18fb      	adds	r3, r7, r3
   25162:	22c7      	movs	r2, #199	; 0xc7
   25164:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   25166:	1dbb      	adds	r3, r7, #6
   25168:	881a      	ldrh	r2, [r3, #0]
   2516a:	68f9      	ldr	r1, [r7, #12]
   2516c:	2315      	movs	r3, #21
   2516e:	18fb      	adds	r3, r7, r3
   25170:	7818      	ldrb	r0, [r3, #0]
   25172:	2300      	movs	r3, #0
   25174:	9300      	str	r3, [sp, #0]
   25176:	0013      	movs	r3, r2
   25178:	2200      	movs	r2, #0
   2517a:	4c4d      	ldr	r4, [pc, #308]	; (252b0 <nm_spi_write+0x168>)
   2517c:	47a0      	blx	r4
   2517e:	0002      	movs	r2, r0
   25180:	2317      	movs	r3, #23
   25182:	18fb      	adds	r3, r7, r3
   25184:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   25186:	2317      	movs	r3, #23
   25188:	18fb      	adds	r3, r7, r3
   2518a:	781b      	ldrb	r3, [r3, #0]
   2518c:	b25b      	sxtb	r3, r3
   2518e:	2b01      	cmp	r3, #1
   25190:	d010      	beq.n	251b4 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   25192:	4a48      	ldr	r2, [pc, #288]	; (252b4 <nm_spi_write+0x16c>)
   25194:	4948      	ldr	r1, [pc, #288]	; (252b8 <nm_spi_write+0x170>)
   25196:	4b49      	ldr	r3, [pc, #292]	; (252bc <nm_spi_write+0x174>)
   25198:	0018      	movs	r0, r3
   2519a:	4b49      	ldr	r3, [pc, #292]	; (252c0 <nm_spi_write+0x178>)
   2519c:	4798      	blx	r3
   2519e:	68fa      	ldr	r2, [r7, #12]
   251a0:	4b48      	ldr	r3, [pc, #288]	; (252c4 <nm_spi_write+0x17c>)
   251a2:	0011      	movs	r1, r2
   251a4:	0018      	movs	r0, r3
   251a6:	4b46      	ldr	r3, [pc, #280]	; (252c0 <nm_spi_write+0x178>)
   251a8:	4798      	blx	r3
   251aa:	4b47      	ldr	r3, [pc, #284]	; (252c8 <nm_spi_write+0x180>)
   251ac:	0018      	movs	r0, r3
   251ae:	4b44      	ldr	r3, [pc, #272]	; (252c0 <nm_spi_write+0x178>)
   251b0:	4798      	blx	r3
		goto _FAIL_;
   251b2:	e03e      	b.n	25232 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   251b4:	2317      	movs	r3, #23
   251b6:	18fc      	adds	r4, r7, r3
   251b8:	1dbb      	adds	r3, r7, #6
   251ba:	881a      	ldrh	r2, [r3, #0]
   251bc:	68bb      	ldr	r3, [r7, #8]
   251be:	0011      	movs	r1, r2
   251c0:	0018      	movs	r0, r3
   251c2:	4b42      	ldr	r3, [pc, #264]	; (252cc <nm_spi_write+0x184>)
   251c4:	4798      	blx	r3
   251c6:	0003      	movs	r3, r0
   251c8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   251ca:	2317      	movs	r3, #23
   251cc:	18fb      	adds	r3, r7, r3
   251ce:	781b      	ldrb	r3, [r3, #0]
   251d0:	b25b      	sxtb	r3, r3
   251d2:	2b01      	cmp	r3, #1
   251d4:	d00e      	beq.n	251f4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   251d6:	4a3e      	ldr	r2, [pc, #248]	; (252d0 <nm_spi_write+0x188>)
   251d8:	4937      	ldr	r1, [pc, #220]	; (252b8 <nm_spi_write+0x170>)
   251da:	4b38      	ldr	r3, [pc, #224]	; (252bc <nm_spi_write+0x174>)
   251dc:	0018      	movs	r0, r3
   251de:	4b38      	ldr	r3, [pc, #224]	; (252c0 <nm_spi_write+0x178>)
   251e0:	4798      	blx	r3
   251e2:	4b3c      	ldr	r3, [pc, #240]	; (252d4 <nm_spi_write+0x18c>)
   251e4:	0018      	movs	r0, r3
   251e6:	4b36      	ldr	r3, [pc, #216]	; (252c0 <nm_spi_write+0x178>)
   251e8:	4798      	blx	r3
   251ea:	4b37      	ldr	r3, [pc, #220]	; (252c8 <nm_spi_write+0x180>)
   251ec:	0018      	movs	r0, r3
   251ee:	4b34      	ldr	r3, [pc, #208]	; (252c0 <nm_spi_write+0x178>)
   251f0:	4798      	blx	r3
		goto _FAIL_;
   251f2:	e01e      	b.n	25232 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   251f4:	2317      	movs	r3, #23
   251f6:	18fc      	adds	r4, r7, r3
   251f8:	2315      	movs	r3, #21
   251fa:	18fb      	adds	r3, r7, r3
   251fc:	781b      	ldrb	r3, [r3, #0]
   251fe:	0018      	movs	r0, r3
   25200:	4b35      	ldr	r3, [pc, #212]	; (252d8 <nm_spi_write+0x190>)
   25202:	4798      	blx	r3
   25204:	0003      	movs	r3, r0
   25206:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   25208:	2317      	movs	r3, #23
   2520a:	18fb      	adds	r3, r7, r3
   2520c:	781b      	ldrb	r3, [r3, #0]
   2520e:	b25b      	sxtb	r3, r3
   25210:	2b01      	cmp	r3, #1
   25212:	d00e      	beq.n	25232 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   25214:	4a31      	ldr	r2, [pc, #196]	; (252dc <nm_spi_write+0x194>)
   25216:	4928      	ldr	r1, [pc, #160]	; (252b8 <nm_spi_write+0x170>)
   25218:	4b28      	ldr	r3, [pc, #160]	; (252bc <nm_spi_write+0x174>)
   2521a:	0018      	movs	r0, r3
   2521c:	4b28      	ldr	r3, [pc, #160]	; (252c0 <nm_spi_write+0x178>)
   2521e:	4798      	blx	r3
   25220:	4b2c      	ldr	r3, [pc, #176]	; (252d4 <nm_spi_write+0x18c>)
   25222:	0018      	movs	r0, r3
   25224:	4b26      	ldr	r3, [pc, #152]	; (252c0 <nm_spi_write+0x178>)
   25226:	4798      	blx	r3
   25228:	4b27      	ldr	r3, [pc, #156]	; (252c8 <nm_spi_write+0x180>)
   2522a:	0018      	movs	r0, r3
   2522c:	4b24      	ldr	r3, [pc, #144]	; (252c0 <nm_spi_write+0x178>)
   2522e:	4798      	blx	r3
		goto _FAIL_;
   25230:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   25232:	2317      	movs	r3, #23
   25234:	18fb      	adds	r3, r7, r3
   25236:	781b      	ldrb	r3, [r3, #0]
   25238:	b25b      	sxtb	r3, r3
   2523a:	2b01      	cmp	r3, #1
   2523c:	d030      	beq.n	252a0 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2523e:	2001      	movs	r0, #1
   25240:	4b27      	ldr	r3, [pc, #156]	; (252e0 <nm_spi_write+0x198>)
   25242:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25244:	2300      	movs	r3, #0
   25246:	9300      	str	r3, [sp, #0]
   25248:	2300      	movs	r3, #0
   2524a:	2200      	movs	r2, #0
   2524c:	2100      	movs	r1, #0
   2524e:	20cf      	movs	r0, #207	; 0xcf
   25250:	4c24      	ldr	r4, [pc, #144]	; (252e4 <nm_spi_write+0x19c>)
   25252:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25254:	20cf      	movs	r0, #207	; 0xcf
   25256:	4b24      	ldr	r3, [pc, #144]	; (252e8 <nm_spi_write+0x1a0>)
   25258:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2525a:	4a24      	ldr	r2, [pc, #144]	; (252ec <nm_spi_write+0x1a4>)
   2525c:	4916      	ldr	r1, [pc, #88]	; (252b8 <nm_spi_write+0x170>)
   2525e:	4b17      	ldr	r3, [pc, #92]	; (252bc <nm_spi_write+0x174>)
   25260:	0018      	movs	r0, r3
   25262:	4b17      	ldr	r3, [pc, #92]	; (252c0 <nm_spi_write+0x178>)
   25264:	4798      	blx	r3
   25266:	2316      	movs	r3, #22
   25268:	18fb      	adds	r3, r7, r3
   2526a:	7819      	ldrb	r1, [r3, #0]
   2526c:	1dbb      	adds	r3, r7, #6
   2526e:	881b      	ldrh	r3, [r3, #0]
   25270:	68fa      	ldr	r2, [r7, #12]
   25272:	481f      	ldr	r0, [pc, #124]	; (252f0 <nm_spi_write+0x1a8>)
   25274:	4c12      	ldr	r4, [pc, #72]	; (252c0 <nm_spi_write+0x178>)
   25276:	47a0      	blx	r4
   25278:	4b13      	ldr	r3, [pc, #76]	; (252c8 <nm_spi_write+0x180>)
   2527a:	0018      	movs	r0, r3
   2527c:	4b10      	ldr	r3, [pc, #64]	; (252c0 <nm_spi_write+0x178>)
   2527e:	4798      	blx	r3
		nm_bsp_sleep(1);
   25280:	2001      	movs	r0, #1
   25282:	4b17      	ldr	r3, [pc, #92]	; (252e0 <nm_spi_write+0x198>)
   25284:	4798      	blx	r3
		retry--;
   25286:	2316      	movs	r3, #22
   25288:	18fb      	adds	r3, r7, r3
   2528a:	781a      	ldrb	r2, [r3, #0]
   2528c:	2316      	movs	r3, #22
   2528e:	18fb      	adds	r3, r7, r3
   25290:	3a01      	subs	r2, #1
   25292:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   25294:	2316      	movs	r3, #22
   25296:	18fb      	adds	r3, r7, r3
   25298:	781b      	ldrb	r3, [r3, #0]
   2529a:	2b00      	cmp	r3, #0
   2529c:	d000      	beq.n	252a0 <nm_spi_write+0x158>
   2529e:	e762      	b.n	25166 <nm_spi_write+0x1e>
	}


	return result;
   252a0:	2317      	movs	r3, #23
   252a2:	18fb      	adds	r3, r7, r3
   252a4:	781b      	ldrb	r3, [r3, #0]
   252a6:	b25b      	sxtb	r3, r3
}
   252a8:	0018      	movs	r0, r3
   252aa:	46bd      	mov	sp, r7
   252ac:	b007      	add	sp, #28
   252ae:	bd90      	pop	{r4, r7, pc}
   252b0:	00024531 	.word	0x00024531
   252b4:	000003cf 	.word	0x000003cf
   252b8:	00039f08 	.word	0x00039f08
   252bc:	000398c0 	.word	0x000398c0
   252c0:	0001ea1d 	.word	0x0001ea1d
   252c4:	00039c74 	.word	0x00039c74
   252c8:	00039900 	.word	0x00039900
   252cc:	00024e25 	.word	0x00024e25
   252d0:	000003d9 	.word	0x000003d9
   252d4:	00039ca4 	.word	0x00039ca4
   252d8:	000242f5 	.word	0x000242f5
   252dc:	000003e1 	.word	0x000003e1
   252e0:	00020e71 	.word	0x00020e71
   252e4:	00023fb5 	.word	0x00023fb5
   252e8:	000243f5 	.word	0x000243f5
   252ec:	000003eb 	.word	0x000003eb
   252f0:	00039ccc 	.word	0x00039ccc

000252f4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   252f4:	b590      	push	{r4, r7, lr}
   252f6:	b087      	sub	sp, #28
   252f8:	af02      	add	r7, sp, #8
   252fa:	6078      	str	r0, [r7, #4]
   252fc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   252fe:	230f      	movs	r3, #15
   25300:	18fb      	adds	r3, r7, r3
   25302:	220a      	movs	r2, #10
   25304:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   25306:	230c      	movs	r3, #12
   25308:	18fb      	adds	r3, r7, r3
   2530a:	2201      	movs	r2, #1
   2530c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   2530e:	230e      	movs	r3, #14
   25310:	18fb      	adds	r3, r7, r3
   25312:	22ca      	movs	r2, #202	; 0xca
   25314:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   25316:	230d      	movs	r3, #13
   25318:	18fb      	adds	r3, r7, r3
   2531a:	2200      	movs	r2, #0
   2531c:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   2531e:	687b      	ldr	r3, [r7, #4]
   25320:	2bff      	cmp	r3, #255	; 0xff
   25322:	d808      	bhi.n	25336 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   25324:	230e      	movs	r3, #14
   25326:	18fb      	adds	r3, r7, r3
   25328:	22c4      	movs	r2, #196	; 0xc4
   2532a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   2532c:	230d      	movs	r3, #13
   2532e:	18fb      	adds	r3, r7, r3
   25330:	2201      	movs	r2, #1
   25332:	701a      	strb	r2, [r3, #0]
   25334:	e007      	b.n	25346 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   25336:	230e      	movs	r3, #14
   25338:	18fb      	adds	r3, r7, r3
   2533a:	22ca      	movs	r2, #202	; 0xca
   2533c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2533e:	230d      	movs	r3, #13
   25340:	18fb      	adds	r3, r7, r3
   25342:	2200      	movs	r2, #0
   25344:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   25346:	2308      	movs	r3, #8
   25348:	18fa      	adds	r2, r7, r3
   2534a:	6879      	ldr	r1, [r7, #4]
   2534c:	230e      	movs	r3, #14
   2534e:	18fb      	adds	r3, r7, r3
   25350:	7818      	ldrb	r0, [r3, #0]
   25352:	230d      	movs	r3, #13
   25354:	18fb      	adds	r3, r7, r3
   25356:	781b      	ldrb	r3, [r3, #0]
   25358:	9300      	str	r3, [sp, #0]
   2535a:	2304      	movs	r3, #4
   2535c:	4c37      	ldr	r4, [pc, #220]	; (2543c <spi_read_reg+0x148>)
   2535e:	47a0      	blx	r4
   25360:	0002      	movs	r2, r0
   25362:	230c      	movs	r3, #12
   25364:	18fb      	adds	r3, r7, r3
   25366:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   25368:	230c      	movs	r3, #12
   2536a:	18fb      	adds	r3, r7, r3
   2536c:	781b      	ldrb	r3, [r3, #0]
   2536e:	b25b      	sxtb	r3, r3
   25370:	2b01      	cmp	r3, #1
   25372:	d010      	beq.n	25396 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   25374:	4a32      	ldr	r2, [pc, #200]	; (25440 <spi_read_reg+0x14c>)
   25376:	4933      	ldr	r1, [pc, #204]	; (25444 <spi_read_reg+0x150>)
   25378:	4b33      	ldr	r3, [pc, #204]	; (25448 <spi_read_reg+0x154>)
   2537a:	0018      	movs	r0, r3
   2537c:	4b33      	ldr	r3, [pc, #204]	; (2544c <spi_read_reg+0x158>)
   2537e:	4798      	blx	r3
   25380:	687a      	ldr	r2, [r7, #4]
   25382:	4b33      	ldr	r3, [pc, #204]	; (25450 <spi_read_reg+0x15c>)
   25384:	0011      	movs	r1, r2
   25386:	0018      	movs	r0, r3
   25388:	4b30      	ldr	r3, [pc, #192]	; (2544c <spi_read_reg+0x158>)
   2538a:	4798      	blx	r3
   2538c:	4b31      	ldr	r3, [pc, #196]	; (25454 <spi_read_reg+0x160>)
   2538e:	0018      	movs	r0, r3
   25390:	4b2e      	ldr	r3, [pc, #184]	; (2544c <spi_read_reg+0x158>)
   25392:	4798      	blx	r3
		goto _FAIL_;
   25394:	e014      	b.n	253c0 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   25396:	2308      	movs	r3, #8
   25398:	18fb      	adds	r3, r7, r3
   2539a:	781b      	ldrb	r3, [r3, #0]
   2539c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2539e:	2308      	movs	r3, #8
   253a0:	18fb      	adds	r3, r7, r3
   253a2:	785b      	ldrb	r3, [r3, #1]
   253a4:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   253a6:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   253a8:	2308      	movs	r3, #8
   253aa:	18fb      	adds	r3, r7, r3
   253ac:	789b      	ldrb	r3, [r3, #2]
   253ae:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   253b0:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   253b2:	2308      	movs	r3, #8
   253b4:	18fb      	adds	r3, r7, r3
   253b6:	78db      	ldrb	r3, [r3, #3]
   253b8:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   253ba:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   253bc:	683b      	ldr	r3, [r7, #0]
   253be:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   253c0:	230c      	movs	r3, #12
   253c2:	18fb      	adds	r3, r7, r3
   253c4:	781b      	ldrb	r3, [r3, #0]
   253c6:	b25b      	sxtb	r3, r3
   253c8:	2b01      	cmp	r3, #1
   253ca:	d02f      	beq.n	2542c <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   253cc:	2001      	movs	r0, #1
   253ce:	4b22      	ldr	r3, [pc, #136]	; (25458 <spi_read_reg+0x164>)
   253d0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   253d2:	2300      	movs	r3, #0
   253d4:	9300      	str	r3, [sp, #0]
   253d6:	2300      	movs	r3, #0
   253d8:	2200      	movs	r2, #0
   253da:	2100      	movs	r1, #0
   253dc:	20cf      	movs	r0, #207	; 0xcf
   253de:	4c1f      	ldr	r4, [pc, #124]	; (2545c <spi_read_reg+0x168>)
   253e0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   253e2:	20cf      	movs	r0, #207	; 0xcf
   253e4:	4b1e      	ldr	r3, [pc, #120]	; (25460 <spi_read_reg+0x16c>)
   253e6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   253e8:	4a1e      	ldr	r2, [pc, #120]	; (25464 <spi_read_reg+0x170>)
   253ea:	4916      	ldr	r1, [pc, #88]	; (25444 <spi_read_reg+0x150>)
   253ec:	4b16      	ldr	r3, [pc, #88]	; (25448 <spi_read_reg+0x154>)
   253ee:	0018      	movs	r0, r3
   253f0:	4b16      	ldr	r3, [pc, #88]	; (2544c <spi_read_reg+0x158>)
   253f2:	4798      	blx	r3
   253f4:	230f      	movs	r3, #15
   253f6:	18fb      	adds	r3, r7, r3
   253f8:	7819      	ldrb	r1, [r3, #0]
   253fa:	687a      	ldr	r2, [r7, #4]
   253fc:	4b1a      	ldr	r3, [pc, #104]	; (25468 <spi_read_reg+0x174>)
   253fe:	0018      	movs	r0, r3
   25400:	4b12      	ldr	r3, [pc, #72]	; (2544c <spi_read_reg+0x158>)
   25402:	4798      	blx	r3
   25404:	4b13      	ldr	r3, [pc, #76]	; (25454 <spi_read_reg+0x160>)
   25406:	0018      	movs	r0, r3
   25408:	4b10      	ldr	r3, [pc, #64]	; (2544c <spi_read_reg+0x158>)
   2540a:	4798      	blx	r3
		nm_bsp_sleep(1);
   2540c:	2001      	movs	r0, #1
   2540e:	4b12      	ldr	r3, [pc, #72]	; (25458 <spi_read_reg+0x164>)
   25410:	4798      	blx	r3
		retry--;
   25412:	230f      	movs	r3, #15
   25414:	18fb      	adds	r3, r7, r3
   25416:	781a      	ldrb	r2, [r3, #0]
   25418:	230f      	movs	r3, #15
   2541a:	18fb      	adds	r3, r7, r3
   2541c:	3a01      	subs	r2, #1
   2541e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   25420:	230f      	movs	r3, #15
   25422:	18fb      	adds	r3, r7, r3
   25424:	781b      	ldrb	r3, [r3, #0]
   25426:	2b00      	cmp	r3, #0
   25428:	d000      	beq.n	2542c <spi_read_reg+0x138>
   2542a:	e778      	b.n	2531e <spi_read_reg+0x2a>
	}
		
	return result;
   2542c:	230c      	movs	r3, #12
   2542e:	18fb      	adds	r3, r7, r3
   25430:	781b      	ldrb	r3, [r3, #0]
   25432:	b25b      	sxtb	r3, r3
}
   25434:	0018      	movs	r0, r3
   25436:	46bd      	mov	sp, r7
   25438:	b005      	add	sp, #20
   2543a:	bd90      	pop	{r4, r7, pc}
   2543c:	00024531 	.word	0x00024531
   25440:	00000423 	.word	0x00000423
   25444:	00039f18 	.word	0x00039f18
   25448:	000398c0 	.word	0x000398c0
   2544c:	0001ea1d 	.word	0x0001ea1d
   25450:	00039ce8 	.word	0x00039ce8
   25454:	00039900 	.word	0x00039900
   25458:	00020e71 	.word	0x00020e71
   2545c:	00023fb5 	.word	0x00023fb5
   25460:	000243f5 	.word	0x000243f5
   25464:	00000435 	.word	0x00000435
   25468:	00039d14 	.word	0x00039d14

0002546c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2546c:	b590      	push	{r4, r7, lr}
   2546e:	b089      	sub	sp, #36	; 0x24
   25470:	af02      	add	r7, sp, #8
   25472:	60f8      	str	r0, [r7, #12]
   25474:	60b9      	str	r1, [r7, #8]
   25476:	1dbb      	adds	r3, r7, #6
   25478:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2547a:	2316      	movs	r3, #22
   2547c:	18fb      	adds	r3, r7, r3
   2547e:	22c8      	movs	r2, #200	; 0xc8
   25480:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   25482:	2317      	movs	r3, #23
   25484:	18fb      	adds	r3, r7, r3
   25486:	220a      	movs	r2, #10
   25488:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2548a:	1dbb      	adds	r3, r7, #6
   2548c:	881c      	ldrh	r4, [r3, #0]
   2548e:	68ba      	ldr	r2, [r7, #8]
   25490:	68f9      	ldr	r1, [r7, #12]
   25492:	2316      	movs	r3, #22
   25494:	18fb      	adds	r3, r7, r3
   25496:	7818      	ldrb	r0, [r3, #0]
   25498:	2300      	movs	r3, #0
   2549a:	9300      	str	r3, [sp, #0]
   2549c:	0023      	movs	r3, r4
   2549e:	4c2e      	ldr	r4, [pc, #184]	; (25558 <nm_spi_read+0xec>)
   254a0:	47a0      	blx	r4
   254a2:	0002      	movs	r2, r0
   254a4:	2315      	movs	r3, #21
   254a6:	18fb      	adds	r3, r7, r3
   254a8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   254aa:	2315      	movs	r3, #21
   254ac:	18fb      	adds	r3, r7, r3
   254ae:	781b      	ldrb	r3, [r3, #0]
   254b0:	b25b      	sxtb	r3, r3
   254b2:	2b01      	cmp	r3, #1
   254b4:	d010      	beq.n	254d8 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   254b6:	4a29      	ldr	r2, [pc, #164]	; (2555c <nm_spi_read+0xf0>)
   254b8:	4929      	ldr	r1, [pc, #164]	; (25560 <nm_spi_read+0xf4>)
   254ba:	4b2a      	ldr	r3, [pc, #168]	; (25564 <nm_spi_read+0xf8>)
   254bc:	0018      	movs	r0, r3
   254be:	4b2a      	ldr	r3, [pc, #168]	; (25568 <nm_spi_read+0xfc>)
   254c0:	4798      	blx	r3
   254c2:	68fa      	ldr	r2, [r7, #12]
   254c4:	4b29      	ldr	r3, [pc, #164]	; (2556c <nm_spi_read+0x100>)
   254c6:	0011      	movs	r1, r2
   254c8:	0018      	movs	r0, r3
   254ca:	4b27      	ldr	r3, [pc, #156]	; (25568 <nm_spi_read+0xfc>)
   254cc:	4798      	blx	r3
   254ce:	4b28      	ldr	r3, [pc, #160]	; (25570 <nm_spi_read+0x104>)
   254d0:	0018      	movs	r0, r3
   254d2:	4b25      	ldr	r3, [pc, #148]	; (25568 <nm_spi_read+0xfc>)
   254d4:	4798      	blx	r3
		goto _FAIL_;
   254d6:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   254d8:	2315      	movs	r3, #21
   254da:	18fb      	adds	r3, r7, r3
   254dc:	781b      	ldrb	r3, [r3, #0]
   254de:	b25b      	sxtb	r3, r3
   254e0:	2b01      	cmp	r3, #1
   254e2:	d030      	beq.n	25546 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   254e4:	2001      	movs	r0, #1
   254e6:	4b23      	ldr	r3, [pc, #140]	; (25574 <nm_spi_read+0x108>)
   254e8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   254ea:	2300      	movs	r3, #0
   254ec:	9300      	str	r3, [sp, #0]
   254ee:	2300      	movs	r3, #0
   254f0:	2200      	movs	r2, #0
   254f2:	2100      	movs	r1, #0
   254f4:	20cf      	movs	r0, #207	; 0xcf
   254f6:	4c20      	ldr	r4, [pc, #128]	; (25578 <nm_spi_read+0x10c>)
   254f8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   254fa:	20cf      	movs	r0, #207	; 0xcf
   254fc:	4b1f      	ldr	r3, [pc, #124]	; (2557c <nm_spi_read+0x110>)
   254fe:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   25500:	4a1f      	ldr	r2, [pc, #124]	; (25580 <nm_spi_read+0x114>)
   25502:	4917      	ldr	r1, [pc, #92]	; (25560 <nm_spi_read+0xf4>)
   25504:	4b17      	ldr	r3, [pc, #92]	; (25564 <nm_spi_read+0xf8>)
   25506:	0018      	movs	r0, r3
   25508:	4b17      	ldr	r3, [pc, #92]	; (25568 <nm_spi_read+0xfc>)
   2550a:	4798      	blx	r3
   2550c:	2317      	movs	r3, #23
   2550e:	18fb      	adds	r3, r7, r3
   25510:	7819      	ldrb	r1, [r3, #0]
   25512:	1dbb      	adds	r3, r7, #6
   25514:	881b      	ldrh	r3, [r3, #0]
   25516:	68fa      	ldr	r2, [r7, #12]
   25518:	481a      	ldr	r0, [pc, #104]	; (25584 <nm_spi_read+0x118>)
   2551a:	4c13      	ldr	r4, [pc, #76]	; (25568 <nm_spi_read+0xfc>)
   2551c:	47a0      	blx	r4
   2551e:	4b14      	ldr	r3, [pc, #80]	; (25570 <nm_spi_read+0x104>)
   25520:	0018      	movs	r0, r3
   25522:	4b11      	ldr	r3, [pc, #68]	; (25568 <nm_spi_read+0xfc>)
   25524:	4798      	blx	r3
		nm_bsp_sleep(1);
   25526:	2001      	movs	r0, #1
   25528:	4b12      	ldr	r3, [pc, #72]	; (25574 <nm_spi_read+0x108>)
   2552a:	4798      	blx	r3
		retry--;
   2552c:	2317      	movs	r3, #23
   2552e:	18fb      	adds	r3, r7, r3
   25530:	781a      	ldrb	r2, [r3, #0]
   25532:	2317      	movs	r3, #23
   25534:	18fb      	adds	r3, r7, r3
   25536:	3a01      	subs	r2, #1
   25538:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2553a:	2317      	movs	r3, #23
   2553c:	18fb      	adds	r3, r7, r3
   2553e:	781b      	ldrb	r3, [r3, #0]
   25540:	2b00      	cmp	r3, #0
   25542:	d000      	beq.n	25546 <nm_spi_read+0xda>
   25544:	e7a1      	b.n	2548a <nm_spi_read+0x1e>
	}

	return result;
   25546:	2315      	movs	r3, #21
   25548:	18fb      	adds	r3, r7, r3
   2554a:	781b      	ldrb	r3, [r3, #0]
   2554c:	b25b      	sxtb	r3, r3
}
   2554e:	0018      	movs	r0, r3
   25550:	46bd      	mov	sp, r7
   25552:	b007      	add	sp, #28
   25554:	bd90      	pop	{r4, r7, pc}
   25556:	46c0      	nop			; (mov r8, r8)
   25558:	00024531 	.word	0x00024531
   2555c:	00000472 	.word	0x00000472
   25560:	00039f28 	.word	0x00039f28
   25564:	000398c0 	.word	0x000398c0
   25568:	0001ea1d 	.word	0x0001ea1d
   2556c:	00039d2c 	.word	0x00039d2c
   25570:	00039900 	.word	0x00039900
   25574:	00020e71 	.word	0x00020e71
   25578:	00023fb5 	.word	0x00023fb5
   2557c:	000243f5 	.word	0x000243f5
   25580:	0000047d 	.word	0x0000047d
   25584:	00039ccc 	.word	0x00039ccc

00025588 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   25588:	b580      	push	{r7, lr}
   2558a:	b082      	sub	sp, #8
   2558c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2558e:	4b0c      	ldr	r3, [pc, #48]	; (255c0 <spi_init_pkt_sz+0x38>)
   25590:	0018      	movs	r0, r3
   25592:	4b0c      	ldr	r3, [pc, #48]	; (255c4 <spi_init_pkt_sz+0x3c>)
   25594:	4798      	blx	r3
   25596:	0003      	movs	r3, r0
   25598:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2559a:	687b      	ldr	r3, [r7, #4]
   2559c:	2270      	movs	r2, #112	; 0x70
   2559e:	4393      	bics	r3, r2
   255a0:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   255a2:	687b      	ldr	r3, [r7, #4]
   255a4:	2250      	movs	r2, #80	; 0x50
   255a6:	4313      	orrs	r3, r2
   255a8:	607b      	str	r3, [r7, #4]
   255aa:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   255ac:	687b      	ldr	r3, [r7, #4]
   255ae:	4a04      	ldr	r2, [pc, #16]	; (255c0 <spi_init_pkt_sz+0x38>)
   255b0:	0019      	movs	r1, r3
   255b2:	0010      	movs	r0, r2
   255b4:	4b04      	ldr	r3, [pc, #16]	; (255c8 <spi_init_pkt_sz+0x40>)
   255b6:	4798      	blx	r3
}
   255b8:	46c0      	nop			; (mov r8, r8)
   255ba:	46bd      	mov	sp, r7
   255bc:	b002      	add	sp, #8
   255be:	bd80      	pop	{r7, pc}
   255c0:	0000e824 	.word	0x0000e824
   255c4:	00025761 	.word	0x00025761
   255c8:	000257d5 	.word	0x000257d5

000255cc <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   255cc:	b590      	push	{r4, r7, lr}
   255ce:	b083      	sub	sp, #12
   255d0:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   255d2:	2300      	movs	r3, #0
   255d4:	9300      	str	r3, [sp, #0]
   255d6:	2300      	movs	r3, #0
   255d8:	2200      	movs	r2, #0
   255da:	2100      	movs	r1, #0
   255dc:	20cf      	movs	r0, #207	; 0xcf
   255de:	4c05      	ldr	r4, [pc, #20]	; (255f4 <nm_spi_reset+0x28>)
   255e0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   255e2:	20cf      	movs	r0, #207	; 0xcf
   255e4:	4b04      	ldr	r3, [pc, #16]	; (255f8 <nm_spi_reset+0x2c>)
   255e6:	4798      	blx	r3
	return M2M_SUCCESS;
   255e8:	2300      	movs	r3, #0
}
   255ea:	0018      	movs	r0, r3
   255ec:	46bd      	mov	sp, r7
   255ee:	b001      	add	sp, #4
   255f0:	bd90      	pop	{r4, r7, pc}
   255f2:	46c0      	nop			; (mov r8, r8)
   255f4:	00023fb5 	.word	0x00023fb5
   255f8:	000243f5 	.word	0x000243f5

000255fc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   255fc:	b580      	push	{r7, lr}
   255fe:	b082      	sub	sp, #8
   25600:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   25602:	2300      	movs	r3, #0
   25604:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   25606:	4b40      	ldr	r3, [pc, #256]	; (25708 <nm_spi_init+0x10c>)
   25608:	2200      	movs	r2, #0
   2560a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   2560c:	003b      	movs	r3, r7
   2560e:	4a3f      	ldr	r2, [pc, #252]	; (2570c <nm_spi_init+0x110>)
   25610:	0019      	movs	r1, r3
   25612:	0010      	movs	r0, r2
   25614:	4b3e      	ldr	r3, [pc, #248]	; (25710 <nm_spi_init+0x114>)
   25616:	4798      	blx	r3
   25618:	1e03      	subs	r3, r0, #0
   2561a:	d129      	bne.n	25670 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   2561c:	4b3a      	ldr	r3, [pc, #232]	; (25708 <nm_spi_init+0x10c>)
   2561e:	2201      	movs	r2, #1
   25620:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   25622:	2398      	movs	r3, #152	; 0x98
   25624:	00da      	lsls	r2, r3, #3
   25626:	493b      	ldr	r1, [pc, #236]	; (25714 <nm_spi_init+0x118>)
   25628:	4b3b      	ldr	r3, [pc, #236]	; (25718 <nm_spi_init+0x11c>)
   2562a:	0018      	movs	r0, r3
   2562c:	4b3b      	ldr	r3, [pc, #236]	; (2571c <nm_spi_init+0x120>)
   2562e:	4798      	blx	r3
   25630:	4b3b      	ldr	r3, [pc, #236]	; (25720 <nm_spi_init+0x124>)
   25632:	0018      	movs	r0, r3
   25634:	4b39      	ldr	r3, [pc, #228]	; (2571c <nm_spi_init+0x120>)
   25636:	4798      	blx	r3
   25638:	4b3a      	ldr	r3, [pc, #232]	; (25724 <nm_spi_init+0x128>)
   2563a:	0018      	movs	r0, r3
   2563c:	4b37      	ldr	r3, [pc, #220]	; (2571c <nm_spi_init+0x120>)
   2563e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   25640:	003b      	movs	r3, r7
   25642:	4a32      	ldr	r2, [pc, #200]	; (2570c <nm_spi_init+0x110>)
   25644:	0019      	movs	r1, r3
   25646:	0010      	movs	r0, r2
   25648:	4b31      	ldr	r3, [pc, #196]	; (25710 <nm_spi_init+0x114>)
   2564a:	4798      	blx	r3
   2564c:	1e03      	subs	r3, r0, #0
   2564e:	d10f      	bne.n	25670 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   25650:	4a35      	ldr	r2, [pc, #212]	; (25728 <nm_spi_init+0x12c>)
   25652:	4930      	ldr	r1, [pc, #192]	; (25714 <nm_spi_init+0x118>)
   25654:	4b30      	ldr	r3, [pc, #192]	; (25718 <nm_spi_init+0x11c>)
   25656:	0018      	movs	r0, r3
   25658:	4b30      	ldr	r3, [pc, #192]	; (2571c <nm_spi_init+0x120>)
   2565a:	4798      	blx	r3
   2565c:	4b33      	ldr	r3, [pc, #204]	; (2572c <nm_spi_init+0x130>)
   2565e:	0018      	movs	r0, r3
   25660:	4b2e      	ldr	r3, [pc, #184]	; (2571c <nm_spi_init+0x120>)
   25662:	4798      	blx	r3
   25664:	4b2f      	ldr	r3, [pc, #188]	; (25724 <nm_spi_init+0x128>)
   25666:	0018      	movs	r0, r3
   25668:	4b2c      	ldr	r3, [pc, #176]	; (2571c <nm_spi_init+0x120>)
   2566a:	4798      	blx	r3
			return 0;
   2566c:	2300      	movs	r3, #0
   2566e:	e047      	b.n	25700 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   25670:	4b25      	ldr	r3, [pc, #148]	; (25708 <nm_spi_init+0x10c>)
   25672:	781b      	ldrb	r3, [r3, #0]
   25674:	2b00      	cmp	r3, #0
   25676:	d126      	bne.n	256c6 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   25678:	683b      	ldr	r3, [r7, #0]
   2567a:	220c      	movs	r2, #12
   2567c:	4393      	bics	r3, r2
   2567e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   25680:	683b      	ldr	r3, [r7, #0]
   25682:	2270      	movs	r2, #112	; 0x70
   25684:	4393      	bics	r3, r2
   25686:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   25688:	683b      	ldr	r3, [r7, #0]
   2568a:	2250      	movs	r2, #80	; 0x50
   2568c:	4313      	orrs	r3, r2
   2568e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   25690:	683b      	ldr	r3, [r7, #0]
   25692:	4a1e      	ldr	r2, [pc, #120]	; (2570c <nm_spi_init+0x110>)
   25694:	0019      	movs	r1, r3
   25696:	0010      	movs	r0, r2
   25698:	4b25      	ldr	r3, [pc, #148]	; (25730 <nm_spi_init+0x134>)
   2569a:	4798      	blx	r3
   2569c:	1e03      	subs	r3, r0, #0
   2569e:	d10f      	bne.n	256c0 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   256a0:	4a24      	ldr	r2, [pc, #144]	; (25734 <nm_spi_init+0x138>)
   256a2:	491c      	ldr	r1, [pc, #112]	; (25714 <nm_spi_init+0x118>)
   256a4:	4b1c      	ldr	r3, [pc, #112]	; (25718 <nm_spi_init+0x11c>)
   256a6:	0018      	movs	r0, r3
   256a8:	4b1c      	ldr	r3, [pc, #112]	; (2571c <nm_spi_init+0x120>)
   256aa:	4798      	blx	r3
   256ac:	4b22      	ldr	r3, [pc, #136]	; (25738 <nm_spi_init+0x13c>)
   256ae:	0018      	movs	r0, r3
   256b0:	4b1a      	ldr	r3, [pc, #104]	; (2571c <nm_spi_init+0x120>)
   256b2:	4798      	blx	r3
   256b4:	4b1b      	ldr	r3, [pc, #108]	; (25724 <nm_spi_init+0x128>)
   256b6:	0018      	movs	r0, r3
   256b8:	4b18      	ldr	r3, [pc, #96]	; (2571c <nm_spi_init+0x120>)
   256ba:	4798      	blx	r3
			return 0;
   256bc:	2300      	movs	r3, #0
   256be:	e01f      	b.n	25700 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   256c0:	4b11      	ldr	r3, [pc, #68]	; (25708 <nm_spi_init+0x10c>)
   256c2:	2201      	movs	r2, #1
   256c4:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   256c6:	1d3a      	adds	r2, r7, #4
   256c8:	2380      	movs	r3, #128	; 0x80
   256ca:	015b      	lsls	r3, r3, #5
   256cc:	0011      	movs	r1, r2
   256ce:	0018      	movs	r0, r3
   256d0:	4b0f      	ldr	r3, [pc, #60]	; (25710 <nm_spi_init+0x114>)
   256d2:	4798      	blx	r3
   256d4:	1e03      	subs	r3, r0, #0
   256d6:	d110      	bne.n	256fa <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   256d8:	4a18      	ldr	r2, [pc, #96]	; (2573c <nm_spi_init+0x140>)
   256da:	490e      	ldr	r1, [pc, #56]	; (25714 <nm_spi_init+0x118>)
   256dc:	4b0e      	ldr	r3, [pc, #56]	; (25718 <nm_spi_init+0x11c>)
   256de:	0018      	movs	r0, r3
   256e0:	4b0e      	ldr	r3, [pc, #56]	; (2571c <nm_spi_init+0x120>)
   256e2:	4798      	blx	r3
   256e4:	4b16      	ldr	r3, [pc, #88]	; (25740 <nm_spi_init+0x144>)
   256e6:	0018      	movs	r0, r3
   256e8:	4b0c      	ldr	r3, [pc, #48]	; (2571c <nm_spi_init+0x120>)
   256ea:	4798      	blx	r3
   256ec:	4b0d      	ldr	r3, [pc, #52]	; (25724 <nm_spi_init+0x128>)
   256ee:	0018      	movs	r0, r3
   256f0:	4b0a      	ldr	r3, [pc, #40]	; (2571c <nm_spi_init+0x120>)
   256f2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   256f4:	2306      	movs	r3, #6
   256f6:	425b      	negs	r3, r3
   256f8:	e002      	b.n	25700 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   256fa:	4b12      	ldr	r3, [pc, #72]	; (25744 <nm_spi_init+0x148>)
   256fc:	4798      	blx	r3


	return M2M_SUCCESS;
   256fe:	2300      	movs	r3, #0
}
   25700:	0018      	movs	r0, r3
   25702:	46bd      	mov	sp, r7
   25704:	b002      	add	sp, #8
   25706:	bd80      	pop	{r7, pc}
   25708:	20003ee8 	.word	0x20003ee8
   2570c:	0000e824 	.word	0x0000e824
   25710:	000252f5 	.word	0x000252f5
   25714:	00039f34 	.word	0x00039f34
   25718:	000398c0 	.word	0x000398c0
   2571c:	0001ea1d 	.word	0x0001ea1d
   25720:	00039d5c 	.word	0x00039d5c
   25724:	00039900 	.word	0x00039900
   25728:	000004c3 	.word	0x000004c3
   2572c:	00039dac 	.word	0x00039dac
   25730:	00024ffd 	.word	0x00024ffd
   25734:	000004cd 	.word	0x000004cd
   25738:	00039ddc 	.word	0x00039ddc
   2573c:	000004d7 	.word	0x000004d7
   25740:	00039e10 	.word	0x00039e10
   25744:	00025589 	.word	0x00025589

00025748 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   25748:	b580      	push	{r7, lr}
   2574a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   2574c:	4b03      	ldr	r3, [pc, #12]	; (2575c <nm_spi_deinit+0x14>)
   2574e:	2200      	movs	r2, #0
   25750:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   25752:	2300      	movs	r3, #0
}
   25754:	0018      	movs	r0, r3
   25756:	46bd      	mov	sp, r7
   25758:	bd80      	pop	{r7, pc}
   2575a:	46c0      	nop			; (mov r8, r8)
   2575c:	20003ee8 	.word	0x20003ee8

00025760 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   25760:	b580      	push	{r7, lr}
   25762:	b084      	sub	sp, #16
   25764:	af00      	add	r7, sp, #0
   25766:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   25768:	230c      	movs	r3, #12
   2576a:	18fa      	adds	r2, r7, r3
   2576c:	687b      	ldr	r3, [r7, #4]
   2576e:	0011      	movs	r1, r2
   25770:	0018      	movs	r0, r3
   25772:	4b03      	ldr	r3, [pc, #12]	; (25780 <nm_spi_read_reg+0x20>)
   25774:	4798      	blx	r3

	return u32Val;
   25776:	68fb      	ldr	r3, [r7, #12]
}
   25778:	0018      	movs	r0, r3
   2577a:	46bd      	mov	sp, r7
   2577c:	b004      	add	sp, #16
   2577e:	bd80      	pop	{r7, pc}
   25780:	000252f5 	.word	0x000252f5

00025784 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   25784:	b590      	push	{r4, r7, lr}
   25786:	b085      	sub	sp, #20
   25788:	af00      	add	r7, sp, #0
   2578a:	6078      	str	r0, [r7, #4]
   2578c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2578e:	230f      	movs	r3, #15
   25790:	18fc      	adds	r4, r7, r3
   25792:	683a      	ldr	r2, [r7, #0]
   25794:	687b      	ldr	r3, [r7, #4]
   25796:	0011      	movs	r1, r2
   25798:	0018      	movs	r0, r3
   2579a:	4b0d      	ldr	r3, [pc, #52]	; (257d0 <nm_spi_read_reg_with_ret+0x4c>)
   2579c:	4798      	blx	r3
   2579e:	0003      	movs	r3, r0
   257a0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   257a2:	230f      	movs	r3, #15
   257a4:	18fb      	adds	r3, r7, r3
   257a6:	781b      	ldrb	r3, [r3, #0]
   257a8:	b25b      	sxtb	r3, r3
   257aa:	2b01      	cmp	r3, #1
   257ac:	d104      	bne.n	257b8 <nm_spi_read_reg_with_ret+0x34>
   257ae:	230f      	movs	r3, #15
   257b0:	18fb      	adds	r3, r7, r3
   257b2:	2200      	movs	r2, #0
   257b4:	701a      	strb	r2, [r3, #0]
   257b6:	e003      	b.n	257c0 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   257b8:	230f      	movs	r3, #15
   257ba:	18fb      	adds	r3, r7, r3
   257bc:	22fa      	movs	r2, #250	; 0xfa
   257be:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   257c0:	230f      	movs	r3, #15
   257c2:	18fb      	adds	r3, r7, r3
   257c4:	781b      	ldrb	r3, [r3, #0]
   257c6:	b25b      	sxtb	r3, r3
}
   257c8:	0018      	movs	r0, r3
   257ca:	46bd      	mov	sp, r7
   257cc:	b005      	add	sp, #20
   257ce:	bd90      	pop	{r4, r7, pc}
   257d0:	000252f5 	.word	0x000252f5

000257d4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   257d4:	b590      	push	{r4, r7, lr}
   257d6:	b085      	sub	sp, #20
   257d8:	af00      	add	r7, sp, #0
   257da:	6078      	str	r0, [r7, #4]
   257dc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   257de:	230f      	movs	r3, #15
   257e0:	18fc      	adds	r4, r7, r3
   257e2:	683a      	ldr	r2, [r7, #0]
   257e4:	687b      	ldr	r3, [r7, #4]
   257e6:	0011      	movs	r1, r2
   257e8:	0018      	movs	r0, r3
   257ea:	4b0d      	ldr	r3, [pc, #52]	; (25820 <nm_spi_write_reg+0x4c>)
   257ec:	4798      	blx	r3
   257ee:	0003      	movs	r3, r0
   257f0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   257f2:	230f      	movs	r3, #15
   257f4:	18fb      	adds	r3, r7, r3
   257f6:	781b      	ldrb	r3, [r3, #0]
   257f8:	b25b      	sxtb	r3, r3
   257fa:	2b01      	cmp	r3, #1
   257fc:	d104      	bne.n	25808 <nm_spi_write_reg+0x34>
   257fe:	230f      	movs	r3, #15
   25800:	18fb      	adds	r3, r7, r3
   25802:	2200      	movs	r2, #0
   25804:	701a      	strb	r2, [r3, #0]
   25806:	e003      	b.n	25810 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25808:	230f      	movs	r3, #15
   2580a:	18fb      	adds	r3, r7, r3
   2580c:	22fa      	movs	r2, #250	; 0xfa
   2580e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25810:	230f      	movs	r3, #15
   25812:	18fb      	adds	r3, r7, r3
   25814:	781b      	ldrb	r3, [r3, #0]
   25816:	b25b      	sxtb	r3, r3
}
   25818:	0018      	movs	r0, r3
   2581a:	46bd      	mov	sp, r7
   2581c:	b005      	add	sp, #20
   2581e:	bd90      	pop	{r4, r7, pc}
   25820:	00024ffd 	.word	0x00024ffd

00025824 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25824:	b590      	push	{r4, r7, lr}
   25826:	b087      	sub	sp, #28
   25828:	af00      	add	r7, sp, #0
   2582a:	60f8      	str	r0, [r7, #12]
   2582c:	60b9      	str	r1, [r7, #8]
   2582e:	1dbb      	adds	r3, r7, #6
   25830:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   25832:	2317      	movs	r3, #23
   25834:	18fc      	adds	r4, r7, r3
   25836:	1dbb      	adds	r3, r7, #6
   25838:	881a      	ldrh	r2, [r3, #0]
   2583a:	68b9      	ldr	r1, [r7, #8]
   2583c:	68fb      	ldr	r3, [r7, #12]
   2583e:	0018      	movs	r0, r3
   25840:	4b0d      	ldr	r3, [pc, #52]	; (25878 <nm_spi_read_block+0x54>)
   25842:	4798      	blx	r3
   25844:	0003      	movs	r3, r0
   25846:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25848:	2317      	movs	r3, #23
   2584a:	18fb      	adds	r3, r7, r3
   2584c:	781b      	ldrb	r3, [r3, #0]
   2584e:	b25b      	sxtb	r3, r3
   25850:	2b01      	cmp	r3, #1
   25852:	d104      	bne.n	2585e <nm_spi_read_block+0x3a>
   25854:	2317      	movs	r3, #23
   25856:	18fb      	adds	r3, r7, r3
   25858:	2200      	movs	r2, #0
   2585a:	701a      	strb	r2, [r3, #0]
   2585c:	e003      	b.n	25866 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2585e:	2317      	movs	r3, #23
   25860:	18fb      	adds	r3, r7, r3
   25862:	22fa      	movs	r2, #250	; 0xfa
   25864:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25866:	2317      	movs	r3, #23
   25868:	18fb      	adds	r3, r7, r3
   2586a:	781b      	ldrb	r3, [r3, #0]
   2586c:	b25b      	sxtb	r3, r3
}
   2586e:	0018      	movs	r0, r3
   25870:	46bd      	mov	sp, r7
   25872:	b007      	add	sp, #28
   25874:	bd90      	pop	{r4, r7, pc}
   25876:	46c0      	nop			; (mov r8, r8)
   25878:	0002546d 	.word	0x0002546d

0002587c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   2587c:	b590      	push	{r4, r7, lr}
   2587e:	b087      	sub	sp, #28
   25880:	af00      	add	r7, sp, #0
   25882:	60f8      	str	r0, [r7, #12]
   25884:	60b9      	str	r1, [r7, #8]
   25886:	1dbb      	adds	r3, r7, #6
   25888:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   2588a:	2317      	movs	r3, #23
   2588c:	18fc      	adds	r4, r7, r3
   2588e:	1dbb      	adds	r3, r7, #6
   25890:	881a      	ldrh	r2, [r3, #0]
   25892:	68b9      	ldr	r1, [r7, #8]
   25894:	68fb      	ldr	r3, [r7, #12]
   25896:	0018      	movs	r0, r3
   25898:	4b0d      	ldr	r3, [pc, #52]	; (258d0 <nm_spi_write_block+0x54>)
   2589a:	4798      	blx	r3
   2589c:	0003      	movs	r3, r0
   2589e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   258a0:	2317      	movs	r3, #23
   258a2:	18fb      	adds	r3, r7, r3
   258a4:	781b      	ldrb	r3, [r3, #0]
   258a6:	b25b      	sxtb	r3, r3
   258a8:	2b01      	cmp	r3, #1
   258aa:	d104      	bne.n	258b6 <nm_spi_write_block+0x3a>
   258ac:	2317      	movs	r3, #23
   258ae:	18fb      	adds	r3, r7, r3
   258b0:	2200      	movs	r2, #0
   258b2:	701a      	strb	r2, [r3, #0]
   258b4:	e003      	b.n	258be <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   258b6:	2317      	movs	r3, #23
   258b8:	18fb      	adds	r3, r7, r3
   258ba:	22fa      	movs	r2, #250	; 0xfa
   258bc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   258be:	2317      	movs	r3, #23
   258c0:	18fb      	adds	r3, r7, r3
   258c2:	781b      	ldrb	r3, [r3, #0]
   258c4:	b25b      	sxtb	r3, r3
}
   258c6:	0018      	movs	r0, r3
   258c8:	46bd      	mov	sp, r7
   258ca:	b007      	add	sp, #28
   258cc:	bd90      	pop	{r4, r7, pc}
   258ce:	46c0      	nop			; (mov r8, r8)
   258d0:	00025149 	.word	0x00025149

000258d4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   258d4:	b590      	push	{r4, r7, lr}
   258d6:	b089      	sub	sp, #36	; 0x24
   258d8:	af00      	add	r7, sp, #0
   258da:	60b9      	str	r1, [r7, #8]
   258dc:	0011      	movs	r1, r2
   258de:	607b      	str	r3, [r7, #4]
   258e0:	230f      	movs	r3, #15
   258e2:	18fb      	adds	r3, r7, r3
   258e4:	1c02      	adds	r2, r0, #0
   258e6:	701a      	strb	r2, [r3, #0]
   258e8:	230e      	movs	r3, #14
   258ea:	18fb      	adds	r3, r7, r3
   258ec:	1c0a      	adds	r2, r1, #0
   258ee:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   258f0:	2330      	movs	r3, #48	; 0x30
   258f2:	18fb      	adds	r3, r7, r3
   258f4:	881b      	ldrh	r3, [r3, #0]
   258f6:	2b00      	cmp	r3, #0
   258f8:	d100      	bne.n	258fc <Socket_ReadSocketData+0x28>
   258fa:	e0d7      	b.n	25aac <Socket_ReadSocketData+0x1d8>
   258fc:	230f      	movs	r3, #15
   258fe:	18fb      	adds	r3, r7, r3
   25900:	2200      	movs	r2, #0
   25902:	569a      	ldrsb	r2, [r3, r2]
   25904:	4b6b      	ldr	r3, [pc, #428]	; (25ab4 <Socket_ReadSocketData+0x1e0>)
   25906:	0112      	lsls	r2, r2, #4
   25908:	58d3      	ldr	r3, [r2, r3]
   2590a:	2b00      	cmp	r3, #0
   2590c:	d100      	bne.n	25910 <Socket_ReadSocketData+0x3c>
   2590e:	e0cd      	b.n	25aac <Socket_ReadSocketData+0x1d8>
   25910:	230f      	movs	r3, #15
   25912:	18fb      	adds	r3, r7, r3
   25914:	781b      	ldrb	r3, [r3, #0]
   25916:	b25b      	sxtb	r3, r3
   25918:	4a66      	ldr	r2, [pc, #408]	; (25ab4 <Socket_ReadSocketData+0x1e0>)
   2591a:	011b      	lsls	r3, r3, #4
   2591c:	18d3      	adds	r3, r2, r3
   2591e:	3304      	adds	r3, #4
   25920:	881b      	ldrh	r3, [r3, #0]
   25922:	b29b      	uxth	r3, r3
   25924:	2b00      	cmp	r3, #0
   25926:	d100      	bne.n	2592a <Socket_ReadSocketData+0x56>
   25928:	e0c0      	b.n	25aac <Socket_ReadSocketData+0x1d8>
   2592a:	230f      	movs	r3, #15
   2592c:	18fb      	adds	r3, r7, r3
   2592e:	781b      	ldrb	r3, [r3, #0]
   25930:	b25b      	sxtb	r3, r3
   25932:	4a60      	ldr	r2, [pc, #384]	; (25ab4 <Socket_ReadSocketData+0x1e0>)
   25934:	011b      	lsls	r3, r3, #4
   25936:	18d3      	adds	r3, r2, r3
   25938:	330a      	adds	r3, #10
   2593a:	781b      	ldrb	r3, [r3, #0]
   2593c:	b2db      	uxtb	r3, r3
   2593e:	2b01      	cmp	r3, #1
   25940:	d000      	beq.n	25944 <Socket_ReadSocketData+0x70>
   25942:	e0b3      	b.n	25aac <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   25944:	687b      	ldr	r3, [r7, #4]
   25946:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   25948:	68bb      	ldr	r3, [r7, #8]
   2594a:	2230      	movs	r2, #48	; 0x30
   2594c:	18ba      	adds	r2, r7, r2
   2594e:	8812      	ldrh	r2, [r2, #0]
   25950:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   25952:	2319      	movs	r3, #25
   25954:	18fb      	adds	r3, r7, r3
   25956:	2201      	movs	r2, #1
   25958:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   2595a:	231a      	movs	r3, #26
   2595c:	18fb      	adds	r3, r7, r3
   2595e:	2230      	movs	r2, #48	; 0x30
   25960:	18ba      	adds	r2, r7, r2
   25962:	8812      	ldrh	r2, [r2, #0]
   25964:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   25966:	230f      	movs	r3, #15
   25968:	18fb      	adds	r3, r7, r3
   2596a:	781b      	ldrb	r3, [r3, #0]
   2596c:	b25b      	sxtb	r3, r3
   2596e:	4a51      	ldr	r2, [pc, #324]	; (25ab4 <Socket_ReadSocketData+0x1e0>)
   25970:	011b      	lsls	r3, r3, #4
   25972:	18d3      	adds	r3, r2, r3
   25974:	3304      	adds	r3, #4
   25976:	881b      	ldrh	r3, [r3, #0]
   25978:	b29b      	uxth	r3, r3
   2597a:	221a      	movs	r2, #26
   2597c:	18ba      	adds	r2, r7, r2
   2597e:	8812      	ldrh	r2, [r2, #0]
   25980:	1ad3      	subs	r3, r2, r3
   25982:	b29a      	uxth	r2, r3
   25984:	2316      	movs	r3, #22
   25986:	18fb      	adds	r3, r7, r3
   25988:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   2598a:	2316      	movs	r3, #22
   2598c:	18fb      	adds	r3, r7, r3
   2598e:	2200      	movs	r2, #0
   25990:	5e9b      	ldrsh	r3, [r3, r2]
   25992:	2b00      	cmp	r3, #0
   25994:	dd0f      	ble.n	259b6 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   25996:	2319      	movs	r3, #25
   25998:	18fb      	adds	r3, r7, r3
   2599a:	2200      	movs	r2, #0
   2599c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   2599e:	230f      	movs	r3, #15
   259a0:	18fb      	adds	r3, r7, r3
   259a2:	2200      	movs	r2, #0
   259a4:	569a      	ldrsb	r2, [r3, r2]
   259a6:	231a      	movs	r3, #26
   259a8:	18fb      	adds	r3, r7, r3
   259aa:	4942      	ldr	r1, [pc, #264]	; (25ab4 <Socket_ReadSocketData+0x1e0>)
   259ac:	0112      	lsls	r2, r2, #4
   259ae:	188a      	adds	r2, r1, r2
   259b0:	3204      	adds	r2, #4
   259b2:	8812      	ldrh	r2, [r2, #0]
   259b4:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   259b6:	230f      	movs	r3, #15
   259b8:	18fb      	adds	r3, r7, r3
   259ba:	2200      	movs	r2, #0
   259bc:	569a      	ldrsb	r2, [r3, r2]
   259be:	4b3d      	ldr	r3, [pc, #244]	; (25ab4 <Socket_ReadSocketData+0x1e0>)
   259c0:	0112      	lsls	r2, r2, #4
   259c2:	58d1      	ldr	r1, [r2, r3]
   259c4:	2319      	movs	r3, #25
   259c6:	18fb      	adds	r3, r7, r3
   259c8:	781c      	ldrb	r4, [r3, #0]
   259ca:	231a      	movs	r3, #26
   259cc:	18fb      	adds	r3, r7, r3
   259ce:	881a      	ldrh	r2, [r3, #0]
   259d0:	69f8      	ldr	r0, [r7, #28]
   259d2:	0023      	movs	r3, r4
   259d4:	4c38      	ldr	r4, [pc, #224]	; (25ab8 <Socket_ReadSocketData+0x1e4>)
   259d6:	47a0      	blx	r4
   259d8:	1e03      	subs	r3, r0, #0
   259da:	d14f      	bne.n	25a7c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   259dc:	230f      	movs	r3, #15
   259de:	18fb      	adds	r3, r7, r3
   259e0:	2200      	movs	r2, #0
   259e2:	569a      	ldrsb	r2, [r3, r2]
   259e4:	4b33      	ldr	r3, [pc, #204]	; (25ab4 <Socket_ReadSocketData+0x1e0>)
   259e6:	0112      	lsls	r2, r2, #4
   259e8:	58d2      	ldr	r2, [r2, r3]
   259ea:	68bb      	ldr	r3, [r7, #8]
   259ec:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   259ee:	231a      	movs	r3, #26
   259f0:	18fb      	adds	r3, r7, r3
   259f2:	2200      	movs	r2, #0
   259f4:	5e9a      	ldrsh	r2, [r3, r2]
   259f6:	68bb      	ldr	r3, [r7, #8]
   259f8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   259fa:	68bb      	ldr	r3, [r7, #8]
   259fc:	88da      	ldrh	r2, [r3, #6]
   259fe:	231a      	movs	r3, #26
   25a00:	18fb      	adds	r3, r7, r3
   25a02:	881b      	ldrh	r3, [r3, #0]
   25a04:	1ad3      	subs	r3, r2, r3
   25a06:	b29a      	uxth	r2, r3
   25a08:	68bb      	ldr	r3, [r7, #8]
   25a0a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   25a0c:	4b2b      	ldr	r3, [pc, #172]	; (25abc <Socket_ReadSocketData+0x1e8>)
   25a0e:	681b      	ldr	r3, [r3, #0]
   25a10:	2b00      	cmp	r3, #0
   25a12:	d00b      	beq.n	25a2c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   25a14:	4b29      	ldr	r3, [pc, #164]	; (25abc <Socket_ReadSocketData+0x1e8>)
   25a16:	681b      	ldr	r3, [r3, #0]
   25a18:	68bc      	ldr	r4, [r7, #8]
   25a1a:	220e      	movs	r2, #14
   25a1c:	18ba      	adds	r2, r7, r2
   25a1e:	7811      	ldrb	r1, [r2, #0]
   25a20:	220f      	movs	r2, #15
   25a22:	18ba      	adds	r2, r7, r2
   25a24:	2000      	movs	r0, #0
   25a26:	5610      	ldrsb	r0, [r2, r0]
   25a28:	0022      	movs	r2, r4
   25a2a:	4798      	blx	r3

				u16ReadCount -= u16Read;
   25a2c:	2330      	movs	r3, #48	; 0x30
   25a2e:	18f9      	adds	r1, r7, r3
   25a30:	2330      	movs	r3, #48	; 0x30
   25a32:	18fa      	adds	r2, r7, r3
   25a34:	231a      	movs	r3, #26
   25a36:	18fb      	adds	r3, r7, r3
   25a38:	8812      	ldrh	r2, [r2, #0]
   25a3a:	881b      	ldrh	r3, [r3, #0]
   25a3c:	1ad3      	subs	r3, r2, r3
   25a3e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   25a40:	231a      	movs	r3, #26
   25a42:	18fb      	adds	r3, r7, r3
   25a44:	881b      	ldrh	r3, [r3, #0]
   25a46:	69fa      	ldr	r2, [r7, #28]
   25a48:	18d3      	adds	r3, r2, r3
   25a4a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   25a4c:	230f      	movs	r3, #15
   25a4e:	18fb      	adds	r3, r7, r3
   25a50:	781b      	ldrb	r3, [r3, #0]
   25a52:	b25b      	sxtb	r3, r3
   25a54:	4a17      	ldr	r2, [pc, #92]	; (25ab4 <Socket_ReadSocketData+0x1e0>)
   25a56:	011b      	lsls	r3, r3, #4
   25a58:	18d3      	adds	r3, r2, r3
   25a5a:	330a      	adds	r3, #10
   25a5c:	781b      	ldrb	r3, [r3, #0]
   25a5e:	b2db      	uxtb	r3, r3
   25a60:	2b00      	cmp	r3, #0
   25a62:	d11c      	bne.n	25a9e <Socket_ReadSocketData+0x1ca>
   25a64:	2330      	movs	r3, #48	; 0x30
   25a66:	18fb      	adds	r3, r7, r3
   25a68:	881b      	ldrh	r3, [r3, #0]
   25a6a:	2b00      	cmp	r3, #0
   25a6c:	d017      	beq.n	25a9e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25a6e:	2301      	movs	r3, #1
   25a70:	2200      	movs	r2, #0
   25a72:	2100      	movs	r1, #0
   25a74:	2000      	movs	r0, #0
   25a76:	4c10      	ldr	r4, [pc, #64]	; (25ab8 <Socket_ReadSocketData+0x1e4>)
   25a78:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   25a7a:	e017      	b.n	25aac <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   25a7c:	4b10      	ldr	r3, [pc, #64]	; (25ac0 <Socket_ReadSocketData+0x1ec>)
   25a7e:	0018      	movs	r0, r3
   25a80:	4b10      	ldr	r3, [pc, #64]	; (25ac4 <Socket_ReadSocketData+0x1f0>)
   25a82:	4798      	blx	r3
   25a84:	2330      	movs	r3, #48	; 0x30
   25a86:	18fb      	adds	r3, r7, r3
   25a88:	881a      	ldrh	r2, [r3, #0]
   25a8a:	4b0f      	ldr	r3, [pc, #60]	; (25ac8 <Socket_ReadSocketData+0x1f4>)
   25a8c:	0011      	movs	r1, r2
   25a8e:	0018      	movs	r0, r3
   25a90:	4b0c      	ldr	r3, [pc, #48]	; (25ac4 <Socket_ReadSocketData+0x1f0>)
   25a92:	4798      	blx	r3
   25a94:	4b0d      	ldr	r3, [pc, #52]	; (25acc <Socket_ReadSocketData+0x1f8>)
   25a96:	0018      	movs	r0, r3
   25a98:	4b0a      	ldr	r3, [pc, #40]	; (25ac4 <Socket_ReadSocketData+0x1f0>)
   25a9a:	4798      	blx	r3
				break;
   25a9c:	e006      	b.n	25aac <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   25a9e:	2330      	movs	r3, #48	; 0x30
   25aa0:	18fb      	adds	r3, r7, r3
   25aa2:	881b      	ldrh	r3, [r3, #0]
   25aa4:	2b00      	cmp	r3, #0
   25aa6:	d000      	beq.n	25aaa <Socket_ReadSocketData+0x1d6>
   25aa8:	e753      	b.n	25952 <Socket_ReadSocketData+0x7e>
	}
}
   25aaa:	e7ff      	b.n	25aac <Socket_ReadSocketData+0x1d8>
   25aac:	46c0      	nop			; (mov r8, r8)
   25aae:	46bd      	mov	sp, r7
   25ab0:	b009      	add	sp, #36	; 0x24
   25ab2:	bd90      	pop	{r4, r7, pc}
   25ab4:	20005734 	.word	0x20005734
   25ab8:	000222cd 	.word	0x000222cd
   25abc:	200057e4 	.word	0x200057e4
   25ac0:	00039f40 	.word	0x00039f40
   25ac4:	0001ea1d 	.word	0x0001ea1d
   25ac8:	00039f4c 	.word	0x00039f4c
   25acc:	00039f60 	.word	0x00039f60

00025ad0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25ad0:	b590      	push	{r4, r7, lr}
   25ad2:	b0bb      	sub	sp, #236	; 0xec
   25ad4:	af02      	add	r7, sp, #8
   25ad6:	603a      	str	r2, [r7, #0]
   25ad8:	1dfb      	adds	r3, r7, #7
   25ada:	1c02      	adds	r2, r0, #0
   25adc:	701a      	strb	r2, [r3, #0]
   25ade:	1d3b      	adds	r3, r7, #4
   25ae0:	1c0a      	adds	r2, r1, #0
   25ae2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25ae4:	1dfb      	adds	r3, r7, #7
   25ae6:	781b      	ldrb	r3, [r3, #0]
   25ae8:	2b41      	cmp	r3, #65	; 0x41
   25aea:	d003      	beq.n	25af4 <m2m_ip_cb+0x24>
   25aec:	1dfb      	adds	r3, r7, #7
   25aee:	781b      	ldrb	r3, [r3, #0]
   25af0:	2b54      	cmp	r3, #84	; 0x54
   25af2:	d120      	bne.n	25b36 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25af4:	23cc      	movs	r3, #204	; 0xcc
   25af6:	18f9      	adds	r1, r7, r3
   25af8:	6838      	ldr	r0, [r7, #0]
   25afa:	2300      	movs	r3, #0
   25afc:	2204      	movs	r2, #4
   25afe:	4c98      	ldr	r4, [pc, #608]	; (25d60 <m2m_ip_cb+0x290>)
   25b00:	47a0      	blx	r4
   25b02:	1e03      	subs	r3, r0, #0
   25b04:	d000      	beq.n	25b08 <m2m_ip_cb+0x38>
   25b06:	e275      	b.n	25ff4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   25b08:	23cc      	movs	r3, #204	; 0xcc
   25b0a:	18fb      	adds	r3, r7, r3
   25b0c:	2201      	movs	r2, #1
   25b0e:	569a      	ldrsb	r2, [r3, r2]
   25b10:	23c8      	movs	r3, #200	; 0xc8
   25b12:	18fb      	adds	r3, r7, r3
   25b14:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25b16:	4b93      	ldr	r3, [pc, #588]	; (25d64 <m2m_ip_cb+0x294>)
   25b18:	681b      	ldr	r3, [r3, #0]
   25b1a:	2b00      	cmp	r3, #0
   25b1c:	d100      	bne.n	25b20 <m2m_ip_cb+0x50>
   25b1e:	e269      	b.n	25ff4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   25b20:	4b90      	ldr	r3, [pc, #576]	; (25d64 <m2m_ip_cb+0x294>)
   25b22:	681b      	ldr	r3, [r3, #0]
   25b24:	22cc      	movs	r2, #204	; 0xcc
   25b26:	18ba      	adds	r2, r7, r2
   25b28:	2000      	movs	r0, #0
   25b2a:	5610      	ldrsb	r0, [r2, r0]
   25b2c:	22c8      	movs	r2, #200	; 0xc8
   25b2e:	18ba      	adds	r2, r7, r2
   25b30:	2101      	movs	r1, #1
   25b32:	4798      	blx	r3
	{
   25b34:	e25e      	b.n	25ff4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   25b36:	1dfb      	adds	r3, r7, #7
   25b38:	781b      	ldrb	r3, [r3, #0]
   25b3a:	2b42      	cmp	r3, #66	; 0x42
   25b3c:	d120      	bne.n	25b80 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   25b3e:	23c4      	movs	r3, #196	; 0xc4
   25b40:	18f9      	adds	r1, r7, r3
   25b42:	6838      	ldr	r0, [r7, #0]
   25b44:	2300      	movs	r3, #0
   25b46:	2204      	movs	r2, #4
   25b48:	4c85      	ldr	r4, [pc, #532]	; (25d60 <m2m_ip_cb+0x290>)
   25b4a:	47a0      	blx	r4
   25b4c:	1e03      	subs	r3, r0, #0
   25b4e:	d000      	beq.n	25b52 <m2m_ip_cb+0x82>
   25b50:	e257      	b.n	26002 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   25b52:	23c4      	movs	r3, #196	; 0xc4
   25b54:	18fb      	adds	r3, r7, r3
   25b56:	2201      	movs	r2, #1
   25b58:	569a      	ldrsb	r2, [r3, r2]
   25b5a:	23c0      	movs	r3, #192	; 0xc0
   25b5c:	18fb      	adds	r3, r7, r3
   25b5e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25b60:	4b80      	ldr	r3, [pc, #512]	; (25d64 <m2m_ip_cb+0x294>)
   25b62:	681b      	ldr	r3, [r3, #0]
   25b64:	2b00      	cmp	r3, #0
   25b66:	d100      	bne.n	25b6a <m2m_ip_cb+0x9a>
   25b68:	e24b      	b.n	26002 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   25b6a:	4b7e      	ldr	r3, [pc, #504]	; (25d64 <m2m_ip_cb+0x294>)
   25b6c:	681b      	ldr	r3, [r3, #0]
   25b6e:	22c4      	movs	r2, #196	; 0xc4
   25b70:	18ba      	adds	r2, r7, r2
   25b72:	2000      	movs	r0, #0
   25b74:	5610      	ldrsb	r0, [r2, r0]
   25b76:	22c0      	movs	r2, #192	; 0xc0
   25b78:	18ba      	adds	r2, r7, r2
   25b7a:	2102      	movs	r1, #2
   25b7c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   25b7e:	e240      	b.n	26002 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   25b80:	1dfb      	adds	r3, r7, #7
   25b82:	781b      	ldrb	r3, [r3, #0]
   25b84:	2b43      	cmp	r3, #67	; 0x43
   25b86:	d000      	beq.n	25b8a <m2m_ip_cb+0xba>
   25b88:	e086      	b.n	25c98 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   25b8a:	23b4      	movs	r3, #180	; 0xb4
   25b8c:	18f9      	adds	r1, r7, r3
   25b8e:	6838      	ldr	r0, [r7, #0]
   25b90:	2300      	movs	r3, #0
   25b92:	220c      	movs	r2, #12
   25b94:	4c72      	ldr	r4, [pc, #456]	; (25d60 <m2m_ip_cb+0x290>)
   25b96:	47a0      	blx	r4
   25b98:	1e03      	subs	r3, r0, #0
   25b9a:	d000      	beq.n	25b9e <m2m_ip_cb+0xce>
   25b9c:	e231      	b.n	26002 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   25b9e:	23b4      	movs	r3, #180	; 0xb4
   25ba0:	18fb      	adds	r3, r7, r3
   25ba2:	7a5b      	ldrb	r3, [r3, #9]
   25ba4:	b25b      	sxtb	r3, r3
   25ba6:	2b00      	cmp	r3, #0
   25ba8:	db4f      	blt.n	25c4a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   25baa:	23b4      	movs	r3, #180	; 0xb4
   25bac:	18fb      	adds	r3, r7, r3
   25bae:	7a5b      	ldrb	r3, [r3, #9]
   25bb0:	b25b      	sxtb	r3, r3
   25bb2:	0018      	movs	r0, r3
   25bb4:	23b4      	movs	r3, #180	; 0xb4
   25bb6:	18fb      	adds	r3, r7, r3
   25bb8:	7a1b      	ldrb	r3, [r3, #8]
   25bba:	b25b      	sxtb	r3, r3
   25bbc:	4a6a      	ldr	r2, [pc, #424]	; (25d68 <m2m_ip_cb+0x298>)
   25bbe:	011b      	lsls	r3, r3, #4
   25bc0:	18d3      	adds	r3, r2, r3
   25bc2:	330b      	adds	r3, #11
   25bc4:	781b      	ldrb	r3, [r3, #0]
   25bc6:	b2d9      	uxtb	r1, r3
   25bc8:	4a67      	ldr	r2, [pc, #412]	; (25d68 <m2m_ip_cb+0x298>)
   25bca:	0103      	lsls	r3, r0, #4
   25bcc:	18d3      	adds	r3, r2, r3
   25bce:	330b      	adds	r3, #11
   25bd0:	1c0a      	adds	r2, r1, #0
   25bd2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25bd4:	23b4      	movs	r3, #180	; 0xb4
   25bd6:	18fb      	adds	r3, r7, r3
   25bd8:	7a5b      	ldrb	r3, [r3, #9]
   25bda:	b25b      	sxtb	r3, r3
   25bdc:	4a62      	ldr	r2, [pc, #392]	; (25d68 <m2m_ip_cb+0x298>)
   25bde:	011b      	lsls	r3, r3, #4
   25be0:	18d3      	adds	r3, r2, r3
   25be2:	330a      	adds	r3, #10
   25be4:	2201      	movs	r2, #1
   25be6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25be8:	23b4      	movs	r3, #180	; 0xb4
   25bea:	18fb      	adds	r3, r7, r3
   25bec:	7a5b      	ldrb	r3, [r3, #9]
   25bee:	b25b      	sxtb	r3, r3
   25bf0:	0018      	movs	r0, r3
   25bf2:	23b4      	movs	r3, #180	; 0xb4
   25bf4:	18fb      	adds	r3, r7, r3
   25bf6:	895b      	ldrh	r3, [r3, #10]
   25bf8:	3b08      	subs	r3, #8
   25bfa:	b299      	uxth	r1, r3
   25bfc:	4a5a      	ldr	r2, [pc, #360]	; (25d68 <m2m_ip_cb+0x298>)
   25bfe:	0103      	lsls	r3, r0, #4
   25c00:	18d3      	adds	r3, r2, r3
   25c02:	3308      	adds	r3, #8
   25c04:	1c0a      	adds	r2, r1, #0
   25c06:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   25c08:	4b58      	ldr	r3, [pc, #352]	; (25d6c <m2m_ip_cb+0x29c>)
   25c0a:	881b      	ldrh	r3, [r3, #0]
   25c0c:	b29b      	uxth	r3, r3
   25c0e:	3301      	adds	r3, #1
   25c10:	b29a      	uxth	r2, r3
   25c12:	4b56      	ldr	r3, [pc, #344]	; (25d6c <m2m_ip_cb+0x29c>)
   25c14:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   25c16:	4b55      	ldr	r3, [pc, #340]	; (25d6c <m2m_ip_cb+0x29c>)
   25c18:	881b      	ldrh	r3, [r3, #0]
   25c1a:	b29b      	uxth	r3, r3
   25c1c:	2b00      	cmp	r3, #0
   25c1e:	d106      	bne.n	25c2e <m2m_ip_cb+0x15e>
					++gu16SessionID;
   25c20:	4b52      	ldr	r3, [pc, #328]	; (25d6c <m2m_ip_cb+0x29c>)
   25c22:	881b      	ldrh	r3, [r3, #0]
   25c24:	b29b      	uxth	r3, r3
   25c26:	3301      	adds	r3, #1
   25c28:	b29a      	uxth	r2, r3
   25c2a:	4b50      	ldr	r3, [pc, #320]	; (25d6c <m2m_ip_cb+0x29c>)
   25c2c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   25c2e:	23b4      	movs	r3, #180	; 0xb4
   25c30:	18fb      	adds	r3, r7, r3
   25c32:	7a5b      	ldrb	r3, [r3, #9]
   25c34:	b25b      	sxtb	r3, r3
   25c36:	0018      	movs	r0, r3
   25c38:	4b4c      	ldr	r3, [pc, #304]	; (25d6c <m2m_ip_cb+0x29c>)
   25c3a:	881b      	ldrh	r3, [r3, #0]
   25c3c:	b299      	uxth	r1, r3
   25c3e:	4a4a      	ldr	r2, [pc, #296]	; (25d68 <m2m_ip_cb+0x298>)
   25c40:	0103      	lsls	r3, r0, #4
   25c42:	18d3      	adds	r3, r2, r3
   25c44:	3306      	adds	r3, #6
   25c46:	1c0a      	adds	r2, r1, #0
   25c48:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   25c4a:	23b4      	movs	r3, #180	; 0xb4
   25c4c:	18fb      	adds	r3, r7, r3
   25c4e:	2209      	movs	r2, #9
   25c50:	569a      	ldrsb	r2, [r3, r2]
   25c52:	23a0      	movs	r3, #160	; 0xa0
   25c54:	18fb      	adds	r3, r7, r3
   25c56:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   25c58:	23a0      	movs	r3, #160	; 0xa0
   25c5a:	18fb      	adds	r3, r7, r3
   25c5c:	2202      	movs	r2, #2
   25c5e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   25c60:	23b4      	movs	r3, #180	; 0xb4
   25c62:	18fb      	adds	r3, r7, r3
   25c64:	885a      	ldrh	r2, [r3, #2]
   25c66:	23a0      	movs	r3, #160	; 0xa0
   25c68:	18fb      	adds	r3, r7, r3
   25c6a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   25c6c:	23b4      	movs	r3, #180	; 0xb4
   25c6e:	18fb      	adds	r3, r7, r3
   25c70:	685a      	ldr	r2, [r3, #4]
   25c72:	23a0      	movs	r3, #160	; 0xa0
   25c74:	18fb      	adds	r3, r7, r3
   25c76:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   25c78:	4b3a      	ldr	r3, [pc, #232]	; (25d64 <m2m_ip_cb+0x294>)
   25c7a:	681b      	ldr	r3, [r3, #0]
   25c7c:	2b00      	cmp	r3, #0
   25c7e:	d100      	bne.n	25c82 <m2m_ip_cb+0x1b2>
   25c80:	e1bf      	b.n	26002 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   25c82:	4b38      	ldr	r3, [pc, #224]	; (25d64 <m2m_ip_cb+0x294>)
   25c84:	681b      	ldr	r3, [r3, #0]
   25c86:	22b4      	movs	r2, #180	; 0xb4
   25c88:	18ba      	adds	r2, r7, r2
   25c8a:	2008      	movs	r0, #8
   25c8c:	5610      	ldrsb	r0, [r2, r0]
   25c8e:	22a0      	movs	r2, #160	; 0xa0
   25c90:	18ba      	adds	r2, r7, r2
   25c92:	2104      	movs	r1, #4
   25c94:	4798      	blx	r3
}
   25c96:	e1b4      	b.n	26002 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   25c98:	1dfb      	adds	r3, r7, #7
   25c9a:	781b      	ldrb	r3, [r3, #0]
   25c9c:	2b44      	cmp	r3, #68	; 0x44
   25c9e:	d003      	beq.n	25ca8 <m2m_ip_cb+0x1d8>
   25ca0:	1dfb      	adds	r3, r7, #7
   25ca2:	781b      	ldrb	r3, [r3, #0]
   25ca4:	2b4b      	cmp	r3, #75	; 0x4b
   25ca6:	d13d      	bne.n	25d24 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   25ca8:	239c      	movs	r3, #156	; 0x9c
   25caa:	18f9      	adds	r1, r7, r3
   25cac:	6838      	ldr	r0, [r7, #0]
   25cae:	2300      	movs	r3, #0
   25cb0:	2204      	movs	r2, #4
   25cb2:	4c2b      	ldr	r4, [pc, #172]	; (25d60 <m2m_ip_cb+0x290>)
   25cb4:	47a0      	blx	r4
   25cb6:	1e03      	subs	r3, r0, #0
   25cb8:	d000      	beq.n	25cbc <m2m_ip_cb+0x1ec>
   25cba:	e19d      	b.n	25ff8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   25cbc:	239c      	movs	r3, #156	; 0x9c
   25cbe:	18fb      	adds	r3, r7, r3
   25cc0:	2200      	movs	r2, #0
   25cc2:	569a      	ldrsb	r2, [r3, r2]
   25cc4:	2398      	movs	r3, #152	; 0x98
   25cc6:	18fb      	adds	r3, r7, r3
   25cc8:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   25cca:	239c      	movs	r3, #156	; 0x9c
   25ccc:	18fb      	adds	r3, r7, r3
   25cce:	2201      	movs	r2, #1
   25cd0:	569a      	ldrsb	r2, [r3, r2]
   25cd2:	2398      	movs	r3, #152	; 0x98
   25cd4:	18fb      	adds	r3, r7, r3
   25cd6:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   25cd8:	239c      	movs	r3, #156	; 0x9c
   25cda:	18fb      	adds	r3, r7, r3
   25cdc:	785b      	ldrb	r3, [r3, #1]
   25cde:	b25b      	sxtb	r3, r3
   25ce0:	2b00      	cmp	r3, #0
   25ce2:	d10f      	bne.n	25d04 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25ce4:	239c      	movs	r3, #156	; 0x9c
   25ce6:	18fb      	adds	r3, r7, r3
   25ce8:	781b      	ldrb	r3, [r3, #0]
   25cea:	b25b      	sxtb	r3, r3
   25cec:	0018      	movs	r0, r3
   25cee:	239c      	movs	r3, #156	; 0x9c
   25cf0:	18fb      	adds	r3, r7, r3
   25cf2:	885b      	ldrh	r3, [r3, #2]
   25cf4:	3b08      	subs	r3, #8
   25cf6:	b299      	uxth	r1, r3
   25cf8:	4a1b      	ldr	r2, [pc, #108]	; (25d68 <m2m_ip_cb+0x298>)
   25cfa:	0103      	lsls	r3, r0, #4
   25cfc:	18d3      	adds	r3, r2, r3
   25cfe:	3308      	adds	r3, #8
   25d00:	1c0a      	adds	r2, r1, #0
   25d02:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   25d04:	4b17      	ldr	r3, [pc, #92]	; (25d64 <m2m_ip_cb+0x294>)
   25d06:	681b      	ldr	r3, [r3, #0]
   25d08:	2b00      	cmp	r3, #0
   25d0a:	d100      	bne.n	25d0e <m2m_ip_cb+0x23e>
   25d0c:	e174      	b.n	25ff8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   25d0e:	4b15      	ldr	r3, [pc, #84]	; (25d64 <m2m_ip_cb+0x294>)
   25d10:	681b      	ldr	r3, [r3, #0]
   25d12:	229c      	movs	r2, #156	; 0x9c
   25d14:	18ba      	adds	r2, r7, r2
   25d16:	2000      	movs	r0, #0
   25d18:	5610      	ldrsb	r0, [r2, r0]
   25d1a:	2298      	movs	r2, #152	; 0x98
   25d1c:	18ba      	adds	r2, r7, r2
   25d1e:	2105      	movs	r1, #5
   25d20:	4798      	blx	r3
	{
   25d22:	e169      	b.n	25ff8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   25d24:	1dfb      	adds	r3, r7, #7
   25d26:	781b      	ldrb	r3, [r3, #0]
   25d28:	2b4a      	cmp	r3, #74	; 0x4a
   25d2a:	d123      	bne.n	25d74 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   25d2c:	230c      	movs	r3, #12
   25d2e:	18f9      	adds	r1, r7, r3
   25d30:	6838      	ldr	r0, [r7, #0]
   25d32:	2300      	movs	r3, #0
   25d34:	2244      	movs	r2, #68	; 0x44
   25d36:	4c0a      	ldr	r4, [pc, #40]	; (25d60 <m2m_ip_cb+0x290>)
   25d38:	47a0      	blx	r4
   25d3a:	1e03      	subs	r3, r0, #0
   25d3c:	d000      	beq.n	25d40 <m2m_ip_cb+0x270>
   25d3e:	e160      	b.n	26002 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   25d40:	4b0b      	ldr	r3, [pc, #44]	; (25d70 <m2m_ip_cb+0x2a0>)
   25d42:	681b      	ldr	r3, [r3, #0]
   25d44:	2b00      	cmp	r3, #0
   25d46:	d100      	bne.n	25d4a <m2m_ip_cb+0x27a>
   25d48:	e15b      	b.n	26002 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   25d4a:	4b09      	ldr	r3, [pc, #36]	; (25d70 <m2m_ip_cb+0x2a0>)
   25d4c:	681a      	ldr	r2, [r3, #0]
   25d4e:	230c      	movs	r3, #12
   25d50:	18fb      	adds	r3, r7, r3
   25d52:	6c19      	ldr	r1, [r3, #64]	; 0x40
   25d54:	230c      	movs	r3, #12
   25d56:	18fb      	adds	r3, r7, r3
   25d58:	0018      	movs	r0, r3
   25d5a:	4790      	blx	r2
}
   25d5c:	e151      	b.n	26002 <m2m_ip_cb+0x532>
   25d5e:	46c0      	nop			; (mov r8, r8)
   25d60:	000222cd 	.word	0x000222cd
   25d64:	200057e4 	.word	0x200057e4
   25d68:	20005734 	.word	0x20005734
   25d6c:	20003eea 	.word	0x20003eea
   25d70:	200057ec 	.word	0x200057ec
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   25d74:	1dfb      	adds	r3, r7, #7
   25d76:	781b      	ldrb	r3, [r3, #0]
   25d78:	2b46      	cmp	r3, #70	; 0x46
   25d7a:	d008      	beq.n	25d8e <m2m_ip_cb+0x2be>
   25d7c:	1dfb      	adds	r3, r7, #7
   25d7e:	781b      	ldrb	r3, [r3, #0]
   25d80:	2b48      	cmp	r3, #72	; 0x48
   25d82:	d004      	beq.n	25d8e <m2m_ip_cb+0x2be>
   25d84:	1dfb      	adds	r3, r7, #7
   25d86:	781b      	ldrb	r3, [r3, #0]
   25d88:	2b4d      	cmp	r3, #77	; 0x4d
   25d8a:	d000      	beq.n	25d8e <m2m_ip_cb+0x2be>
   25d8c:	e0b4      	b.n	25ef8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   25d8e:	23df      	movs	r3, #223	; 0xdf
   25d90:	18fb      	adds	r3, r7, r3
   25d92:	2206      	movs	r2, #6
   25d94:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   25d96:	1dfb      	adds	r3, r7, #7
   25d98:	781b      	ldrb	r3, [r3, #0]
   25d9a:	2b48      	cmp	r3, #72	; 0x48
   25d9c:	d103      	bne.n	25da6 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   25d9e:	23df      	movs	r3, #223	; 0xdf
   25da0:	18fb      	adds	r3, r7, r3
   25da2:	2209      	movs	r2, #9
   25da4:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   25da6:	23d8      	movs	r3, #216	; 0xd8
   25da8:	18fb      	adds	r3, r7, r3
   25daa:	2210      	movs	r2, #16
   25dac:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   25dae:	23d8      	movs	r3, #216	; 0xd8
   25db0:	18fb      	adds	r3, r7, r3
   25db2:	881a      	ldrh	r2, [r3, #0]
   25db4:	2388      	movs	r3, #136	; 0x88
   25db6:	18f9      	adds	r1, r7, r3
   25db8:	6838      	ldr	r0, [r7, #0]
   25dba:	2300      	movs	r3, #0
   25dbc:	4c93      	ldr	r4, [pc, #588]	; (2600c <m2m_ip_cb+0x53c>)
   25dbe:	47a0      	blx	r4
   25dc0:	1e03      	subs	r3, r0, #0
   25dc2:	d000      	beq.n	25dc6 <m2m_ip_cb+0x2f6>
   25dc4:	e11a      	b.n	25ffc <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   25dc6:	23d6      	movs	r3, #214	; 0xd6
   25dc8:	18fb      	adds	r3, r7, r3
   25dca:	2200      	movs	r2, #0
   25dcc:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   25dce:	23d5      	movs	r3, #213	; 0xd5
   25dd0:	18fb      	adds	r3, r7, r3
   25dd2:	2288      	movs	r2, #136	; 0x88
   25dd4:	18ba      	adds	r2, r7, r2
   25dd6:	7b12      	ldrb	r2, [r2, #12]
   25dd8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   25dda:	23d6      	movs	r3, #214	; 0xd6
   25ddc:	18fb      	adds	r3, r7, r3
   25dde:	2288      	movs	r2, #136	; 0x88
   25de0:	18ba      	adds	r2, r7, r2
   25de2:	89d2      	ldrh	r2, [r2, #14]
   25de4:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   25de6:	23d5      	movs	r3, #213	; 0xd5
   25de8:	18fb      	adds	r3, r7, r3
   25dea:	781b      	ldrb	r3, [r3, #0]
   25dec:	b25b      	sxtb	r3, r3
   25dee:	4a88      	ldr	r2, [pc, #544]	; (26010 <m2m_ip_cb+0x540>)
   25df0:	011b      	lsls	r3, r3, #4
   25df2:	18d3      	adds	r3, r2, r3
   25df4:	330c      	adds	r3, #12
   25df6:	2200      	movs	r2, #0
   25df8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   25dfa:	23d2      	movs	r3, #210	; 0xd2
   25dfc:	18fb      	adds	r3, r7, r3
   25dfe:	2288      	movs	r2, #136	; 0x88
   25e00:	18ba      	adds	r2, r7, r2
   25e02:	8912      	ldrh	r2, [r2, #8]
   25e04:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   25e06:	23d0      	movs	r3, #208	; 0xd0
   25e08:	18fb      	adds	r3, r7, r3
   25e0a:	2288      	movs	r2, #136	; 0x88
   25e0c:	18ba      	adds	r2, r7, r2
   25e0e:	8952      	ldrh	r2, [r2, #10]
   25e10:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   25e12:	2388      	movs	r3, #136	; 0x88
   25e14:	18fb      	adds	r3, r7, r3
   25e16:	885a      	ldrh	r2, [r3, #2]
   25e18:	2370      	movs	r3, #112	; 0x70
   25e1a:	18fb      	adds	r3, r7, r3
   25e1c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   25e1e:	2388      	movs	r3, #136	; 0x88
   25e20:	18fb      	adds	r3, r7, r3
   25e22:	685a      	ldr	r2, [r3, #4]
   25e24:	2370      	movs	r3, #112	; 0x70
   25e26:	18fb      	adds	r3, r7, r3
   25e28:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25e2a:	23d5      	movs	r3, #213	; 0xd5
   25e2c:	18fb      	adds	r3, r7, r3
   25e2e:	781b      	ldrb	r3, [r3, #0]
   25e30:	b25b      	sxtb	r3, r3
   25e32:	4a77      	ldr	r2, [pc, #476]	; (26010 <m2m_ip_cb+0x540>)
   25e34:	011b      	lsls	r3, r3, #4
   25e36:	18d3      	adds	r3, r2, r3
   25e38:	3306      	adds	r3, #6
   25e3a:	881b      	ldrh	r3, [r3, #0]
   25e3c:	b29b      	uxth	r3, r3
   25e3e:	22d6      	movs	r2, #214	; 0xd6
   25e40:	18ba      	adds	r2, r7, r2
   25e42:	8812      	ldrh	r2, [r2, #0]
   25e44:	429a      	cmp	r2, r3
   25e46:	d148      	bne.n	25eda <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   25e48:	23d2      	movs	r3, #210	; 0xd2
   25e4a:	18fb      	adds	r3, r7, r3
   25e4c:	2200      	movs	r2, #0
   25e4e:	5e9b      	ldrsh	r3, [r3, r2]
   25e50:	2b00      	cmp	r3, #0
   25e52:	dd25      	ble.n	25ea0 <m2m_ip_cb+0x3d0>
   25e54:	23d2      	movs	r3, #210	; 0xd2
   25e56:	18fb      	adds	r3, r7, r3
   25e58:	2200      	movs	r2, #0
   25e5a:	5e9a      	ldrsh	r2, [r3, r2]
   25e5c:	1d3b      	adds	r3, r7, #4
   25e5e:	881b      	ldrh	r3, [r3, #0]
   25e60:	429a      	cmp	r2, r3
   25e62:	da1d      	bge.n	25ea0 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   25e64:	23d0      	movs	r3, #208	; 0xd0
   25e66:	18fb      	adds	r3, r7, r3
   25e68:	881b      	ldrh	r3, [r3, #0]
   25e6a:	683a      	ldr	r2, [r7, #0]
   25e6c:	18d3      	adds	r3, r2, r3
   25e6e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   25e70:	23d8      	movs	r3, #216	; 0xd8
   25e72:	18fb      	adds	r3, r7, r3
   25e74:	22d2      	movs	r2, #210	; 0xd2
   25e76:	18ba      	adds	r2, r7, r2
   25e78:	8812      	ldrh	r2, [r2, #0]
   25e7a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   25e7c:	683c      	ldr	r4, [r7, #0]
   25e7e:	23df      	movs	r3, #223	; 0xdf
   25e80:	18fb      	adds	r3, r7, r3
   25e82:	781a      	ldrb	r2, [r3, #0]
   25e84:	2370      	movs	r3, #112	; 0x70
   25e86:	18f9      	adds	r1, r7, r3
   25e88:	23d5      	movs	r3, #213	; 0xd5
   25e8a:	18fb      	adds	r3, r7, r3
   25e8c:	2000      	movs	r0, #0
   25e8e:	5618      	ldrsb	r0, [r3, r0]
   25e90:	23d8      	movs	r3, #216	; 0xd8
   25e92:	18fb      	adds	r3, r7, r3
   25e94:	881b      	ldrh	r3, [r3, #0]
   25e96:	9300      	str	r3, [sp, #0]
   25e98:	0023      	movs	r3, r4
   25e9a:	4c5e      	ldr	r4, [pc, #376]	; (26014 <m2m_ip_cb+0x544>)
   25e9c:	47a0      	blx	r4
	{
   25e9e:	e0ad      	b.n	25ffc <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   25ea0:	2370      	movs	r3, #112	; 0x70
   25ea2:	18fb      	adds	r3, r7, r3
   25ea4:	22d2      	movs	r2, #210	; 0xd2
   25ea6:	18ba      	adds	r2, r7, r2
   25ea8:	8812      	ldrh	r2, [r2, #0]
   25eaa:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   25eac:	2370      	movs	r3, #112	; 0x70
   25eae:	18fb      	adds	r3, r7, r3
   25eb0:	2200      	movs	r2, #0
   25eb2:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   25eb4:	4b58      	ldr	r3, [pc, #352]	; (26018 <m2m_ip_cb+0x548>)
   25eb6:	681b      	ldr	r3, [r3, #0]
   25eb8:	2b00      	cmp	r3, #0
   25eba:	d100      	bne.n	25ebe <m2m_ip_cb+0x3ee>
   25ebc:	e09e      	b.n	25ffc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   25ebe:	4b56      	ldr	r3, [pc, #344]	; (26018 <m2m_ip_cb+0x548>)
   25ec0:	681b      	ldr	r3, [r3, #0]
   25ec2:	2270      	movs	r2, #112	; 0x70
   25ec4:	18bc      	adds	r4, r7, r2
   25ec6:	22df      	movs	r2, #223	; 0xdf
   25ec8:	18ba      	adds	r2, r7, r2
   25eca:	7811      	ldrb	r1, [r2, #0]
   25ecc:	22d5      	movs	r2, #213	; 0xd5
   25ece:	18ba      	adds	r2, r7, r2
   25ed0:	2000      	movs	r0, #0
   25ed2:	5610      	ldrsb	r0, [r2, r0]
   25ed4:	0022      	movs	r2, r4
   25ed6:	4798      	blx	r3
	{
   25ed8:	e090      	b.n	25ffc <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   25eda:	23d8      	movs	r3, #216	; 0xd8
   25edc:	18fa      	adds	r2, r7, r3
   25ede:	1d3b      	adds	r3, r7, #4
   25ee0:	8812      	ldrh	r2, [r2, #0]
   25ee2:	881b      	ldrh	r3, [r3, #0]
   25ee4:	429a      	cmp	r2, r3
   25ee6:	d300      	bcc.n	25eea <m2m_ip_cb+0x41a>
   25ee8:	e088      	b.n	25ffc <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25eea:	2301      	movs	r3, #1
   25eec:	2200      	movs	r2, #0
   25eee:	2100      	movs	r1, #0
   25ef0:	2000      	movs	r0, #0
   25ef2:	4c46      	ldr	r4, [pc, #280]	; (2600c <m2m_ip_cb+0x53c>)
   25ef4:	47a0      	blx	r4
	{
   25ef6:	e081      	b.n	25ffc <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   25ef8:	1dfb      	adds	r3, r7, #7
   25efa:	781b      	ldrb	r3, [r3, #0]
   25efc:	2b45      	cmp	r3, #69	; 0x45
   25efe:	d007      	beq.n	25f10 <m2m_ip_cb+0x440>
   25f00:	1dfb      	adds	r3, r7, #7
   25f02:	781b      	ldrb	r3, [r3, #0]
   25f04:	2b47      	cmp	r3, #71	; 0x47
   25f06:	d003      	beq.n	25f10 <m2m_ip_cb+0x440>
   25f08:	1dfb      	adds	r3, r7, #7
   25f0a:	781b      	ldrb	r3, [r3, #0]
   25f0c:	2b4c      	cmp	r3, #76	; 0x4c
   25f0e:	d14c      	bne.n	25faa <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   25f10:	23de      	movs	r3, #222	; 0xde
   25f12:	18fb      	adds	r3, r7, r3
   25f14:	2207      	movs	r2, #7
   25f16:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   25f18:	1dfb      	adds	r3, r7, #7
   25f1a:	781b      	ldrb	r3, [r3, #0]
   25f1c:	2b47      	cmp	r3, #71	; 0x47
   25f1e:	d103      	bne.n	25f28 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   25f20:	23de      	movs	r3, #222	; 0xde
   25f22:	18fb      	adds	r3, r7, r3
   25f24:	2208      	movs	r2, #8
   25f26:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   25f28:	2364      	movs	r3, #100	; 0x64
   25f2a:	18f9      	adds	r1, r7, r3
   25f2c:	6838      	ldr	r0, [r7, #0]
   25f2e:	2300      	movs	r3, #0
   25f30:	2208      	movs	r2, #8
   25f32:	4c36      	ldr	r4, [pc, #216]	; (2600c <m2m_ip_cb+0x53c>)
   25f34:	47a0      	blx	r4
   25f36:	1e03      	subs	r3, r0, #0
   25f38:	d162      	bne.n	26000 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   25f3a:	23dc      	movs	r3, #220	; 0xdc
   25f3c:	18fb      	adds	r3, r7, r3
   25f3e:	2200      	movs	r2, #0
   25f40:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   25f42:	23db      	movs	r3, #219	; 0xdb
   25f44:	18fb      	adds	r3, r7, r3
   25f46:	2264      	movs	r2, #100	; 0x64
   25f48:	18ba      	adds	r2, r7, r2
   25f4a:	7812      	ldrb	r2, [r2, #0]
   25f4c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   25f4e:	23dc      	movs	r3, #220	; 0xdc
   25f50:	18fb      	adds	r3, r7, r3
   25f52:	2264      	movs	r2, #100	; 0x64
   25f54:	18ba      	adds	r2, r7, r2
   25f56:	8892      	ldrh	r2, [r2, #4]
   25f58:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   25f5a:	2364      	movs	r3, #100	; 0x64
   25f5c:	18fb      	adds	r3, r7, r3
   25f5e:	2202      	movs	r2, #2
   25f60:	5e9a      	ldrsh	r2, [r3, r2]
   25f62:	236e      	movs	r3, #110	; 0x6e
   25f64:	18fb      	adds	r3, r7, r3
   25f66:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25f68:	23db      	movs	r3, #219	; 0xdb
   25f6a:	18fb      	adds	r3, r7, r3
   25f6c:	781b      	ldrb	r3, [r3, #0]
   25f6e:	b25b      	sxtb	r3, r3
   25f70:	4a27      	ldr	r2, [pc, #156]	; (26010 <m2m_ip_cb+0x540>)
   25f72:	011b      	lsls	r3, r3, #4
   25f74:	18d3      	adds	r3, r2, r3
   25f76:	3306      	adds	r3, #6
   25f78:	881b      	ldrh	r3, [r3, #0]
   25f7a:	b29b      	uxth	r3, r3
   25f7c:	22dc      	movs	r2, #220	; 0xdc
   25f7e:	18ba      	adds	r2, r7, r2
   25f80:	8812      	ldrh	r2, [r2, #0]
   25f82:	429a      	cmp	r2, r3
   25f84:	d13c      	bne.n	26000 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   25f86:	4b24      	ldr	r3, [pc, #144]	; (26018 <m2m_ip_cb+0x548>)
   25f88:	681b      	ldr	r3, [r3, #0]
   25f8a:	2b00      	cmp	r3, #0
   25f8c:	d038      	beq.n	26000 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   25f8e:	4b22      	ldr	r3, [pc, #136]	; (26018 <m2m_ip_cb+0x548>)
   25f90:	681b      	ldr	r3, [r3, #0]
   25f92:	226e      	movs	r2, #110	; 0x6e
   25f94:	18bc      	adds	r4, r7, r2
   25f96:	22de      	movs	r2, #222	; 0xde
   25f98:	18ba      	adds	r2, r7, r2
   25f9a:	7811      	ldrb	r1, [r2, #0]
   25f9c:	22db      	movs	r2, #219	; 0xdb
   25f9e:	18ba      	adds	r2, r7, r2
   25fa0:	2000      	movs	r0, #0
   25fa2:	5610      	ldrsb	r0, [r2, r0]
   25fa4:	0022      	movs	r2, r4
   25fa6:	4798      	blx	r3
	{
   25fa8:	e02a      	b.n	26000 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   25faa:	1dfb      	adds	r3, r7, #7
   25fac:	781b      	ldrb	r3, [r3, #0]
   25fae:	2b52      	cmp	r3, #82	; 0x52
   25fb0:	d127      	bne.n	26002 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   25fb2:	2350      	movs	r3, #80	; 0x50
   25fb4:	18f9      	adds	r1, r7, r3
   25fb6:	6838      	ldr	r0, [r7, #0]
   25fb8:	2301      	movs	r3, #1
   25fba:	2214      	movs	r2, #20
   25fbc:	4c13      	ldr	r4, [pc, #76]	; (2600c <m2m_ip_cb+0x53c>)
   25fbe:	47a0      	blx	r4
   25fc0:	1e03      	subs	r3, r0, #0
   25fc2:	d11e      	bne.n	26002 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   25fc4:	2350      	movs	r3, #80	; 0x50
   25fc6:	18fb      	adds	r3, r7, r3
   25fc8:	685b      	ldr	r3, [r3, #4]
   25fca:	001a      	movs	r2, r3
   25fcc:	4b13      	ldr	r3, [pc, #76]	; (2601c <m2m_ip_cb+0x54c>)
   25fce:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   25fd0:	4b12      	ldr	r3, [pc, #72]	; (2601c <m2m_ip_cb+0x54c>)
   25fd2:	681b      	ldr	r3, [r3, #0]
   25fd4:	2b00      	cmp	r3, #0
   25fd6:	d014      	beq.n	26002 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   25fd8:	4b10      	ldr	r3, [pc, #64]	; (2601c <m2m_ip_cb+0x54c>)
   25fda:	681c      	ldr	r4, [r3, #0]
   25fdc:	2350      	movs	r3, #80	; 0x50
   25fde:	18fb      	adds	r3, r7, r3
   25fe0:	6818      	ldr	r0, [r3, #0]
   25fe2:	2350      	movs	r3, #80	; 0x50
   25fe4:	18fb      	adds	r3, r7, r3
   25fe6:	6899      	ldr	r1, [r3, #8]
   25fe8:	2350      	movs	r3, #80	; 0x50
   25fea:	18fb      	adds	r3, r7, r3
   25fec:	7c1b      	ldrb	r3, [r3, #16]
   25fee:	001a      	movs	r2, r3
   25ff0:	47a0      	blx	r4
}
   25ff2:	e006      	b.n	26002 <m2m_ip_cb+0x532>
	{
   25ff4:	46c0      	nop			; (mov r8, r8)
   25ff6:	e004      	b.n	26002 <m2m_ip_cb+0x532>
	{
   25ff8:	46c0      	nop			; (mov r8, r8)
   25ffa:	e002      	b.n	26002 <m2m_ip_cb+0x532>
	{
   25ffc:	46c0      	nop			; (mov r8, r8)
   25ffe:	e000      	b.n	26002 <m2m_ip_cb+0x532>
	{
   26000:	46c0      	nop			; (mov r8, r8)
}
   26002:	46c0      	nop			; (mov r8, r8)
   26004:	46bd      	mov	sp, r7
   26006:	b039      	add	sp, #228	; 0xe4
   26008:	bd90      	pop	{r4, r7, pc}
   2600a:	46c0      	nop			; (mov r8, r8)
   2600c:	000222cd 	.word	0x000222cd
   26010:	20005734 	.word	0x20005734
   26014:	000258d5 	.word	0x000258d5
   26018:	200057e4 	.word	0x200057e4
   2601c:	200057e8 	.word	0x200057e8

00026020 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   26020:	b580      	push	{r7, lr}
   26022:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   26024:	4b0c      	ldr	r3, [pc, #48]	; (26058 <socketInit+0x38>)
   26026:	781b      	ldrb	r3, [r3, #0]
   26028:	b2db      	uxtb	r3, r3
   2602a:	2b00      	cmp	r3, #0
   2602c:	d110      	bne.n	26050 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   2602e:	4b0b      	ldr	r3, [pc, #44]	; (2605c <socketInit+0x3c>)
   26030:	22b0      	movs	r2, #176	; 0xb0
   26032:	2100      	movs	r1, #0
   26034:	0018      	movs	r0, r3
   26036:	4b0a      	ldr	r3, [pc, #40]	; (26060 <socketInit+0x40>)
   26038:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   2603a:	4b0a      	ldr	r3, [pc, #40]	; (26064 <socketInit+0x44>)
   2603c:	0019      	movs	r1, r3
   2603e:	2002      	movs	r0, #2
   26040:	4b09      	ldr	r3, [pc, #36]	; (26068 <socketInit+0x48>)
   26042:	4798      	blx	r3
		gbSocketInit	= 1;
   26044:	4b04      	ldr	r3, [pc, #16]	; (26058 <socketInit+0x38>)
   26046:	2201      	movs	r2, #1
   26048:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   2604a:	4b08      	ldr	r3, [pc, #32]	; (2606c <socketInit+0x4c>)
   2604c:	2200      	movs	r2, #0
   2604e:	801a      	strh	r2, [r3, #0]
	}
}
   26050:	46c0      	nop			; (mov r8, r8)
   26052:	46bd      	mov	sp, r7
   26054:	bd80      	pop	{r7, pc}
   26056:	46c0      	nop			; (mov r8, r8)
   26058:	20003eec 	.word	0x20003eec
   2605c:	20005734 	.word	0x20005734
   26060:	00021751 	.word	0x00021751
   26064:	00025ad1 	.word	0x00025ad1
   26068:	0002244d 	.word	0x0002244d
   2606c:	20003eea 	.word	0x20003eea

00026070 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   26070:	b580      	push	{r7, lr}
   26072:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   26074:	4b0a      	ldr	r3, [pc, #40]	; (260a0 <socketDeinit+0x30>)
   26076:	22b0      	movs	r2, #176	; 0xb0
   26078:	2100      	movs	r1, #0
   2607a:	0018      	movs	r0, r3
   2607c:	4b09      	ldr	r3, [pc, #36]	; (260a4 <socketDeinit+0x34>)
   2607e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   26080:	2100      	movs	r1, #0
   26082:	2002      	movs	r0, #2
   26084:	4b08      	ldr	r3, [pc, #32]	; (260a8 <socketDeinit+0x38>)
   26086:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   26088:	4b08      	ldr	r3, [pc, #32]	; (260ac <socketDeinit+0x3c>)
   2608a:	2200      	movs	r2, #0
   2608c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   2608e:	4b08      	ldr	r3, [pc, #32]	; (260b0 <socketDeinit+0x40>)
   26090:	2200      	movs	r2, #0
   26092:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   26094:	4b07      	ldr	r3, [pc, #28]	; (260b4 <socketDeinit+0x44>)
   26096:	2200      	movs	r2, #0
   26098:	701a      	strb	r2, [r3, #0]
}
   2609a:	46c0      	nop			; (mov r8, r8)
   2609c:	46bd      	mov	sp, r7
   2609e:	bd80      	pop	{r7, pc}
   260a0:	20005734 	.word	0x20005734
   260a4:	00021751 	.word	0x00021751
   260a8:	0002244d 	.word	0x0002244d
   260ac:	200057e4 	.word	0x200057e4
   260b0:	200057ec 	.word	0x200057ec
   260b4:	20003eec 	.word	0x20003eec

000260b8 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   260b8:	b580      	push	{r7, lr}
   260ba:	b082      	sub	sp, #8
   260bc:	af00      	add	r7, sp, #0
   260be:	6078      	str	r0, [r7, #4]
   260c0:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   260c2:	4b05      	ldr	r3, [pc, #20]	; (260d8 <registerSocketCallback+0x20>)
   260c4:	687a      	ldr	r2, [r7, #4]
   260c6:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   260c8:	4b04      	ldr	r3, [pc, #16]	; (260dc <registerSocketCallback+0x24>)
   260ca:	683a      	ldr	r2, [r7, #0]
   260cc:	601a      	str	r2, [r3, #0]
}
   260ce:	46c0      	nop			; (mov r8, r8)
   260d0:	46bd      	mov	sp, r7
   260d2:	b002      	add	sp, #8
   260d4:	bd80      	pop	{r7, pc}
   260d6:	46c0      	nop			; (mov r8, r8)
   260d8:	200057e4 	.word	0x200057e4
   260dc:	200057ec 	.word	0x200057ec

000260e0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   260e0:	b590      	push	{r4, r7, lr}
   260e2:	b08d      	sub	sp, #52	; 0x34
   260e4:	af04      	add	r7, sp, #16
   260e6:	0004      	movs	r4, r0
   260e8:	0008      	movs	r0, r1
   260ea:	0011      	movs	r1, r2
   260ec:	1dbb      	adds	r3, r7, #6
   260ee:	1c22      	adds	r2, r4, #0
   260f0:	801a      	strh	r2, [r3, #0]
   260f2:	1d7b      	adds	r3, r7, #5
   260f4:	1c02      	adds	r2, r0, #0
   260f6:	701a      	strb	r2, [r3, #0]
   260f8:	1d3b      	adds	r3, r7, #4
   260fa:	1c0a      	adds	r2, r1, #0
   260fc:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   260fe:	231f      	movs	r3, #31
   26100:	18fb      	adds	r3, r7, r3
   26102:	22ff      	movs	r2, #255	; 0xff
   26104:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   26106:	1dbb      	adds	r3, r7, #6
   26108:	881b      	ldrh	r3, [r3, #0]
   2610a:	2b02      	cmp	r3, #2
   2610c:	d000      	beq.n	26110 <socket+0x30>
   2610e:	e0ce      	b.n	262ae <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   26110:	1d7b      	adds	r3, r7, #5
   26112:	781b      	ldrb	r3, [r3, #0]
   26114:	2b01      	cmp	r3, #1
   26116:	d135      	bne.n	26184 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   26118:	231e      	movs	r3, #30
   2611a:	18fb      	adds	r3, r7, r3
   2611c:	2200      	movs	r2, #0
   2611e:	701a      	strb	r2, [r3, #0]
   26120:	e02a      	b.n	26178 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   26122:	2317      	movs	r3, #23
   26124:	18fb      	adds	r3, r7, r3
   26126:	4a66      	ldr	r2, [pc, #408]	; (262c0 <socket+0x1e0>)
   26128:	7812      	ldrb	r2, [r2, #0]
   2612a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   2612c:	4b64      	ldr	r3, [pc, #400]	; (262c0 <socket+0x1e0>)
   2612e:	781b      	ldrb	r3, [r3, #0]
   26130:	b2db      	uxtb	r3, r3
   26132:	011a      	lsls	r2, r3, #4
   26134:	4b63      	ldr	r3, [pc, #396]	; (262c4 <socket+0x1e4>)
   26136:	18d3      	adds	r3, r2, r3
   26138:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2613a:	4b61      	ldr	r3, [pc, #388]	; (262c0 <socket+0x1e0>)
   2613c:	781b      	ldrb	r3, [r3, #0]
   2613e:	b2db      	uxtb	r3, r3
   26140:	1c5a      	adds	r2, r3, #1
   26142:	4b61      	ldr	r3, [pc, #388]	; (262c8 <socket+0x1e8>)
   26144:	2107      	movs	r1, #7
   26146:	0010      	movs	r0, r2
   26148:	4798      	blx	r3
   2614a:	000b      	movs	r3, r1
   2614c:	b2da      	uxtb	r2, r3
   2614e:	4b5c      	ldr	r3, [pc, #368]	; (262c0 <socket+0x1e0>)
   26150:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   26152:	69bb      	ldr	r3, [r7, #24]
   26154:	7a9b      	ldrb	r3, [r3, #10]
   26156:	b2db      	uxtb	r3, r3
   26158:	2b00      	cmp	r3, #0
   2615a:	d106      	bne.n	2616a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   2615c:	231f      	movs	r3, #31
   2615e:	18fb      	adds	r3, r7, r3
   26160:	2217      	movs	r2, #23
   26162:	18ba      	adds	r2, r7, r2
   26164:	7812      	ldrb	r2, [r2, #0]
   26166:	701a      	strb	r2, [r3, #0]
					break;
   26168:	e04c      	b.n	26204 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2616a:	231e      	movs	r3, #30
   2616c:	18fb      	adds	r3, r7, r3
   2616e:	781a      	ldrb	r2, [r3, #0]
   26170:	231e      	movs	r3, #30
   26172:	18fb      	adds	r3, r7, r3
   26174:	3201      	adds	r2, #1
   26176:	701a      	strb	r2, [r3, #0]
   26178:	231e      	movs	r3, #30
   2617a:	18fb      	adds	r3, r7, r3
   2617c:	781b      	ldrb	r3, [r3, #0]
   2617e:	2b06      	cmp	r3, #6
   26180:	d9cf      	bls.n	26122 <socket+0x42>
   26182:	e03f      	b.n	26204 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   26184:	1d7b      	adds	r3, r7, #5
   26186:	781b      	ldrb	r3, [r3, #0]
   26188:	2b02      	cmp	r3, #2
   2618a:	d13b      	bne.n	26204 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   2618c:	4b4f      	ldr	r3, [pc, #316]	; (262cc <socket+0x1ec>)
   2618e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   26190:	231e      	movs	r3, #30
   26192:	18fb      	adds	r3, r7, r3
   26194:	2200      	movs	r2, #0
   26196:	701a      	strb	r2, [r3, #0]
   26198:	e02f      	b.n	261fa <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2619a:	2317      	movs	r3, #23
   2619c:	18fb      	adds	r3, r7, r3
   2619e:	4a4c      	ldr	r2, [pc, #304]	; (262d0 <socket+0x1f0>)
   261a0:	7812      	ldrb	r2, [r2, #0]
   261a2:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   261a4:	4b4a      	ldr	r3, [pc, #296]	; (262d0 <socket+0x1f0>)
   261a6:	781b      	ldrb	r3, [r3, #0]
   261a8:	b2db      	uxtb	r3, r3
   261aa:	011b      	lsls	r3, r3, #4
   261ac:	693a      	ldr	r2, [r7, #16]
   261ae:	18d3      	adds	r3, r2, r3
   261b0:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   261b2:	4b47      	ldr	r3, [pc, #284]	; (262d0 <socket+0x1f0>)
   261b4:	781b      	ldrb	r3, [r3, #0]
   261b6:	b2db      	uxtb	r3, r3
   261b8:	3301      	adds	r3, #1
   261ba:	4a46      	ldr	r2, [pc, #280]	; (262d4 <socket+0x1f4>)
   261bc:	4013      	ands	r3, r2
   261be:	d504      	bpl.n	261ca <socket+0xea>
   261c0:	3b01      	subs	r3, #1
   261c2:	2204      	movs	r2, #4
   261c4:	4252      	negs	r2, r2
   261c6:	4313      	orrs	r3, r2
   261c8:	3301      	adds	r3, #1
   261ca:	b2da      	uxtb	r2, r3
   261cc:	4b40      	ldr	r3, [pc, #256]	; (262d0 <socket+0x1f0>)
   261ce:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   261d0:	69bb      	ldr	r3, [r7, #24]
   261d2:	7a9b      	ldrb	r3, [r3, #10]
   261d4:	b2db      	uxtb	r3, r3
   261d6:	2b00      	cmp	r3, #0
   261d8:	d108      	bne.n	261ec <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   261da:	2317      	movs	r3, #23
   261dc:	18fb      	adds	r3, r7, r3
   261de:	781b      	ldrb	r3, [r3, #0]
   261e0:	3307      	adds	r3, #7
   261e2:	b2da      	uxtb	r2, r3
   261e4:	231f      	movs	r3, #31
   261e6:	18fb      	adds	r3, r7, r3
   261e8:	701a      	strb	r2, [r3, #0]
					break;
   261ea:	e00b      	b.n	26204 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   261ec:	231e      	movs	r3, #30
   261ee:	18fb      	adds	r3, r7, r3
   261f0:	781a      	ldrb	r2, [r3, #0]
   261f2:	231e      	movs	r3, #30
   261f4:	18fb      	adds	r3, r7, r3
   261f6:	3201      	adds	r2, #1
   261f8:	701a      	strb	r2, [r3, #0]
   261fa:	231e      	movs	r3, #30
   261fc:	18fb      	adds	r3, r7, r3
   261fe:	781b      	ldrb	r3, [r3, #0]
   26200:	2b03      	cmp	r3, #3
   26202:	d9ca      	bls.n	2619a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   26204:	231f      	movs	r3, #31
   26206:	18fb      	adds	r3, r7, r3
   26208:	781b      	ldrb	r3, [r3, #0]
   2620a:	2b7f      	cmp	r3, #127	; 0x7f
   2620c:	d84f      	bhi.n	262ae <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   2620e:	69bb      	ldr	r3, [r7, #24]
   26210:	2210      	movs	r2, #16
   26212:	2100      	movs	r1, #0
   26214:	0018      	movs	r0, r3
   26216:	4b30      	ldr	r3, [pc, #192]	; (262d8 <socket+0x1f8>)
   26218:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   2621a:	69bb      	ldr	r3, [r7, #24]
   2621c:	2201      	movs	r2, #1
   2621e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   26220:	4b2e      	ldr	r3, [pc, #184]	; (262dc <socket+0x1fc>)
   26222:	881b      	ldrh	r3, [r3, #0]
   26224:	b29b      	uxth	r3, r3
   26226:	3301      	adds	r3, #1
   26228:	b29a      	uxth	r2, r3
   2622a:	4b2c      	ldr	r3, [pc, #176]	; (262dc <socket+0x1fc>)
   2622c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   2622e:	4b2b      	ldr	r3, [pc, #172]	; (262dc <socket+0x1fc>)
   26230:	881b      	ldrh	r3, [r3, #0]
   26232:	b29b      	uxth	r3, r3
   26234:	2b00      	cmp	r3, #0
   26236:	d106      	bne.n	26246 <socket+0x166>
				++gu16SessionID;
   26238:	4b28      	ldr	r3, [pc, #160]	; (262dc <socket+0x1fc>)
   2623a:	881b      	ldrh	r3, [r3, #0]
   2623c:	b29b      	uxth	r3, r3
   2623e:	3301      	adds	r3, #1
   26240:	b29a      	uxth	r2, r3
   26242:	4b26      	ldr	r3, [pc, #152]	; (262dc <socket+0x1fc>)
   26244:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   26246:	4b25      	ldr	r3, [pc, #148]	; (262dc <socket+0x1fc>)
   26248:	881b      	ldrh	r3, [r3, #0]
   2624a:	b29a      	uxth	r2, r3
   2624c:	69bb      	ldr	r3, [r7, #24]
   2624e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   26250:	4b23      	ldr	r3, [pc, #140]	; (262e0 <socket+0x200>)
   26252:	0018      	movs	r0, r3
   26254:	4b23      	ldr	r3, [pc, #140]	; (262e4 <socket+0x204>)
   26256:	4798      	blx	r3
   26258:	231f      	movs	r3, #31
   2625a:	18fb      	adds	r3, r7, r3
   2625c:	2100      	movs	r1, #0
   2625e:	5659      	ldrsb	r1, [r3, r1]
   26260:	4b1e      	ldr	r3, [pc, #120]	; (262dc <socket+0x1fc>)
   26262:	881b      	ldrh	r3, [r3, #0]
   26264:	b29b      	uxth	r3, r3
   26266:	001a      	movs	r2, r3
   26268:	4b1f      	ldr	r3, [pc, #124]	; (262e8 <socket+0x208>)
   2626a:	0018      	movs	r0, r3
   2626c:	4b1d      	ldr	r3, [pc, #116]	; (262e4 <socket+0x204>)
   2626e:	4798      	blx	r3
   26270:	4b1e      	ldr	r3, [pc, #120]	; (262ec <socket+0x20c>)
   26272:	0018      	movs	r0, r3
   26274:	4b1b      	ldr	r3, [pc, #108]	; (262e4 <socket+0x204>)
   26276:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   26278:	1d3b      	adds	r3, r7, #4
   2627a:	781b      	ldrb	r3, [r3, #0]
   2627c:	2201      	movs	r2, #1
   2627e:	4013      	ands	r3, r2
   26280:	d015      	beq.n	262ae <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   26282:	230c      	movs	r3, #12
   26284:	18fb      	adds	r3, r7, r3
   26286:	221f      	movs	r2, #31
   26288:	18ba      	adds	r2, r7, r2
   2628a:	7812      	ldrb	r2, [r2, #0]
   2628c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2628e:	69bb      	ldr	r3, [r7, #24]
   26290:	2221      	movs	r2, #33	; 0x21
   26292:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   26294:	230c      	movs	r3, #12
   26296:	18fa      	adds	r2, r7, r3
   26298:	2300      	movs	r3, #0
   2629a:	9302      	str	r3, [sp, #8]
   2629c:	2300      	movs	r3, #0
   2629e:	9301      	str	r3, [sp, #4]
   262a0:	2300      	movs	r3, #0
   262a2:	9300      	str	r3, [sp, #0]
   262a4:	2304      	movs	r3, #4
   262a6:	2150      	movs	r1, #80	; 0x50
   262a8:	2002      	movs	r0, #2
   262aa:	4c11      	ldr	r4, [pc, #68]	; (262f0 <socket+0x210>)
   262ac:	47a0      	blx	r4
			}
		}
	}
	return sock;
   262ae:	231f      	movs	r3, #31
   262b0:	18fb      	adds	r3, r7, r3
   262b2:	781b      	ldrb	r3, [r3, #0]
   262b4:	b25b      	sxtb	r3, r3
}
   262b6:	0018      	movs	r0, r3
   262b8:	46bd      	mov	sp, r7
   262ba:	b009      	add	sp, #36	; 0x24
   262bc:	bd90      	pop	{r4, r7, pc}
   262be:	46c0      	nop			; (mov r8, r8)
   262c0:	20003eed 	.word	0x20003eed
   262c4:	20005734 	.word	0x20005734
   262c8:	00033849 	.word	0x00033849
   262cc:	200057a4 	.word	0x200057a4
   262d0:	20003eee 	.word	0x20003eee
   262d4:	80000003 	.word	0x80000003
   262d8:	00021751 	.word	0x00021751
   262dc:	20003eea 	.word	0x20003eea
   262e0:	00039f40 	.word	0x00039f40
   262e4:	0001ea1d 	.word	0x0001ea1d
   262e8:	00039f64 	.word	0x00039f64
   262ec:	00039f60 	.word	0x00039f60
   262f0:	000219b1 	.word	0x000219b1

000262f4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   262f4:	b5b0      	push	{r4, r5, r7, lr}
   262f6:	b08a      	sub	sp, #40	; 0x28
   262f8:	af04      	add	r7, sp, #16
   262fa:	6039      	str	r1, [r7, #0]
   262fc:	0011      	movs	r1, r2
   262fe:	1dfb      	adds	r3, r7, #7
   26300:	1c02      	adds	r2, r0, #0
   26302:	701a      	strb	r2, [r3, #0]
   26304:	1dbb      	adds	r3, r7, #6
   26306:	1c0a      	adds	r2, r1, #0
   26308:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2630a:	2317      	movs	r3, #23
   2630c:	18fb      	adds	r3, r7, r3
   2630e:	22fa      	movs	r2, #250	; 0xfa
   26310:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   26312:	1dfb      	adds	r3, r7, #7
   26314:	781b      	ldrb	r3, [r3, #0]
   26316:	2b7f      	cmp	r3, #127	; 0x7f
   26318:	d867      	bhi.n	263ea <connect+0xf6>
   2631a:	683b      	ldr	r3, [r7, #0]
   2631c:	2b00      	cmp	r3, #0
   2631e:	d064      	beq.n	263ea <connect+0xf6>
   26320:	1dfb      	adds	r3, r7, #7
   26322:	781b      	ldrb	r3, [r3, #0]
   26324:	b25b      	sxtb	r3, r3
   26326:	4a35      	ldr	r2, [pc, #212]	; (263fc <connect+0x108>)
   26328:	011b      	lsls	r3, r3, #4
   2632a:	18d3      	adds	r3, r2, r3
   2632c:	330a      	adds	r3, #10
   2632e:	781b      	ldrb	r3, [r3, #0]
   26330:	b2db      	uxtb	r3, r3
   26332:	2b01      	cmp	r3, #1
   26334:	d159      	bne.n	263ea <connect+0xf6>
   26336:	1dbb      	adds	r3, r7, #6
   26338:	781b      	ldrb	r3, [r3, #0]
   2633a:	2b00      	cmp	r3, #0
   2633c:	d055      	beq.n	263ea <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2633e:	2316      	movs	r3, #22
   26340:	18fb      	adds	r3, r7, r3
   26342:	2244      	movs	r2, #68	; 0x44
   26344:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   26346:	1dfb      	adds	r3, r7, #7
   26348:	781b      	ldrb	r3, [r3, #0]
   2634a:	b25b      	sxtb	r3, r3
   2634c:	4a2b      	ldr	r2, [pc, #172]	; (263fc <connect+0x108>)
   2634e:	011b      	lsls	r3, r3, #4
   26350:	18d3      	adds	r3, r2, r3
   26352:	330b      	adds	r3, #11
   26354:	781b      	ldrb	r3, [r3, #0]
   26356:	b2db      	uxtb	r3, r3
   26358:	001a      	movs	r2, r3
   2635a:	2301      	movs	r3, #1
   2635c:	4013      	ands	r3, r2
   2635e:	d00f      	beq.n	26380 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   26360:	2316      	movs	r3, #22
   26362:	18fb      	adds	r3, r7, r3
   26364:	224b      	movs	r2, #75	; 0x4b
   26366:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   26368:	1dfb      	adds	r3, r7, #7
   2636a:	781b      	ldrb	r3, [r3, #0]
   2636c:	b25b      	sxtb	r3, r3
   2636e:	4a23      	ldr	r2, [pc, #140]	; (263fc <connect+0x108>)
   26370:	011b      	lsls	r3, r3, #4
   26372:	18d3      	adds	r3, r2, r3
   26374:	330b      	adds	r3, #11
   26376:	781b      	ldrb	r3, [r3, #0]
   26378:	b2da      	uxtb	r2, r3
   2637a:	2308      	movs	r3, #8
   2637c:	18fb      	adds	r3, r7, r3
   2637e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   26380:	2308      	movs	r3, #8
   26382:	18fb      	adds	r3, r7, r3
   26384:	1dfa      	adds	r2, r7, #7
   26386:	7812      	ldrb	r2, [r2, #0]
   26388:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2638a:	6839      	ldr	r1, [r7, #0]
   2638c:	2308      	movs	r3, #8
   2638e:	18fb      	adds	r3, r7, r3
   26390:	2208      	movs	r2, #8
   26392:	0018      	movs	r0, r3
   26394:	4b1a      	ldr	r3, [pc, #104]	; (26400 <connect+0x10c>)
   26396:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   26398:	1dfb      	adds	r3, r7, #7
   2639a:	781b      	ldrb	r3, [r3, #0]
   2639c:	b25b      	sxtb	r3, r3
   2639e:	4a17      	ldr	r2, [pc, #92]	; (263fc <connect+0x108>)
   263a0:	011b      	lsls	r3, r3, #4
   263a2:	18d3      	adds	r3, r2, r3
   263a4:	3306      	adds	r3, #6
   263a6:	881b      	ldrh	r3, [r3, #0]
   263a8:	b29a      	uxth	r2, r3
   263aa:	2308      	movs	r3, #8
   263ac:	18fb      	adds	r3, r7, r3
   263ae:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   263b0:	2317      	movs	r3, #23
   263b2:	18fc      	adds	r4, r7, r3
   263b4:	2308      	movs	r3, #8
   263b6:	18fa      	adds	r2, r7, r3
   263b8:	2316      	movs	r3, #22
   263ba:	18fb      	adds	r3, r7, r3
   263bc:	7819      	ldrb	r1, [r3, #0]
   263be:	2300      	movs	r3, #0
   263c0:	9302      	str	r3, [sp, #8]
   263c2:	2300      	movs	r3, #0
   263c4:	9301      	str	r3, [sp, #4]
   263c6:	2300      	movs	r3, #0
   263c8:	9300      	str	r3, [sp, #0]
   263ca:	230c      	movs	r3, #12
   263cc:	2002      	movs	r0, #2
   263ce:	4d0d      	ldr	r5, [pc, #52]	; (26404 <connect+0x110>)
   263d0:	47a8      	blx	r5
   263d2:	0003      	movs	r3, r0
   263d4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   263d6:	2317      	movs	r3, #23
   263d8:	18fb      	adds	r3, r7, r3
   263da:	781b      	ldrb	r3, [r3, #0]
   263dc:	b25b      	sxtb	r3, r3
   263de:	2b00      	cmp	r3, #0
   263e0:	d003      	beq.n	263ea <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   263e2:	2317      	movs	r3, #23
   263e4:	18fb      	adds	r3, r7, r3
   263e6:	22f7      	movs	r2, #247	; 0xf7
   263e8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   263ea:	2317      	movs	r3, #23
   263ec:	18fb      	adds	r3, r7, r3
   263ee:	781b      	ldrb	r3, [r3, #0]
   263f0:	b25b      	sxtb	r3, r3
}
   263f2:	0018      	movs	r0, r3
   263f4:	46bd      	mov	sp, r7
   263f6:	b006      	add	sp, #24
   263f8:	bdb0      	pop	{r4, r5, r7, pc}
   263fa:	46c0      	nop			; (mov r8, r8)
   263fc:	20005734 	.word	0x20005734
   26400:	00021715 	.word	0x00021715
   26404:	000219b1 	.word	0x000219b1

00026408 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   26408:	b590      	push	{r4, r7, lr}
   2640a:	b08f      	sub	sp, #60	; 0x3c
   2640c:	af04      	add	r7, sp, #16
   2640e:	0004      	movs	r4, r0
   26410:	60b9      	str	r1, [r7, #8]
   26412:	0010      	movs	r0, r2
   26414:	0019      	movs	r1, r3
   26416:	230f      	movs	r3, #15
   26418:	18fb      	adds	r3, r7, r3
   2641a:	1c22      	adds	r2, r4, #0
   2641c:	701a      	strb	r2, [r3, #0]
   2641e:	230c      	movs	r3, #12
   26420:	18fb      	adds	r3, r7, r3
   26422:	1c02      	adds	r2, r0, #0
   26424:	801a      	strh	r2, [r3, #0]
   26426:	1dbb      	adds	r3, r7, #6
   26428:	1c0a      	adds	r2, r1, #0
   2642a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   2642c:	2326      	movs	r3, #38	; 0x26
   2642e:	18fb      	adds	r3, r7, r3
   26430:	2206      	movs	r2, #6
   26432:	4252      	negs	r2, r2
   26434:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   26436:	230f      	movs	r3, #15
   26438:	18fb      	adds	r3, r7, r3
   2643a:	781b      	ldrb	r3, [r3, #0]
   2643c:	2b7f      	cmp	r3, #127	; 0x7f
   2643e:	d900      	bls.n	26442 <send+0x3a>
   26440:	e087      	b.n	26552 <send+0x14a>
   26442:	68bb      	ldr	r3, [r7, #8]
   26444:	2b00      	cmp	r3, #0
   26446:	d100      	bne.n	2644a <send+0x42>
   26448:	e083      	b.n	26552 <send+0x14a>
   2644a:	230c      	movs	r3, #12
   2644c:	18fb      	adds	r3, r7, r3
   2644e:	881a      	ldrh	r2, [r3, #0]
   26450:	23af      	movs	r3, #175	; 0xaf
   26452:	00db      	lsls	r3, r3, #3
   26454:	429a      	cmp	r2, r3
   26456:	d900      	bls.n	2645a <send+0x52>
   26458:	e07b      	b.n	26552 <send+0x14a>
   2645a:	230f      	movs	r3, #15
   2645c:	18fb      	adds	r3, r7, r3
   2645e:	781b      	ldrb	r3, [r3, #0]
   26460:	b25b      	sxtb	r3, r3
   26462:	4a40      	ldr	r2, [pc, #256]	; (26564 <send+0x15c>)
   26464:	011b      	lsls	r3, r3, #4
   26466:	18d3      	adds	r3, r2, r3
   26468:	330a      	adds	r3, #10
   2646a:	781b      	ldrb	r3, [r3, #0]
   2646c:	b2db      	uxtb	r3, r3
   2646e:	2b01      	cmp	r3, #1
   26470:	d16f      	bne.n	26552 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   26472:	2323      	movs	r3, #35	; 0x23
   26474:	18fb      	adds	r3, r7, r3
   26476:	2245      	movs	r2, #69	; 0x45
   26478:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2647a:	2324      	movs	r3, #36	; 0x24
   2647c:	18fb      	adds	r3, r7, r3
   2647e:	2250      	movs	r2, #80	; 0x50
   26480:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   26482:	2310      	movs	r3, #16
   26484:	18fb      	adds	r3, r7, r3
   26486:	220f      	movs	r2, #15
   26488:	18ba      	adds	r2, r7, r2
   2648a:	7812      	ldrb	r2, [r2, #0]
   2648c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2648e:	2310      	movs	r3, #16
   26490:	18fb      	adds	r3, r7, r3
   26492:	220c      	movs	r2, #12
   26494:	18ba      	adds	r2, r7, r2
   26496:	8812      	ldrh	r2, [r2, #0]
   26498:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2649a:	230f      	movs	r3, #15
   2649c:	18fb      	adds	r3, r7, r3
   2649e:	781b      	ldrb	r3, [r3, #0]
   264a0:	b25b      	sxtb	r3, r3
   264a2:	4a30      	ldr	r2, [pc, #192]	; (26564 <send+0x15c>)
   264a4:	011b      	lsls	r3, r3, #4
   264a6:	18d3      	adds	r3, r2, r3
   264a8:	3306      	adds	r3, #6
   264aa:	881b      	ldrh	r3, [r3, #0]
   264ac:	b29a      	uxth	r2, r3
   264ae:	2310      	movs	r3, #16
   264b0:	18fb      	adds	r3, r7, r3
   264b2:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   264b4:	230f      	movs	r3, #15
   264b6:	18fb      	adds	r3, r7, r3
   264b8:	781b      	ldrb	r3, [r3, #0]
   264ba:	b25b      	sxtb	r3, r3
   264bc:	2b06      	cmp	r3, #6
   264be:	dd03      	ble.n	264c8 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   264c0:	2324      	movs	r3, #36	; 0x24
   264c2:	18fb      	adds	r3, r7, r3
   264c4:	2244      	movs	r2, #68	; 0x44
   264c6:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   264c8:	230f      	movs	r3, #15
   264ca:	18fb      	adds	r3, r7, r3
   264cc:	781b      	ldrb	r3, [r3, #0]
   264ce:	b25b      	sxtb	r3, r3
   264d0:	4a24      	ldr	r2, [pc, #144]	; (26564 <send+0x15c>)
   264d2:	011b      	lsls	r3, r3, #4
   264d4:	18d3      	adds	r3, r2, r3
   264d6:	330b      	adds	r3, #11
   264d8:	781b      	ldrb	r3, [r3, #0]
   264da:	b2db      	uxtb	r3, r3
   264dc:	001a      	movs	r2, r3
   264de:	2301      	movs	r3, #1
   264e0:	4013      	ands	r3, r2
   264e2:	d00f      	beq.n	26504 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   264e4:	2323      	movs	r3, #35	; 0x23
   264e6:	18fb      	adds	r3, r7, r3
   264e8:	224c      	movs	r2, #76	; 0x4c
   264ea:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   264ec:	230f      	movs	r3, #15
   264ee:	18fb      	adds	r3, r7, r3
   264f0:	2200      	movs	r2, #0
   264f2:	569a      	ldrsb	r2, [r3, r2]
   264f4:	2324      	movs	r3, #36	; 0x24
   264f6:	18fb      	adds	r3, r7, r3
   264f8:	491a      	ldr	r1, [pc, #104]	; (26564 <send+0x15c>)
   264fa:	0112      	lsls	r2, r2, #4
   264fc:	188a      	adds	r2, r1, r2
   264fe:	3208      	adds	r2, #8
   26500:	8812      	ldrh	r2, [r2, #0]
   26502:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   26504:	2323      	movs	r3, #35	; 0x23
   26506:	18fb      	adds	r3, r7, r3
   26508:	781b      	ldrb	r3, [r3, #0]
   2650a:	2280      	movs	r2, #128	; 0x80
   2650c:	4252      	negs	r2, r2
   2650e:	4313      	orrs	r3, r2
   26510:	b2d9      	uxtb	r1, r3
   26512:	2310      	movs	r3, #16
   26514:	18fa      	adds	r2, r7, r3
   26516:	2324      	movs	r3, #36	; 0x24
   26518:	18fb      	adds	r3, r7, r3
   2651a:	881b      	ldrh	r3, [r3, #0]
   2651c:	9302      	str	r3, [sp, #8]
   2651e:	230c      	movs	r3, #12
   26520:	18fb      	adds	r3, r7, r3
   26522:	881b      	ldrh	r3, [r3, #0]
   26524:	9301      	str	r3, [sp, #4]
   26526:	68bb      	ldr	r3, [r7, #8]
   26528:	9300      	str	r3, [sp, #0]
   2652a:	2310      	movs	r3, #16
   2652c:	2002      	movs	r0, #2
   2652e:	4c0e      	ldr	r4, [pc, #56]	; (26568 <send+0x160>)
   26530:	47a0      	blx	r4
   26532:	0003      	movs	r3, r0
   26534:	001a      	movs	r2, r3
   26536:	2326      	movs	r3, #38	; 0x26
   26538:	18fb      	adds	r3, r7, r3
   2653a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   2653c:	2326      	movs	r3, #38	; 0x26
   2653e:	18fb      	adds	r3, r7, r3
   26540:	2200      	movs	r2, #0
   26542:	5e9b      	ldrsh	r3, [r3, r2]
   26544:	2b00      	cmp	r3, #0
   26546:	d004      	beq.n	26552 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   26548:	2326      	movs	r3, #38	; 0x26
   2654a:	18fb      	adds	r3, r7, r3
   2654c:	220e      	movs	r2, #14
   2654e:	4252      	negs	r2, r2
   26550:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   26552:	2326      	movs	r3, #38	; 0x26
   26554:	18fb      	adds	r3, r7, r3
   26556:	2200      	movs	r2, #0
   26558:	5e9b      	ldrsh	r3, [r3, r2]
}
   2655a:	0018      	movs	r0, r3
   2655c:	46bd      	mov	sp, r7
   2655e:	b00b      	add	sp, #44	; 0x2c
   26560:	bd90      	pop	{r4, r7, pc}
   26562:	46c0      	nop			; (mov r8, r8)
   26564:	20005734 	.word	0x20005734
   26568:	000219b1 	.word	0x000219b1

0002656c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   2656c:	b590      	push	{r4, r7, lr}
   2656e:	b08d      	sub	sp, #52	; 0x34
   26570:	af04      	add	r7, sp, #16
   26572:	60b9      	str	r1, [r7, #8]
   26574:	0011      	movs	r1, r2
   26576:	607b      	str	r3, [r7, #4]
   26578:	230f      	movs	r3, #15
   2657a:	18fb      	adds	r3, r7, r3
   2657c:	1c02      	adds	r2, r0, #0
   2657e:	701a      	strb	r2, [r3, #0]
   26580:	230c      	movs	r3, #12
   26582:	18fb      	adds	r3, r7, r3
   26584:	1c0a      	adds	r2, r1, #0
   26586:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   26588:	231e      	movs	r3, #30
   2658a:	18fb      	adds	r3, r7, r3
   2658c:	2206      	movs	r2, #6
   2658e:	4252      	negs	r2, r2
   26590:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   26592:	230f      	movs	r3, #15
   26594:	18fb      	adds	r3, r7, r3
   26596:	781b      	ldrb	r3, [r3, #0]
   26598:	2b7f      	cmp	r3, #127	; 0x7f
   2659a:	d900      	bls.n	2659e <recv+0x32>
   2659c:	e099      	b.n	266d2 <recv+0x166>
   2659e:	68bb      	ldr	r3, [r7, #8]
   265a0:	2b00      	cmp	r3, #0
   265a2:	d100      	bne.n	265a6 <recv+0x3a>
   265a4:	e095      	b.n	266d2 <recv+0x166>
   265a6:	230c      	movs	r3, #12
   265a8:	18fb      	adds	r3, r7, r3
   265aa:	881b      	ldrh	r3, [r3, #0]
   265ac:	2b00      	cmp	r3, #0
   265ae:	d100      	bne.n	265b2 <recv+0x46>
   265b0:	e08f      	b.n	266d2 <recv+0x166>
   265b2:	230f      	movs	r3, #15
   265b4:	18fb      	adds	r3, r7, r3
   265b6:	781b      	ldrb	r3, [r3, #0]
   265b8:	b25b      	sxtb	r3, r3
   265ba:	4a4a      	ldr	r2, [pc, #296]	; (266e4 <recv+0x178>)
   265bc:	011b      	lsls	r3, r3, #4
   265be:	18d3      	adds	r3, r2, r3
   265c0:	330a      	adds	r3, #10
   265c2:	781b      	ldrb	r3, [r3, #0]
   265c4:	b2db      	uxtb	r3, r3
   265c6:	2b01      	cmp	r3, #1
   265c8:	d000      	beq.n	265cc <recv+0x60>
   265ca:	e082      	b.n	266d2 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   265cc:	231e      	movs	r3, #30
   265ce:	18fb      	adds	r3, r7, r3
   265d0:	2200      	movs	r2, #0
   265d2:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   265d4:	230f      	movs	r3, #15
   265d6:	18fb      	adds	r3, r7, r3
   265d8:	2200      	movs	r2, #0
   265da:	569a      	ldrsb	r2, [r3, r2]
   265dc:	4b41      	ldr	r3, [pc, #260]	; (266e4 <recv+0x178>)
   265de:	0112      	lsls	r2, r2, #4
   265e0:	68b9      	ldr	r1, [r7, #8]
   265e2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   265e4:	230f      	movs	r3, #15
   265e6:	18fb      	adds	r3, r7, r3
   265e8:	781b      	ldrb	r3, [r3, #0]
   265ea:	b25b      	sxtb	r3, r3
   265ec:	4a3d      	ldr	r2, [pc, #244]	; (266e4 <recv+0x178>)
   265ee:	011b      	lsls	r3, r3, #4
   265f0:	18d3      	adds	r3, r2, r3
   265f2:	3304      	adds	r3, #4
   265f4:	220c      	movs	r2, #12
   265f6:	18ba      	adds	r2, r7, r2
   265f8:	8812      	ldrh	r2, [r2, #0]
   265fa:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   265fc:	230f      	movs	r3, #15
   265fe:	18fb      	adds	r3, r7, r3
   26600:	781b      	ldrb	r3, [r3, #0]
   26602:	b25b      	sxtb	r3, r3
   26604:	4a37      	ldr	r2, [pc, #220]	; (266e4 <recv+0x178>)
   26606:	011b      	lsls	r3, r3, #4
   26608:	18d3      	adds	r3, r2, r3
   2660a:	330c      	adds	r3, #12
   2660c:	781b      	ldrb	r3, [r3, #0]
   2660e:	b2db      	uxtb	r3, r3
   26610:	2b00      	cmp	r3, #0
   26612:	d15e      	bne.n	266d2 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   26614:	231d      	movs	r3, #29
   26616:	18fb      	adds	r3, r7, r3
   26618:	2246      	movs	r2, #70	; 0x46
   2661a:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   2661c:	230f      	movs	r3, #15
   2661e:	18fb      	adds	r3, r7, r3
   26620:	781b      	ldrb	r3, [r3, #0]
   26622:	b25b      	sxtb	r3, r3
   26624:	4a2f      	ldr	r2, [pc, #188]	; (266e4 <recv+0x178>)
   26626:	011b      	lsls	r3, r3, #4
   26628:	18d3      	adds	r3, r2, r3
   2662a:	330c      	adds	r3, #12
   2662c:	2201      	movs	r2, #1
   2662e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26630:	230f      	movs	r3, #15
   26632:	18fb      	adds	r3, r7, r3
   26634:	781b      	ldrb	r3, [r3, #0]
   26636:	b25b      	sxtb	r3, r3
   26638:	4a2a      	ldr	r2, [pc, #168]	; (266e4 <recv+0x178>)
   2663a:	011b      	lsls	r3, r3, #4
   2663c:	18d3      	adds	r3, r2, r3
   2663e:	330b      	adds	r3, #11
   26640:	781b      	ldrb	r3, [r3, #0]
   26642:	b2db      	uxtb	r3, r3
   26644:	001a      	movs	r2, r3
   26646:	2301      	movs	r3, #1
   26648:	4013      	ands	r3, r2
   2664a:	d003      	beq.n	26654 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   2664c:	231d      	movs	r3, #29
   2664e:	18fb      	adds	r3, r7, r3
   26650:	224d      	movs	r2, #77	; 0x4d
   26652:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   26654:	687b      	ldr	r3, [r7, #4]
   26656:	2b00      	cmp	r3, #0
   26658:	d105      	bne.n	26666 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2665a:	2314      	movs	r3, #20
   2665c:	18fb      	adds	r3, r7, r3
   2665e:	2201      	movs	r2, #1
   26660:	4252      	negs	r2, r2
   26662:	601a      	str	r2, [r3, #0]
   26664:	e003      	b.n	2666e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   26666:	2314      	movs	r3, #20
   26668:	18fb      	adds	r3, r7, r3
   2666a:	687a      	ldr	r2, [r7, #4]
   2666c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2666e:	2314      	movs	r3, #20
   26670:	18fb      	adds	r3, r7, r3
   26672:	220f      	movs	r2, #15
   26674:	18ba      	adds	r2, r7, r2
   26676:	7812      	ldrb	r2, [r2, #0]
   26678:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2667a:	230f      	movs	r3, #15
   2667c:	18fb      	adds	r3, r7, r3
   2667e:	781b      	ldrb	r3, [r3, #0]
   26680:	b25b      	sxtb	r3, r3
   26682:	4a18      	ldr	r2, [pc, #96]	; (266e4 <recv+0x178>)
   26684:	011b      	lsls	r3, r3, #4
   26686:	18d3      	adds	r3, r2, r3
   26688:	3306      	adds	r3, #6
   2668a:	881b      	ldrh	r3, [r3, #0]
   2668c:	b29a      	uxth	r2, r3
   2668e:	2314      	movs	r3, #20
   26690:	18fb      	adds	r3, r7, r3
   26692:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   26694:	2314      	movs	r3, #20
   26696:	18fa      	adds	r2, r7, r3
   26698:	231d      	movs	r3, #29
   2669a:	18fb      	adds	r3, r7, r3
   2669c:	7819      	ldrb	r1, [r3, #0]
   2669e:	2300      	movs	r3, #0
   266a0:	9302      	str	r3, [sp, #8]
   266a2:	2300      	movs	r3, #0
   266a4:	9301      	str	r3, [sp, #4]
   266a6:	2300      	movs	r3, #0
   266a8:	9300      	str	r3, [sp, #0]
   266aa:	2308      	movs	r3, #8
   266ac:	2002      	movs	r0, #2
   266ae:	4c0e      	ldr	r4, [pc, #56]	; (266e8 <recv+0x17c>)
   266b0:	47a0      	blx	r4
   266b2:	0003      	movs	r3, r0
   266b4:	001a      	movs	r2, r3
   266b6:	231e      	movs	r3, #30
   266b8:	18fb      	adds	r3, r7, r3
   266ba:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   266bc:	231e      	movs	r3, #30
   266be:	18fb      	adds	r3, r7, r3
   266c0:	2200      	movs	r2, #0
   266c2:	5e9b      	ldrsh	r3, [r3, r2]
   266c4:	2b00      	cmp	r3, #0
   266c6:	d004      	beq.n	266d2 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   266c8:	231e      	movs	r3, #30
   266ca:	18fb      	adds	r3, r7, r3
   266cc:	220e      	movs	r2, #14
   266ce:	4252      	negs	r2, r2
   266d0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   266d2:	231e      	movs	r3, #30
   266d4:	18fb      	adds	r3, r7, r3
   266d6:	2200      	movs	r2, #0
   266d8:	5e9b      	ldrsh	r3, [r3, r2]
}
   266da:	0018      	movs	r0, r3
   266dc:	46bd      	mov	sp, r7
   266de:	b009      	add	sp, #36	; 0x24
   266e0:	bd90      	pop	{r4, r7, pc}
   266e2:	46c0      	nop			; (mov r8, r8)
   266e4:	20005734 	.word	0x20005734
   266e8:	000219b1 	.word	0x000219b1

000266ec <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   266ec:	b5b0      	push	{r4, r5, r7, lr}
   266ee:	b088      	sub	sp, #32
   266f0:	af04      	add	r7, sp, #16
   266f2:	0002      	movs	r2, r0
   266f4:	1dfb      	adds	r3, r7, #7
   266f6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   266f8:	230f      	movs	r3, #15
   266fa:	18fb      	adds	r3, r7, r3
   266fc:	22fa      	movs	r2, #250	; 0xfa
   266fe:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   26700:	4b43      	ldr	r3, [pc, #268]	; (26810 <close+0x124>)
   26702:	0018      	movs	r0, r3
   26704:	4b43      	ldr	r3, [pc, #268]	; (26814 <close+0x128>)
   26706:	4798      	blx	r3
   26708:	1dfb      	adds	r3, r7, #7
   2670a:	2200      	movs	r2, #0
   2670c:	569a      	ldrsb	r2, [r3, r2]
   2670e:	4b42      	ldr	r3, [pc, #264]	; (26818 <close+0x12c>)
   26710:	0011      	movs	r1, r2
   26712:	0018      	movs	r0, r3
   26714:	4b3f      	ldr	r3, [pc, #252]	; (26814 <close+0x128>)
   26716:	4798      	blx	r3
   26718:	4b40      	ldr	r3, [pc, #256]	; (2681c <close+0x130>)
   2671a:	0018      	movs	r0, r3
   2671c:	4b3d      	ldr	r3, [pc, #244]	; (26814 <close+0x128>)
   2671e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   26720:	1dfb      	adds	r3, r7, #7
   26722:	781b      	ldrb	r3, [r3, #0]
   26724:	2b7f      	cmp	r3, #127	; 0x7f
   26726:	d86a      	bhi.n	267fe <close+0x112>
   26728:	1dfb      	adds	r3, r7, #7
   2672a:	781b      	ldrb	r3, [r3, #0]
   2672c:	b25b      	sxtb	r3, r3
   2672e:	4a3c      	ldr	r2, [pc, #240]	; (26820 <close+0x134>)
   26730:	011b      	lsls	r3, r3, #4
   26732:	18d3      	adds	r3, r2, r3
   26734:	330a      	adds	r3, #10
   26736:	781b      	ldrb	r3, [r3, #0]
   26738:	b2db      	uxtb	r3, r3
   2673a:	2b01      	cmp	r3, #1
   2673c:	d15f      	bne.n	267fe <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   2673e:	230e      	movs	r3, #14
   26740:	18fb      	adds	r3, r7, r3
   26742:	2249      	movs	r2, #73	; 0x49
   26744:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   26746:	2308      	movs	r3, #8
   26748:	18fb      	adds	r3, r7, r3
   2674a:	1dfa      	adds	r2, r7, #7
   2674c:	7812      	ldrb	r2, [r2, #0]
   2674e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   26750:	1dfb      	adds	r3, r7, #7
   26752:	781b      	ldrb	r3, [r3, #0]
   26754:	b25b      	sxtb	r3, r3
   26756:	4a32      	ldr	r2, [pc, #200]	; (26820 <close+0x134>)
   26758:	011b      	lsls	r3, r3, #4
   2675a:	18d3      	adds	r3, r2, r3
   2675c:	3306      	adds	r3, #6
   2675e:	881b      	ldrh	r3, [r3, #0]
   26760:	b29a      	uxth	r2, r3
   26762:	2308      	movs	r3, #8
   26764:	18fb      	adds	r3, r7, r3
   26766:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   26768:	1dfb      	adds	r3, r7, #7
   2676a:	781b      	ldrb	r3, [r3, #0]
   2676c:	b25b      	sxtb	r3, r3
   2676e:	4a2c      	ldr	r2, [pc, #176]	; (26820 <close+0x134>)
   26770:	011b      	lsls	r3, r3, #4
   26772:	18d3      	adds	r3, r2, r3
   26774:	330a      	adds	r3, #10
   26776:	2200      	movs	r2, #0
   26778:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2677a:	1dfb      	adds	r3, r7, #7
   2677c:	781b      	ldrb	r3, [r3, #0]
   2677e:	b25b      	sxtb	r3, r3
   26780:	4a27      	ldr	r2, [pc, #156]	; (26820 <close+0x134>)
   26782:	011b      	lsls	r3, r3, #4
   26784:	18d3      	adds	r3, r2, r3
   26786:	3306      	adds	r3, #6
   26788:	2200      	movs	r2, #0
   2678a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2678c:	1dfb      	adds	r3, r7, #7
   2678e:	781b      	ldrb	r3, [r3, #0]
   26790:	b25b      	sxtb	r3, r3
   26792:	4a23      	ldr	r2, [pc, #140]	; (26820 <close+0x134>)
   26794:	011b      	lsls	r3, r3, #4
   26796:	18d3      	adds	r3, r2, r3
   26798:	330b      	adds	r3, #11
   2679a:	781b      	ldrb	r3, [r3, #0]
   2679c:	b2db      	uxtb	r3, r3
   2679e:	001a      	movs	r2, r3
   267a0:	2301      	movs	r3, #1
   267a2:	4013      	ands	r3, r2
   267a4:	d003      	beq.n	267ae <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   267a6:	230e      	movs	r3, #14
   267a8:	18fb      	adds	r3, r7, r3
   267aa:	224e      	movs	r2, #78	; 0x4e
   267ac:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   267ae:	230f      	movs	r3, #15
   267b0:	18fc      	adds	r4, r7, r3
   267b2:	2308      	movs	r3, #8
   267b4:	18fa      	adds	r2, r7, r3
   267b6:	230e      	movs	r3, #14
   267b8:	18fb      	adds	r3, r7, r3
   267ba:	7819      	ldrb	r1, [r3, #0]
   267bc:	2300      	movs	r3, #0
   267be:	9302      	str	r3, [sp, #8]
   267c0:	2300      	movs	r3, #0
   267c2:	9301      	str	r3, [sp, #4]
   267c4:	2300      	movs	r3, #0
   267c6:	9300      	str	r3, [sp, #0]
   267c8:	2304      	movs	r3, #4
   267ca:	2002      	movs	r0, #2
   267cc:	4d15      	ldr	r5, [pc, #84]	; (26824 <close+0x138>)
   267ce:	47a8      	blx	r5
   267d0:	0003      	movs	r3, r0
   267d2:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   267d4:	230f      	movs	r3, #15
   267d6:	18fb      	adds	r3, r7, r3
   267d8:	781b      	ldrb	r3, [r3, #0]
   267da:	b25b      	sxtb	r3, r3
   267dc:	2b00      	cmp	r3, #0
   267de:	d003      	beq.n	267e8 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   267e0:	230f      	movs	r3, #15
   267e2:	18fb      	adds	r3, r7, r3
   267e4:	22f7      	movs	r2, #247	; 0xf7
   267e6:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   267e8:	1dfb      	adds	r3, r7, #7
   267ea:	781b      	ldrb	r3, [r3, #0]
   267ec:	b25b      	sxtb	r3, r3
   267ee:	011a      	lsls	r2, r3, #4
   267f0:	4b0b      	ldr	r3, [pc, #44]	; (26820 <close+0x134>)
   267f2:	18d3      	adds	r3, r2, r3
   267f4:	2210      	movs	r2, #16
   267f6:	2100      	movs	r1, #0
   267f8:	0018      	movs	r0, r3
   267fa:	4b0b      	ldr	r3, [pc, #44]	; (26828 <close+0x13c>)
   267fc:	4798      	blx	r3
	}
	return s8Ret;
   267fe:	230f      	movs	r3, #15
   26800:	18fb      	adds	r3, r7, r3
   26802:	781b      	ldrb	r3, [r3, #0]
   26804:	b25b      	sxtb	r3, r3
}
   26806:	0018      	movs	r0, r3
   26808:	46bd      	mov	sp, r7
   2680a:	b004      	add	sp, #16
   2680c:	bdb0      	pop	{r4, r5, r7, pc}
   2680e:	46c0      	nop			; (mov r8, r8)
   26810:	00039f40 	.word	0x00039f40
   26814:	0001ea1d 	.word	0x0001ea1d
   26818:	00039f80 	.word	0x00039f80
   2681c:	00039f60 	.word	0x00039f60
   26820:	20005734 	.word	0x20005734
   26824:	000219b1 	.word	0x000219b1
   26828:	00021751 	.word	0x00021751

0002682c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   2682c:	b580      	push	{r7, lr}
   2682e:	b086      	sub	sp, #24
   26830:	af00      	add	r7, sp, #0
   26832:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   26834:	2300      	movs	r3, #0
   26836:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   26838:	2317      	movs	r3, #23
   2683a:	18fb      	adds	r3, r7, r3
   2683c:	2200      	movs	r2, #0
   2683e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   26840:	2316      	movs	r3, #22
   26842:	18fb      	adds	r3, r7, r3
   26844:	2200      	movs	r2, #0
   26846:	701a      	strb	r2, [r3, #0]
   26848:	e060      	b.n	2690c <nmi_inet_addr+0xe0>
	{
		j = 0;
   2684a:	2315      	movs	r3, #21
   2684c:	18fb      	adds	r3, r7, r3
   2684e:	2200      	movs	r2, #0
   26850:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   26852:	2314      	movs	r3, #20
   26854:	18fb      	adds	r3, r7, r3
   26856:	687a      	ldr	r2, [r7, #4]
   26858:	7812      	ldrb	r2, [r2, #0]
   2685a:	701a      	strb	r2, [r3, #0]
			++j;
   2685c:	2315      	movs	r3, #21
   2685e:	18fb      	adds	r3, r7, r3
   26860:	2215      	movs	r2, #21
   26862:	18ba      	adds	r2, r7, r2
   26864:	7812      	ldrb	r2, [r2, #0]
   26866:	3201      	adds	r2, #1
   26868:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2686a:	2315      	movs	r3, #21
   2686c:	18fb      	adds	r3, r7, r3
   2686e:	781b      	ldrb	r3, [r3, #0]
   26870:	2b04      	cmp	r3, #4
   26872:	d901      	bls.n	26878 <nmi_inet_addr+0x4c>
			{
				return 0;
   26874:	2300      	movs	r3, #0
   26876:	e057      	b.n	26928 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   26878:	2314      	movs	r3, #20
   2687a:	18fb      	adds	r3, r7, r3
   2687c:	781b      	ldrb	r3, [r3, #0]
   2687e:	2b2e      	cmp	r3, #46	; 0x2e
   26880:	d004      	beq.n	2688c <nmi_inet_addr+0x60>
   26882:	2314      	movs	r3, #20
   26884:	18fb      	adds	r3, r7, r3
   26886:	781b      	ldrb	r3, [r3, #0]
   26888:	2b00      	cmp	r3, #0
   2688a:	d10d      	bne.n	268a8 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   2688c:	2316      	movs	r3, #22
   2688e:	18fb      	adds	r3, r7, r3
   26890:	781b      	ldrb	r3, [r3, #0]
   26892:	220c      	movs	r2, #12
   26894:	18ba      	adds	r2, r7, r2
   26896:	2117      	movs	r1, #23
   26898:	1879      	adds	r1, r7, r1
   2689a:	7809      	ldrb	r1, [r1, #0]
   2689c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   2689e:	2317      	movs	r3, #23
   268a0:	18fb      	adds	r3, r7, r3
   268a2:	2200      	movs	r2, #0
   268a4:	701a      	strb	r2, [r3, #0]
   268a6:	e01d      	b.n	268e4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   268a8:	2314      	movs	r3, #20
   268aa:	18fb      	adds	r3, r7, r3
   268ac:	781b      	ldrb	r3, [r3, #0]
   268ae:	2b2f      	cmp	r3, #47	; 0x2f
   268b0:	d916      	bls.n	268e0 <nmi_inet_addr+0xb4>
   268b2:	2314      	movs	r3, #20
   268b4:	18fb      	adds	r3, r7, r3
   268b6:	781b      	ldrb	r3, [r3, #0]
   268b8:	2b39      	cmp	r3, #57	; 0x39
   268ba:	d811      	bhi.n	268e0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   268bc:	2317      	movs	r3, #23
   268be:	18fb      	adds	r3, r7, r3
   268c0:	781b      	ldrb	r3, [r3, #0]
   268c2:	1c1a      	adds	r2, r3, #0
   268c4:	0092      	lsls	r2, r2, #2
   268c6:	18d3      	adds	r3, r2, r3
   268c8:	18db      	adds	r3, r3, r3
   268ca:	b2da      	uxtb	r2, r3
   268cc:	2314      	movs	r3, #20
   268ce:	18fb      	adds	r3, r7, r3
   268d0:	781b      	ldrb	r3, [r3, #0]
   268d2:	18d3      	adds	r3, r2, r3
   268d4:	b2da      	uxtb	r2, r3
   268d6:	2317      	movs	r3, #23
   268d8:	18fb      	adds	r3, r7, r3
   268da:	3a30      	subs	r2, #48	; 0x30
   268dc:	701a      	strb	r2, [r3, #0]
   268de:	e001      	b.n	268e4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   268e0:	2300      	movs	r3, #0
   268e2:	e021      	b.n	26928 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   268e4:	687b      	ldr	r3, [r7, #4]
   268e6:	3301      	adds	r3, #1
   268e8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   268ea:	2314      	movs	r3, #20
   268ec:	18fb      	adds	r3, r7, r3
   268ee:	781b      	ldrb	r3, [r3, #0]
   268f0:	2b2e      	cmp	r3, #46	; 0x2e
   268f2:	d004      	beq.n	268fe <nmi_inet_addr+0xd2>
   268f4:	2314      	movs	r3, #20
   268f6:	18fb      	adds	r3, r7, r3
   268f8:	781b      	ldrb	r3, [r3, #0]
   268fa:	2b00      	cmp	r3, #0
   268fc:	d1a9      	bne.n	26852 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   268fe:	2316      	movs	r3, #22
   26900:	18fb      	adds	r3, r7, r3
   26902:	2216      	movs	r2, #22
   26904:	18ba      	adds	r2, r7, r2
   26906:	7812      	ldrb	r2, [r2, #0]
   26908:	3201      	adds	r2, #1
   2690a:	701a      	strb	r2, [r3, #0]
   2690c:	2316      	movs	r3, #22
   2690e:	18fb      	adds	r3, r7, r3
   26910:	781b      	ldrb	r3, [r3, #0]
   26912:	2b03      	cmp	r3, #3
   26914:	d999      	bls.n	2684a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   26916:	230c      	movs	r3, #12
   26918:	18f9      	adds	r1, r7, r3
   2691a:	2310      	movs	r3, #16
   2691c:	18fb      	adds	r3, r7, r3
   2691e:	2204      	movs	r2, #4
   26920:	0018      	movs	r0, r3
   26922:	4b03      	ldr	r3, [pc, #12]	; (26930 <nmi_inet_addr+0x104>)
   26924:	4798      	blx	r3
	return u32IP;
   26926:	693b      	ldr	r3, [r7, #16]
}
   26928:	0018      	movs	r0, r3
   2692a:	46bd      	mov	sp, r7
   2692c:	b006      	add	sp, #24
   2692e:	bd80      	pop	{r7, pc}
   26930:	00021715 	.word	0x00021715

00026934 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   26934:	b5b0      	push	{r4, r5, r7, lr}
   26936:	b088      	sub	sp, #32
   26938:	af04      	add	r7, sp, #16
   2693a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   2693c:	230f      	movs	r3, #15
   2693e:	18fb      	adds	r3, r7, r3
   26940:	22fa      	movs	r2, #250	; 0xfa
   26942:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   26944:	687b      	ldr	r3, [r7, #4]
   26946:	0018      	movs	r0, r3
   26948:	4b14      	ldr	r3, [pc, #80]	; (2699c <gethostbyname+0x68>)
   2694a:	4798      	blx	r3
   2694c:	0003      	movs	r3, r0
   2694e:	001a      	movs	r2, r3
   26950:	230e      	movs	r3, #14
   26952:	18fb      	adds	r3, r7, r3
   26954:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   26956:	230e      	movs	r3, #14
   26958:	18fb      	adds	r3, r7, r3
   2695a:	781b      	ldrb	r3, [r3, #0]
   2695c:	2b40      	cmp	r3, #64	; 0x40
   2695e:	d815      	bhi.n	2698c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   26960:	230e      	movs	r3, #14
   26962:	18fb      	adds	r3, r7, r3
   26964:	781b      	ldrb	r3, [r3, #0]
   26966:	b29b      	uxth	r3, r3
   26968:	3301      	adds	r3, #1
   2696a:	b299      	uxth	r1, r3
   2696c:	230f      	movs	r3, #15
   2696e:	18fc      	adds	r4, r7, r3
   26970:	687a      	ldr	r2, [r7, #4]
   26972:	2300      	movs	r3, #0
   26974:	9302      	str	r3, [sp, #8]
   26976:	2300      	movs	r3, #0
   26978:	9301      	str	r3, [sp, #4]
   2697a:	2300      	movs	r3, #0
   2697c:	9300      	str	r3, [sp, #0]
   2697e:	000b      	movs	r3, r1
   26980:	214a      	movs	r1, #74	; 0x4a
   26982:	2002      	movs	r0, #2
   26984:	4d06      	ldr	r5, [pc, #24]	; (269a0 <gethostbyname+0x6c>)
   26986:	47a8      	blx	r5
   26988:	0003      	movs	r3, r0
   2698a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   2698c:	230f      	movs	r3, #15
   2698e:	18fb      	adds	r3, r7, r3
   26990:	781b      	ldrb	r3, [r3, #0]
   26992:	b25b      	sxtb	r3, r3
}
   26994:	0018      	movs	r0, r3
   26996:	46bd      	mov	sp, r7
   26998:	b004      	add	sp, #16
   2699a:	bdb0      	pop	{r4, r5, r7, pc}
   2699c:	0002178f 	.word	0x0002178f
   269a0:	000219b1 	.word	0x000219b1

000269a4 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   269a4:	b580      	push	{r7, lr}
   269a6:	b082      	sub	sp, #8
   269a8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   269aa:	003b      	movs	r3, r7
   269ac:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   269ae:	687b      	ldr	r3, [r7, #4]
   269b0:	22b9      	movs	r2, #185	; 0xb9
   269b2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   269b4:	4b13      	ldr	r3, [pc, #76]	; (26a04 <spi_flash_enter_low_power_mode+0x60>)
   269b6:	2100      	movs	r1, #0
   269b8:	0018      	movs	r0, r3
   269ba:	4b13      	ldr	r3, [pc, #76]	; (26a08 <spi_flash_enter_low_power_mode+0x64>)
   269bc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   269be:	687b      	ldr	r3, [r7, #4]
   269c0:	781b      	ldrb	r3, [r3, #0]
   269c2:	001a      	movs	r2, r3
   269c4:	4b11      	ldr	r3, [pc, #68]	; (26a0c <spi_flash_enter_low_power_mode+0x68>)
   269c6:	0011      	movs	r1, r2
   269c8:	0018      	movs	r0, r3
   269ca:	4b0f      	ldr	r3, [pc, #60]	; (26a08 <spi_flash_enter_low_power_mode+0x64>)
   269cc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   269ce:	4b10      	ldr	r3, [pc, #64]	; (26a10 <spi_flash_enter_low_power_mode+0x6c>)
   269d0:	2101      	movs	r1, #1
   269d2:	0018      	movs	r0, r3
   269d4:	4b0c      	ldr	r3, [pc, #48]	; (26a08 <spi_flash_enter_low_power_mode+0x64>)
   269d6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   269d8:	4b0e      	ldr	r3, [pc, #56]	; (26a14 <spi_flash_enter_low_power_mode+0x70>)
   269da:	2100      	movs	r1, #0
   269dc:	0018      	movs	r0, r3
   269de:	4b0a      	ldr	r3, [pc, #40]	; (26a08 <spi_flash_enter_low_power_mode+0x64>)
   269e0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   269e2:	4b0d      	ldr	r3, [pc, #52]	; (26a18 <spi_flash_enter_low_power_mode+0x74>)
   269e4:	2181      	movs	r1, #129	; 0x81
   269e6:	0018      	movs	r0, r3
   269e8:	4b07      	ldr	r3, [pc, #28]	; (26a08 <spi_flash_enter_low_power_mode+0x64>)
   269ea:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   269ec:	46c0      	nop			; (mov r8, r8)
   269ee:	4b0b      	ldr	r3, [pc, #44]	; (26a1c <spi_flash_enter_low_power_mode+0x78>)
   269f0:	0018      	movs	r0, r3
   269f2:	4b0b      	ldr	r3, [pc, #44]	; (26a20 <spi_flash_enter_low_power_mode+0x7c>)
   269f4:	4798      	blx	r3
   269f6:	0003      	movs	r3, r0
   269f8:	2b01      	cmp	r3, #1
   269fa:	d1f8      	bne.n	269ee <spi_flash_enter_low_power_mode+0x4a>
}
   269fc:	46c0      	nop			; (mov r8, r8)
   269fe:	46bd      	mov	sp, r7
   26a00:	b002      	add	sp, #8
   26a02:	bd80      	pop	{r7, pc}
   26a04:	00010208 	.word	0x00010208
   26a08:	00023805 	.word	0x00023805
   26a0c:	0001020c 	.word	0x0001020c
   26a10:	00010214 	.word	0x00010214
   26a14:	0001021c 	.word	0x0001021c
   26a18:	00010204 	.word	0x00010204
   26a1c:	00010218 	.word	0x00010218
   26a20:	000237c1 	.word	0x000237c1

00026a24 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   26a24:	b580      	push	{r7, lr}
   26a26:	b082      	sub	sp, #8
   26a28:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26a2a:	003b      	movs	r3, r7
   26a2c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   26a2e:	687b      	ldr	r3, [r7, #4]
   26a30:	22ab      	movs	r2, #171	; 0xab
   26a32:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26a34:	4b13      	ldr	r3, [pc, #76]	; (26a84 <spi_flash_leave_low_power_mode+0x60>)
   26a36:	2100      	movs	r1, #0
   26a38:	0018      	movs	r0, r3
   26a3a:	4b13      	ldr	r3, [pc, #76]	; (26a88 <spi_flash_leave_low_power_mode+0x64>)
   26a3c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26a3e:	687b      	ldr	r3, [r7, #4]
   26a40:	781b      	ldrb	r3, [r3, #0]
   26a42:	001a      	movs	r2, r3
   26a44:	4b11      	ldr	r3, [pc, #68]	; (26a8c <spi_flash_leave_low_power_mode+0x68>)
   26a46:	0011      	movs	r1, r2
   26a48:	0018      	movs	r0, r3
   26a4a:	4b0f      	ldr	r3, [pc, #60]	; (26a88 <spi_flash_leave_low_power_mode+0x64>)
   26a4c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26a4e:	4b10      	ldr	r3, [pc, #64]	; (26a90 <spi_flash_leave_low_power_mode+0x6c>)
   26a50:	2101      	movs	r1, #1
   26a52:	0018      	movs	r0, r3
   26a54:	4b0c      	ldr	r3, [pc, #48]	; (26a88 <spi_flash_leave_low_power_mode+0x64>)
   26a56:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26a58:	4b0e      	ldr	r3, [pc, #56]	; (26a94 <spi_flash_leave_low_power_mode+0x70>)
   26a5a:	2100      	movs	r1, #0
   26a5c:	0018      	movs	r0, r3
   26a5e:	4b0a      	ldr	r3, [pc, #40]	; (26a88 <spi_flash_leave_low_power_mode+0x64>)
   26a60:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   26a62:	4b0d      	ldr	r3, [pc, #52]	; (26a98 <spi_flash_leave_low_power_mode+0x74>)
   26a64:	2181      	movs	r1, #129	; 0x81
   26a66:	0018      	movs	r0, r3
   26a68:	4b07      	ldr	r3, [pc, #28]	; (26a88 <spi_flash_leave_low_power_mode+0x64>)
   26a6a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26a6c:	46c0      	nop			; (mov r8, r8)
   26a6e:	4b0b      	ldr	r3, [pc, #44]	; (26a9c <spi_flash_leave_low_power_mode+0x78>)
   26a70:	0018      	movs	r0, r3
   26a72:	4b0b      	ldr	r3, [pc, #44]	; (26aa0 <spi_flash_leave_low_power_mode+0x7c>)
   26a74:	4798      	blx	r3
   26a76:	0003      	movs	r3, r0
   26a78:	2b01      	cmp	r3, #1
   26a7a:	d1f8      	bne.n	26a6e <spi_flash_leave_low_power_mode+0x4a>
}
   26a7c:	46c0      	nop			; (mov r8, r8)
   26a7e:	46bd      	mov	sp, r7
   26a80:	b002      	add	sp, #8
   26a82:	bd80      	pop	{r7, pc}
   26a84:	00010208 	.word	0x00010208
   26a88:	00023805 	.word	0x00023805
   26a8c:	0001020c 	.word	0x0001020c
   26a90:	00010214 	.word	0x00010214
   26a94:	0001021c 	.word	0x0001021c
   26a98:	00010204 	.word	0x00010204
   26a9c:	00010218 	.word	0x00010218
   26aa0:	000237c1 	.word	0x000237c1

00026aa4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   26aa4:	b590      	push	{r4, r7, lr}
   26aa6:	b085      	sub	sp, #20
   26aa8:	af00      	add	r7, sp, #0
   26aaa:	0002      	movs	r2, r0
   26aac:	1dfb      	adds	r3, r7, #7
   26aae:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   26ab0:	230f      	movs	r3, #15
   26ab2:	18fb      	adds	r3, r7, r3
   26ab4:	2200      	movs	r2, #0
   26ab6:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   26ab8:	4b24      	ldr	r3, [pc, #144]	; (26b4c <spi_flash_enable+0xa8>)
   26aba:	4798      	blx	r3
   26abc:	0003      	movs	r3, r0
   26abe:	051b      	lsls	r3, r3, #20
   26ac0:	0d1b      	lsrs	r3, r3, #20
   26ac2:	4a23      	ldr	r2, [pc, #140]	; (26b50 <spi_flash_enable+0xac>)
   26ac4:	4293      	cmp	r3, r2
   26ac6:	d938      	bls.n	26b3a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   26ac8:	230f      	movs	r3, #15
   26aca:	18fc      	adds	r4, r7, r3
   26acc:	2308      	movs	r3, #8
   26ace:	18fb      	adds	r3, r7, r3
   26ad0:	4a20      	ldr	r2, [pc, #128]	; (26b54 <spi_flash_enable+0xb0>)
   26ad2:	0019      	movs	r1, r3
   26ad4:	0010      	movs	r0, r2
   26ad6:	4b20      	ldr	r3, [pc, #128]	; (26b58 <spi_flash_enable+0xb4>)
   26ad8:	4798      	blx	r3
   26ada:	0003      	movs	r3, r0
   26adc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   26ade:	230f      	movs	r3, #15
   26ae0:	18fb      	adds	r3, r7, r3
   26ae2:	781b      	ldrb	r3, [r3, #0]
   26ae4:	b25b      	sxtb	r3, r3
   26ae6:	2b00      	cmp	r3, #0
   26ae8:	d126      	bne.n	26b38 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   26aea:	68bb      	ldr	r3, [r7, #8]
   26aec:	4a1b      	ldr	r2, [pc, #108]	; (26b5c <spi_flash_enable+0xb8>)
   26aee:	4013      	ands	r3, r2
   26af0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26af2:	68bb      	ldr	r3, [r7, #8]
   26af4:	4a1a      	ldr	r2, [pc, #104]	; (26b60 <spi_flash_enable+0xbc>)
   26af6:	4313      	orrs	r3, r2
   26af8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26afa:	68bb      	ldr	r3, [r7, #8]
   26afc:	4a15      	ldr	r2, [pc, #84]	; (26b54 <spi_flash_enable+0xb0>)
   26afe:	0019      	movs	r1, r3
   26b00:	0010      	movs	r0, r2
   26b02:	4b18      	ldr	r3, [pc, #96]	; (26b64 <spi_flash_enable+0xc0>)
   26b04:	4798      	blx	r3
		if(enable) {
   26b06:	1dfb      	adds	r3, r7, #7
   26b08:	781b      	ldrb	r3, [r3, #0]
   26b0a:	2b00      	cmp	r3, #0
   26b0c:	d002      	beq.n	26b14 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   26b0e:	4b16      	ldr	r3, [pc, #88]	; (26b68 <spi_flash_enable+0xc4>)
   26b10:	4798      	blx	r3
   26b12:	e001      	b.n	26b18 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26b14:	4b15      	ldr	r3, [pc, #84]	; (26b6c <spi_flash_enable+0xc8>)
   26b16:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   26b18:	68bb      	ldr	r3, [r7, #8]
   26b1a:	4a10      	ldr	r2, [pc, #64]	; (26b5c <spi_flash_enable+0xb8>)
   26b1c:	4013      	ands	r3, r2
   26b1e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   26b20:	68bb      	ldr	r3, [r7, #8]
   26b22:	2280      	movs	r2, #128	; 0x80
   26b24:	0252      	lsls	r2, r2, #9
   26b26:	4313      	orrs	r3, r2
   26b28:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26b2a:	68bb      	ldr	r3, [r7, #8]
   26b2c:	4a09      	ldr	r2, [pc, #36]	; (26b54 <spi_flash_enable+0xb0>)
   26b2e:	0019      	movs	r1, r3
   26b30:	0010      	movs	r0, r2
   26b32:	4b0c      	ldr	r3, [pc, #48]	; (26b64 <spi_flash_enable+0xc0>)
   26b34:	4798      	blx	r3
   26b36:	e000      	b.n	26b3a <spi_flash_enable+0x96>
			goto ERR1;
   26b38:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   26b3a:	230f      	movs	r3, #15
   26b3c:	18fb      	adds	r3, r7, r3
   26b3e:	781b      	ldrb	r3, [r3, #0]
   26b40:	b25b      	sxtb	r3, r3
}
   26b42:	0018      	movs	r0, r3
   26b44:	46bd      	mov	sp, r7
   26b46:	b005      	add	sp, #20
   26b48:	bd90      	pop	{r4, r7, pc}
   26b4a:	46c0      	nop			; (mov r8, r8)
   26b4c:	000230e1 	.word	0x000230e1
   26b50:	0000039f 	.word	0x0000039f
   26b54:	00001410 	.word	0x00001410
   26b58:	000237e1 	.word	0x000237e1
   26b5c:	f8888fff 	.word	0xf8888fff
   26b60:	01111000 	.word	0x01111000
   26b64:	00023805 	.word	0x00023805
   26b68:	00026a25 	.word	0x00026a25
   26b6c:	000269a5 	.word	0x000269a5

00026b70 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   26b70:	b580      	push	{r7, lr}
   26b72:	b084      	sub	sp, #16
   26b74:	af00      	add	r7, sp, #0
   26b76:	0002      	movs	r2, r0
   26b78:	1dfb      	adds	r3, r7, #7
   26b7a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   26b7c:	1dfb      	adds	r3, r7, #7
   26b7e:	781b      	ldrb	r3, [r3, #0]
   26b80:	2b00      	cmp	r3, #0
   26b82:	d108      	bne.n	26b96 <mem_test_unit_ready+0x26>
   26b84:	1dfb      	adds	r3, r7, #7
   26b86:	781a      	ldrb	r2, [r3, #0]
   26b88:	4b08      	ldr	r3, [pc, #32]	; (26bac <mem_test_unit_ready+0x3c>)
   26b8a:	0152      	lsls	r2, r2, #5
   26b8c:	58d3      	ldr	r3, [r2, r3]
   26b8e:	4798      	blx	r3
   26b90:	0003      	movs	r3, r0
   26b92:	001a      	movs	r2, r3
   26b94:	e000      	b.n	26b98 <mem_test_unit_ready+0x28>
   26b96:	2201      	movs	r2, #1
  status =
   26b98:	230f      	movs	r3, #15
   26b9a:	18fb      	adds	r3, r7, r3
   26b9c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26b9e:	230f      	movs	r3, #15
   26ba0:	18fb      	adds	r3, r7, r3
   26ba2:	781b      	ldrb	r3, [r3, #0]
}
   26ba4:	0018      	movs	r0, r3
   26ba6:	46bd      	mov	sp, r7
   26ba8:	b004      	add	sp, #16
   26baa:	bd80      	pop	{r7, pc}
   26bac:	0003a00c 	.word	0x0003a00c

00026bb0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   26bb0:	b580      	push	{r7, lr}
   26bb2:	b084      	sub	sp, #16
   26bb4:	af00      	add	r7, sp, #0
   26bb6:	0002      	movs	r2, r0
   26bb8:	6039      	str	r1, [r7, #0]
   26bba:	1dfb      	adds	r3, r7, #7
   26bbc:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   26bbe:	1dfb      	adds	r3, r7, #7
   26bc0:	781b      	ldrb	r3, [r3, #0]
   26bc2:	2b00      	cmp	r3, #0
   26bc4:	d10c      	bne.n	26be0 <mem_read_capacity+0x30>
   26bc6:	1dfb      	adds	r3, r7, #7
   26bc8:	781b      	ldrb	r3, [r3, #0]
   26bca:	4a0b      	ldr	r2, [pc, #44]	; (26bf8 <mem_read_capacity+0x48>)
   26bcc:	015b      	lsls	r3, r3, #5
   26bce:	18d3      	adds	r3, r2, r3
   26bd0:	3304      	adds	r3, #4
   26bd2:	681b      	ldr	r3, [r3, #0]
   26bd4:	683a      	ldr	r2, [r7, #0]
   26bd6:	0010      	movs	r0, r2
   26bd8:	4798      	blx	r3
   26bda:	0003      	movs	r3, r0
   26bdc:	001a      	movs	r2, r3
   26bde:	e000      	b.n	26be2 <mem_read_capacity+0x32>
   26be0:	2201      	movs	r2, #1
  status =
   26be2:	230f      	movs	r3, #15
   26be4:	18fb      	adds	r3, r7, r3
   26be6:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26be8:	230f      	movs	r3, #15
   26bea:	18fb      	adds	r3, r7, r3
   26bec:	781b      	ldrb	r3, [r3, #0]
}
   26bee:	0018      	movs	r0, r3
   26bf0:	46bd      	mov	sp, r7
   26bf2:	b004      	add	sp, #16
   26bf4:	bd80      	pop	{r7, pc}
   26bf6:	46c0      	nop			; (mov r8, r8)
   26bf8:	0003a00c 	.word	0x0003a00c

00026bfc <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   26bfc:	b580      	push	{r7, lr}
   26bfe:	b084      	sub	sp, #16
   26c00:	af00      	add	r7, sp, #0
   26c02:	0002      	movs	r2, r0
   26c04:	1dfb      	adds	r3, r7, #7
   26c06:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   26c08:	1dfb      	adds	r3, r7, #7
   26c0a:	781b      	ldrb	r3, [r3, #0]
   26c0c:	425a      	negs	r2, r3
   26c0e:	4153      	adcs	r3, r2
   26c10:	b2da      	uxtb	r2, r3
  sector_size =
   26c12:	230f      	movs	r3, #15
   26c14:	18fb      	adds	r3, r7, r3
   26c16:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   26c18:	230f      	movs	r3, #15
   26c1a:	18fb      	adds	r3, r7, r3
   26c1c:	781b      	ldrb	r3, [r3, #0]
}
   26c1e:	0018      	movs	r0, r3
   26c20:	46bd      	mov	sp, r7
   26c22:	b004      	add	sp, #16
   26c24:	bd80      	pop	{r7, pc}
	...

00026c28 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   26c28:	b580      	push	{r7, lr}
   26c2a:	b084      	sub	sp, #16
   26c2c:	af00      	add	r7, sp, #0
   26c2e:	0002      	movs	r2, r0
   26c30:	1dfb      	adds	r3, r7, #7
   26c32:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   26c34:	1dfb      	adds	r3, r7, #7
   26c36:	781b      	ldrb	r3, [r3, #0]
   26c38:	2b00      	cmp	r3, #0
   26c3a:	d109      	bne.n	26c50 <mem_wr_protect+0x28>
   26c3c:	1dfb      	adds	r3, r7, #7
   26c3e:	781b      	ldrb	r3, [r3, #0]
   26c40:	4a0a      	ldr	r2, [pc, #40]	; (26c6c <mem_wr_protect+0x44>)
   26c42:	015b      	lsls	r3, r3, #5
   26c44:	18d3      	adds	r3, r2, r3
   26c46:	330c      	adds	r3, #12
   26c48:	681b      	ldr	r3, [r3, #0]
   26c4a:	4798      	blx	r3
   26c4c:	1e03      	subs	r3, r0, #0
   26c4e:	d001      	beq.n	26c54 <mem_wr_protect+0x2c>
   26c50:	2201      	movs	r2, #1
   26c52:	e000      	b.n	26c56 <mem_wr_protect+0x2e>
   26c54:	2200      	movs	r2, #0
  wr_protect =
   26c56:	230f      	movs	r3, #15
   26c58:	18fb      	adds	r3, r7, r3
   26c5a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   26c5c:	230f      	movs	r3, #15
   26c5e:	18fb      	adds	r3, r7, r3
   26c60:	781b      	ldrb	r3, [r3, #0]
}
   26c62:	0018      	movs	r0, r3
   26c64:	46bd      	mov	sp, r7
   26c66:	b004      	add	sp, #16
   26c68:	bd80      	pop	{r7, pc}
   26c6a:	46c0      	nop			; (mov r8, r8)
   26c6c:	0003a00c 	.word	0x0003a00c

00026c70 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   26c70:	b580      	push	{r7, lr}
   26c72:	b086      	sub	sp, #24
   26c74:	af00      	add	r7, sp, #0
   26c76:	60b9      	str	r1, [r7, #8]
   26c78:	607a      	str	r2, [r7, #4]
   26c7a:	230f      	movs	r3, #15
   26c7c:	18fb      	adds	r3, r7, r3
   26c7e:	1c02      	adds	r2, r0, #0
   26c80:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   26c82:	230f      	movs	r3, #15
   26c84:	18fb      	adds	r3, r7, r3
   26c86:	781b      	ldrb	r3, [r3, #0]
   26c88:	2b00      	cmp	r3, #0
   26c8a:	d10e      	bne.n	26caa <memory_2_ram+0x3a>
   26c8c:	230f      	movs	r3, #15
   26c8e:	18fb      	adds	r3, r7, r3
   26c90:	781b      	ldrb	r3, [r3, #0]
   26c92:	4a0b      	ldr	r2, [pc, #44]	; (26cc0 <memory_2_ram+0x50>)
   26c94:	015b      	lsls	r3, r3, #5
   26c96:	18d3      	adds	r3, r2, r3
   26c98:	3314      	adds	r3, #20
   26c9a:	681b      	ldr	r3, [r3, #0]
   26c9c:	6879      	ldr	r1, [r7, #4]
   26c9e:	68ba      	ldr	r2, [r7, #8]
   26ca0:	0010      	movs	r0, r2
   26ca2:	4798      	blx	r3
   26ca4:	0003      	movs	r3, r0
   26ca6:	001a      	movs	r2, r3
   26ca8:	e000      	b.n	26cac <memory_2_ram+0x3c>
   26caa:	2201      	movs	r2, #1
  status =
   26cac:	2317      	movs	r3, #23
   26cae:	18fb      	adds	r3, r7, r3
   26cb0:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   26cb2:	2317      	movs	r3, #23
   26cb4:	18fb      	adds	r3, r7, r3
   26cb6:	781b      	ldrb	r3, [r3, #0]
}
   26cb8:	0018      	movs	r0, r3
   26cba:	46bd      	mov	sp, r7
   26cbc:	b006      	add	sp, #24
   26cbe:	bd80      	pop	{r7, pc}
   26cc0:	0003a00c 	.word	0x0003a00c

00026cc4 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26cc4:	b580      	push	{r7, lr}
   26cc6:	b086      	sub	sp, #24
   26cc8:	af00      	add	r7, sp, #0
   26cca:	60b9      	str	r1, [r7, #8]
   26ccc:	607a      	str	r2, [r7, #4]
   26cce:	230f      	movs	r3, #15
   26cd0:	18fb      	adds	r3, r7, r3
   26cd2:	1c02      	adds	r2, r0, #0
   26cd4:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   26cd6:	230f      	movs	r3, #15
   26cd8:	18fb      	adds	r3, r7, r3
   26cda:	781b      	ldrb	r3, [r3, #0]
   26cdc:	2b00      	cmp	r3, #0
   26cde:	d10e      	bne.n	26cfe <ram_2_memory+0x3a>
   26ce0:	230f      	movs	r3, #15
   26ce2:	18fb      	adds	r3, r7, r3
   26ce4:	781b      	ldrb	r3, [r3, #0]
   26ce6:	4a0b      	ldr	r2, [pc, #44]	; (26d14 <ram_2_memory+0x50>)
   26ce8:	015b      	lsls	r3, r3, #5
   26cea:	18d3      	adds	r3, r2, r3
   26cec:	3318      	adds	r3, #24
   26cee:	681b      	ldr	r3, [r3, #0]
   26cf0:	6879      	ldr	r1, [r7, #4]
   26cf2:	68ba      	ldr	r2, [r7, #8]
   26cf4:	0010      	movs	r0, r2
   26cf6:	4798      	blx	r3
   26cf8:	0003      	movs	r3, r0
   26cfa:	001a      	movs	r2, r3
   26cfc:	e000      	b.n	26d00 <ram_2_memory+0x3c>
   26cfe:	2201      	movs	r2, #1
  status =
   26d00:	2317      	movs	r3, #23
   26d02:	18fb      	adds	r3, r7, r3
   26d04:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   26d06:	2317      	movs	r3, #23
   26d08:	18fb      	adds	r3, r7, r3
   26d0a:	781b      	ldrb	r3, [r3, #0]
}
   26d0c:	0018      	movs	r0, r3
   26d0e:	46bd      	mov	sp, r7
   26d10:	b006      	add	sp, #24
   26d12:	bd80      	pop	{r7, pc}
   26d14:	0003a00c 	.word	0x0003a00c

00026d18 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   26d18:	b580      	push	{r7, lr}
   26d1a:	b082      	sub	sp, #8
   26d1c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   26d1e:	4b10      	ldr	r3, [pc, #64]	; (26d60 <cpu_irq_enter_critical+0x48>)
   26d20:	681b      	ldr	r3, [r3, #0]
   26d22:	2b00      	cmp	r3, #0
   26d24:	d112      	bne.n	26d4c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   26d26:	f3ef 8310 	mrs	r3, PRIMASK
   26d2a:	607b      	str	r3, [r7, #4]
  return(result);
   26d2c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   26d2e:	2b00      	cmp	r3, #0
   26d30:	d109      	bne.n	26d46 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   26d32:	b672      	cpsid	i
   26d34:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   26d38:	4b0a      	ldr	r3, [pc, #40]	; (26d64 <cpu_irq_enter_critical+0x4c>)
   26d3a:	2200      	movs	r2, #0
   26d3c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   26d3e:	4b0a      	ldr	r3, [pc, #40]	; (26d68 <cpu_irq_enter_critical+0x50>)
   26d40:	2201      	movs	r2, #1
   26d42:	701a      	strb	r2, [r3, #0]
   26d44:	e002      	b.n	26d4c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   26d46:	4b08      	ldr	r3, [pc, #32]	; (26d68 <cpu_irq_enter_critical+0x50>)
   26d48:	2200      	movs	r2, #0
   26d4a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   26d4c:	4b04      	ldr	r3, [pc, #16]	; (26d60 <cpu_irq_enter_critical+0x48>)
   26d4e:	681b      	ldr	r3, [r3, #0]
   26d50:	1c5a      	adds	r2, r3, #1
   26d52:	4b03      	ldr	r3, [pc, #12]	; (26d60 <cpu_irq_enter_critical+0x48>)
   26d54:	601a      	str	r2, [r3, #0]
}
   26d56:	46c0      	nop			; (mov r8, r8)
   26d58:	46bd      	mov	sp, r7
   26d5a:	b002      	add	sp, #8
   26d5c:	bd80      	pop	{r7, pc}
   26d5e:	46c0      	nop			; (mov r8, r8)
   26d60:	20003ef0 	.word	0x20003ef0
   26d64:	2000011a 	.word	0x2000011a
   26d68:	20003ef4 	.word	0x20003ef4

00026d6c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   26d6c:	b580      	push	{r7, lr}
   26d6e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   26d70:	4b0b      	ldr	r3, [pc, #44]	; (26da0 <cpu_irq_leave_critical+0x34>)
   26d72:	681b      	ldr	r3, [r3, #0]
   26d74:	1e5a      	subs	r2, r3, #1
   26d76:	4b0a      	ldr	r3, [pc, #40]	; (26da0 <cpu_irq_leave_critical+0x34>)
   26d78:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   26d7a:	4b09      	ldr	r3, [pc, #36]	; (26da0 <cpu_irq_leave_critical+0x34>)
   26d7c:	681b      	ldr	r3, [r3, #0]
   26d7e:	2b00      	cmp	r3, #0
   26d80:	d10a      	bne.n	26d98 <cpu_irq_leave_critical+0x2c>
   26d82:	4b08      	ldr	r3, [pc, #32]	; (26da4 <cpu_irq_leave_critical+0x38>)
   26d84:	781b      	ldrb	r3, [r3, #0]
   26d86:	b2db      	uxtb	r3, r3
   26d88:	2b00      	cmp	r3, #0
   26d8a:	d005      	beq.n	26d98 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   26d8c:	4b06      	ldr	r3, [pc, #24]	; (26da8 <cpu_irq_leave_critical+0x3c>)
   26d8e:	2201      	movs	r2, #1
   26d90:	701a      	strb	r2, [r3, #0]
   26d92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   26d96:	b662      	cpsie	i
	}
}
   26d98:	46c0      	nop			; (mov r8, r8)
   26d9a:	46bd      	mov	sp, r7
   26d9c:	bd80      	pop	{r7, pc}
   26d9e:	46c0      	nop			; (mov r8, r8)
   26da0:	20003ef0 	.word	0x20003ef0
   26da4:	20003ef4 	.word	0x20003ef4
   26da8:	2000011a 	.word	0x2000011a

00026dac <system_pinmux_get_group_from_gpio_pin>:
{
   26dac:	b580      	push	{r7, lr}
   26dae:	b084      	sub	sp, #16
   26db0:	af00      	add	r7, sp, #0
   26db2:	0002      	movs	r2, r0
   26db4:	1dfb      	adds	r3, r7, #7
   26db6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26db8:	230f      	movs	r3, #15
   26dba:	18fb      	adds	r3, r7, r3
   26dbc:	1dfa      	adds	r2, r7, #7
   26dbe:	7812      	ldrb	r2, [r2, #0]
   26dc0:	09d2      	lsrs	r2, r2, #7
   26dc2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26dc4:	230e      	movs	r3, #14
   26dc6:	18fb      	adds	r3, r7, r3
   26dc8:	1dfa      	adds	r2, r7, #7
   26dca:	7812      	ldrb	r2, [r2, #0]
   26dcc:	0952      	lsrs	r2, r2, #5
   26dce:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26dd0:	4b0d      	ldr	r3, [pc, #52]	; (26e08 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26dd2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26dd4:	230f      	movs	r3, #15
   26dd6:	18fb      	adds	r3, r7, r3
   26dd8:	781b      	ldrb	r3, [r3, #0]
   26dda:	2b00      	cmp	r3, #0
   26ddc:	d10f      	bne.n	26dfe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   26dde:	230f      	movs	r3, #15
   26de0:	18fb      	adds	r3, r7, r3
   26de2:	781b      	ldrb	r3, [r3, #0]
   26de4:	009b      	lsls	r3, r3, #2
   26de6:	2210      	movs	r2, #16
   26de8:	4694      	mov	ip, r2
   26dea:	44bc      	add	ip, r7
   26dec:	4463      	add	r3, ip
   26dee:	3b08      	subs	r3, #8
   26df0:	681a      	ldr	r2, [r3, #0]
   26df2:	230e      	movs	r3, #14
   26df4:	18fb      	adds	r3, r7, r3
   26df6:	781b      	ldrb	r3, [r3, #0]
   26df8:	01db      	lsls	r3, r3, #7
   26dfa:	18d3      	adds	r3, r2, r3
   26dfc:	e000      	b.n	26e00 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   26dfe:	2300      	movs	r3, #0
}
   26e00:	0018      	movs	r0, r3
   26e02:	46bd      	mov	sp, r7
   26e04:	b004      	add	sp, #16
   26e06:	bd80      	pop	{r7, pc}
   26e08:	41004400 	.word	0x41004400

00026e0c <port_get_group_from_gpio_pin>:
{
   26e0c:	b580      	push	{r7, lr}
   26e0e:	b082      	sub	sp, #8
   26e10:	af00      	add	r7, sp, #0
   26e12:	0002      	movs	r2, r0
   26e14:	1dfb      	adds	r3, r7, #7
   26e16:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26e18:	1dfb      	adds	r3, r7, #7
   26e1a:	781b      	ldrb	r3, [r3, #0]
   26e1c:	0018      	movs	r0, r3
   26e1e:	4b03      	ldr	r3, [pc, #12]	; (26e2c <port_get_group_from_gpio_pin+0x20>)
   26e20:	4798      	blx	r3
   26e22:	0003      	movs	r3, r0
}
   26e24:	0018      	movs	r0, r3
   26e26:	46bd      	mov	sp, r7
   26e28:	b002      	add	sp, #8
   26e2a:	bd80      	pop	{r7, pc}
   26e2c:	00026dad 	.word	0x00026dad

00026e30 <port_get_config_defaults>:
{
   26e30:	b580      	push	{r7, lr}
   26e32:	b082      	sub	sp, #8
   26e34:	af00      	add	r7, sp, #0
   26e36:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   26e38:	687b      	ldr	r3, [r7, #4]
   26e3a:	2200      	movs	r2, #0
   26e3c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   26e3e:	687b      	ldr	r3, [r7, #4]
   26e40:	2201      	movs	r2, #1
   26e42:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   26e44:	687b      	ldr	r3, [r7, #4]
   26e46:	2200      	movs	r2, #0
   26e48:	709a      	strb	r2, [r3, #2]
}
   26e4a:	46c0      	nop			; (mov r8, r8)
   26e4c:	46bd      	mov	sp, r7
   26e4e:	b002      	add	sp, #8
   26e50:	bd80      	pop	{r7, pc}
	...

00026e54 <port_pin_set_output_level>:
{
   26e54:	b580      	push	{r7, lr}
   26e56:	b084      	sub	sp, #16
   26e58:	af00      	add	r7, sp, #0
   26e5a:	0002      	movs	r2, r0
   26e5c:	1dfb      	adds	r3, r7, #7
   26e5e:	701a      	strb	r2, [r3, #0]
   26e60:	1dbb      	adds	r3, r7, #6
   26e62:	1c0a      	adds	r2, r1, #0
   26e64:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   26e66:	1dfb      	adds	r3, r7, #7
   26e68:	781b      	ldrb	r3, [r3, #0]
   26e6a:	0018      	movs	r0, r3
   26e6c:	4b0d      	ldr	r3, [pc, #52]	; (26ea4 <port_pin_set_output_level+0x50>)
   26e6e:	4798      	blx	r3
   26e70:	0003      	movs	r3, r0
   26e72:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   26e74:	1dfb      	adds	r3, r7, #7
   26e76:	781b      	ldrb	r3, [r3, #0]
   26e78:	221f      	movs	r2, #31
   26e7a:	4013      	ands	r3, r2
   26e7c:	2201      	movs	r2, #1
   26e7e:	409a      	lsls	r2, r3
   26e80:	0013      	movs	r3, r2
   26e82:	60bb      	str	r3, [r7, #8]
	if (level) {
   26e84:	1dbb      	adds	r3, r7, #6
   26e86:	781b      	ldrb	r3, [r3, #0]
   26e88:	2b00      	cmp	r3, #0
   26e8a:	d003      	beq.n	26e94 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   26e8c:	68fb      	ldr	r3, [r7, #12]
   26e8e:	68ba      	ldr	r2, [r7, #8]
   26e90:	619a      	str	r2, [r3, #24]
}
   26e92:	e002      	b.n	26e9a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   26e94:	68fb      	ldr	r3, [r7, #12]
   26e96:	68ba      	ldr	r2, [r7, #8]
   26e98:	615a      	str	r2, [r3, #20]
}
   26e9a:	46c0      	nop			; (mov r8, r8)
   26e9c:	46bd      	mov	sp, r7
   26e9e:	b004      	add	sp, #16
   26ea0:	bd80      	pop	{r7, pc}
   26ea2:	46c0      	nop			; (mov r8, r8)
   26ea4:	00026e0d 	.word	0x00026e0d

00026ea8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   26ea8:	b580      	push	{r7, lr}
   26eaa:	b082      	sub	sp, #8
   26eac:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   26eae:	1d3b      	adds	r3, r7, #4
   26eb0:	0018      	movs	r0, r3
   26eb2:	4b0e      	ldr	r3, [pc, #56]	; (26eec <system_board_init+0x44>)
   26eb4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   26eb6:	1d3b      	adds	r3, r7, #4
   26eb8:	2201      	movs	r2, #1
   26eba:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   26ebc:	1d3b      	adds	r3, r7, #4
   26ebe:	0019      	movs	r1, r3
   26ec0:	2017      	movs	r0, #23
   26ec2:	4b0b      	ldr	r3, [pc, #44]	; (26ef0 <system_board_init+0x48>)
   26ec4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   26ec6:	2101      	movs	r1, #1
   26ec8:	2017      	movs	r0, #23
   26eca:	4b0a      	ldr	r3, [pc, #40]	; (26ef4 <system_board_init+0x4c>)
   26ecc:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   26ece:	1d3b      	adds	r3, r7, #4
   26ed0:	2200      	movs	r2, #0
   26ed2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26ed4:	1d3b      	adds	r3, r7, #4
   26ed6:	2201      	movs	r2, #1
   26ed8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   26eda:	1d3b      	adds	r3, r7, #4
   26edc:	0019      	movs	r1, r3
   26ede:	2037      	movs	r0, #55	; 0x37
   26ee0:	4b03      	ldr	r3, [pc, #12]	; (26ef0 <system_board_init+0x48>)
   26ee2:	4798      	blx	r3
}
   26ee4:	46c0      	nop			; (mov r8, r8)
   26ee6:	46bd      	mov	sp, r7
   26ee8:	b002      	add	sp, #8
   26eea:	bd80      	pop	{r7, pc}
   26eec:	00026e31 	.word	0x00026e31
   26ef0:	0002751d 	.word	0x0002751d
   26ef4:	00026e55 	.word	0x00026e55

00026ef8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   26ef8:	b580      	push	{r7, lr}
   26efa:	b084      	sub	sp, #16
   26efc:	af00      	add	r7, sp, #0
   26efe:	0002      	movs	r2, r0
   26f00:	1dfb      	adds	r3, r7, #7
   26f02:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26f04:	230f      	movs	r3, #15
   26f06:	18fb      	adds	r3, r7, r3
   26f08:	1dfa      	adds	r2, r7, #7
   26f0a:	7812      	ldrb	r2, [r2, #0]
   26f0c:	0952      	lsrs	r2, r2, #5
   26f0e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   26f10:	230f      	movs	r3, #15
   26f12:	18fb      	adds	r3, r7, r3
   26f14:	781b      	ldrb	r3, [r3, #0]
   26f16:	2b00      	cmp	r3, #0
   26f18:	d10c      	bne.n	26f34 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26f1a:	4b09      	ldr	r3, [pc, #36]	; (26f40 <_extint_get_eic_from_channel+0x48>)
   26f1c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   26f1e:	230f      	movs	r3, #15
   26f20:	18fb      	adds	r3, r7, r3
   26f22:	781b      	ldrb	r3, [r3, #0]
   26f24:	009b      	lsls	r3, r3, #2
   26f26:	2210      	movs	r2, #16
   26f28:	4694      	mov	ip, r2
   26f2a:	44bc      	add	ip, r7
   26f2c:	4463      	add	r3, ip
   26f2e:	3b08      	subs	r3, #8
   26f30:	681b      	ldr	r3, [r3, #0]
   26f32:	e000      	b.n	26f36 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   26f34:	2300      	movs	r3, #0
	}
}
   26f36:	0018      	movs	r0, r3
   26f38:	46bd      	mov	sp, r7
   26f3a:	b004      	add	sp, #16
   26f3c:	bd80      	pop	{r7, pc}
   26f3e:	46c0      	nop			; (mov r8, r8)
   26f40:	40001800 	.word	0x40001800

00026f44 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   26f44:	b580      	push	{r7, lr}
   26f46:	b084      	sub	sp, #16
   26f48:	af00      	add	r7, sp, #0
   26f4a:	0002      	movs	r2, r0
   26f4c:	1dfb      	adds	r3, r7, #7
   26f4e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26f50:	1dfb      	adds	r3, r7, #7
   26f52:	781b      	ldrb	r3, [r3, #0]
   26f54:	0018      	movs	r0, r3
   26f56:	4b0b      	ldr	r3, [pc, #44]	; (26f84 <extint_chan_is_detected+0x40>)
   26f58:	4798      	blx	r3
   26f5a:	0003      	movs	r3, r0
   26f5c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26f5e:	1dfb      	adds	r3, r7, #7
   26f60:	781b      	ldrb	r3, [r3, #0]
   26f62:	221f      	movs	r2, #31
   26f64:	4013      	ands	r3, r2
   26f66:	2201      	movs	r2, #1
   26f68:	409a      	lsls	r2, r3
   26f6a:	0013      	movs	r3, r2
   26f6c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   26f6e:	68fb      	ldr	r3, [r7, #12]
   26f70:	691b      	ldr	r3, [r3, #16]
   26f72:	68ba      	ldr	r2, [r7, #8]
   26f74:	4013      	ands	r3, r2
   26f76:	1e5a      	subs	r2, r3, #1
   26f78:	4193      	sbcs	r3, r2
   26f7a:	b2db      	uxtb	r3, r3
}
   26f7c:	0018      	movs	r0, r3
   26f7e:	46bd      	mov	sp, r7
   26f80:	b004      	add	sp, #16
   26f82:	bd80      	pop	{r7, pc}
   26f84:	00026ef9 	.word	0x00026ef9

00026f88 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   26f88:	b580      	push	{r7, lr}
   26f8a:	b084      	sub	sp, #16
   26f8c:	af00      	add	r7, sp, #0
   26f8e:	0002      	movs	r2, r0
   26f90:	1dfb      	adds	r3, r7, #7
   26f92:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26f94:	1dfb      	adds	r3, r7, #7
   26f96:	781b      	ldrb	r3, [r3, #0]
   26f98:	0018      	movs	r0, r3
   26f9a:	4b09      	ldr	r3, [pc, #36]	; (26fc0 <extint_chan_clear_detected+0x38>)
   26f9c:	4798      	blx	r3
   26f9e:	0003      	movs	r3, r0
   26fa0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26fa2:	1dfb      	adds	r3, r7, #7
   26fa4:	781b      	ldrb	r3, [r3, #0]
   26fa6:	221f      	movs	r2, #31
   26fa8:	4013      	ands	r3, r2
   26faa:	2201      	movs	r2, #1
   26fac:	409a      	lsls	r2, r3
   26fae:	0013      	movs	r3, r2
   26fb0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   26fb2:	68fb      	ldr	r3, [r7, #12]
   26fb4:	68ba      	ldr	r2, [r7, #8]
   26fb6:	611a      	str	r2, [r3, #16]
}
   26fb8:	46c0      	nop			; (mov r8, r8)
   26fba:	46bd      	mov	sp, r7
   26fbc:	b004      	add	sp, #16
   26fbe:	bd80      	pop	{r7, pc}
   26fc0:	00026ef9 	.word	0x00026ef9

00026fc4 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26fc4:	b580      	push	{r7, lr}
   26fc6:	b082      	sub	sp, #8
   26fc8:	af00      	add	r7, sp, #0
   26fca:	6078      	str	r0, [r7, #4]
   26fcc:	0008      	movs	r0, r1
   26fce:	0011      	movs	r1, r2
   26fd0:	1cfb      	adds	r3, r7, #3
   26fd2:	1c02      	adds	r2, r0, #0
   26fd4:	701a      	strb	r2, [r3, #0]
   26fd6:	1cbb      	adds	r3, r7, #2
   26fd8:	1c0a      	adds	r2, r1, #0
   26fda:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   26fdc:	1cbb      	adds	r3, r7, #2
   26fde:	781b      	ldrb	r3, [r3, #0]
   26fe0:	2b00      	cmp	r3, #0
   26fe2:	d001      	beq.n	26fe8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   26fe4:	2317      	movs	r3, #23
   26fe6:	e019      	b.n	2701c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   26fe8:	1cfb      	adds	r3, r7, #3
   26fea:	781a      	ldrb	r2, [r3, #0]
   26fec:	4b0d      	ldr	r3, [pc, #52]	; (27024 <extint_register_callback+0x60>)
   26fee:	0092      	lsls	r2, r2, #2
   26ff0:	58d3      	ldr	r3, [r2, r3]
   26ff2:	2b00      	cmp	r3, #0
   26ff4:	d107      	bne.n	27006 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   26ff6:	1cfb      	adds	r3, r7, #3
   26ff8:	781a      	ldrb	r2, [r3, #0]
   26ffa:	4b0a      	ldr	r3, [pc, #40]	; (27024 <extint_register_callback+0x60>)
   26ffc:	0092      	lsls	r2, r2, #2
   26ffe:	6879      	ldr	r1, [r7, #4]
   27000:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   27002:	2300      	movs	r3, #0
   27004:	e00a      	b.n	2701c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   27006:	1cfb      	adds	r3, r7, #3
   27008:	781a      	ldrb	r2, [r3, #0]
   2700a:	4b06      	ldr	r3, [pc, #24]	; (27024 <extint_register_callback+0x60>)
   2700c:	0092      	lsls	r2, r2, #2
   2700e:	58d2      	ldr	r2, [r2, r3]
   27010:	687b      	ldr	r3, [r7, #4]
   27012:	429a      	cmp	r2, r3
   27014:	d101      	bne.n	2701a <extint_register_callback+0x56>
		return STATUS_OK;
   27016:	2300      	movs	r3, #0
   27018:	e000      	b.n	2701c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   2701a:	231d      	movs	r3, #29
}
   2701c:	0018      	movs	r0, r3
   2701e:	46bd      	mov	sp, r7
   27020:	b002      	add	sp, #8
   27022:	bd80      	pop	{r7, pc}
   27024:	200057f4 	.word	0x200057f4

00027028 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   27028:	b580      	push	{r7, lr}
   2702a:	b084      	sub	sp, #16
   2702c:	af00      	add	r7, sp, #0
   2702e:	0002      	movs	r2, r0
   27030:	1dfb      	adds	r3, r7, #7
   27032:	701a      	strb	r2, [r3, #0]
   27034:	1dbb      	adds	r3, r7, #6
   27036:	1c0a      	adds	r2, r1, #0
   27038:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2703a:	1dbb      	adds	r3, r7, #6
   2703c:	781b      	ldrb	r3, [r3, #0]
   2703e:	2b00      	cmp	r3, #0
   27040:	d10e      	bne.n	27060 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   27042:	1dfb      	adds	r3, r7, #7
   27044:	781b      	ldrb	r3, [r3, #0]
   27046:	0018      	movs	r0, r3
   27048:	4b08      	ldr	r3, [pc, #32]	; (2706c <extint_chan_enable_callback+0x44>)
   2704a:	4798      	blx	r3
   2704c:	0003      	movs	r3, r0
   2704e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   27050:	1dfb      	adds	r3, r7, #7
   27052:	781b      	ldrb	r3, [r3, #0]
   27054:	2201      	movs	r2, #1
   27056:	409a      	lsls	r2, r3
   27058:	68fb      	ldr	r3, [r7, #12]
   2705a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   2705c:	2300      	movs	r3, #0
   2705e:	e000      	b.n	27062 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   27060:	2317      	movs	r3, #23
}
   27062:	0018      	movs	r0, r3
   27064:	46bd      	mov	sp, r7
   27066:	b004      	add	sp, #16
   27068:	bd80      	pop	{r7, pc}
   2706a:	46c0      	nop			; (mov r8, r8)
   2706c:	00026ef9 	.word	0x00026ef9

00027070 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   27070:	b580      	push	{r7, lr}
   27072:	b084      	sub	sp, #16
   27074:	af00      	add	r7, sp, #0
   27076:	0002      	movs	r2, r0
   27078:	1dfb      	adds	r3, r7, #7
   2707a:	701a      	strb	r2, [r3, #0]
   2707c:	1dbb      	adds	r3, r7, #6
   2707e:	1c0a      	adds	r2, r1, #0
   27080:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   27082:	1dbb      	adds	r3, r7, #6
   27084:	781b      	ldrb	r3, [r3, #0]
   27086:	2b00      	cmp	r3, #0
   27088:	d10e      	bne.n	270a8 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2708a:	1dfb      	adds	r3, r7, #7
   2708c:	781b      	ldrb	r3, [r3, #0]
   2708e:	0018      	movs	r0, r3
   27090:	4b08      	ldr	r3, [pc, #32]	; (270b4 <extint_chan_disable_callback+0x44>)
   27092:	4798      	blx	r3
   27094:	0003      	movs	r3, r0
   27096:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   27098:	1dfb      	adds	r3, r7, #7
   2709a:	781b      	ldrb	r3, [r3, #0]
   2709c:	2201      	movs	r2, #1
   2709e:	409a      	lsls	r2, r3
   270a0:	68fb      	ldr	r3, [r7, #12]
   270a2:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   270a4:	2300      	movs	r3, #0
   270a6:	e000      	b.n	270aa <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   270a8:	2317      	movs	r3, #23
}
   270aa:	0018      	movs	r0, r3
   270ac:	46bd      	mov	sp, r7
   270ae:	b004      	add	sp, #16
   270b0:	bd80      	pop	{r7, pc}
   270b2:	46c0      	nop			; (mov r8, r8)
   270b4:	00026ef9 	.word	0x00026ef9

000270b8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   270b8:	b580      	push	{r7, lr}
   270ba:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   270bc:	4b15      	ldr	r3, [pc, #84]	; (27114 <EIC_Handler+0x5c>)
   270be:	2200      	movs	r2, #0
   270c0:	701a      	strb	r2, [r3, #0]
   270c2:	e020      	b.n	27106 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   270c4:	4b13      	ldr	r3, [pc, #76]	; (27114 <EIC_Handler+0x5c>)
   270c6:	781b      	ldrb	r3, [r3, #0]
   270c8:	0018      	movs	r0, r3
   270ca:	4b13      	ldr	r3, [pc, #76]	; (27118 <EIC_Handler+0x60>)
   270cc:	4798      	blx	r3
   270ce:	1e03      	subs	r3, r0, #0
   270d0:	d013      	beq.n	270fa <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   270d2:	4b10      	ldr	r3, [pc, #64]	; (27114 <EIC_Handler+0x5c>)
   270d4:	781b      	ldrb	r3, [r3, #0]
   270d6:	0018      	movs	r0, r3
   270d8:	4b10      	ldr	r3, [pc, #64]	; (2711c <EIC_Handler+0x64>)
   270da:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   270dc:	4b0d      	ldr	r3, [pc, #52]	; (27114 <EIC_Handler+0x5c>)
   270de:	781b      	ldrb	r3, [r3, #0]
   270e0:	001a      	movs	r2, r3
   270e2:	4b0f      	ldr	r3, [pc, #60]	; (27120 <EIC_Handler+0x68>)
   270e4:	0092      	lsls	r2, r2, #2
   270e6:	58d3      	ldr	r3, [r2, r3]
   270e8:	2b00      	cmp	r3, #0
   270ea:	d006      	beq.n	270fa <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   270ec:	4b09      	ldr	r3, [pc, #36]	; (27114 <EIC_Handler+0x5c>)
   270ee:	781b      	ldrb	r3, [r3, #0]
   270f0:	001a      	movs	r2, r3
   270f2:	4b0b      	ldr	r3, [pc, #44]	; (27120 <EIC_Handler+0x68>)
   270f4:	0092      	lsls	r2, r2, #2
   270f6:	58d3      	ldr	r3, [r2, r3]
   270f8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   270fa:	4b06      	ldr	r3, [pc, #24]	; (27114 <EIC_Handler+0x5c>)
   270fc:	781b      	ldrb	r3, [r3, #0]
   270fe:	3301      	adds	r3, #1
   27100:	b2da      	uxtb	r2, r3
   27102:	4b04      	ldr	r3, [pc, #16]	; (27114 <EIC_Handler+0x5c>)
   27104:	701a      	strb	r2, [r3, #0]
   27106:	4b03      	ldr	r3, [pc, #12]	; (27114 <EIC_Handler+0x5c>)
   27108:	781b      	ldrb	r3, [r3, #0]
   2710a:	2b0f      	cmp	r3, #15
   2710c:	d9da      	bls.n	270c4 <EIC_Handler+0xc>
			}
		}
	}
}
   2710e:	46c0      	nop			; (mov r8, r8)
   27110:	46bd      	mov	sp, r7
   27112:	bd80      	pop	{r7, pc}
   27114:	200057f0 	.word	0x200057f0
   27118:	00026f45 	.word	0x00026f45
   2711c:	00026f89 	.word	0x00026f89
   27120:	200057f4 	.word	0x200057f4

00027124 <system_gclk_chan_get_config_defaults>:
{
   27124:	b580      	push	{r7, lr}
   27126:	b082      	sub	sp, #8
   27128:	af00      	add	r7, sp, #0
   2712a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2712c:	687b      	ldr	r3, [r7, #4]
   2712e:	2200      	movs	r2, #0
   27130:	701a      	strb	r2, [r3, #0]
}
   27132:	46c0      	nop			; (mov r8, r8)
   27134:	46bd      	mov	sp, r7
   27136:	b002      	add	sp, #8
   27138:	bd80      	pop	{r7, pc}
	...

0002713c <system_apb_clock_set_mask>:
{
   2713c:	b580      	push	{r7, lr}
   2713e:	b082      	sub	sp, #8
   27140:	af00      	add	r7, sp, #0
   27142:	0002      	movs	r2, r0
   27144:	6039      	str	r1, [r7, #0]
   27146:	1dfb      	adds	r3, r7, #7
   27148:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2714a:	1dfb      	adds	r3, r7, #7
   2714c:	781b      	ldrb	r3, [r3, #0]
   2714e:	2b01      	cmp	r3, #1
   27150:	d00a      	beq.n	27168 <system_apb_clock_set_mask+0x2c>
   27152:	2b02      	cmp	r3, #2
   27154:	d00f      	beq.n	27176 <system_apb_clock_set_mask+0x3a>
   27156:	2b00      	cmp	r3, #0
   27158:	d114      	bne.n	27184 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2715a:	4b0e      	ldr	r3, [pc, #56]	; (27194 <system_apb_clock_set_mask+0x58>)
   2715c:	4a0d      	ldr	r2, [pc, #52]	; (27194 <system_apb_clock_set_mask+0x58>)
   2715e:	6991      	ldr	r1, [r2, #24]
   27160:	683a      	ldr	r2, [r7, #0]
   27162:	430a      	orrs	r2, r1
   27164:	619a      	str	r2, [r3, #24]
			break;
   27166:	e00f      	b.n	27188 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27168:	4b0a      	ldr	r3, [pc, #40]	; (27194 <system_apb_clock_set_mask+0x58>)
   2716a:	4a0a      	ldr	r2, [pc, #40]	; (27194 <system_apb_clock_set_mask+0x58>)
   2716c:	69d1      	ldr	r1, [r2, #28]
   2716e:	683a      	ldr	r2, [r7, #0]
   27170:	430a      	orrs	r2, r1
   27172:	61da      	str	r2, [r3, #28]
			break;
   27174:	e008      	b.n	27188 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27176:	4b07      	ldr	r3, [pc, #28]	; (27194 <system_apb_clock_set_mask+0x58>)
   27178:	4a06      	ldr	r2, [pc, #24]	; (27194 <system_apb_clock_set_mask+0x58>)
   2717a:	6a11      	ldr	r1, [r2, #32]
   2717c:	683a      	ldr	r2, [r7, #0]
   2717e:	430a      	orrs	r2, r1
   27180:	621a      	str	r2, [r3, #32]
			break;
   27182:	e001      	b.n	27188 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27184:	2317      	movs	r3, #23
   27186:	e000      	b.n	2718a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27188:	2300      	movs	r3, #0
}
   2718a:	0018      	movs	r0, r3
   2718c:	46bd      	mov	sp, r7
   2718e:	b002      	add	sp, #8
   27190:	bd80      	pop	{r7, pc}
   27192:	46c0      	nop			; (mov r8, r8)
   27194:	40000400 	.word	0x40000400

00027198 <system_pinmux_get_config_defaults>:
{
   27198:	b580      	push	{r7, lr}
   2719a:	b082      	sub	sp, #8
   2719c:	af00      	add	r7, sp, #0
   2719e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   271a0:	687b      	ldr	r3, [r7, #4]
   271a2:	2280      	movs	r2, #128	; 0x80
   271a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   271a6:	687b      	ldr	r3, [r7, #4]
   271a8:	2200      	movs	r2, #0
   271aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   271ac:	687b      	ldr	r3, [r7, #4]
   271ae:	2201      	movs	r2, #1
   271b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   271b2:	687b      	ldr	r3, [r7, #4]
   271b4:	2200      	movs	r2, #0
   271b6:	70da      	strb	r2, [r3, #3]
}
   271b8:	46c0      	nop			; (mov r8, r8)
   271ba:	46bd      	mov	sp, r7
   271bc:	b002      	add	sp, #8
   271be:	bd80      	pop	{r7, pc}

000271c0 <system_interrupt_enable>:
{
   271c0:	b580      	push	{r7, lr}
   271c2:	b082      	sub	sp, #8
   271c4:	af00      	add	r7, sp, #0
   271c6:	0002      	movs	r2, r0
   271c8:	1dfb      	adds	r3, r7, #7
   271ca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   271cc:	4b06      	ldr	r3, [pc, #24]	; (271e8 <system_interrupt_enable+0x28>)
   271ce:	1dfa      	adds	r2, r7, #7
   271d0:	7812      	ldrb	r2, [r2, #0]
   271d2:	0011      	movs	r1, r2
   271d4:	221f      	movs	r2, #31
   271d6:	400a      	ands	r2, r1
   271d8:	2101      	movs	r1, #1
   271da:	4091      	lsls	r1, r2
   271dc:	000a      	movs	r2, r1
   271de:	601a      	str	r2, [r3, #0]
}
   271e0:	46c0      	nop			; (mov r8, r8)
   271e2:	46bd      	mov	sp, r7
   271e4:	b002      	add	sp, #8
   271e6:	bd80      	pop	{r7, pc}
   271e8:	e000e100 	.word	0xe000e100

000271ec <_extint_get_eic_from_channel>:
{
   271ec:	b580      	push	{r7, lr}
   271ee:	b084      	sub	sp, #16
   271f0:	af00      	add	r7, sp, #0
   271f2:	0002      	movs	r2, r0
   271f4:	1dfb      	adds	r3, r7, #7
   271f6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   271f8:	230f      	movs	r3, #15
   271fa:	18fb      	adds	r3, r7, r3
   271fc:	1dfa      	adds	r2, r7, #7
   271fe:	7812      	ldrb	r2, [r2, #0]
   27200:	0952      	lsrs	r2, r2, #5
   27202:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   27204:	230f      	movs	r3, #15
   27206:	18fb      	adds	r3, r7, r3
   27208:	781b      	ldrb	r3, [r3, #0]
   2720a:	2b00      	cmp	r3, #0
   2720c:	d10c      	bne.n	27228 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2720e:	4b09      	ldr	r3, [pc, #36]	; (27234 <_extint_get_eic_from_channel+0x48>)
   27210:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   27212:	230f      	movs	r3, #15
   27214:	18fb      	adds	r3, r7, r3
   27216:	781b      	ldrb	r3, [r3, #0]
   27218:	009b      	lsls	r3, r3, #2
   2721a:	2210      	movs	r2, #16
   2721c:	4694      	mov	ip, r2
   2721e:	44bc      	add	ip, r7
   27220:	4463      	add	r3, ip
   27222:	3b08      	subs	r3, #8
   27224:	681b      	ldr	r3, [r3, #0]
   27226:	e000      	b.n	2722a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   27228:	2300      	movs	r3, #0
}
   2722a:	0018      	movs	r0, r3
   2722c:	46bd      	mov	sp, r7
   2722e:	b004      	add	sp, #16
   27230:	bd80      	pop	{r7, pc}
   27232:	46c0      	nop			; (mov r8, r8)
   27234:	40001800 	.word	0x40001800

00027238 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   27238:	b580      	push	{r7, lr}
   2723a:	b082      	sub	sp, #8
   2723c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2723e:	4b0f      	ldr	r3, [pc, #60]	; (2727c <extint_is_syncing+0x44>)
   27240:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27242:	2300      	movs	r3, #0
   27244:	607b      	str	r3, [r7, #4]
   27246:	e011      	b.n	2726c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   27248:	687b      	ldr	r3, [r7, #4]
   2724a:	009b      	lsls	r3, r3, #2
   2724c:	2208      	movs	r2, #8
   2724e:	4694      	mov	ip, r2
   27250:	44bc      	add	ip, r7
   27252:	4463      	add	r3, ip
   27254:	3b08      	subs	r3, #8
   27256:	681b      	ldr	r3, [r3, #0]
   27258:	785b      	ldrb	r3, [r3, #1]
   2725a:	b2db      	uxtb	r3, r3
   2725c:	b25b      	sxtb	r3, r3
   2725e:	2b00      	cmp	r3, #0
   27260:	da01      	bge.n	27266 <extint_is_syncing+0x2e>
			return true;
   27262:	2301      	movs	r3, #1
   27264:	e006      	b.n	27274 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27266:	687b      	ldr	r3, [r7, #4]
   27268:	3301      	adds	r3, #1
   2726a:	607b      	str	r3, [r7, #4]
   2726c:	687b      	ldr	r3, [r7, #4]
   2726e:	2b00      	cmp	r3, #0
   27270:	d0ea      	beq.n	27248 <extint_is_syncing+0x10>
		}
	}
	return false;
   27272:	2300      	movs	r3, #0
}
   27274:	0018      	movs	r0, r3
   27276:	46bd      	mov	sp, r7
   27278:	b002      	add	sp, #8
   2727a:	bd80      	pop	{r7, pc}
   2727c:	40001800 	.word	0x40001800

00027280 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   27280:	b580      	push	{r7, lr}
   27282:	b084      	sub	sp, #16
   27284:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   27286:	4b2d      	ldr	r3, [pc, #180]	; (2733c <_system_extint_init+0xbc>)
   27288:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   2728a:	2140      	movs	r1, #64	; 0x40
   2728c:	2000      	movs	r0, #0
   2728e:	4b2c      	ldr	r3, [pc, #176]	; (27340 <_system_extint_init+0xc0>)
   27290:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27292:	003b      	movs	r3, r7
   27294:	0018      	movs	r0, r3
   27296:	4b2b      	ldr	r3, [pc, #172]	; (27344 <_system_extint_init+0xc4>)
   27298:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   2729a:	003b      	movs	r3, r7
   2729c:	2200      	movs	r2, #0
   2729e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   272a0:	003b      	movs	r3, r7
   272a2:	0019      	movs	r1, r3
   272a4:	2005      	movs	r0, #5
   272a6:	4b28      	ldr	r3, [pc, #160]	; (27348 <_system_extint_init+0xc8>)
   272a8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   272aa:	2005      	movs	r0, #5
   272ac:	4b27      	ldr	r3, [pc, #156]	; (2734c <_system_extint_init+0xcc>)
   272ae:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   272b0:	2300      	movs	r3, #0
   272b2:	60fb      	str	r3, [r7, #12]
   272b4:	e018      	b.n	272e8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   272b6:	68fb      	ldr	r3, [r7, #12]
   272b8:	009b      	lsls	r3, r3, #2
   272ba:	2210      	movs	r2, #16
   272bc:	4694      	mov	ip, r2
   272be:	44bc      	add	ip, r7
   272c0:	4463      	add	r3, ip
   272c2:	3b0c      	subs	r3, #12
   272c4:	681a      	ldr	r2, [r3, #0]
   272c6:	68fb      	ldr	r3, [r7, #12]
   272c8:	009b      	lsls	r3, r3, #2
   272ca:	2110      	movs	r1, #16
   272cc:	468c      	mov	ip, r1
   272ce:	44bc      	add	ip, r7
   272d0:	4463      	add	r3, ip
   272d2:	3b0c      	subs	r3, #12
   272d4:	681b      	ldr	r3, [r3, #0]
   272d6:	781b      	ldrb	r3, [r3, #0]
   272d8:	b2db      	uxtb	r3, r3
   272da:	2101      	movs	r1, #1
   272dc:	430b      	orrs	r3, r1
   272de:	b2db      	uxtb	r3, r3
   272e0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   272e2:	68fb      	ldr	r3, [r7, #12]
   272e4:	3301      	adds	r3, #1
   272e6:	60fb      	str	r3, [r7, #12]
   272e8:	68fb      	ldr	r3, [r7, #12]
   272ea:	2b00      	cmp	r3, #0
   272ec:	d0e3      	beq.n	272b6 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   272ee:	46c0      	nop			; (mov r8, r8)
   272f0:	4b17      	ldr	r3, [pc, #92]	; (27350 <_system_extint_init+0xd0>)
   272f2:	4798      	blx	r3
   272f4:	1e03      	subs	r3, r0, #0
   272f6:	d1fb      	bne.n	272f0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   272f8:	230b      	movs	r3, #11
   272fa:	18fb      	adds	r3, r7, r3
   272fc:	2200      	movs	r2, #0
   272fe:	701a      	strb	r2, [r3, #0]
   27300:	e00d      	b.n	2731e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   27302:	230b      	movs	r3, #11
   27304:	18fb      	adds	r3, r7, r3
   27306:	781a      	ldrb	r2, [r3, #0]
   27308:	4b12      	ldr	r3, [pc, #72]	; (27354 <_system_extint_init+0xd4>)
   2730a:	0092      	lsls	r2, r2, #2
   2730c:	2100      	movs	r1, #0
   2730e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   27310:	230b      	movs	r3, #11
   27312:	18fb      	adds	r3, r7, r3
   27314:	781a      	ldrb	r2, [r3, #0]
   27316:	230b      	movs	r3, #11
   27318:	18fb      	adds	r3, r7, r3
   2731a:	3201      	adds	r2, #1
   2731c:	701a      	strb	r2, [r3, #0]
   2731e:	230b      	movs	r3, #11
   27320:	18fb      	adds	r3, r7, r3
   27322:	781b      	ldrb	r3, [r3, #0]
   27324:	2b0f      	cmp	r3, #15
   27326:	d9ec      	bls.n	27302 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   27328:	2004      	movs	r0, #4
   2732a:	4b0b      	ldr	r3, [pc, #44]	; (27358 <_system_extint_init+0xd8>)
   2732c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   2732e:	4b0b      	ldr	r3, [pc, #44]	; (2735c <_system_extint_init+0xdc>)
   27330:	4798      	blx	r3
}
   27332:	46c0      	nop			; (mov r8, r8)
   27334:	46bd      	mov	sp, r7
   27336:	b004      	add	sp, #16
   27338:	bd80      	pop	{r7, pc}
   2733a:	46c0      	nop			; (mov r8, r8)
   2733c:	40001800 	.word	0x40001800
   27340:	0002713d 	.word	0x0002713d
   27344:	00027125 	.word	0x00027125
   27348:	0002a9ad 	.word	0x0002a9ad
   2734c:	0002a9f1 	.word	0x0002a9f1
   27350:	00027239 	.word	0x00027239
   27354:	200057f4 	.word	0x200057f4
   27358:	000271c1 	.word	0x000271c1
   2735c:	00027361 	.word	0x00027361

00027360 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   27360:	b580      	push	{r7, lr}
   27362:	b082      	sub	sp, #8
   27364:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   27366:	4b15      	ldr	r3, [pc, #84]	; (273bc <_extint_enable+0x5c>)
   27368:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2736a:	2300      	movs	r3, #0
   2736c:	607b      	str	r3, [r7, #4]
   2736e:	e018      	b.n	273a2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   27370:	687b      	ldr	r3, [r7, #4]
   27372:	009b      	lsls	r3, r3, #2
   27374:	2208      	movs	r2, #8
   27376:	4694      	mov	ip, r2
   27378:	44bc      	add	ip, r7
   2737a:	4463      	add	r3, ip
   2737c:	3b08      	subs	r3, #8
   2737e:	681a      	ldr	r2, [r3, #0]
   27380:	687b      	ldr	r3, [r7, #4]
   27382:	009b      	lsls	r3, r3, #2
   27384:	2108      	movs	r1, #8
   27386:	468c      	mov	ip, r1
   27388:	44bc      	add	ip, r7
   2738a:	4463      	add	r3, ip
   2738c:	3b08      	subs	r3, #8
   2738e:	681b      	ldr	r3, [r3, #0]
   27390:	781b      	ldrb	r3, [r3, #0]
   27392:	b2db      	uxtb	r3, r3
   27394:	2102      	movs	r1, #2
   27396:	430b      	orrs	r3, r1
   27398:	b2db      	uxtb	r3, r3
   2739a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2739c:	687b      	ldr	r3, [r7, #4]
   2739e:	3301      	adds	r3, #1
   273a0:	607b      	str	r3, [r7, #4]
   273a2:	687b      	ldr	r3, [r7, #4]
   273a4:	2b00      	cmp	r3, #0
   273a6:	d0e3      	beq.n	27370 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   273a8:	46c0      	nop			; (mov r8, r8)
   273aa:	4b05      	ldr	r3, [pc, #20]	; (273c0 <_extint_enable+0x60>)
   273ac:	4798      	blx	r3
   273ae:	1e03      	subs	r3, r0, #0
   273b0:	d1fb      	bne.n	273aa <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   273b2:	46c0      	nop			; (mov r8, r8)
   273b4:	46bd      	mov	sp, r7
   273b6:	b002      	add	sp, #8
   273b8:	bd80      	pop	{r7, pc}
   273ba:	46c0      	nop			; (mov r8, r8)
   273bc:	40001800 	.word	0x40001800
   273c0:	00027239 	.word	0x00027239

000273c4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   273c4:	b580      	push	{r7, lr}
   273c6:	b082      	sub	sp, #8
   273c8:	af00      	add	r7, sp, #0
   273ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   273cc:	687b      	ldr	r3, [r7, #4]
   273ce:	2200      	movs	r2, #0
   273d0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   273d2:	687b      	ldr	r3, [r7, #4]
   273d4:	2200      	movs	r2, #0
   273d6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   273d8:	687b      	ldr	r3, [r7, #4]
   273da:	2201      	movs	r2, #1
   273dc:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   273de:	687b      	ldr	r3, [r7, #4]
   273e0:	2201      	movs	r2, #1
   273e2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   273e4:	687b      	ldr	r3, [r7, #4]
   273e6:	2200      	movs	r2, #0
   273e8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   273ea:	687b      	ldr	r3, [r7, #4]
   273ec:	2202      	movs	r2, #2
   273ee:	72da      	strb	r2, [r3, #11]
}
   273f0:	46c0      	nop			; (mov r8, r8)
   273f2:	46bd      	mov	sp, r7
   273f4:	b002      	add	sp, #8
   273f6:	bd80      	pop	{r7, pc}

000273f8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   273f8:	b580      	push	{r7, lr}
   273fa:	b086      	sub	sp, #24
   273fc:	af00      	add	r7, sp, #0
   273fe:	0002      	movs	r2, r0
   27400:	6039      	str	r1, [r7, #0]
   27402:	1dfb      	adds	r3, r7, #7
   27404:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   27406:	2308      	movs	r3, #8
   27408:	18fb      	adds	r3, r7, r3
   2740a:	0018      	movs	r0, r3
   2740c:	4b36      	ldr	r3, [pc, #216]	; (274e8 <extint_chan_set_config+0xf0>)
   2740e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   27410:	683b      	ldr	r3, [r7, #0]
   27412:	685b      	ldr	r3, [r3, #4]
   27414:	b2da      	uxtb	r2, r3
   27416:	2308      	movs	r3, #8
   27418:	18fb      	adds	r3, r7, r3
   2741a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2741c:	2308      	movs	r3, #8
   2741e:	18fb      	adds	r3, r7, r3
   27420:	2200      	movs	r2, #0
   27422:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   27424:	683b      	ldr	r3, [r7, #0]
   27426:	7a1a      	ldrb	r2, [r3, #8]
   27428:	2308      	movs	r3, #8
   2742a:	18fb      	adds	r3, r7, r3
   2742c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   2742e:	683b      	ldr	r3, [r7, #0]
   27430:	681b      	ldr	r3, [r3, #0]
   27432:	b2db      	uxtb	r3, r3
   27434:	2208      	movs	r2, #8
   27436:	18ba      	adds	r2, r7, r2
   27438:	0011      	movs	r1, r2
   2743a:	0018      	movs	r0, r3
   2743c:	4b2b      	ldr	r3, [pc, #172]	; (274ec <extint_chan_set_config+0xf4>)
   2743e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   27440:	1dfb      	adds	r3, r7, #7
   27442:	781b      	ldrb	r3, [r3, #0]
   27444:	0018      	movs	r0, r3
   27446:	4b2a      	ldr	r3, [pc, #168]	; (274f0 <extint_chan_set_config+0xf8>)
   27448:	4798      	blx	r3
   2744a:	0003      	movs	r3, r0
   2744c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2744e:	1dfb      	adds	r3, r7, #7
   27450:	781b      	ldrb	r3, [r3, #0]
   27452:	2207      	movs	r2, #7
   27454:	4013      	ands	r3, r2
   27456:	009b      	lsls	r3, r3, #2
   27458:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2745a:	683b      	ldr	r3, [r7, #0]
   2745c:	7adb      	ldrb	r3, [r3, #11]
   2745e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   27460:	683b      	ldr	r3, [r7, #0]
   27462:	7a9b      	ldrb	r3, [r3, #10]
   27464:	2b00      	cmp	r3, #0
   27466:	d003      	beq.n	27470 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   27468:	697b      	ldr	r3, [r7, #20]
   2746a:	2208      	movs	r2, #8
   2746c:	4313      	orrs	r3, r2
   2746e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   27470:	1dfb      	adds	r3, r7, #7
   27472:	781b      	ldrb	r3, [r3, #0]
   27474:	08db      	lsrs	r3, r3, #3
   27476:	b2db      	uxtb	r3, r3
   27478:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   2747a:	1dfb      	adds	r3, r7, #7
   2747c:	781b      	ldrb	r3, [r3, #0]
   2747e:	08db      	lsrs	r3, r3, #3
   27480:	b2db      	uxtb	r3, r3
   27482:	001a      	movs	r2, r3
   27484:	693b      	ldr	r3, [r7, #16]
   27486:	3206      	adds	r2, #6
   27488:	0092      	lsls	r2, r2, #2
   2748a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   2748c:	210f      	movs	r1, #15
   2748e:	68fa      	ldr	r2, [r7, #12]
   27490:	4091      	lsls	r1, r2
   27492:	000a      	movs	r2, r1
   27494:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   27496:	401a      	ands	r2, r3
			(new_config << config_pos);
   27498:	6979      	ldr	r1, [r7, #20]
   2749a:	68fb      	ldr	r3, [r7, #12]
   2749c:	4099      	lsls	r1, r3
   2749e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   274a0:	431a      	orrs	r2, r3
   274a2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   274a4:	693b      	ldr	r3, [r7, #16]
   274a6:	1d82      	adds	r2, r0, #6
   274a8:	0092      	lsls	r2, r2, #2
   274aa:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   274ac:	683b      	ldr	r3, [r7, #0]
   274ae:	7a5b      	ldrb	r3, [r3, #9]
   274b0:	2b00      	cmp	r3, #0
   274b2:	d00a      	beq.n	274ca <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   274b4:	693b      	ldr	r3, [r7, #16]
   274b6:	695a      	ldr	r2, [r3, #20]
   274b8:	1dfb      	adds	r3, r7, #7
   274ba:	781b      	ldrb	r3, [r3, #0]
   274bc:	2101      	movs	r1, #1
   274be:	4099      	lsls	r1, r3
   274c0:	000b      	movs	r3, r1
   274c2:	431a      	orrs	r2, r3
   274c4:	693b      	ldr	r3, [r7, #16]
   274c6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   274c8:	e00a      	b.n	274e0 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   274ca:	693b      	ldr	r3, [r7, #16]
   274cc:	695b      	ldr	r3, [r3, #20]
   274ce:	1dfa      	adds	r2, r7, #7
   274d0:	7812      	ldrb	r2, [r2, #0]
   274d2:	2101      	movs	r1, #1
   274d4:	4091      	lsls	r1, r2
   274d6:	000a      	movs	r2, r1
   274d8:	43d2      	mvns	r2, r2
   274da:	401a      	ands	r2, r3
   274dc:	693b      	ldr	r3, [r7, #16]
   274de:	615a      	str	r2, [r3, #20]
}
   274e0:	46c0      	nop			; (mov r8, r8)
   274e2:	46bd      	mov	sp, r7
   274e4:	b006      	add	sp, #24
   274e6:	bd80      	pop	{r7, pc}
   274e8:	00027199 	.word	0x00027199
   274ec:	0002ad0d 	.word	0x0002ad0d
   274f0:	000271ed 	.word	0x000271ed

000274f4 <system_pinmux_get_config_defaults>:
{
   274f4:	b580      	push	{r7, lr}
   274f6:	b082      	sub	sp, #8
   274f8:	af00      	add	r7, sp, #0
   274fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   274fc:	687b      	ldr	r3, [r7, #4]
   274fe:	2280      	movs	r2, #128	; 0x80
   27500:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27502:	687b      	ldr	r3, [r7, #4]
   27504:	2200      	movs	r2, #0
   27506:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27508:	687b      	ldr	r3, [r7, #4]
   2750a:	2201      	movs	r2, #1
   2750c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2750e:	687b      	ldr	r3, [r7, #4]
   27510:	2200      	movs	r2, #0
   27512:	70da      	strb	r2, [r3, #3]
}
   27514:	46c0      	nop			; (mov r8, r8)
   27516:	46bd      	mov	sp, r7
   27518:	b002      	add	sp, #8
   2751a:	bd80      	pop	{r7, pc}

0002751c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   2751c:	b580      	push	{r7, lr}
   2751e:	b084      	sub	sp, #16
   27520:	af00      	add	r7, sp, #0
   27522:	0002      	movs	r2, r0
   27524:	6039      	str	r1, [r7, #0]
   27526:	1dfb      	adds	r3, r7, #7
   27528:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2752a:	230c      	movs	r3, #12
   2752c:	18fb      	adds	r3, r7, r3
   2752e:	0018      	movs	r0, r3
   27530:	4b10      	ldr	r3, [pc, #64]	; (27574 <port_pin_set_config+0x58>)
   27532:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   27534:	230c      	movs	r3, #12
   27536:	18fb      	adds	r3, r7, r3
   27538:	2280      	movs	r2, #128	; 0x80
   2753a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   2753c:	683b      	ldr	r3, [r7, #0]
   2753e:	781a      	ldrb	r2, [r3, #0]
   27540:	230c      	movs	r3, #12
   27542:	18fb      	adds	r3, r7, r3
   27544:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   27546:	683b      	ldr	r3, [r7, #0]
   27548:	785a      	ldrb	r2, [r3, #1]
   2754a:	230c      	movs	r3, #12
   2754c:	18fb      	adds	r3, r7, r3
   2754e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   27550:	683b      	ldr	r3, [r7, #0]
   27552:	789a      	ldrb	r2, [r3, #2]
   27554:	230c      	movs	r3, #12
   27556:	18fb      	adds	r3, r7, r3
   27558:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2755a:	230c      	movs	r3, #12
   2755c:	18fa      	adds	r2, r7, r3
   2755e:	1dfb      	adds	r3, r7, #7
   27560:	781b      	ldrb	r3, [r3, #0]
   27562:	0011      	movs	r1, r2
   27564:	0018      	movs	r0, r3
   27566:	4b04      	ldr	r3, [pc, #16]	; (27578 <port_pin_set_config+0x5c>)
   27568:	4798      	blx	r3
}
   2756a:	46c0      	nop			; (mov r8, r8)
   2756c:	46bd      	mov	sp, r7
   2756e:	b004      	add	sp, #16
   27570:	bd80      	pop	{r7, pc}
   27572:	46c0      	nop			; (mov r8, r8)
   27574:	000274f5 	.word	0x000274f5
   27578:	0002ad0d 	.word	0x0002ad0d

0002757c <system_gclk_chan_get_config_defaults>:
{
   2757c:	b580      	push	{r7, lr}
   2757e:	b082      	sub	sp, #8
   27580:	af00      	add	r7, sp, #0
   27582:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27584:	687b      	ldr	r3, [r7, #4]
   27586:	2200      	movs	r2, #0
   27588:	701a      	strb	r2, [r3, #0]
}
   2758a:	46c0      	nop			; (mov r8, r8)
   2758c:	46bd      	mov	sp, r7
   2758e:	b002      	add	sp, #8
   27590:	bd80      	pop	{r7, pc}
	...

00027594 <system_apb_clock_set_mask>:
{
   27594:	b580      	push	{r7, lr}
   27596:	b082      	sub	sp, #8
   27598:	af00      	add	r7, sp, #0
   2759a:	0002      	movs	r2, r0
   2759c:	6039      	str	r1, [r7, #0]
   2759e:	1dfb      	adds	r3, r7, #7
   275a0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   275a2:	1dfb      	adds	r3, r7, #7
   275a4:	781b      	ldrb	r3, [r3, #0]
   275a6:	2b01      	cmp	r3, #1
   275a8:	d00a      	beq.n	275c0 <system_apb_clock_set_mask+0x2c>
   275aa:	2b02      	cmp	r3, #2
   275ac:	d00f      	beq.n	275ce <system_apb_clock_set_mask+0x3a>
   275ae:	2b00      	cmp	r3, #0
   275b0:	d114      	bne.n	275dc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   275b2:	4b0e      	ldr	r3, [pc, #56]	; (275ec <system_apb_clock_set_mask+0x58>)
   275b4:	4a0d      	ldr	r2, [pc, #52]	; (275ec <system_apb_clock_set_mask+0x58>)
   275b6:	6991      	ldr	r1, [r2, #24]
   275b8:	683a      	ldr	r2, [r7, #0]
   275ba:	430a      	orrs	r2, r1
   275bc:	619a      	str	r2, [r3, #24]
			break;
   275be:	e00f      	b.n	275e0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   275c0:	4b0a      	ldr	r3, [pc, #40]	; (275ec <system_apb_clock_set_mask+0x58>)
   275c2:	4a0a      	ldr	r2, [pc, #40]	; (275ec <system_apb_clock_set_mask+0x58>)
   275c4:	69d1      	ldr	r1, [r2, #28]
   275c6:	683a      	ldr	r2, [r7, #0]
   275c8:	430a      	orrs	r2, r1
   275ca:	61da      	str	r2, [r3, #28]
			break;
   275cc:	e008      	b.n	275e0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   275ce:	4b07      	ldr	r3, [pc, #28]	; (275ec <system_apb_clock_set_mask+0x58>)
   275d0:	4a06      	ldr	r2, [pc, #24]	; (275ec <system_apb_clock_set_mask+0x58>)
   275d2:	6a11      	ldr	r1, [r2, #32]
   275d4:	683a      	ldr	r2, [r7, #0]
   275d6:	430a      	orrs	r2, r1
   275d8:	621a      	str	r2, [r3, #32]
			break;
   275da:	e001      	b.n	275e0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   275dc:	2317      	movs	r3, #23
   275de:	e000      	b.n	275e2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   275e0:	2300      	movs	r3, #0
}
   275e2:	0018      	movs	r0, r3
   275e4:	46bd      	mov	sp, r7
   275e6:	b002      	add	sp, #8
   275e8:	bd80      	pop	{r7, pc}
   275ea:	46c0      	nop			; (mov r8, r8)
   275ec:	40000400 	.word	0x40000400

000275f0 <system_interrupt_enable>:
{
   275f0:	b580      	push	{r7, lr}
   275f2:	b082      	sub	sp, #8
   275f4:	af00      	add	r7, sp, #0
   275f6:	0002      	movs	r2, r0
   275f8:	1dfb      	adds	r3, r7, #7
   275fa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   275fc:	4b06      	ldr	r3, [pc, #24]	; (27618 <system_interrupt_enable+0x28>)
   275fe:	1dfa      	adds	r2, r7, #7
   27600:	7812      	ldrb	r2, [r2, #0]
   27602:	0011      	movs	r1, r2
   27604:	221f      	movs	r2, #31
   27606:	400a      	ands	r2, r1
   27608:	2101      	movs	r1, #1
   2760a:	4091      	lsls	r1, r2
   2760c:	000a      	movs	r2, r1
   2760e:	601a      	str	r2, [r3, #0]
}
   27610:	46c0      	nop			; (mov r8, r8)
   27612:	46bd      	mov	sp, r7
   27614:	b002      	add	sp, #8
   27616:	bd80      	pop	{r7, pc}
   27618:	e000e100 	.word	0xe000e100

0002761c <system_interrupt_disable>:
{
   2761c:	b580      	push	{r7, lr}
   2761e:	b082      	sub	sp, #8
   27620:	af00      	add	r7, sp, #0
   27622:	0002      	movs	r2, r0
   27624:	1dfb      	adds	r3, r7, #7
   27626:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27628:	4a07      	ldr	r2, [pc, #28]	; (27648 <system_interrupt_disable+0x2c>)
   2762a:	1dfb      	adds	r3, r7, #7
   2762c:	781b      	ldrb	r3, [r3, #0]
   2762e:	0019      	movs	r1, r3
   27630:	231f      	movs	r3, #31
   27632:	400b      	ands	r3, r1
   27634:	2101      	movs	r1, #1
   27636:	4099      	lsls	r1, r3
   27638:	000b      	movs	r3, r1
   2763a:	0019      	movs	r1, r3
   2763c:	2380      	movs	r3, #128	; 0x80
   2763e:	50d1      	str	r1, [r2, r3]
}
   27640:	46c0      	nop			; (mov r8, r8)
   27642:	46bd      	mov	sp, r7
   27644:	b002      	add	sp, #8
   27646:	bd80      	pop	{r7, pc}
   27648:	e000e100 	.word	0xe000e100

0002764c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   2764c:	b580      	push	{r7, lr}
   2764e:	b084      	sub	sp, #16
   27650:	af00      	add	r7, sp, #0
   27652:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27654:	687b      	ldr	r3, [r7, #4]
   27656:	681b      	ldr	r3, [r3, #0]
   27658:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2765a:	68fb      	ldr	r3, [r7, #12]
   2765c:	7a9b      	ldrb	r3, [r3, #10]
   2765e:	b2db      	uxtb	r3, r3
   27660:	b25b      	sxtb	r3, r3
   27662:	2b00      	cmp	r3, #0
   27664:	da01      	bge.n	2766a <rtc_calendar_is_syncing+0x1e>
                return true;
   27666:	2301      	movs	r3, #1
   27668:	e000      	b.n	2766c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2766a:	2300      	movs	r3, #0
}
   2766c:	0018      	movs	r0, r3
   2766e:	46bd      	mov	sp, r7
   27670:	b004      	add	sp, #16
   27672:	bd80      	pop	{r7, pc}

00027674 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   27674:	b580      	push	{r7, lr}
   27676:	b084      	sub	sp, #16
   27678:	af00      	add	r7, sp, #0
   2767a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2767c:	687b      	ldr	r3, [r7, #4]
   2767e:	681b      	ldr	r3, [r3, #0]
   27680:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   27682:	2003      	movs	r0, #3
   27684:	4b0a      	ldr	r3, [pc, #40]	; (276b0 <rtc_calendar_enable+0x3c>)
   27686:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   27688:	46c0      	nop			; (mov r8, r8)
   2768a:	687b      	ldr	r3, [r7, #4]
   2768c:	0018      	movs	r0, r3
   2768e:	4b09      	ldr	r3, [pc, #36]	; (276b4 <rtc_calendar_enable+0x40>)
   27690:	4798      	blx	r3
   27692:	1e03      	subs	r3, r0, #0
   27694:	d1f9      	bne.n	2768a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   27696:	68fb      	ldr	r3, [r7, #12]
   27698:	881b      	ldrh	r3, [r3, #0]
   2769a:	b29b      	uxth	r3, r3
   2769c:	2202      	movs	r2, #2
   2769e:	4313      	orrs	r3, r2
   276a0:	b29a      	uxth	r2, r3
   276a2:	68fb      	ldr	r3, [r7, #12]
   276a4:	801a      	strh	r2, [r3, #0]
}
   276a6:	46c0      	nop			; (mov r8, r8)
   276a8:	46bd      	mov	sp, r7
   276aa:	b004      	add	sp, #16
   276ac:	bd80      	pop	{r7, pc}
   276ae:	46c0      	nop			; (mov r8, r8)
   276b0:	000275f1 	.word	0x000275f1
   276b4:	0002764d 	.word	0x0002764d

000276b8 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   276b8:	b580      	push	{r7, lr}
   276ba:	b084      	sub	sp, #16
   276bc:	af00      	add	r7, sp, #0
   276be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   276c0:	687b      	ldr	r3, [r7, #4]
   276c2:	681b      	ldr	r3, [r3, #0]
   276c4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   276c6:	2003      	movs	r0, #3
   276c8:	4b0d      	ldr	r3, [pc, #52]	; (27700 <rtc_calendar_disable+0x48>)
   276ca:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   276cc:	46c0      	nop			; (mov r8, r8)
   276ce:	687b      	ldr	r3, [r7, #4]
   276d0:	0018      	movs	r0, r3
   276d2:	4b0c      	ldr	r3, [pc, #48]	; (27704 <rtc_calendar_disable+0x4c>)
   276d4:	4798      	blx	r3
   276d6:	1e03      	subs	r3, r0, #0
   276d8:	d1f9      	bne.n	276ce <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   276da:	68fb      	ldr	r3, [r7, #12]
   276dc:	22c1      	movs	r2, #193	; 0xc1
   276de:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   276e0:	68fb      	ldr	r3, [r7, #12]
   276e2:	22c1      	movs	r2, #193	; 0xc1
   276e4:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   276e6:	68fb      	ldr	r3, [r7, #12]
   276e8:	881b      	ldrh	r3, [r3, #0]
   276ea:	b29b      	uxth	r3, r3
   276ec:	2202      	movs	r2, #2
   276ee:	4393      	bics	r3, r2
   276f0:	b29a      	uxth	r2, r3
   276f2:	68fb      	ldr	r3, [r7, #12]
   276f4:	801a      	strh	r2, [r3, #0]
}
   276f6:	46c0      	nop			; (mov r8, r8)
   276f8:	46bd      	mov	sp, r7
   276fa:	b004      	add	sp, #16
   276fc:	bd80      	pop	{r7, pc}
   276fe:	46c0      	nop			; (mov r8, r8)
   27700:	0002761d 	.word	0x0002761d
   27704:	0002764d 	.word	0x0002764d

00027708 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   27708:	b580      	push	{r7, lr}
   2770a:	b084      	sub	sp, #16
   2770c:	af00      	add	r7, sp, #0
   2770e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27710:	687b      	ldr	r3, [r7, #4]
   27712:	681b      	ldr	r3, [r3, #0]
   27714:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   27716:	687b      	ldr	r3, [r7, #4]
   27718:	0018      	movs	r0, r3
   2771a:	4b0d      	ldr	r3, [pc, #52]	; (27750 <rtc_calendar_reset+0x48>)
   2771c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   2771e:	687b      	ldr	r3, [r7, #4]
   27720:	2200      	movs	r2, #0
   27722:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   27724:	687b      	ldr	r3, [r7, #4]
   27726:	2200      	movs	r2, #0
   27728:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   2772a:	46c0      	nop			; (mov r8, r8)
   2772c:	687b      	ldr	r3, [r7, #4]
   2772e:	0018      	movs	r0, r3
   27730:	4b08      	ldr	r3, [pc, #32]	; (27754 <rtc_calendar_reset+0x4c>)
   27732:	4798      	blx	r3
   27734:	1e03      	subs	r3, r0, #0
   27736:	d1f9      	bne.n	2772c <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   27738:	68fb      	ldr	r3, [r7, #12]
   2773a:	881b      	ldrh	r3, [r3, #0]
   2773c:	b29b      	uxth	r3, r3
   2773e:	2201      	movs	r2, #1
   27740:	4313      	orrs	r3, r2
   27742:	b29a      	uxth	r2, r3
   27744:	68fb      	ldr	r3, [r7, #12]
   27746:	801a      	strh	r2, [r3, #0]
}
   27748:	46c0      	nop			; (mov r8, r8)
   2774a:	46bd      	mov	sp, r7
   2774c:	b004      	add	sp, #16
   2774e:	bd80      	pop	{r7, pc}
   27750:	000276b9 	.word	0x000276b9
   27754:	0002764d 	.word	0x0002764d

00027758 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   27758:	b580      	push	{r7, lr}
   2775a:	b084      	sub	sp, #16
   2775c:	af00      	add	r7, sp, #0
   2775e:	6078      	str	r0, [r7, #4]
   27760:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   27762:	683b      	ldr	r3, [r7, #0]
   27764:	88db      	ldrh	r3, [r3, #6]
   27766:	001a      	movs	r2, r3
   27768:	687b      	ldr	r3, [r7, #4]
   2776a:	88db      	ldrh	r3, [r3, #6]
   2776c:	1ad3      	subs	r3, r2, r3
   2776e:	069b      	lsls	r3, r3, #26
   27770:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   27772:	683b      	ldr	r3, [r7, #0]
   27774:	795b      	ldrb	r3, [r3, #5]
   27776:	059b      	lsls	r3, r3, #22
   27778:	001a      	movs	r2, r3
   2777a:	68fb      	ldr	r3, [r7, #12]
   2777c:	4313      	orrs	r3, r2
   2777e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   27780:	683b      	ldr	r3, [r7, #0]
   27782:	791b      	ldrb	r3, [r3, #4]
   27784:	045b      	lsls	r3, r3, #17
   27786:	001a      	movs	r2, r3
   27788:	68fb      	ldr	r3, [r7, #12]
   2778a:	4313      	orrs	r3, r2
   2778c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   2778e:	683b      	ldr	r3, [r7, #0]
   27790:	789b      	ldrb	r3, [r3, #2]
   27792:	031b      	lsls	r3, r3, #12
   27794:	001a      	movs	r2, r3
   27796:	68fb      	ldr	r3, [r7, #12]
   27798:	4313      	orrs	r3, r2
   2779a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   2779c:	687b      	ldr	r3, [r7, #4]
   2779e:	791b      	ldrb	r3, [r3, #4]
   277a0:	2201      	movs	r2, #1
   277a2:	4053      	eors	r3, r2
   277a4:	b2db      	uxtb	r3, r3
   277a6:	2b00      	cmp	r3, #0
   277a8:	d008      	beq.n	277bc <rtc_calendar_time_to_register_value+0x64>
   277aa:	683b      	ldr	r3, [r7, #0]
   277ac:	78db      	ldrb	r3, [r3, #3]
   277ae:	2b00      	cmp	r3, #0
   277b0:	d004      	beq.n	277bc <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   277b2:	68fb      	ldr	r3, [r7, #12]
   277b4:	2280      	movs	r2, #128	; 0x80
   277b6:	0252      	lsls	r2, r2, #9
   277b8:	4313      	orrs	r3, r2
   277ba:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   277bc:	683b      	ldr	r3, [r7, #0]
   277be:	785b      	ldrb	r3, [r3, #1]
   277c0:	019b      	lsls	r3, r3, #6
   277c2:	001a      	movs	r2, r3
   277c4:	68fb      	ldr	r3, [r7, #12]
   277c6:	4313      	orrs	r3, r2
   277c8:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   277ca:	683b      	ldr	r3, [r7, #0]
   277cc:	781b      	ldrb	r3, [r3, #0]
   277ce:	001a      	movs	r2, r3
   277d0:	68fb      	ldr	r3, [r7, #12]
   277d2:	4313      	orrs	r3, r2
   277d4:	60fb      	str	r3, [r7, #12]

	return register_value;
   277d6:	68fb      	ldr	r3, [r7, #12]
}
   277d8:	0018      	movs	r0, r3
   277da:	46bd      	mov	sp, r7
   277dc:	b004      	add	sp, #16
   277de:	bd80      	pop	{r7, pc}

000277e0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   277e0:	b580      	push	{r7, lr}
   277e2:	b084      	sub	sp, #16
   277e4:	af00      	add	r7, sp, #0
   277e6:	60f8      	str	r0, [r7, #12]
   277e8:	60b9      	str	r1, [r7, #8]
   277ea:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   277ec:	68bb      	ldr	r3, [r7, #8]
   277ee:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   277f0:	b29a      	uxth	r2, r3
   277f2:	68fb      	ldr	r3, [r7, #12]
   277f4:	88db      	ldrh	r3, [r3, #6]
   277f6:	18d3      	adds	r3, r2, r3
   277f8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   277fa:	687b      	ldr	r3, [r7, #4]
   277fc:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   277fe:	68bb      	ldr	r3, [r7, #8]
   27800:	0d9b      	lsrs	r3, r3, #22
   27802:	b2db      	uxtb	r3, r3
   27804:	220f      	movs	r2, #15
   27806:	4013      	ands	r3, r2
   27808:	b2da      	uxtb	r2, r3
   2780a:	687b      	ldr	r3, [r7, #4]
   2780c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   2780e:	68bb      	ldr	r3, [r7, #8]
   27810:	0c5b      	lsrs	r3, r3, #17
   27812:	b2db      	uxtb	r3, r3
   27814:	221f      	movs	r2, #31
   27816:	4013      	ands	r3, r2
   27818:	b2da      	uxtb	r2, r3
   2781a:	687b      	ldr	r3, [r7, #4]
   2781c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   2781e:	68fb      	ldr	r3, [r7, #12]
   27820:	791b      	ldrb	r3, [r3, #4]
   27822:	2b00      	cmp	r3, #0
   27824:	d008      	beq.n	27838 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   27826:	68bb      	ldr	r3, [r7, #8]
   27828:	0b1b      	lsrs	r3, r3, #12
   2782a:	b2db      	uxtb	r3, r3
   2782c:	221f      	movs	r2, #31
   2782e:	4013      	ands	r3, r2
   27830:	b2da      	uxtb	r2, r3
   27832:	687b      	ldr	r3, [r7, #4]
   27834:	709a      	strb	r2, [r3, #2]
   27836:	e010      	b.n	2785a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   27838:	68bb      	ldr	r3, [r7, #8]
   2783a:	0b1b      	lsrs	r3, r3, #12
   2783c:	b2db      	uxtb	r3, r3
   2783e:	220f      	movs	r2, #15
   27840:	4013      	ands	r3, r2
   27842:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   27844:	687b      	ldr	r3, [r7, #4]
   27846:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   27848:	68ba      	ldr	r2, [r7, #8]
   2784a:	2380      	movs	r3, #128	; 0x80
   2784c:	025b      	lsls	r3, r3, #9
   2784e:	4013      	ands	r3, r2
   27850:	1e5a      	subs	r2, r3, #1
   27852:	4193      	sbcs	r3, r2
   27854:	b2da      	uxtb	r2, r3
   27856:	687b      	ldr	r3, [r7, #4]
   27858:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   2785a:	68bb      	ldr	r3, [r7, #8]
   2785c:	099b      	lsrs	r3, r3, #6
   2785e:	b2db      	uxtb	r3, r3
   27860:	223f      	movs	r2, #63	; 0x3f
   27862:	4013      	ands	r3, r2
   27864:	b2da      	uxtb	r2, r3
   27866:	687b      	ldr	r3, [r7, #4]
   27868:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   2786a:	68bb      	ldr	r3, [r7, #8]
   2786c:	b2db      	uxtb	r3, r3
   2786e:	223f      	movs	r2, #63	; 0x3f
   27870:	4013      	ands	r3, r2
   27872:	b2da      	uxtb	r2, r3
   27874:	687b      	ldr	r3, [r7, #4]
   27876:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   27878:	46c0      	nop			; (mov r8, r8)
   2787a:	46bd      	mov	sp, r7
   2787c:	b004      	add	sp, #16
   2787e:	bd80      	pop	{r7, pc}

00027880 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   27880:	b580      	push	{r7, lr}
   27882:	b084      	sub	sp, #16
   27884:	af00      	add	r7, sp, #0
   27886:	6078      	str	r0, [r7, #4]
   27888:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2788a:	687b      	ldr	r3, [r7, #4]
   2788c:	681b      	ldr	r3, [r3, #0]
   2788e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   27890:	683b      	ldr	r3, [r7, #0]
   27892:	881a      	ldrh	r2, [r3, #0]
   27894:	230e      	movs	r3, #14
   27896:	18fb      	adds	r3, r7, r3
   27898:	2108      	movs	r1, #8
   2789a:	430a      	orrs	r2, r1
   2789c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   2789e:	683b      	ldr	r3, [r7, #0]
   278a0:	791b      	ldrb	r3, [r3, #4]
   278a2:	2201      	movs	r2, #1
   278a4:	4053      	eors	r3, r2
   278a6:	b2db      	uxtb	r3, r3
   278a8:	2b00      	cmp	r3, #0
   278aa:	d007      	beq.n	278bc <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   278ac:	230e      	movs	r3, #14
   278ae:	18fb      	adds	r3, r7, r3
   278b0:	220e      	movs	r2, #14
   278b2:	18ba      	adds	r2, r7, r2
   278b4:	8812      	ldrh	r2, [r2, #0]
   278b6:	2140      	movs	r1, #64	; 0x40
   278b8:	430a      	orrs	r2, r1
   278ba:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   278bc:	683b      	ldr	r3, [r7, #0]
   278be:	789b      	ldrb	r3, [r3, #2]
   278c0:	2b00      	cmp	r3, #0
   278c2:	d007      	beq.n	278d4 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   278c4:	230e      	movs	r3, #14
   278c6:	18fb      	adds	r3, r7, r3
   278c8:	220e      	movs	r2, #14
   278ca:	18ba      	adds	r2, r7, r2
   278cc:	8812      	ldrh	r2, [r2, #0]
   278ce:	2180      	movs	r1, #128	; 0x80
   278d0:	430a      	orrs	r2, r1
   278d2:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   278d4:	68bb      	ldr	r3, [r7, #8]
   278d6:	220e      	movs	r2, #14
   278d8:	18ba      	adds	r2, r7, r2
   278da:	8812      	ldrh	r2, [r2, #0]
   278dc:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   278de:	683b      	ldr	r3, [r7, #0]
   278e0:	78db      	ldrb	r3, [r3, #3]
   278e2:	2b00      	cmp	r3, #0
   278e4:	d008      	beq.n	278f8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   278e6:	68bb      	ldr	r3, [r7, #8]
   278e8:	885b      	ldrh	r3, [r3, #2]
   278ea:	b29b      	uxth	r3, r3
   278ec:	2280      	movs	r2, #128	; 0x80
   278ee:	01d2      	lsls	r2, r2, #7
   278f0:	4313      	orrs	r3, r2
   278f2:	b29a      	uxth	r2, r3
   278f4:	68bb      	ldr	r3, [r7, #8]
   278f6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   278f8:	230d      	movs	r3, #13
   278fa:	18fb      	adds	r3, r7, r3
   278fc:	2200      	movs	r2, #0
   278fe:	701a      	strb	r2, [r3, #0]
   27900:	e017      	b.n	27932 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   27902:	230d      	movs	r3, #13
   27904:	18fb      	adds	r3, r7, r3
   27906:	781a      	ldrb	r2, [r3, #0]
   27908:	0013      	movs	r3, r2
   2790a:	009b      	lsls	r3, r3, #2
   2790c:	189b      	adds	r3, r3, r2
   2790e:	005b      	lsls	r3, r3, #1
   27910:	3308      	adds	r3, #8
   27912:	683a      	ldr	r2, [r7, #0]
   27914:	18d1      	adds	r1, r2, r3
   27916:	230d      	movs	r3, #13
   27918:	18fb      	adds	r3, r7, r3
   2791a:	781a      	ldrb	r2, [r3, #0]
   2791c:	687b      	ldr	r3, [r7, #4]
   2791e:	0018      	movs	r0, r3
   27920:	4b08      	ldr	r3, [pc, #32]	; (27944 <_rtc_calendar_set_config+0xc4>)
   27922:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27924:	230d      	movs	r3, #13
   27926:	18fb      	adds	r3, r7, r3
   27928:	781a      	ldrb	r2, [r3, #0]
   2792a:	230d      	movs	r3, #13
   2792c:	18fb      	adds	r3, r7, r3
   2792e:	3201      	adds	r2, #1
   27930:	701a      	strb	r2, [r3, #0]
   27932:	230d      	movs	r3, #13
   27934:	18fb      	adds	r3, r7, r3
   27936:	781b      	ldrb	r3, [r3, #0]
   27938:	2b00      	cmp	r3, #0
   2793a:	d0e2      	beq.n	27902 <_rtc_calendar_set_config+0x82>
	}
}
   2793c:	46c0      	nop			; (mov r8, r8)
   2793e:	46bd      	mov	sp, r7
   27940:	b004      	add	sp, #16
   27942:	bd80      	pop	{r7, pc}
   27944:	00027a69 	.word	0x00027a69

00027948 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   27948:	b580      	push	{r7, lr}
   2794a:	b086      	sub	sp, #24
   2794c:	af00      	add	r7, sp, #0
   2794e:	60f8      	str	r0, [r7, #12]
   27950:	60b9      	str	r1, [r7, #8]
   27952:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27954:	68fb      	ldr	r3, [r7, #12]
   27956:	68ba      	ldr	r2, [r7, #8]
   27958:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   2795a:	2120      	movs	r1, #32
   2795c:	2000      	movs	r0, #0
   2795e:	4b18      	ldr	r3, [pc, #96]	; (279c0 <rtc_calendar_init+0x78>)
   27960:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27962:	2314      	movs	r3, #20
   27964:	18fb      	adds	r3, r7, r3
   27966:	0018      	movs	r0, r3
   27968:	4b16      	ldr	r3, [pc, #88]	; (279c4 <rtc_calendar_init+0x7c>)
   2796a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   2796c:	2314      	movs	r3, #20
   2796e:	18fb      	adds	r3, r7, r3
   27970:	2202      	movs	r2, #2
   27972:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   27974:	2314      	movs	r3, #20
   27976:	18fb      	adds	r3, r7, r3
   27978:	0019      	movs	r1, r3
   2797a:	2004      	movs	r0, #4
   2797c:	4b12      	ldr	r3, [pc, #72]	; (279c8 <rtc_calendar_init+0x80>)
   2797e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   27980:	2004      	movs	r0, #4
   27982:	4b12      	ldr	r3, [pc, #72]	; (279cc <rtc_calendar_init+0x84>)
   27984:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   27986:	68fb      	ldr	r3, [r7, #12]
   27988:	0018      	movs	r0, r3
   2798a:	4b11      	ldr	r3, [pc, #68]	; (279d0 <rtc_calendar_init+0x88>)
   2798c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   2798e:	687b      	ldr	r3, [r7, #4]
   27990:	791a      	ldrb	r2, [r3, #4]
   27992:	68fb      	ldr	r3, [r7, #12]
   27994:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   27996:	687b      	ldr	r3, [r7, #4]
   27998:	78da      	ldrb	r2, [r3, #3]
   2799a:	68fb      	ldr	r3, [r7, #12]
   2799c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   2799e:	687b      	ldr	r3, [r7, #4]
   279a0:	88da      	ldrh	r2, [r3, #6]
   279a2:	68fb      	ldr	r3, [r7, #12]
   279a4:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   279a6:	4b0b      	ldr	r3, [pc, #44]	; (279d4 <rtc_calendar_init+0x8c>)
   279a8:	68fa      	ldr	r2, [r7, #12]
   279aa:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   279ac:	687a      	ldr	r2, [r7, #4]
   279ae:	68fb      	ldr	r3, [r7, #12]
   279b0:	0011      	movs	r1, r2
   279b2:	0018      	movs	r0, r3
   279b4:	4b08      	ldr	r3, [pc, #32]	; (279d8 <rtc_calendar_init+0x90>)
   279b6:	4798      	blx	r3
}
   279b8:	46c0      	nop			; (mov r8, r8)
   279ba:	46bd      	mov	sp, r7
   279bc:	b006      	add	sp, #24
   279be:	bd80      	pop	{r7, pc}
   279c0:	00027595 	.word	0x00027595
   279c4:	0002757d 	.word	0x0002757d
   279c8:	0002a9ad 	.word	0x0002a9ad
   279cc:	0002a9f1 	.word	0x0002a9f1
   279d0:	00027709 	.word	0x00027709
   279d4:	20005834 	.word	0x20005834
   279d8:	00027881 	.word	0x00027881

000279dc <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   279dc:	b580      	push	{r7, lr}
   279de:	b084      	sub	sp, #16
   279e0:	af00      	add	r7, sp, #0
   279e2:	6078      	str	r0, [r7, #4]
   279e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   279e6:	687b      	ldr	r3, [r7, #4]
   279e8:	681b      	ldr	r3, [r3, #0]
   279ea:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   279ec:	687b      	ldr	r3, [r7, #4]
   279ee:	795b      	ldrb	r3, [r3, #5]
   279f0:	2201      	movs	r2, #1
   279f2:	4053      	eors	r3, r2
   279f4:	b2db      	uxtb	r3, r3
   279f6:	2b00      	cmp	r3, #0
   279f8:	d00a      	beq.n	27a10 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   279fa:	68fb      	ldr	r3, [r7, #12]
   279fc:	4a16      	ldr	r2, [pc, #88]	; (27a58 <rtc_calendar_get_time+0x7c>)
   279fe:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   27a00:	46c0      	nop			; (mov r8, r8)
   27a02:	687b      	ldr	r3, [r7, #4]
   27a04:	0018      	movs	r0, r3
   27a06:	4b15      	ldr	r3, [pc, #84]	; (27a5c <rtc_calendar_get_time+0x80>)
   27a08:	4798      	blx	r3
   27a0a:	1e03      	subs	r3, r0, #0
   27a0c:	d1f9      	bne.n	27a02 <rtc_calendar_get_time+0x26>
   27a0e:	e016      	b.n	27a3e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   27a10:	68fb      	ldr	r3, [r7, #12]
   27a12:	885b      	ldrh	r3, [r3, #2]
   27a14:	b29b      	uxth	r3, r3
   27a16:	001a      	movs	r2, r3
   27a18:	2380      	movs	r3, #128	; 0x80
   27a1a:	01db      	lsls	r3, r3, #7
   27a1c:	4013      	ands	r3, r2
   27a1e:	d10e      	bne.n	27a3e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   27a20:	68fb      	ldr	r3, [r7, #12]
   27a22:	885b      	ldrh	r3, [r3, #2]
   27a24:	b29b      	uxth	r3, r3
   27a26:	4a0e      	ldr	r2, [pc, #56]	; (27a60 <rtc_calendar_get_time+0x84>)
   27a28:	4313      	orrs	r3, r2
   27a2a:	b29a      	uxth	r2, r3
   27a2c:	68fb      	ldr	r3, [r7, #12]
   27a2e:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   27a30:	46c0      	nop			; (mov r8, r8)
   27a32:	687b      	ldr	r3, [r7, #4]
   27a34:	0018      	movs	r0, r3
   27a36:	4b09      	ldr	r3, [pc, #36]	; (27a5c <rtc_calendar_get_time+0x80>)
   27a38:	4798      	blx	r3
   27a3a:	1e03      	subs	r3, r0, #0
   27a3c:	d1f9      	bne.n	27a32 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   27a3e:	68fb      	ldr	r3, [r7, #12]
   27a40:	691b      	ldr	r3, [r3, #16]
   27a42:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   27a44:	683a      	ldr	r2, [r7, #0]
   27a46:	68b9      	ldr	r1, [r7, #8]
   27a48:	687b      	ldr	r3, [r7, #4]
   27a4a:	0018      	movs	r0, r3
   27a4c:	4b05      	ldr	r3, [pc, #20]	; (27a64 <rtc_calendar_get_time+0x88>)
   27a4e:	4798      	blx	r3
}
   27a50:	46c0      	nop			; (mov r8, r8)
   27a52:	46bd      	mov	sp, r7
   27a54:	b004      	add	sp, #16
   27a56:	bd80      	pop	{r7, pc}
   27a58:	ffff8000 	.word	0xffff8000
   27a5c:	0002764d 	.word	0x0002764d
   27a60:	ffffc000 	.word	0xffffc000
   27a64:	000277e1 	.word	0x000277e1

00027a68 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   27a68:	b580      	push	{r7, lr}
   27a6a:	b086      	sub	sp, #24
   27a6c:	af00      	add	r7, sp, #0
   27a6e:	60f8      	str	r0, [r7, #12]
   27a70:	60b9      	str	r1, [r7, #8]
   27a72:	1dfb      	adds	r3, r7, #7
   27a74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27a76:	68fb      	ldr	r3, [r7, #12]
   27a78:	681b      	ldr	r3, [r3, #0]
   27a7a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   27a7c:	1dfb      	adds	r3, r7, #7
   27a7e:	781b      	ldrb	r3, [r3, #0]
   27a80:	2b01      	cmp	r3, #1
   27a82:	d901      	bls.n	27a88 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   27a84:	2317      	movs	r3, #23
   27a86:	e021      	b.n	27acc <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   27a88:	68ba      	ldr	r2, [r7, #8]
   27a8a:	68fb      	ldr	r3, [r7, #12]
   27a8c:	0011      	movs	r1, r2
   27a8e:	0018      	movs	r0, r3
   27a90:	4b10      	ldr	r3, [pc, #64]	; (27ad4 <rtc_calendar_set_alarm+0x6c>)
   27a92:	4798      	blx	r3
   27a94:	0003      	movs	r3, r0
   27a96:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   27a98:	46c0      	nop			; (mov r8, r8)
   27a9a:	68fb      	ldr	r3, [r7, #12]
   27a9c:	0018      	movs	r0, r3
   27a9e:	4b0e      	ldr	r3, [pc, #56]	; (27ad8 <rtc_calendar_set_alarm+0x70>)
   27aa0:	4798      	blx	r3
   27aa2:	1e03      	subs	r3, r0, #0
   27aa4:	d1f9      	bne.n	27a9a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   27aa6:	1dfb      	adds	r3, r7, #7
   27aa8:	781a      	ldrb	r2, [r3, #0]
   27aaa:	697b      	ldr	r3, [r7, #20]
   27aac:	3203      	adds	r2, #3
   27aae:	00d2      	lsls	r2, r2, #3
   27ab0:	6939      	ldr	r1, [r7, #16]
   27ab2:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   27ab4:	1dfb      	adds	r3, r7, #7
   27ab6:	781b      	ldrb	r3, [r3, #0]
   27ab8:	68ba      	ldr	r2, [r7, #8]
   27aba:	7a11      	ldrb	r1, [r2, #8]
   27abc:	697a      	ldr	r2, [r7, #20]
   27abe:	3303      	adds	r3, #3
   27ac0:	00db      	lsls	r3, r3, #3
   27ac2:	18d3      	adds	r3, r2, r3
   27ac4:	3304      	adds	r3, #4
   27ac6:	1c0a      	adds	r2, r1, #0
   27ac8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   27aca:	2300      	movs	r3, #0
}
   27acc:	0018      	movs	r0, r3
   27ace:	46bd      	mov	sp, r7
   27ad0:	b006      	add	sp, #24
   27ad2:	bd80      	pop	{r7, pc}
   27ad4:	00027759 	.word	0x00027759
   27ad8:	0002764d 	.word	0x0002764d

00027adc <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   27adc:	b580      	push	{r7, lr}
   27ade:	b086      	sub	sp, #24
   27ae0:	af00      	add	r7, sp, #0
   27ae2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27ae4:	4b28      	ldr	r3, [pc, #160]	; (27b88 <_rtc_interrupt_handler+0xac>)
   27ae6:	687a      	ldr	r2, [r7, #4]
   27ae8:	0092      	lsls	r2, r2, #2
   27aea:	58d3      	ldr	r3, [r2, r3]
   27aec:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   27aee:	697b      	ldr	r3, [r7, #20]
   27af0:	681b      	ldr	r3, [r3, #0]
   27af2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27af4:	230e      	movs	r3, #14
   27af6:	18fb      	adds	r3, r7, r3
   27af8:	697a      	ldr	r2, [r7, #20]
   27afa:	8a52      	ldrh	r2, [r2, #18]
   27afc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   27afe:	697b      	ldr	r3, [r7, #20]
   27b00:	8a1b      	ldrh	r3, [r3, #16]
   27b02:	b29a      	uxth	r2, r3
   27b04:	230e      	movs	r3, #14
   27b06:	18fb      	adds	r3, r7, r3
   27b08:	210e      	movs	r1, #14
   27b0a:	1879      	adds	r1, r7, r1
   27b0c:	8809      	ldrh	r1, [r1, #0]
   27b0e:	400a      	ands	r2, r1
   27b10:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   27b12:	693b      	ldr	r3, [r7, #16]
   27b14:	7a1b      	ldrb	r3, [r3, #8]
   27b16:	b2da      	uxtb	r2, r3
   27b18:	230c      	movs	r3, #12
   27b1a:	18fb      	adds	r3, r7, r3
   27b1c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   27b1e:	693b      	ldr	r3, [r7, #16]
   27b20:	79db      	ldrb	r3, [r3, #7]
   27b22:	b2db      	uxtb	r3, r3
   27b24:	b29a      	uxth	r2, r3
   27b26:	230c      	movs	r3, #12
   27b28:	18fb      	adds	r3, r7, r3
   27b2a:	210c      	movs	r1, #12
   27b2c:	1879      	adds	r1, r7, r1
   27b2e:	8809      	ldrh	r1, [r1, #0]
   27b30:	400a      	ands	r2, r1
   27b32:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   27b34:	230c      	movs	r3, #12
   27b36:	18fb      	adds	r3, r7, r3
   27b38:	881b      	ldrh	r3, [r3, #0]
   27b3a:	2280      	movs	r2, #128	; 0x80
   27b3c:	4013      	ands	r3, r2
   27b3e:	d00c      	beq.n	27b5a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   27b40:	230e      	movs	r3, #14
   27b42:	18fb      	adds	r3, r7, r3
   27b44:	881b      	ldrh	r3, [r3, #0]
   27b46:	2202      	movs	r2, #2
   27b48:	4013      	ands	r3, r2
   27b4a:	d002      	beq.n	27b52 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   27b4c:	697b      	ldr	r3, [r7, #20]
   27b4e:	68db      	ldr	r3, [r3, #12]
   27b50:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   27b52:	693b      	ldr	r3, [r7, #16]
   27b54:	2280      	movs	r2, #128	; 0x80
   27b56:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   27b58:	e011      	b.n	27b7e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   27b5a:	230c      	movs	r3, #12
   27b5c:	18fb      	adds	r3, r7, r3
   27b5e:	881b      	ldrh	r3, [r3, #0]
   27b60:	2201      	movs	r2, #1
   27b62:	4013      	ands	r3, r2
   27b64:	d00b      	beq.n	27b7e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   27b66:	230e      	movs	r3, #14
   27b68:	18fb      	adds	r3, r7, r3
   27b6a:	881b      	ldrh	r3, [r3, #0]
   27b6c:	2201      	movs	r2, #1
   27b6e:	4013      	ands	r3, r2
   27b70:	d002      	beq.n	27b78 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   27b72:	697b      	ldr	r3, [r7, #20]
   27b74:	689b      	ldr	r3, [r3, #8]
   27b76:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   27b78:	693b      	ldr	r3, [r7, #16]
   27b7a:	2201      	movs	r2, #1
   27b7c:	721a      	strb	r2, [r3, #8]
}
   27b7e:	46c0      	nop			; (mov r8, r8)
   27b80:	46bd      	mov	sp, r7
   27b82:	b006      	add	sp, #24
   27b84:	bd80      	pop	{r7, pc}
   27b86:	46c0      	nop			; (mov r8, r8)
   27b88:	20005834 	.word	0x20005834

00027b8c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   27b8c:	b580      	push	{r7, lr}
   27b8e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   27b90:	2000      	movs	r0, #0
   27b92:	4b02      	ldr	r3, [pc, #8]	; (27b9c <RTC_Handler+0x10>)
   27b94:	4798      	blx	r3
}
   27b96:	46c0      	nop			; (mov r8, r8)
   27b98:	46bd      	mov	sp, r7
   27b9a:	bd80      	pop	{r7, pc}
   27b9c:	00027add 	.word	0x00027add

00027ba0 <system_gclk_chan_get_config_defaults>:
{
   27ba0:	b580      	push	{r7, lr}
   27ba2:	b082      	sub	sp, #8
   27ba4:	af00      	add	r7, sp, #0
   27ba6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27ba8:	687b      	ldr	r3, [r7, #4]
   27baa:	2200      	movs	r2, #0
   27bac:	701a      	strb	r2, [r3, #0]
}
   27bae:	46c0      	nop			; (mov r8, r8)
   27bb0:	46bd      	mov	sp, r7
   27bb2:	b002      	add	sp, #8
   27bb4:	bd80      	pop	{r7, pc}

00027bb6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   27bb6:	b5f0      	push	{r4, r5, r6, r7, lr}
   27bb8:	b08d      	sub	sp, #52	; 0x34
   27bba:	af00      	add	r7, sp, #0
   27bbc:	60b8      	str	r0, [r7, #8]
   27bbe:	60f9      	str	r1, [r7, #12]
   27bc0:	603a      	str	r2, [r7, #0]
   27bc2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   27bc4:	2300      	movs	r3, #0
   27bc6:	2400      	movs	r4, #0
   27bc8:	623b      	str	r3, [r7, #32]
   27bca:	627c      	str	r4, [r7, #36]	; 0x24
   27bcc:	2300      	movs	r3, #0
   27bce:	2400      	movs	r4, #0
   27bd0:	61bb      	str	r3, [r7, #24]
   27bd2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   27bd4:	233f      	movs	r3, #63	; 0x3f
   27bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   27bd8:	e053      	b.n	27c82 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   27bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27bdc:	3b20      	subs	r3, #32
   27bde:	2b00      	cmp	r3, #0
   27be0:	db04      	blt.n	27bec <long_division+0x36>
   27be2:	2201      	movs	r2, #1
   27be4:	409a      	lsls	r2, r3
   27be6:	0013      	movs	r3, r2
   27be8:	617b      	str	r3, [r7, #20]
   27bea:	e00b      	b.n	27c04 <long_division+0x4e>
   27bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27bee:	2220      	movs	r2, #32
   27bf0:	1ad3      	subs	r3, r2, r3
   27bf2:	2201      	movs	r2, #1
   27bf4:	40da      	lsrs	r2, r3
   27bf6:	0013      	movs	r3, r2
   27bf8:	2100      	movs	r1, #0
   27bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27bfc:	4091      	lsls	r1, r2
   27bfe:	000a      	movs	r2, r1
   27c00:	4313      	orrs	r3, r2
   27c02:	617b      	str	r3, [r7, #20]
   27c04:	2201      	movs	r2, #1
   27c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c08:	409a      	lsls	r2, r3
   27c0a:	0013      	movs	r3, r2
   27c0c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   27c0e:	69bb      	ldr	r3, [r7, #24]
   27c10:	69fc      	ldr	r4, [r7, #28]
   27c12:	18db      	adds	r3, r3, r3
   27c14:	4164      	adcs	r4, r4
   27c16:	61bb      	str	r3, [r7, #24]
   27c18:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   27c1a:	68bb      	ldr	r3, [r7, #8]
   27c1c:	693a      	ldr	r2, [r7, #16]
   27c1e:	401a      	ands	r2, r3
   27c20:	0015      	movs	r5, r2
   27c22:	68fb      	ldr	r3, [r7, #12]
   27c24:	697a      	ldr	r2, [r7, #20]
   27c26:	401a      	ands	r2, r3
   27c28:	0016      	movs	r6, r2
   27c2a:	002b      	movs	r3, r5
   27c2c:	4333      	orrs	r3, r6
   27c2e:	d007      	beq.n	27c40 <long_division+0x8a>
			r |= 0x01;
   27c30:	69bb      	ldr	r3, [r7, #24]
   27c32:	2201      	movs	r2, #1
   27c34:	4313      	orrs	r3, r2
   27c36:	61bb      	str	r3, [r7, #24]
   27c38:	69fb      	ldr	r3, [r7, #28]
   27c3a:	2200      	movs	r2, #0
   27c3c:	4313      	orrs	r3, r2
   27c3e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   27c40:	687a      	ldr	r2, [r7, #4]
   27c42:	69fb      	ldr	r3, [r7, #28]
   27c44:	429a      	cmp	r2, r3
   27c46:	d819      	bhi.n	27c7c <long_division+0xc6>
   27c48:	687a      	ldr	r2, [r7, #4]
   27c4a:	69fb      	ldr	r3, [r7, #28]
   27c4c:	429a      	cmp	r2, r3
   27c4e:	d103      	bne.n	27c58 <long_division+0xa2>
   27c50:	683a      	ldr	r2, [r7, #0]
   27c52:	69bb      	ldr	r3, [r7, #24]
   27c54:	429a      	cmp	r2, r3
   27c56:	d811      	bhi.n	27c7c <long_division+0xc6>
			r = r - d;
   27c58:	69b9      	ldr	r1, [r7, #24]
   27c5a:	69fa      	ldr	r2, [r7, #28]
   27c5c:	683b      	ldr	r3, [r7, #0]
   27c5e:	687c      	ldr	r4, [r7, #4]
   27c60:	1ac9      	subs	r1, r1, r3
   27c62:	41a2      	sbcs	r2, r4
   27c64:	000b      	movs	r3, r1
   27c66:	0014      	movs	r4, r2
   27c68:	61bb      	str	r3, [r7, #24]
   27c6a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   27c6c:	6a3a      	ldr	r2, [r7, #32]
   27c6e:	693b      	ldr	r3, [r7, #16]
   27c70:	4313      	orrs	r3, r2
   27c72:	623b      	str	r3, [r7, #32]
   27c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27c76:	697b      	ldr	r3, [r7, #20]
   27c78:	4313      	orrs	r3, r2
   27c7a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   27c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c7e:	3b01      	subs	r3, #1
   27c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   27c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c84:	2b00      	cmp	r3, #0
   27c86:	daa8      	bge.n	27bda <long_division+0x24>
		}
	}

	return q;
   27c88:	6a3b      	ldr	r3, [r7, #32]
   27c8a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   27c8c:	0018      	movs	r0, r3
   27c8e:	0021      	movs	r1, r4
   27c90:	46bd      	mov	sp, r7
   27c92:	b00d      	add	sp, #52	; 0x34
   27c94:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027c96 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   27c96:	b580      	push	{r7, lr}
   27c98:	b086      	sub	sp, #24
   27c9a:	af00      	add	r7, sp, #0
   27c9c:	60f8      	str	r0, [r7, #12]
   27c9e:	60b9      	str	r1, [r7, #8]
   27ca0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   27ca2:	2316      	movs	r3, #22
   27ca4:	18fb      	adds	r3, r7, r3
   27ca6:	2200      	movs	r2, #0
   27ca8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   27caa:	68bb      	ldr	r3, [r7, #8]
   27cac:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   27cae:	68bb      	ldr	r3, [r7, #8]
   27cb0:	085a      	lsrs	r2, r3, #1
   27cb2:	68fb      	ldr	r3, [r7, #12]
   27cb4:	429a      	cmp	r2, r3
   27cb6:	d201      	bcs.n	27cbc <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27cb8:	2340      	movs	r3, #64	; 0x40
   27cba:	e026      	b.n	27d0a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   27cbc:	68bb      	ldr	r3, [r7, #8]
   27cbe:	085b      	lsrs	r3, r3, #1
   27cc0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   27cc2:	e00a      	b.n	27cda <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27cc4:	693a      	ldr	r2, [r7, #16]
   27cc6:	68fb      	ldr	r3, [r7, #12]
   27cc8:	1ad3      	subs	r3, r2, r3
   27cca:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   27ccc:	2316      	movs	r3, #22
   27cce:	18fb      	adds	r3, r7, r3
   27cd0:	881a      	ldrh	r2, [r3, #0]
   27cd2:	2316      	movs	r3, #22
   27cd4:	18fb      	adds	r3, r7, r3
   27cd6:	3201      	adds	r2, #1
   27cd8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   27cda:	693a      	ldr	r2, [r7, #16]
   27cdc:	68fb      	ldr	r3, [r7, #12]
   27cde:	429a      	cmp	r2, r3
   27ce0:	d2f0      	bcs.n	27cc4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27ce2:	2316      	movs	r3, #22
   27ce4:	18fb      	adds	r3, r7, r3
   27ce6:	2216      	movs	r2, #22
   27ce8:	18ba      	adds	r2, r7, r2
   27cea:	8812      	ldrh	r2, [r2, #0]
   27cec:	3a01      	subs	r2, #1
   27cee:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   27cf0:	2316      	movs	r3, #22
   27cf2:	18fb      	adds	r3, r7, r3
   27cf4:	881b      	ldrh	r3, [r3, #0]
   27cf6:	2bff      	cmp	r3, #255	; 0xff
   27cf8:	d901      	bls.n	27cfe <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27cfa:	2340      	movs	r3, #64	; 0x40
   27cfc:	e005      	b.n	27d0a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   27cfe:	687b      	ldr	r3, [r7, #4]
   27d00:	2216      	movs	r2, #22
   27d02:	18ba      	adds	r2, r7, r2
   27d04:	8812      	ldrh	r2, [r2, #0]
   27d06:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   27d08:	2300      	movs	r3, #0
	}
}
   27d0a:	0018      	movs	r0, r3
   27d0c:	46bd      	mov	sp, r7
   27d0e:	b006      	add	sp, #24
   27d10:	bd80      	pop	{r7, pc}
	...

00027d14 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   27d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d16:	b0a1      	sub	sp, #132	; 0x84
   27d18:	af00      	add	r7, sp, #0
   27d1a:	64f8      	str	r0, [r7, #76]	; 0x4c
   27d1c:	64b9      	str	r1, [r7, #72]	; 0x48
   27d1e:	647a      	str	r2, [r7, #68]	; 0x44
   27d20:	2243      	movs	r2, #67	; 0x43
   27d22:	18ba      	adds	r2, r7, r2
   27d24:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   27d26:	2300      	movs	r3, #0
   27d28:	2400      	movs	r4, #0
   27d2a:	673b      	str	r3, [r7, #112]	; 0x70
   27d2c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   27d2e:	2300      	movs	r3, #0
   27d30:	2400      	movs	r4, #0
   27d32:	66bb      	str	r3, [r7, #104]	; 0x68
   27d34:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   27d36:	2300      	movs	r3, #0
   27d38:	2400      	movs	r4, #0
   27d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   27d3c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   27d3e:	2300      	movs	r3, #0
   27d40:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   27d42:	2358      	movs	r3, #88	; 0x58
   27d44:	2240      	movs	r2, #64	; 0x40
   27d46:	4694      	mov	ip, r2
   27d48:	44bc      	add	ip, r7
   27d4a:	4463      	add	r3, ip
   27d4c:	781a      	ldrb	r2, [r3, #0]
   27d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27d50:	435a      	muls	r2, r3
   27d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27d54:	429a      	cmp	r2, r3
   27d56:	d901      	bls.n	27d5c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27d58:	2340      	movs	r3, #64	; 0x40
   27d5a:	e0b3      	b.n	27ec4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   27d5c:	2343      	movs	r3, #67	; 0x43
   27d5e:	18fb      	adds	r3, r7, r3
   27d60:	781b      	ldrb	r3, [r3, #0]
   27d62:	2b00      	cmp	r3, #0
   27d64:	d13d      	bne.n	27de2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   27d66:	2358      	movs	r3, #88	; 0x58
   27d68:	2240      	movs	r2, #64	; 0x40
   27d6a:	4694      	mov	ip, r2
   27d6c:	44bc      	add	ip, r7
   27d6e:	4463      	add	r3, ip
   27d70:	781b      	ldrb	r3, [r3, #0]
   27d72:	b2db      	uxtb	r3, r3
   27d74:	613b      	str	r3, [r7, #16]
   27d76:	2300      	movs	r3, #0
   27d78:	617b      	str	r3, [r7, #20]
   27d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27d7c:	60bb      	str	r3, [r7, #8]
   27d7e:	2300      	movs	r3, #0
   27d80:	60fb      	str	r3, [r7, #12]
   27d82:	4c52      	ldr	r4, [pc, #328]	; (27ecc <_sercom_get_async_baud_val+0x1b8>)
   27d84:	68ba      	ldr	r2, [r7, #8]
   27d86:	68fb      	ldr	r3, [r7, #12]
   27d88:	6938      	ldr	r0, [r7, #16]
   27d8a:	6979      	ldr	r1, [r7, #20]
   27d8c:	47a0      	blx	r4
   27d8e:	0003      	movs	r3, r0
   27d90:	000c      	movs	r4, r1
   27d92:	001b      	movs	r3, r3
   27d94:	65fb      	str	r3, [r7, #92]	; 0x5c
   27d96:	2300      	movs	r3, #0
   27d98:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   27d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27d9c:	603b      	str	r3, [r7, #0]
   27d9e:	2300      	movs	r3, #0
   27da0:	607b      	str	r3, [r7, #4]
   27da2:	6db8      	ldr	r0, [r7, #88]	; 0x58
   27da4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   27da6:	683a      	ldr	r2, [r7, #0]
   27da8:	687b      	ldr	r3, [r7, #4]
   27daa:	4c49      	ldr	r4, [pc, #292]	; (27ed0 <_sercom_get_async_baud_val+0x1bc>)
   27dac:	47a0      	blx	r4
   27dae:	0003      	movs	r3, r0
   27db0:	000c      	movs	r4, r1
   27db2:	673b      	str	r3, [r7, #112]	; 0x70
   27db4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   27db6:	2100      	movs	r1, #0
   27db8:	2201      	movs	r2, #1
   27dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   27dbc:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   27dbe:	1ac9      	subs	r1, r1, r3
   27dc0:	41a2      	sbcs	r2, r4
   27dc2:	000b      	movs	r3, r1
   27dc4:	0014      	movs	r4, r2
   27dc6:	66bb      	str	r3, [r7, #104]	; 0x68
   27dc8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   27dca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27dcc:	0c1b      	lsrs	r3, r3, #16
   27dce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   27dd0:	0416      	lsls	r6, r2, #16
   27dd2:	431e      	orrs	r6, r3
   27dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27dd6:	041d      	lsls	r5, r3, #16
   27dd8:	0033      	movs	r3, r6
   27dda:	67bb      	str	r3, [r7, #120]	; 0x78
   27ddc:	2300      	movs	r3, #0
   27dde:	67fb      	str	r3, [r7, #124]	; 0x7c
   27de0:	e06a      	b.n	27eb8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   27de2:	2343      	movs	r3, #67	; 0x43
   27de4:	18fb      	adds	r3, r7, r3
   27de6:	781b      	ldrb	r3, [r3, #0]
   27de8:	2b01      	cmp	r3, #1
   27dea:	d165      	bne.n	27eb8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   27dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27dee:	633b      	str	r3, [r7, #48]	; 0x30
   27df0:	2300      	movs	r3, #0
   27df2:	637b      	str	r3, [r7, #52]	; 0x34
   27df4:	2358      	movs	r3, #88	; 0x58
   27df6:	2240      	movs	r2, #64	; 0x40
   27df8:	4694      	mov	ip, r2
   27dfa:	44bc      	add	ip, r7
   27dfc:	4463      	add	r3, ip
   27dfe:	781b      	ldrb	r3, [r3, #0]
   27e00:	b2db      	uxtb	r3, r3
   27e02:	62bb      	str	r3, [r7, #40]	; 0x28
   27e04:	2300      	movs	r3, #0
   27e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   27e08:	4c30      	ldr	r4, [pc, #192]	; (27ecc <_sercom_get_async_baud_val+0x1b8>)
   27e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   27e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   27e10:	6b79      	ldr	r1, [r7, #52]	; 0x34
   27e12:	47a0      	blx	r4
   27e14:	0003      	movs	r3, r0
   27e16:	000c      	movs	r4, r1
   27e18:	65bb      	str	r3, [r7, #88]	; 0x58
   27e1a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   27e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27e1e:	623b      	str	r3, [r7, #32]
   27e20:	2300      	movs	r3, #0
   27e22:	627b      	str	r3, [r7, #36]	; 0x24
   27e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27e26:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27e28:	001a      	movs	r2, r3
   27e2a:	0023      	movs	r3, r4
   27e2c:	6a38      	ldr	r0, [r7, #32]
   27e2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27e30:	4c27      	ldr	r4, [pc, #156]	; (27ed0 <_sercom_get_async_baud_val+0x1bc>)
   27e32:	47a0      	blx	r4
   27e34:	0003      	movs	r3, r0
   27e36:	000c      	movs	r4, r1
   27e38:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   27e3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   27e3c:	2380      	movs	r3, #128	; 0x80
   27e3e:	019b      	lsls	r3, r3, #6
   27e40:	429a      	cmp	r2, r3
   27e42:	d901      	bls.n	27e48 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27e44:	2340      	movs	r3, #64	; 0x40
   27e46:	e03d      	b.n	27ec4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   27e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27e4a:	61bb      	str	r3, [r7, #24]
   27e4c:	2300      	movs	r3, #0
   27e4e:	61fb      	str	r3, [r7, #28]
   27e50:	69b9      	ldr	r1, [r7, #24]
   27e52:	69fa      	ldr	r2, [r7, #28]
   27e54:	000b      	movs	r3, r1
   27e56:	0f5b      	lsrs	r3, r3, #29
   27e58:	0010      	movs	r0, r2
   27e5a:	00c0      	lsls	r0, r0, #3
   27e5c:	63f8      	str	r0, [r7, #60]	; 0x3c
   27e5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   27e60:	4318      	orrs	r0, r3
   27e62:	63f8      	str	r0, [r7, #60]	; 0x3c
   27e64:	000b      	movs	r3, r1
   27e66:	00db      	lsls	r3, r3, #3
   27e68:	63bb      	str	r3, [r7, #56]	; 0x38
   27e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27e6c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27e6e:	001a      	movs	r2, r3
   27e70:	0023      	movs	r3, r4
   27e72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   27e74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   27e76:	4c16      	ldr	r4, [pc, #88]	; (27ed0 <_sercom_get_async_baud_val+0x1bc>)
   27e78:	47a0      	blx	r4
   27e7a:	0003      	movs	r3, r0
   27e7c:	000c      	movs	r4, r1
   27e7e:	65bb      	str	r3, [r7, #88]	; 0x58
   27e80:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   27e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27e84:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27e86:	b2d9      	uxtb	r1, r3
   27e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27e8a:	b2db      	uxtb	r3, r3
   27e8c:	00db      	lsls	r3, r3, #3
   27e8e:	b2da      	uxtb	r2, r3
   27e90:	2317      	movs	r3, #23
   27e92:	2040      	movs	r0, #64	; 0x40
   27e94:	4684      	mov	ip, r0
   27e96:	44bc      	add	ip, r7
   27e98:	4463      	add	r3, ip
   27e9a:	1a8a      	subs	r2, r1, r2
   27e9c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   27e9e:	2317      	movs	r3, #23
   27ea0:	2240      	movs	r2, #64	; 0x40
   27ea2:	4694      	mov	ip, r2
   27ea4:	44bc      	add	ip, r7
   27ea6:	4463      	add	r3, ip
   27ea8:	781b      	ldrb	r3, [r3, #0]
   27eaa:	035b      	lsls	r3, r3, #13
   27eac:	001a      	movs	r2, r3
   27eae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27eb0:	4313      	orrs	r3, r2
   27eb2:	67bb      	str	r3, [r7, #120]	; 0x78
   27eb4:	2300      	movs	r3, #0
   27eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   27eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   27eba:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   27ebc:	b29a      	uxth	r2, r3
   27ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   27ec0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   27ec2:	2300      	movs	r3, #0
}
   27ec4:	0018      	movs	r0, r3
   27ec6:	46bd      	mov	sp, r7
   27ec8:	b021      	add	sp, #132	; 0x84
   27eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27ecc:	00033855 	.word	0x00033855
   27ed0:	00027bb7 	.word	0x00027bb7

00027ed4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27ed4:	b580      	push	{r7, lr}
   27ed6:	b084      	sub	sp, #16
   27ed8:	af00      	add	r7, sp, #0
   27eda:	0002      	movs	r2, r0
   27edc:	1dfb      	adds	r3, r7, #7
   27ede:	701a      	strb	r2, [r3, #0]
   27ee0:	1dbb      	adds	r3, r7, #6
   27ee2:	1c0a      	adds	r2, r1, #0
   27ee4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   27ee6:	4b1a      	ldr	r3, [pc, #104]	; (27f50 <sercom_set_gclk_generator+0x7c>)
   27ee8:	781b      	ldrb	r3, [r3, #0]
   27eea:	2201      	movs	r2, #1
   27eec:	4053      	eors	r3, r2
   27eee:	b2db      	uxtb	r3, r3
   27ef0:	2b00      	cmp	r3, #0
   27ef2:	d103      	bne.n	27efc <sercom_set_gclk_generator+0x28>
   27ef4:	1dbb      	adds	r3, r7, #6
   27ef6:	781b      	ldrb	r3, [r3, #0]
   27ef8:	2b00      	cmp	r3, #0
   27efa:	d01b      	beq.n	27f34 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27efc:	230c      	movs	r3, #12
   27efe:	18fb      	adds	r3, r7, r3
   27f00:	0018      	movs	r0, r3
   27f02:	4b14      	ldr	r3, [pc, #80]	; (27f54 <sercom_set_gclk_generator+0x80>)
   27f04:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   27f06:	230c      	movs	r3, #12
   27f08:	18fb      	adds	r3, r7, r3
   27f0a:	1dfa      	adds	r2, r7, #7
   27f0c:	7812      	ldrb	r2, [r2, #0]
   27f0e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   27f10:	230c      	movs	r3, #12
   27f12:	18fb      	adds	r3, r7, r3
   27f14:	0019      	movs	r1, r3
   27f16:	2013      	movs	r0, #19
   27f18:	4b0f      	ldr	r3, [pc, #60]	; (27f58 <sercom_set_gclk_generator+0x84>)
   27f1a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   27f1c:	2013      	movs	r0, #19
   27f1e:	4b0f      	ldr	r3, [pc, #60]	; (27f5c <sercom_set_gclk_generator+0x88>)
   27f20:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   27f22:	4b0b      	ldr	r3, [pc, #44]	; (27f50 <sercom_set_gclk_generator+0x7c>)
   27f24:	1dfa      	adds	r2, r7, #7
   27f26:	7812      	ldrb	r2, [r2, #0]
   27f28:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   27f2a:	4b09      	ldr	r3, [pc, #36]	; (27f50 <sercom_set_gclk_generator+0x7c>)
   27f2c:	2201      	movs	r2, #1
   27f2e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   27f30:	2300      	movs	r3, #0
   27f32:	e008      	b.n	27f46 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   27f34:	4b06      	ldr	r3, [pc, #24]	; (27f50 <sercom_set_gclk_generator+0x7c>)
   27f36:	785b      	ldrb	r3, [r3, #1]
   27f38:	1dfa      	adds	r2, r7, #7
   27f3a:	7812      	ldrb	r2, [r2, #0]
   27f3c:	429a      	cmp	r2, r3
   27f3e:	d101      	bne.n	27f44 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   27f40:	2300      	movs	r3, #0
   27f42:	e000      	b.n	27f46 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   27f44:	231d      	movs	r3, #29
}
   27f46:	0018      	movs	r0, r3
   27f48:	46bd      	mov	sp, r7
   27f4a:	b004      	add	sp, #16
   27f4c:	bd80      	pop	{r7, pc}
   27f4e:	46c0      	nop			; (mov r8, r8)
   27f50:	20003ef8 	.word	0x20003ef8
   27f54:	00027ba1 	.word	0x00027ba1
   27f58:	0002a9ad 	.word	0x0002a9ad
   27f5c:	0002a9f1 	.word	0x0002a9f1

00027f60 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   27f60:	b580      	push	{r7, lr}
   27f62:	b082      	sub	sp, #8
   27f64:	af00      	add	r7, sp, #0
   27f66:	6078      	str	r0, [r7, #4]
   27f68:	000a      	movs	r2, r1
   27f6a:	1cfb      	adds	r3, r7, #3
   27f6c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   27f6e:	687b      	ldr	r3, [r7, #4]
   27f70:	4a4d      	ldr	r2, [pc, #308]	; (280a8 <_sercom_get_default_pad+0x148>)
   27f72:	4293      	cmp	r3, r2
   27f74:	d03f      	beq.n	27ff6 <_sercom_get_default_pad+0x96>
   27f76:	4a4c      	ldr	r2, [pc, #304]	; (280a8 <_sercom_get_default_pad+0x148>)
   27f78:	4293      	cmp	r3, r2
   27f7a:	d806      	bhi.n	27f8a <_sercom_get_default_pad+0x2a>
   27f7c:	4a4b      	ldr	r2, [pc, #300]	; (280ac <_sercom_get_default_pad+0x14c>)
   27f7e:	4293      	cmp	r3, r2
   27f80:	d00f      	beq.n	27fa2 <_sercom_get_default_pad+0x42>
   27f82:	4a4b      	ldr	r2, [pc, #300]	; (280b0 <_sercom_get_default_pad+0x150>)
   27f84:	4293      	cmp	r3, r2
   27f86:	d021      	beq.n	27fcc <_sercom_get_default_pad+0x6c>
   27f88:	e089      	b.n	2809e <_sercom_get_default_pad+0x13e>
   27f8a:	4a4a      	ldr	r2, [pc, #296]	; (280b4 <_sercom_get_default_pad+0x154>)
   27f8c:	4293      	cmp	r3, r2
   27f8e:	d100      	bne.n	27f92 <_sercom_get_default_pad+0x32>
   27f90:	e05b      	b.n	2804a <_sercom_get_default_pad+0xea>
   27f92:	4a49      	ldr	r2, [pc, #292]	; (280b8 <_sercom_get_default_pad+0x158>)
   27f94:	4293      	cmp	r3, r2
   27f96:	d100      	bne.n	27f9a <_sercom_get_default_pad+0x3a>
   27f98:	e06c      	b.n	28074 <_sercom_get_default_pad+0x114>
   27f9a:	4a48      	ldr	r2, [pc, #288]	; (280bc <_sercom_get_default_pad+0x15c>)
   27f9c:	4293      	cmp	r3, r2
   27f9e:	d03f      	beq.n	28020 <_sercom_get_default_pad+0xc0>
   27fa0:	e07d      	b.n	2809e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   27fa2:	1cfb      	adds	r3, r7, #3
   27fa4:	781b      	ldrb	r3, [r3, #0]
   27fa6:	2b01      	cmp	r3, #1
   27fa8:	d00a      	beq.n	27fc0 <_sercom_get_default_pad+0x60>
   27faa:	dc02      	bgt.n	27fb2 <_sercom_get_default_pad+0x52>
   27fac:	2b00      	cmp	r3, #0
   27fae:	d005      	beq.n	27fbc <_sercom_get_default_pad+0x5c>
   27fb0:	e075      	b.n	2809e <_sercom_get_default_pad+0x13e>
   27fb2:	2b02      	cmp	r3, #2
   27fb4:	d006      	beq.n	27fc4 <_sercom_get_default_pad+0x64>
   27fb6:	2b03      	cmp	r3, #3
   27fb8:	d006      	beq.n	27fc8 <_sercom_get_default_pad+0x68>
   27fba:	e070      	b.n	2809e <_sercom_get_default_pad+0x13e>
   27fbc:	4b40      	ldr	r3, [pc, #256]	; (280c0 <_sercom_get_default_pad+0x160>)
   27fbe:	e06f      	b.n	280a0 <_sercom_get_default_pad+0x140>
   27fc0:	4b40      	ldr	r3, [pc, #256]	; (280c4 <_sercom_get_default_pad+0x164>)
   27fc2:	e06d      	b.n	280a0 <_sercom_get_default_pad+0x140>
   27fc4:	4b40      	ldr	r3, [pc, #256]	; (280c8 <_sercom_get_default_pad+0x168>)
   27fc6:	e06b      	b.n	280a0 <_sercom_get_default_pad+0x140>
   27fc8:	4b40      	ldr	r3, [pc, #256]	; (280cc <_sercom_get_default_pad+0x16c>)
   27fca:	e069      	b.n	280a0 <_sercom_get_default_pad+0x140>
   27fcc:	1cfb      	adds	r3, r7, #3
   27fce:	781b      	ldrb	r3, [r3, #0]
   27fd0:	2b01      	cmp	r3, #1
   27fd2:	d00a      	beq.n	27fea <_sercom_get_default_pad+0x8a>
   27fd4:	dc02      	bgt.n	27fdc <_sercom_get_default_pad+0x7c>
   27fd6:	2b00      	cmp	r3, #0
   27fd8:	d005      	beq.n	27fe6 <_sercom_get_default_pad+0x86>
   27fda:	e060      	b.n	2809e <_sercom_get_default_pad+0x13e>
   27fdc:	2b02      	cmp	r3, #2
   27fde:	d006      	beq.n	27fee <_sercom_get_default_pad+0x8e>
   27fe0:	2b03      	cmp	r3, #3
   27fe2:	d006      	beq.n	27ff2 <_sercom_get_default_pad+0x92>
   27fe4:	e05b      	b.n	2809e <_sercom_get_default_pad+0x13e>
   27fe6:	2303      	movs	r3, #3
   27fe8:	e05a      	b.n	280a0 <_sercom_get_default_pad+0x140>
   27fea:	4b39      	ldr	r3, [pc, #228]	; (280d0 <_sercom_get_default_pad+0x170>)
   27fec:	e058      	b.n	280a0 <_sercom_get_default_pad+0x140>
   27fee:	4b39      	ldr	r3, [pc, #228]	; (280d4 <_sercom_get_default_pad+0x174>)
   27ff0:	e056      	b.n	280a0 <_sercom_get_default_pad+0x140>
   27ff2:	4b39      	ldr	r3, [pc, #228]	; (280d8 <_sercom_get_default_pad+0x178>)
   27ff4:	e054      	b.n	280a0 <_sercom_get_default_pad+0x140>
   27ff6:	1cfb      	adds	r3, r7, #3
   27ff8:	781b      	ldrb	r3, [r3, #0]
   27ffa:	2b01      	cmp	r3, #1
   27ffc:	d00a      	beq.n	28014 <_sercom_get_default_pad+0xb4>
   27ffe:	dc02      	bgt.n	28006 <_sercom_get_default_pad+0xa6>
   28000:	2b00      	cmp	r3, #0
   28002:	d005      	beq.n	28010 <_sercom_get_default_pad+0xb0>
   28004:	e04b      	b.n	2809e <_sercom_get_default_pad+0x13e>
   28006:	2b02      	cmp	r3, #2
   28008:	d006      	beq.n	28018 <_sercom_get_default_pad+0xb8>
   2800a:	2b03      	cmp	r3, #3
   2800c:	d006      	beq.n	2801c <_sercom_get_default_pad+0xbc>
   2800e:	e046      	b.n	2809e <_sercom_get_default_pad+0x13e>
   28010:	4b32      	ldr	r3, [pc, #200]	; (280dc <_sercom_get_default_pad+0x17c>)
   28012:	e045      	b.n	280a0 <_sercom_get_default_pad+0x140>
   28014:	4b32      	ldr	r3, [pc, #200]	; (280e0 <_sercom_get_default_pad+0x180>)
   28016:	e043      	b.n	280a0 <_sercom_get_default_pad+0x140>
   28018:	4b32      	ldr	r3, [pc, #200]	; (280e4 <_sercom_get_default_pad+0x184>)
   2801a:	e041      	b.n	280a0 <_sercom_get_default_pad+0x140>
   2801c:	4b32      	ldr	r3, [pc, #200]	; (280e8 <_sercom_get_default_pad+0x188>)
   2801e:	e03f      	b.n	280a0 <_sercom_get_default_pad+0x140>
   28020:	1cfb      	adds	r3, r7, #3
   28022:	781b      	ldrb	r3, [r3, #0]
   28024:	2b01      	cmp	r3, #1
   28026:	d00a      	beq.n	2803e <_sercom_get_default_pad+0xde>
   28028:	dc02      	bgt.n	28030 <_sercom_get_default_pad+0xd0>
   2802a:	2b00      	cmp	r3, #0
   2802c:	d005      	beq.n	2803a <_sercom_get_default_pad+0xda>
   2802e:	e036      	b.n	2809e <_sercom_get_default_pad+0x13e>
   28030:	2b02      	cmp	r3, #2
   28032:	d006      	beq.n	28042 <_sercom_get_default_pad+0xe2>
   28034:	2b03      	cmp	r3, #3
   28036:	d006      	beq.n	28046 <_sercom_get_default_pad+0xe6>
   28038:	e031      	b.n	2809e <_sercom_get_default_pad+0x13e>
   2803a:	4b2c      	ldr	r3, [pc, #176]	; (280ec <_sercom_get_default_pad+0x18c>)
   2803c:	e030      	b.n	280a0 <_sercom_get_default_pad+0x140>
   2803e:	4b2c      	ldr	r3, [pc, #176]	; (280f0 <_sercom_get_default_pad+0x190>)
   28040:	e02e      	b.n	280a0 <_sercom_get_default_pad+0x140>
   28042:	4b2c      	ldr	r3, [pc, #176]	; (280f4 <_sercom_get_default_pad+0x194>)
   28044:	e02c      	b.n	280a0 <_sercom_get_default_pad+0x140>
   28046:	4b2c      	ldr	r3, [pc, #176]	; (280f8 <_sercom_get_default_pad+0x198>)
   28048:	e02a      	b.n	280a0 <_sercom_get_default_pad+0x140>
   2804a:	1cfb      	adds	r3, r7, #3
   2804c:	781b      	ldrb	r3, [r3, #0]
   2804e:	2b01      	cmp	r3, #1
   28050:	d00a      	beq.n	28068 <_sercom_get_default_pad+0x108>
   28052:	dc02      	bgt.n	2805a <_sercom_get_default_pad+0xfa>
   28054:	2b00      	cmp	r3, #0
   28056:	d005      	beq.n	28064 <_sercom_get_default_pad+0x104>
   28058:	e021      	b.n	2809e <_sercom_get_default_pad+0x13e>
   2805a:	2b02      	cmp	r3, #2
   2805c:	d006      	beq.n	2806c <_sercom_get_default_pad+0x10c>
   2805e:	2b03      	cmp	r3, #3
   28060:	d006      	beq.n	28070 <_sercom_get_default_pad+0x110>
   28062:	e01c      	b.n	2809e <_sercom_get_default_pad+0x13e>
   28064:	4b25      	ldr	r3, [pc, #148]	; (280fc <_sercom_get_default_pad+0x19c>)
   28066:	e01b      	b.n	280a0 <_sercom_get_default_pad+0x140>
   28068:	4b25      	ldr	r3, [pc, #148]	; (28100 <_sercom_get_default_pad+0x1a0>)
   2806a:	e019      	b.n	280a0 <_sercom_get_default_pad+0x140>
   2806c:	4b25      	ldr	r3, [pc, #148]	; (28104 <_sercom_get_default_pad+0x1a4>)
   2806e:	e017      	b.n	280a0 <_sercom_get_default_pad+0x140>
   28070:	4b25      	ldr	r3, [pc, #148]	; (28108 <_sercom_get_default_pad+0x1a8>)
   28072:	e015      	b.n	280a0 <_sercom_get_default_pad+0x140>
   28074:	1cfb      	adds	r3, r7, #3
   28076:	781b      	ldrb	r3, [r3, #0]
   28078:	2b01      	cmp	r3, #1
   2807a:	d00a      	beq.n	28092 <_sercom_get_default_pad+0x132>
   2807c:	dc02      	bgt.n	28084 <_sercom_get_default_pad+0x124>
   2807e:	2b00      	cmp	r3, #0
   28080:	d005      	beq.n	2808e <_sercom_get_default_pad+0x12e>
   28082:	e00c      	b.n	2809e <_sercom_get_default_pad+0x13e>
   28084:	2b02      	cmp	r3, #2
   28086:	d006      	beq.n	28096 <_sercom_get_default_pad+0x136>
   28088:	2b03      	cmp	r3, #3
   2808a:	d006      	beq.n	2809a <_sercom_get_default_pad+0x13a>
   2808c:	e007      	b.n	2809e <_sercom_get_default_pad+0x13e>
   2808e:	4b1f      	ldr	r3, [pc, #124]	; (2810c <_sercom_get_default_pad+0x1ac>)
   28090:	e006      	b.n	280a0 <_sercom_get_default_pad+0x140>
   28092:	4b1f      	ldr	r3, [pc, #124]	; (28110 <_sercom_get_default_pad+0x1b0>)
   28094:	e004      	b.n	280a0 <_sercom_get_default_pad+0x140>
   28096:	4b1f      	ldr	r3, [pc, #124]	; (28114 <_sercom_get_default_pad+0x1b4>)
   28098:	e002      	b.n	280a0 <_sercom_get_default_pad+0x140>
   2809a:	4b1f      	ldr	r3, [pc, #124]	; (28118 <_sercom_get_default_pad+0x1b8>)
   2809c:	e000      	b.n	280a0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   2809e:	2300      	movs	r3, #0
}
   280a0:	0018      	movs	r0, r3
   280a2:	46bd      	mov	sp, r7
   280a4:	b002      	add	sp, #8
   280a6:	bd80      	pop	{r7, pc}
   280a8:	42001000 	.word	0x42001000
   280ac:	42000800 	.word	0x42000800
   280b0:	42000c00 	.word	0x42000c00
   280b4:	42001800 	.word	0x42001800
   280b8:	42001c00 	.word	0x42001c00
   280bc:	42001400 	.word	0x42001400
   280c0:	00040003 	.word	0x00040003
   280c4:	00050003 	.word	0x00050003
   280c8:	00060003 	.word	0x00060003
   280cc:	00070003 	.word	0x00070003
   280d0:	00010003 	.word	0x00010003
   280d4:	001e0003 	.word	0x001e0003
   280d8:	001f0003 	.word	0x001f0003
   280dc:	00080003 	.word	0x00080003
   280e0:	00090003 	.word	0x00090003
   280e4:	000a0003 	.word	0x000a0003
   280e8:	000b0003 	.word	0x000b0003
   280ec:	00100003 	.word	0x00100003
   280f0:	00110003 	.word	0x00110003
   280f4:	00120003 	.word	0x00120003
   280f8:	00130003 	.word	0x00130003
   280fc:	000c0003 	.word	0x000c0003
   28100:	000d0003 	.word	0x000d0003
   28104:	000e0003 	.word	0x000e0003
   28108:	000f0003 	.word	0x000f0003
   2810c:	00160003 	.word	0x00160003
   28110:	00170003 	.word	0x00170003
   28114:	00180003 	.word	0x00180003
   28118:	00190003 	.word	0x00190003

0002811c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   2811c:	b590      	push	{r4, r7, lr}
   2811e:	b08b      	sub	sp, #44	; 0x2c
   28120:	af00      	add	r7, sp, #0
   28122:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   28124:	230c      	movs	r3, #12
   28126:	18fb      	adds	r3, r7, r3
   28128:	4a0f      	ldr	r2, [pc, #60]	; (28168 <_sercom_get_sercom_inst_index+0x4c>)
   2812a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2812c:	c313      	stmia	r3!, {r0, r1, r4}
   2812e:	ca13      	ldmia	r2!, {r0, r1, r4}
   28130:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28132:	2300      	movs	r3, #0
   28134:	627b      	str	r3, [r7, #36]	; 0x24
   28136:	e00e      	b.n	28156 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   28138:	230c      	movs	r3, #12
   2813a:	18fb      	adds	r3, r7, r3
   2813c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2813e:	0092      	lsls	r2, r2, #2
   28140:	58d3      	ldr	r3, [r2, r3]
   28142:	001a      	movs	r2, r3
   28144:	687b      	ldr	r3, [r7, #4]
   28146:	429a      	cmp	r2, r3
   28148:	d102      	bne.n	28150 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2814c:	b2db      	uxtb	r3, r3
   2814e:	e006      	b.n	2815e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28152:	3301      	adds	r3, #1
   28154:	627b      	str	r3, [r7, #36]	; 0x24
   28156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28158:	2b05      	cmp	r3, #5
   2815a:	d9ed      	bls.n	28138 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   2815c:	2300      	movs	r3, #0
}
   2815e:	0018      	movs	r0, r3
   28160:	46bd      	mov	sp, r7
   28162:	b00b      	add	sp, #44	; 0x2c
   28164:	bd90      	pop	{r4, r7, pc}
   28166:	46c0      	nop			; (mov r8, r8)
   28168:	0003a02c 	.word	0x0003a02c

0002816c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2816c:	b580      	push	{r7, lr}
   2816e:	b082      	sub	sp, #8
   28170:	af00      	add	r7, sp, #0
   28172:	0002      	movs	r2, r0
   28174:	1dfb      	adds	r3, r7, #7
   28176:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   28178:	46c0      	nop			; (mov r8, r8)
   2817a:	46bd      	mov	sp, r7
   2817c:	b002      	add	sp, #8
   2817e:	bd80      	pop	{r7, pc}

00028180 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   28180:	b580      	push	{r7, lr}
   28182:	b084      	sub	sp, #16
   28184:	af00      	add	r7, sp, #0
   28186:	0002      	movs	r2, r0
   28188:	6039      	str	r1, [r7, #0]
   2818a:	1dfb      	adds	r3, r7, #7
   2818c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2818e:	4b13      	ldr	r3, [pc, #76]	; (281dc <_sercom_set_handler+0x5c>)
   28190:	781b      	ldrb	r3, [r3, #0]
   28192:	2201      	movs	r2, #1
   28194:	4053      	eors	r3, r2
   28196:	b2db      	uxtb	r3, r3
   28198:	2b00      	cmp	r3, #0
   2819a:	d015      	beq.n	281c8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2819c:	2300      	movs	r3, #0
   2819e:	60fb      	str	r3, [r7, #12]
   281a0:	e00c      	b.n	281bc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   281a2:	4b0f      	ldr	r3, [pc, #60]	; (281e0 <_sercom_set_handler+0x60>)
   281a4:	68fa      	ldr	r2, [r7, #12]
   281a6:	0092      	lsls	r2, r2, #2
   281a8:	490e      	ldr	r1, [pc, #56]	; (281e4 <_sercom_set_handler+0x64>)
   281aa:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   281ac:	4b0e      	ldr	r3, [pc, #56]	; (281e8 <_sercom_set_handler+0x68>)
   281ae:	68fa      	ldr	r2, [r7, #12]
   281b0:	0092      	lsls	r2, r2, #2
   281b2:	2100      	movs	r1, #0
   281b4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   281b6:	68fb      	ldr	r3, [r7, #12]
   281b8:	3301      	adds	r3, #1
   281ba:	60fb      	str	r3, [r7, #12]
   281bc:	68fb      	ldr	r3, [r7, #12]
   281be:	2b05      	cmp	r3, #5
   281c0:	d9ef      	bls.n	281a2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   281c2:	4b06      	ldr	r3, [pc, #24]	; (281dc <_sercom_set_handler+0x5c>)
   281c4:	2201      	movs	r2, #1
   281c6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   281c8:	1dfb      	adds	r3, r7, #7
   281ca:	781a      	ldrb	r2, [r3, #0]
   281cc:	4b04      	ldr	r3, [pc, #16]	; (281e0 <_sercom_set_handler+0x60>)
   281ce:	0092      	lsls	r2, r2, #2
   281d0:	6839      	ldr	r1, [r7, #0]
   281d2:	50d1      	str	r1, [r2, r3]
}
   281d4:	46c0      	nop			; (mov r8, r8)
   281d6:	46bd      	mov	sp, r7
   281d8:	b004      	add	sp, #16
   281da:	bd80      	pop	{r7, pc}
   281dc:	20003efa 	.word	0x20003efa
   281e0:	20003efc 	.word	0x20003efc
   281e4:	0002816d 	.word	0x0002816d
   281e8:	20005838 	.word	0x20005838

000281ec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   281ec:	b590      	push	{r4, r7, lr}
   281ee:	b085      	sub	sp, #20
   281f0:	af00      	add	r7, sp, #0
   281f2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   281f4:	2308      	movs	r3, #8
   281f6:	18fb      	adds	r3, r7, r3
   281f8:	4a0b      	ldr	r2, [pc, #44]	; (28228 <_sercom_get_interrupt_vector+0x3c>)
   281fa:	6811      	ldr	r1, [r2, #0]
   281fc:	6019      	str	r1, [r3, #0]
   281fe:	8892      	ldrh	r2, [r2, #4]
   28200:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   28202:	230f      	movs	r3, #15
   28204:	18fc      	adds	r4, r7, r3
   28206:	687b      	ldr	r3, [r7, #4]
   28208:	0018      	movs	r0, r3
   2820a:	4b08      	ldr	r3, [pc, #32]	; (2822c <_sercom_get_interrupt_vector+0x40>)
   2820c:	4798      	blx	r3
   2820e:	0003      	movs	r3, r0
   28210:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   28212:	230f      	movs	r3, #15
   28214:	18fb      	adds	r3, r7, r3
   28216:	781b      	ldrb	r3, [r3, #0]
   28218:	2208      	movs	r2, #8
   2821a:	18ba      	adds	r2, r7, r2
   2821c:	5cd3      	ldrb	r3, [r2, r3]
   2821e:	b25b      	sxtb	r3, r3
}
   28220:	0018      	movs	r0, r3
   28222:	46bd      	mov	sp, r7
   28224:	b005      	add	sp, #20
   28226:	bd90      	pop	{r4, r7, pc}
   28228:	0003a044 	.word	0x0003a044
   2822c:	0002811d 	.word	0x0002811d

00028230 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   28230:	b580      	push	{r7, lr}
   28232:	af00      	add	r7, sp, #0
   28234:	4b03      	ldr	r3, [pc, #12]	; (28244 <SERCOM0_Handler+0x14>)
   28236:	681b      	ldr	r3, [r3, #0]
   28238:	2000      	movs	r0, #0
   2823a:	4798      	blx	r3
   2823c:	46c0      	nop			; (mov r8, r8)
   2823e:	46bd      	mov	sp, r7
   28240:	bd80      	pop	{r7, pc}
   28242:	46c0      	nop			; (mov r8, r8)
   28244:	20003efc 	.word	0x20003efc

00028248 <SERCOM1_Handler>:
   28248:	b580      	push	{r7, lr}
   2824a:	af00      	add	r7, sp, #0
   2824c:	4b03      	ldr	r3, [pc, #12]	; (2825c <SERCOM1_Handler+0x14>)
   2824e:	685b      	ldr	r3, [r3, #4]
   28250:	2001      	movs	r0, #1
   28252:	4798      	blx	r3
   28254:	46c0      	nop			; (mov r8, r8)
   28256:	46bd      	mov	sp, r7
   28258:	bd80      	pop	{r7, pc}
   2825a:	46c0      	nop			; (mov r8, r8)
   2825c:	20003efc 	.word	0x20003efc

00028260 <SERCOM2_Handler>:
   28260:	b580      	push	{r7, lr}
   28262:	af00      	add	r7, sp, #0
   28264:	4b03      	ldr	r3, [pc, #12]	; (28274 <SERCOM2_Handler+0x14>)
   28266:	689b      	ldr	r3, [r3, #8]
   28268:	2002      	movs	r0, #2
   2826a:	4798      	blx	r3
   2826c:	46c0      	nop			; (mov r8, r8)
   2826e:	46bd      	mov	sp, r7
   28270:	bd80      	pop	{r7, pc}
   28272:	46c0      	nop			; (mov r8, r8)
   28274:	20003efc 	.word	0x20003efc

00028278 <SERCOM3_Handler>:
   28278:	b580      	push	{r7, lr}
   2827a:	af00      	add	r7, sp, #0
   2827c:	4b03      	ldr	r3, [pc, #12]	; (2828c <SERCOM3_Handler+0x14>)
   2827e:	68db      	ldr	r3, [r3, #12]
   28280:	2003      	movs	r0, #3
   28282:	4798      	blx	r3
   28284:	46c0      	nop			; (mov r8, r8)
   28286:	46bd      	mov	sp, r7
   28288:	bd80      	pop	{r7, pc}
   2828a:	46c0      	nop			; (mov r8, r8)
   2828c:	20003efc 	.word	0x20003efc

00028290 <SERCOM4_Handler>:
   28290:	b580      	push	{r7, lr}
   28292:	af00      	add	r7, sp, #0
   28294:	4b03      	ldr	r3, [pc, #12]	; (282a4 <SERCOM4_Handler+0x14>)
   28296:	691b      	ldr	r3, [r3, #16]
   28298:	2004      	movs	r0, #4
   2829a:	4798      	blx	r3
   2829c:	46c0      	nop			; (mov r8, r8)
   2829e:	46bd      	mov	sp, r7
   282a0:	bd80      	pop	{r7, pc}
   282a2:	46c0      	nop			; (mov r8, r8)
   282a4:	20003efc 	.word	0x20003efc

000282a8 <SERCOM5_Handler>:
   282a8:	b580      	push	{r7, lr}
   282aa:	af00      	add	r7, sp, #0
   282ac:	4b03      	ldr	r3, [pc, #12]	; (282bc <SERCOM5_Handler+0x14>)
   282ae:	695b      	ldr	r3, [r3, #20]
   282b0:	2005      	movs	r0, #5
   282b2:	4798      	blx	r3
   282b4:	46c0      	nop			; (mov r8, r8)
   282b6:	46bd      	mov	sp, r7
   282b8:	bd80      	pop	{r7, pc}
   282ba:	46c0      	nop			; (mov r8, r8)
   282bc:	20003efc 	.word	0x20003efc

000282c0 <system_pinmux_get_config_defaults>:
{
   282c0:	b580      	push	{r7, lr}
   282c2:	b082      	sub	sp, #8
   282c4:	af00      	add	r7, sp, #0
   282c6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   282c8:	687b      	ldr	r3, [r7, #4]
   282ca:	2280      	movs	r2, #128	; 0x80
   282cc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   282ce:	687b      	ldr	r3, [r7, #4]
   282d0:	2200      	movs	r2, #0
   282d2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   282d4:	687b      	ldr	r3, [r7, #4]
   282d6:	2201      	movs	r2, #1
   282d8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   282da:	687b      	ldr	r3, [r7, #4]
   282dc:	2200      	movs	r2, #0
   282de:	70da      	strb	r2, [r3, #3]
}
   282e0:	46c0      	nop			; (mov r8, r8)
   282e2:	46bd      	mov	sp, r7
   282e4:	b002      	add	sp, #8
   282e6:	bd80      	pop	{r7, pc}

000282e8 <system_pinmux_get_group_from_gpio_pin>:
{
   282e8:	b580      	push	{r7, lr}
   282ea:	b084      	sub	sp, #16
   282ec:	af00      	add	r7, sp, #0
   282ee:	0002      	movs	r2, r0
   282f0:	1dfb      	adds	r3, r7, #7
   282f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   282f4:	230f      	movs	r3, #15
   282f6:	18fb      	adds	r3, r7, r3
   282f8:	1dfa      	adds	r2, r7, #7
   282fa:	7812      	ldrb	r2, [r2, #0]
   282fc:	09d2      	lsrs	r2, r2, #7
   282fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   28300:	230e      	movs	r3, #14
   28302:	18fb      	adds	r3, r7, r3
   28304:	1dfa      	adds	r2, r7, #7
   28306:	7812      	ldrb	r2, [r2, #0]
   28308:	0952      	lsrs	r2, r2, #5
   2830a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2830c:	4b0d      	ldr	r3, [pc, #52]	; (28344 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2830e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   28310:	230f      	movs	r3, #15
   28312:	18fb      	adds	r3, r7, r3
   28314:	781b      	ldrb	r3, [r3, #0]
   28316:	2b00      	cmp	r3, #0
   28318:	d10f      	bne.n	2833a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2831a:	230f      	movs	r3, #15
   2831c:	18fb      	adds	r3, r7, r3
   2831e:	781b      	ldrb	r3, [r3, #0]
   28320:	009b      	lsls	r3, r3, #2
   28322:	2210      	movs	r2, #16
   28324:	4694      	mov	ip, r2
   28326:	44bc      	add	ip, r7
   28328:	4463      	add	r3, ip
   2832a:	3b08      	subs	r3, #8
   2832c:	681a      	ldr	r2, [r3, #0]
   2832e:	230e      	movs	r3, #14
   28330:	18fb      	adds	r3, r7, r3
   28332:	781b      	ldrb	r3, [r3, #0]
   28334:	01db      	lsls	r3, r3, #7
   28336:	18d3      	adds	r3, r2, r3
   28338:	e000      	b.n	2833c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2833a:	2300      	movs	r3, #0
}
   2833c:	0018      	movs	r0, r3
   2833e:	46bd      	mov	sp, r7
   28340:	b004      	add	sp, #16
   28342:	bd80      	pop	{r7, pc}
   28344:	41004400 	.word	0x41004400

00028348 <port_get_group_from_gpio_pin>:
{
   28348:	b580      	push	{r7, lr}
   2834a:	b082      	sub	sp, #8
   2834c:	af00      	add	r7, sp, #0
   2834e:	0002      	movs	r2, r0
   28350:	1dfb      	adds	r3, r7, #7
   28352:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   28354:	1dfb      	adds	r3, r7, #7
   28356:	781b      	ldrb	r3, [r3, #0]
   28358:	0018      	movs	r0, r3
   2835a:	4b03      	ldr	r3, [pc, #12]	; (28368 <port_get_group_from_gpio_pin+0x20>)
   2835c:	4798      	blx	r3
   2835e:	0003      	movs	r3, r0
}
   28360:	0018      	movs	r0, r3
   28362:	46bd      	mov	sp, r7
   28364:	b002      	add	sp, #8
   28366:	bd80      	pop	{r7, pc}
   28368:	000282e9 	.word	0x000282e9

0002836c <port_pin_set_output_level>:
{
   2836c:	b580      	push	{r7, lr}
   2836e:	b084      	sub	sp, #16
   28370:	af00      	add	r7, sp, #0
   28372:	0002      	movs	r2, r0
   28374:	1dfb      	adds	r3, r7, #7
   28376:	701a      	strb	r2, [r3, #0]
   28378:	1dbb      	adds	r3, r7, #6
   2837a:	1c0a      	adds	r2, r1, #0
   2837c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2837e:	1dfb      	adds	r3, r7, #7
   28380:	781b      	ldrb	r3, [r3, #0]
   28382:	0018      	movs	r0, r3
   28384:	4b0d      	ldr	r3, [pc, #52]	; (283bc <port_pin_set_output_level+0x50>)
   28386:	4798      	blx	r3
   28388:	0003      	movs	r3, r0
   2838a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2838c:	1dfb      	adds	r3, r7, #7
   2838e:	781b      	ldrb	r3, [r3, #0]
   28390:	221f      	movs	r2, #31
   28392:	4013      	ands	r3, r2
   28394:	2201      	movs	r2, #1
   28396:	409a      	lsls	r2, r3
   28398:	0013      	movs	r3, r2
   2839a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2839c:	1dbb      	adds	r3, r7, #6
   2839e:	781b      	ldrb	r3, [r3, #0]
   283a0:	2b00      	cmp	r3, #0
   283a2:	d003      	beq.n	283ac <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   283a4:	68fb      	ldr	r3, [r7, #12]
   283a6:	68ba      	ldr	r2, [r7, #8]
   283a8:	619a      	str	r2, [r3, #24]
}
   283aa:	e002      	b.n	283b2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   283ac:	68fb      	ldr	r3, [r7, #12]
   283ae:	68ba      	ldr	r2, [r7, #8]
   283b0:	615a      	str	r2, [r3, #20]
}
   283b2:	46c0      	nop			; (mov r8, r8)
   283b4:	46bd      	mov	sp, r7
   283b6:	b004      	add	sp, #16
   283b8:	bd80      	pop	{r7, pc}
   283ba:	46c0      	nop			; (mov r8, r8)
   283bc:	00028349 	.word	0x00028349

000283c0 <system_gclk_chan_get_config_defaults>:
{
   283c0:	b580      	push	{r7, lr}
   283c2:	b082      	sub	sp, #8
   283c4:	af00      	add	r7, sp, #0
   283c6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   283c8:	687b      	ldr	r3, [r7, #4]
   283ca:	2200      	movs	r2, #0
   283cc:	701a      	strb	r2, [r3, #0]
}
   283ce:	46c0      	nop			; (mov r8, r8)
   283d0:	46bd      	mov	sp, r7
   283d2:	b002      	add	sp, #8
   283d4:	bd80      	pop	{r7, pc}
	...

000283d8 <system_apb_clock_set_mask>:
{
   283d8:	b580      	push	{r7, lr}
   283da:	b082      	sub	sp, #8
   283dc:	af00      	add	r7, sp, #0
   283de:	0002      	movs	r2, r0
   283e0:	6039      	str	r1, [r7, #0]
   283e2:	1dfb      	adds	r3, r7, #7
   283e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   283e6:	1dfb      	adds	r3, r7, #7
   283e8:	781b      	ldrb	r3, [r3, #0]
   283ea:	2b01      	cmp	r3, #1
   283ec:	d00a      	beq.n	28404 <system_apb_clock_set_mask+0x2c>
   283ee:	2b02      	cmp	r3, #2
   283f0:	d00f      	beq.n	28412 <system_apb_clock_set_mask+0x3a>
   283f2:	2b00      	cmp	r3, #0
   283f4:	d114      	bne.n	28420 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   283f6:	4b0e      	ldr	r3, [pc, #56]	; (28430 <system_apb_clock_set_mask+0x58>)
   283f8:	4a0d      	ldr	r2, [pc, #52]	; (28430 <system_apb_clock_set_mask+0x58>)
   283fa:	6991      	ldr	r1, [r2, #24]
   283fc:	683a      	ldr	r2, [r7, #0]
   283fe:	430a      	orrs	r2, r1
   28400:	619a      	str	r2, [r3, #24]
			break;
   28402:	e00f      	b.n	28424 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28404:	4b0a      	ldr	r3, [pc, #40]	; (28430 <system_apb_clock_set_mask+0x58>)
   28406:	4a0a      	ldr	r2, [pc, #40]	; (28430 <system_apb_clock_set_mask+0x58>)
   28408:	69d1      	ldr	r1, [r2, #28]
   2840a:	683a      	ldr	r2, [r7, #0]
   2840c:	430a      	orrs	r2, r1
   2840e:	61da      	str	r2, [r3, #28]
			break;
   28410:	e008      	b.n	28424 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28412:	4b07      	ldr	r3, [pc, #28]	; (28430 <system_apb_clock_set_mask+0x58>)
   28414:	4a06      	ldr	r2, [pc, #24]	; (28430 <system_apb_clock_set_mask+0x58>)
   28416:	6a11      	ldr	r1, [r2, #32]
   28418:	683a      	ldr	r2, [r7, #0]
   2841a:	430a      	orrs	r2, r1
   2841c:	621a      	str	r2, [r3, #32]
			break;
   2841e:	e001      	b.n	28424 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28420:	2317      	movs	r3, #23
   28422:	e000      	b.n	28426 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28424:	2300      	movs	r3, #0
}
   28426:	0018      	movs	r0, r3
   28428:	46bd      	mov	sp, r7
   2842a:	b002      	add	sp, #8
   2842c:	bd80      	pop	{r7, pc}
   2842e:	46c0      	nop			; (mov r8, r8)
   28430:	40000400 	.word	0x40000400

00028434 <system_is_debugger_present>:
{
   28434:	b580      	push	{r7, lr}
   28436:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   28438:	4b05      	ldr	r3, [pc, #20]	; (28450 <system_is_debugger_present+0x1c>)
   2843a:	789b      	ldrb	r3, [r3, #2]
   2843c:	b2db      	uxtb	r3, r3
   2843e:	001a      	movs	r2, r3
   28440:	2302      	movs	r3, #2
   28442:	4013      	ands	r3, r2
   28444:	1e5a      	subs	r2, r3, #1
   28446:	4193      	sbcs	r3, r2
   28448:	b2db      	uxtb	r3, r3
}
   2844a:	0018      	movs	r0, r3
   2844c:	46bd      	mov	sp, r7
   2844e:	bd80      	pop	{r7, pc}
   28450:	41002000 	.word	0x41002000

00028454 <system_interrupt_enable>:
{
   28454:	b580      	push	{r7, lr}
   28456:	b082      	sub	sp, #8
   28458:	af00      	add	r7, sp, #0
   2845a:	0002      	movs	r2, r0
   2845c:	1dfb      	adds	r3, r7, #7
   2845e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28460:	4b06      	ldr	r3, [pc, #24]	; (2847c <system_interrupt_enable+0x28>)
   28462:	1dfa      	adds	r2, r7, #7
   28464:	7812      	ldrb	r2, [r2, #0]
   28466:	0011      	movs	r1, r2
   28468:	221f      	movs	r2, #31
   2846a:	400a      	ands	r2, r1
   2846c:	2101      	movs	r1, #1
   2846e:	4091      	lsls	r1, r2
   28470:	000a      	movs	r2, r1
   28472:	601a      	str	r2, [r3, #0]
}
   28474:	46c0      	nop			; (mov r8, r8)
   28476:	46bd      	mov	sp, r7
   28478:	b002      	add	sp, #8
   2847a:	bd80      	pop	{r7, pc}
   2847c:	e000e100 	.word	0xe000e100

00028480 <system_interrupt_disable>:
{
   28480:	b580      	push	{r7, lr}
   28482:	b082      	sub	sp, #8
   28484:	af00      	add	r7, sp, #0
   28486:	0002      	movs	r2, r0
   28488:	1dfb      	adds	r3, r7, #7
   2848a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2848c:	4a07      	ldr	r2, [pc, #28]	; (284ac <system_interrupt_disable+0x2c>)
   2848e:	1dfb      	adds	r3, r7, #7
   28490:	781b      	ldrb	r3, [r3, #0]
   28492:	0019      	movs	r1, r3
   28494:	231f      	movs	r3, #31
   28496:	400b      	ands	r3, r1
   28498:	2101      	movs	r1, #1
   2849a:	4099      	lsls	r1, r3
   2849c:	000b      	movs	r3, r1
   2849e:	0019      	movs	r1, r3
   284a0:	2380      	movs	r3, #128	; 0x80
   284a2:	50d1      	str	r1, [r2, r3]
}
   284a4:	46c0      	nop			; (mov r8, r8)
   284a6:	46bd      	mov	sp, r7
   284a8:	b002      	add	sp, #8
   284aa:	bd80      	pop	{r7, pc}
   284ac:	e000e100 	.word	0xe000e100

000284b0 <spi_is_syncing>:
{
   284b0:	b580      	push	{r7, lr}
   284b2:	b084      	sub	sp, #16
   284b4:	af00      	add	r7, sp, #0
   284b6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   284b8:	687b      	ldr	r3, [r7, #4]
   284ba:	681b      	ldr	r3, [r3, #0]
   284bc:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   284be:	68fb      	ldr	r3, [r7, #12]
   284c0:	69db      	ldr	r3, [r3, #28]
   284c2:	1e5a      	subs	r2, r3, #1
   284c4:	4193      	sbcs	r3, r2
   284c6:	b2db      	uxtb	r3, r3
}
   284c8:	0018      	movs	r0, r3
   284ca:	46bd      	mov	sp, r7
   284cc:	b004      	add	sp, #16
   284ce:	bd80      	pop	{r7, pc}

000284d0 <spi_enable>:
{
   284d0:	b580      	push	{r7, lr}
   284d2:	b084      	sub	sp, #16
   284d4:	af00      	add	r7, sp, #0
   284d6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   284d8:	687b      	ldr	r3, [r7, #4]
   284da:	681b      	ldr	r3, [r3, #0]
   284dc:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   284de:	687b      	ldr	r3, [r7, #4]
   284e0:	681b      	ldr	r3, [r3, #0]
   284e2:	0018      	movs	r0, r3
   284e4:	4b0b      	ldr	r3, [pc, #44]	; (28514 <spi_enable+0x44>)
   284e6:	4798      	blx	r3
   284e8:	0003      	movs	r3, r0
   284ea:	0018      	movs	r0, r3
   284ec:	4b0a      	ldr	r3, [pc, #40]	; (28518 <spi_enable+0x48>)
   284ee:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   284f0:	46c0      	nop			; (mov r8, r8)
   284f2:	687b      	ldr	r3, [r7, #4]
   284f4:	0018      	movs	r0, r3
   284f6:	4b09      	ldr	r3, [pc, #36]	; (2851c <spi_enable+0x4c>)
   284f8:	4798      	blx	r3
   284fa:	1e03      	subs	r3, r0, #0
   284fc:	d1f9      	bne.n	284f2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   284fe:	68fb      	ldr	r3, [r7, #12]
   28500:	681b      	ldr	r3, [r3, #0]
   28502:	2202      	movs	r2, #2
   28504:	431a      	orrs	r2, r3
   28506:	68fb      	ldr	r3, [r7, #12]
   28508:	601a      	str	r2, [r3, #0]
}
   2850a:	46c0      	nop			; (mov r8, r8)
   2850c:	46bd      	mov	sp, r7
   2850e:	b004      	add	sp, #16
   28510:	bd80      	pop	{r7, pc}
   28512:	46c0      	nop			; (mov r8, r8)
   28514:	000281ed 	.word	0x000281ed
   28518:	00028455 	.word	0x00028455
   2851c:	000284b1 	.word	0x000284b1

00028520 <spi_disable>:
{
   28520:	b580      	push	{r7, lr}
   28522:	b084      	sub	sp, #16
   28524:	af00      	add	r7, sp, #0
   28526:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28528:	687b      	ldr	r3, [r7, #4]
   2852a:	681b      	ldr	r3, [r3, #0]
   2852c:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2852e:	687b      	ldr	r3, [r7, #4]
   28530:	681b      	ldr	r3, [r3, #0]
   28532:	0018      	movs	r0, r3
   28534:	4b0e      	ldr	r3, [pc, #56]	; (28570 <spi_disable+0x50>)
   28536:	4798      	blx	r3
   28538:	0003      	movs	r3, r0
   2853a:	0018      	movs	r0, r3
   2853c:	4b0d      	ldr	r3, [pc, #52]	; (28574 <spi_disable+0x54>)
   2853e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   28540:	46c0      	nop			; (mov r8, r8)
   28542:	687b      	ldr	r3, [r7, #4]
   28544:	0018      	movs	r0, r3
   28546:	4b0c      	ldr	r3, [pc, #48]	; (28578 <spi_disable+0x58>)
   28548:	4798      	blx	r3
   2854a:	1e03      	subs	r3, r0, #0
   2854c:	d1f9      	bne.n	28542 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2854e:	68fb      	ldr	r3, [r7, #12]
   28550:	228f      	movs	r2, #143	; 0x8f
   28552:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   28554:	68fb      	ldr	r3, [r7, #12]
   28556:	228f      	movs	r2, #143	; 0x8f
   28558:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2855a:	68fb      	ldr	r3, [r7, #12]
   2855c:	681b      	ldr	r3, [r3, #0]
   2855e:	2202      	movs	r2, #2
   28560:	4393      	bics	r3, r2
   28562:	001a      	movs	r2, r3
   28564:	68fb      	ldr	r3, [r7, #12]
   28566:	601a      	str	r2, [r3, #0]
}
   28568:	46c0      	nop			; (mov r8, r8)
   2856a:	46bd      	mov	sp, r7
   2856c:	b004      	add	sp, #16
   2856e:	bd80      	pop	{r7, pc}
   28570:	000281ed 	.word	0x000281ed
   28574:	00028481 	.word	0x00028481
   28578:	000284b1 	.word	0x000284b1

0002857c <spi_is_write_complete>:
{
   2857c:	b580      	push	{r7, lr}
   2857e:	b084      	sub	sp, #16
   28580:	af00      	add	r7, sp, #0
   28582:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28584:	687b      	ldr	r3, [r7, #4]
   28586:	681b      	ldr	r3, [r3, #0]
   28588:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2858a:	68fb      	ldr	r3, [r7, #12]
   2858c:	7e1b      	ldrb	r3, [r3, #24]
   2858e:	b2db      	uxtb	r3, r3
   28590:	001a      	movs	r2, r3
   28592:	2302      	movs	r3, #2
   28594:	4013      	ands	r3, r2
   28596:	1e5a      	subs	r2, r3, #1
   28598:	4193      	sbcs	r3, r2
   2859a:	b2db      	uxtb	r3, r3
}
   2859c:	0018      	movs	r0, r3
   2859e:	46bd      	mov	sp, r7
   285a0:	b004      	add	sp, #16
   285a2:	bd80      	pop	{r7, pc}

000285a4 <spi_is_ready_to_write>:
{
   285a4:	b580      	push	{r7, lr}
   285a6:	b084      	sub	sp, #16
   285a8:	af00      	add	r7, sp, #0
   285aa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   285ac:	687b      	ldr	r3, [r7, #4]
   285ae:	681b      	ldr	r3, [r3, #0]
   285b0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   285b2:	68fb      	ldr	r3, [r7, #12]
   285b4:	7e1b      	ldrb	r3, [r3, #24]
   285b6:	b2db      	uxtb	r3, r3
   285b8:	001a      	movs	r2, r3
   285ba:	2301      	movs	r3, #1
   285bc:	4013      	ands	r3, r2
   285be:	1e5a      	subs	r2, r3, #1
   285c0:	4193      	sbcs	r3, r2
   285c2:	b2db      	uxtb	r3, r3
}
   285c4:	0018      	movs	r0, r3
   285c6:	46bd      	mov	sp, r7
   285c8:	b004      	add	sp, #16
   285ca:	bd80      	pop	{r7, pc}

000285cc <spi_is_ready_to_read>:
{
   285cc:	b580      	push	{r7, lr}
   285ce:	b084      	sub	sp, #16
   285d0:	af00      	add	r7, sp, #0
   285d2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   285d4:	687b      	ldr	r3, [r7, #4]
   285d6:	681b      	ldr	r3, [r3, #0]
   285d8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   285da:	68fb      	ldr	r3, [r7, #12]
   285dc:	7e1b      	ldrb	r3, [r3, #24]
   285de:	b2db      	uxtb	r3, r3
   285e0:	001a      	movs	r2, r3
   285e2:	2304      	movs	r3, #4
   285e4:	4013      	ands	r3, r2
   285e6:	1e5a      	subs	r2, r3, #1
   285e8:	4193      	sbcs	r3, r2
   285ea:	b2db      	uxtb	r3, r3
}
   285ec:	0018      	movs	r0, r3
   285ee:	46bd      	mov	sp, r7
   285f0:	b004      	add	sp, #16
   285f2:	bd80      	pop	{r7, pc}

000285f4 <spi_write>:
{
   285f4:	b580      	push	{r7, lr}
   285f6:	b084      	sub	sp, #16
   285f8:	af00      	add	r7, sp, #0
   285fa:	6078      	str	r0, [r7, #4]
   285fc:	000a      	movs	r2, r1
   285fe:	1cbb      	adds	r3, r7, #2
   28600:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28602:	687b      	ldr	r3, [r7, #4]
   28604:	681b      	ldr	r3, [r3, #0]
   28606:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   28608:	687b      	ldr	r3, [r7, #4]
   2860a:	0018      	movs	r0, r3
   2860c:	4b0a      	ldr	r3, [pc, #40]	; (28638 <spi_write+0x44>)
   2860e:	4798      	blx	r3
   28610:	0003      	movs	r3, r0
   28612:	001a      	movs	r2, r3
   28614:	2301      	movs	r3, #1
   28616:	4053      	eors	r3, r2
   28618:	b2db      	uxtb	r3, r3
   2861a:	2b00      	cmp	r3, #0
   2861c:	d001      	beq.n	28622 <spi_write+0x2e>
		return STATUS_BUSY;
   2861e:	2305      	movs	r3, #5
   28620:	e006      	b.n	28630 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   28622:	1cbb      	adds	r3, r7, #2
   28624:	881b      	ldrh	r3, [r3, #0]
   28626:	05db      	lsls	r3, r3, #23
   28628:	0dda      	lsrs	r2, r3, #23
   2862a:	68fb      	ldr	r3, [r7, #12]
   2862c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   2862e:	2300      	movs	r3, #0
}
   28630:	0018      	movs	r0, r3
   28632:	46bd      	mov	sp, r7
   28634:	b004      	add	sp, #16
   28636:	bd80      	pop	{r7, pc}
   28638:	000285a5 	.word	0x000285a5

0002863c <spi_read>:
{
   2863c:	b580      	push	{r7, lr}
   2863e:	b084      	sub	sp, #16
   28640:	af00      	add	r7, sp, #0
   28642:	6078      	str	r0, [r7, #4]
   28644:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28646:	687b      	ldr	r3, [r7, #4]
   28648:	681b      	ldr	r3, [r3, #0]
   2864a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   2864c:	687b      	ldr	r3, [r7, #4]
   2864e:	0018      	movs	r0, r3
   28650:	4b1b      	ldr	r3, [pc, #108]	; (286c0 <spi_read+0x84>)
   28652:	4798      	blx	r3
   28654:	0003      	movs	r3, r0
   28656:	001a      	movs	r2, r3
   28658:	2301      	movs	r3, #1
   2865a:	4053      	eors	r3, r2
   2865c:	b2db      	uxtb	r3, r3
   2865e:	2b00      	cmp	r3, #0
   28660:	d001      	beq.n	28666 <spi_read+0x2a>
		return STATUS_ERR_IO;
   28662:	2310      	movs	r3, #16
   28664:	e027      	b.n	286b6 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   28666:	230f      	movs	r3, #15
   28668:	18fb      	adds	r3, r7, r3
   2866a:	2200      	movs	r2, #0
   2866c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2866e:	68bb      	ldr	r3, [r7, #8]
   28670:	8b5b      	ldrh	r3, [r3, #26]
   28672:	b29b      	uxth	r3, r3
   28674:	001a      	movs	r2, r3
   28676:	2304      	movs	r3, #4
   28678:	4013      	ands	r3, r2
   2867a:	d006      	beq.n	2868a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2867c:	230f      	movs	r3, #15
   2867e:	18fb      	adds	r3, r7, r3
   28680:	221e      	movs	r2, #30
   28682:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   28684:	68bb      	ldr	r3, [r7, #8]
   28686:	2204      	movs	r2, #4
   28688:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2868a:	687b      	ldr	r3, [r7, #4]
   2868c:	799b      	ldrb	r3, [r3, #6]
   2868e:	2b01      	cmp	r3, #1
   28690:	d108      	bne.n	286a4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   28692:	68bb      	ldr	r3, [r7, #8]
   28694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28696:	b29b      	uxth	r3, r3
   28698:	05db      	lsls	r3, r3, #23
   2869a:	0ddb      	lsrs	r3, r3, #23
   2869c:	b29a      	uxth	r2, r3
   2869e:	683b      	ldr	r3, [r7, #0]
   286a0:	801a      	strh	r2, [r3, #0]
   286a2:	e005      	b.n	286b0 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   286a4:	68bb      	ldr	r3, [r7, #8]
   286a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   286a8:	b2db      	uxtb	r3, r3
   286aa:	b29a      	uxth	r2, r3
   286ac:	683b      	ldr	r3, [r7, #0]
   286ae:	801a      	strh	r2, [r3, #0]
	return retval;
   286b0:	230f      	movs	r3, #15
   286b2:	18fb      	adds	r3, r7, r3
   286b4:	781b      	ldrb	r3, [r3, #0]
}
   286b6:	0018      	movs	r0, r3
   286b8:	46bd      	mov	sp, r7
   286ba:	b004      	add	sp, #16
   286bc:	bd80      	pop	{r7, pc}
   286be:	46c0      	nop			; (mov r8, r8)
   286c0:	000285cd 	.word	0x000285cd

000286c4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   286c4:	b590      	push	{r4, r7, lr}
   286c6:	b089      	sub	sp, #36	; 0x24
   286c8:	af00      	add	r7, sp, #0
   286ca:	6078      	str	r0, [r7, #4]
   286cc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   286ce:	230c      	movs	r3, #12
   286d0:	18fb      	adds	r3, r7, r3
   286d2:	2200      	movs	r2, #0
   286d4:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   286d6:	687b      	ldr	r3, [r7, #4]
   286d8:	681b      	ldr	r3, [r3, #0]
   286da:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   286dc:	687b      	ldr	r3, [r7, #4]
   286de:	0018      	movs	r0, r3
   286e0:	4b24      	ldr	r3, [pc, #144]	; (28774 <spi_set_baudrate+0xb0>)
   286e2:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   286e4:	46c0      	nop			; (mov r8, r8)
   286e6:	687b      	ldr	r3, [r7, #4]
   286e8:	0018      	movs	r0, r3
   286ea:	4b23      	ldr	r3, [pc, #140]	; (28778 <spi_set_baudrate+0xb4>)
   286ec:	4798      	blx	r3
   286ee:	1e03      	subs	r3, r0, #0
   286f0:	d1f9      	bne.n	286e6 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   286f2:	687b      	ldr	r3, [r7, #4]
   286f4:	681b      	ldr	r3, [r3, #0]
   286f6:	0018      	movs	r0, r3
   286f8:	4b20      	ldr	r3, [pc, #128]	; (2877c <spi_set_baudrate+0xb8>)
   286fa:	4798      	blx	r3
   286fc:	0003      	movs	r3, r0
   286fe:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28700:	69bb      	ldr	r3, [r7, #24]
   28702:	3314      	adds	r3, #20
   28704:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   28706:	697b      	ldr	r3, [r7, #20]
   28708:	b2db      	uxtb	r3, r3
   2870a:	0018      	movs	r0, r3
   2870c:	4b1c      	ldr	r3, [pc, #112]	; (28780 <spi_set_baudrate+0xbc>)
   2870e:	4798      	blx	r3
   28710:	0003      	movs	r3, r0
   28712:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   28714:	230f      	movs	r3, #15
   28716:	18fc      	adds	r4, r7, r3
   28718:	230c      	movs	r3, #12
   2871a:	18fa      	adds	r2, r7, r3
   2871c:	6939      	ldr	r1, [r7, #16]
   2871e:	683b      	ldr	r3, [r7, #0]
   28720:	0018      	movs	r0, r3
   28722:	4b18      	ldr	r3, [pc, #96]	; (28784 <spi_set_baudrate+0xc0>)
   28724:	4798      	blx	r3
   28726:	0003      	movs	r3, r0
   28728:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   2872a:	230f      	movs	r3, #15
   2872c:	18fb      	adds	r3, r7, r3
   2872e:	781b      	ldrb	r3, [r3, #0]
   28730:	2b00      	cmp	r3, #0
   28732:	d001      	beq.n	28738 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   28734:	2317      	movs	r3, #23
   28736:	e018      	b.n	2876a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   28738:	230c      	movs	r3, #12
   2873a:	18fb      	adds	r3, r7, r3
   2873c:	881b      	ldrh	r3, [r3, #0]
   2873e:	b2da      	uxtb	r2, r3
   28740:	69fb      	ldr	r3, [r7, #28]
   28742:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   28744:	46c0      	nop			; (mov r8, r8)
   28746:	687b      	ldr	r3, [r7, #4]
   28748:	0018      	movs	r0, r3
   2874a:	4b0b      	ldr	r3, [pc, #44]	; (28778 <spi_set_baudrate+0xb4>)
   2874c:	4798      	blx	r3
   2874e:	1e03      	subs	r3, r0, #0
   28750:	d1f9      	bne.n	28746 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   28752:	687b      	ldr	r3, [r7, #4]
   28754:	0018      	movs	r0, r3
   28756:	4b0c      	ldr	r3, [pc, #48]	; (28788 <spi_set_baudrate+0xc4>)
   28758:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2875a:	46c0      	nop			; (mov r8, r8)
   2875c:	687b      	ldr	r3, [r7, #4]
   2875e:	0018      	movs	r0, r3
   28760:	4b05      	ldr	r3, [pc, #20]	; (28778 <spi_set_baudrate+0xb4>)
   28762:	4798      	blx	r3
   28764:	1e03      	subs	r3, r0, #0
   28766:	d1f9      	bne.n	2875c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   28768:	2300      	movs	r3, #0
}
   2876a:	0018      	movs	r0, r3
   2876c:	46bd      	mov	sp, r7
   2876e:	b009      	add	sp, #36	; 0x24
   28770:	bd90      	pop	{r4, r7, pc}
   28772:	46c0      	nop			; (mov r8, r8)
   28774:	00028521 	.word	0x00028521
   28778:	000284b1 	.word	0x000284b1
   2877c:	0002811d 	.word	0x0002811d
   28780:	0002aad1 	.word	0x0002aad1
   28784:	00027c97 	.word	0x00027c97
   28788:	000284d1 	.word	0x000284d1

0002878c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   2878c:	b590      	push	{r4, r7, lr}
   2878e:	b093      	sub	sp, #76	; 0x4c
   28790:	af00      	add	r7, sp, #0
   28792:	6078      	str	r0, [r7, #4]
   28794:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   28796:	687b      	ldr	r3, [r7, #4]
   28798:	681b      	ldr	r3, [r3, #0]
   2879a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   2879c:	687b      	ldr	r3, [r7, #4]
   2879e:	681b      	ldr	r3, [r3, #0]
   287a0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   287a2:	231c      	movs	r3, #28
   287a4:	18fb      	adds	r3, r7, r3
   287a6:	0018      	movs	r0, r3
   287a8:	4b75      	ldr	r3, [pc, #468]	; (28980 <_spi_set_config+0x1f4>)
   287aa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   287ac:	231c      	movs	r3, #28
   287ae:	18fb      	adds	r3, r7, r3
   287b0:	2200      	movs	r2, #0
   287b2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   287b4:	683b      	ldr	r3, [r7, #0]
   287b6:	781b      	ldrb	r3, [r3, #0]
   287b8:	2b00      	cmp	r3, #0
   287ba:	d103      	bne.n	287c4 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   287bc:	231c      	movs	r3, #28
   287be:	18fb      	adds	r3, r7, r3
   287c0:	2200      	movs	r2, #0
   287c2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   287c4:	683b      	ldr	r3, [r7, #0]
   287c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   287c8:	230c      	movs	r3, #12
   287ca:	18fb      	adds	r3, r7, r3
   287cc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   287ce:	683b      	ldr	r3, [r7, #0]
   287d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   287d2:	230c      	movs	r3, #12
   287d4:	18fb      	adds	r3, r7, r3
   287d6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   287d8:	683b      	ldr	r3, [r7, #0]
   287da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   287dc:	230c      	movs	r3, #12
   287de:	18fb      	adds	r3, r7, r3
   287e0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   287e2:	683b      	ldr	r3, [r7, #0]
   287e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   287e6:	230c      	movs	r3, #12
   287e8:	18fb      	adds	r3, r7, r3
   287ea:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   287ec:	2347      	movs	r3, #71	; 0x47
   287ee:	18fb      	adds	r3, r7, r3
   287f0:	2200      	movs	r2, #0
   287f2:	701a      	strb	r2, [r3, #0]
   287f4:	e02c      	b.n	28850 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   287f6:	2347      	movs	r3, #71	; 0x47
   287f8:	18fb      	adds	r3, r7, r3
   287fa:	781a      	ldrb	r2, [r3, #0]
   287fc:	230c      	movs	r3, #12
   287fe:	18fb      	adds	r3, r7, r3
   28800:	0092      	lsls	r2, r2, #2
   28802:	58d3      	ldr	r3, [r2, r3]
   28804:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   28806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28808:	2b00      	cmp	r3, #0
   2880a:	d109      	bne.n	28820 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2880c:	2347      	movs	r3, #71	; 0x47
   2880e:	18fb      	adds	r3, r7, r3
   28810:	781a      	ldrb	r2, [r3, #0]
   28812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28814:	0011      	movs	r1, r2
   28816:	0018      	movs	r0, r3
   28818:	4b5a      	ldr	r3, [pc, #360]	; (28984 <_spi_set_config+0x1f8>)
   2881a:	4798      	blx	r3
   2881c:	0003      	movs	r3, r0
   2881e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28822:	3301      	adds	r3, #1
   28824:	d00d      	beq.n	28842 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   28826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28828:	b2da      	uxtb	r2, r3
   2882a:	231c      	movs	r3, #28
   2882c:	18fb      	adds	r3, r7, r3
   2882e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28832:	0c1b      	lsrs	r3, r3, #16
   28834:	b2db      	uxtb	r3, r3
   28836:	221c      	movs	r2, #28
   28838:	18ba      	adds	r2, r7, r2
   2883a:	0011      	movs	r1, r2
   2883c:	0018      	movs	r0, r3
   2883e:	4b52      	ldr	r3, [pc, #328]	; (28988 <_spi_set_config+0x1fc>)
   28840:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28842:	2347      	movs	r3, #71	; 0x47
   28844:	18fb      	adds	r3, r7, r3
   28846:	781a      	ldrb	r2, [r3, #0]
   28848:	2347      	movs	r3, #71	; 0x47
   2884a:	18fb      	adds	r3, r7, r3
   2884c:	3201      	adds	r2, #1
   2884e:	701a      	strb	r2, [r3, #0]
   28850:	2347      	movs	r3, #71	; 0x47
   28852:	18fb      	adds	r3, r7, r3
   28854:	781b      	ldrb	r3, [r3, #0]
   28856:	2b03      	cmp	r3, #3
   28858:	d9cd      	bls.n	287f6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2885a:	683b      	ldr	r3, [r7, #0]
   2885c:	781a      	ldrb	r2, [r3, #0]
   2885e:	687b      	ldr	r3, [r7, #4]
   28860:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   28862:	683b      	ldr	r3, [r7, #0]
   28864:	7c1a      	ldrb	r2, [r3, #16]
   28866:	687b      	ldr	r3, [r7, #4]
   28868:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2886a:	683b      	ldr	r3, [r7, #0]
   2886c:	7c9a      	ldrb	r2, [r3, #18]
   2886e:	687b      	ldr	r3, [r7, #4]
   28870:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   28872:	683b      	ldr	r3, [r7, #0]
   28874:	7d1a      	ldrb	r2, [r3, #20]
   28876:	687b      	ldr	r3, [r7, #4]
   28878:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2887a:	230a      	movs	r3, #10
   2887c:	18fb      	adds	r3, r7, r3
   2887e:	2200      	movs	r2, #0
   28880:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   28882:	2300      	movs	r3, #0
   28884:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   28886:	2300      	movs	r3, #0
   28888:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   2888a:	683b      	ldr	r3, [r7, #0]
   2888c:	781b      	ldrb	r3, [r3, #0]
   2888e:	2b01      	cmp	r3, #1
   28890:	d129      	bne.n	288e6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28892:	687b      	ldr	r3, [r7, #4]
   28894:	681b      	ldr	r3, [r3, #0]
   28896:	0018      	movs	r0, r3
   28898:	4b3c      	ldr	r3, [pc, #240]	; (2898c <_spi_set_config+0x200>)
   2889a:	4798      	blx	r3
   2889c:	0003      	movs	r3, r0
   2889e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   288a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   288a2:	3314      	adds	r3, #20
   288a4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   288a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   288a8:	b2db      	uxtb	r3, r3
   288aa:	0018      	movs	r0, r3
   288ac:	4b38      	ldr	r3, [pc, #224]	; (28990 <_spi_set_config+0x204>)
   288ae:	4798      	blx	r3
   288b0:	0003      	movs	r3, r0
   288b2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   288b4:	683b      	ldr	r3, [r7, #0]
   288b6:	699b      	ldr	r3, [r3, #24]
   288b8:	2223      	movs	r2, #35	; 0x23
   288ba:	18bc      	adds	r4, r7, r2
   288bc:	220a      	movs	r2, #10
   288be:	18ba      	adds	r2, r7, r2
   288c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   288c2:	0018      	movs	r0, r3
   288c4:	4b33      	ldr	r3, [pc, #204]	; (28994 <_spi_set_config+0x208>)
   288c6:	4798      	blx	r3
   288c8:	0003      	movs	r3, r0
   288ca:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   288cc:	2323      	movs	r3, #35	; 0x23
   288ce:	18fb      	adds	r3, r7, r3
   288d0:	781b      	ldrb	r3, [r3, #0]
   288d2:	2b00      	cmp	r3, #0
   288d4:	d001      	beq.n	288da <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   288d6:	2317      	movs	r3, #23
   288d8:	e04e      	b.n	28978 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   288da:	230a      	movs	r3, #10
   288dc:	18fb      	adds	r3, r7, r3
   288de:	881b      	ldrh	r3, [r3, #0]
   288e0:	b2da      	uxtb	r2, r3
   288e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   288e4:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   288e6:	683b      	ldr	r3, [r7, #0]
   288e8:	685b      	ldr	r3, [r3, #4]
   288ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   288ec:	4313      	orrs	r3, r2
   288ee:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   288f0:	683b      	ldr	r3, [r7, #0]
   288f2:	689b      	ldr	r3, [r3, #8]
   288f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   288f6:	4313      	orrs	r3, r2
   288f8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   288fa:	683b      	ldr	r3, [r7, #0]
   288fc:	68db      	ldr	r3, [r3, #12]
   288fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28900:	4313      	orrs	r3, r2
   28902:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   28904:	683b      	ldr	r3, [r7, #0]
   28906:	7c1b      	ldrb	r3, [r3, #16]
   28908:	001a      	movs	r2, r3
   2890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2890c:	4313      	orrs	r3, r2
   2890e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28910:	683b      	ldr	r3, [r7, #0]
   28912:	7c5b      	ldrb	r3, [r3, #17]
   28914:	2b00      	cmp	r3, #0
   28916:	d103      	bne.n	28920 <_spi_set_config+0x194>
   28918:	4b1f      	ldr	r3, [pc, #124]	; (28998 <_spi_set_config+0x20c>)
   2891a:	4798      	blx	r3
   2891c:	1e03      	subs	r3, r0, #0
   2891e:	d003      	beq.n	28928 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   28920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28922:	2280      	movs	r2, #128	; 0x80
   28924:	4313      	orrs	r3, r2
   28926:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   28928:	683b      	ldr	r3, [r7, #0]
   2892a:	7c9b      	ldrb	r3, [r3, #18]
   2892c:	2b00      	cmp	r3, #0
   2892e:	d004      	beq.n	2893a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   28930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28932:	2280      	movs	r2, #128	; 0x80
   28934:	0292      	lsls	r2, r2, #10
   28936:	4313      	orrs	r3, r2
   28938:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2893a:	683b      	ldr	r3, [r7, #0]
   2893c:	7cdb      	ldrb	r3, [r3, #19]
   2893e:	2b00      	cmp	r3, #0
   28940:	d004      	beq.n	2894c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   28942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28944:	2280      	movs	r2, #128	; 0x80
   28946:	0092      	lsls	r2, r2, #2
   28948:	4313      	orrs	r3, r2
   2894a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2894c:	683b      	ldr	r3, [r7, #0]
   2894e:	7d1b      	ldrb	r3, [r3, #20]
   28950:	2b00      	cmp	r3, #0
   28952:	d004      	beq.n	2895e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   28954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28956:	2280      	movs	r2, #128	; 0x80
   28958:	0192      	lsls	r2, r2, #6
   2895a:	4313      	orrs	r3, r2
   2895c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28960:	681a      	ldr	r2, [r3, #0]
   28962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28964:	431a      	orrs	r2, r3
   28966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28968:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2896a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2896c:	685a      	ldr	r2, [r3, #4]
   2896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28970:	431a      	orrs	r2, r3
   28972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28974:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   28976:	2300      	movs	r3, #0
}
   28978:	0018      	movs	r0, r3
   2897a:	46bd      	mov	sp, r7
   2897c:	b013      	add	sp, #76	; 0x4c
   2897e:	bd90      	pop	{r4, r7, pc}
   28980:	000282c1 	.word	0x000282c1
   28984:	00027f61 	.word	0x00027f61
   28988:	0002ad0d 	.word	0x0002ad0d
   2898c:	0002811d 	.word	0x0002811d
   28990:	0002aad1 	.word	0x0002aad1
   28994:	00027c97 	.word	0x00027c97
   28998:	00028435 	.word	0x00028435

0002899c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   2899c:	b590      	push	{r4, r7, lr}
   2899e:	b08b      	sub	sp, #44	; 0x2c
   289a0:	af00      	add	r7, sp, #0
   289a2:	60f8      	str	r0, [r7, #12]
   289a4:	60b9      	str	r1, [r7, #8]
   289a6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   289a8:	68fb      	ldr	r3, [r7, #12]
   289aa:	68ba      	ldr	r2, [r7, #8]
   289ac:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   289ae:	68fb      	ldr	r3, [r7, #12]
   289b0:	681b      	ldr	r3, [r3, #0]
   289b2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   289b4:	6a3b      	ldr	r3, [r7, #32]
   289b6:	681b      	ldr	r3, [r3, #0]
   289b8:	2202      	movs	r2, #2
   289ba:	4013      	ands	r3, r2
   289bc:	d001      	beq.n	289c2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   289be:	231c      	movs	r3, #28
   289c0:	e09c      	b.n	28afc <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   289c2:	6a3b      	ldr	r3, [r7, #32]
   289c4:	681b      	ldr	r3, [r3, #0]
   289c6:	2201      	movs	r2, #1
   289c8:	4013      	ands	r3, r2
   289ca:	d001      	beq.n	289d0 <spi_init+0x34>
		return STATUS_BUSY;
   289cc:	2305      	movs	r3, #5
   289ce:	e095      	b.n	28afc <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   289d0:	68fb      	ldr	r3, [r7, #12]
   289d2:	681b      	ldr	r3, [r3, #0]
   289d4:	0018      	movs	r0, r3
   289d6:	4b4b      	ldr	r3, [pc, #300]	; (28b04 <spi_init+0x168>)
   289d8:	4798      	blx	r3
   289da:	0003      	movs	r3, r0
   289dc:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   289de:	69fb      	ldr	r3, [r7, #28]
   289e0:	3302      	adds	r3, #2
   289e2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   289e4:	69fb      	ldr	r3, [r7, #28]
   289e6:	3314      	adds	r3, #20
   289e8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   289ea:	2201      	movs	r2, #1
   289ec:	69bb      	ldr	r3, [r7, #24]
   289ee:	409a      	lsls	r2, r3
   289f0:	0013      	movs	r3, r2
   289f2:	0019      	movs	r1, r3
   289f4:	2002      	movs	r0, #2
   289f6:	4b44      	ldr	r3, [pc, #272]	; (28b08 <spi_init+0x16c>)
   289f8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   289fa:	2310      	movs	r3, #16
   289fc:	18fb      	adds	r3, r7, r3
   289fe:	0018      	movs	r0, r3
   28a00:	4b42      	ldr	r3, [pc, #264]	; (28b0c <spi_init+0x170>)
   28a02:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28a04:	687b      	ldr	r3, [r7, #4]
   28a06:	2224      	movs	r2, #36	; 0x24
   28a08:	5c9a      	ldrb	r2, [r3, r2]
   28a0a:	2310      	movs	r3, #16
   28a0c:	18fb      	adds	r3, r7, r3
   28a0e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28a10:	697b      	ldr	r3, [r7, #20]
   28a12:	b2db      	uxtb	r3, r3
   28a14:	2210      	movs	r2, #16
   28a16:	18ba      	adds	r2, r7, r2
   28a18:	0011      	movs	r1, r2
   28a1a:	0018      	movs	r0, r3
   28a1c:	4b3c      	ldr	r3, [pc, #240]	; (28b10 <spi_init+0x174>)
   28a1e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28a20:	697b      	ldr	r3, [r7, #20]
   28a22:	b2db      	uxtb	r3, r3
   28a24:	0018      	movs	r0, r3
   28a26:	4b3b      	ldr	r3, [pc, #236]	; (28b14 <spi_init+0x178>)
   28a28:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28a2a:	687b      	ldr	r3, [r7, #4]
   28a2c:	2224      	movs	r2, #36	; 0x24
   28a2e:	5c9b      	ldrb	r3, [r3, r2]
   28a30:	2100      	movs	r1, #0
   28a32:	0018      	movs	r0, r3
   28a34:	4b38      	ldr	r3, [pc, #224]	; (28b18 <spi_init+0x17c>)
   28a36:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   28a38:	687b      	ldr	r3, [r7, #4]
   28a3a:	781b      	ldrb	r3, [r3, #0]
   28a3c:	2b01      	cmp	r3, #1
   28a3e:	d105      	bne.n	28a4c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   28a40:	6a3b      	ldr	r3, [r7, #32]
   28a42:	681b      	ldr	r3, [r3, #0]
   28a44:	220c      	movs	r2, #12
   28a46:	431a      	orrs	r2, r3
   28a48:	6a3b      	ldr	r3, [r7, #32]
   28a4a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28a4c:	2327      	movs	r3, #39	; 0x27
   28a4e:	18fb      	adds	r3, r7, r3
   28a50:	2200      	movs	r2, #0
   28a52:	701a      	strb	r2, [r3, #0]
   28a54:	e010      	b.n	28a78 <spi_init+0xdc>
		module->callback[i]        = NULL;
   28a56:	2327      	movs	r3, #39	; 0x27
   28a58:	18fb      	adds	r3, r7, r3
   28a5a:	781b      	ldrb	r3, [r3, #0]
   28a5c:	68fa      	ldr	r2, [r7, #12]
   28a5e:	3302      	adds	r3, #2
   28a60:	009b      	lsls	r3, r3, #2
   28a62:	18d3      	adds	r3, r2, r3
   28a64:	3304      	adds	r3, #4
   28a66:	2200      	movs	r2, #0
   28a68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28a6a:	2327      	movs	r3, #39	; 0x27
   28a6c:	18fb      	adds	r3, r7, r3
   28a6e:	781a      	ldrb	r2, [r3, #0]
   28a70:	2327      	movs	r3, #39	; 0x27
   28a72:	18fb      	adds	r3, r7, r3
   28a74:	3201      	adds	r2, #1
   28a76:	701a      	strb	r2, [r3, #0]
   28a78:	2327      	movs	r3, #39	; 0x27
   28a7a:	18fb      	adds	r3, r7, r3
   28a7c:	781b      	ldrb	r3, [r3, #0]
   28a7e:	2b06      	cmp	r3, #6
   28a80:	d9e9      	bls.n	28a56 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   28a82:	68fb      	ldr	r3, [r7, #12]
   28a84:	2200      	movs	r2, #0
   28a86:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   28a88:	68fb      	ldr	r3, [r7, #12]
   28a8a:	2200      	movs	r2, #0
   28a8c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   28a8e:	68fb      	ldr	r3, [r7, #12]
   28a90:	2200      	movs	r2, #0
   28a92:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   28a94:	68fb      	ldr	r3, [r7, #12]
   28a96:	2200      	movs	r2, #0
   28a98:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   28a9a:	68fb      	ldr	r3, [r7, #12]
   28a9c:	2236      	movs	r2, #54	; 0x36
   28a9e:	2100      	movs	r1, #0
   28aa0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   28aa2:	68fb      	ldr	r3, [r7, #12]
   28aa4:	2237      	movs	r2, #55	; 0x37
   28aa6:	2100      	movs	r1, #0
   28aa8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   28aaa:	68fb      	ldr	r3, [r7, #12]
   28aac:	2238      	movs	r2, #56	; 0x38
   28aae:	2100      	movs	r1, #0
   28ab0:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   28ab2:	68fb      	ldr	r3, [r7, #12]
   28ab4:	2203      	movs	r2, #3
   28ab6:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   28ab8:	68fb      	ldr	r3, [r7, #12]
   28aba:	2200      	movs	r2, #0
   28abc:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   28abe:	68fb      	ldr	r3, [r7, #12]
   28ac0:	681b      	ldr	r3, [r3, #0]
   28ac2:	2213      	movs	r2, #19
   28ac4:	18bc      	adds	r4, r7, r2
   28ac6:	0018      	movs	r0, r3
   28ac8:	4b0e      	ldr	r3, [pc, #56]	; (28b04 <spi_init+0x168>)
   28aca:	4798      	blx	r3
   28acc:	0003      	movs	r3, r0
   28ace:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   28ad0:	4a12      	ldr	r2, [pc, #72]	; (28b1c <spi_init+0x180>)
   28ad2:	2313      	movs	r3, #19
   28ad4:	18fb      	adds	r3, r7, r3
   28ad6:	781b      	ldrb	r3, [r3, #0]
   28ad8:	0011      	movs	r1, r2
   28ada:	0018      	movs	r0, r3
   28adc:	4b10      	ldr	r3, [pc, #64]	; (28b20 <spi_init+0x184>)
   28ade:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28ae0:	2313      	movs	r3, #19
   28ae2:	18fb      	adds	r3, r7, r3
   28ae4:	781a      	ldrb	r2, [r3, #0]
   28ae6:	4b0f      	ldr	r3, [pc, #60]	; (28b24 <spi_init+0x188>)
   28ae8:	0092      	lsls	r2, r2, #2
   28aea:	68f9      	ldr	r1, [r7, #12]
   28aec:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   28aee:	687a      	ldr	r2, [r7, #4]
   28af0:	68fb      	ldr	r3, [r7, #12]
   28af2:	0011      	movs	r1, r2
   28af4:	0018      	movs	r0, r3
   28af6:	4b0c      	ldr	r3, [pc, #48]	; (28b28 <spi_init+0x18c>)
   28af8:	4798      	blx	r3
   28afa:	0003      	movs	r3, r0
}
   28afc:	0018      	movs	r0, r3
   28afe:	46bd      	mov	sp, r7
   28b00:	b00b      	add	sp, #44	; 0x2c
   28b02:	bd90      	pop	{r4, r7, pc}
   28b04:	0002811d 	.word	0x0002811d
   28b08:	000283d9 	.word	0x000283d9
   28b0c:	000283c1 	.word	0x000283c1
   28b10:	0002a9ad 	.word	0x0002a9ad
   28b14:	0002a9f1 	.word	0x0002a9f1
   28b18:	00027ed5 	.word	0x00027ed5
   28b1c:	00028ff5 	.word	0x00028ff5
   28b20:	00028181 	.word	0x00028181
   28b24:	20005838 	.word	0x20005838
   28b28:	0002878d 	.word	0x0002878d

00028b2c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   28b2c:	b590      	push	{r4, r7, lr}
   28b2e:	b087      	sub	sp, #28
   28b30:	af00      	add	r7, sp, #0
   28b32:	60f8      	str	r0, [r7, #12]
   28b34:	60b9      	str	r1, [r7, #8]
   28b36:	0019      	movs	r1, r3
   28b38:	1dbb      	adds	r3, r7, #6
   28b3a:	801a      	strh	r2, [r3, #0]
   28b3c:	1d3b      	adds	r3, r7, #4
   28b3e:	1c0a      	adds	r2, r1, #0
   28b40:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28b42:	68fb      	ldr	r3, [r7, #12]
   28b44:	2238      	movs	r2, #56	; 0x38
   28b46:	5c9b      	ldrb	r3, [r3, r2]
   28b48:	b2db      	uxtb	r3, r3
   28b4a:	2b05      	cmp	r3, #5
   28b4c:	d101      	bne.n	28b52 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28b4e:	2305      	movs	r3, #5
   28b50:	e07a      	b.n	28c48 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   28b52:	1dbb      	adds	r3, r7, #6
   28b54:	881b      	ldrh	r3, [r3, #0]
   28b56:	2b00      	cmp	r3, #0
   28b58:	d101      	bne.n	28b5e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   28b5a:	2317      	movs	r3, #23
   28b5c:	e074      	b.n	28c48 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   28b5e:	68fb      	ldr	r3, [r7, #12]
   28b60:	79db      	ldrb	r3, [r3, #7]
   28b62:	2201      	movs	r2, #1
   28b64:	4053      	eors	r3, r2
   28b66:	b2db      	uxtb	r3, r3
   28b68:	2b00      	cmp	r3, #0
   28b6a:	d001      	beq.n	28b70 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   28b6c:	231c      	movs	r3, #28
   28b6e:	e06b      	b.n	28c48 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   28b70:	2316      	movs	r3, #22
   28b72:	18fb      	adds	r3, r7, r3
   28b74:	2200      	movs	r2, #0
   28b76:	801a      	strh	r2, [r3, #0]

	while (length--) {
   28b78:	e05e      	b.n	28c38 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   28b7a:	68fb      	ldr	r3, [r7, #12]
   28b7c:	795b      	ldrb	r3, [r3, #5]
   28b7e:	2b01      	cmp	r3, #1
   28b80:	d112      	bne.n	28ba8 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   28b82:	46c0      	nop			; (mov r8, r8)
   28b84:	68fb      	ldr	r3, [r7, #12]
   28b86:	0018      	movs	r0, r3
   28b88:	4b31      	ldr	r3, [pc, #196]	; (28c50 <spi_read_buffer_wait+0x124>)
   28b8a:	4798      	blx	r3
   28b8c:	0003      	movs	r3, r0
   28b8e:	001a      	movs	r2, r3
   28b90:	2301      	movs	r3, #1
   28b92:	4053      	eors	r3, r2
   28b94:	b2db      	uxtb	r3, r3
   28b96:	2b00      	cmp	r3, #0
   28b98:	d1f4      	bne.n	28b84 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   28b9a:	1d3b      	adds	r3, r7, #4
   28b9c:	881a      	ldrh	r2, [r3, #0]
   28b9e:	68fb      	ldr	r3, [r7, #12]
   28ba0:	0011      	movs	r1, r2
   28ba2:	0018      	movs	r0, r3
   28ba4:	4b2b      	ldr	r3, [pc, #172]	; (28c54 <spi_read_buffer_wait+0x128>)
   28ba6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   28ba8:	46c0      	nop			; (mov r8, r8)
   28baa:	68fb      	ldr	r3, [r7, #12]
   28bac:	0018      	movs	r0, r3
   28bae:	4b2a      	ldr	r3, [pc, #168]	; (28c58 <spi_read_buffer_wait+0x12c>)
   28bb0:	4798      	blx	r3
   28bb2:	0003      	movs	r3, r0
   28bb4:	001a      	movs	r2, r3
   28bb6:	2301      	movs	r3, #1
   28bb8:	4053      	eors	r3, r2
   28bba:	b2db      	uxtb	r3, r3
   28bbc:	2b00      	cmp	r3, #0
   28bbe:	d1f4      	bne.n	28baa <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   28bc0:	2312      	movs	r3, #18
   28bc2:	18fb      	adds	r3, r7, r3
   28bc4:	2200      	movs	r2, #0
   28bc6:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   28bc8:	2315      	movs	r3, #21
   28bca:	18fc      	adds	r4, r7, r3
   28bcc:	2312      	movs	r3, #18
   28bce:	18fa      	adds	r2, r7, r3
   28bd0:	68fb      	ldr	r3, [r7, #12]
   28bd2:	0011      	movs	r1, r2
   28bd4:	0018      	movs	r0, r3
   28bd6:	4b21      	ldr	r3, [pc, #132]	; (28c5c <spi_read_buffer_wait+0x130>)
   28bd8:	4798      	blx	r3
   28bda:	0003      	movs	r3, r0
   28bdc:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   28bde:	2315      	movs	r3, #21
   28be0:	18fb      	adds	r3, r7, r3
   28be2:	781b      	ldrb	r3, [r3, #0]
   28be4:	2b00      	cmp	r3, #0
   28be6:	d003      	beq.n	28bf0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   28be8:	2315      	movs	r3, #21
   28bea:	18fb      	adds	r3, r7, r3
   28bec:	781b      	ldrb	r3, [r3, #0]
   28bee:	e02b      	b.n	28c48 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   28bf0:	2316      	movs	r3, #22
   28bf2:	18fb      	adds	r3, r7, r3
   28bf4:	881b      	ldrh	r3, [r3, #0]
   28bf6:	2216      	movs	r2, #22
   28bf8:	18ba      	adds	r2, r7, r2
   28bfa:	1c59      	adds	r1, r3, #1
   28bfc:	8011      	strh	r1, [r2, #0]
   28bfe:	001a      	movs	r2, r3
   28c00:	68bb      	ldr	r3, [r7, #8]
   28c02:	189b      	adds	r3, r3, r2
   28c04:	2212      	movs	r2, #18
   28c06:	18ba      	adds	r2, r7, r2
   28c08:	8812      	ldrh	r2, [r2, #0]
   28c0a:	b2d2      	uxtb	r2, r2
   28c0c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28c0e:	68fb      	ldr	r3, [r7, #12]
   28c10:	799b      	ldrb	r3, [r3, #6]
   28c12:	2b01      	cmp	r3, #1
   28c14:	d110      	bne.n	28c38 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   28c16:	2316      	movs	r3, #22
   28c18:	18fb      	adds	r3, r7, r3
   28c1a:	881b      	ldrh	r3, [r3, #0]
   28c1c:	2216      	movs	r2, #22
   28c1e:	18ba      	adds	r2, r7, r2
   28c20:	1c59      	adds	r1, r3, #1
   28c22:	8011      	strh	r1, [r2, #0]
   28c24:	001a      	movs	r2, r3
   28c26:	68bb      	ldr	r3, [r7, #8]
   28c28:	189b      	adds	r3, r3, r2
   28c2a:	2212      	movs	r2, #18
   28c2c:	18ba      	adds	r2, r7, r2
   28c2e:	8812      	ldrh	r2, [r2, #0]
   28c30:	0a12      	lsrs	r2, r2, #8
   28c32:	b292      	uxth	r2, r2
   28c34:	b2d2      	uxtb	r2, r2
   28c36:	701a      	strb	r2, [r3, #0]
	while (length--) {
   28c38:	1dbb      	adds	r3, r7, #6
   28c3a:	881b      	ldrh	r3, [r3, #0]
   28c3c:	1dba      	adds	r2, r7, #6
   28c3e:	1e59      	subs	r1, r3, #1
   28c40:	8011      	strh	r1, [r2, #0]
   28c42:	2b00      	cmp	r3, #0
   28c44:	d199      	bne.n	28b7a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   28c46:	2300      	movs	r3, #0
}
   28c48:	0018      	movs	r0, r3
   28c4a:	46bd      	mov	sp, r7
   28c4c:	b007      	add	sp, #28
   28c4e:	bd90      	pop	{r4, r7, pc}
   28c50:	000285a5 	.word	0x000285a5
   28c54:	000285f5 	.word	0x000285f5
   28c58:	000285cd 	.word	0x000285cd
   28c5c:	0002863d 	.word	0x0002863d

00028c60 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   28c60:	b580      	push	{r7, lr}
   28c62:	b086      	sub	sp, #24
   28c64:	af00      	add	r7, sp, #0
   28c66:	60f8      	str	r0, [r7, #12]
   28c68:	60b9      	str	r1, [r7, #8]
   28c6a:	1dfb      	adds	r3, r7, #7
   28c6c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   28c6e:	68fb      	ldr	r3, [r7, #12]
   28c70:	795b      	ldrb	r3, [r3, #5]
   28c72:	2b01      	cmp	r3, #1
   28c74:	d001      	beq.n	28c7a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   28c76:	2315      	movs	r3, #21
   28c78:	e05c      	b.n	28d34 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   28c7a:	68fb      	ldr	r3, [r7, #12]
   28c7c:	7a1b      	ldrb	r3, [r3, #8]
   28c7e:	2201      	movs	r2, #1
   28c80:	4053      	eors	r3, r2
   28c82:	b2db      	uxtb	r3, r3
   28c84:	2b00      	cmp	r3, #0
   28c86:	d054      	beq.n	28d32 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   28c88:	1dfb      	adds	r3, r7, #7
   28c8a:	781b      	ldrb	r3, [r3, #0]
   28c8c:	2b00      	cmp	r3, #0
   28c8e:	d04a      	beq.n	28d26 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   28c90:	68bb      	ldr	r3, [r7, #8]
   28c92:	785b      	ldrb	r3, [r3, #1]
   28c94:	2b00      	cmp	r3, #0
   28c96:	d03f      	beq.n	28d18 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   28c98:	68fb      	ldr	r3, [r7, #12]
   28c9a:	0018      	movs	r0, r3
   28c9c:	4b27      	ldr	r3, [pc, #156]	; (28d3c <spi_select_slave+0xdc>)
   28c9e:	4798      	blx	r3
   28ca0:	0003      	movs	r3, r0
   28ca2:	001a      	movs	r2, r3
   28ca4:	2301      	movs	r3, #1
   28ca6:	4053      	eors	r3, r2
   28ca8:	b2db      	uxtb	r3, r3
   28caa:	2b00      	cmp	r3, #0
   28cac:	d007      	beq.n	28cbe <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   28cae:	68bb      	ldr	r3, [r7, #8]
   28cb0:	781b      	ldrb	r3, [r3, #0]
   28cb2:	2101      	movs	r1, #1
   28cb4:	0018      	movs	r0, r3
   28cb6:	4b22      	ldr	r3, [pc, #136]	; (28d40 <spi_select_slave+0xe0>)
   28cb8:	4798      	blx	r3
					return STATUS_BUSY;
   28cba:	2305      	movs	r3, #5
   28cbc:	e03a      	b.n	28d34 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28cbe:	68bb      	ldr	r3, [r7, #8]
   28cc0:	781b      	ldrb	r3, [r3, #0]
   28cc2:	2100      	movs	r1, #0
   28cc4:	0018      	movs	r0, r3
   28cc6:	4b1e      	ldr	r3, [pc, #120]	; (28d40 <spi_select_slave+0xe0>)
   28cc8:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   28cca:	68bb      	ldr	r3, [r7, #8]
   28ccc:	789b      	ldrb	r3, [r3, #2]
   28cce:	b29a      	uxth	r2, r3
   28cd0:	68fb      	ldr	r3, [r7, #12]
   28cd2:	0011      	movs	r1, r2
   28cd4:	0018      	movs	r0, r3
   28cd6:	4b1b      	ldr	r3, [pc, #108]	; (28d44 <spi_select_slave+0xe4>)
   28cd8:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   28cda:	68fb      	ldr	r3, [r7, #12]
   28cdc:	79db      	ldrb	r3, [r3, #7]
   28cde:	2201      	movs	r2, #1
   28ce0:	4053      	eors	r3, r2
   28ce2:	b2db      	uxtb	r3, r3
   28ce4:	2b00      	cmp	r3, #0
   28ce6:	d024      	beq.n	28d32 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   28ce8:	46c0      	nop			; (mov r8, r8)
   28cea:	68fb      	ldr	r3, [r7, #12]
   28cec:	0018      	movs	r0, r3
   28cee:	4b16      	ldr	r3, [pc, #88]	; (28d48 <spi_select_slave+0xe8>)
   28cf0:	4798      	blx	r3
   28cf2:	0003      	movs	r3, r0
   28cf4:	001a      	movs	r2, r3
   28cf6:	2301      	movs	r3, #1
   28cf8:	4053      	eors	r3, r2
   28cfa:	b2db      	uxtb	r3, r3
   28cfc:	2b00      	cmp	r3, #0
   28cfe:	d1f4      	bne.n	28cea <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   28d00:	2316      	movs	r3, #22
   28d02:	18fb      	adds	r3, r7, r3
   28d04:	2200      	movs	r2, #0
   28d06:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   28d08:	2316      	movs	r3, #22
   28d0a:	18fa      	adds	r2, r7, r3
   28d0c:	68fb      	ldr	r3, [r7, #12]
   28d0e:	0011      	movs	r1, r2
   28d10:	0018      	movs	r0, r3
   28d12:	4b0e      	ldr	r3, [pc, #56]	; (28d4c <spi_select_slave+0xec>)
   28d14:	4798      	blx	r3
   28d16:	e00c      	b.n	28d32 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28d18:	68bb      	ldr	r3, [r7, #8]
   28d1a:	781b      	ldrb	r3, [r3, #0]
   28d1c:	2100      	movs	r1, #0
   28d1e:	0018      	movs	r0, r3
   28d20:	4b07      	ldr	r3, [pc, #28]	; (28d40 <spi_select_slave+0xe0>)
   28d22:	4798      	blx	r3
   28d24:	e005      	b.n	28d32 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   28d26:	68bb      	ldr	r3, [r7, #8]
   28d28:	781b      	ldrb	r3, [r3, #0]
   28d2a:	2101      	movs	r1, #1
   28d2c:	0018      	movs	r0, r3
   28d2e:	4b04      	ldr	r3, [pc, #16]	; (28d40 <spi_select_slave+0xe0>)
   28d30:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   28d32:	2300      	movs	r3, #0
}
   28d34:	0018      	movs	r0, r3
   28d36:	46bd      	mov	sp, r7
   28d38:	b006      	add	sp, #24
   28d3a:	bd80      	pop	{r7, pc}
   28d3c:	000285a5 	.word	0x000285a5
   28d40:	0002836d 	.word	0x0002836d
   28d44:	000285f5 	.word	0x000285f5
   28d48:	000285cd 	.word	0x000285cd
   28d4c:	0002863d 	.word	0x0002863d

00028d50 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   28d50:	b580      	push	{r7, lr}
   28d52:	b086      	sub	sp, #24
   28d54:	af00      	add	r7, sp, #0
   28d56:	60f8      	str	r0, [r7, #12]
   28d58:	60b9      	str	r1, [r7, #8]
   28d5a:	1dbb      	adds	r3, r7, #6
   28d5c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28d5e:	68fb      	ldr	r3, [r7, #12]
   28d60:	2238      	movs	r2, #56	; 0x38
   28d62:	5c9b      	ldrb	r3, [r3, r2]
   28d64:	b2db      	uxtb	r3, r3
   28d66:	2b05      	cmp	r3, #5
   28d68:	d101      	bne.n	28d6e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28d6a:	2305      	movs	r3, #5
   28d6c:	e087      	b.n	28e7e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   28d6e:	1dbb      	adds	r3, r7, #6
   28d70:	881b      	ldrh	r3, [r3, #0]
   28d72:	2b00      	cmp	r3, #0
   28d74:	d101      	bne.n	28d7a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   28d76:	2317      	movs	r3, #23
   28d78:	e081      	b.n	28e7e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   28d7a:	2316      	movs	r3, #22
   28d7c:	18fb      	adds	r3, r7, r3
   28d7e:	2200      	movs	r2, #0
   28d80:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   28d82:	2314      	movs	r3, #20
   28d84:	18fb      	adds	r3, r7, r3
   28d86:	1dba      	adds	r2, r7, #6
   28d88:	8812      	ldrh	r2, [r2, #0]
   28d8a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   28d8c:	e05f      	b.n	28e4e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   28d8e:	46c0      	nop			; (mov r8, r8)
   28d90:	68fb      	ldr	r3, [r7, #12]
   28d92:	0018      	movs	r0, r3
   28d94:	4b3c      	ldr	r3, [pc, #240]	; (28e88 <spi_write_buffer_wait+0x138>)
   28d96:	4798      	blx	r3
   28d98:	0003      	movs	r3, r0
   28d9a:	001a      	movs	r2, r3
   28d9c:	2301      	movs	r3, #1
   28d9e:	4053      	eors	r3, r2
   28da0:	b2db      	uxtb	r3, r3
   28da2:	2b00      	cmp	r3, #0
   28da4:	d1f4      	bne.n	28d90 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   28da6:	2316      	movs	r3, #22
   28da8:	18fb      	adds	r3, r7, r3
   28daa:	881b      	ldrh	r3, [r3, #0]
   28dac:	2216      	movs	r2, #22
   28dae:	18ba      	adds	r2, r7, r2
   28db0:	1c59      	adds	r1, r3, #1
   28db2:	8011      	strh	r1, [r2, #0]
   28db4:	001a      	movs	r2, r3
   28db6:	68bb      	ldr	r3, [r7, #8]
   28db8:	189b      	adds	r3, r3, r2
   28dba:	781a      	ldrb	r2, [r3, #0]
   28dbc:	2312      	movs	r3, #18
   28dbe:	18fb      	adds	r3, r7, r3
   28dc0:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28dc2:	68fb      	ldr	r3, [r7, #12]
   28dc4:	799b      	ldrb	r3, [r3, #6]
   28dc6:	2b01      	cmp	r3, #1
   28dc8:	d115      	bne.n	28df6 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   28dca:	2316      	movs	r3, #22
   28dcc:	18fb      	adds	r3, r7, r3
   28dce:	881b      	ldrh	r3, [r3, #0]
   28dd0:	2216      	movs	r2, #22
   28dd2:	18ba      	adds	r2, r7, r2
   28dd4:	1c59      	adds	r1, r3, #1
   28dd6:	8011      	strh	r1, [r2, #0]
   28dd8:	001a      	movs	r2, r3
   28dda:	68bb      	ldr	r3, [r7, #8]
   28ddc:	189b      	adds	r3, r3, r2
   28dde:	781b      	ldrb	r3, [r3, #0]
   28de0:	021b      	lsls	r3, r3, #8
   28de2:	b21a      	sxth	r2, r3
   28de4:	2312      	movs	r3, #18
   28de6:	18fb      	adds	r3, r7, r3
   28de8:	2100      	movs	r1, #0
   28dea:	5e5b      	ldrsh	r3, [r3, r1]
   28dec:	4313      	orrs	r3, r2
   28dee:	b21a      	sxth	r2, r3
   28df0:	2312      	movs	r3, #18
   28df2:	18fb      	adds	r3, r7, r3
   28df4:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   28df6:	2312      	movs	r3, #18
   28df8:	18fb      	adds	r3, r7, r3
   28dfa:	881a      	ldrh	r2, [r3, #0]
   28dfc:	68fb      	ldr	r3, [r7, #12]
   28dfe:	0011      	movs	r1, r2
   28e00:	0018      	movs	r0, r3
   28e02:	4b22      	ldr	r3, [pc, #136]	; (28e8c <spi_write_buffer_wait+0x13c>)
   28e04:	4798      	blx	r3

		if (module->receiver_enabled) {
   28e06:	68fb      	ldr	r3, [r7, #12]
   28e08:	79db      	ldrb	r3, [r3, #7]
   28e0a:	2214      	movs	r2, #20
   28e0c:	18ba      	adds	r2, r7, r2
   28e0e:	2114      	movs	r1, #20
   28e10:	1879      	adds	r1, r7, r1
   28e12:	8809      	ldrh	r1, [r1, #0]
   28e14:	8011      	strh	r1, [r2, #0]
   28e16:	2b00      	cmp	r3, #0
   28e18:	d019      	beq.n	28e4e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   28e1a:	46c0      	nop			; (mov r8, r8)
   28e1c:	68fb      	ldr	r3, [r7, #12]
   28e1e:	0018      	movs	r0, r3
   28e20:	4b1b      	ldr	r3, [pc, #108]	; (28e90 <spi_write_buffer_wait+0x140>)
   28e22:	4798      	blx	r3
   28e24:	0003      	movs	r3, r0
   28e26:	001a      	movs	r2, r3
   28e28:	2301      	movs	r3, #1
   28e2a:	4053      	eors	r3, r2
   28e2c:	b2db      	uxtb	r3, r3
   28e2e:	2b00      	cmp	r3, #0
   28e30:	d1f4      	bne.n	28e1c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   28e32:	2310      	movs	r3, #16
   28e34:	18fa      	adds	r2, r7, r3
   28e36:	68fb      	ldr	r3, [r7, #12]
   28e38:	0011      	movs	r1, r2
   28e3a:	0018      	movs	r0, r3
   28e3c:	4b15      	ldr	r3, [pc, #84]	; (28e94 <spi_write_buffer_wait+0x144>)
   28e3e:	4798      	blx	r3
			flush_length--;
   28e40:	2314      	movs	r3, #20
   28e42:	18fb      	adds	r3, r7, r3
   28e44:	881a      	ldrh	r2, [r3, #0]
   28e46:	2314      	movs	r3, #20
   28e48:	18fb      	adds	r3, r7, r3
   28e4a:	3a01      	subs	r2, #1
   28e4c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   28e4e:	1dbb      	adds	r3, r7, #6
   28e50:	881b      	ldrh	r3, [r3, #0]
   28e52:	1dba      	adds	r2, r7, #6
   28e54:	1e59      	subs	r1, r3, #1
   28e56:	8011      	strh	r1, [r2, #0]
   28e58:	2b00      	cmp	r3, #0
   28e5a:	d198      	bne.n	28d8e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   28e5c:	68fb      	ldr	r3, [r7, #12]
   28e5e:	795b      	ldrb	r3, [r3, #5]
   28e60:	2b01      	cmp	r3, #1
   28e62:	d10b      	bne.n	28e7c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   28e64:	46c0      	nop			; (mov r8, r8)
   28e66:	68fb      	ldr	r3, [r7, #12]
   28e68:	0018      	movs	r0, r3
   28e6a:	4b0b      	ldr	r3, [pc, #44]	; (28e98 <spi_write_buffer_wait+0x148>)
   28e6c:	4798      	blx	r3
   28e6e:	0003      	movs	r3, r0
   28e70:	001a      	movs	r2, r3
   28e72:	2301      	movs	r3, #1
   28e74:	4053      	eors	r3, r2
   28e76:	b2db      	uxtb	r3, r3
   28e78:	2b00      	cmp	r3, #0
   28e7a:	d1f4      	bne.n	28e66 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   28e7c:	2300      	movs	r3, #0
}
   28e7e:	0018      	movs	r0, r3
   28e80:	46bd      	mov	sp, r7
   28e82:	b006      	add	sp, #24
   28e84:	bd80      	pop	{r7, pc}
   28e86:	46c0      	nop			; (mov r8, r8)
   28e88:	000285a5 	.word	0x000285a5
   28e8c:	000285f5 	.word	0x000285f5
   28e90:	000285cd 	.word	0x000285cd
   28e94:	0002863d 	.word	0x0002863d
   28e98:	0002857d 	.word	0x0002857d

00028e9c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   28e9c:	b580      	push	{r7, lr}
   28e9e:	b084      	sub	sp, #16
   28ea0:	af00      	add	r7, sp, #0
   28ea2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28ea4:	687b      	ldr	r3, [r7, #4]
   28ea6:	681b      	ldr	r3, [r3, #0]
   28ea8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   28eaa:	687b      	ldr	r3, [r7, #4]
   28eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28eae:	781b      	ldrb	r3, [r3, #0]
   28eb0:	b2da      	uxtb	r2, r3
   28eb2:	230e      	movs	r3, #14
   28eb4:	18fb      	adds	r3, r7, r3
   28eb6:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   28eb8:	687b      	ldr	r3, [r7, #4]
   28eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28ebc:	1c5a      	adds	r2, r3, #1
   28ebe:	687b      	ldr	r3, [r7, #4]
   28ec0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28ec2:	687b      	ldr	r3, [r7, #4]
   28ec4:	799b      	ldrb	r3, [r3, #6]
   28ec6:	2b01      	cmp	r3, #1
   28ec8:	d113      	bne.n	28ef2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   28eca:	687b      	ldr	r3, [r7, #4]
   28ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28ece:	781b      	ldrb	r3, [r3, #0]
   28ed0:	b2db      	uxtb	r3, r3
   28ed2:	021b      	lsls	r3, r3, #8
   28ed4:	b21a      	sxth	r2, r3
   28ed6:	230e      	movs	r3, #14
   28ed8:	18fb      	adds	r3, r7, r3
   28eda:	2100      	movs	r1, #0
   28edc:	5e5b      	ldrsh	r3, [r3, r1]
   28ede:	4313      	orrs	r3, r2
   28ee0:	b21a      	sxth	r2, r3
   28ee2:	230e      	movs	r3, #14
   28ee4:	18fb      	adds	r3, r7, r3
   28ee6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   28ee8:	687b      	ldr	r3, [r7, #4]
   28eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28eec:	1c5a      	adds	r2, r3, #1
   28eee:	687b      	ldr	r3, [r7, #4]
   28ef0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   28ef2:	230e      	movs	r3, #14
   28ef4:	18fb      	adds	r3, r7, r3
   28ef6:	881b      	ldrh	r3, [r3, #0]
   28ef8:	05db      	lsls	r3, r3, #23
   28efa:	0dda      	lsrs	r2, r3, #23
   28efc:	68bb      	ldr	r3, [r7, #8]
   28efe:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   28f00:	687b      	ldr	r3, [r7, #4]
   28f02:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28f04:	b29b      	uxth	r3, r3
   28f06:	3b01      	subs	r3, #1
   28f08:	b29a      	uxth	r2, r3
   28f0a:	687b      	ldr	r3, [r7, #4]
   28f0c:	869a      	strh	r2, [r3, #52]	; 0x34
}
   28f0e:	46c0      	nop			; (mov r8, r8)
   28f10:	46bd      	mov	sp, r7
   28f12:	b004      	add	sp, #16
   28f14:	bd80      	pop	{r7, pc}
	...

00028f18 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   28f18:	b580      	push	{r7, lr}
   28f1a:	b084      	sub	sp, #16
   28f1c:	af00      	add	r7, sp, #0
   28f1e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28f20:	687b      	ldr	r3, [r7, #4]
   28f22:	681b      	ldr	r3, [r3, #0]
   28f24:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   28f26:	4b08      	ldr	r3, [pc, #32]	; (28f48 <_spi_write_dummy+0x30>)
   28f28:	881b      	ldrh	r3, [r3, #0]
   28f2a:	001a      	movs	r2, r3
   28f2c:	68fb      	ldr	r3, [r7, #12]
   28f2e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28f30:	687b      	ldr	r3, [r7, #4]
   28f32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28f34:	b29b      	uxth	r3, r3
   28f36:	3b01      	subs	r3, #1
   28f38:	b29a      	uxth	r2, r3
   28f3a:	687b      	ldr	r3, [r7, #4]
   28f3c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   28f3e:	46c0      	nop			; (mov r8, r8)
   28f40:	46bd      	mov	sp, r7
   28f42:	b004      	add	sp, #16
   28f44:	bd80      	pop	{r7, pc}
   28f46:	46c0      	nop			; (mov r8, r8)
   28f48:	20005850 	.word	0x20005850

00028f4c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   28f4c:	b580      	push	{r7, lr}
   28f4e:	b084      	sub	sp, #16
   28f50:	af00      	add	r7, sp, #0
   28f52:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28f54:	687b      	ldr	r3, [r7, #4]
   28f56:	681b      	ldr	r3, [r3, #0]
   28f58:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   28f5a:	230a      	movs	r3, #10
   28f5c:	18fb      	adds	r3, r7, r3
   28f5e:	2200      	movs	r2, #0
   28f60:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   28f62:	68fb      	ldr	r3, [r7, #12]
   28f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28f66:	230a      	movs	r3, #10
   28f68:	18fb      	adds	r3, r7, r3
   28f6a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28f6c:	687b      	ldr	r3, [r7, #4]
   28f6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28f70:	b29b      	uxth	r3, r3
   28f72:	3b01      	subs	r3, #1
   28f74:	b29a      	uxth	r2, r3
   28f76:	687b      	ldr	r3, [r7, #4]
   28f78:	865a      	strh	r2, [r3, #50]	; 0x32
}
   28f7a:	46c0      	nop			; (mov r8, r8)
   28f7c:	46bd      	mov	sp, r7
   28f7e:	b004      	add	sp, #16
   28f80:	bd80      	pop	{r7, pc}

00028f82 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   28f82:	b580      	push	{r7, lr}
   28f84:	b084      	sub	sp, #16
   28f86:	af00      	add	r7, sp, #0
   28f88:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28f8a:	687b      	ldr	r3, [r7, #4]
   28f8c:	681b      	ldr	r3, [r3, #0]
   28f8e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   28f90:	68fb      	ldr	r3, [r7, #12]
   28f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f94:	b29a      	uxth	r2, r3
   28f96:	230a      	movs	r3, #10
   28f98:	18fb      	adds	r3, r7, r3
   28f9a:	05d2      	lsls	r2, r2, #23
   28f9c:	0dd2      	lsrs	r2, r2, #23
   28f9e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   28fa0:	687b      	ldr	r3, [r7, #4]
   28fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28fa4:	220a      	movs	r2, #10
   28fa6:	18ba      	adds	r2, r7, r2
   28fa8:	8812      	ldrh	r2, [r2, #0]
   28faa:	b2d2      	uxtb	r2, r2
   28fac:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   28fae:	687b      	ldr	r3, [r7, #4]
   28fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28fb2:	1c5a      	adds	r2, r3, #1
   28fb4:	687b      	ldr	r3, [r7, #4]
   28fb6:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28fb8:	687b      	ldr	r3, [r7, #4]
   28fba:	799b      	ldrb	r3, [r3, #6]
   28fbc:	2b01      	cmp	r3, #1
   28fbe:	d10d      	bne.n	28fdc <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   28fc0:	687b      	ldr	r3, [r7, #4]
   28fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28fc4:	220a      	movs	r2, #10
   28fc6:	18ba      	adds	r2, r7, r2
   28fc8:	8812      	ldrh	r2, [r2, #0]
   28fca:	0a12      	lsrs	r2, r2, #8
   28fcc:	b292      	uxth	r2, r2
   28fce:	b2d2      	uxtb	r2, r2
   28fd0:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   28fd2:	687b      	ldr	r3, [r7, #4]
   28fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28fd6:	1c5a      	adds	r2, r3, #1
   28fd8:	687b      	ldr	r3, [r7, #4]
   28fda:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   28fdc:	687b      	ldr	r3, [r7, #4]
   28fde:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28fe0:	b29b      	uxth	r3, r3
   28fe2:	3b01      	subs	r3, #1
   28fe4:	b29a      	uxth	r2, r3
   28fe6:	687b      	ldr	r3, [r7, #4]
   28fe8:	861a      	strh	r2, [r3, #48]	; 0x30
}
   28fea:	46c0      	nop			; (mov r8, r8)
   28fec:	46bd      	mov	sp, r7
   28fee:	b004      	add	sp, #16
   28ff0:	bd80      	pop	{r7, pc}
	...

00028ff4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   28ff4:	b580      	push	{r7, lr}
   28ff6:	b086      	sub	sp, #24
   28ff8:	af00      	add	r7, sp, #0
   28ffa:	0002      	movs	r2, r0
   28ffc:	1dfb      	adds	r3, r7, #7
   28ffe:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   29000:	1dfb      	adds	r3, r7, #7
   29002:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   29004:	4b96      	ldr	r3, [pc, #600]	; (29260 <_spi_interrupt_handler+0x26c>)
   29006:	0092      	lsls	r2, r2, #2
   29008:	58d3      	ldr	r3, [r2, r3]
   2900a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2900c:	697b      	ldr	r3, [r7, #20]
   2900e:	681b      	ldr	r3, [r3, #0]
   29010:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   29012:	697b      	ldr	r3, [r7, #20]
   29014:	2237      	movs	r2, #55	; 0x37
   29016:	5c9a      	ldrb	r2, [r3, r2]
   29018:	697b      	ldr	r3, [r7, #20]
   2901a:	2136      	movs	r1, #54	; 0x36
   2901c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   2901e:	230f      	movs	r3, #15
   29020:	18fb      	adds	r3, r7, r3
   29022:	400a      	ands	r2, r1
   29024:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   29026:	693b      	ldr	r3, [r7, #16]
   29028:	7e1b      	ldrb	r3, [r3, #24]
   2902a:	b2da      	uxtb	r2, r3
   2902c:	230c      	movs	r3, #12
   2902e:	18fb      	adds	r3, r7, r3
   29030:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   29032:	693b      	ldr	r3, [r7, #16]
   29034:	7d9b      	ldrb	r3, [r3, #22]
   29036:	b2db      	uxtb	r3, r3
   29038:	b29a      	uxth	r2, r3
   2903a:	230c      	movs	r3, #12
   2903c:	18fb      	adds	r3, r7, r3
   2903e:	210c      	movs	r1, #12
   29040:	1879      	adds	r1, r7, r1
   29042:	8809      	ldrh	r1, [r1, #0]
   29044:	400a      	ands	r2, r1
   29046:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   29048:	230c      	movs	r3, #12
   2904a:	18fb      	adds	r3, r7, r3
   2904c:	881b      	ldrh	r3, [r3, #0]
   2904e:	2201      	movs	r2, #1
   29050:	4013      	ands	r3, r2
   29052:	d038      	beq.n	290c6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   29054:	697b      	ldr	r3, [r7, #20]
   29056:	795b      	ldrb	r3, [r3, #5]
   29058:	2b01      	cmp	r3, #1
   2905a:	d110      	bne.n	2907e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   2905c:	697b      	ldr	r3, [r7, #20]
   2905e:	7a5b      	ldrb	r3, [r3, #9]
   29060:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   29062:	2b00      	cmp	r3, #0
   29064:	d10b      	bne.n	2907e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   29066:	697b      	ldr	r3, [r7, #20]
   29068:	0018      	movs	r0, r3
   2906a:	4b7e      	ldr	r3, [pc, #504]	; (29264 <_spi_interrupt_handler+0x270>)
   2906c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2906e:	697b      	ldr	r3, [r7, #20]
   29070:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29072:	b29b      	uxth	r3, r3
   29074:	2b00      	cmp	r3, #0
   29076:	d102      	bne.n	2907e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   29078:	693b      	ldr	r3, [r7, #16]
   2907a:	2201      	movs	r2, #1
   2907c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2907e:	697b      	ldr	r3, [r7, #20]
   29080:	795b      	ldrb	r3, [r3, #5]
		if (0
   29082:	2b01      	cmp	r3, #1
   29084:	d11f      	bne.n	290c6 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   29086:	697b      	ldr	r3, [r7, #20]
   29088:	7a5b      	ldrb	r3, [r3, #9]
   2908a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   2908c:	2b00      	cmp	r3, #0
   2908e:	d01a      	beq.n	290c6 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   29090:	697b      	ldr	r3, [r7, #20]
   29092:	0018      	movs	r0, r3
   29094:	4b74      	ldr	r3, [pc, #464]	; (29268 <_spi_interrupt_handler+0x274>)
   29096:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   29098:	697b      	ldr	r3, [r7, #20]
   2909a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2909c:	b29b      	uxth	r3, r3
   2909e:	2b00      	cmp	r3, #0
   290a0:	d111      	bne.n	290c6 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   290a2:	693b      	ldr	r3, [r7, #16]
   290a4:	2201      	movs	r2, #1
   290a6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   290a8:	697b      	ldr	r3, [r7, #20]
   290aa:	7a5b      	ldrb	r3, [r3, #9]
   290ac:	b2db      	uxtb	r3, r3
   290ae:	2b01      	cmp	r3, #1
   290b0:	d109      	bne.n	290c6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   290b2:	697b      	ldr	r3, [r7, #20]
   290b4:	79db      	ldrb	r3, [r3, #7]
   290b6:	2201      	movs	r2, #1
   290b8:	4053      	eors	r3, r2
   290ba:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   290bc:	2b00      	cmp	r3, #0
   290be:	d002      	beq.n	290c6 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   290c0:	693b      	ldr	r3, [r7, #16]
   290c2:	2202      	movs	r2, #2
   290c4:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   290c6:	230c      	movs	r3, #12
   290c8:	18fb      	adds	r3, r7, r3
   290ca:	881b      	ldrh	r3, [r3, #0]
   290cc:	2204      	movs	r2, #4
   290ce:	4013      	ands	r3, r2
   290d0:	d100      	bne.n	290d4 <_spi_interrupt_handler+0xe0>
   290d2:	e07e      	b.n	291d2 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   290d4:	693b      	ldr	r3, [r7, #16]
   290d6:	8b5b      	ldrh	r3, [r3, #26]
   290d8:	b29b      	uxth	r3, r3
   290da:	001a      	movs	r2, r3
   290dc:	2304      	movs	r3, #4
   290de:	4013      	ands	r3, r2
   290e0:	d022      	beq.n	29128 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   290e2:	697b      	ldr	r3, [r7, #20]
   290e4:	7a5b      	ldrb	r3, [r3, #9]
   290e6:	b2db      	uxtb	r3, r3
   290e8:	2b01      	cmp	r3, #1
   290ea:	d014      	beq.n	29116 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   290ec:	697b      	ldr	r3, [r7, #20]
   290ee:	2238      	movs	r2, #56	; 0x38
   290f0:	211e      	movs	r1, #30
   290f2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   290f4:	697b      	ldr	r3, [r7, #20]
   290f6:	2203      	movs	r2, #3
   290f8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   290fa:	693b      	ldr	r3, [r7, #16]
   290fc:	2205      	movs	r2, #5
   290fe:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   29100:	230f      	movs	r3, #15
   29102:	18fb      	adds	r3, r7, r3
   29104:	781b      	ldrb	r3, [r3, #0]
   29106:	2208      	movs	r2, #8
   29108:	4013      	ands	r3, r2
   2910a:	d004      	beq.n	29116 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   2910c:	697b      	ldr	r3, [r7, #20]
   2910e:	699b      	ldr	r3, [r3, #24]
   29110:	697a      	ldr	r2, [r7, #20]
   29112:	0010      	movs	r0, r2
   29114:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   29116:	693b      	ldr	r3, [r7, #16]
   29118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2911a:	230a      	movs	r3, #10
   2911c:	18fb      	adds	r3, r7, r3
   2911e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   29120:	693b      	ldr	r3, [r7, #16]
   29122:	2204      	movs	r2, #4
   29124:	835a      	strh	r2, [r3, #26]
   29126:	e054      	b.n	291d2 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   29128:	697b      	ldr	r3, [r7, #20]
   2912a:	7a5b      	ldrb	r3, [r3, #9]
   2912c:	b2db      	uxtb	r3, r3
   2912e:	2b01      	cmp	r3, #1
   29130:	d11e      	bne.n	29170 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   29132:	697b      	ldr	r3, [r7, #20]
   29134:	0018      	movs	r0, r3
   29136:	4b4d      	ldr	r3, [pc, #308]	; (2926c <_spi_interrupt_handler+0x278>)
   29138:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   2913a:	697b      	ldr	r3, [r7, #20]
   2913c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2913e:	b29b      	uxth	r3, r3
   29140:	2b00      	cmp	r3, #0
   29142:	d146      	bne.n	291d2 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   29144:	693b      	ldr	r3, [r7, #16]
   29146:	2204      	movs	r2, #4
   29148:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2914a:	697b      	ldr	r3, [r7, #20]
   2914c:	2238      	movs	r2, #56	; 0x38
   2914e:	2100      	movs	r1, #0
   29150:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   29152:	697b      	ldr	r3, [r7, #20]
   29154:	2203      	movs	r2, #3
   29156:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   29158:	230f      	movs	r3, #15
   2915a:	18fb      	adds	r3, r7, r3
   2915c:	781b      	ldrb	r3, [r3, #0]
   2915e:	2201      	movs	r2, #1
   29160:	4013      	ands	r3, r2
   29162:	d036      	beq.n	291d2 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   29164:	697b      	ldr	r3, [r7, #20]
   29166:	68db      	ldr	r3, [r3, #12]
   29168:	697a      	ldr	r2, [r7, #20]
   2916a:	0010      	movs	r0, r2
   2916c:	4798      	blx	r3
   2916e:	e030      	b.n	291d2 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   29170:	697b      	ldr	r3, [r7, #20]
   29172:	0018      	movs	r0, r3
   29174:	4b3e      	ldr	r3, [pc, #248]	; (29270 <_spi_interrupt_handler+0x27c>)
   29176:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   29178:	697b      	ldr	r3, [r7, #20]
   2917a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2917c:	b29b      	uxth	r3, r3
   2917e:	2b00      	cmp	r3, #0
   29180:	d127      	bne.n	291d2 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   29182:	697b      	ldr	r3, [r7, #20]
   29184:	2238      	movs	r2, #56	; 0x38
   29186:	2100      	movs	r1, #0
   29188:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2918a:	693b      	ldr	r3, [r7, #16]
   2918c:	2204      	movs	r2, #4
   2918e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   29190:	697b      	ldr	r3, [r7, #20]
   29192:	7a5b      	ldrb	r3, [r3, #9]
   29194:	b2db      	uxtb	r3, r3
   29196:	2b02      	cmp	r3, #2
   29198:	d10b      	bne.n	291b2 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   2919a:	230f      	movs	r3, #15
   2919c:	18fb      	adds	r3, r7, r3
   2919e:	781b      	ldrb	r3, [r3, #0]
   291a0:	2204      	movs	r2, #4
   291a2:	4013      	ands	r3, r2
   291a4:	d015      	beq.n	291d2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   291a6:	697b      	ldr	r3, [r7, #20]
   291a8:	695b      	ldr	r3, [r3, #20]
   291aa:	697a      	ldr	r2, [r7, #20]
   291ac:	0010      	movs	r0, r2
   291ae:	4798      	blx	r3
   291b0:	e00f      	b.n	291d2 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   291b2:	697b      	ldr	r3, [r7, #20]
   291b4:	7a5b      	ldrb	r3, [r3, #9]
   291b6:	b2db      	uxtb	r3, r3
   291b8:	2b00      	cmp	r3, #0
   291ba:	d10a      	bne.n	291d2 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   291bc:	230f      	movs	r3, #15
   291be:	18fb      	adds	r3, r7, r3
   291c0:	781b      	ldrb	r3, [r3, #0]
   291c2:	2202      	movs	r2, #2
   291c4:	4013      	ands	r3, r2
   291c6:	d004      	beq.n	291d2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   291c8:	697b      	ldr	r3, [r7, #20]
   291ca:	691b      	ldr	r3, [r3, #16]
   291cc:	697a      	ldr	r2, [r7, #20]
   291ce:	0010      	movs	r0, r2
   291d0:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   291d2:	230c      	movs	r3, #12
   291d4:	18fb      	adds	r3, r7, r3
   291d6:	881b      	ldrh	r3, [r3, #0]
   291d8:	2202      	movs	r2, #2
   291da:	4013      	ands	r3, r2
   291dc:	d024      	beq.n	29228 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   291de:	697b      	ldr	r3, [r7, #20]
   291e0:	795b      	ldrb	r3, [r3, #5]
   291e2:	2b01      	cmp	r3, #1
   291e4:	d120      	bne.n	29228 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   291e6:	697b      	ldr	r3, [r7, #20]
   291e8:	7a5b      	ldrb	r3, [r3, #9]
   291ea:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   291ec:	2b01      	cmp	r3, #1
   291ee:	d11b      	bne.n	29228 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   291f0:	697b      	ldr	r3, [r7, #20]
   291f2:	79db      	ldrb	r3, [r3, #7]
   291f4:	2201      	movs	r2, #1
   291f6:	4053      	eors	r3, r2
   291f8:	b2db      	uxtb	r3, r3
   291fa:	2b00      	cmp	r3, #0
   291fc:	d014      	beq.n	29228 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   291fe:	693b      	ldr	r3, [r7, #16]
   29200:	2202      	movs	r2, #2
   29202:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   29204:	697b      	ldr	r3, [r7, #20]
   29206:	2203      	movs	r2, #3
   29208:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   2920a:	697b      	ldr	r3, [r7, #20]
   2920c:	2238      	movs	r2, #56	; 0x38
   2920e:	2100      	movs	r1, #0
   29210:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   29212:	230f      	movs	r3, #15
   29214:	18fb      	adds	r3, r7, r3
   29216:	781b      	ldrb	r3, [r3, #0]
   29218:	2201      	movs	r2, #1
   2921a:	4013      	ands	r3, r2
   2921c:	d004      	beq.n	29228 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   2921e:	697b      	ldr	r3, [r7, #20]
   29220:	68db      	ldr	r3, [r3, #12]
   29222:	697a      	ldr	r2, [r7, #20]
   29224:	0010      	movs	r0, r2
   29226:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   29228:	230c      	movs	r3, #12
   2922a:	18fb      	adds	r3, r7, r3
   2922c:	881b      	ldrh	r3, [r3, #0]
   2922e:	2280      	movs	r2, #128	; 0x80
   29230:	4013      	ands	r3, r2
   29232:	d010      	beq.n	29256 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   29234:	693b      	ldr	r3, [r7, #16]
   29236:	2280      	movs	r2, #128	; 0x80
   29238:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2923a:	693b      	ldr	r3, [r7, #16]
   2923c:	2280      	movs	r2, #128	; 0x80
   2923e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   29240:	230f      	movs	r3, #15
   29242:	18fb      	adds	r3, r7, r3
   29244:	781b      	ldrb	r3, [r3, #0]
   29246:	2240      	movs	r2, #64	; 0x40
   29248:	4013      	ands	r3, r2
   2924a:	d004      	beq.n	29256 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   2924c:	697b      	ldr	r3, [r7, #20]
   2924e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29250:	697a      	ldr	r2, [r7, #20]
   29252:	0010      	movs	r0, r2
   29254:	4798      	blx	r3
		}
	}
#  endif
}
   29256:	46c0      	nop			; (mov r8, r8)
   29258:	46bd      	mov	sp, r7
   2925a:	b006      	add	sp, #24
   2925c:	bd80      	pop	{r7, pc}
   2925e:	46c0      	nop			; (mov r8, r8)
   29260:	20005838 	.word	0x20005838
   29264:	00028f19 	.word	0x00028f19
   29268:	00028e9d 	.word	0x00028e9d
   2926c:	00028f4d 	.word	0x00028f4d
   29270:	00028f83 	.word	0x00028f83

00029274 <system_gclk_chan_get_config_defaults>:
{
   29274:	b580      	push	{r7, lr}
   29276:	b082      	sub	sp, #8
   29278:	af00      	add	r7, sp, #0
   2927a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2927c:	687b      	ldr	r3, [r7, #4]
   2927e:	2200      	movs	r2, #0
   29280:	701a      	strb	r2, [r3, #0]
}
   29282:	46c0      	nop			; (mov r8, r8)
   29284:	46bd      	mov	sp, r7
   29286:	b002      	add	sp, #8
   29288:	bd80      	pop	{r7, pc}
	...

0002928c <system_apb_clock_set_mask>:
{
   2928c:	b580      	push	{r7, lr}
   2928e:	b082      	sub	sp, #8
   29290:	af00      	add	r7, sp, #0
   29292:	0002      	movs	r2, r0
   29294:	6039      	str	r1, [r7, #0]
   29296:	1dfb      	adds	r3, r7, #7
   29298:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2929a:	1dfb      	adds	r3, r7, #7
   2929c:	781b      	ldrb	r3, [r3, #0]
   2929e:	2b01      	cmp	r3, #1
   292a0:	d00a      	beq.n	292b8 <system_apb_clock_set_mask+0x2c>
   292a2:	2b02      	cmp	r3, #2
   292a4:	d00f      	beq.n	292c6 <system_apb_clock_set_mask+0x3a>
   292a6:	2b00      	cmp	r3, #0
   292a8:	d114      	bne.n	292d4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   292aa:	4b0e      	ldr	r3, [pc, #56]	; (292e4 <system_apb_clock_set_mask+0x58>)
   292ac:	4a0d      	ldr	r2, [pc, #52]	; (292e4 <system_apb_clock_set_mask+0x58>)
   292ae:	6991      	ldr	r1, [r2, #24]
   292b0:	683a      	ldr	r2, [r7, #0]
   292b2:	430a      	orrs	r2, r1
   292b4:	619a      	str	r2, [r3, #24]
			break;
   292b6:	e00f      	b.n	292d8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   292b8:	4b0a      	ldr	r3, [pc, #40]	; (292e4 <system_apb_clock_set_mask+0x58>)
   292ba:	4a0a      	ldr	r2, [pc, #40]	; (292e4 <system_apb_clock_set_mask+0x58>)
   292bc:	69d1      	ldr	r1, [r2, #28]
   292be:	683a      	ldr	r2, [r7, #0]
   292c0:	430a      	orrs	r2, r1
   292c2:	61da      	str	r2, [r3, #28]
			break;
   292c4:	e008      	b.n	292d8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   292c6:	4b07      	ldr	r3, [pc, #28]	; (292e4 <system_apb_clock_set_mask+0x58>)
   292c8:	4a06      	ldr	r2, [pc, #24]	; (292e4 <system_apb_clock_set_mask+0x58>)
   292ca:	6a11      	ldr	r1, [r2, #32]
   292cc:	683a      	ldr	r2, [r7, #0]
   292ce:	430a      	orrs	r2, r1
   292d0:	621a      	str	r2, [r3, #32]
			break;
   292d2:	e001      	b.n	292d8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   292d4:	2317      	movs	r3, #23
   292d6:	e000      	b.n	292da <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   292d8:	2300      	movs	r3, #0
}
   292da:	0018      	movs	r0, r3
   292dc:	46bd      	mov	sp, r7
   292de:	b002      	add	sp, #8
   292e0:	bd80      	pop	{r7, pc}
   292e2:	46c0      	nop			; (mov r8, r8)
   292e4:	40000400 	.word	0x40000400

000292e8 <system_pinmux_get_config_defaults>:
{
   292e8:	b580      	push	{r7, lr}
   292ea:	b082      	sub	sp, #8
   292ec:	af00      	add	r7, sp, #0
   292ee:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   292f0:	687b      	ldr	r3, [r7, #4]
   292f2:	2280      	movs	r2, #128	; 0x80
   292f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   292f6:	687b      	ldr	r3, [r7, #4]
   292f8:	2200      	movs	r2, #0
   292fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   292fc:	687b      	ldr	r3, [r7, #4]
   292fe:	2201      	movs	r2, #1
   29300:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29302:	687b      	ldr	r3, [r7, #4]
   29304:	2200      	movs	r2, #0
   29306:	70da      	strb	r2, [r3, #3]
}
   29308:	46c0      	nop			; (mov r8, r8)
   2930a:	46bd      	mov	sp, r7
   2930c:	b002      	add	sp, #8
   2930e:	bd80      	pop	{r7, pc}

00029310 <system_is_debugger_present>:
{
   29310:	b580      	push	{r7, lr}
   29312:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   29314:	4b05      	ldr	r3, [pc, #20]	; (2932c <system_is_debugger_present+0x1c>)
   29316:	789b      	ldrb	r3, [r3, #2]
   29318:	b2db      	uxtb	r3, r3
   2931a:	001a      	movs	r2, r3
   2931c:	2302      	movs	r3, #2
   2931e:	4013      	ands	r3, r2
   29320:	1e5a      	subs	r2, r3, #1
   29322:	4193      	sbcs	r3, r2
   29324:	b2db      	uxtb	r3, r3
}
   29326:	0018      	movs	r0, r3
   29328:	46bd      	mov	sp, r7
   2932a:	bd80      	pop	{r7, pc}
   2932c:	41002000 	.word	0x41002000

00029330 <usart_is_syncing>:
{
   29330:	b580      	push	{r7, lr}
   29332:	b084      	sub	sp, #16
   29334:	af00      	add	r7, sp, #0
   29336:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   29338:	687b      	ldr	r3, [r7, #4]
   2933a:	681b      	ldr	r3, [r3, #0]
   2933c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2933e:	68fb      	ldr	r3, [r7, #12]
   29340:	69db      	ldr	r3, [r3, #28]
   29342:	1e5a      	subs	r2, r3, #1
   29344:	4193      	sbcs	r3, r2
   29346:	b2db      	uxtb	r3, r3
}
   29348:	0018      	movs	r0, r3
   2934a:	46bd      	mov	sp, r7
   2934c:	b004      	add	sp, #16
   2934e:	bd80      	pop	{r7, pc}

00029350 <_usart_wait_for_sync>:
{
   29350:	b580      	push	{r7, lr}
   29352:	b082      	sub	sp, #8
   29354:	af00      	add	r7, sp, #0
   29356:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   29358:	46c0      	nop			; (mov r8, r8)
   2935a:	687b      	ldr	r3, [r7, #4]
   2935c:	0018      	movs	r0, r3
   2935e:	4b04      	ldr	r3, [pc, #16]	; (29370 <_usart_wait_for_sync+0x20>)
   29360:	4798      	blx	r3
   29362:	1e03      	subs	r3, r0, #0
   29364:	d1f9      	bne.n	2935a <_usart_wait_for_sync+0xa>
}
   29366:	46c0      	nop			; (mov r8, r8)
   29368:	46bd      	mov	sp, r7
   2936a:	b002      	add	sp, #8
   2936c:	bd80      	pop	{r7, pc}
   2936e:	46c0      	nop			; (mov r8, r8)
   29370:	00029331 	.word	0x00029331

00029374 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   29374:	b5b0      	push	{r4, r5, r7, lr}
   29376:	b08c      	sub	sp, #48	; 0x30
   29378:	af02      	add	r7, sp, #8
   2937a:	6078      	str	r0, [r7, #4]
   2937c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2937e:	687b      	ldr	r3, [r7, #4]
   29380:	681b      	ldr	r3, [r3, #0]
   29382:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29384:	687b      	ldr	r3, [r7, #4]
   29386:	681b      	ldr	r3, [r3, #0]
   29388:	0018      	movs	r0, r3
   2938a:	4bab      	ldr	r3, [pc, #684]	; (29638 <_usart_set_config+0x2c4>)
   2938c:	4798      	blx	r3
   2938e:	0003      	movs	r3, r0
   29390:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29392:	697b      	ldr	r3, [r7, #20]
   29394:	3314      	adds	r3, #20
   29396:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   29398:	2300      	movs	r3, #0
   2939a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2939c:	2300      	movs	r3, #0
   2939e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   293a0:	230a      	movs	r3, #10
   293a2:	18fb      	adds	r3, r7, r3
   293a4:	2200      	movs	r2, #0
   293a6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   293a8:	231f      	movs	r3, #31
   293aa:	18fb      	adds	r3, r7, r3
   293ac:	2200      	movs	r2, #0
   293ae:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   293b0:	231e      	movs	r3, #30
   293b2:	18fb      	adds	r3, r7, r3
   293b4:	2210      	movs	r2, #16
   293b6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   293b8:	683b      	ldr	r3, [r7, #0]
   293ba:	8a1b      	ldrh	r3, [r3, #16]
   293bc:	2280      	movs	r2, #128	; 0x80
   293be:	01d2      	lsls	r2, r2, #7
   293c0:	4293      	cmp	r3, r2
   293c2:	d01c      	beq.n	293fe <_usart_set_config+0x8a>
   293c4:	2280      	movs	r2, #128	; 0x80
   293c6:	01d2      	lsls	r2, r2, #7
   293c8:	4293      	cmp	r3, r2
   293ca:	dc06      	bgt.n	293da <_usart_set_config+0x66>
   293cc:	2b00      	cmp	r3, #0
   293ce:	d00d      	beq.n	293ec <_usart_set_config+0x78>
   293d0:	2280      	movs	r2, #128	; 0x80
   293d2:	0192      	lsls	r2, r2, #6
   293d4:	4293      	cmp	r3, r2
   293d6:	d024      	beq.n	29422 <_usart_set_config+0xae>
   293d8:	e035      	b.n	29446 <_usart_set_config+0xd2>
   293da:	22c0      	movs	r2, #192	; 0xc0
   293dc:	01d2      	lsls	r2, r2, #7
   293de:	4293      	cmp	r3, r2
   293e0:	d028      	beq.n	29434 <_usart_set_config+0xc0>
   293e2:	2280      	movs	r2, #128	; 0x80
   293e4:	0212      	lsls	r2, r2, #8
   293e6:	4293      	cmp	r3, r2
   293e8:	d012      	beq.n	29410 <_usart_set_config+0x9c>
   293ea:	e02c      	b.n	29446 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   293ec:	231f      	movs	r3, #31
   293ee:	18fb      	adds	r3, r7, r3
   293f0:	2200      	movs	r2, #0
   293f2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   293f4:	231e      	movs	r3, #30
   293f6:	18fb      	adds	r3, r7, r3
   293f8:	2210      	movs	r2, #16
   293fa:	701a      	strb	r2, [r3, #0]
			break;
   293fc:	e023      	b.n	29446 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   293fe:	231f      	movs	r3, #31
   29400:	18fb      	adds	r3, r7, r3
   29402:	2200      	movs	r2, #0
   29404:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   29406:	231e      	movs	r3, #30
   29408:	18fb      	adds	r3, r7, r3
   2940a:	2208      	movs	r2, #8
   2940c:	701a      	strb	r2, [r3, #0]
			break;
   2940e:	e01a      	b.n	29446 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   29410:	231f      	movs	r3, #31
   29412:	18fb      	adds	r3, r7, r3
   29414:	2200      	movs	r2, #0
   29416:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   29418:	231e      	movs	r3, #30
   2941a:	18fb      	adds	r3, r7, r3
   2941c:	2203      	movs	r2, #3
   2941e:	701a      	strb	r2, [r3, #0]
			break;
   29420:	e011      	b.n	29446 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   29422:	231f      	movs	r3, #31
   29424:	18fb      	adds	r3, r7, r3
   29426:	2201      	movs	r2, #1
   29428:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2942a:	231e      	movs	r3, #30
   2942c:	18fb      	adds	r3, r7, r3
   2942e:	2210      	movs	r2, #16
   29430:	701a      	strb	r2, [r3, #0]
			break;
   29432:	e008      	b.n	29446 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   29434:	231f      	movs	r3, #31
   29436:	18fb      	adds	r3, r7, r3
   29438:	2201      	movs	r2, #1
   2943a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2943c:	231e      	movs	r3, #30
   2943e:	18fb      	adds	r3, r7, r3
   29440:	2208      	movs	r2, #8
   29442:	701a      	strb	r2, [r3, #0]
			break;
   29444:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   29446:	683b      	ldr	r3, [r7, #0]
   29448:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2944a:	683b      	ldr	r3, [r7, #0]
   2944c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2944e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   29450:	683b      	ldr	r3, [r7, #0]
   29452:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   29454:	4313      	orrs	r3, r2
		config->sample_rate |
   29456:	683a      	ldr	r2, [r7, #0]
   29458:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2945a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2945c:	683a      	ldr	r2, [r7, #0]
   2945e:	7e12      	ldrb	r2, [r2, #24]
   29460:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   29462:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   29464:	683a      	ldr	r2, [r7, #0]
   29466:	2126      	movs	r1, #38	; 0x26
   29468:	5c52      	ldrb	r2, [r2, r1]
   2946a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2946c:	4313      	orrs	r3, r2
   2946e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   29470:	231d      	movs	r3, #29
   29472:	18fb      	adds	r3, r7, r3
   29474:	2200      	movs	r2, #0
   29476:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   29478:	683b      	ldr	r3, [r7, #0]
   2947a:	685b      	ldr	r3, [r3, #4]
   2947c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2947e:	68fb      	ldr	r3, [r7, #12]
   29480:	2b00      	cmp	r3, #0
   29482:	d01e      	beq.n	294c2 <_usart_set_config+0x14e>
   29484:	2280      	movs	r2, #128	; 0x80
   29486:	0552      	lsls	r2, r2, #21
   29488:	4293      	cmp	r3, r2
   2948a:	d14f      	bne.n	2952c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2948c:	683b      	ldr	r3, [r7, #0]
   2948e:	2227      	movs	r2, #39	; 0x27
   29490:	5c9b      	ldrb	r3, [r3, r2]
   29492:	2201      	movs	r2, #1
   29494:	4053      	eors	r3, r2
   29496:	b2db      	uxtb	r3, r3
   29498:	2b00      	cmp	r3, #0
   2949a:	d046      	beq.n	2952a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2949c:	683b      	ldr	r3, [r7, #0]
   2949e:	6a1d      	ldr	r5, [r3, #32]
   294a0:	693b      	ldr	r3, [r7, #16]
   294a2:	b2db      	uxtb	r3, r3
   294a4:	0018      	movs	r0, r3
   294a6:	4b65      	ldr	r3, [pc, #404]	; (2963c <_usart_set_config+0x2c8>)
   294a8:	4798      	blx	r3
   294aa:	0001      	movs	r1, r0
   294ac:	231d      	movs	r3, #29
   294ae:	18fc      	adds	r4, r7, r3
   294b0:	230a      	movs	r3, #10
   294b2:	18fb      	adds	r3, r7, r3
   294b4:	001a      	movs	r2, r3
   294b6:	0028      	movs	r0, r5
   294b8:	4b61      	ldr	r3, [pc, #388]	; (29640 <_usart_set_config+0x2cc>)
   294ba:	4798      	blx	r3
   294bc:	0003      	movs	r3, r0
   294be:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   294c0:	e033      	b.n	2952a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   294c2:	683b      	ldr	r3, [r7, #0]
   294c4:	2227      	movs	r2, #39	; 0x27
   294c6:	5c9b      	ldrb	r3, [r3, r2]
   294c8:	2b00      	cmp	r3, #0
   294ca:	d014      	beq.n	294f6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   294cc:	683b      	ldr	r3, [r7, #0]
   294ce:	6a18      	ldr	r0, [r3, #32]
   294d0:	683b      	ldr	r3, [r7, #0]
   294d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   294d4:	231d      	movs	r3, #29
   294d6:	18fc      	adds	r4, r7, r3
   294d8:	231f      	movs	r3, #31
   294da:	18fb      	adds	r3, r7, r3
   294dc:	781d      	ldrb	r5, [r3, #0]
   294de:	230a      	movs	r3, #10
   294e0:	18fa      	adds	r2, r7, r3
   294e2:	231e      	movs	r3, #30
   294e4:	18fb      	adds	r3, r7, r3
   294e6:	781b      	ldrb	r3, [r3, #0]
   294e8:	9300      	str	r3, [sp, #0]
   294ea:	002b      	movs	r3, r5
   294ec:	4d55      	ldr	r5, [pc, #340]	; (29644 <_usart_set_config+0x2d0>)
   294ee:	47a8      	blx	r5
   294f0:	0003      	movs	r3, r0
   294f2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   294f4:	e01a      	b.n	2952c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   294f6:	683b      	ldr	r3, [r7, #0]
   294f8:	6a1d      	ldr	r5, [r3, #32]
   294fa:	693b      	ldr	r3, [r7, #16]
   294fc:	b2db      	uxtb	r3, r3
   294fe:	0018      	movs	r0, r3
   29500:	4b4e      	ldr	r3, [pc, #312]	; (2963c <_usart_set_config+0x2c8>)
   29502:	4798      	blx	r3
				status_code =
   29504:	231d      	movs	r3, #29
   29506:	18fc      	adds	r4, r7, r3
   29508:	231f      	movs	r3, #31
   2950a:	18fb      	adds	r3, r7, r3
   2950c:	7819      	ldrb	r1, [r3, #0]
   2950e:	230a      	movs	r3, #10
   29510:	18fa      	adds	r2, r7, r3
   29512:	231e      	movs	r3, #30
   29514:	18fb      	adds	r3, r7, r3
   29516:	781b      	ldrb	r3, [r3, #0]
   29518:	9300      	str	r3, [sp, #0]
   2951a:	000b      	movs	r3, r1
   2951c:	0001      	movs	r1, r0
   2951e:	0028      	movs	r0, r5
   29520:	4d48      	ldr	r5, [pc, #288]	; (29644 <_usart_set_config+0x2d0>)
   29522:	47a8      	blx	r5
   29524:	0003      	movs	r3, r0
   29526:	7023      	strb	r3, [r4, #0]
			break;
   29528:	e000      	b.n	2952c <_usart_set_config+0x1b8>
			break;
   2952a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   2952c:	231d      	movs	r3, #29
   2952e:	18fb      	adds	r3, r7, r3
   29530:	781b      	ldrb	r3, [r3, #0]
   29532:	2b00      	cmp	r3, #0
   29534:	d003      	beq.n	2953e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   29536:	231d      	movs	r3, #29
   29538:	18fb      	adds	r3, r7, r3
   2953a:	781b      	ldrb	r3, [r3, #0]
   2953c:	e077      	b.n	2962e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2953e:	683b      	ldr	r3, [r7, #0]
   29540:	7e5b      	ldrb	r3, [r3, #25]
   29542:	2b00      	cmp	r3, #0
   29544:	d003      	beq.n	2954e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   29546:	683b      	ldr	r3, [r7, #0]
   29548:	7e9a      	ldrb	r2, [r3, #26]
   2954a:	69bb      	ldr	r3, [r7, #24]
   2954c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2954e:	687b      	ldr	r3, [r7, #4]
   29550:	0018      	movs	r0, r3
   29552:	4b3d      	ldr	r3, [pc, #244]	; (29648 <_usart_set_config+0x2d4>)
   29554:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   29556:	230a      	movs	r3, #10
   29558:	18fb      	adds	r3, r7, r3
   2955a:	881a      	ldrh	r2, [r3, #0]
   2955c:	69bb      	ldr	r3, [r7, #24]
   2955e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   29560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   29562:	68fb      	ldr	r3, [r7, #12]
   29564:	4313      	orrs	r3, r2
   29566:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   29568:	683b      	ldr	r3, [r7, #0]
   2956a:	2227      	movs	r2, #39	; 0x27
   2956c:	5c9b      	ldrb	r3, [r3, r2]
   2956e:	2201      	movs	r2, #1
   29570:	4053      	eors	r3, r2
   29572:	b2db      	uxtb	r3, r3
   29574:	2b00      	cmp	r3, #0
   29576:	d003      	beq.n	29580 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   29578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2957a:	2204      	movs	r2, #4
   2957c:	4313      	orrs	r3, r2
   2957e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   29580:	683b      	ldr	r3, [r7, #0]
   29582:	7e5b      	ldrb	r3, [r3, #25]
   29584:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   29586:	683b      	ldr	r3, [r7, #0]
   29588:	7f1b      	ldrb	r3, [r3, #28]
   2958a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2958c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2958e:	683b      	ldr	r3, [r7, #0]
   29590:	7f5b      	ldrb	r3, [r3, #29]
   29592:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   29594:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   29596:	683b      	ldr	r3, [r7, #0]
   29598:	2124      	movs	r1, #36	; 0x24
   2959a:	5c5b      	ldrb	r3, [r3, r1]
   2959c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2959e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   295a0:	683b      	ldr	r3, [r7, #0]
   295a2:	2125      	movs	r1, #37	; 0x25
   295a4:	5c5b      	ldrb	r3, [r3, r1]
   295a6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   295a8:	4313      	orrs	r3, r2
	ctrlb =  
   295aa:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   295ac:	683b      	ldr	r3, [r7, #0]
   295ae:	7a9b      	ldrb	r3, [r3, #10]
   295b0:	001a      	movs	r2, r3
   295b2:	6a3b      	ldr	r3, [r7, #32]
   295b4:	4313      	orrs	r3, r2
   295b6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   295b8:	683b      	ldr	r3, [r7, #0]
   295ba:	7adb      	ldrb	r3, [r3, #11]
   295bc:	001a      	movs	r2, r3
   295be:	6a3b      	ldr	r3, [r7, #32]
   295c0:	4313      	orrs	r3, r2
   295c2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   295c4:	683b      	ldr	r3, [r7, #0]
   295c6:	891b      	ldrh	r3, [r3, #8]
   295c8:	2bff      	cmp	r3, #255	; 0xff
   295ca:	d00b      	beq.n	295e4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   295cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   295ce:	2280      	movs	r2, #128	; 0x80
   295d0:	0452      	lsls	r2, r2, #17
   295d2:	4313      	orrs	r3, r2
   295d4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   295d6:	683b      	ldr	r3, [r7, #0]
   295d8:	891b      	ldrh	r3, [r3, #8]
   295da:	001a      	movs	r2, r3
   295dc:	6a3b      	ldr	r3, [r7, #32]
   295de:	4313      	orrs	r3, r2
   295e0:	623b      	str	r3, [r7, #32]
   295e2:	e008      	b.n	295f6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   295e4:	683b      	ldr	r3, [r7, #0]
   295e6:	7edb      	ldrb	r3, [r3, #27]
   295e8:	2b00      	cmp	r3, #0
   295ea:	d004      	beq.n	295f6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   295ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   295ee:	2280      	movs	r2, #128	; 0x80
   295f0:	04d2      	lsls	r2, r2, #19
   295f2:	4313      	orrs	r3, r2
   295f4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   295f6:	683b      	ldr	r3, [r7, #0]
   295f8:	222c      	movs	r2, #44	; 0x2c
   295fa:	5c9b      	ldrb	r3, [r3, r2]
   295fc:	2b00      	cmp	r3, #0
   295fe:	d103      	bne.n	29608 <_usart_set_config+0x294>
   29600:	4b12      	ldr	r3, [pc, #72]	; (2964c <_usart_set_config+0x2d8>)
   29602:	4798      	blx	r3
   29604:	1e03      	subs	r3, r0, #0
   29606:	d003      	beq.n	29610 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   29608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2960a:	2280      	movs	r2, #128	; 0x80
   2960c:	4313      	orrs	r3, r2
   2960e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   29610:	687b      	ldr	r3, [r7, #4]
   29612:	0018      	movs	r0, r3
   29614:	4b0c      	ldr	r3, [pc, #48]	; (29648 <_usart_set_config+0x2d4>)
   29616:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   29618:	69bb      	ldr	r3, [r7, #24]
   2961a:	6a3a      	ldr	r2, [r7, #32]
   2961c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2961e:	687b      	ldr	r3, [r7, #4]
   29620:	0018      	movs	r0, r3
   29622:	4b09      	ldr	r3, [pc, #36]	; (29648 <_usart_set_config+0x2d4>)
   29624:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   29626:	69bb      	ldr	r3, [r7, #24]
   29628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2962a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   2962c:	2300      	movs	r3, #0
}
   2962e:	0018      	movs	r0, r3
   29630:	46bd      	mov	sp, r7
   29632:	b00a      	add	sp, #40	; 0x28
   29634:	bdb0      	pop	{r4, r5, r7, pc}
   29636:	46c0      	nop			; (mov r8, r8)
   29638:	0002811d 	.word	0x0002811d
   2963c:	0002aad1 	.word	0x0002aad1
   29640:	00027c97 	.word	0x00027c97
   29644:	00027d15 	.word	0x00027d15
   29648:	00029351 	.word	0x00029351
   2964c:	00029311 	.word	0x00029311

00029650 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   29650:	b590      	push	{r4, r7, lr}
   29652:	b093      	sub	sp, #76	; 0x4c
   29654:	af00      	add	r7, sp, #0
   29656:	60f8      	str	r0, [r7, #12]
   29658:	60b9      	str	r1, [r7, #8]
   2965a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2965c:	233b      	movs	r3, #59	; 0x3b
   2965e:	18fb      	adds	r3, r7, r3
   29660:	2200      	movs	r2, #0
   29662:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   29664:	68fb      	ldr	r3, [r7, #12]
   29666:	68ba      	ldr	r2, [r7, #8]
   29668:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2966a:	68fb      	ldr	r3, [r7, #12]
   2966c:	681b      	ldr	r3, [r3, #0]
   2966e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29670:	68fb      	ldr	r3, [r7, #12]
   29672:	681b      	ldr	r3, [r3, #0]
   29674:	0018      	movs	r0, r3
   29676:	4b86      	ldr	r3, [pc, #536]	; (29890 <usart_init+0x240>)
   29678:	4798      	blx	r3
   2967a:	0003      	movs	r3, r0
   2967c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29680:	3302      	adds	r3, #2
   29682:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29686:	3314      	adds	r3, #20
   29688:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2968a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2968c:	681b      	ldr	r3, [r3, #0]
   2968e:	2201      	movs	r2, #1
   29690:	4013      	ands	r3, r2
   29692:	d001      	beq.n	29698 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   29694:	2305      	movs	r3, #5
   29696:	e0f6      	b.n	29886 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   29698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2969a:	681b      	ldr	r3, [r3, #0]
   2969c:	2202      	movs	r2, #2
   2969e:	4013      	ands	r3, r2
   296a0:	d001      	beq.n	296a6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   296a2:	231c      	movs	r3, #28
   296a4:	e0ef      	b.n	29886 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   296a6:	2201      	movs	r2, #1
   296a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   296aa:	409a      	lsls	r2, r3
   296ac:	0013      	movs	r3, r2
   296ae:	0019      	movs	r1, r3
   296b0:	2002      	movs	r0, #2
   296b2:	4b78      	ldr	r3, [pc, #480]	; (29894 <usart_init+0x244>)
   296b4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   296b6:	2324      	movs	r3, #36	; 0x24
   296b8:	18fb      	adds	r3, r7, r3
   296ba:	0018      	movs	r0, r3
   296bc:	4b76      	ldr	r3, [pc, #472]	; (29898 <usart_init+0x248>)
   296be:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   296c0:	687b      	ldr	r3, [r7, #4]
   296c2:	222d      	movs	r2, #45	; 0x2d
   296c4:	5c9a      	ldrb	r2, [r3, r2]
   296c6:	2324      	movs	r3, #36	; 0x24
   296c8:	18fb      	adds	r3, r7, r3
   296ca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   296cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   296ce:	b2db      	uxtb	r3, r3
   296d0:	2224      	movs	r2, #36	; 0x24
   296d2:	18ba      	adds	r2, r7, r2
   296d4:	0011      	movs	r1, r2
   296d6:	0018      	movs	r0, r3
   296d8:	4b70      	ldr	r3, [pc, #448]	; (2989c <usart_init+0x24c>)
   296da:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   296dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   296de:	b2db      	uxtb	r3, r3
   296e0:	0018      	movs	r0, r3
   296e2:	4b6f      	ldr	r3, [pc, #444]	; (298a0 <usart_init+0x250>)
   296e4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   296e6:	687b      	ldr	r3, [r7, #4]
   296e8:	222d      	movs	r2, #45	; 0x2d
   296ea:	5c9b      	ldrb	r3, [r3, r2]
   296ec:	2100      	movs	r1, #0
   296ee:	0018      	movs	r0, r3
   296f0:	4b6c      	ldr	r3, [pc, #432]	; (298a4 <usart_init+0x254>)
   296f2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   296f4:	687b      	ldr	r3, [r7, #4]
   296f6:	7ada      	ldrb	r2, [r3, #11]
   296f8:	68fb      	ldr	r3, [r7, #12]
   296fa:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   296fc:	687b      	ldr	r3, [r7, #4]
   296fe:	2224      	movs	r2, #36	; 0x24
   29700:	5c9a      	ldrb	r2, [r3, r2]
   29702:	68fb      	ldr	r3, [r7, #12]
   29704:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   29706:	687b      	ldr	r3, [r7, #4]
   29708:	2225      	movs	r2, #37	; 0x25
   2970a:	5c9a      	ldrb	r2, [r3, r2]
   2970c:	68fb      	ldr	r3, [r7, #12]
   2970e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   29710:	687b      	ldr	r3, [r7, #4]
   29712:	7eda      	ldrb	r2, [r3, #27]
   29714:	68fb      	ldr	r3, [r7, #12]
   29716:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   29718:	687b      	ldr	r3, [r7, #4]
   2971a:	7f1a      	ldrb	r2, [r3, #28]
   2971c:	68fb      	ldr	r3, [r7, #12]
   2971e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   29720:	233b      	movs	r3, #59	; 0x3b
   29722:	18fc      	adds	r4, r7, r3
   29724:	687a      	ldr	r2, [r7, #4]
   29726:	68fb      	ldr	r3, [r7, #12]
   29728:	0011      	movs	r1, r2
   2972a:	0018      	movs	r0, r3
   2972c:	4b5e      	ldr	r3, [pc, #376]	; (298a8 <usart_init+0x258>)
   2972e:	4798      	blx	r3
   29730:	0003      	movs	r3, r0
   29732:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   29734:	233b      	movs	r3, #59	; 0x3b
   29736:	18fb      	adds	r3, r7, r3
   29738:	781b      	ldrb	r3, [r3, #0]
   2973a:	2b00      	cmp	r3, #0
   2973c:	d003      	beq.n	29746 <usart_init+0xf6>
		return status_code;
   2973e:	233b      	movs	r3, #59	; 0x3b
   29740:	18fb      	adds	r3, r7, r3
   29742:	781b      	ldrb	r3, [r3, #0]
   29744:	e09f      	b.n	29886 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   29746:	2320      	movs	r3, #32
   29748:	18fb      	adds	r3, r7, r3
   2974a:	0018      	movs	r0, r3
   2974c:	4b57      	ldr	r3, [pc, #348]	; (298ac <usart_init+0x25c>)
   2974e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29750:	2320      	movs	r3, #32
   29752:	18fb      	adds	r3, r7, r3
   29754:	2200      	movs	r2, #0
   29756:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   29758:	2320      	movs	r3, #32
   2975a:	18fb      	adds	r3, r7, r3
   2975c:	2200      	movs	r2, #0
   2975e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   29760:	687b      	ldr	r3, [r7, #4]
   29762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   29764:	2310      	movs	r3, #16
   29766:	18fb      	adds	r3, r7, r3
   29768:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2976a:	687b      	ldr	r3, [r7, #4]
   2976c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2976e:	2310      	movs	r3, #16
   29770:	18fb      	adds	r3, r7, r3
   29772:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   29774:	687b      	ldr	r3, [r7, #4]
   29776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   29778:	2310      	movs	r3, #16
   2977a:	18fb      	adds	r3, r7, r3
   2977c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2977e:	687b      	ldr	r3, [r7, #4]
   29780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   29782:	2310      	movs	r3, #16
   29784:	18fb      	adds	r3, r7, r3
   29786:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   29788:	2347      	movs	r3, #71	; 0x47
   2978a:	18fb      	adds	r3, r7, r3
   2978c:	2200      	movs	r2, #0
   2978e:	701a      	strb	r2, [r3, #0]
   29790:	e02c      	b.n	297ec <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   29792:	2347      	movs	r3, #71	; 0x47
   29794:	18fb      	adds	r3, r7, r3
   29796:	781a      	ldrb	r2, [r3, #0]
   29798:	2310      	movs	r3, #16
   2979a:	18fb      	adds	r3, r7, r3
   2979c:	0092      	lsls	r2, r2, #2
   2979e:	58d3      	ldr	r3, [r2, r3]
   297a0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   297a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   297a4:	2b00      	cmp	r3, #0
   297a6:	d109      	bne.n	297bc <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   297a8:	2347      	movs	r3, #71	; 0x47
   297aa:	18fb      	adds	r3, r7, r3
   297ac:	781a      	ldrb	r2, [r3, #0]
   297ae:	68bb      	ldr	r3, [r7, #8]
   297b0:	0011      	movs	r1, r2
   297b2:	0018      	movs	r0, r3
   297b4:	4b3e      	ldr	r3, [pc, #248]	; (298b0 <usart_init+0x260>)
   297b6:	4798      	blx	r3
   297b8:	0003      	movs	r3, r0
   297ba:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   297bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   297be:	3301      	adds	r3, #1
   297c0:	d00d      	beq.n	297de <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   297c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   297c4:	b2da      	uxtb	r2, r3
   297c6:	2320      	movs	r3, #32
   297c8:	18fb      	adds	r3, r7, r3
   297ca:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   297cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   297ce:	0c1b      	lsrs	r3, r3, #16
   297d0:	b2db      	uxtb	r3, r3
   297d2:	2220      	movs	r2, #32
   297d4:	18ba      	adds	r2, r7, r2
   297d6:	0011      	movs	r1, r2
   297d8:	0018      	movs	r0, r3
   297da:	4b36      	ldr	r3, [pc, #216]	; (298b4 <usart_init+0x264>)
   297dc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   297de:	2347      	movs	r3, #71	; 0x47
   297e0:	18fb      	adds	r3, r7, r3
   297e2:	781a      	ldrb	r2, [r3, #0]
   297e4:	2347      	movs	r3, #71	; 0x47
   297e6:	18fb      	adds	r3, r7, r3
   297e8:	3201      	adds	r2, #1
   297ea:	701a      	strb	r2, [r3, #0]
   297ec:	2347      	movs	r3, #71	; 0x47
   297ee:	18fb      	adds	r3, r7, r3
   297f0:	781b      	ldrb	r3, [r3, #0]
   297f2:	2b03      	cmp	r3, #3
   297f4:	d9cd      	bls.n	29792 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   297f6:	2300      	movs	r3, #0
   297f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   297fa:	e00a      	b.n	29812 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   297fc:	68fa      	ldr	r2, [r7, #12]
   297fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29800:	3302      	adds	r3, #2
   29802:	009b      	lsls	r3, r3, #2
   29804:	18d3      	adds	r3, r2, r3
   29806:	3304      	adds	r3, #4
   29808:	2200      	movs	r2, #0
   2980a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2980c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2980e:	3301      	adds	r3, #1
   29810:	63fb      	str	r3, [r7, #60]	; 0x3c
   29812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29814:	2b05      	cmp	r3, #5
   29816:	d9f1      	bls.n	297fc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   29818:	68fb      	ldr	r3, [r7, #12]
   2981a:	2200      	movs	r2, #0
   2981c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   2981e:	68fb      	ldr	r3, [r7, #12]
   29820:	2200      	movs	r2, #0
   29822:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   29824:	68fb      	ldr	r3, [r7, #12]
   29826:	2200      	movs	r2, #0
   29828:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2982a:	68fb      	ldr	r3, [r7, #12]
   2982c:	2200      	movs	r2, #0
   2982e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   29830:	68fb      	ldr	r3, [r7, #12]
   29832:	2230      	movs	r2, #48	; 0x30
   29834:	2100      	movs	r1, #0
   29836:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   29838:	68fb      	ldr	r3, [r7, #12]
   2983a:	2231      	movs	r2, #49	; 0x31
   2983c:	2100      	movs	r1, #0
   2983e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   29840:	68fb      	ldr	r3, [r7, #12]
   29842:	2232      	movs	r2, #50	; 0x32
   29844:	2100      	movs	r1, #0
   29846:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   29848:	68fb      	ldr	r3, [r7, #12]
   2984a:	2233      	movs	r2, #51	; 0x33
   2984c:	2100      	movs	r1, #0
   2984e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   29850:	68fb      	ldr	r3, [r7, #12]
   29852:	681b      	ldr	r3, [r3, #0]
   29854:	2227      	movs	r2, #39	; 0x27
   29856:	18bc      	adds	r4, r7, r2
   29858:	0018      	movs	r0, r3
   2985a:	4b0d      	ldr	r3, [pc, #52]	; (29890 <usart_init+0x240>)
   2985c:	4798      	blx	r3
   2985e:	0003      	movs	r3, r0
   29860:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   29862:	4a15      	ldr	r2, [pc, #84]	; (298b8 <usart_init+0x268>)
   29864:	2327      	movs	r3, #39	; 0x27
   29866:	18fb      	adds	r3, r7, r3
   29868:	781b      	ldrb	r3, [r3, #0]
   2986a:	0011      	movs	r1, r2
   2986c:	0018      	movs	r0, r3
   2986e:	4b13      	ldr	r3, [pc, #76]	; (298bc <usart_init+0x26c>)
   29870:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   29872:	2327      	movs	r3, #39	; 0x27
   29874:	18fb      	adds	r3, r7, r3
   29876:	781a      	ldrb	r2, [r3, #0]
   29878:	4b11      	ldr	r3, [pc, #68]	; (298c0 <usart_init+0x270>)
   2987a:	0092      	lsls	r2, r2, #2
   2987c:	68f9      	ldr	r1, [r7, #12]
   2987e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   29880:	233b      	movs	r3, #59	; 0x3b
   29882:	18fb      	adds	r3, r7, r3
   29884:	781b      	ldrb	r3, [r3, #0]
}
   29886:	0018      	movs	r0, r3
   29888:	46bd      	mov	sp, r7
   2988a:	b013      	add	sp, #76	; 0x4c
   2988c:	bd90      	pop	{r4, r7, pc}
   2988e:	46c0      	nop			; (mov r8, r8)
   29890:	0002811d 	.word	0x0002811d
   29894:	0002928d 	.word	0x0002928d
   29898:	00029275 	.word	0x00029275
   2989c:	0002a9ad 	.word	0x0002a9ad
   298a0:	0002a9f1 	.word	0x0002a9f1
   298a4:	00027ed5 	.word	0x00027ed5
   298a8:	00029375 	.word	0x00029375
   298ac:	000292e9 	.word	0x000292e9
   298b0:	00027f61 	.word	0x00027f61
   298b4:	0002ad0d 	.word	0x0002ad0d
   298b8:	00029b2d 	.word	0x00029b2d
   298bc:	00028181 	.word	0x00028181
   298c0:	20005838 	.word	0x20005838

000298c4 <system_interrupt_enter_critical_section>:
{
   298c4:	b580      	push	{r7, lr}
   298c6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   298c8:	4b02      	ldr	r3, [pc, #8]	; (298d4 <system_interrupt_enter_critical_section+0x10>)
   298ca:	4798      	blx	r3
}
   298cc:	46c0      	nop			; (mov r8, r8)
   298ce:	46bd      	mov	sp, r7
   298d0:	bd80      	pop	{r7, pc}
   298d2:	46c0      	nop			; (mov r8, r8)
   298d4:	00026d19 	.word	0x00026d19

000298d8 <system_interrupt_leave_critical_section>:
{
   298d8:	b580      	push	{r7, lr}
   298da:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   298dc:	4b02      	ldr	r3, [pc, #8]	; (298e8 <system_interrupt_leave_critical_section+0x10>)
   298de:	4798      	blx	r3
}
   298e0:	46c0      	nop			; (mov r8, r8)
   298e2:	46bd      	mov	sp, r7
   298e4:	bd80      	pop	{r7, pc}
   298e6:	46c0      	nop			; (mov r8, r8)
   298e8:	00026d6d 	.word	0x00026d6d

000298ec <usart_is_syncing>:
{
   298ec:	b580      	push	{r7, lr}
   298ee:	b084      	sub	sp, #16
   298f0:	af00      	add	r7, sp, #0
   298f2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   298f4:	687b      	ldr	r3, [r7, #4]
   298f6:	681b      	ldr	r3, [r3, #0]
   298f8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   298fa:	68fb      	ldr	r3, [r7, #12]
   298fc:	69db      	ldr	r3, [r3, #28]
   298fe:	1e5a      	subs	r2, r3, #1
   29900:	4193      	sbcs	r3, r2
   29902:	b2db      	uxtb	r3, r3
}
   29904:	0018      	movs	r0, r3
   29906:	46bd      	mov	sp, r7
   29908:	b004      	add	sp, #16
   2990a:	bd80      	pop	{r7, pc}

0002990c <_usart_wait_for_sync>:
{
   2990c:	b580      	push	{r7, lr}
   2990e:	b082      	sub	sp, #8
   29910:	af00      	add	r7, sp, #0
   29912:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   29914:	46c0      	nop			; (mov r8, r8)
   29916:	687b      	ldr	r3, [r7, #4]
   29918:	0018      	movs	r0, r3
   2991a:	4b04      	ldr	r3, [pc, #16]	; (2992c <_usart_wait_for_sync+0x20>)
   2991c:	4798      	blx	r3
   2991e:	1e03      	subs	r3, r0, #0
   29920:	d1f9      	bne.n	29916 <_usart_wait_for_sync+0xa>
}
   29922:	46c0      	nop			; (mov r8, r8)
   29924:	46bd      	mov	sp, r7
   29926:	b002      	add	sp, #8
   29928:	bd80      	pop	{r7, pc}
   2992a:	46c0      	nop			; (mov r8, r8)
   2992c:	000298ed 	.word	0x000298ed

00029930 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29930:	b580      	push	{r7, lr}
   29932:	b086      	sub	sp, #24
   29934:	af00      	add	r7, sp, #0
   29936:	60f8      	str	r0, [r7, #12]
   29938:	60b9      	str	r1, [r7, #8]
   2993a:	1dbb      	adds	r3, r7, #6
   2993c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2993e:	68fb      	ldr	r3, [r7, #12]
   29940:	681b      	ldr	r3, [r3, #0]
   29942:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29944:	4b0f      	ldr	r3, [pc, #60]	; (29984 <_usart_write_buffer+0x54>)
   29946:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   29948:	68fb      	ldr	r3, [r7, #12]
   2994a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2994c:	b29b      	uxth	r3, r3
   2994e:	2b00      	cmp	r3, #0
   29950:	d003      	beq.n	2995a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29952:	4b0d      	ldr	r3, [pc, #52]	; (29988 <_usart_write_buffer+0x58>)
   29954:	4798      	blx	r3
		return STATUS_BUSY;
   29956:	2305      	movs	r3, #5
   29958:	e010      	b.n	2997c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2995a:	68fb      	ldr	r3, [r7, #12]
   2995c:	1dba      	adds	r2, r7, #6
   2995e:	8812      	ldrh	r2, [r2, #0]
   29960:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   29962:	4b09      	ldr	r3, [pc, #36]	; (29988 <_usart_write_buffer+0x58>)
   29964:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   29966:	68fb      	ldr	r3, [r7, #12]
   29968:	68ba      	ldr	r2, [r7, #8]
   2996a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2996c:	68fb      	ldr	r3, [r7, #12]
   2996e:	2233      	movs	r2, #51	; 0x33
   29970:	2105      	movs	r1, #5
   29972:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   29974:	697b      	ldr	r3, [r7, #20]
   29976:	2201      	movs	r2, #1
   29978:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2997a:	2300      	movs	r3, #0
}
   2997c:	0018      	movs	r0, r3
   2997e:	46bd      	mov	sp, r7
   29980:	b006      	add	sp, #24
   29982:	bd80      	pop	{r7, pc}
   29984:	000298c5 	.word	0x000298c5
   29988:	000298d9 	.word	0x000298d9

0002998c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2998c:	b580      	push	{r7, lr}
   2998e:	b086      	sub	sp, #24
   29990:	af00      	add	r7, sp, #0
   29992:	60f8      	str	r0, [r7, #12]
   29994:	60b9      	str	r1, [r7, #8]
   29996:	1dbb      	adds	r3, r7, #6
   29998:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2999a:	68fb      	ldr	r3, [r7, #12]
   2999c:	681b      	ldr	r3, [r3, #0]
   2999e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   299a0:	4b16      	ldr	r3, [pc, #88]	; (299fc <_usart_read_buffer+0x70>)
   299a2:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   299a4:	68fb      	ldr	r3, [r7, #12]
   299a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   299a8:	b29b      	uxth	r3, r3
   299aa:	2b00      	cmp	r3, #0
   299ac:	d003      	beq.n	299b6 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   299ae:	4b14      	ldr	r3, [pc, #80]	; (29a00 <_usart_read_buffer+0x74>)
   299b0:	4798      	blx	r3
		return STATUS_BUSY;
   299b2:	2305      	movs	r3, #5
   299b4:	e01e      	b.n	299f4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   299b6:	68fb      	ldr	r3, [r7, #12]
   299b8:	1dba      	adds	r2, r7, #6
   299ba:	8812      	ldrh	r2, [r2, #0]
   299bc:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   299be:	4b10      	ldr	r3, [pc, #64]	; (29a00 <_usart_read_buffer+0x74>)
   299c0:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   299c2:	68fb      	ldr	r3, [r7, #12]
   299c4:	68ba      	ldr	r2, [r7, #8]
   299c6:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   299c8:	68fb      	ldr	r3, [r7, #12]
   299ca:	2232      	movs	r2, #50	; 0x32
   299cc:	2105      	movs	r1, #5
   299ce:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   299d0:	697b      	ldr	r3, [r7, #20]
   299d2:	2204      	movs	r2, #4
   299d4:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   299d6:	68fb      	ldr	r3, [r7, #12]
   299d8:	7a1b      	ldrb	r3, [r3, #8]
   299da:	2b00      	cmp	r3, #0
   299dc:	d002      	beq.n	299e4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   299de:	697b      	ldr	r3, [r7, #20]
   299e0:	2220      	movs	r2, #32
   299e2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   299e4:	68fb      	ldr	r3, [r7, #12]
   299e6:	7a5b      	ldrb	r3, [r3, #9]
   299e8:	2b00      	cmp	r3, #0
   299ea:	d002      	beq.n	299f2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   299ec:	697b      	ldr	r3, [r7, #20]
   299ee:	2208      	movs	r2, #8
   299f0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   299f2:	2300      	movs	r3, #0
}
   299f4:	0018      	movs	r0, r3
   299f6:	46bd      	mov	sp, r7
   299f8:	b006      	add	sp, #24
   299fa:	bd80      	pop	{r7, pc}
   299fc:	000298c5 	.word	0x000298c5
   29a00:	000298d9 	.word	0x000298d9

00029a04 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   29a04:	b580      	push	{r7, lr}
   29a06:	b084      	sub	sp, #16
   29a08:	af00      	add	r7, sp, #0
   29a0a:	60f8      	str	r0, [r7, #12]
   29a0c:	60b9      	str	r1, [r7, #8]
   29a0e:	1dfb      	adds	r3, r7, #7
   29a10:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29a12:	1dfb      	adds	r3, r7, #7
   29a14:	781b      	ldrb	r3, [r3, #0]
   29a16:	68fa      	ldr	r2, [r7, #12]
   29a18:	3302      	adds	r3, #2
   29a1a:	009b      	lsls	r3, r3, #2
   29a1c:	18d3      	adds	r3, r2, r3
   29a1e:	3304      	adds	r3, #4
   29a20:	68ba      	ldr	r2, [r7, #8]
   29a22:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   29a24:	68fb      	ldr	r3, [r7, #12]
   29a26:	2230      	movs	r2, #48	; 0x30
   29a28:	5c9b      	ldrb	r3, [r3, r2]
   29a2a:	b25a      	sxtb	r2, r3
   29a2c:	1dfb      	adds	r3, r7, #7
   29a2e:	781b      	ldrb	r3, [r3, #0]
   29a30:	2101      	movs	r1, #1
   29a32:	4099      	lsls	r1, r3
   29a34:	000b      	movs	r3, r1
   29a36:	b25b      	sxtb	r3, r3
   29a38:	4313      	orrs	r3, r2
   29a3a:	b25b      	sxtb	r3, r3
   29a3c:	b2d9      	uxtb	r1, r3
   29a3e:	68fb      	ldr	r3, [r7, #12]
   29a40:	2230      	movs	r2, #48	; 0x30
   29a42:	5499      	strb	r1, [r3, r2]
}
   29a44:	46c0      	nop			; (mov r8, r8)
   29a46:	46bd      	mov	sp, r7
   29a48:	b004      	add	sp, #16
   29a4a:	bd80      	pop	{r7, pc}

00029a4c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29a4c:	b580      	push	{r7, lr}
   29a4e:	b084      	sub	sp, #16
   29a50:	af00      	add	r7, sp, #0
   29a52:	60f8      	str	r0, [r7, #12]
   29a54:	60b9      	str	r1, [r7, #8]
   29a56:	1dbb      	adds	r3, r7, #6
   29a58:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   29a5a:	1dbb      	adds	r3, r7, #6
   29a5c:	881b      	ldrh	r3, [r3, #0]
   29a5e:	2b00      	cmp	r3, #0
   29a60:	d101      	bne.n	29a66 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29a62:	2317      	movs	r3, #23
   29a64:	e010      	b.n	29a88 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   29a66:	68fb      	ldr	r3, [r7, #12]
   29a68:	79db      	ldrb	r3, [r3, #7]
   29a6a:	2201      	movs	r2, #1
   29a6c:	4053      	eors	r3, r2
   29a6e:	b2db      	uxtb	r3, r3
   29a70:	2b00      	cmp	r3, #0
   29a72:	d001      	beq.n	29a78 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29a74:	231c      	movs	r3, #28
   29a76:	e007      	b.n	29a88 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   29a78:	1dbb      	adds	r3, r7, #6
   29a7a:	881a      	ldrh	r2, [r3, #0]
   29a7c:	68b9      	ldr	r1, [r7, #8]
   29a7e:	68fb      	ldr	r3, [r7, #12]
   29a80:	0018      	movs	r0, r3
   29a82:	4b03      	ldr	r3, [pc, #12]	; (29a90 <usart_write_buffer_job+0x44>)
   29a84:	4798      	blx	r3
   29a86:	0003      	movs	r3, r0
}
   29a88:	0018      	movs	r0, r3
   29a8a:	46bd      	mov	sp, r7
   29a8c:	b004      	add	sp, #16
   29a8e:	bd80      	pop	{r7, pc}
   29a90:	00029931 	.word	0x00029931

00029a94 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29a94:	b580      	push	{r7, lr}
   29a96:	b084      	sub	sp, #16
   29a98:	af00      	add	r7, sp, #0
   29a9a:	60f8      	str	r0, [r7, #12]
   29a9c:	60b9      	str	r1, [r7, #8]
   29a9e:	1dbb      	adds	r3, r7, #6
   29aa0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   29aa2:	1dbb      	adds	r3, r7, #6
   29aa4:	881b      	ldrh	r3, [r3, #0]
   29aa6:	2b00      	cmp	r3, #0
   29aa8:	d101      	bne.n	29aae <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29aaa:	2317      	movs	r3, #23
   29aac:	e010      	b.n	29ad0 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   29aae:	68fb      	ldr	r3, [r7, #12]
   29ab0:	799b      	ldrb	r3, [r3, #6]
   29ab2:	2201      	movs	r2, #1
   29ab4:	4053      	eors	r3, r2
   29ab6:	b2db      	uxtb	r3, r3
   29ab8:	2b00      	cmp	r3, #0
   29aba:	d001      	beq.n	29ac0 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29abc:	231c      	movs	r3, #28
   29abe:	e007      	b.n	29ad0 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   29ac0:	1dbb      	adds	r3, r7, #6
   29ac2:	881a      	ldrh	r2, [r3, #0]
   29ac4:	68b9      	ldr	r1, [r7, #8]
   29ac6:	68fb      	ldr	r3, [r7, #12]
   29ac8:	0018      	movs	r0, r3
   29aca:	4b03      	ldr	r3, [pc, #12]	; (29ad8 <usart_read_buffer_job+0x44>)
   29acc:	4798      	blx	r3
   29ace:	0003      	movs	r3, r0
}
   29ad0:	0018      	movs	r0, r3
   29ad2:	46bd      	mov	sp, r7
   29ad4:	b004      	add	sp, #16
   29ad6:	bd80      	pop	{r7, pc}
   29ad8:	0002998d 	.word	0x0002998d

00029adc <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   29adc:	b580      	push	{r7, lr}
   29ade:	b084      	sub	sp, #16
   29ae0:	af00      	add	r7, sp, #0
   29ae2:	6078      	str	r0, [r7, #4]
   29ae4:	000a      	movs	r2, r1
   29ae6:	1cfb      	adds	r3, r7, #3
   29ae8:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   29aea:	1cfb      	adds	r3, r7, #3
   29aec:	781b      	ldrb	r3, [r3, #0]
   29aee:	2b00      	cmp	r3, #0
   29af0:	d002      	beq.n	29af8 <usart_get_job_status+0x1c>
   29af2:	2b01      	cmp	r3, #1
   29af4:	d007      	beq.n	29b06 <usart_get_job_status+0x2a>
   29af6:	e00d      	b.n	29b14 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   29af8:	230f      	movs	r3, #15
   29afa:	18fb      	adds	r3, r7, r3
   29afc:	687a      	ldr	r2, [r7, #4]
   29afe:	2132      	movs	r1, #50	; 0x32
   29b00:	5c52      	ldrb	r2, [r2, r1]
   29b02:	701a      	strb	r2, [r3, #0]
			break;
   29b04:	e00b      	b.n	29b1e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   29b06:	230f      	movs	r3, #15
   29b08:	18fb      	adds	r3, r7, r3
   29b0a:	687a      	ldr	r2, [r7, #4]
   29b0c:	2133      	movs	r1, #51	; 0x33
   29b0e:	5c52      	ldrb	r2, [r2, r1]
   29b10:	701a      	strb	r2, [r3, #0]
			break;
   29b12:	e004      	b.n	29b1e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   29b14:	230f      	movs	r3, #15
   29b16:	18fb      	adds	r3, r7, r3
   29b18:	2217      	movs	r2, #23
   29b1a:	701a      	strb	r2, [r3, #0]
			break;
   29b1c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   29b1e:	230f      	movs	r3, #15
   29b20:	18fb      	adds	r3, r7, r3
   29b22:	781b      	ldrb	r3, [r3, #0]
}
   29b24:	0018      	movs	r0, r3
   29b26:	46bd      	mov	sp, r7
   29b28:	b004      	add	sp, #16
   29b2a:	bd80      	pop	{r7, pc}

00029b2c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   29b2c:	b580      	push	{r7, lr}
   29b2e:	b088      	sub	sp, #32
   29b30:	af00      	add	r7, sp, #0
   29b32:	0002      	movs	r2, r0
   29b34:	1dfb      	adds	r3, r7, #7
   29b36:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   29b38:	1dfb      	adds	r3, r7, #7
   29b3a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   29b3c:	4ba3      	ldr	r3, [pc, #652]	; (29dcc <_usart_interrupt_handler+0x2a0>)
   29b3e:	0092      	lsls	r2, r2, #2
   29b40:	58d3      	ldr	r3, [r2, r3]
   29b42:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   29b44:	69bb      	ldr	r3, [r7, #24]
   29b46:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   29b48:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   29b4a:	69bb      	ldr	r3, [r7, #24]
   29b4c:	0018      	movs	r0, r3
   29b4e:	4ba0      	ldr	r3, [pc, #640]	; (29dd0 <_usart_interrupt_handler+0x2a4>)
   29b50:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   29b52:	697b      	ldr	r3, [r7, #20]
   29b54:	7e1b      	ldrb	r3, [r3, #24]
   29b56:	b2da      	uxtb	r2, r3
   29b58:	2312      	movs	r3, #18
   29b5a:	18fb      	adds	r3, r7, r3
   29b5c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   29b5e:	697b      	ldr	r3, [r7, #20]
   29b60:	7d9b      	ldrb	r3, [r3, #22]
   29b62:	b2db      	uxtb	r3, r3
   29b64:	b29a      	uxth	r2, r3
   29b66:	2312      	movs	r3, #18
   29b68:	18fb      	adds	r3, r7, r3
   29b6a:	2112      	movs	r1, #18
   29b6c:	1879      	adds	r1, r7, r1
   29b6e:	8809      	ldrh	r1, [r1, #0]
   29b70:	400a      	ands	r2, r1
   29b72:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   29b74:	69bb      	ldr	r3, [r7, #24]
   29b76:	2230      	movs	r2, #48	; 0x30
   29b78:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   29b7a:	69ba      	ldr	r2, [r7, #24]
   29b7c:	2131      	movs	r1, #49	; 0x31
   29b7e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   29b80:	4013      	ands	r3, r2
   29b82:	b2da      	uxtb	r2, r3
   29b84:	2310      	movs	r3, #16
   29b86:	18fb      	adds	r3, r7, r3
   29b88:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   29b8a:	2312      	movs	r3, #18
   29b8c:	18fb      	adds	r3, r7, r3
   29b8e:	881b      	ldrh	r3, [r3, #0]
   29b90:	2201      	movs	r2, #1
   29b92:	4013      	ands	r3, r2
   29b94:	d044      	beq.n	29c20 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   29b96:	69bb      	ldr	r3, [r7, #24]
   29b98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29b9a:	b29b      	uxth	r3, r3
   29b9c:	2b00      	cmp	r3, #0
   29b9e:	d03c      	beq.n	29c1a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   29ba0:	69bb      	ldr	r3, [r7, #24]
   29ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29ba4:	781b      	ldrb	r3, [r3, #0]
   29ba6:	b2da      	uxtb	r2, r3
   29ba8:	231c      	movs	r3, #28
   29baa:	18fb      	adds	r3, r7, r3
   29bac:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   29bae:	69bb      	ldr	r3, [r7, #24]
   29bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29bb2:	1c5a      	adds	r2, r3, #1
   29bb4:	69bb      	ldr	r3, [r7, #24]
   29bb6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29bb8:	69bb      	ldr	r3, [r7, #24]
   29bba:	795b      	ldrb	r3, [r3, #5]
   29bbc:	2b01      	cmp	r3, #1
   29bbe:	d113      	bne.n	29be8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   29bc0:	69bb      	ldr	r3, [r7, #24]
   29bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29bc4:	781b      	ldrb	r3, [r3, #0]
   29bc6:	b2db      	uxtb	r3, r3
   29bc8:	021b      	lsls	r3, r3, #8
   29bca:	b21a      	sxth	r2, r3
   29bcc:	231c      	movs	r3, #28
   29bce:	18fb      	adds	r3, r7, r3
   29bd0:	2100      	movs	r1, #0
   29bd2:	5e5b      	ldrsh	r3, [r3, r1]
   29bd4:	4313      	orrs	r3, r2
   29bd6:	b21a      	sxth	r2, r3
   29bd8:	231c      	movs	r3, #28
   29bda:	18fb      	adds	r3, r7, r3
   29bdc:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   29bde:	69bb      	ldr	r3, [r7, #24]
   29be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29be2:	1c5a      	adds	r2, r3, #1
   29be4:	69bb      	ldr	r3, [r7, #24]
   29be6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   29be8:	231c      	movs	r3, #28
   29bea:	18fb      	adds	r3, r7, r3
   29bec:	881b      	ldrh	r3, [r3, #0]
   29bee:	05db      	lsls	r3, r3, #23
   29bf0:	0ddb      	lsrs	r3, r3, #23
   29bf2:	b29a      	uxth	r2, r3
   29bf4:	697b      	ldr	r3, [r7, #20]
   29bf6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   29bf8:	69bb      	ldr	r3, [r7, #24]
   29bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29bfc:	b29b      	uxth	r3, r3
   29bfe:	3b01      	subs	r3, #1
   29c00:	b29b      	uxth	r3, r3
   29c02:	69ba      	ldr	r2, [r7, #24]
   29c04:	1c19      	adds	r1, r3, #0
   29c06:	85d1      	strh	r1, [r2, #46]	; 0x2e
   29c08:	2b00      	cmp	r3, #0
   29c0a:	d109      	bne.n	29c20 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29c0c:	697b      	ldr	r3, [r7, #20]
   29c0e:	2201      	movs	r2, #1
   29c10:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   29c12:	697b      	ldr	r3, [r7, #20]
   29c14:	2202      	movs	r2, #2
   29c16:	759a      	strb	r2, [r3, #22]
   29c18:	e002      	b.n	29c20 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29c1a:	697b      	ldr	r3, [r7, #20]
   29c1c:	2201      	movs	r2, #1
   29c1e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   29c20:	2312      	movs	r3, #18
   29c22:	18fb      	adds	r3, r7, r3
   29c24:	881b      	ldrh	r3, [r3, #0]
   29c26:	2202      	movs	r2, #2
   29c28:	4013      	ands	r3, r2
   29c2a:	d011      	beq.n	29c50 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   29c2c:	697b      	ldr	r3, [r7, #20]
   29c2e:	2202      	movs	r2, #2
   29c30:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   29c32:	69bb      	ldr	r3, [r7, #24]
   29c34:	2233      	movs	r2, #51	; 0x33
   29c36:	2100      	movs	r1, #0
   29c38:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   29c3a:	2310      	movs	r3, #16
   29c3c:	18fb      	adds	r3, r7, r3
   29c3e:	881b      	ldrh	r3, [r3, #0]
   29c40:	2201      	movs	r2, #1
   29c42:	4013      	ands	r3, r2
   29c44:	d004      	beq.n	29c50 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   29c46:	69bb      	ldr	r3, [r7, #24]
   29c48:	68db      	ldr	r3, [r3, #12]
   29c4a:	69ba      	ldr	r2, [r7, #24]
   29c4c:	0010      	movs	r0, r2
   29c4e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   29c50:	2312      	movs	r3, #18
   29c52:	18fb      	adds	r3, r7, r3
   29c54:	881b      	ldrh	r3, [r3, #0]
   29c56:	2204      	movs	r2, #4
   29c58:	4013      	ands	r3, r2
   29c5a:	d100      	bne.n	29c5e <_usart_interrupt_handler+0x132>
   29c5c:	e0bd      	b.n	29dda <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   29c5e:	69bb      	ldr	r3, [r7, #24]
   29c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29c62:	b29b      	uxth	r3, r3
   29c64:	2b00      	cmp	r3, #0
   29c66:	d100      	bne.n	29c6a <_usart_interrupt_handler+0x13e>
   29c68:	e0b4      	b.n	29dd4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   29c6a:	697b      	ldr	r3, [r7, #20]
   29c6c:	8b5b      	ldrh	r3, [r3, #26]
   29c6e:	b29b      	uxth	r3, r3
   29c70:	b2da      	uxtb	r2, r3
   29c72:	231f      	movs	r3, #31
   29c74:	18fb      	adds	r3, r7, r3
   29c76:	213f      	movs	r1, #63	; 0x3f
   29c78:	400a      	ands	r2, r1
   29c7a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   29c7c:	231f      	movs	r3, #31
   29c7e:	18fb      	adds	r3, r7, r3
   29c80:	781b      	ldrb	r3, [r3, #0]
   29c82:	2208      	movs	r2, #8
   29c84:	4013      	ands	r3, r2
   29c86:	d007      	beq.n	29c98 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   29c88:	231f      	movs	r3, #31
   29c8a:	18fb      	adds	r3, r7, r3
   29c8c:	221f      	movs	r2, #31
   29c8e:	18ba      	adds	r2, r7, r2
   29c90:	7812      	ldrb	r2, [r2, #0]
   29c92:	2108      	movs	r1, #8
   29c94:	438a      	bics	r2, r1
   29c96:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   29c98:	231f      	movs	r3, #31
   29c9a:	18fb      	adds	r3, r7, r3
   29c9c:	781b      	ldrb	r3, [r3, #0]
   29c9e:	2b00      	cmp	r3, #0
   29ca0:	d050      	beq.n	29d44 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   29ca2:	231f      	movs	r3, #31
   29ca4:	18fb      	adds	r3, r7, r3
   29ca6:	781b      	ldrb	r3, [r3, #0]
   29ca8:	2202      	movs	r2, #2
   29caa:	4013      	ands	r3, r2
   29cac:	d007      	beq.n	29cbe <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   29cae:	69bb      	ldr	r3, [r7, #24]
   29cb0:	2232      	movs	r2, #50	; 0x32
   29cb2:	211a      	movs	r1, #26
   29cb4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   29cb6:	697b      	ldr	r3, [r7, #20]
   29cb8:	2202      	movs	r2, #2
   29cba:	835a      	strh	r2, [r3, #26]
   29cbc:	e036      	b.n	29d2c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   29cbe:	231f      	movs	r3, #31
   29cc0:	18fb      	adds	r3, r7, r3
   29cc2:	781b      	ldrb	r3, [r3, #0]
   29cc4:	2204      	movs	r2, #4
   29cc6:	4013      	ands	r3, r2
   29cc8:	d007      	beq.n	29cda <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   29cca:	69bb      	ldr	r3, [r7, #24]
   29ccc:	2232      	movs	r2, #50	; 0x32
   29cce:	211e      	movs	r1, #30
   29cd0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29cd2:	697b      	ldr	r3, [r7, #20]
   29cd4:	2204      	movs	r2, #4
   29cd6:	835a      	strh	r2, [r3, #26]
   29cd8:	e028      	b.n	29d2c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   29cda:	231f      	movs	r3, #31
   29cdc:	18fb      	adds	r3, r7, r3
   29cde:	781b      	ldrb	r3, [r3, #0]
   29ce0:	2201      	movs	r2, #1
   29ce2:	4013      	ands	r3, r2
   29ce4:	d007      	beq.n	29cf6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   29ce6:	69bb      	ldr	r3, [r7, #24]
   29ce8:	2232      	movs	r2, #50	; 0x32
   29cea:	2113      	movs	r1, #19
   29cec:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   29cee:	697b      	ldr	r3, [r7, #20]
   29cf0:	2201      	movs	r2, #1
   29cf2:	835a      	strh	r2, [r3, #26]
   29cf4:	e01a      	b.n	29d2c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   29cf6:	231f      	movs	r3, #31
   29cf8:	18fb      	adds	r3, r7, r3
   29cfa:	781b      	ldrb	r3, [r3, #0]
   29cfc:	2210      	movs	r2, #16
   29cfe:	4013      	ands	r3, r2
   29d00:	d007      	beq.n	29d12 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   29d02:	69bb      	ldr	r3, [r7, #24]
   29d04:	2232      	movs	r2, #50	; 0x32
   29d06:	2142      	movs	r1, #66	; 0x42
   29d08:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   29d0a:	697b      	ldr	r3, [r7, #20]
   29d0c:	2210      	movs	r2, #16
   29d0e:	835a      	strh	r2, [r3, #26]
   29d10:	e00c      	b.n	29d2c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   29d12:	231f      	movs	r3, #31
   29d14:	18fb      	adds	r3, r7, r3
   29d16:	781b      	ldrb	r3, [r3, #0]
   29d18:	2220      	movs	r2, #32
   29d1a:	4013      	ands	r3, r2
   29d1c:	d006      	beq.n	29d2c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   29d1e:	69bb      	ldr	r3, [r7, #24]
   29d20:	2232      	movs	r2, #50	; 0x32
   29d22:	2141      	movs	r1, #65	; 0x41
   29d24:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   29d26:	697b      	ldr	r3, [r7, #20]
   29d28:	2220      	movs	r2, #32
   29d2a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   29d2c:	2310      	movs	r3, #16
   29d2e:	18fb      	adds	r3, r7, r3
   29d30:	881b      	ldrh	r3, [r3, #0]
   29d32:	2204      	movs	r2, #4
   29d34:	4013      	ands	r3, r2
				if (callback_status
   29d36:	d050      	beq.n	29dda <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   29d38:	69bb      	ldr	r3, [r7, #24]
   29d3a:	695b      	ldr	r3, [r3, #20]
   29d3c:	69ba      	ldr	r2, [r7, #24]
   29d3e:	0010      	movs	r0, r2
   29d40:	4798      	blx	r3
   29d42:	e04a      	b.n	29dda <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   29d44:	697b      	ldr	r3, [r7, #20]
   29d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   29d48:	b29a      	uxth	r2, r3
   29d4a:	230e      	movs	r3, #14
   29d4c:	18fb      	adds	r3, r7, r3
   29d4e:	05d2      	lsls	r2, r2, #23
   29d50:	0dd2      	lsrs	r2, r2, #23
   29d52:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   29d54:	69bb      	ldr	r3, [r7, #24]
   29d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29d58:	220e      	movs	r2, #14
   29d5a:	18ba      	adds	r2, r7, r2
   29d5c:	8812      	ldrh	r2, [r2, #0]
   29d5e:	b2d2      	uxtb	r2, r2
   29d60:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   29d62:	69bb      	ldr	r3, [r7, #24]
   29d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29d66:	1c5a      	adds	r2, r3, #1
   29d68:	69bb      	ldr	r3, [r7, #24]
   29d6a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29d6c:	69bb      	ldr	r3, [r7, #24]
   29d6e:	795b      	ldrb	r3, [r3, #5]
   29d70:	2b01      	cmp	r3, #1
   29d72:	d10d      	bne.n	29d90 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   29d74:	69bb      	ldr	r3, [r7, #24]
   29d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29d78:	220e      	movs	r2, #14
   29d7a:	18ba      	adds	r2, r7, r2
   29d7c:	8812      	ldrh	r2, [r2, #0]
   29d7e:	0a12      	lsrs	r2, r2, #8
   29d80:	b292      	uxth	r2, r2
   29d82:	b2d2      	uxtb	r2, r2
   29d84:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   29d86:	69bb      	ldr	r3, [r7, #24]
   29d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29d8a:	1c5a      	adds	r2, r3, #1
   29d8c:	69bb      	ldr	r3, [r7, #24]
   29d8e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   29d90:	69bb      	ldr	r3, [r7, #24]
   29d92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29d94:	b29b      	uxth	r3, r3
   29d96:	3b01      	subs	r3, #1
   29d98:	b29b      	uxth	r3, r3
   29d9a:	69ba      	ldr	r2, [r7, #24]
   29d9c:	1c19      	adds	r1, r3, #0
   29d9e:	8591      	strh	r1, [r2, #44]	; 0x2c
   29da0:	2b00      	cmp	r3, #0
   29da2:	d11a      	bne.n	29dda <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29da4:	697b      	ldr	r3, [r7, #20]
   29da6:	2204      	movs	r2, #4
   29da8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   29daa:	69bb      	ldr	r3, [r7, #24]
   29dac:	2232      	movs	r2, #50	; 0x32
   29dae:	2100      	movs	r1, #0
   29db0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   29db2:	2310      	movs	r3, #16
   29db4:	18fb      	adds	r3, r7, r3
   29db6:	881b      	ldrh	r3, [r3, #0]
   29db8:	2202      	movs	r2, #2
   29dba:	4013      	ands	r3, r2
					if (callback_status
   29dbc:	d00d      	beq.n	29dda <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   29dbe:	69bb      	ldr	r3, [r7, #24]
   29dc0:	691b      	ldr	r3, [r3, #16]
   29dc2:	69ba      	ldr	r2, [r7, #24]
   29dc4:	0010      	movs	r0, r2
   29dc6:	4798      	blx	r3
   29dc8:	e007      	b.n	29dda <_usart_interrupt_handler+0x2ae>
   29dca:	46c0      	nop			; (mov r8, r8)
   29dcc:	20005838 	.word	0x20005838
   29dd0:	0002990d 	.word	0x0002990d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29dd4:	697b      	ldr	r3, [r7, #20]
   29dd6:	2204      	movs	r2, #4
   29dd8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   29dda:	2312      	movs	r3, #18
   29ddc:	18fb      	adds	r3, r7, r3
   29dde:	881b      	ldrh	r3, [r3, #0]
   29de0:	2210      	movs	r2, #16
   29de2:	4013      	ands	r3, r2
   29de4:	d010      	beq.n	29e08 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   29de6:	697b      	ldr	r3, [r7, #20]
   29de8:	2210      	movs	r2, #16
   29dea:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   29dec:	697b      	ldr	r3, [r7, #20]
   29dee:	2210      	movs	r2, #16
   29df0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   29df2:	2310      	movs	r3, #16
   29df4:	18fb      	adds	r3, r7, r3
   29df6:	881b      	ldrh	r3, [r3, #0]
   29df8:	2210      	movs	r2, #16
   29dfa:	4013      	ands	r3, r2
   29dfc:	d004      	beq.n	29e08 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   29dfe:	69bb      	ldr	r3, [r7, #24]
   29e00:	69db      	ldr	r3, [r3, #28]
   29e02:	69ba      	ldr	r2, [r7, #24]
   29e04:	0010      	movs	r0, r2
   29e06:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   29e08:	2312      	movs	r3, #18
   29e0a:	18fb      	adds	r3, r7, r3
   29e0c:	881b      	ldrh	r3, [r3, #0]
   29e0e:	2220      	movs	r2, #32
   29e10:	4013      	ands	r3, r2
   29e12:	d010      	beq.n	29e36 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   29e14:	697b      	ldr	r3, [r7, #20]
   29e16:	2220      	movs	r2, #32
   29e18:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   29e1a:	697b      	ldr	r3, [r7, #20]
   29e1c:	2220      	movs	r2, #32
   29e1e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   29e20:	2310      	movs	r3, #16
   29e22:	18fb      	adds	r3, r7, r3
   29e24:	881b      	ldrh	r3, [r3, #0]
   29e26:	2208      	movs	r2, #8
   29e28:	4013      	ands	r3, r2
   29e2a:	d004      	beq.n	29e36 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   29e2c:	69bb      	ldr	r3, [r7, #24]
   29e2e:	699b      	ldr	r3, [r3, #24]
   29e30:	69ba      	ldr	r2, [r7, #24]
   29e32:	0010      	movs	r0, r2
   29e34:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   29e36:	2312      	movs	r3, #18
   29e38:	18fb      	adds	r3, r7, r3
   29e3a:	881b      	ldrh	r3, [r3, #0]
   29e3c:	2208      	movs	r2, #8
   29e3e:	4013      	ands	r3, r2
   29e40:	d010      	beq.n	29e64 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   29e42:	697b      	ldr	r3, [r7, #20]
   29e44:	2208      	movs	r2, #8
   29e46:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   29e48:	697b      	ldr	r3, [r7, #20]
   29e4a:	2208      	movs	r2, #8
   29e4c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   29e4e:	2310      	movs	r3, #16
   29e50:	18fb      	adds	r3, r7, r3
   29e52:	881b      	ldrh	r3, [r3, #0]
   29e54:	2220      	movs	r2, #32
   29e56:	4013      	ands	r3, r2
   29e58:	d004      	beq.n	29e64 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   29e5a:	69bb      	ldr	r3, [r7, #24]
   29e5c:	6a1b      	ldr	r3, [r3, #32]
   29e5e:	69ba      	ldr	r2, [r7, #24]
   29e60:	0010      	movs	r0, r2
   29e62:	4798      	blx	r3
		}
	}
#endif
}
   29e64:	46c0      	nop			; (mov r8, r8)
   29e66:	46bd      	mov	sp, r7
   29e68:	b008      	add	sp, #32
   29e6a:	bd80      	pop	{r7, pc}

00029e6c <system_gclk_gen_get_config_defaults>:
{
   29e6c:	b580      	push	{r7, lr}
   29e6e:	b082      	sub	sp, #8
   29e70:	af00      	add	r7, sp, #0
   29e72:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   29e74:	687b      	ldr	r3, [r7, #4]
   29e76:	2201      	movs	r2, #1
   29e78:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   29e7a:	687b      	ldr	r3, [r7, #4]
   29e7c:	2200      	movs	r2, #0
   29e7e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   29e80:	687b      	ldr	r3, [r7, #4]
   29e82:	2206      	movs	r2, #6
   29e84:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   29e86:	687b      	ldr	r3, [r7, #4]
   29e88:	2200      	movs	r2, #0
   29e8a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   29e8c:	687b      	ldr	r3, [r7, #4]
   29e8e:	2200      	movs	r2, #0
   29e90:	725a      	strb	r2, [r3, #9]
}
   29e92:	46c0      	nop			; (mov r8, r8)
   29e94:	46bd      	mov	sp, r7
   29e96:	b002      	add	sp, #8
   29e98:	bd80      	pop	{r7, pc}

00029e9a <system_gclk_chan_get_config_defaults>:
{
   29e9a:	b580      	push	{r7, lr}
   29e9c:	b082      	sub	sp, #8
   29e9e:	af00      	add	r7, sp, #0
   29ea0:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29ea2:	687b      	ldr	r3, [r7, #4]
   29ea4:	2200      	movs	r2, #0
   29ea6:	701a      	strb	r2, [r3, #0]
}
   29ea8:	46c0      	nop			; (mov r8, r8)
   29eaa:	46bd      	mov	sp, r7
   29eac:	b002      	add	sp, #8
   29eae:	bd80      	pop	{r7, pc}

00029eb0 <system_clock_source_osc8m_get_config_defaults>:
{
   29eb0:	b580      	push	{r7, lr}
   29eb2:	b082      	sub	sp, #8
   29eb4:	af00      	add	r7, sp, #0
   29eb6:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   29eb8:	687b      	ldr	r3, [r7, #4]
   29eba:	2203      	movs	r2, #3
   29ebc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   29ebe:	687b      	ldr	r3, [r7, #4]
   29ec0:	2200      	movs	r2, #0
   29ec2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   29ec4:	687b      	ldr	r3, [r7, #4]
   29ec6:	2201      	movs	r2, #1
   29ec8:	709a      	strb	r2, [r3, #2]
}
   29eca:	46c0      	nop			; (mov r8, r8)
   29ecc:	46bd      	mov	sp, r7
   29ece:	b002      	add	sp, #8
   29ed0:	bd80      	pop	{r7, pc}
	...

00029ed4 <system_cpu_clock_set_divider>:
{
   29ed4:	b580      	push	{r7, lr}
   29ed6:	b082      	sub	sp, #8
   29ed8:	af00      	add	r7, sp, #0
   29eda:	0002      	movs	r2, r0
   29edc:	1dfb      	adds	r3, r7, #7
   29ede:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   29ee0:	4a03      	ldr	r2, [pc, #12]	; (29ef0 <system_cpu_clock_set_divider+0x1c>)
   29ee2:	1dfb      	adds	r3, r7, #7
   29ee4:	781b      	ldrb	r3, [r3, #0]
   29ee6:	7213      	strb	r3, [r2, #8]
}
   29ee8:	46c0      	nop			; (mov r8, r8)
   29eea:	46bd      	mov	sp, r7
   29eec:	b002      	add	sp, #8
   29eee:	bd80      	pop	{r7, pc}
   29ef0:	40000400 	.word	0x40000400

00029ef4 <system_apb_clock_set_divider>:
{
   29ef4:	b580      	push	{r7, lr}
   29ef6:	b082      	sub	sp, #8
   29ef8:	af00      	add	r7, sp, #0
   29efa:	0002      	movs	r2, r0
   29efc:	1dfb      	adds	r3, r7, #7
   29efe:	701a      	strb	r2, [r3, #0]
   29f00:	1dbb      	adds	r3, r7, #6
   29f02:	1c0a      	adds	r2, r1, #0
   29f04:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29f06:	1dfb      	adds	r3, r7, #7
   29f08:	781b      	ldrb	r3, [r3, #0]
   29f0a:	2b01      	cmp	r3, #1
   29f0c:	d008      	beq.n	29f20 <system_apb_clock_set_divider+0x2c>
   29f0e:	2b02      	cmp	r3, #2
   29f10:	d00b      	beq.n	29f2a <system_apb_clock_set_divider+0x36>
   29f12:	2b00      	cmp	r3, #0
   29f14:	d10e      	bne.n	29f34 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   29f16:	4a0b      	ldr	r2, [pc, #44]	; (29f44 <system_apb_clock_set_divider+0x50>)
   29f18:	1dbb      	adds	r3, r7, #6
   29f1a:	781b      	ldrb	r3, [r3, #0]
   29f1c:	7253      	strb	r3, [r2, #9]
			break;
   29f1e:	e00b      	b.n	29f38 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   29f20:	4a08      	ldr	r2, [pc, #32]	; (29f44 <system_apb_clock_set_divider+0x50>)
   29f22:	1dbb      	adds	r3, r7, #6
   29f24:	781b      	ldrb	r3, [r3, #0]
   29f26:	7293      	strb	r3, [r2, #10]
			break;
   29f28:	e006      	b.n	29f38 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   29f2a:	4a06      	ldr	r2, [pc, #24]	; (29f44 <system_apb_clock_set_divider+0x50>)
   29f2c:	1dbb      	adds	r3, r7, #6
   29f2e:	781b      	ldrb	r3, [r3, #0]
   29f30:	72d3      	strb	r3, [r2, #11]
			break;
   29f32:	e001      	b.n	29f38 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   29f34:	2317      	movs	r3, #23
   29f36:	e000      	b.n	29f3a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   29f38:	2300      	movs	r3, #0
}
   29f3a:	0018      	movs	r0, r3
   29f3c:	46bd      	mov	sp, r7
   29f3e:	b002      	add	sp, #8
   29f40:	bd80      	pop	{r7, pc}
   29f42:	46c0      	nop			; (mov r8, r8)
   29f44:	40000400 	.word	0x40000400

00029f48 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   29f48:	b580      	push	{r7, lr}
   29f4a:	b082      	sub	sp, #8
   29f4c:	af00      	add	r7, sp, #0
   29f4e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   29f50:	687b      	ldr	r3, [r7, #4]
   29f52:	2201      	movs	r2, #1
   29f54:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   29f56:	687b      	ldr	r3, [r7, #4]
   29f58:	2200      	movs	r2, #0
   29f5a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   29f5c:	687b      	ldr	r3, [r7, #4]
   29f5e:	2200      	movs	r2, #0
   29f60:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   29f62:	687b      	ldr	r3, [r7, #4]
   29f64:	2200      	movs	r2, #0
   29f66:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   29f68:	687b      	ldr	r3, [r7, #4]
   29f6a:	2200      	movs	r2, #0
   29f6c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   29f6e:	687b      	ldr	r3, [r7, #4]
   29f70:	4a0a      	ldr	r2, [pc, #40]	; (29f9c <system_clock_source_dpll_get_config_defaults+0x54>)
   29f72:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   29f74:	687b      	ldr	r3, [r7, #4]
   29f76:	2280      	movs	r2, #128	; 0x80
   29f78:	0212      	lsls	r2, r2, #8
   29f7a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   29f7c:	687b      	ldr	r3, [r7, #4]
   29f7e:	2201      	movs	r2, #1
   29f80:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   29f82:	687b      	ldr	r3, [r7, #4]
   29f84:	2200      	movs	r2, #0
   29f86:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   29f88:	687b      	ldr	r3, [r7, #4]
   29f8a:	2200      	movs	r2, #0
   29f8c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   29f8e:	687b      	ldr	r3, [r7, #4]
   29f90:	2200      	movs	r2, #0
   29f92:	749a      	strb	r2, [r3, #18]
};
   29f94:	46c0      	nop			; (mov r8, r8)
   29f96:	46bd      	mov	sp, r7
   29f98:	b002      	add	sp, #8
   29f9a:	bd80      	pop	{r7, pc}
   29f9c:	02dc6c00 	.word	0x02dc6c00

00029fa0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   29fa0:	b580      	push	{r7, lr}
   29fa2:	b082      	sub	sp, #8
   29fa4:	af00      	add	r7, sp, #0
   29fa6:	0002      	movs	r2, r0
   29fa8:	1dfb      	adds	r3, r7, #7
   29faa:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   29fac:	4a08      	ldr	r2, [pc, #32]	; (29fd0 <system_flash_set_waitstates+0x30>)
   29fae:	1dfb      	adds	r3, r7, #7
   29fb0:	781b      	ldrb	r3, [r3, #0]
   29fb2:	210f      	movs	r1, #15
   29fb4:	400b      	ands	r3, r1
   29fb6:	b2d9      	uxtb	r1, r3
   29fb8:	6853      	ldr	r3, [r2, #4]
   29fba:	200f      	movs	r0, #15
   29fbc:	4001      	ands	r1, r0
   29fbe:	0049      	lsls	r1, r1, #1
   29fc0:	201e      	movs	r0, #30
   29fc2:	4383      	bics	r3, r0
   29fc4:	430b      	orrs	r3, r1
   29fc6:	6053      	str	r3, [r2, #4]
}
   29fc8:	46c0      	nop			; (mov r8, r8)
   29fca:	46bd      	mov	sp, r7
   29fcc:	b002      	add	sp, #8
   29fce:	bd80      	pop	{r7, pc}
   29fd0:	41004000 	.word	0x41004000

00029fd4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   29fd4:	b580      	push	{r7, lr}
   29fd6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   29fd8:	46c0      	nop			; (mov r8, r8)
   29fda:	4b04      	ldr	r3, [pc, #16]	; (29fec <_system_dfll_wait_for_sync+0x18>)
   29fdc:	68db      	ldr	r3, [r3, #12]
   29fde:	2210      	movs	r2, #16
   29fe0:	4013      	ands	r3, r2
   29fe2:	d0fa      	beq.n	29fda <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   29fe4:	46c0      	nop			; (mov r8, r8)
   29fe6:	46bd      	mov	sp, r7
   29fe8:	bd80      	pop	{r7, pc}
   29fea:	46c0      	nop			; (mov r8, r8)
   29fec:	40000800 	.word	0x40000800

00029ff0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   29ff0:	b580      	push	{r7, lr}
   29ff2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   29ff4:	4b0c      	ldr	r3, [pc, #48]	; (2a028 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29ff6:	2202      	movs	r2, #2
   29ff8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29ffa:	4b0c      	ldr	r3, [pc, #48]	; (2a02c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29ffc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   29ffe:	4a0a      	ldr	r2, [pc, #40]	; (2a028 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a000:	4b0b      	ldr	r3, [pc, #44]	; (2a030 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a002:	689b      	ldr	r3, [r3, #8]
   2a004:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2a006:	4a08      	ldr	r2, [pc, #32]	; (2a028 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a008:	4b09      	ldr	r3, [pc, #36]	; (2a030 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a00a:	685b      	ldr	r3, [r3, #4]
   2a00c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2a00e:	4b06      	ldr	r3, [pc, #24]	; (2a028 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a010:	2200      	movs	r2, #0
   2a012:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a014:	4b05      	ldr	r3, [pc, #20]	; (2a02c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a016:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2a018:	4a03      	ldr	r2, [pc, #12]	; (2a028 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a01a:	4b05      	ldr	r3, [pc, #20]	; (2a030 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a01c:	681b      	ldr	r3, [r3, #0]
   2a01e:	b29b      	uxth	r3, r3
   2a020:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2a022:	46c0      	nop			; (mov r8, r8)
   2a024:	46bd      	mov	sp, r7
   2a026:	bd80      	pop	{r7, pc}
   2a028:	40000800 	.word	0x40000800
   2a02c:	00029fd5 	.word	0x00029fd5
   2a030:	20003f14 	.word	0x20003f14

0002a034 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2a034:	b580      	push	{r7, lr}
   2a036:	b082      	sub	sp, #8
   2a038:	af00      	add	r7, sp, #0
   2a03a:	0002      	movs	r2, r0
   2a03c:	1dfb      	adds	r3, r7, #7
   2a03e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a040:	1dfb      	adds	r3, r7, #7
   2a042:	781b      	ldrb	r3, [r3, #0]
   2a044:	2b08      	cmp	r3, #8
   2a046:	d841      	bhi.n	2a0cc <system_clock_source_get_hz+0x98>
   2a048:	009a      	lsls	r2, r3, #2
   2a04a:	4b23      	ldr	r3, [pc, #140]	; (2a0d8 <system_clock_source_get_hz+0xa4>)
   2a04c:	18d3      	adds	r3, r2, r3
   2a04e:	681b      	ldr	r3, [r3, #0]
   2a050:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2a052:	4b22      	ldr	r3, [pc, #136]	; (2a0dc <system_clock_source_get_hz+0xa8>)
   2a054:	691b      	ldr	r3, [r3, #16]
   2a056:	e03a      	b.n	2a0ce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2a058:	4b21      	ldr	r3, [pc, #132]	; (2a0e0 <system_clock_source_get_hz+0xac>)
   2a05a:	6a1b      	ldr	r3, [r3, #32]
   2a05c:	059b      	lsls	r3, r3, #22
   2a05e:	0f9b      	lsrs	r3, r3, #30
   2a060:	b2db      	uxtb	r3, r3
   2a062:	001a      	movs	r2, r3
   2a064:	4b1f      	ldr	r3, [pc, #124]	; (2a0e4 <system_clock_source_get_hz+0xb0>)
   2a066:	40d3      	lsrs	r3, r2
   2a068:	e031      	b.n	2a0ce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2a06a:	2380      	movs	r3, #128	; 0x80
   2a06c:	021b      	lsls	r3, r3, #8
   2a06e:	e02e      	b.n	2a0ce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2a070:	2380      	movs	r3, #128	; 0x80
   2a072:	021b      	lsls	r3, r3, #8
   2a074:	e02b      	b.n	2a0ce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2a076:	4b19      	ldr	r3, [pc, #100]	; (2a0dc <system_clock_source_get_hz+0xa8>)
   2a078:	695b      	ldr	r3, [r3, #20]
   2a07a:	e028      	b.n	2a0ce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2a07c:	4b17      	ldr	r3, [pc, #92]	; (2a0dc <system_clock_source_get_hz+0xa8>)
   2a07e:	681b      	ldr	r3, [r3, #0]
   2a080:	2202      	movs	r2, #2
   2a082:	4013      	ands	r3, r2
   2a084:	d101      	bne.n	2a08a <system_clock_source_get_hz+0x56>
			return 0;
   2a086:	2300      	movs	r3, #0
   2a088:	e021      	b.n	2a0ce <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2a08a:	4b17      	ldr	r3, [pc, #92]	; (2a0e8 <system_clock_source_get_hz+0xb4>)
   2a08c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2a08e:	4b13      	ldr	r3, [pc, #76]	; (2a0dc <system_clock_source_get_hz+0xa8>)
   2a090:	681b      	ldr	r3, [r3, #0]
   2a092:	2224      	movs	r2, #36	; 0x24
   2a094:	4013      	ands	r3, r2
   2a096:	2b04      	cmp	r3, #4
   2a098:	d109      	bne.n	2a0ae <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a09a:	2000      	movs	r0, #0
   2a09c:	4b13      	ldr	r3, [pc, #76]	; (2a0ec <system_clock_source_get_hz+0xb8>)
   2a09e:	4798      	blx	r3
   2a0a0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2a0a2:	4b0e      	ldr	r3, [pc, #56]	; (2a0dc <system_clock_source_get_hz+0xa8>)
   2a0a4:	689b      	ldr	r3, [r3, #8]
   2a0a6:	041b      	lsls	r3, r3, #16
   2a0a8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a0aa:	4353      	muls	r3, r2
   2a0ac:	e00f      	b.n	2a0ce <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2a0ae:	4b10      	ldr	r3, [pc, #64]	; (2a0f0 <system_clock_source_get_hz+0xbc>)
   2a0b0:	e00d      	b.n	2a0ce <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2a0b2:	4a0b      	ldr	r2, [pc, #44]	; (2a0e0 <system_clock_source_get_hz+0xac>)
   2a0b4:	2350      	movs	r3, #80	; 0x50
   2a0b6:	5cd3      	ldrb	r3, [r2, r3]
   2a0b8:	b2db      	uxtb	r3, r3
   2a0ba:	001a      	movs	r2, r3
   2a0bc:	2304      	movs	r3, #4
   2a0be:	4013      	ands	r3, r2
   2a0c0:	d101      	bne.n	2a0c6 <system_clock_source_get_hz+0x92>
			return 0;
   2a0c2:	2300      	movs	r3, #0
   2a0c4:	e003      	b.n	2a0ce <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2a0c6:	4b05      	ldr	r3, [pc, #20]	; (2a0dc <system_clock_source_get_hz+0xa8>)
   2a0c8:	68db      	ldr	r3, [r3, #12]
   2a0ca:	e000      	b.n	2a0ce <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2a0cc:	2300      	movs	r3, #0
	}
}
   2a0ce:	0018      	movs	r0, r3
   2a0d0:	46bd      	mov	sp, r7
   2a0d2:	b002      	add	sp, #8
   2a0d4:	bd80      	pop	{r7, pc}
   2a0d6:	46c0      	nop			; (mov r8, r8)
   2a0d8:	0003a04c 	.word	0x0003a04c
   2a0dc:	20003f14 	.word	0x20003f14
   2a0e0:	40000800 	.word	0x40000800
   2a0e4:	007a1200 	.word	0x007a1200
   2a0e8:	00029fd5 	.word	0x00029fd5
   2a0ec:	0002aad1 	.word	0x0002aad1
   2a0f0:	02dc6c00 	.word	0x02dc6c00

0002a0f4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2a0f4:	b580      	push	{r7, lr}
   2a0f6:	b084      	sub	sp, #16
   2a0f8:	af00      	add	r7, sp, #0
   2a0fa:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2a0fc:	4b1a      	ldr	r3, [pc, #104]	; (2a168 <system_clock_source_osc8m_set_config+0x74>)
   2a0fe:	6a1b      	ldr	r3, [r3, #32]
   2a100:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2a102:	687b      	ldr	r3, [r7, #4]
   2a104:	781b      	ldrb	r3, [r3, #0]
   2a106:	1c1a      	adds	r2, r3, #0
   2a108:	2303      	movs	r3, #3
   2a10a:	4013      	ands	r3, r2
   2a10c:	b2da      	uxtb	r2, r3
   2a10e:	230d      	movs	r3, #13
   2a110:	18fb      	adds	r3, r7, r3
   2a112:	2103      	movs	r1, #3
   2a114:	400a      	ands	r2, r1
   2a116:	0010      	movs	r0, r2
   2a118:	781a      	ldrb	r2, [r3, #0]
   2a11a:	2103      	movs	r1, #3
   2a11c:	438a      	bics	r2, r1
   2a11e:	1c11      	adds	r1, r2, #0
   2a120:	1c02      	adds	r2, r0, #0
   2a122:	430a      	orrs	r2, r1
   2a124:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2a126:	687b      	ldr	r3, [r7, #4]
   2a128:	789a      	ldrb	r2, [r3, #2]
   2a12a:	230c      	movs	r3, #12
   2a12c:	18fb      	adds	r3, r7, r3
   2a12e:	01d0      	lsls	r0, r2, #7
   2a130:	781a      	ldrb	r2, [r3, #0]
   2a132:	217f      	movs	r1, #127	; 0x7f
   2a134:	400a      	ands	r2, r1
   2a136:	1c11      	adds	r1, r2, #0
   2a138:	1c02      	adds	r2, r0, #0
   2a13a:	430a      	orrs	r2, r1
   2a13c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2a13e:	687b      	ldr	r3, [r7, #4]
   2a140:	785a      	ldrb	r2, [r3, #1]
   2a142:	230c      	movs	r3, #12
   2a144:	18fb      	adds	r3, r7, r3
   2a146:	2101      	movs	r1, #1
   2a148:	400a      	ands	r2, r1
   2a14a:	0190      	lsls	r0, r2, #6
   2a14c:	781a      	ldrb	r2, [r3, #0]
   2a14e:	2140      	movs	r1, #64	; 0x40
   2a150:	438a      	bics	r2, r1
   2a152:	1c11      	adds	r1, r2, #0
   2a154:	1c02      	adds	r2, r0, #0
   2a156:	430a      	orrs	r2, r1
   2a158:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2a15a:	4b03      	ldr	r3, [pc, #12]	; (2a168 <system_clock_source_osc8m_set_config+0x74>)
   2a15c:	68fa      	ldr	r2, [r7, #12]
   2a15e:	621a      	str	r2, [r3, #32]
}
   2a160:	46c0      	nop			; (mov r8, r8)
   2a162:	46bd      	mov	sp, r7
   2a164:	b004      	add	sp, #16
   2a166:	bd80      	pop	{r7, pc}
   2a168:	40000800 	.word	0x40000800

0002a16c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2a16c:	b580      	push	{r7, lr}
   2a16e:	b086      	sub	sp, #24
   2a170:	af00      	add	r7, sp, #0
   2a172:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2a174:	687b      	ldr	r3, [r7, #4]
   2a176:	68db      	ldr	r3, [r3, #12]
   2a178:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2a17a:	687b      	ldr	r3, [r7, #4]
   2a17c:	7d1b      	ldrb	r3, [r3, #20]
   2a17e:	2b01      	cmp	r3, #1
   2a180:	d10a      	bne.n	2a198 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2a182:	687b      	ldr	r3, [r7, #4]
   2a184:	8a1b      	ldrh	r3, [r3, #16]
   2a186:	3301      	adds	r3, #1
   2a188:	005b      	lsls	r3, r3, #1
   2a18a:	001a      	movs	r2, r3
   2a18c:	4b36      	ldr	r3, [pc, #216]	; (2a268 <system_clock_source_dpll_set_config+0xfc>)
   2a18e:	0011      	movs	r1, r2
   2a190:	6978      	ldr	r0, [r7, #20]
   2a192:	4798      	blx	r3
   2a194:	0003      	movs	r3, r0
   2a196:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2a198:	687b      	ldr	r3, [r7, #4]
   2a19a:	689b      	ldr	r3, [r3, #8]
   2a19c:	011a      	lsls	r2, r3, #4
   2a19e:	4b32      	ldr	r3, [pc, #200]	; (2a268 <system_clock_source_dpll_set_config+0xfc>)
   2a1a0:	6979      	ldr	r1, [r7, #20]
   2a1a2:	0010      	movs	r0, r2
   2a1a4:	4798      	blx	r3
   2a1a6:	0003      	movs	r3, r0
   2a1a8:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2a1aa:	693b      	ldr	r3, [r7, #16]
   2a1ac:	b2da      	uxtb	r2, r3
   2a1ae:	230f      	movs	r3, #15
   2a1b0:	18fb      	adds	r3, r7, r3
   2a1b2:	210f      	movs	r1, #15
   2a1b4:	400a      	ands	r2, r1
   2a1b6:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2a1b8:	693b      	ldr	r3, [r7, #16]
   2a1ba:	091b      	lsrs	r3, r3, #4
   2a1bc:	3b01      	subs	r3, #1
   2a1be:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2a1c0:	492a      	ldr	r1, [pc, #168]	; (2a26c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a1c2:	687b      	ldr	r3, [r7, #4]
   2a1c4:	781b      	ldrb	r3, [r3, #0]
   2a1c6:	01db      	lsls	r3, r3, #7
   2a1c8:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2a1ca:	687b      	ldr	r3, [r7, #4]
   2a1cc:	785b      	ldrb	r3, [r3, #1]
   2a1ce:	019b      	lsls	r3, r3, #6
   2a1d0:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a1d2:	4313      	orrs	r3, r2
   2a1d4:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2a1d6:	2344      	movs	r3, #68	; 0x44
   2a1d8:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2a1da:	4b24      	ldr	r3, [pc, #144]	; (2a26c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a1dc:	220f      	movs	r2, #15
   2a1de:	18ba      	adds	r2, r7, r2
   2a1e0:	7812      	ldrb	r2, [r2, #0]
   2a1e2:	0412      	lsls	r2, r2, #16
   2a1e4:	0011      	movs	r1, r2
   2a1e6:	22f0      	movs	r2, #240	; 0xf0
   2a1e8:	0312      	lsls	r2, r2, #12
   2a1ea:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2a1ec:	693a      	ldr	r2, [r7, #16]
   2a1ee:	0512      	lsls	r2, r2, #20
   2a1f0:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a1f2:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2a1f4:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2a1f6:	4b1d      	ldr	r3, [pc, #116]	; (2a26c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a1f8:	687a      	ldr	r2, [r7, #4]
   2a1fa:	8a12      	ldrh	r2, [r2, #16]
   2a1fc:	0412      	lsls	r2, r2, #16
   2a1fe:	0011      	movs	r1, r2
   2a200:	4a1b      	ldr	r2, [pc, #108]	; (2a270 <system_clock_source_dpll_set_config+0x104>)
   2a202:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a204:	687a      	ldr	r2, [r7, #4]
   2a206:	7892      	ldrb	r2, [r2, #2]
   2a208:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a20a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a20c:	687a      	ldr	r2, [r7, #4]
   2a20e:	7cd2      	ldrb	r2, [r2, #19]
   2a210:	0212      	lsls	r2, r2, #8
   2a212:	0010      	movs	r0, r2
   2a214:	22e0      	movs	r2, #224	; 0xe0
   2a216:	00d2      	lsls	r2, r2, #3
   2a218:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a21a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a21c:	687a      	ldr	r2, [r7, #4]
   2a21e:	7d12      	ldrb	r2, [r2, #20]
   2a220:	0112      	lsls	r2, r2, #4
   2a222:	0010      	movs	r0, r2
   2a224:	2230      	movs	r2, #48	; 0x30
   2a226:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a228:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a22a:	687a      	ldr	r2, [r7, #4]
   2a22c:	78d2      	ldrb	r2, [r2, #3]
   2a22e:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a230:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a232:	687a      	ldr	r2, [r7, #4]
   2a234:	7912      	ldrb	r2, [r2, #4]
   2a236:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a238:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2a23a:	687a      	ldr	r2, [r7, #4]
   2a23c:	7c92      	ldrb	r2, [r2, #18]
   2a23e:	0010      	movs	r0, r2
   2a240:	2203      	movs	r2, #3
   2a242:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a244:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2a246:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2a248:	693b      	ldr	r3, [r7, #16]
   2a24a:	3301      	adds	r3, #1
   2a24c:	011a      	lsls	r2, r3, #4
   2a24e:	230f      	movs	r3, #15
   2a250:	18fb      	adds	r3, r7, r3
   2a252:	781b      	ldrb	r3, [r3, #0]
   2a254:	18d3      	adds	r3, r2, r3
   2a256:	697a      	ldr	r2, [r7, #20]
   2a258:	4353      	muls	r3, r2
   2a25a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2a25c:	4b05      	ldr	r3, [pc, #20]	; (2a274 <system_clock_source_dpll_set_config+0x108>)
   2a25e:	60da      	str	r2, [r3, #12]
}
   2a260:	46c0      	nop			; (mov r8, r8)
   2a262:	46bd      	mov	sp, r7
   2a264:	b006      	add	sp, #24
   2a266:	bd80      	pop	{r7, pc}
   2a268:	00033569 	.word	0x00033569
   2a26c:	40000800 	.word	0x40000800
   2a270:	07ff0000 	.word	0x07ff0000
   2a274:	20003f14 	.word	0x20003f14

0002a278 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2a278:	b580      	push	{r7, lr}
   2a27a:	b082      	sub	sp, #8
   2a27c:	af00      	add	r7, sp, #0
   2a27e:	0002      	movs	r2, r0
   2a280:	1dfb      	adds	r3, r7, #7
   2a282:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a284:	1dfb      	adds	r3, r7, #7
   2a286:	781b      	ldrb	r3, [r3, #0]
   2a288:	2b08      	cmp	r3, #8
   2a28a:	d83b      	bhi.n	2a304 <system_clock_source_enable+0x8c>
   2a28c:	009a      	lsls	r2, r3, #2
   2a28e:	4b21      	ldr	r3, [pc, #132]	; (2a314 <system_clock_source_enable+0x9c>)
   2a290:	18d3      	adds	r3, r2, r3
   2a292:	681b      	ldr	r3, [r3, #0]
   2a294:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2a296:	4b20      	ldr	r3, [pc, #128]	; (2a318 <system_clock_source_enable+0xa0>)
   2a298:	4a1f      	ldr	r2, [pc, #124]	; (2a318 <system_clock_source_enable+0xa0>)
   2a29a:	6a12      	ldr	r2, [r2, #32]
   2a29c:	2102      	movs	r1, #2
   2a29e:	430a      	orrs	r2, r1
   2a2a0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2a2a2:	2300      	movs	r3, #0
   2a2a4:	e031      	b.n	2a30a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2a2a6:	4b1c      	ldr	r3, [pc, #112]	; (2a318 <system_clock_source_enable+0xa0>)
   2a2a8:	4a1b      	ldr	r2, [pc, #108]	; (2a318 <system_clock_source_enable+0xa0>)
   2a2aa:	6992      	ldr	r2, [r2, #24]
   2a2ac:	2102      	movs	r1, #2
   2a2ae:	430a      	orrs	r2, r1
   2a2b0:	619a      	str	r2, [r3, #24]
		break;
   2a2b2:	e029      	b.n	2a308 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2a2b4:	4a18      	ldr	r2, [pc, #96]	; (2a318 <system_clock_source_enable+0xa0>)
   2a2b6:	4b18      	ldr	r3, [pc, #96]	; (2a318 <system_clock_source_enable+0xa0>)
   2a2b8:	8a1b      	ldrh	r3, [r3, #16]
   2a2ba:	b29b      	uxth	r3, r3
   2a2bc:	2102      	movs	r1, #2
   2a2be:	430b      	orrs	r3, r1
   2a2c0:	b29b      	uxth	r3, r3
   2a2c2:	8213      	strh	r3, [r2, #16]
		break;
   2a2c4:	e020      	b.n	2a308 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2a2c6:	4a14      	ldr	r2, [pc, #80]	; (2a318 <system_clock_source_enable+0xa0>)
   2a2c8:	4b13      	ldr	r3, [pc, #76]	; (2a318 <system_clock_source_enable+0xa0>)
   2a2ca:	8a9b      	ldrh	r3, [r3, #20]
   2a2cc:	b29b      	uxth	r3, r3
   2a2ce:	2102      	movs	r1, #2
   2a2d0:	430b      	orrs	r3, r1
   2a2d2:	b29b      	uxth	r3, r3
   2a2d4:	8293      	strh	r3, [r2, #20]
		break;
   2a2d6:	e017      	b.n	2a308 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2a2d8:	4b10      	ldr	r3, [pc, #64]	; (2a31c <system_clock_source_enable+0xa4>)
   2a2da:	681b      	ldr	r3, [r3, #0]
   2a2dc:	2202      	movs	r2, #2
   2a2de:	431a      	orrs	r2, r3
   2a2e0:	4b0e      	ldr	r3, [pc, #56]	; (2a31c <system_clock_source_enable+0xa4>)
   2a2e2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2a2e4:	4b0e      	ldr	r3, [pc, #56]	; (2a320 <system_clock_source_enable+0xa8>)
   2a2e6:	4798      	blx	r3
		break;
   2a2e8:	e00e      	b.n	2a308 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2a2ea:	4a0b      	ldr	r2, [pc, #44]	; (2a318 <system_clock_source_enable+0xa0>)
   2a2ec:	490a      	ldr	r1, [pc, #40]	; (2a318 <system_clock_source_enable+0xa0>)
   2a2ee:	2344      	movs	r3, #68	; 0x44
   2a2f0:	5ccb      	ldrb	r3, [r1, r3]
   2a2f2:	b2db      	uxtb	r3, r3
   2a2f4:	2102      	movs	r1, #2
   2a2f6:	430b      	orrs	r3, r1
   2a2f8:	b2d9      	uxtb	r1, r3
   2a2fa:	2344      	movs	r3, #68	; 0x44
   2a2fc:	54d1      	strb	r1, [r2, r3]
		break;
   2a2fe:	e003      	b.n	2a308 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2a300:	2300      	movs	r3, #0
   2a302:	e002      	b.n	2a30a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2a304:	2317      	movs	r3, #23
   2a306:	e000      	b.n	2a30a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2a308:	2300      	movs	r3, #0
}
   2a30a:	0018      	movs	r0, r3
   2a30c:	46bd      	mov	sp, r7
   2a30e:	b002      	add	sp, #8
   2a310:	bd80      	pop	{r7, pc}
   2a312:	46c0      	nop			; (mov r8, r8)
   2a314:	0003a070 	.word	0x0003a070
   2a318:	40000800 	.word	0x40000800
   2a31c:	20003f14 	.word	0x20003f14
   2a320:	00029ff1 	.word	0x00029ff1

0002a324 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2a324:	b580      	push	{r7, lr}
   2a326:	b084      	sub	sp, #16
   2a328:	af00      	add	r7, sp, #0
   2a32a:	0002      	movs	r2, r0
   2a32c:	1dfb      	adds	r3, r7, #7
   2a32e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2a330:	2300      	movs	r3, #0
   2a332:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2a334:	1dfb      	adds	r3, r7, #7
   2a336:	781b      	ldrb	r3, [r3, #0]
   2a338:	2b08      	cmp	r3, #8
   2a33a:	d821      	bhi.n	2a380 <system_clock_source_is_ready+0x5c>
   2a33c:	009a      	lsls	r2, r3, #2
   2a33e:	4b18      	ldr	r3, [pc, #96]	; (2a3a0 <system_clock_source_is_ready+0x7c>)
   2a340:	18d3      	adds	r3, r2, r3
   2a342:	681b      	ldr	r3, [r3, #0]
   2a344:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2a346:	2308      	movs	r3, #8
   2a348:	60fb      	str	r3, [r7, #12]
		break;
   2a34a:	e01b      	b.n	2a384 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2a34c:	2304      	movs	r3, #4
   2a34e:	60fb      	str	r3, [r7, #12]
		break;
   2a350:	e018      	b.n	2a384 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2a352:	2301      	movs	r3, #1
   2a354:	60fb      	str	r3, [r7, #12]
		break;
   2a356:	e015      	b.n	2a384 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2a358:	2302      	movs	r3, #2
   2a35a:	60fb      	str	r3, [r7, #12]
		break;
   2a35c:	e012      	b.n	2a384 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2a35e:	2310      	movs	r3, #16
   2a360:	60fb      	str	r3, [r7, #12]
		}
		break;
   2a362:	e00f      	b.n	2a384 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2a364:	4a0f      	ldr	r2, [pc, #60]	; (2a3a4 <system_clock_source_is_ready+0x80>)
   2a366:	2350      	movs	r3, #80	; 0x50
   2a368:	5cd3      	ldrb	r3, [r2, r3]
   2a36a:	b2db      	uxtb	r3, r3
   2a36c:	001a      	movs	r2, r3
   2a36e:	2303      	movs	r3, #3
   2a370:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2a372:	3b03      	subs	r3, #3
   2a374:	425a      	negs	r2, r3
   2a376:	4153      	adcs	r3, r2
   2a378:	b2db      	uxtb	r3, r3
   2a37a:	e00c      	b.n	2a396 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2a37c:	2301      	movs	r3, #1
   2a37e:	e00a      	b.n	2a396 <system_clock_source_is_ready+0x72>

	default:
		return false;
   2a380:	2300      	movs	r3, #0
   2a382:	e008      	b.n	2a396 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2a384:	4b07      	ldr	r3, [pc, #28]	; (2a3a4 <system_clock_source_is_ready+0x80>)
   2a386:	68db      	ldr	r3, [r3, #12]
   2a388:	68fa      	ldr	r2, [r7, #12]
   2a38a:	401a      	ands	r2, r3
   2a38c:	68fb      	ldr	r3, [r7, #12]
   2a38e:	1ad3      	subs	r3, r2, r3
   2a390:	425a      	negs	r2, r3
   2a392:	4153      	adcs	r3, r2
   2a394:	b2db      	uxtb	r3, r3
}
   2a396:	0018      	movs	r0, r3
   2a398:	46bd      	mov	sp, r7
   2a39a:	b004      	add	sp, #16
   2a39c:	bd80      	pop	{r7, pc}
   2a39e:	46c0      	nop			; (mov r8, r8)
   2a3a0:	0003a094 	.word	0x0003a094
   2a3a4:	40000800 	.word	0x40000800

0002a3a8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2a3a8:	b580      	push	{r7, lr}
   2a3aa:	b082      	sub	sp, #8
   2a3ac:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2a3ae:	003b      	movs	r3, r7
   2a3b0:	2203      	movs	r2, #3
   2a3b2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a3b4:	2300      	movs	r3, #0
   2a3b6:	607b      	str	r3, [r7, #4]
   2a3b8:	e009      	b.n	2a3ce <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2a3ba:	687b      	ldr	r3, [r7, #4]
   2a3bc:	b2db      	uxtb	r3, r3
   2a3be:	003a      	movs	r2, r7
   2a3c0:	0011      	movs	r1, r2
   2a3c2:	0018      	movs	r0, r3
   2a3c4:	4b05      	ldr	r3, [pc, #20]	; (2a3dc <_switch_peripheral_gclk+0x34>)
   2a3c6:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a3c8:	687b      	ldr	r3, [r7, #4]
   2a3ca:	3301      	adds	r3, #1
   2a3cc:	607b      	str	r3, [r7, #4]
   2a3ce:	687b      	ldr	r3, [r7, #4]
   2a3d0:	2b24      	cmp	r3, #36	; 0x24
   2a3d2:	d9f2      	bls.n	2a3ba <_switch_peripheral_gclk+0x12>
	}
}
   2a3d4:	46c0      	nop			; (mov r8, r8)
   2a3d6:	46bd      	mov	sp, r7
   2a3d8:	b002      	add	sp, #8
   2a3da:	bd80      	pop	{r7, pc}
   2a3dc:	0002a9ad 	.word	0x0002a9ad

0002a3e0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2a3e0:	b580      	push	{r7, lr}
   2a3e2:	b0a6      	sub	sp, #152	; 0x98
   2a3e4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2a3e6:	4b92      	ldr	r3, [pc, #584]	; (2a630 <system_clock_init+0x250>)
   2a3e8:	22c2      	movs	r2, #194	; 0xc2
   2a3ea:	00d2      	lsls	r2, r2, #3
   2a3ec:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2a3ee:	2003      	movs	r0, #3
   2a3f0:	4b90      	ldr	r3, [pc, #576]	; (2a634 <system_clock_init+0x254>)
   2a3f2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2a3f4:	4b90      	ldr	r3, [pc, #576]	; (2a638 <system_clock_init+0x258>)
   2a3f6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2a3f8:	2394      	movs	r3, #148	; 0x94
   2a3fa:	18fb      	adds	r3, r7, r3
   2a3fc:	0018      	movs	r0, r3
   2a3fe:	4b8f      	ldr	r3, [pc, #572]	; (2a63c <system_clock_init+0x25c>)
   2a400:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2a402:	2394      	movs	r3, #148	; 0x94
   2a404:	18fb      	adds	r3, r7, r3
   2a406:	2200      	movs	r2, #0
   2a408:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2a40a:	2394      	movs	r3, #148	; 0x94
   2a40c:	18fb      	adds	r3, r7, r3
   2a40e:	2201      	movs	r2, #1
   2a410:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2a412:	2394      	movs	r3, #148	; 0x94
   2a414:	18fb      	adds	r3, r7, r3
   2a416:	2200      	movs	r2, #0
   2a418:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2a41a:	2394      	movs	r3, #148	; 0x94
   2a41c:	18fb      	adds	r3, r7, r3
   2a41e:	0018      	movs	r0, r3
   2a420:	4b87      	ldr	r3, [pc, #540]	; (2a640 <system_clock_init+0x260>)
   2a422:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2a424:	2006      	movs	r0, #6
   2a426:	4b87      	ldr	r3, [pc, #540]	; (2a644 <system_clock_init+0x264>)
   2a428:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2a42a:	4b87      	ldr	r3, [pc, #540]	; (2a648 <system_clock_init+0x268>)
   2a42c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2a42e:	2360      	movs	r3, #96	; 0x60
   2a430:	18fb      	adds	r3, r7, r3
   2a432:	0018      	movs	r0, r3
   2a434:	4b85      	ldr	r3, [pc, #532]	; (2a64c <system_clock_init+0x26c>)
   2a436:	4798      	blx	r3
   2a438:	2360      	movs	r3, #96	; 0x60
   2a43a:	18fb      	adds	r3, r7, r3
   2a43c:	2206      	movs	r2, #6
   2a43e:	701a      	strb	r2, [r3, #0]
   2a440:	2360      	movs	r3, #96	; 0x60
   2a442:	18fb      	adds	r3, r7, r3
   2a444:	2208      	movs	r2, #8
   2a446:	605a      	str	r2, [r3, #4]
   2a448:	2360      	movs	r3, #96	; 0x60
   2a44a:	18fb      	adds	r3, r7, r3
   2a44c:	2200      	movs	r2, #0
   2a44e:	721a      	strb	r2, [r3, #8]
   2a450:	2360      	movs	r3, #96	; 0x60
   2a452:	18fb      	adds	r3, r7, r3
   2a454:	2200      	movs	r2, #0
   2a456:	725a      	strb	r2, [r3, #9]
   2a458:	2360      	movs	r3, #96	; 0x60
   2a45a:	18fb      	adds	r3, r7, r3
   2a45c:	0019      	movs	r1, r3
   2a45e:	2001      	movs	r0, #1
   2a460:	4b7b      	ldr	r3, [pc, #492]	; (2a650 <system_clock_init+0x270>)
   2a462:	4798      	blx	r3
   2a464:	2001      	movs	r0, #1
   2a466:	4b7b      	ldr	r3, [pc, #492]	; (2a654 <system_clock_init+0x274>)
   2a468:	4798      	blx	r3
   2a46a:	2354      	movs	r3, #84	; 0x54
   2a46c:	18fb      	adds	r3, r7, r3
   2a46e:	0018      	movs	r0, r3
   2a470:	4b76      	ldr	r3, [pc, #472]	; (2a64c <system_clock_init+0x26c>)
   2a472:	4798      	blx	r3
   2a474:	2354      	movs	r3, #84	; 0x54
   2a476:	18fb      	adds	r3, r7, r3
   2a478:	2203      	movs	r2, #3
   2a47a:	701a      	strb	r2, [r3, #0]
   2a47c:	2354      	movs	r3, #84	; 0x54
   2a47e:	18fb      	adds	r3, r7, r3
   2a480:	2201      	movs	r2, #1
   2a482:	605a      	str	r2, [r3, #4]
   2a484:	2354      	movs	r3, #84	; 0x54
   2a486:	18fb      	adds	r3, r7, r3
   2a488:	2201      	movs	r2, #1
   2a48a:	721a      	strb	r2, [r3, #8]
   2a48c:	2354      	movs	r3, #84	; 0x54
   2a48e:	18fb      	adds	r3, r7, r3
   2a490:	2200      	movs	r2, #0
   2a492:	725a      	strb	r2, [r3, #9]
   2a494:	2354      	movs	r3, #84	; 0x54
   2a496:	18fb      	adds	r3, r7, r3
   2a498:	0019      	movs	r1, r3
   2a49a:	2002      	movs	r0, #2
   2a49c:	4b6c      	ldr	r3, [pc, #432]	; (2a650 <system_clock_init+0x270>)
   2a49e:	4798      	blx	r3
   2a4a0:	2002      	movs	r0, #2
   2a4a2:	4b6c      	ldr	r3, [pc, #432]	; (2a654 <system_clock_init+0x274>)
   2a4a4:	4798      	blx	r3
   2a4a6:	233c      	movs	r3, #60	; 0x3c
   2a4a8:	18fb      	adds	r3, r7, r3
   2a4aa:	0018      	movs	r0, r3
   2a4ac:	4b67      	ldr	r3, [pc, #412]	; (2a64c <system_clock_init+0x26c>)
   2a4ae:	4798      	blx	r3
   2a4b0:	233c      	movs	r3, #60	; 0x3c
   2a4b2:	18fb      	adds	r3, r7, r3
   2a4b4:	2203      	movs	r2, #3
   2a4b6:	701a      	strb	r2, [r3, #0]
   2a4b8:	233c      	movs	r3, #60	; 0x3c
   2a4ba:	18fb      	adds	r3, r7, r3
   2a4bc:	2220      	movs	r2, #32
   2a4be:	605a      	str	r2, [r3, #4]
   2a4c0:	233c      	movs	r3, #60	; 0x3c
   2a4c2:	18fb      	adds	r3, r7, r3
   2a4c4:	2200      	movs	r2, #0
   2a4c6:	721a      	strb	r2, [r3, #8]
   2a4c8:	233c      	movs	r3, #60	; 0x3c
   2a4ca:	18fb      	adds	r3, r7, r3
   2a4cc:	2200      	movs	r2, #0
   2a4ce:	725a      	strb	r2, [r3, #9]
   2a4d0:	233c      	movs	r3, #60	; 0x3c
   2a4d2:	18fb      	adds	r3, r7, r3
   2a4d4:	0019      	movs	r1, r3
   2a4d6:	2004      	movs	r0, #4
   2a4d8:	4b5d      	ldr	r3, [pc, #372]	; (2a650 <system_clock_init+0x270>)
   2a4da:	4798      	blx	r3
   2a4dc:	2004      	movs	r0, #4
   2a4de:	4b5d      	ldr	r3, [pc, #372]	; (2a654 <system_clock_init+0x274>)
   2a4e0:	4798      	blx	r3
   2a4e2:	2330      	movs	r3, #48	; 0x30
   2a4e4:	18fb      	adds	r3, r7, r3
   2a4e6:	0018      	movs	r0, r3
   2a4e8:	4b58      	ldr	r3, [pc, #352]	; (2a64c <system_clock_init+0x26c>)
   2a4ea:	4798      	blx	r3
   2a4ec:	2330      	movs	r3, #48	; 0x30
   2a4ee:	18fb      	adds	r3, r7, r3
   2a4f0:	2206      	movs	r2, #6
   2a4f2:	701a      	strb	r2, [r3, #0]
   2a4f4:	2330      	movs	r3, #48	; 0x30
   2a4f6:	18fb      	adds	r3, r7, r3
   2a4f8:	2201      	movs	r2, #1
   2a4fa:	605a      	str	r2, [r3, #4]
   2a4fc:	2330      	movs	r3, #48	; 0x30
   2a4fe:	18fb      	adds	r3, r7, r3
   2a500:	2200      	movs	r2, #0
   2a502:	721a      	strb	r2, [r3, #8]
   2a504:	2330      	movs	r3, #48	; 0x30
   2a506:	18fb      	adds	r3, r7, r3
   2a508:	2200      	movs	r2, #0
   2a50a:	725a      	strb	r2, [r3, #9]
   2a50c:	2330      	movs	r3, #48	; 0x30
   2a50e:	18fb      	adds	r3, r7, r3
   2a510:	0019      	movs	r1, r3
   2a512:	2005      	movs	r0, #5
   2a514:	4b4e      	ldr	r3, [pc, #312]	; (2a650 <system_clock_init+0x270>)
   2a516:	4798      	blx	r3
   2a518:	2005      	movs	r0, #5
   2a51a:	4b4e      	ldr	r3, [pc, #312]	; (2a654 <system_clock_init+0x274>)
   2a51c:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2a51e:	2390      	movs	r3, #144	; 0x90
   2a520:	18fb      	adds	r3, r7, r3
   2a522:	0018      	movs	r0, r3
   2a524:	4b4c      	ldr	r3, [pc, #304]	; (2a658 <system_clock_init+0x278>)
   2a526:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2a528:	2390      	movs	r3, #144	; 0x90
   2a52a:	18fb      	adds	r3, r7, r3
   2a52c:	2201      	movs	r2, #1
   2a52e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2a530:	2390      	movs	r3, #144	; 0x90
   2a532:	18fb      	adds	r3, r7, r3
   2a534:	0019      	movs	r1, r3
   2a536:	2001      	movs	r0, #1
   2a538:	4b48      	ldr	r3, [pc, #288]	; (2a65c <system_clock_init+0x27c>)
   2a53a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2a53c:	2001      	movs	r0, #1
   2a53e:	4b48      	ldr	r3, [pc, #288]	; (2a660 <system_clock_init+0x280>)
   2a540:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2a542:	2378      	movs	r3, #120	; 0x78
   2a544:	18fb      	adds	r3, r7, r3
   2a546:	0018      	movs	r0, r3
   2a548:	4b46      	ldr	r3, [pc, #280]	; (2a664 <system_clock_init+0x284>)
   2a54a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2a54c:	2378      	movs	r3, #120	; 0x78
   2a54e:	18fb      	adds	r3, r7, r3
   2a550:	2200      	movs	r2, #0
   2a552:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2a554:	2378      	movs	r3, #120	; 0x78
   2a556:	18fb      	adds	r3, r7, r3
   2a558:	2200      	movs	r2, #0
   2a55a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2a55c:	2378      	movs	r3, #120	; 0x78
   2a55e:	18fb      	adds	r3, r7, r3
   2a560:	2200      	movs	r2, #0
   2a562:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2a564:	2378      	movs	r3, #120	; 0x78
   2a566:	18fb      	adds	r3, r7, r3
   2a568:	2200      	movs	r2, #0
   2a56a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2a56c:	2378      	movs	r3, #120	; 0x78
   2a56e:	18fb      	adds	r3, r7, r3
   2a570:	2200      	movs	r2, #0
   2a572:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2a574:	2378      	movs	r3, #120	; 0x78
   2a576:	18fb      	adds	r3, r7, r3
   2a578:	2200      	movs	r2, #0
   2a57a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2a57c:	2378      	movs	r3, #120	; 0x78
   2a57e:	18fb      	adds	r3, r7, r3
   2a580:	2200      	movs	r2, #0
   2a582:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2a584:	2378      	movs	r3, #120	; 0x78
   2a586:	18fb      	adds	r3, r7, r3
   2a588:	2202      	movs	r2, #2
   2a58a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2a58c:	2378      	movs	r3, #120	; 0x78
   2a58e:	18fb      	adds	r3, r7, r3
   2a590:	4a35      	ldr	r2, [pc, #212]	; (2a668 <system_clock_init+0x288>)
   2a592:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2a594:	2378      	movs	r3, #120	; 0x78
   2a596:	18fb      	adds	r3, r7, r3
   2a598:	2201      	movs	r2, #1
   2a59a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2a59c:	2378      	movs	r3, #120	; 0x78
   2a59e:	18fb      	adds	r3, r7, r3
   2a5a0:	4a32      	ldr	r2, [pc, #200]	; (2a66c <system_clock_init+0x28c>)
   2a5a2:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2a5a4:	2378      	movs	r3, #120	; 0x78
   2a5a6:	18fb      	adds	r3, r7, r3
   2a5a8:	0018      	movs	r0, r3
   2a5aa:	4b31      	ldr	r3, [pc, #196]	; (2a670 <system_clock_init+0x290>)
   2a5ac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2a5ae:	2008      	movs	r0, #8
   2a5b0:	4b24      	ldr	r3, [pc, #144]	; (2a644 <system_clock_init+0x264>)
   2a5b2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2a5b4:	46c0      	nop			; (mov r8, r8)
   2a5b6:	2008      	movs	r0, #8
   2a5b8:	4b2e      	ldr	r3, [pc, #184]	; (2a674 <system_clock_init+0x294>)
   2a5ba:	4798      	blx	r3
   2a5bc:	0003      	movs	r3, r0
   2a5be:	001a      	movs	r2, r3
   2a5c0:	2301      	movs	r3, #1
   2a5c2:	4053      	eors	r3, r2
   2a5c4:	b2db      	uxtb	r3, r3
   2a5c6:	2b00      	cmp	r3, #0
   2a5c8:	d1f5      	bne.n	2a5b6 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2a5ca:	4919      	ldr	r1, [pc, #100]	; (2a630 <system_clock_init+0x250>)
   2a5cc:	2244      	movs	r2, #68	; 0x44
   2a5ce:	5c8b      	ldrb	r3, [r1, r2]
   2a5d0:	2080      	movs	r0, #128	; 0x80
   2a5d2:	4240      	negs	r0, r0
   2a5d4:	4303      	orrs	r3, r0
   2a5d6:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2a5d8:	2000      	movs	r0, #0
   2a5da:	4b27      	ldr	r3, [pc, #156]	; (2a678 <system_clock_init+0x298>)
   2a5dc:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2a5de:	2100      	movs	r1, #0
   2a5e0:	2000      	movs	r0, #0
   2a5e2:	4b26      	ldr	r3, [pc, #152]	; (2a67c <system_clock_init+0x29c>)
   2a5e4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2a5e6:	2100      	movs	r1, #0
   2a5e8:	2001      	movs	r0, #1
   2a5ea:	4b24      	ldr	r3, [pc, #144]	; (2a67c <system_clock_init+0x29c>)
   2a5ec:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2a5ee:	2100      	movs	r1, #0
   2a5f0:	2002      	movs	r0, #2
   2a5f2:	4b22      	ldr	r3, [pc, #136]	; (2a67c <system_clock_init+0x29c>)
   2a5f4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2a5f6:	003b      	movs	r3, r7
   2a5f8:	0018      	movs	r0, r3
   2a5fa:	4b14      	ldr	r3, [pc, #80]	; (2a64c <system_clock_init+0x26c>)
   2a5fc:	4798      	blx	r3
   2a5fe:	003b      	movs	r3, r7
   2a600:	2208      	movs	r2, #8
   2a602:	701a      	strb	r2, [r3, #0]
   2a604:	003b      	movs	r3, r7
   2a606:	2201      	movs	r2, #1
   2a608:	605a      	str	r2, [r3, #4]
   2a60a:	003b      	movs	r3, r7
   2a60c:	2200      	movs	r2, #0
   2a60e:	721a      	strb	r2, [r3, #8]
   2a610:	003b      	movs	r3, r7
   2a612:	2201      	movs	r2, #1
   2a614:	725a      	strb	r2, [r3, #9]
   2a616:	003b      	movs	r3, r7
   2a618:	0019      	movs	r1, r3
   2a61a:	2000      	movs	r0, #0
   2a61c:	4b0c      	ldr	r3, [pc, #48]	; (2a650 <system_clock_init+0x270>)
   2a61e:	4798      	blx	r3
   2a620:	2000      	movs	r0, #0
   2a622:	4b0c      	ldr	r3, [pc, #48]	; (2a654 <system_clock_init+0x274>)
   2a624:	4798      	blx	r3
#endif
}
   2a626:	46c0      	nop			; (mov r8, r8)
   2a628:	46bd      	mov	sp, r7
   2a62a:	b026      	add	sp, #152	; 0x98
   2a62c:	bd80      	pop	{r7, pc}
   2a62e:	46c0      	nop			; (mov r8, r8)
   2a630:	40000800 	.word	0x40000800
   2a634:	00029fa1 	.word	0x00029fa1
   2a638:	0002a3a9 	.word	0x0002a3a9
   2a63c:	00029eb1 	.word	0x00029eb1
   2a640:	0002a0f5 	.word	0x0002a0f5
   2a644:	0002a279 	.word	0x0002a279
   2a648:	0002a725 	.word	0x0002a725
   2a64c:	00029e6d 	.word	0x00029e6d
   2a650:	0002a755 	.word	0x0002a755
   2a654:	0002a879 	.word	0x0002a879
   2a658:	00029e9b 	.word	0x00029e9b
   2a65c:	0002a9ad 	.word	0x0002a9ad
   2a660:	0002a9f1 	.word	0x0002a9f1
   2a664:	00029f49 	.word	0x00029f49
   2a668:	000f4240 	.word	0x000f4240
   2a66c:	02dc6c00 	.word	0x02dc6c00
   2a670:	0002a16d 	.word	0x0002a16d
   2a674:	0002a325 	.word	0x0002a325
   2a678:	00029ed5 	.word	0x00029ed5
   2a67c:	00029ef5 	.word	0x00029ef5

0002a680 <system_apb_clock_set_mask>:
{
   2a680:	b580      	push	{r7, lr}
   2a682:	b082      	sub	sp, #8
   2a684:	af00      	add	r7, sp, #0
   2a686:	0002      	movs	r2, r0
   2a688:	6039      	str	r1, [r7, #0]
   2a68a:	1dfb      	adds	r3, r7, #7
   2a68c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a68e:	1dfb      	adds	r3, r7, #7
   2a690:	781b      	ldrb	r3, [r3, #0]
   2a692:	2b01      	cmp	r3, #1
   2a694:	d00a      	beq.n	2a6ac <system_apb_clock_set_mask+0x2c>
   2a696:	2b02      	cmp	r3, #2
   2a698:	d00f      	beq.n	2a6ba <system_apb_clock_set_mask+0x3a>
   2a69a:	2b00      	cmp	r3, #0
   2a69c:	d114      	bne.n	2a6c8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a69e:	4b0e      	ldr	r3, [pc, #56]	; (2a6d8 <system_apb_clock_set_mask+0x58>)
   2a6a0:	4a0d      	ldr	r2, [pc, #52]	; (2a6d8 <system_apb_clock_set_mask+0x58>)
   2a6a2:	6991      	ldr	r1, [r2, #24]
   2a6a4:	683a      	ldr	r2, [r7, #0]
   2a6a6:	430a      	orrs	r2, r1
   2a6a8:	619a      	str	r2, [r3, #24]
			break;
   2a6aa:	e00f      	b.n	2a6cc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a6ac:	4b0a      	ldr	r3, [pc, #40]	; (2a6d8 <system_apb_clock_set_mask+0x58>)
   2a6ae:	4a0a      	ldr	r2, [pc, #40]	; (2a6d8 <system_apb_clock_set_mask+0x58>)
   2a6b0:	69d1      	ldr	r1, [r2, #28]
   2a6b2:	683a      	ldr	r2, [r7, #0]
   2a6b4:	430a      	orrs	r2, r1
   2a6b6:	61da      	str	r2, [r3, #28]
			break;
   2a6b8:	e008      	b.n	2a6cc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a6ba:	4b07      	ldr	r3, [pc, #28]	; (2a6d8 <system_apb_clock_set_mask+0x58>)
   2a6bc:	4a06      	ldr	r2, [pc, #24]	; (2a6d8 <system_apb_clock_set_mask+0x58>)
   2a6be:	6a11      	ldr	r1, [r2, #32]
   2a6c0:	683a      	ldr	r2, [r7, #0]
   2a6c2:	430a      	orrs	r2, r1
   2a6c4:	621a      	str	r2, [r3, #32]
			break;
   2a6c6:	e001      	b.n	2a6cc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a6c8:	2317      	movs	r3, #23
   2a6ca:	e000      	b.n	2a6ce <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a6cc:	2300      	movs	r3, #0
}
   2a6ce:	0018      	movs	r0, r3
   2a6d0:	46bd      	mov	sp, r7
   2a6d2:	b002      	add	sp, #8
   2a6d4:	bd80      	pop	{r7, pc}
   2a6d6:	46c0      	nop			; (mov r8, r8)
   2a6d8:	40000400 	.word	0x40000400

0002a6dc <system_interrupt_enter_critical_section>:
{
   2a6dc:	b580      	push	{r7, lr}
   2a6de:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2a6e0:	4b02      	ldr	r3, [pc, #8]	; (2a6ec <system_interrupt_enter_critical_section+0x10>)
   2a6e2:	4798      	blx	r3
}
   2a6e4:	46c0      	nop			; (mov r8, r8)
   2a6e6:	46bd      	mov	sp, r7
   2a6e8:	bd80      	pop	{r7, pc}
   2a6ea:	46c0      	nop			; (mov r8, r8)
   2a6ec:	00026d19 	.word	0x00026d19

0002a6f0 <system_interrupt_leave_critical_section>:
{
   2a6f0:	b580      	push	{r7, lr}
   2a6f2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2a6f4:	4b02      	ldr	r3, [pc, #8]	; (2a700 <system_interrupt_leave_critical_section+0x10>)
   2a6f6:	4798      	blx	r3
}
   2a6f8:	46c0      	nop			; (mov r8, r8)
   2a6fa:	46bd      	mov	sp, r7
   2a6fc:	bd80      	pop	{r7, pc}
   2a6fe:	46c0      	nop			; (mov r8, r8)
   2a700:	00026d6d 	.word	0x00026d6d

0002a704 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2a704:	b580      	push	{r7, lr}
   2a706:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2a708:	4b05      	ldr	r3, [pc, #20]	; (2a720 <system_gclk_is_syncing+0x1c>)
   2a70a:	785b      	ldrb	r3, [r3, #1]
   2a70c:	b2db      	uxtb	r3, r3
   2a70e:	b25b      	sxtb	r3, r3
   2a710:	2b00      	cmp	r3, #0
   2a712:	da01      	bge.n	2a718 <system_gclk_is_syncing+0x14>
		return true;
   2a714:	2301      	movs	r3, #1
   2a716:	e000      	b.n	2a71a <system_gclk_is_syncing+0x16>
	}

	return false;
   2a718:	2300      	movs	r3, #0
}
   2a71a:	0018      	movs	r0, r3
   2a71c:	46bd      	mov	sp, r7
   2a71e:	bd80      	pop	{r7, pc}
   2a720:	40000c00 	.word	0x40000c00

0002a724 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2a724:	b580      	push	{r7, lr}
   2a726:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2a728:	2108      	movs	r1, #8
   2a72a:	2000      	movs	r0, #0
   2a72c:	4b07      	ldr	r3, [pc, #28]	; (2a74c <system_gclk_init+0x28>)
   2a72e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2a730:	4b07      	ldr	r3, [pc, #28]	; (2a750 <system_gclk_init+0x2c>)
   2a732:	2201      	movs	r2, #1
   2a734:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2a736:	46c0      	nop			; (mov r8, r8)
   2a738:	4b05      	ldr	r3, [pc, #20]	; (2a750 <system_gclk_init+0x2c>)
   2a73a:	781b      	ldrb	r3, [r3, #0]
   2a73c:	b2db      	uxtb	r3, r3
   2a73e:	001a      	movs	r2, r3
   2a740:	2301      	movs	r3, #1
   2a742:	4013      	ands	r3, r2
   2a744:	d1f8      	bne.n	2a738 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2a746:	46c0      	nop			; (mov r8, r8)
   2a748:	46bd      	mov	sp, r7
   2a74a:	bd80      	pop	{r7, pc}
   2a74c:	0002a681 	.word	0x0002a681
   2a750:	40000c00 	.word	0x40000c00

0002a754 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2a754:	b580      	push	{r7, lr}
   2a756:	b086      	sub	sp, #24
   2a758:	af00      	add	r7, sp, #0
   2a75a:	0002      	movs	r2, r0
   2a75c:	6039      	str	r1, [r7, #0]
   2a75e:	1dfb      	adds	r3, r7, #7
   2a760:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2a762:	1dfb      	adds	r3, r7, #7
   2a764:	781b      	ldrb	r3, [r3, #0]
   2a766:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2a768:	1dfb      	adds	r3, r7, #7
   2a76a:	781b      	ldrb	r3, [r3, #0]
   2a76c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2a76e:	683b      	ldr	r3, [r7, #0]
   2a770:	781b      	ldrb	r3, [r3, #0]
   2a772:	021b      	lsls	r3, r3, #8
   2a774:	001a      	movs	r2, r3
   2a776:	697b      	ldr	r3, [r7, #20]
   2a778:	4313      	orrs	r3, r2
   2a77a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2a77c:	683b      	ldr	r3, [r7, #0]
   2a77e:	785b      	ldrb	r3, [r3, #1]
   2a780:	2b00      	cmp	r3, #0
   2a782:	d004      	beq.n	2a78e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2a784:	697b      	ldr	r3, [r7, #20]
   2a786:	2280      	movs	r2, #128	; 0x80
   2a788:	02d2      	lsls	r2, r2, #11
   2a78a:	4313      	orrs	r3, r2
   2a78c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2a78e:	683b      	ldr	r3, [r7, #0]
   2a790:	7a5b      	ldrb	r3, [r3, #9]
   2a792:	2b00      	cmp	r3, #0
   2a794:	d004      	beq.n	2a7a0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2a796:	697b      	ldr	r3, [r7, #20]
   2a798:	2280      	movs	r2, #128	; 0x80
   2a79a:	0312      	lsls	r2, r2, #12
   2a79c:	4313      	orrs	r3, r2
   2a79e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2a7a0:	683b      	ldr	r3, [r7, #0]
   2a7a2:	685b      	ldr	r3, [r3, #4]
   2a7a4:	2b01      	cmp	r3, #1
   2a7a6:	d92c      	bls.n	2a802 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2a7a8:	683b      	ldr	r3, [r7, #0]
   2a7aa:	685a      	ldr	r2, [r3, #4]
   2a7ac:	683b      	ldr	r3, [r7, #0]
   2a7ae:	685b      	ldr	r3, [r3, #4]
   2a7b0:	3b01      	subs	r3, #1
   2a7b2:	4013      	ands	r3, r2
   2a7b4:	d11a      	bne.n	2a7ec <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2a7b6:	2300      	movs	r3, #0
   2a7b8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2a7ba:	2302      	movs	r3, #2
   2a7bc:	60bb      	str	r3, [r7, #8]
   2a7be:	e005      	b.n	2a7cc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2a7c0:	68fb      	ldr	r3, [r7, #12]
   2a7c2:	3301      	adds	r3, #1
   2a7c4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2a7c6:	68bb      	ldr	r3, [r7, #8]
   2a7c8:	005b      	lsls	r3, r3, #1
   2a7ca:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2a7cc:	683b      	ldr	r3, [r7, #0]
   2a7ce:	685a      	ldr	r2, [r3, #4]
   2a7d0:	68bb      	ldr	r3, [r7, #8]
   2a7d2:	429a      	cmp	r2, r3
   2a7d4:	d8f4      	bhi.n	2a7c0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2a7d6:	68fb      	ldr	r3, [r7, #12]
   2a7d8:	021b      	lsls	r3, r3, #8
   2a7da:	693a      	ldr	r2, [r7, #16]
   2a7dc:	4313      	orrs	r3, r2
   2a7de:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2a7e0:	697b      	ldr	r3, [r7, #20]
   2a7e2:	2280      	movs	r2, #128	; 0x80
   2a7e4:	0352      	lsls	r2, r2, #13
   2a7e6:	4313      	orrs	r3, r2
   2a7e8:	617b      	str	r3, [r7, #20]
   2a7ea:	e00a      	b.n	2a802 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2a7ec:	683b      	ldr	r3, [r7, #0]
   2a7ee:	685b      	ldr	r3, [r3, #4]
   2a7f0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2a7f2:	693a      	ldr	r2, [r7, #16]
   2a7f4:	4313      	orrs	r3, r2
   2a7f6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2a7f8:	697b      	ldr	r3, [r7, #20]
   2a7fa:	2280      	movs	r2, #128	; 0x80
   2a7fc:	0292      	lsls	r2, r2, #10
   2a7fe:	4313      	orrs	r3, r2
   2a800:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2a802:	683b      	ldr	r3, [r7, #0]
   2a804:	7a1b      	ldrb	r3, [r3, #8]
   2a806:	2b00      	cmp	r3, #0
   2a808:	d004      	beq.n	2a814 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2a80a:	697b      	ldr	r3, [r7, #20]
   2a80c:	2280      	movs	r2, #128	; 0x80
   2a80e:	0392      	lsls	r2, r2, #14
   2a810:	4313      	orrs	r3, r2
   2a812:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2a814:	46c0      	nop			; (mov r8, r8)
   2a816:	4b13      	ldr	r3, [pc, #76]	; (2a864 <system_gclk_gen_set_config+0x110>)
   2a818:	4798      	blx	r3
   2a81a:	1e03      	subs	r3, r0, #0
   2a81c:	d1fb      	bne.n	2a816 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a81e:	4b12      	ldr	r3, [pc, #72]	; (2a868 <system_gclk_gen_set_config+0x114>)
   2a820:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a822:	4a12      	ldr	r2, [pc, #72]	; (2a86c <system_gclk_gen_set_config+0x118>)
   2a824:	1dfb      	adds	r3, r7, #7
   2a826:	781b      	ldrb	r3, [r3, #0]
   2a828:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2a82a:	46c0      	nop			; (mov r8, r8)
   2a82c:	4b0d      	ldr	r3, [pc, #52]	; (2a864 <system_gclk_gen_set_config+0x110>)
   2a82e:	4798      	blx	r3
   2a830:	1e03      	subs	r3, r0, #0
   2a832:	d1fb      	bne.n	2a82c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2a834:	4b0e      	ldr	r3, [pc, #56]	; (2a870 <system_gclk_gen_set_config+0x11c>)
   2a836:	693a      	ldr	r2, [r7, #16]
   2a838:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2a83a:	46c0      	nop			; (mov r8, r8)
   2a83c:	4b09      	ldr	r3, [pc, #36]	; (2a864 <system_gclk_gen_set_config+0x110>)
   2a83e:	4798      	blx	r3
   2a840:	1e03      	subs	r3, r0, #0
   2a842:	d1fb      	bne.n	2a83c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2a844:	4b0a      	ldr	r3, [pc, #40]	; (2a870 <system_gclk_gen_set_config+0x11c>)
   2a846:	4a0a      	ldr	r2, [pc, #40]	; (2a870 <system_gclk_gen_set_config+0x11c>)
   2a848:	6851      	ldr	r1, [r2, #4]
   2a84a:	2280      	movs	r2, #128	; 0x80
   2a84c:	0252      	lsls	r2, r2, #9
   2a84e:	4011      	ands	r1, r2
   2a850:	697a      	ldr	r2, [r7, #20]
   2a852:	430a      	orrs	r2, r1
   2a854:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a856:	4b07      	ldr	r3, [pc, #28]	; (2a874 <system_gclk_gen_set_config+0x120>)
   2a858:	4798      	blx	r3
}
   2a85a:	46c0      	nop			; (mov r8, r8)
   2a85c:	46bd      	mov	sp, r7
   2a85e:	b006      	add	sp, #24
   2a860:	bd80      	pop	{r7, pc}
   2a862:	46c0      	nop			; (mov r8, r8)
   2a864:	0002a705 	.word	0x0002a705
   2a868:	0002a6dd 	.word	0x0002a6dd
   2a86c:	40000c08 	.word	0x40000c08
   2a870:	40000c00 	.word	0x40000c00
   2a874:	0002a6f1 	.word	0x0002a6f1

0002a878 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2a878:	b580      	push	{r7, lr}
   2a87a:	b082      	sub	sp, #8
   2a87c:	af00      	add	r7, sp, #0
   2a87e:	0002      	movs	r2, r0
   2a880:	1dfb      	adds	r3, r7, #7
   2a882:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a884:	46c0      	nop			; (mov r8, r8)
   2a886:	4b0e      	ldr	r3, [pc, #56]	; (2a8c0 <system_gclk_gen_enable+0x48>)
   2a888:	4798      	blx	r3
   2a88a:	1e03      	subs	r3, r0, #0
   2a88c:	d1fb      	bne.n	2a886 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a88e:	4b0d      	ldr	r3, [pc, #52]	; (2a8c4 <system_gclk_gen_enable+0x4c>)
   2a890:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a892:	4a0d      	ldr	r2, [pc, #52]	; (2a8c8 <system_gclk_gen_enable+0x50>)
   2a894:	1dfb      	adds	r3, r7, #7
   2a896:	781b      	ldrb	r3, [r3, #0]
   2a898:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a89a:	46c0      	nop			; (mov r8, r8)
   2a89c:	4b08      	ldr	r3, [pc, #32]	; (2a8c0 <system_gclk_gen_enable+0x48>)
   2a89e:	4798      	blx	r3
   2a8a0:	1e03      	subs	r3, r0, #0
   2a8a2:	d1fb      	bne.n	2a89c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2a8a4:	4b09      	ldr	r3, [pc, #36]	; (2a8cc <system_gclk_gen_enable+0x54>)
   2a8a6:	4a09      	ldr	r2, [pc, #36]	; (2a8cc <system_gclk_gen_enable+0x54>)
   2a8a8:	6852      	ldr	r2, [r2, #4]
   2a8aa:	2180      	movs	r1, #128	; 0x80
   2a8ac:	0249      	lsls	r1, r1, #9
   2a8ae:	430a      	orrs	r2, r1
   2a8b0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a8b2:	4b07      	ldr	r3, [pc, #28]	; (2a8d0 <system_gclk_gen_enable+0x58>)
   2a8b4:	4798      	blx	r3
}
   2a8b6:	46c0      	nop			; (mov r8, r8)
   2a8b8:	46bd      	mov	sp, r7
   2a8ba:	b002      	add	sp, #8
   2a8bc:	bd80      	pop	{r7, pc}
   2a8be:	46c0      	nop			; (mov r8, r8)
   2a8c0:	0002a705 	.word	0x0002a705
   2a8c4:	0002a6dd 	.word	0x0002a6dd
   2a8c8:	40000c04 	.word	0x40000c04
   2a8cc:	40000c00 	.word	0x40000c00
   2a8d0:	0002a6f1 	.word	0x0002a6f1

0002a8d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2a8d4:	b580      	push	{r7, lr}
   2a8d6:	b086      	sub	sp, #24
   2a8d8:	af00      	add	r7, sp, #0
   2a8da:	0002      	movs	r2, r0
   2a8dc:	1dfb      	adds	r3, r7, #7
   2a8de:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a8e0:	46c0      	nop			; (mov r8, r8)
   2a8e2:	4b2a      	ldr	r3, [pc, #168]	; (2a98c <system_gclk_gen_get_hz+0xb8>)
   2a8e4:	4798      	blx	r3
   2a8e6:	1e03      	subs	r3, r0, #0
   2a8e8:	d1fb      	bne.n	2a8e2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a8ea:	4b29      	ldr	r3, [pc, #164]	; (2a990 <system_gclk_gen_get_hz+0xbc>)
   2a8ec:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a8ee:	4a29      	ldr	r2, [pc, #164]	; (2a994 <system_gclk_gen_get_hz+0xc0>)
   2a8f0:	1dfb      	adds	r3, r7, #7
   2a8f2:	781b      	ldrb	r3, [r3, #0]
   2a8f4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a8f6:	46c0      	nop			; (mov r8, r8)
   2a8f8:	4b24      	ldr	r3, [pc, #144]	; (2a98c <system_gclk_gen_get_hz+0xb8>)
   2a8fa:	4798      	blx	r3
   2a8fc:	1e03      	subs	r3, r0, #0
   2a8fe:	d1fb      	bne.n	2a8f8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2a900:	4b25      	ldr	r3, [pc, #148]	; (2a998 <system_gclk_gen_get_hz+0xc4>)
   2a902:	685b      	ldr	r3, [r3, #4]
   2a904:	04db      	lsls	r3, r3, #19
   2a906:	0edb      	lsrs	r3, r3, #27
   2a908:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2a90a:	0018      	movs	r0, r3
   2a90c:	4b23      	ldr	r3, [pc, #140]	; (2a99c <system_gclk_gen_get_hz+0xc8>)
   2a90e:	4798      	blx	r3
   2a910:	0003      	movs	r3, r0
   2a912:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a914:	4a1f      	ldr	r2, [pc, #124]	; (2a994 <system_gclk_gen_get_hz+0xc0>)
   2a916:	1dfb      	adds	r3, r7, #7
   2a918:	781b      	ldrb	r3, [r3, #0]
   2a91a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2a91c:	4b1e      	ldr	r3, [pc, #120]	; (2a998 <system_gclk_gen_get_hz+0xc4>)
   2a91e:	685b      	ldr	r3, [r3, #4]
   2a920:	02db      	lsls	r3, r3, #11
   2a922:	0fdb      	lsrs	r3, r3, #31
   2a924:	b2da      	uxtb	r2, r3
   2a926:	2313      	movs	r3, #19
   2a928:	18fb      	adds	r3, r7, r3
   2a92a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a92c:	4a1c      	ldr	r2, [pc, #112]	; (2a9a0 <system_gclk_gen_get_hz+0xcc>)
   2a92e:	1dfb      	adds	r3, r7, #7
   2a930:	781b      	ldrb	r3, [r3, #0]
   2a932:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a934:	46c0      	nop			; (mov r8, r8)
   2a936:	4b15      	ldr	r3, [pc, #84]	; (2a98c <system_gclk_gen_get_hz+0xb8>)
   2a938:	4798      	blx	r3
   2a93a:	1e03      	subs	r3, r0, #0
   2a93c:	d1fb      	bne.n	2a936 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2a93e:	4b16      	ldr	r3, [pc, #88]	; (2a998 <system_gclk_gen_get_hz+0xc4>)
   2a940:	689b      	ldr	r3, [r3, #8]
   2a942:	021b      	lsls	r3, r3, #8
   2a944:	0c1b      	lsrs	r3, r3, #16
   2a946:	b29b      	uxth	r3, r3
   2a948:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2a94a:	4b16      	ldr	r3, [pc, #88]	; (2a9a4 <system_gclk_gen_get_hz+0xd0>)
   2a94c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2a94e:	2313      	movs	r3, #19
   2a950:	18fb      	adds	r3, r7, r3
   2a952:	781b      	ldrb	r3, [r3, #0]
   2a954:	2b00      	cmp	r3, #0
   2a956:	d109      	bne.n	2a96c <system_gclk_gen_get_hz+0x98>
   2a958:	68fb      	ldr	r3, [r7, #12]
   2a95a:	2b01      	cmp	r3, #1
   2a95c:	d906      	bls.n	2a96c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2a95e:	4b12      	ldr	r3, [pc, #72]	; (2a9a8 <system_gclk_gen_get_hz+0xd4>)
   2a960:	68f9      	ldr	r1, [r7, #12]
   2a962:	6978      	ldr	r0, [r7, #20]
   2a964:	4798      	blx	r3
   2a966:	0003      	movs	r3, r0
   2a968:	617b      	str	r3, [r7, #20]
   2a96a:	e00a      	b.n	2a982 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2a96c:	2313      	movs	r3, #19
   2a96e:	18fb      	adds	r3, r7, r3
   2a970:	781b      	ldrb	r3, [r3, #0]
   2a972:	2b00      	cmp	r3, #0
   2a974:	d005      	beq.n	2a982 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2a976:	68fb      	ldr	r3, [r7, #12]
   2a978:	3301      	adds	r3, #1
   2a97a:	697a      	ldr	r2, [r7, #20]
   2a97c:	40da      	lsrs	r2, r3
   2a97e:	0013      	movs	r3, r2
   2a980:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2a982:	697b      	ldr	r3, [r7, #20]
}
   2a984:	0018      	movs	r0, r3
   2a986:	46bd      	mov	sp, r7
   2a988:	b006      	add	sp, #24
   2a98a:	bd80      	pop	{r7, pc}
   2a98c:	0002a705 	.word	0x0002a705
   2a990:	0002a6dd 	.word	0x0002a6dd
   2a994:	40000c04 	.word	0x40000c04
   2a998:	40000c00 	.word	0x40000c00
   2a99c:	0002a035 	.word	0x0002a035
   2a9a0:	40000c08 	.word	0x40000c08
   2a9a4:	0002a6f1 	.word	0x0002a6f1
   2a9a8:	00033569 	.word	0x00033569

0002a9ac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2a9ac:	b580      	push	{r7, lr}
   2a9ae:	b084      	sub	sp, #16
   2a9b0:	af00      	add	r7, sp, #0
   2a9b2:	0002      	movs	r2, r0
   2a9b4:	6039      	str	r1, [r7, #0]
   2a9b6:	1dfb      	adds	r3, r7, #7
   2a9b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2a9ba:	1dfb      	adds	r3, r7, #7
   2a9bc:	781b      	ldrb	r3, [r3, #0]
   2a9be:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2a9c0:	683b      	ldr	r3, [r7, #0]
   2a9c2:	781b      	ldrb	r3, [r3, #0]
   2a9c4:	021b      	lsls	r3, r3, #8
   2a9c6:	001a      	movs	r2, r3
   2a9c8:	68fb      	ldr	r3, [r7, #12]
   2a9ca:	4313      	orrs	r3, r2
   2a9cc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2a9ce:	1dfb      	adds	r3, r7, #7
   2a9d0:	781b      	ldrb	r3, [r3, #0]
   2a9d2:	0018      	movs	r0, r3
   2a9d4:	4b04      	ldr	r3, [pc, #16]	; (2a9e8 <system_gclk_chan_set_config+0x3c>)
   2a9d6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2a9d8:	4b04      	ldr	r3, [pc, #16]	; (2a9ec <system_gclk_chan_set_config+0x40>)
   2a9da:	68fa      	ldr	r2, [r7, #12]
   2a9dc:	b292      	uxth	r2, r2
   2a9de:	805a      	strh	r2, [r3, #2]
}
   2a9e0:	46c0      	nop			; (mov r8, r8)
   2a9e2:	46bd      	mov	sp, r7
   2a9e4:	b004      	add	sp, #16
   2a9e6:	bd80      	pop	{r7, pc}
   2a9e8:	0002aa39 	.word	0x0002aa39
   2a9ec:	40000c00 	.word	0x40000c00

0002a9f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2a9f0:	b580      	push	{r7, lr}
   2a9f2:	b082      	sub	sp, #8
   2a9f4:	af00      	add	r7, sp, #0
   2a9f6:	0002      	movs	r2, r0
   2a9f8:	1dfb      	adds	r3, r7, #7
   2a9fa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2a9fc:	4b0a      	ldr	r3, [pc, #40]	; (2aa28 <system_gclk_chan_enable+0x38>)
   2a9fe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2aa00:	4a0a      	ldr	r2, [pc, #40]	; (2aa2c <system_gclk_chan_enable+0x3c>)
   2aa02:	1dfb      	adds	r3, r7, #7
   2aa04:	781b      	ldrb	r3, [r3, #0]
   2aa06:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2aa08:	4909      	ldr	r1, [pc, #36]	; (2aa30 <system_gclk_chan_enable+0x40>)
   2aa0a:	4b09      	ldr	r3, [pc, #36]	; (2aa30 <system_gclk_chan_enable+0x40>)
   2aa0c:	885b      	ldrh	r3, [r3, #2]
   2aa0e:	b29b      	uxth	r3, r3
   2aa10:	2280      	movs	r2, #128	; 0x80
   2aa12:	01d2      	lsls	r2, r2, #7
   2aa14:	4313      	orrs	r3, r2
   2aa16:	b29b      	uxth	r3, r3
   2aa18:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2aa1a:	4b06      	ldr	r3, [pc, #24]	; (2aa34 <system_gclk_chan_enable+0x44>)
   2aa1c:	4798      	blx	r3
}
   2aa1e:	46c0      	nop			; (mov r8, r8)
   2aa20:	46bd      	mov	sp, r7
   2aa22:	b002      	add	sp, #8
   2aa24:	bd80      	pop	{r7, pc}
   2aa26:	46c0      	nop			; (mov r8, r8)
   2aa28:	0002a6dd 	.word	0x0002a6dd
   2aa2c:	40000c02 	.word	0x40000c02
   2aa30:	40000c00 	.word	0x40000c00
   2aa34:	0002a6f1 	.word	0x0002a6f1

0002aa38 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2aa38:	b580      	push	{r7, lr}
   2aa3a:	b084      	sub	sp, #16
   2aa3c:	af00      	add	r7, sp, #0
   2aa3e:	0002      	movs	r2, r0
   2aa40:	1dfb      	adds	r3, r7, #7
   2aa42:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2aa44:	4b1c      	ldr	r3, [pc, #112]	; (2aab8 <system_gclk_chan_disable+0x80>)
   2aa46:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2aa48:	4a1c      	ldr	r2, [pc, #112]	; (2aabc <system_gclk_chan_disable+0x84>)
   2aa4a:	1dfb      	adds	r3, r7, #7
   2aa4c:	781b      	ldrb	r3, [r3, #0]
   2aa4e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2aa50:	4b1b      	ldr	r3, [pc, #108]	; (2aac0 <system_gclk_chan_disable+0x88>)
   2aa52:	885b      	ldrh	r3, [r3, #2]
   2aa54:	051b      	lsls	r3, r3, #20
   2aa56:	0f1b      	lsrs	r3, r3, #28
   2aa58:	b2db      	uxtb	r3, r3
   2aa5a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2aa5c:	4a18      	ldr	r2, [pc, #96]	; (2aac0 <system_gclk_chan_disable+0x88>)
   2aa5e:	8853      	ldrh	r3, [r2, #2]
   2aa60:	4918      	ldr	r1, [pc, #96]	; (2aac4 <system_gclk_chan_disable+0x8c>)
   2aa62:	400b      	ands	r3, r1
   2aa64:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2aa66:	4a16      	ldr	r2, [pc, #88]	; (2aac0 <system_gclk_chan_disable+0x88>)
   2aa68:	4b15      	ldr	r3, [pc, #84]	; (2aac0 <system_gclk_chan_disable+0x88>)
   2aa6a:	885b      	ldrh	r3, [r3, #2]
   2aa6c:	b29b      	uxth	r3, r3
   2aa6e:	4916      	ldr	r1, [pc, #88]	; (2aac8 <system_gclk_chan_disable+0x90>)
   2aa70:	400b      	ands	r3, r1
   2aa72:	b29b      	uxth	r3, r3
   2aa74:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2aa76:	46c0      	nop			; (mov r8, r8)
   2aa78:	4b11      	ldr	r3, [pc, #68]	; (2aac0 <system_gclk_chan_disable+0x88>)
   2aa7a:	885b      	ldrh	r3, [r3, #2]
   2aa7c:	b29b      	uxth	r3, r3
   2aa7e:	001a      	movs	r2, r3
   2aa80:	2380      	movs	r3, #128	; 0x80
   2aa82:	01db      	lsls	r3, r3, #7
   2aa84:	4013      	ands	r3, r2
   2aa86:	d1f7      	bne.n	2aa78 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2aa88:	4a0d      	ldr	r2, [pc, #52]	; (2aac0 <system_gclk_chan_disable+0x88>)
   2aa8a:	68fb      	ldr	r3, [r7, #12]
   2aa8c:	b2db      	uxtb	r3, r3
   2aa8e:	1c19      	adds	r1, r3, #0
   2aa90:	230f      	movs	r3, #15
   2aa92:	400b      	ands	r3, r1
   2aa94:	b2d9      	uxtb	r1, r3
   2aa96:	8853      	ldrh	r3, [r2, #2]
   2aa98:	1c08      	adds	r0, r1, #0
   2aa9a:	210f      	movs	r1, #15
   2aa9c:	4001      	ands	r1, r0
   2aa9e:	0208      	lsls	r0, r1, #8
   2aaa0:	4908      	ldr	r1, [pc, #32]	; (2aac4 <system_gclk_chan_disable+0x8c>)
   2aaa2:	400b      	ands	r3, r1
   2aaa4:	1c19      	adds	r1, r3, #0
   2aaa6:	1c03      	adds	r3, r0, #0
   2aaa8:	430b      	orrs	r3, r1
   2aaaa:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2aaac:	4b07      	ldr	r3, [pc, #28]	; (2aacc <system_gclk_chan_disable+0x94>)
   2aaae:	4798      	blx	r3
}
   2aab0:	46c0      	nop			; (mov r8, r8)
   2aab2:	46bd      	mov	sp, r7
   2aab4:	b004      	add	sp, #16
   2aab6:	bd80      	pop	{r7, pc}
   2aab8:	0002a6dd 	.word	0x0002a6dd
   2aabc:	40000c02 	.word	0x40000c02
   2aac0:	40000c00 	.word	0x40000c00
   2aac4:	fffff0ff 	.word	0xfffff0ff
   2aac8:	ffffbfff 	.word	0xffffbfff
   2aacc:	0002a6f1 	.word	0x0002a6f1

0002aad0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2aad0:	b580      	push	{r7, lr}
   2aad2:	b084      	sub	sp, #16
   2aad4:	af00      	add	r7, sp, #0
   2aad6:	0002      	movs	r2, r0
   2aad8:	1dfb      	adds	r3, r7, #7
   2aada:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2aadc:	4b0d      	ldr	r3, [pc, #52]	; (2ab14 <system_gclk_chan_get_hz+0x44>)
   2aade:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2aae0:	4a0d      	ldr	r2, [pc, #52]	; (2ab18 <system_gclk_chan_get_hz+0x48>)
   2aae2:	1dfb      	adds	r3, r7, #7
   2aae4:	781b      	ldrb	r3, [r3, #0]
   2aae6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2aae8:	4b0c      	ldr	r3, [pc, #48]	; (2ab1c <system_gclk_chan_get_hz+0x4c>)
   2aaea:	885b      	ldrh	r3, [r3, #2]
   2aaec:	051b      	lsls	r3, r3, #20
   2aaee:	0f1b      	lsrs	r3, r3, #28
   2aaf0:	b2da      	uxtb	r2, r3
   2aaf2:	230f      	movs	r3, #15
   2aaf4:	18fb      	adds	r3, r7, r3
   2aaf6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2aaf8:	4b09      	ldr	r3, [pc, #36]	; (2ab20 <system_gclk_chan_get_hz+0x50>)
   2aafa:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2aafc:	230f      	movs	r3, #15
   2aafe:	18fb      	adds	r3, r7, r3
   2ab00:	781b      	ldrb	r3, [r3, #0]
   2ab02:	0018      	movs	r0, r3
   2ab04:	4b07      	ldr	r3, [pc, #28]	; (2ab24 <system_gclk_chan_get_hz+0x54>)
   2ab06:	4798      	blx	r3
   2ab08:	0003      	movs	r3, r0
}
   2ab0a:	0018      	movs	r0, r3
   2ab0c:	46bd      	mov	sp, r7
   2ab0e:	b004      	add	sp, #16
   2ab10:	bd80      	pop	{r7, pc}
   2ab12:	46c0      	nop			; (mov r8, r8)
   2ab14:	0002a6dd 	.word	0x0002a6dd
   2ab18:	40000c02 	.word	0x40000c02
   2ab1c:	40000c00 	.word	0x40000c00
   2ab20:	0002a6f1 	.word	0x0002a6f1
   2ab24:	0002a8d5 	.word	0x0002a8d5

0002ab28 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2ab28:	b580      	push	{r7, lr}
   2ab2a:	b084      	sub	sp, #16
   2ab2c:	af00      	add	r7, sp, #0
   2ab2e:	0002      	movs	r2, r0
   2ab30:	1dfb      	adds	r3, r7, #7
   2ab32:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2ab34:	230f      	movs	r3, #15
   2ab36:	18fb      	adds	r3, r7, r3
   2ab38:	2200      	movs	r2, #0
   2ab3a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2ab3c:	1dfb      	adds	r3, r7, #7
   2ab3e:	781b      	ldrb	r3, [r3, #0]
   2ab40:	2b7f      	cmp	r3, #127	; 0x7f
   2ab42:	d80b      	bhi.n	2ab5c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2ab44:	4a13      	ldr	r2, [pc, #76]	; (2ab94 <system_interrupt_clear_pending+0x6c>)
   2ab46:	1dfb      	adds	r3, r7, #7
   2ab48:	781b      	ldrb	r3, [r3, #0]
   2ab4a:	b25b      	sxtb	r3, r3
   2ab4c:	2101      	movs	r1, #1
   2ab4e:	4099      	lsls	r1, r3
   2ab50:	000b      	movs	r3, r1
   2ab52:	0019      	movs	r1, r3
   2ab54:	23c0      	movs	r3, #192	; 0xc0
   2ab56:	005b      	lsls	r3, r3, #1
   2ab58:	50d1      	str	r1, [r2, r3]
   2ab5a:	e014      	b.n	2ab86 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2ab5c:	1dfb      	adds	r3, r7, #7
   2ab5e:	781b      	ldrb	r3, [r3, #0]
   2ab60:	b25b      	sxtb	r3, r3
   2ab62:	330e      	adds	r3, #14
   2ab64:	d101      	bne.n	2ab6a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2ab66:	2317      	movs	r3, #23
   2ab68:	e010      	b.n	2ab8c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2ab6a:	1dfb      	adds	r3, r7, #7
   2ab6c:	781b      	ldrb	r3, [r3, #0]
   2ab6e:	b25b      	sxtb	r3, r3
   2ab70:	3301      	adds	r3, #1
   2ab72:	d104      	bne.n	2ab7e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2ab74:	4b08      	ldr	r3, [pc, #32]	; (2ab98 <system_interrupt_clear_pending+0x70>)
   2ab76:	2280      	movs	r2, #128	; 0x80
   2ab78:	0492      	lsls	r2, r2, #18
   2ab7a:	605a      	str	r2, [r3, #4]
   2ab7c:	e003      	b.n	2ab86 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2ab7e:	230f      	movs	r3, #15
   2ab80:	18fb      	adds	r3, r7, r3
   2ab82:	2217      	movs	r2, #23
   2ab84:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2ab86:	230f      	movs	r3, #15
   2ab88:	18fb      	adds	r3, r7, r3
   2ab8a:	781b      	ldrb	r3, [r3, #0]
}
   2ab8c:	0018      	movs	r0, r3
   2ab8e:	46bd      	mov	sp, r7
   2ab90:	b004      	add	sp, #16
   2ab92:	bd80      	pop	{r7, pc}
   2ab94:	e000e100 	.word	0xe000e100
   2ab98:	e000ed00 	.word	0xe000ed00

0002ab9c <system_pinmux_get_group_from_gpio_pin>:
{
   2ab9c:	b580      	push	{r7, lr}
   2ab9e:	b084      	sub	sp, #16
   2aba0:	af00      	add	r7, sp, #0
   2aba2:	0002      	movs	r2, r0
   2aba4:	1dfb      	adds	r3, r7, #7
   2aba6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2aba8:	230f      	movs	r3, #15
   2abaa:	18fb      	adds	r3, r7, r3
   2abac:	1dfa      	adds	r2, r7, #7
   2abae:	7812      	ldrb	r2, [r2, #0]
   2abb0:	09d2      	lsrs	r2, r2, #7
   2abb2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2abb4:	230e      	movs	r3, #14
   2abb6:	18fb      	adds	r3, r7, r3
   2abb8:	1dfa      	adds	r2, r7, #7
   2abba:	7812      	ldrb	r2, [r2, #0]
   2abbc:	0952      	lsrs	r2, r2, #5
   2abbe:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2abc0:	4b0d      	ldr	r3, [pc, #52]	; (2abf8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2abc2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2abc4:	230f      	movs	r3, #15
   2abc6:	18fb      	adds	r3, r7, r3
   2abc8:	781b      	ldrb	r3, [r3, #0]
   2abca:	2b00      	cmp	r3, #0
   2abcc:	d10f      	bne.n	2abee <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2abce:	230f      	movs	r3, #15
   2abd0:	18fb      	adds	r3, r7, r3
   2abd2:	781b      	ldrb	r3, [r3, #0]
   2abd4:	009b      	lsls	r3, r3, #2
   2abd6:	2210      	movs	r2, #16
   2abd8:	4694      	mov	ip, r2
   2abda:	44bc      	add	ip, r7
   2abdc:	4463      	add	r3, ip
   2abde:	3b08      	subs	r3, #8
   2abe0:	681a      	ldr	r2, [r3, #0]
   2abe2:	230e      	movs	r3, #14
   2abe4:	18fb      	adds	r3, r7, r3
   2abe6:	781b      	ldrb	r3, [r3, #0]
   2abe8:	01db      	lsls	r3, r3, #7
   2abea:	18d3      	adds	r3, r2, r3
   2abec:	e000      	b.n	2abf0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2abee:	2300      	movs	r3, #0
}
   2abf0:	0018      	movs	r0, r3
   2abf2:	46bd      	mov	sp, r7
   2abf4:	b004      	add	sp, #16
   2abf6:	bd80      	pop	{r7, pc}
   2abf8:	41004400 	.word	0x41004400

0002abfc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2abfc:	b580      	push	{r7, lr}
   2abfe:	b088      	sub	sp, #32
   2ac00:	af00      	add	r7, sp, #0
   2ac02:	60f8      	str	r0, [r7, #12]
   2ac04:	60b9      	str	r1, [r7, #8]
   2ac06:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2ac08:	2300      	movs	r3, #0
   2ac0a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2ac0c:	687b      	ldr	r3, [r7, #4]
   2ac0e:	78db      	ldrb	r3, [r3, #3]
   2ac10:	2201      	movs	r2, #1
   2ac12:	4053      	eors	r3, r2
   2ac14:	b2db      	uxtb	r3, r3
   2ac16:	2b00      	cmp	r3, #0
   2ac18:	d035      	beq.n	2ac86 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2ac1a:	687b      	ldr	r3, [r7, #4]
   2ac1c:	781b      	ldrb	r3, [r3, #0]
   2ac1e:	2b80      	cmp	r3, #128	; 0x80
   2ac20:	d00b      	beq.n	2ac3a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2ac22:	69fb      	ldr	r3, [r7, #28]
   2ac24:	2280      	movs	r2, #128	; 0x80
   2ac26:	0252      	lsls	r2, r2, #9
   2ac28:	4313      	orrs	r3, r2
   2ac2a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2ac2c:	687b      	ldr	r3, [r7, #4]
   2ac2e:	781b      	ldrb	r3, [r3, #0]
   2ac30:	061b      	lsls	r3, r3, #24
   2ac32:	001a      	movs	r2, r3
   2ac34:	69fb      	ldr	r3, [r7, #28]
   2ac36:	4313      	orrs	r3, r2
   2ac38:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2ac3a:	687b      	ldr	r3, [r7, #4]
   2ac3c:	785b      	ldrb	r3, [r3, #1]
   2ac3e:	2b00      	cmp	r3, #0
   2ac40:	d003      	beq.n	2ac4a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2ac42:	687b      	ldr	r3, [r7, #4]
   2ac44:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2ac46:	2b02      	cmp	r3, #2
   2ac48:	d110      	bne.n	2ac6c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2ac4a:	69fb      	ldr	r3, [r7, #28]
   2ac4c:	2280      	movs	r2, #128	; 0x80
   2ac4e:	0292      	lsls	r2, r2, #10
   2ac50:	4313      	orrs	r3, r2
   2ac52:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2ac54:	687b      	ldr	r3, [r7, #4]
   2ac56:	789b      	ldrb	r3, [r3, #2]
   2ac58:	2b00      	cmp	r3, #0
   2ac5a:	d004      	beq.n	2ac66 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2ac5c:	69fb      	ldr	r3, [r7, #28]
   2ac5e:	2280      	movs	r2, #128	; 0x80
   2ac60:	02d2      	lsls	r2, r2, #11
   2ac62:	4313      	orrs	r3, r2
   2ac64:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2ac66:	68fb      	ldr	r3, [r7, #12]
   2ac68:	68ba      	ldr	r2, [r7, #8]
   2ac6a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ac6c:	687b      	ldr	r3, [r7, #4]
   2ac6e:	785b      	ldrb	r3, [r3, #1]
   2ac70:	2b01      	cmp	r3, #1
   2ac72:	d003      	beq.n	2ac7c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2ac74:	687b      	ldr	r3, [r7, #4]
   2ac76:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ac78:	2b02      	cmp	r3, #2
   2ac7a:	d107      	bne.n	2ac8c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2ac7c:	69fb      	ldr	r3, [r7, #28]
   2ac7e:	4a22      	ldr	r2, [pc, #136]	; (2ad08 <_system_pinmux_config+0x10c>)
   2ac80:	4013      	ands	r3, r2
   2ac82:	61fb      	str	r3, [r7, #28]
   2ac84:	e002      	b.n	2ac8c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2ac86:	68fb      	ldr	r3, [r7, #12]
   2ac88:	68ba      	ldr	r2, [r7, #8]
   2ac8a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2ac8c:	68bb      	ldr	r3, [r7, #8]
   2ac8e:	041b      	lsls	r3, r3, #16
   2ac90:	0c1b      	lsrs	r3, r3, #16
   2ac92:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2ac94:	68bb      	ldr	r3, [r7, #8]
   2ac96:	0c1b      	lsrs	r3, r3, #16
   2ac98:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ac9a:	69ba      	ldr	r2, [r7, #24]
   2ac9c:	69fb      	ldr	r3, [r7, #28]
   2ac9e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2aca0:	22a0      	movs	r2, #160	; 0xa0
   2aca2:	05d2      	lsls	r2, r2, #23
   2aca4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2aca6:	68fb      	ldr	r3, [r7, #12]
   2aca8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2acaa:	697a      	ldr	r2, [r7, #20]
   2acac:	69fb      	ldr	r3, [r7, #28]
   2acae:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2acb0:	22d0      	movs	r2, #208	; 0xd0
   2acb2:	0612      	lsls	r2, r2, #24
   2acb4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2acb6:	68fb      	ldr	r3, [r7, #12]
   2acb8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2acba:	687b      	ldr	r3, [r7, #4]
   2acbc:	78db      	ldrb	r3, [r3, #3]
   2acbe:	2201      	movs	r2, #1
   2acc0:	4053      	eors	r3, r2
   2acc2:	b2db      	uxtb	r3, r3
   2acc4:	2b00      	cmp	r3, #0
   2acc6:	d01a      	beq.n	2acfe <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2acc8:	69fa      	ldr	r2, [r7, #28]
   2acca:	2380      	movs	r3, #128	; 0x80
   2accc:	02db      	lsls	r3, r3, #11
   2acce:	4013      	ands	r3, r2
   2acd0:	d00a      	beq.n	2ace8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2acd2:	687b      	ldr	r3, [r7, #4]
   2acd4:	789b      	ldrb	r3, [r3, #2]
   2acd6:	2b01      	cmp	r3, #1
   2acd8:	d103      	bne.n	2ace2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2acda:	68fb      	ldr	r3, [r7, #12]
   2acdc:	68ba      	ldr	r2, [r7, #8]
   2acde:	619a      	str	r2, [r3, #24]
   2ace0:	e002      	b.n	2ace8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2ace2:	68fb      	ldr	r3, [r7, #12]
   2ace4:	68ba      	ldr	r2, [r7, #8]
   2ace6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ace8:	687b      	ldr	r3, [r7, #4]
   2acea:	785b      	ldrb	r3, [r3, #1]
   2acec:	2b01      	cmp	r3, #1
   2acee:	d003      	beq.n	2acf8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2acf0:	687b      	ldr	r3, [r7, #4]
   2acf2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2acf4:	2b02      	cmp	r3, #2
   2acf6:	d102      	bne.n	2acfe <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2acf8:	68fb      	ldr	r3, [r7, #12]
   2acfa:	68ba      	ldr	r2, [r7, #8]
   2acfc:	609a      	str	r2, [r3, #8]
		}
	}
}
   2acfe:	46c0      	nop			; (mov r8, r8)
   2ad00:	46bd      	mov	sp, r7
   2ad02:	b008      	add	sp, #32
   2ad04:	bd80      	pop	{r7, pc}
   2ad06:	46c0      	nop			; (mov r8, r8)
   2ad08:	fffbffff 	.word	0xfffbffff

0002ad0c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2ad0c:	b580      	push	{r7, lr}
   2ad0e:	b084      	sub	sp, #16
   2ad10:	af00      	add	r7, sp, #0
   2ad12:	0002      	movs	r2, r0
   2ad14:	6039      	str	r1, [r7, #0]
   2ad16:	1dfb      	adds	r3, r7, #7
   2ad18:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2ad1a:	1dfb      	adds	r3, r7, #7
   2ad1c:	781b      	ldrb	r3, [r3, #0]
   2ad1e:	0018      	movs	r0, r3
   2ad20:	4b0a      	ldr	r3, [pc, #40]	; (2ad4c <system_pinmux_pin_set_config+0x40>)
   2ad22:	4798      	blx	r3
   2ad24:	0003      	movs	r3, r0
   2ad26:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2ad28:	1dfb      	adds	r3, r7, #7
   2ad2a:	781b      	ldrb	r3, [r3, #0]
   2ad2c:	221f      	movs	r2, #31
   2ad2e:	4013      	ands	r3, r2
   2ad30:	2201      	movs	r2, #1
   2ad32:	409a      	lsls	r2, r3
   2ad34:	0013      	movs	r3, r2
   2ad36:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2ad38:	683a      	ldr	r2, [r7, #0]
   2ad3a:	68b9      	ldr	r1, [r7, #8]
   2ad3c:	68fb      	ldr	r3, [r7, #12]
   2ad3e:	0018      	movs	r0, r3
   2ad40:	4b03      	ldr	r3, [pc, #12]	; (2ad50 <system_pinmux_pin_set_config+0x44>)
   2ad42:	4798      	blx	r3
}
   2ad44:	46c0      	nop			; (mov r8, r8)
   2ad46:	46bd      	mov	sp, r7
   2ad48:	b004      	add	sp, #16
   2ad4a:	bd80      	pop	{r7, pc}
   2ad4c:	0002ab9d 	.word	0x0002ab9d
   2ad50:	0002abfd 	.word	0x0002abfd

0002ad54 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2ad54:	b580      	push	{r7, lr}
   2ad56:	af00      	add	r7, sp, #0
	return;
   2ad58:	46c0      	nop			; (mov r8, r8)
}
   2ad5a:	46bd      	mov	sp, r7
   2ad5c:	bd80      	pop	{r7, pc}
	...

0002ad60 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2ad60:	b580      	push	{r7, lr}
   2ad62:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2ad64:	4b06      	ldr	r3, [pc, #24]	; (2ad80 <system_init+0x20>)
   2ad66:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2ad68:	4b06      	ldr	r3, [pc, #24]	; (2ad84 <system_init+0x24>)
   2ad6a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2ad6c:	4b06      	ldr	r3, [pc, #24]	; (2ad88 <system_init+0x28>)
   2ad6e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2ad70:	4b06      	ldr	r3, [pc, #24]	; (2ad8c <system_init+0x2c>)
   2ad72:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2ad74:	4b06      	ldr	r3, [pc, #24]	; (2ad90 <system_init+0x30>)
   2ad76:	4798      	blx	r3
}
   2ad78:	46c0      	nop			; (mov r8, r8)
   2ad7a:	46bd      	mov	sp, r7
   2ad7c:	bd80      	pop	{r7, pc}
   2ad7e:	46c0      	nop			; (mov r8, r8)
   2ad80:	0002a3e1 	.word	0x0002a3e1
   2ad84:	00026ea9 	.word	0x00026ea9
   2ad88:	000132c1 	.word	0x000132c1
   2ad8c:	00027281 	.word	0x00027281
   2ad90:	0002ad55 	.word	0x0002ad55

0002ad94 <system_gclk_chan_get_config_defaults>:
{
   2ad94:	b580      	push	{r7, lr}
   2ad96:	b082      	sub	sp, #8
   2ad98:	af00      	add	r7, sp, #0
   2ad9a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2ad9c:	687b      	ldr	r3, [r7, #4]
   2ad9e:	2200      	movs	r2, #0
   2ada0:	701a      	strb	r2, [r3, #0]
}
   2ada2:	46c0      	nop			; (mov r8, r8)
   2ada4:	46bd      	mov	sp, r7
   2ada6:	b002      	add	sp, #8
   2ada8:	bd80      	pop	{r7, pc}
	...

0002adac <system_apb_clock_set_mask>:
{
   2adac:	b580      	push	{r7, lr}
   2adae:	b082      	sub	sp, #8
   2adb0:	af00      	add	r7, sp, #0
   2adb2:	0002      	movs	r2, r0
   2adb4:	6039      	str	r1, [r7, #0]
   2adb6:	1dfb      	adds	r3, r7, #7
   2adb8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2adba:	1dfb      	adds	r3, r7, #7
   2adbc:	781b      	ldrb	r3, [r3, #0]
   2adbe:	2b01      	cmp	r3, #1
   2adc0:	d00a      	beq.n	2add8 <system_apb_clock_set_mask+0x2c>
   2adc2:	2b02      	cmp	r3, #2
   2adc4:	d00f      	beq.n	2ade6 <system_apb_clock_set_mask+0x3a>
   2adc6:	2b00      	cmp	r3, #0
   2adc8:	d114      	bne.n	2adf4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2adca:	4b0e      	ldr	r3, [pc, #56]	; (2ae04 <system_apb_clock_set_mask+0x58>)
   2adcc:	4a0d      	ldr	r2, [pc, #52]	; (2ae04 <system_apb_clock_set_mask+0x58>)
   2adce:	6991      	ldr	r1, [r2, #24]
   2add0:	683a      	ldr	r2, [r7, #0]
   2add2:	430a      	orrs	r2, r1
   2add4:	619a      	str	r2, [r3, #24]
			break;
   2add6:	e00f      	b.n	2adf8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2add8:	4b0a      	ldr	r3, [pc, #40]	; (2ae04 <system_apb_clock_set_mask+0x58>)
   2adda:	4a0a      	ldr	r2, [pc, #40]	; (2ae04 <system_apb_clock_set_mask+0x58>)
   2addc:	69d1      	ldr	r1, [r2, #28]
   2adde:	683a      	ldr	r2, [r7, #0]
   2ade0:	430a      	orrs	r2, r1
   2ade2:	61da      	str	r2, [r3, #28]
			break;
   2ade4:	e008      	b.n	2adf8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2ade6:	4b07      	ldr	r3, [pc, #28]	; (2ae04 <system_apb_clock_set_mask+0x58>)
   2ade8:	4a06      	ldr	r2, [pc, #24]	; (2ae04 <system_apb_clock_set_mask+0x58>)
   2adea:	6a11      	ldr	r1, [r2, #32]
   2adec:	683a      	ldr	r2, [r7, #0]
   2adee:	430a      	orrs	r2, r1
   2adf0:	621a      	str	r2, [r3, #32]
			break;
   2adf2:	e001      	b.n	2adf8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2adf4:	2317      	movs	r3, #23
   2adf6:	e000      	b.n	2adfa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2adf8:	2300      	movs	r3, #0
}
   2adfa:	0018      	movs	r0, r3
   2adfc:	46bd      	mov	sp, r7
   2adfe:	b002      	add	sp, #8
   2ae00:	bd80      	pop	{r7, pc}
   2ae02:	46c0      	nop			; (mov r8, r8)
   2ae04:	40000400 	.word	0x40000400

0002ae08 <system_pinmux_get_config_defaults>:
{
   2ae08:	b580      	push	{r7, lr}
   2ae0a:	b082      	sub	sp, #8
   2ae0c:	af00      	add	r7, sp, #0
   2ae0e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2ae10:	687b      	ldr	r3, [r7, #4]
   2ae12:	2280      	movs	r2, #128	; 0x80
   2ae14:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2ae16:	687b      	ldr	r3, [r7, #4]
   2ae18:	2200      	movs	r2, #0
   2ae1a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2ae1c:	687b      	ldr	r3, [r7, #4]
   2ae1e:	2201      	movs	r2, #1
   2ae20:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2ae22:	687b      	ldr	r3, [r7, #4]
   2ae24:	2200      	movs	r2, #0
   2ae26:	70da      	strb	r2, [r3, #3]
}
   2ae28:	46c0      	nop			; (mov r8, r8)
   2ae2a:	46bd      	mov	sp, r7
   2ae2c:	b002      	add	sp, #8
   2ae2e:	bd80      	pop	{r7, pc}

0002ae30 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2ae30:	b580      	push	{r7, lr}
   2ae32:	b084      	sub	sp, #16
   2ae34:	af00      	add	r7, sp, #0
   2ae36:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2ae38:	2300      	movs	r3, #0
   2ae3a:	60fb      	str	r3, [r7, #12]
   2ae3c:	e00c      	b.n	2ae58 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2ae3e:	4b0a      	ldr	r3, [pc, #40]	; (2ae68 <_tcc_get_inst_index+0x38>)
   2ae40:	68fa      	ldr	r2, [r7, #12]
   2ae42:	0092      	lsls	r2, r2, #2
   2ae44:	58d2      	ldr	r2, [r2, r3]
   2ae46:	687b      	ldr	r3, [r7, #4]
   2ae48:	429a      	cmp	r2, r3
   2ae4a:	d102      	bne.n	2ae52 <_tcc_get_inst_index+0x22>
			return i;
   2ae4c:	68fb      	ldr	r3, [r7, #12]
   2ae4e:	b2db      	uxtb	r3, r3
   2ae50:	e006      	b.n	2ae60 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2ae52:	68fb      	ldr	r3, [r7, #12]
   2ae54:	3301      	adds	r3, #1
   2ae56:	60fb      	str	r3, [r7, #12]
   2ae58:	68fb      	ldr	r3, [r7, #12]
   2ae5a:	2b02      	cmp	r3, #2
   2ae5c:	d9ef      	bls.n	2ae3e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2ae5e:	2300      	movs	r3, #0
}
   2ae60:	0018      	movs	r0, r3
   2ae62:	46bd      	mov	sp, r7
   2ae64:	b004      	add	sp, #16
   2ae66:	bd80      	pop	{r7, pc}
   2ae68:	0003a0b8 	.word	0x0003a0b8

0002ae6c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2ae6c:	b590      	push	{r4, r7, lr}
   2ae6e:	b085      	sub	sp, #20
   2ae70:	af00      	add	r7, sp, #0
   2ae72:	6078      	str	r0, [r7, #4]
   2ae74:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2ae76:	230f      	movs	r3, #15
   2ae78:	18fc      	adds	r4, r7, r3
   2ae7a:	683b      	ldr	r3, [r7, #0]
   2ae7c:	0018      	movs	r0, r3
   2ae7e:	4bad      	ldr	r3, [pc, #692]	; (2b134 <tcc_get_config_defaults+0x2c8>)
   2ae80:	4798      	blx	r3
   2ae82:	0003      	movs	r3, r0
   2ae84:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2ae86:	687b      	ldr	r3, [r7, #4]
   2ae88:	2200      	movs	r2, #0
   2ae8a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2ae8c:	230f      	movs	r3, #15
   2ae8e:	18fb      	adds	r3, r7, r3
   2ae90:	781a      	ldrb	r2, [r3, #0]
   2ae92:	4ba9      	ldr	r3, [pc, #676]	; (2b138 <tcc_get_config_defaults+0x2cc>)
   2ae94:	0092      	lsls	r2, r2, #2
   2ae96:	58d2      	ldr	r2, [r2, r3]
   2ae98:	687b      	ldr	r3, [r7, #4]
   2ae9a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2ae9c:	687b      	ldr	r3, [r7, #4]
   2ae9e:	2200      	movs	r2, #0
   2aea0:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2aea2:	687b      	ldr	r3, [r7, #4]
   2aea4:	2200      	movs	r2, #0
   2aea6:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2aea8:	687b      	ldr	r3, [r7, #4]
   2aeaa:	2200      	movs	r2, #0
   2aeac:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2aeae:	687b      	ldr	r3, [r7, #4]
   2aeb0:	2200      	movs	r2, #0
   2aeb2:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2aeb4:	687b      	ldr	r3, [r7, #4]
   2aeb6:	2200      	movs	r2, #0
   2aeb8:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2aeba:	687b      	ldr	r3, [r7, #4]
   2aebc:	2200      	movs	r2, #0
   2aebe:	61da      	str	r2, [r3, #28]
   2aec0:	687b      	ldr	r3, [r7, #4]
   2aec2:	2200      	movs	r2, #0
   2aec4:	621a      	str	r2, [r3, #32]
   2aec6:	687b      	ldr	r3, [r7, #4]
   2aec8:	2200      	movs	r2, #0
   2aeca:	625a      	str	r2, [r3, #36]	; 0x24
   2aecc:	687b      	ldr	r3, [r7, #4]
   2aece:	2200      	movs	r2, #0
   2aed0:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2aed2:	687b      	ldr	r3, [r7, #4]
   2aed4:	2200      	movs	r2, #0
   2aed6:	751a      	strb	r2, [r3, #20]
   2aed8:	687b      	ldr	r3, [r7, #4]
   2aeda:	2200      	movs	r2, #0
   2aedc:	755a      	strb	r2, [r3, #21]
   2aede:	687b      	ldr	r3, [r7, #4]
   2aee0:	2200      	movs	r2, #0
   2aee2:	759a      	strb	r2, [r3, #22]
   2aee4:	687b      	ldr	r3, [r7, #4]
   2aee6:	2200      	movs	r2, #0
   2aee8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2aeea:	687b      	ldr	r3, [r7, #4]
   2aeec:	2200      	movs	r2, #0
   2aeee:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2aef0:	687b      	ldr	r3, [r7, #4]
   2aef2:	2200      	movs	r2, #0
   2aef4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2aef6:	687b      	ldr	r3, [r7, #4]
   2aef8:	2200      	movs	r2, #0
   2aefa:	741a      	strb	r2, [r3, #16]
   2aefc:	687b      	ldr	r3, [r7, #4]
   2aefe:	2200      	movs	r2, #0
   2af00:	745a      	strb	r2, [r3, #17]
   2af02:	687b      	ldr	r3, [r7, #4]
   2af04:	2200      	movs	r2, #0
   2af06:	749a      	strb	r2, [r3, #18]
   2af08:	687b      	ldr	r3, [r7, #4]
   2af0a:	2200      	movs	r2, #0
   2af0c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2af0e:	687b      	ldr	r3, [r7, #4]
   2af10:	222c      	movs	r2, #44	; 0x2c
   2af12:	2100      	movs	r1, #0
   2af14:	5499      	strb	r1, [r3, r2]
   2af16:	687b      	ldr	r3, [r7, #4]
   2af18:	222d      	movs	r2, #45	; 0x2d
   2af1a:	2100      	movs	r1, #0
   2af1c:	5499      	strb	r1, [r3, r2]
   2af1e:	687b      	ldr	r3, [r7, #4]
   2af20:	222e      	movs	r2, #46	; 0x2e
   2af22:	2100      	movs	r1, #0
   2af24:	5499      	strb	r1, [r3, r2]
   2af26:	687b      	ldr	r3, [r7, #4]
   2af28:	222f      	movs	r2, #47	; 0x2f
   2af2a:	2100      	movs	r1, #0
   2af2c:	5499      	strb	r1, [r3, r2]
   2af2e:	687b      	ldr	r3, [r7, #4]
   2af30:	2230      	movs	r2, #48	; 0x30
   2af32:	2100      	movs	r1, #0
   2af34:	5499      	strb	r1, [r3, r2]
   2af36:	687b      	ldr	r3, [r7, #4]
   2af38:	2231      	movs	r2, #49	; 0x31
   2af3a:	2100      	movs	r1, #0
   2af3c:	5499      	strb	r1, [r3, r2]
   2af3e:	687b      	ldr	r3, [r7, #4]
   2af40:	2232      	movs	r2, #50	; 0x32
   2af42:	2100      	movs	r1, #0
   2af44:	5499      	strb	r1, [r3, r2]
   2af46:	687b      	ldr	r3, [r7, #4]
   2af48:	2233      	movs	r2, #51	; 0x33
   2af4a:	2100      	movs	r1, #0
   2af4c:	5499      	strb	r1, [r3, r2]
   2af4e:	687b      	ldr	r3, [r7, #4]
   2af50:	2234      	movs	r2, #52	; 0x34
   2af52:	2100      	movs	r1, #0
   2af54:	5499      	strb	r1, [r3, r2]
   2af56:	687b      	ldr	r3, [r7, #4]
   2af58:	2235      	movs	r2, #53	; 0x35
   2af5a:	2100      	movs	r1, #0
   2af5c:	5499      	strb	r1, [r3, r2]
   2af5e:	687b      	ldr	r3, [r7, #4]
   2af60:	2236      	movs	r2, #54	; 0x36
   2af62:	2100      	movs	r1, #0
   2af64:	5499      	strb	r1, [r3, r2]
   2af66:	687b      	ldr	r3, [r7, #4]
   2af68:	2237      	movs	r2, #55	; 0x37
   2af6a:	2100      	movs	r1, #0
   2af6c:	5499      	strb	r1, [r3, r2]
   2af6e:	687b      	ldr	r3, [r7, #4]
   2af70:	2238      	movs	r2, #56	; 0x38
   2af72:	2100      	movs	r1, #0
   2af74:	5499      	strb	r1, [r3, r2]
   2af76:	687b      	ldr	r3, [r7, #4]
   2af78:	2239      	movs	r2, #57	; 0x39
   2af7a:	2100      	movs	r1, #0
   2af7c:	5499      	strb	r1, [r3, r2]
   2af7e:	687b      	ldr	r3, [r7, #4]
   2af80:	223a      	movs	r2, #58	; 0x3a
   2af82:	2100      	movs	r1, #0
   2af84:	5499      	strb	r1, [r3, r2]
   2af86:	687b      	ldr	r3, [r7, #4]
   2af88:	223b      	movs	r2, #59	; 0x3b
   2af8a:	2100      	movs	r1, #0
   2af8c:	5499      	strb	r1, [r3, r2]
   2af8e:	687b      	ldr	r3, [r7, #4]
   2af90:	223c      	movs	r2, #60	; 0x3c
   2af92:	2100      	movs	r1, #0
   2af94:	5499      	strb	r1, [r3, r2]
   2af96:	687b      	ldr	r3, [r7, #4]
   2af98:	223d      	movs	r2, #61	; 0x3d
   2af9a:	2100      	movs	r1, #0
   2af9c:	5499      	strb	r1, [r3, r2]
   2af9e:	687b      	ldr	r3, [r7, #4]
   2afa0:	223e      	movs	r2, #62	; 0x3e
   2afa2:	2100      	movs	r1, #0
   2afa4:	5499      	strb	r1, [r3, r2]
   2afa6:	687b      	ldr	r3, [r7, #4]
   2afa8:	223f      	movs	r2, #63	; 0x3f
   2afaa:	2100      	movs	r1, #0
   2afac:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2afae:	687b      	ldr	r3, [r7, #4]
   2afb0:	2240      	movs	r2, #64	; 0x40
   2afb2:	2100      	movs	r1, #0
   2afb4:	5499      	strb	r1, [r3, r2]
   2afb6:	687b      	ldr	r3, [r7, #4]
   2afb8:	2241      	movs	r2, #65	; 0x41
   2afba:	2100      	movs	r1, #0
   2afbc:	5499      	strb	r1, [r3, r2]
   2afbe:	687b      	ldr	r3, [r7, #4]
   2afc0:	2242      	movs	r2, #66	; 0x42
   2afc2:	2100      	movs	r1, #0
   2afc4:	5499      	strb	r1, [r3, r2]
   2afc6:	687b      	ldr	r3, [r7, #4]
   2afc8:	2243      	movs	r2, #67	; 0x43
   2afca:	2100      	movs	r1, #0
   2afcc:	5499      	strb	r1, [r3, r2]
   2afce:	687b      	ldr	r3, [r7, #4]
   2afd0:	2244      	movs	r2, #68	; 0x44
   2afd2:	2100      	movs	r1, #0
   2afd4:	5499      	strb	r1, [r3, r2]
   2afd6:	687b      	ldr	r3, [r7, #4]
   2afd8:	2245      	movs	r2, #69	; 0x45
   2afda:	2100      	movs	r1, #0
   2afdc:	5499      	strb	r1, [r3, r2]
   2afde:	687b      	ldr	r3, [r7, #4]
   2afe0:	2246      	movs	r2, #70	; 0x46
   2afe2:	2100      	movs	r1, #0
   2afe4:	5499      	strb	r1, [r3, r2]
   2afe6:	687b      	ldr	r3, [r7, #4]
   2afe8:	2247      	movs	r2, #71	; 0x47
   2afea:	2100      	movs	r1, #0
   2afec:	5499      	strb	r1, [r3, r2]
   2afee:	687b      	ldr	r3, [r7, #4]
   2aff0:	2248      	movs	r2, #72	; 0x48
   2aff2:	2100      	movs	r1, #0
   2aff4:	5499      	strb	r1, [r3, r2]
   2aff6:	687b      	ldr	r3, [r7, #4]
   2aff8:	2249      	movs	r2, #73	; 0x49
   2affa:	2100      	movs	r1, #0
   2affc:	5499      	strb	r1, [r3, r2]
   2affe:	687b      	ldr	r3, [r7, #4]
   2b000:	224a      	movs	r2, #74	; 0x4a
   2b002:	2100      	movs	r1, #0
   2b004:	5499      	strb	r1, [r3, r2]
   2b006:	687b      	ldr	r3, [r7, #4]
   2b008:	224b      	movs	r2, #75	; 0x4b
   2b00a:	2100      	movs	r1, #0
   2b00c:	5499      	strb	r1, [r3, r2]
   2b00e:	687b      	ldr	r3, [r7, #4]
   2b010:	224c      	movs	r2, #76	; 0x4c
   2b012:	2100      	movs	r1, #0
   2b014:	5499      	strb	r1, [r3, r2]
   2b016:	687b      	ldr	r3, [r7, #4]
   2b018:	224d      	movs	r2, #77	; 0x4d
   2b01a:	2100      	movs	r1, #0
   2b01c:	5499      	strb	r1, [r3, r2]
   2b01e:	687b      	ldr	r3, [r7, #4]
   2b020:	224e      	movs	r2, #78	; 0x4e
   2b022:	2100      	movs	r1, #0
   2b024:	5499      	strb	r1, [r3, r2]
   2b026:	687b      	ldr	r3, [r7, #4]
   2b028:	224f      	movs	r2, #79	; 0x4f
   2b02a:	2100      	movs	r1, #0
   2b02c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2b02e:	687b      	ldr	r3, [r7, #4]
   2b030:	2250      	movs	r2, #80	; 0x50
   2b032:	2100      	movs	r1, #0
   2b034:	5499      	strb	r1, [r3, r2]
   2b036:	687b      	ldr	r3, [r7, #4]
   2b038:	2251      	movs	r2, #81	; 0x51
   2b03a:	2100      	movs	r1, #0
   2b03c:	5499      	strb	r1, [r3, r2]
   2b03e:	687b      	ldr	r3, [r7, #4]
   2b040:	2252      	movs	r2, #82	; 0x52
   2b042:	2100      	movs	r1, #0
   2b044:	5499      	strb	r1, [r3, r2]
   2b046:	687b      	ldr	r3, [r7, #4]
   2b048:	2253      	movs	r2, #83	; 0x53
   2b04a:	2100      	movs	r1, #0
   2b04c:	5499      	strb	r1, [r3, r2]
   2b04e:	687b      	ldr	r3, [r7, #4]
   2b050:	2254      	movs	r2, #84	; 0x54
   2b052:	2100      	movs	r1, #0
   2b054:	5499      	strb	r1, [r3, r2]
   2b056:	687b      	ldr	r3, [r7, #4]
   2b058:	2255      	movs	r2, #85	; 0x55
   2b05a:	2100      	movs	r1, #0
   2b05c:	5499      	strb	r1, [r3, r2]
   2b05e:	687b      	ldr	r3, [r7, #4]
   2b060:	2256      	movs	r2, #86	; 0x56
   2b062:	2100      	movs	r1, #0
   2b064:	5499      	strb	r1, [r3, r2]
   2b066:	687b      	ldr	r3, [r7, #4]
   2b068:	2257      	movs	r2, #87	; 0x57
   2b06a:	2100      	movs	r1, #0
   2b06c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2b06e:	687b      	ldr	r3, [r7, #4]
   2b070:	2298      	movs	r2, #152	; 0x98
   2b072:	2100      	movs	r1, #0
   2b074:	5499      	strb	r1, [r3, r2]
   2b076:	687b      	ldr	r3, [r7, #4]
   2b078:	2200      	movs	r2, #0
   2b07a:	659a      	str	r2, [r3, #88]	; 0x58
   2b07c:	687b      	ldr	r3, [r7, #4]
   2b07e:	2200      	movs	r2, #0
   2b080:	679a      	str	r2, [r3, #120]	; 0x78
   2b082:	687b      	ldr	r3, [r7, #4]
   2b084:	2299      	movs	r2, #153	; 0x99
   2b086:	2100      	movs	r1, #0
   2b088:	5499      	strb	r1, [r3, r2]
   2b08a:	687b      	ldr	r3, [r7, #4]
   2b08c:	2200      	movs	r2, #0
   2b08e:	65da      	str	r2, [r3, #92]	; 0x5c
   2b090:	687b      	ldr	r3, [r7, #4]
   2b092:	2200      	movs	r2, #0
   2b094:	67da      	str	r2, [r3, #124]	; 0x7c
   2b096:	687b      	ldr	r3, [r7, #4]
   2b098:	229a      	movs	r2, #154	; 0x9a
   2b09a:	2100      	movs	r1, #0
   2b09c:	5499      	strb	r1, [r3, r2]
   2b09e:	687b      	ldr	r3, [r7, #4]
   2b0a0:	2200      	movs	r2, #0
   2b0a2:	661a      	str	r2, [r3, #96]	; 0x60
   2b0a4:	687b      	ldr	r3, [r7, #4]
   2b0a6:	2280      	movs	r2, #128	; 0x80
   2b0a8:	2100      	movs	r1, #0
   2b0aa:	5099      	str	r1, [r3, r2]
   2b0ac:	687b      	ldr	r3, [r7, #4]
   2b0ae:	229b      	movs	r2, #155	; 0x9b
   2b0b0:	2100      	movs	r1, #0
   2b0b2:	5499      	strb	r1, [r3, r2]
   2b0b4:	687b      	ldr	r3, [r7, #4]
   2b0b6:	2200      	movs	r2, #0
   2b0b8:	665a      	str	r2, [r3, #100]	; 0x64
   2b0ba:	687b      	ldr	r3, [r7, #4]
   2b0bc:	2284      	movs	r2, #132	; 0x84
   2b0be:	2100      	movs	r1, #0
   2b0c0:	5099      	str	r1, [r3, r2]
   2b0c2:	687b      	ldr	r3, [r7, #4]
   2b0c4:	229c      	movs	r2, #156	; 0x9c
   2b0c6:	2100      	movs	r1, #0
   2b0c8:	5499      	strb	r1, [r3, r2]
   2b0ca:	687b      	ldr	r3, [r7, #4]
   2b0cc:	2200      	movs	r2, #0
   2b0ce:	669a      	str	r2, [r3, #104]	; 0x68
   2b0d0:	687b      	ldr	r3, [r7, #4]
   2b0d2:	2288      	movs	r2, #136	; 0x88
   2b0d4:	2100      	movs	r1, #0
   2b0d6:	5099      	str	r1, [r3, r2]
   2b0d8:	687b      	ldr	r3, [r7, #4]
   2b0da:	229d      	movs	r2, #157	; 0x9d
   2b0dc:	2100      	movs	r1, #0
   2b0de:	5499      	strb	r1, [r3, r2]
   2b0e0:	687b      	ldr	r3, [r7, #4]
   2b0e2:	2200      	movs	r2, #0
   2b0e4:	66da      	str	r2, [r3, #108]	; 0x6c
   2b0e6:	687b      	ldr	r3, [r7, #4]
   2b0e8:	228c      	movs	r2, #140	; 0x8c
   2b0ea:	2100      	movs	r1, #0
   2b0ec:	5099      	str	r1, [r3, r2]
   2b0ee:	687b      	ldr	r3, [r7, #4]
   2b0f0:	229e      	movs	r2, #158	; 0x9e
   2b0f2:	2100      	movs	r1, #0
   2b0f4:	5499      	strb	r1, [r3, r2]
   2b0f6:	687b      	ldr	r3, [r7, #4]
   2b0f8:	2200      	movs	r2, #0
   2b0fa:	671a      	str	r2, [r3, #112]	; 0x70
   2b0fc:	687b      	ldr	r3, [r7, #4]
   2b0fe:	2290      	movs	r2, #144	; 0x90
   2b100:	2100      	movs	r1, #0
   2b102:	5099      	str	r1, [r3, r2]
   2b104:	687b      	ldr	r3, [r7, #4]
   2b106:	229f      	movs	r2, #159	; 0x9f
   2b108:	2100      	movs	r1, #0
   2b10a:	5499      	strb	r1, [r3, r2]
   2b10c:	687b      	ldr	r3, [r7, #4]
   2b10e:	2200      	movs	r2, #0
   2b110:	675a      	str	r2, [r3, #116]	; 0x74
   2b112:	687b      	ldr	r3, [r7, #4]
   2b114:	2294      	movs	r2, #148	; 0x94
   2b116:	2100      	movs	r1, #0
   2b118:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2b11a:	687b      	ldr	r3, [r7, #4]
   2b11c:	22a0      	movs	r2, #160	; 0xa0
   2b11e:	2101      	movs	r1, #1
   2b120:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2b122:	687b      	ldr	r3, [r7, #4]
   2b124:	22a1      	movs	r2, #161	; 0xa1
   2b126:	2100      	movs	r1, #0
   2b128:	5499      	strb	r1, [r3, r2]
}
   2b12a:	46c0      	nop			; (mov r8, r8)
   2b12c:	46bd      	mov	sp, r7
   2b12e:	b005      	add	sp, #20
   2b130:	bd90      	pop	{r4, r7, pc}
   2b132:	46c0      	nop			; (mov r8, r8)
   2b134:	0002ae31 	.word	0x0002ae31
   2b138:	0003a0d4 	.word	0x0003a0d4

0002b13c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b13c:	b580      	push	{r7, lr}
   2b13e:	b086      	sub	sp, #24
   2b140:	af00      	add	r7, sp, #0
   2b142:	60b9      	str	r1, [r7, #8]
   2b144:	607a      	str	r2, [r7, #4]
   2b146:	230f      	movs	r3, #15
   2b148:	18fb      	adds	r3, r7, r3
   2b14a:	1c02      	adds	r2, r0, #0
   2b14c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2b14e:	2300      	movs	r3, #0
   2b150:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b152:	2300      	movs	r3, #0
   2b154:	613b      	str	r3, [r7, #16]
   2b156:	e01d      	b.n	2b194 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2b158:	68ba      	ldr	r2, [r7, #8]
   2b15a:	693b      	ldr	r3, [r7, #16]
   2b15c:	18d3      	adds	r3, r2, r3
   2b15e:	3310      	adds	r3, #16
   2b160:	781b      	ldrb	r3, [r3, #0]
   2b162:	2b01      	cmp	r3, #1
   2b164:	d113      	bne.n	2b18e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2b166:	230f      	movs	r3, #15
   2b168:	18fb      	adds	r3, r7, r3
   2b16a:	781b      	ldrb	r3, [r3, #0]
   2b16c:	4a1b      	ldr	r2, [pc, #108]	; (2b1dc <_tcc_build_ctrla+0xa0>)
   2b16e:	5cd3      	ldrb	r3, [r2, r3]
   2b170:	001a      	movs	r2, r3
   2b172:	693b      	ldr	r3, [r7, #16]
   2b174:	429a      	cmp	r2, r3
   2b176:	da01      	bge.n	2b17c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2b178:	2317      	movs	r3, #23
   2b17a:	e02a      	b.n	2b1d2 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2b17c:	2380      	movs	r3, #128	; 0x80
   2b17e:	045a      	lsls	r2, r3, #17
   2b180:	693b      	ldr	r3, [r7, #16]
   2b182:	409a      	lsls	r2, r3
   2b184:	0013      	movs	r3, r2
   2b186:	001a      	movs	r2, r3
   2b188:	697b      	ldr	r3, [r7, #20]
   2b18a:	4313      	orrs	r3, r2
   2b18c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b18e:	693b      	ldr	r3, [r7, #16]
   2b190:	3301      	adds	r3, #1
   2b192:	613b      	str	r3, [r7, #16]
   2b194:	693b      	ldr	r3, [r7, #16]
   2b196:	2b03      	cmp	r3, #3
   2b198:	ddde      	ble.n	2b158 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2b19a:	68bb      	ldr	r3, [r7, #8]
   2b19c:	22a1      	movs	r2, #161	; 0xa1
   2b19e:	5c9b      	ldrb	r3, [r3, r2]
   2b1a0:	2b00      	cmp	r3, #0
   2b1a2:	d004      	beq.n	2b1ae <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2b1a4:	697b      	ldr	r3, [r7, #20]
   2b1a6:	2280      	movs	r2, #128	; 0x80
   2b1a8:	0112      	lsls	r2, r2, #4
   2b1aa:	4313      	orrs	r3, r2
   2b1ac:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2b1ae:	68bb      	ldr	r3, [r7, #8]
   2b1b0:	7b1b      	ldrb	r3, [r3, #12]
   2b1b2:	031b      	lsls	r3, r3, #12
   2b1b4:	001a      	movs	r2, r3
   2b1b6:	697b      	ldr	r3, [r7, #20]
   2b1b8:	4313      	orrs	r3, r2
   2b1ba:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2b1bc:	68bb      	ldr	r3, [r7, #8]
   2b1be:	7adb      	ldrb	r3, [r3, #11]
   2b1c0:	021b      	lsls	r3, r3, #8
   2b1c2:	001a      	movs	r2, r3
   2b1c4:	697b      	ldr	r3, [r7, #20]
   2b1c6:	4313      	orrs	r3, r2
   2b1c8:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2b1ca:	687b      	ldr	r3, [r7, #4]
   2b1cc:	697a      	ldr	r2, [r7, #20]
   2b1ce:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b1d0:	2300      	movs	r3, #0
}
   2b1d2:	0018      	movs	r0, r3
   2b1d4:	46bd      	mov	sp, r7
   2b1d6:	b006      	add	sp, #24
   2b1d8:	bd80      	pop	{r7, pc}
   2b1da:	46c0      	nop			; (mov r8, r8)
   2b1dc:	0003a0e0 	.word	0x0003a0e0

0002b1e0 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2b1e0:	b580      	push	{r7, lr}
   2b1e2:	b086      	sub	sp, #24
   2b1e4:	af00      	add	r7, sp, #0
   2b1e6:	60b9      	str	r1, [r7, #8]
   2b1e8:	607a      	str	r2, [r7, #4]
   2b1ea:	230f      	movs	r3, #15
   2b1ec:	18fb      	adds	r3, r7, r3
   2b1ee:	1c02      	adds	r2, r0, #0
   2b1f0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2b1f2:	2317      	movs	r3, #23
   2b1f4:	18fb      	adds	r3, r7, r3
   2b1f6:	2200      	movs	r2, #0
   2b1f8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2b1fa:	68bb      	ldr	r3, [r7, #8]
   2b1fc:	7a1b      	ldrb	r3, [r3, #8]
   2b1fe:	2b00      	cmp	r3, #0
   2b200:	d007      	beq.n	2b212 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2b202:	2317      	movs	r3, #23
   2b204:	18fb      	adds	r3, r7, r3
   2b206:	2217      	movs	r2, #23
   2b208:	18ba      	adds	r2, r7, r2
   2b20a:	7812      	ldrb	r2, [r2, #0]
   2b20c:	2104      	movs	r1, #4
   2b20e:	430a      	orrs	r2, r1
   2b210:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2b212:	68bb      	ldr	r3, [r7, #8]
   2b214:	7a5b      	ldrb	r3, [r3, #9]
   2b216:	2b01      	cmp	r3, #1
   2b218:	d107      	bne.n	2b22a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2b21a:	2317      	movs	r3, #23
   2b21c:	18fb      	adds	r3, r7, r3
   2b21e:	2217      	movs	r2, #23
   2b220:	18ba      	adds	r2, r7, r2
   2b222:	7812      	ldrb	r2, [r2, #0]
   2b224:	2101      	movs	r1, #1
   2b226:	430a      	orrs	r2, r1
   2b228:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2b22a:	687b      	ldr	r3, [r7, #4]
   2b22c:	2217      	movs	r2, #23
   2b22e:	18ba      	adds	r2, r7, r2
   2b230:	7812      	ldrb	r2, [r2, #0]
   2b232:	701a      	strb	r2, [r3, #0]
}
   2b234:	46c0      	nop			; (mov r8, r8)
   2b236:	46bd      	mov	sp, r7
   2b238:	b006      	add	sp, #24
   2b23a:	bd80      	pop	{r7, pc}

0002b23c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b23c:	b580      	push	{r7, lr}
   2b23e:	b088      	sub	sp, #32
   2b240:	af00      	add	r7, sp, #0
   2b242:	60b9      	str	r1, [r7, #8]
   2b244:	607a      	str	r2, [r7, #4]
   2b246:	230f      	movs	r3, #15
   2b248:	18fb      	adds	r3, r7, r3
   2b24a:	1c02      	adds	r2, r0, #0
   2b24c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b24e:	230f      	movs	r3, #15
   2b250:	18fb      	adds	r3, r7, r3
   2b252:	781a      	ldrb	r2, [r3, #0]
   2b254:	231b      	movs	r3, #27
   2b256:	18fb      	adds	r3, r7, r3
   2b258:	493e      	ldr	r1, [pc, #248]	; (2b354 <_tcc_build_faults+0x118>)
   2b25a:	5c8a      	ldrb	r2, [r1, r2]
   2b25c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b25e:	2300      	movs	r3, #0
   2b260:	61fb      	str	r3, [r7, #28]
   2b262:	e06e      	b.n	2b342 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2b264:	69fa      	ldr	r2, [r7, #28]
   2b266:	0013      	movs	r3, r2
   2b268:	009b      	lsls	r3, r3, #2
   2b26a:	189b      	adds	r3, r3, r2
   2b26c:	005b      	lsls	r3, r3, #1
   2b26e:	3328      	adds	r3, #40	; 0x28
   2b270:	68ba      	ldr	r2, [r7, #8]
   2b272:	18d3      	adds	r3, r2, r3
   2b274:	3304      	adds	r3, #4
   2b276:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2b278:	697b      	ldr	r3, [r7, #20]
   2b27a:	7a5b      	ldrb	r3, [r3, #9]
   2b27c:	221b      	movs	r2, #27
   2b27e:	18ba      	adds	r2, r7, r2
   2b280:	7812      	ldrb	r2, [r2, #0]
   2b282:	429a      	cmp	r2, r3
   2b284:	d801      	bhi.n	2b28a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2b286:	2317      	movs	r3, #23
   2b288:	e05f      	b.n	2b34a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2b28a:	697b      	ldr	r3, [r7, #20]
   2b28c:	781b      	ldrb	r3, [r3, #0]
   2b28e:	2b0f      	cmp	r3, #15
   2b290:	d901      	bls.n	2b296 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2b292:	2317      	movs	r3, #23
   2b294:	e059      	b.n	2b34a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b296:	697b      	ldr	r3, [r7, #20]
   2b298:	781b      	ldrb	r3, [r3, #0]
   2b29a:	061b      	lsls	r3, r3, #24
   2b29c:	001a      	movs	r2, r3
   2b29e:	23f0      	movs	r3, #240	; 0xf0
   2b2a0:	051b      	lsls	r3, r3, #20
   2b2a2:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2b2a4:	697b      	ldr	r3, [r7, #20]
   2b2a6:	785b      	ldrb	r3, [r3, #1]
   2b2a8:	041b      	lsls	r3, r3, #16
   2b2aa:	0019      	movs	r1, r3
   2b2ac:	23ff      	movs	r3, #255	; 0xff
   2b2ae:	041b      	lsls	r3, r3, #16
   2b2b0:	400b      	ands	r3, r1
   2b2b2:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2b2b4:	697b      	ldr	r3, [r7, #20]
   2b2b6:	789b      	ldrb	r3, [r3, #2]
   2b2b8:	2b00      	cmp	r3, #0
   2b2ba:	d001      	beq.n	2b2c0 <_tcc_build_faults+0x84>
   2b2bc:	2380      	movs	r3, #128	; 0x80
   2b2be:	e000      	b.n	2b2c2 <_tcc_build_faults+0x86>
   2b2c0:	2300      	movs	r3, #0
   2b2c2:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2b2c4:	697b      	ldr	r3, [r7, #20]
   2b2c6:	78db      	ldrb	r3, [r3, #3]
   2b2c8:	2b00      	cmp	r3, #0
   2b2ca:	d001      	beq.n	2b2d0 <_tcc_build_faults+0x94>
   2b2cc:	2308      	movs	r3, #8
   2b2ce:	e000      	b.n	2b2d2 <_tcc_build_faults+0x96>
   2b2d0:	2300      	movs	r3, #0
   2b2d2:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2b2d4:	697b      	ldr	r3, [r7, #20]
   2b2d6:	791b      	ldrb	r3, [r3, #4]
   2b2d8:	2b00      	cmp	r3, #0
   2b2da:	d001      	beq.n	2b2e0 <_tcc_build_faults+0xa4>
   2b2dc:	2310      	movs	r3, #16
   2b2de:	e000      	b.n	2b2e2 <_tcc_build_faults+0xa6>
   2b2e0:	2300      	movs	r3, #0
   2b2e2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2b2e4:	697b      	ldr	r3, [r7, #20]
   2b2e6:	795b      	ldrb	r3, [r3, #5]
   2b2e8:	0019      	movs	r1, r3
   2b2ea:	2303      	movs	r3, #3
   2b2ec:	400b      	ands	r3, r1
   2b2ee:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2b2f0:	697b      	ldr	r3, [r7, #20]
   2b2f2:	799b      	ldrb	r3, [r3, #6]
   2b2f4:	015b      	lsls	r3, r3, #5
   2b2f6:	0019      	movs	r1, r3
   2b2f8:	2360      	movs	r3, #96	; 0x60
   2b2fa:	400b      	ands	r3, r1
   2b2fc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2b2fe:	697b      	ldr	r3, [r7, #20]
   2b300:	79db      	ldrb	r3, [r3, #7]
   2b302:	021b      	lsls	r3, r3, #8
   2b304:	0019      	movs	r1, r3
   2b306:	23c0      	movs	r3, #192	; 0xc0
   2b308:	009b      	lsls	r3, r3, #2
   2b30a:	400b      	ands	r3, r1
   2b30c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2b30e:	697b      	ldr	r3, [r7, #20]
   2b310:	7a1b      	ldrb	r3, [r3, #8]
   2b312:	031b      	lsls	r3, r3, #12
   2b314:	0019      	movs	r1, r3
   2b316:	23e0      	movs	r3, #224	; 0xe0
   2b318:	01db      	lsls	r3, r3, #7
   2b31a:	400b      	ands	r3, r1
   2b31c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2b31e:	697b      	ldr	r3, [r7, #20]
   2b320:	7a5b      	ldrb	r3, [r3, #9]
   2b322:	029b      	lsls	r3, r3, #10
   2b324:	0019      	movs	r1, r3
   2b326:	23c0      	movs	r3, #192	; 0xc0
   2b328:	011b      	lsls	r3, r3, #4
   2b32a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b32c:	4313      	orrs	r3, r2
   2b32e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2b330:	69fb      	ldr	r3, [r7, #28]
   2b332:	009b      	lsls	r3, r3, #2
   2b334:	687a      	ldr	r2, [r7, #4]
   2b336:	18d3      	adds	r3, r2, r3
   2b338:	693a      	ldr	r2, [r7, #16]
   2b33a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b33c:	69fb      	ldr	r3, [r7, #28]
   2b33e:	3301      	adds	r3, #1
   2b340:	61fb      	str	r3, [r7, #28]
   2b342:	69fb      	ldr	r3, [r7, #28]
   2b344:	2b01      	cmp	r3, #1
   2b346:	dd8d      	ble.n	2b264 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2b348:	2300      	movs	r3, #0
}
   2b34a:	0018      	movs	r0, r3
   2b34c:	46bd      	mov	sp, r7
   2b34e:	b008      	add	sp, #32
   2b350:	bd80      	pop	{r7, pc}
   2b352:	46c0      	nop			; (mov r8, r8)
   2b354:	0003a0e0 	.word	0x0003a0e0

0002b358 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b358:	b580      	push	{r7, lr}
   2b35a:	b088      	sub	sp, #32
   2b35c:	af00      	add	r7, sp, #0
   2b35e:	60b9      	str	r1, [r7, #8]
   2b360:	607a      	str	r2, [r7, #4]
   2b362:	230f      	movs	r3, #15
   2b364:	18fb      	adds	r3, r7, r3
   2b366:	1c02      	adds	r2, r0, #0
   2b368:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2b36a:	230f      	movs	r3, #15
   2b36c:	18fb      	adds	r3, r7, r3
   2b36e:	781a      	ldrb	r2, [r3, #0]
   2b370:	2317      	movs	r3, #23
   2b372:	18fb      	adds	r3, r7, r3
   2b374:	492d      	ldr	r1, [pc, #180]	; (2b42c <_tcc_build_drvctrl+0xd4>)
   2b376:	5c8a      	ldrb	r2, [r1, r2]
   2b378:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2b37a:	2300      	movs	r3, #0
   2b37c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b37e:	2300      	movs	r3, #0
   2b380:	61fb      	str	r3, [r7, #28]
   2b382:	e048      	b.n	2b416 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2b384:	68ba      	ldr	r2, [r7, #8]
   2b386:	2150      	movs	r1, #80	; 0x50
   2b388:	69fb      	ldr	r3, [r7, #28]
   2b38a:	18d3      	adds	r3, r2, r3
   2b38c:	185b      	adds	r3, r3, r1
   2b38e:	781b      	ldrb	r3, [r3, #0]
   2b390:	2b00      	cmp	r3, #0
   2b392:	d010      	beq.n	2b3b6 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2b394:	2317      	movs	r3, #23
   2b396:	18fb      	adds	r3, r7, r3
   2b398:	781a      	ldrb	r2, [r3, #0]
   2b39a:	69fb      	ldr	r3, [r7, #28]
   2b39c:	429a      	cmp	r2, r3
   2b39e:	d801      	bhi.n	2b3a4 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2b3a0:	2317      	movs	r3, #23
   2b3a2:	e03f      	b.n	2b424 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2b3a4:	2380      	movs	r3, #128	; 0x80
   2b3a6:	025a      	lsls	r2, r3, #9
   2b3a8:	69fb      	ldr	r3, [r7, #28]
   2b3aa:	409a      	lsls	r2, r3
   2b3ac:	0013      	movs	r3, r2
   2b3ae:	001a      	movs	r2, r3
   2b3b0:	69bb      	ldr	r3, [r7, #24]
   2b3b2:	4313      	orrs	r3, r2
   2b3b4:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2b3b6:	68ba      	ldr	r2, [r7, #8]
   2b3b8:	69fb      	ldr	r3, [r7, #28]
   2b3ba:	331c      	adds	r3, #28
   2b3bc:	005b      	lsls	r3, r3, #1
   2b3be:	18d3      	adds	r3, r2, r3
   2b3c0:	3309      	adds	r3, #9
   2b3c2:	781b      	ldrb	r3, [r3, #0]
   2b3c4:	2b00      	cmp	r3, #0
   2b3c6:	d023      	beq.n	2b410 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2b3c8:	2317      	movs	r3, #23
   2b3ca:	18fb      	adds	r3, r7, r3
   2b3cc:	781a      	ldrb	r2, [r3, #0]
   2b3ce:	69fb      	ldr	r3, [r7, #28]
   2b3d0:	429a      	cmp	r2, r3
   2b3d2:	d801      	bhi.n	2b3d8 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2b3d4:	2317      	movs	r3, #23
   2b3d6:	e025      	b.n	2b424 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2b3d8:	68ba      	ldr	r2, [r7, #8]
   2b3da:	69fb      	ldr	r3, [r7, #28]
   2b3dc:	331c      	adds	r3, #28
   2b3de:	005b      	lsls	r3, r3, #1
   2b3e0:	18d3      	adds	r3, r2, r3
   2b3e2:	3309      	adds	r3, #9
   2b3e4:	781b      	ldrb	r3, [r3, #0]
   2b3e6:	2b02      	cmp	r3, #2
   2b3e8:	d10a      	bne.n	2b400 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2b3ea:	2302      	movs	r3, #2
   2b3ec:	33ff      	adds	r3, #255	; 0xff
   2b3ee:	001a      	movs	r2, r3
   2b3f0:	69fb      	ldr	r3, [r7, #28]
   2b3f2:	409a      	lsls	r2, r3
   2b3f4:	0013      	movs	r3, r2
   2b3f6:	001a      	movs	r2, r3
   2b3f8:	69bb      	ldr	r3, [r7, #24]
   2b3fa:	4313      	orrs	r3, r2
   2b3fc:	61bb      	str	r3, [r7, #24]
   2b3fe:	e007      	b.n	2b410 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2b400:	2201      	movs	r2, #1
   2b402:	69fb      	ldr	r3, [r7, #28]
   2b404:	409a      	lsls	r2, r3
   2b406:	0013      	movs	r3, r2
   2b408:	001a      	movs	r2, r3
   2b40a:	69bb      	ldr	r3, [r7, #24]
   2b40c:	4313      	orrs	r3, r2
   2b40e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b410:	69fb      	ldr	r3, [r7, #28]
   2b412:	3301      	adds	r3, #1
   2b414:	61fb      	str	r3, [r7, #28]
   2b416:	69fb      	ldr	r3, [r7, #28]
   2b418:	2b07      	cmp	r3, #7
   2b41a:	d9b3      	bls.n	2b384 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2b41c:	687b      	ldr	r3, [r7, #4]
   2b41e:	69ba      	ldr	r2, [r7, #24]
   2b420:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b422:	2300      	movs	r3, #0
}
   2b424:	0018      	movs	r0, r3
   2b426:	46bd      	mov	sp, r7
   2b428:	b008      	add	sp, #32
   2b42a:	bd80      	pop	{r7, pc}
   2b42c:	0003a0e4 	.word	0x0003a0e4

0002b430 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b430:	b580      	push	{r7, lr}
   2b432:	b088      	sub	sp, #32
   2b434:	af00      	add	r7, sp, #0
   2b436:	60b9      	str	r1, [r7, #8]
   2b438:	607a      	str	r2, [r7, #4]
   2b43a:	230f      	movs	r3, #15
   2b43c:	18fb      	adds	r3, r7, r3
   2b43e:	1c02      	adds	r2, r0, #0
   2b440:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b442:	230f      	movs	r3, #15
   2b444:	18fb      	adds	r3, r7, r3
   2b446:	781a      	ldrb	r2, [r3, #0]
   2b448:	2317      	movs	r3, #23
   2b44a:	18fb      	adds	r3, r7, r3
   2b44c:	491d      	ldr	r1, [pc, #116]	; (2b4c4 <_tcc_build_waves+0x94>)
   2b44e:	5c8a      	ldrb	r2, [r1, r2]
   2b450:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2b452:	68bb      	ldr	r3, [r7, #8]
   2b454:	3310      	adds	r3, #16
   2b456:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b458:	693b      	ldr	r3, [r7, #16]
   2b45a:	7a5b      	ldrb	r3, [r3, #9]
   2b45c:	011b      	lsls	r3, r3, #4
   2b45e:	001a      	movs	r2, r3
   2b460:	2330      	movs	r3, #48	; 0x30
   2b462:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2b464:	693b      	ldr	r3, [r7, #16]
   2b466:	7a1b      	ldrb	r3, [r3, #8]
   2b468:	0019      	movs	r1, r3
   2b46a:	2307      	movs	r3, #7
   2b46c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b46e:	4313      	orrs	r3, r2
   2b470:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b472:	2300      	movs	r3, #0
   2b474:	61fb      	str	r3, [r7, #28]
   2b476:	e01a      	b.n	2b4ae <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2b478:	693a      	ldr	r2, [r7, #16]
   2b47a:	69fb      	ldr	r3, [r7, #28]
   2b47c:	18d3      	adds	r3, r2, r3
   2b47e:	3304      	adds	r3, #4
   2b480:	781b      	ldrb	r3, [r3, #0]
   2b482:	2b00      	cmp	r3, #0
   2b484:	d010      	beq.n	2b4a8 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2b486:	2317      	movs	r3, #23
   2b488:	18fb      	adds	r3, r7, r3
   2b48a:	781a      	ldrb	r2, [r3, #0]
   2b48c:	69fb      	ldr	r3, [r7, #28]
   2b48e:	429a      	cmp	r2, r3
   2b490:	dc01      	bgt.n	2b496 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2b492:	2317      	movs	r3, #23
   2b494:	e012      	b.n	2b4bc <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2b496:	2380      	movs	r3, #128	; 0x80
   2b498:	025a      	lsls	r2, r3, #9
   2b49a:	69fb      	ldr	r3, [r7, #28]
   2b49c:	409a      	lsls	r2, r3
   2b49e:	0013      	movs	r3, r2
   2b4a0:	001a      	movs	r2, r3
   2b4a2:	69bb      	ldr	r3, [r7, #24]
   2b4a4:	4313      	orrs	r3, r2
   2b4a6:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b4a8:	69fb      	ldr	r3, [r7, #28]
   2b4aa:	3301      	adds	r3, #1
   2b4ac:	61fb      	str	r3, [r7, #28]
   2b4ae:	69fb      	ldr	r3, [r7, #28]
   2b4b0:	2b03      	cmp	r3, #3
   2b4b2:	dde1      	ble.n	2b478 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2b4b4:	687b      	ldr	r3, [r7, #4]
   2b4b6:	69ba      	ldr	r2, [r7, #24]
   2b4b8:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2b4ba:	2300      	movs	r3, #0
}
   2b4bc:	0018      	movs	r0, r3
   2b4be:	46bd      	mov	sp, r7
   2b4c0:	b008      	add	sp, #32
   2b4c2:	bd80      	pop	{r7, pc}
   2b4c4:	0003a0e0 	.word	0x0003a0e0

0002b4c8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2b4c8:	b590      	push	{r4, r7, lr}
   2b4ca:	b091      	sub	sp, #68	; 0x44
   2b4cc:	af00      	add	r7, sp, #0
   2b4ce:	60f8      	str	r0, [r7, #12]
   2b4d0:	60b9      	str	r1, [r7, #8]
   2b4d2:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2b4d4:	233b      	movs	r3, #59	; 0x3b
   2b4d6:	18fc      	adds	r4, r7, r3
   2b4d8:	68bb      	ldr	r3, [r7, #8]
   2b4da:	0018      	movs	r0, r3
   2b4dc:	4bc4      	ldr	r3, [pc, #784]	; (2b7f0 <tcc_init+0x328>)
   2b4de:	4798      	blx	r3
   2b4e0:	0003      	movs	r3, r0
   2b4e2:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2b4e4:	233b      	movs	r3, #59	; 0x3b
   2b4e6:	18fb      	adds	r3, r7, r3
   2b4e8:	781a      	ldrb	r2, [r3, #0]
   2b4ea:	4bc2      	ldr	r3, [pc, #776]	; (2b7f4 <tcc_init+0x32c>)
   2b4ec:	0092      	lsls	r2, r2, #2
   2b4ee:	58d3      	ldr	r3, [r2, r3]
   2b4f0:	0019      	movs	r1, r3
   2b4f2:	2002      	movs	r0, #2
   2b4f4:	4bc0      	ldr	r3, [pc, #768]	; (2b7f8 <tcc_init+0x330>)
   2b4f6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2b4f8:	68bb      	ldr	r3, [r7, #8]
   2b4fa:	681b      	ldr	r3, [r3, #0]
   2b4fc:	2202      	movs	r2, #2
   2b4fe:	4013      	ands	r3, r2
   2b500:	d001      	beq.n	2b506 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2b502:	231c      	movs	r3, #28
   2b504:	e1be      	b.n	2b884 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2b506:	68bb      	ldr	r3, [r7, #8]
   2b508:	681b      	ldr	r3, [r3, #0]
   2b50a:	2201      	movs	r2, #1
   2b50c:	4013      	ands	r3, r2
   2b50e:	d001      	beq.n	2b514 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2b510:	231c      	movs	r3, #28
   2b512:	e1b7      	b.n	2b884 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2b514:	233b      	movs	r3, #59	; 0x3b
   2b516:	18fb      	adds	r3, r7, r3
   2b518:	781a      	ldrb	r2, [r3, #0]
   2b51a:	4bb8      	ldr	r3, [pc, #736]	; (2b7fc <tcc_init+0x334>)
   2b51c:	0092      	lsls	r2, r2, #2
   2b51e:	58d3      	ldr	r3, [r2, r3]
   2b520:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2b522:	687b      	ldr	r3, [r7, #4]
   2b524:	681a      	ldr	r2, [r3, #0]
   2b526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b528:	429a      	cmp	r2, r3
   2b52a:	d804      	bhi.n	2b536 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2b52c:	687b      	ldr	r3, [r7, #4]
   2b52e:	685a      	ldr	r2, [r3, #4]
   2b530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b532:	429a      	cmp	r2, r3
   2b534:	d901      	bls.n	2b53a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2b536:	2317      	movs	r3, #23
   2b538:	e1a4      	b.n	2b884 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b53a:	2300      	movs	r3, #0
   2b53c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b53e:	e00e      	b.n	2b55e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2b540:	687a      	ldr	r2, [r7, #4]
   2b542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b544:	3306      	adds	r3, #6
   2b546:	009b      	lsls	r3, r3, #2
   2b548:	18d3      	adds	r3, r2, r3
   2b54a:	3304      	adds	r3, #4
   2b54c:	681a      	ldr	r2, [r3, #0]
   2b54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b550:	429a      	cmp	r2, r3
   2b552:	d901      	bls.n	2b558 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2b554:	2317      	movs	r3, #23
   2b556:	e195      	b.n	2b884 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b55a:	3301      	adds	r3, #1
   2b55c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b560:	2b03      	cmp	r3, #3
   2b562:	dded      	ble.n	2b540 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b564:	2300      	movs	r3, #0
   2b566:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b568:	e019      	b.n	2b59e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b56a:	687a      	ldr	r2, [r7, #4]
   2b56c:	2198      	movs	r1, #152	; 0x98
   2b56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b570:	18d3      	adds	r3, r2, r3
   2b572:	185b      	adds	r3, r3, r1
   2b574:	781b      	ldrb	r3, [r3, #0]
   2b576:	2201      	movs	r2, #1
   2b578:	4053      	eors	r3, r2
   2b57a:	b2db      	uxtb	r3, r3
   2b57c:	2b00      	cmp	r3, #0
   2b57e:	d10a      	bne.n	2b596 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2b580:	233b      	movs	r3, #59	; 0x3b
   2b582:	18fb      	adds	r3, r7, r3
   2b584:	781b      	ldrb	r3, [r3, #0]
   2b586:	4a9e      	ldr	r2, [pc, #632]	; (2b800 <tcc_init+0x338>)
   2b588:	5cd3      	ldrb	r3, [r2, r3]
   2b58a:	001a      	movs	r2, r3
   2b58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b58e:	429a      	cmp	r2, r3
   2b590:	dc02      	bgt.n	2b598 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2b592:	2317      	movs	r3, #23
   2b594:	e176      	b.n	2b884 <tcc_init+0x3bc>
			continue;
   2b596:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b59a:	3301      	adds	r3, #1
   2b59c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b5a0:	2b07      	cmp	r3, #7
   2b5a2:	dde2      	ble.n	2b56a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2b5a4:	2300      	movs	r3, #0
   2b5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2b5a8:	2333      	movs	r3, #51	; 0x33
   2b5aa:	18fc      	adds	r4, r7, r3
   2b5ac:	232c      	movs	r3, #44	; 0x2c
   2b5ae:	18fa      	adds	r2, r7, r3
   2b5b0:	6879      	ldr	r1, [r7, #4]
   2b5b2:	233b      	movs	r3, #59	; 0x3b
   2b5b4:	18fb      	adds	r3, r7, r3
   2b5b6:	781b      	ldrb	r3, [r3, #0]
   2b5b8:	0018      	movs	r0, r3
   2b5ba:	4b92      	ldr	r3, [pc, #584]	; (2b804 <tcc_init+0x33c>)
   2b5bc:	4798      	blx	r3
   2b5be:	0003      	movs	r3, r0
   2b5c0:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b5c2:	2333      	movs	r3, #51	; 0x33
   2b5c4:	18fb      	adds	r3, r7, r3
   2b5c6:	781b      	ldrb	r3, [r3, #0]
   2b5c8:	2b00      	cmp	r3, #0
   2b5ca:	d003      	beq.n	2b5d4 <tcc_init+0x10c>
		return status;
   2b5cc:	2333      	movs	r3, #51	; 0x33
   2b5ce:	18fb      	adds	r3, r7, r3
   2b5d0:	781b      	ldrb	r3, [r3, #0]
   2b5d2:	e157      	b.n	2b884 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2b5d4:	232b      	movs	r3, #43	; 0x2b
   2b5d6:	18fa      	adds	r2, r7, r3
   2b5d8:	6879      	ldr	r1, [r7, #4]
   2b5da:	233b      	movs	r3, #59	; 0x3b
   2b5dc:	18fb      	adds	r3, r7, r3
   2b5de:	781b      	ldrb	r3, [r3, #0]
   2b5e0:	0018      	movs	r0, r3
   2b5e2:	4b89      	ldr	r3, [pc, #548]	; (2b808 <tcc_init+0x340>)
   2b5e4:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2b5e6:	2333      	movs	r3, #51	; 0x33
   2b5e8:	18fc      	adds	r4, r7, r3
   2b5ea:	2320      	movs	r3, #32
   2b5ec:	18fa      	adds	r2, r7, r3
   2b5ee:	6879      	ldr	r1, [r7, #4]
   2b5f0:	233b      	movs	r3, #59	; 0x3b
   2b5f2:	18fb      	adds	r3, r7, r3
   2b5f4:	781b      	ldrb	r3, [r3, #0]
   2b5f6:	0018      	movs	r0, r3
   2b5f8:	4b84      	ldr	r3, [pc, #528]	; (2b80c <tcc_init+0x344>)
   2b5fa:	4798      	blx	r3
   2b5fc:	0003      	movs	r3, r0
   2b5fe:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b600:	2333      	movs	r3, #51	; 0x33
   2b602:	18fb      	adds	r3, r7, r3
   2b604:	781b      	ldrb	r3, [r3, #0]
   2b606:	2b00      	cmp	r3, #0
   2b608:	d003      	beq.n	2b612 <tcc_init+0x14a>
		return status;
   2b60a:	2333      	movs	r3, #51	; 0x33
   2b60c:	18fb      	adds	r3, r7, r3
   2b60e:	781b      	ldrb	r3, [r3, #0]
   2b610:	e138      	b.n	2b884 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2b612:	2300      	movs	r3, #0
   2b614:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2b616:	2333      	movs	r3, #51	; 0x33
   2b618:	18fc      	adds	r4, r7, r3
   2b61a:	231c      	movs	r3, #28
   2b61c:	18fa      	adds	r2, r7, r3
   2b61e:	6879      	ldr	r1, [r7, #4]
   2b620:	233b      	movs	r3, #59	; 0x3b
   2b622:	18fb      	adds	r3, r7, r3
   2b624:	781b      	ldrb	r3, [r3, #0]
   2b626:	0018      	movs	r0, r3
   2b628:	4b79      	ldr	r3, [pc, #484]	; (2b810 <tcc_init+0x348>)
   2b62a:	4798      	blx	r3
   2b62c:	0003      	movs	r3, r0
   2b62e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b630:	2333      	movs	r3, #51	; 0x33
   2b632:	18fb      	adds	r3, r7, r3
   2b634:	781b      	ldrb	r3, [r3, #0]
   2b636:	2b00      	cmp	r3, #0
   2b638:	d003      	beq.n	2b642 <tcc_init+0x17a>
		return status;
   2b63a:	2333      	movs	r3, #51	; 0x33
   2b63c:	18fb      	adds	r3, r7, r3
   2b63e:	781b      	ldrb	r3, [r3, #0]
   2b640:	e120      	b.n	2b884 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2b642:	2333      	movs	r3, #51	; 0x33
   2b644:	18fc      	adds	r4, r7, r3
   2b646:	2318      	movs	r3, #24
   2b648:	18fa      	adds	r2, r7, r3
   2b64a:	6879      	ldr	r1, [r7, #4]
   2b64c:	233b      	movs	r3, #59	; 0x3b
   2b64e:	18fb      	adds	r3, r7, r3
   2b650:	781b      	ldrb	r3, [r3, #0]
   2b652:	0018      	movs	r0, r3
   2b654:	4b6f      	ldr	r3, [pc, #444]	; (2b814 <tcc_init+0x34c>)
   2b656:	4798      	blx	r3
   2b658:	0003      	movs	r3, r0
   2b65a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b65c:	2333      	movs	r3, #51	; 0x33
   2b65e:	18fb      	adds	r3, r7, r3
   2b660:	781b      	ldrb	r3, [r3, #0]
   2b662:	2b00      	cmp	r3, #0
   2b664:	d003      	beq.n	2b66e <tcc_init+0x1a6>
		return status;
   2b666:	2333      	movs	r3, #51	; 0x33
   2b668:	18fb      	adds	r3, r7, r3
   2b66a:	781b      	ldrb	r3, [r3, #0]
   2b66c:	e10a      	b.n	2b884 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b66e:	2300      	movs	r3, #0
   2b670:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b672:	e009      	b.n	2b688 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2b674:	68fa      	ldr	r2, [r7, #12]
   2b676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b678:	009b      	lsls	r3, r3, #2
   2b67a:	18d3      	adds	r3, r2, r3
   2b67c:	3304      	adds	r3, #4
   2b67e:	2200      	movs	r2, #0
   2b680:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b684:	3301      	adds	r3, #1
   2b686:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b68a:	2b0b      	cmp	r3, #11
   2b68c:	ddf2      	ble.n	2b674 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2b68e:	68fb      	ldr	r3, [r7, #12]
   2b690:	2200      	movs	r2, #0
   2b692:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2b694:	68fb      	ldr	r3, [r7, #12]
   2b696:	2200      	movs	r2, #0
   2b698:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2b69a:	233b      	movs	r3, #59	; 0x3b
   2b69c:	18fb      	adds	r3, r7, r3
   2b69e:	781a      	ldrb	r2, [r3, #0]
   2b6a0:	4b5d      	ldr	r3, [pc, #372]	; (2b818 <tcc_init+0x350>)
   2b6a2:	0092      	lsls	r2, r2, #2
   2b6a4:	68f9      	ldr	r1, [r7, #12]
   2b6a6:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2b6a8:	68fb      	ldr	r3, [r7, #12]
   2b6aa:	68ba      	ldr	r2, [r7, #8]
   2b6ac:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2b6ae:	687b      	ldr	r3, [r7, #4]
   2b6b0:	22a0      	movs	r2, #160	; 0xa0
   2b6b2:	5c99      	ldrb	r1, [r3, r2]
   2b6b4:	68fb      	ldr	r3, [r7, #12]
   2b6b6:	223c      	movs	r2, #60	; 0x3c
   2b6b8:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2b6ba:	2314      	movs	r3, #20
   2b6bc:	18fb      	adds	r3, r7, r3
   2b6be:	0018      	movs	r0, r3
   2b6c0:	4b56      	ldr	r3, [pc, #344]	; (2b81c <tcc_init+0x354>)
   2b6c2:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2b6c4:	687b      	ldr	r3, [r7, #4]
   2b6c6:	7a9a      	ldrb	r2, [r3, #10]
   2b6c8:	2314      	movs	r3, #20
   2b6ca:	18fb      	adds	r3, r7, r3
   2b6cc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2b6ce:	233b      	movs	r3, #59	; 0x3b
   2b6d0:	18fb      	adds	r3, r7, r3
   2b6d2:	781b      	ldrb	r3, [r3, #0]
   2b6d4:	4a52      	ldr	r2, [pc, #328]	; (2b820 <tcc_init+0x358>)
   2b6d6:	5cd3      	ldrb	r3, [r2, r3]
   2b6d8:	2214      	movs	r2, #20
   2b6da:	18ba      	adds	r2, r7, r2
   2b6dc:	0011      	movs	r1, r2
   2b6de:	0018      	movs	r0, r3
   2b6e0:	4b50      	ldr	r3, [pc, #320]	; (2b824 <tcc_init+0x35c>)
   2b6e2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2b6e4:	233b      	movs	r3, #59	; 0x3b
   2b6e6:	18fb      	adds	r3, r7, r3
   2b6e8:	781b      	ldrb	r3, [r3, #0]
   2b6ea:	4a4d      	ldr	r2, [pc, #308]	; (2b820 <tcc_init+0x358>)
   2b6ec:	5cd3      	ldrb	r3, [r2, r3]
   2b6ee:	0018      	movs	r0, r3
   2b6f0:	4b4d      	ldr	r3, [pc, #308]	; (2b828 <tcc_init+0x360>)
   2b6f2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b6f4:	2300      	movs	r3, #0
   2b6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b6f8:	e02d      	b.n	2b756 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b6fa:	687a      	ldr	r2, [r7, #4]
   2b6fc:	2198      	movs	r1, #152	; 0x98
   2b6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b700:	18d3      	adds	r3, r2, r3
   2b702:	185b      	adds	r3, r3, r1
   2b704:	781b      	ldrb	r3, [r3, #0]
   2b706:	2201      	movs	r2, #1
   2b708:	4053      	eors	r3, r2
   2b70a:	b2db      	uxtb	r3, r3
   2b70c:	2b00      	cmp	r3, #0
   2b70e:	d11e      	bne.n	2b74e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2b710:	2310      	movs	r3, #16
   2b712:	18fb      	adds	r3, r7, r3
   2b714:	0018      	movs	r0, r3
   2b716:	4b45      	ldr	r3, [pc, #276]	; (2b82c <tcc_init+0x364>)
   2b718:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2b71a:	687b      	ldr	r3, [r7, #4]
   2b71c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b71e:	321e      	adds	r2, #30
   2b720:	0092      	lsls	r2, r2, #2
   2b722:	58d3      	ldr	r3, [r2, r3]
   2b724:	b2da      	uxtb	r2, r3
   2b726:	2310      	movs	r3, #16
   2b728:	18fb      	adds	r3, r7, r3
   2b72a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2b72c:	2310      	movs	r3, #16
   2b72e:	18fb      	adds	r3, r7, r3
   2b730:	2201      	movs	r2, #1
   2b732:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2b734:	687b      	ldr	r3, [r7, #4]
   2b736:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b738:	3216      	adds	r2, #22
   2b73a:	0092      	lsls	r2, r2, #2
   2b73c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2b73e:	b2db      	uxtb	r3, r3
   2b740:	2210      	movs	r2, #16
   2b742:	18ba      	adds	r2, r7, r2
   2b744:	0011      	movs	r1, r2
   2b746:	0018      	movs	r0, r3
   2b748:	4b39      	ldr	r3, [pc, #228]	; (2b830 <tcc_init+0x368>)
   2b74a:	4798      	blx	r3
   2b74c:	e000      	b.n	2b750 <tcc_init+0x288>
			continue;
   2b74e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b752:	3301      	adds	r3, #1
   2b754:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b756:	233b      	movs	r3, #59	; 0x3b
   2b758:	18fb      	adds	r3, r7, r3
   2b75a:	781b      	ldrb	r3, [r3, #0]
   2b75c:	4a28      	ldr	r2, [pc, #160]	; (2b800 <tcc_init+0x338>)
   2b75e:	5cd3      	ldrb	r3, [r2, r3]
   2b760:	001a      	movs	r2, r3
   2b762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b764:	429a      	cmp	r2, r3
   2b766:	dcc8      	bgt.n	2b6fa <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2b768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2b76a:	68bb      	ldr	r3, [r7, #8]
   2b76c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b76e:	46c0      	nop			; (mov r8, r8)
   2b770:	68bb      	ldr	r3, [r7, #8]
   2b772:	689b      	ldr	r3, [r3, #8]
   2b774:	2204      	movs	r2, #4
   2b776:	4013      	ands	r3, r2
   2b778:	d1fa      	bne.n	2b770 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2b77a:	68bb      	ldr	r3, [r7, #8]
   2b77c:	22ff      	movs	r2, #255	; 0xff
   2b77e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b780:	46c0      	nop			; (mov r8, r8)
   2b782:	68bb      	ldr	r3, [r7, #8]
   2b784:	689b      	ldr	r3, [r3, #8]
   2b786:	2204      	movs	r2, #4
   2b788:	4013      	ands	r3, r2
   2b78a:	d1fa      	bne.n	2b782 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2b78c:	232b      	movs	r3, #43	; 0x2b
   2b78e:	18fb      	adds	r3, r7, r3
   2b790:	781a      	ldrb	r2, [r3, #0]
   2b792:	68bb      	ldr	r3, [r7, #8]
   2b794:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2b796:	2320      	movs	r3, #32
   2b798:	18fb      	adds	r3, r7, r3
   2b79a:	681a      	ldr	r2, [r3, #0]
   2b79c:	68bb      	ldr	r3, [r7, #8]
   2b79e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2b7a0:	2320      	movs	r3, #32
   2b7a2:	18fb      	adds	r3, r7, r3
   2b7a4:	685a      	ldr	r2, [r3, #4]
   2b7a6:	68bb      	ldr	r3, [r7, #8]
   2b7a8:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2b7aa:	69fa      	ldr	r2, [r7, #28]
   2b7ac:	68bb      	ldr	r3, [r7, #8]
   2b7ae:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2b7b0:	46c0      	nop			; (mov r8, r8)
   2b7b2:	68bb      	ldr	r3, [r7, #8]
   2b7b4:	689b      	ldr	r3, [r3, #8]
   2b7b6:	4a1f      	ldr	r2, [pc, #124]	; (2b834 <tcc_init+0x36c>)
   2b7b8:	4013      	ands	r3, r2
   2b7ba:	d1fa      	bne.n	2b7b2 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2b7bc:	69ba      	ldr	r2, [r7, #24]
   2b7be:	68bb      	ldr	r3, [r7, #8]
   2b7c0:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2b7c2:	46c0      	nop			; (mov r8, r8)
   2b7c4:	68bb      	ldr	r3, [r7, #8]
   2b7c6:	689b      	ldr	r3, [r3, #8]
   2b7c8:	2210      	movs	r2, #16
   2b7ca:	4013      	ands	r3, r2
   2b7cc:	d1fa      	bne.n	2b7c4 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2b7ce:	687b      	ldr	r3, [r7, #4]
   2b7d0:	681a      	ldr	r2, [r3, #0]
   2b7d2:	68bb      	ldr	r3, [r7, #8]
   2b7d4:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2b7d6:	46c0      	nop			; (mov r8, r8)
   2b7d8:	68bb      	ldr	r3, [r7, #8]
   2b7da:	689b      	ldr	r3, [r3, #8]
   2b7dc:	4a16      	ldr	r2, [pc, #88]	; (2b838 <tcc_init+0x370>)
   2b7de:	4013      	ands	r3, r2
   2b7e0:	d1fa      	bne.n	2b7d8 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2b7e2:	687b      	ldr	r3, [r7, #4]
   2b7e4:	685a      	ldr	r2, [r3, #4]
   2b7e6:	68bb      	ldr	r3, [r7, #8]
   2b7e8:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b7ea:	2300      	movs	r3, #0
   2b7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b7ee:	e03f      	b.n	2b870 <tcc_init+0x3a8>
   2b7f0:	0002ae31 	.word	0x0002ae31
   2b7f4:	0003a0c8 	.word	0x0003a0c8
   2b7f8:	0002adad 	.word	0x0002adad
   2b7fc:	0003a0d4 	.word	0x0003a0d4
   2b800:	0003a0e4 	.word	0x0003a0e4
   2b804:	0002b13d 	.word	0x0002b13d
   2b808:	0002b1e1 	.word	0x0002b1e1
   2b80c:	0002b23d 	.word	0x0002b23d
   2b810:	0002b359 	.word	0x0002b359
   2b814:	0002b431 	.word	0x0002b431
   2b818:	20005854 	.word	0x20005854
   2b81c:	0002ad95 	.word	0x0002ad95
   2b820:	0003a0c4 	.word	0x0003a0c4
   2b824:	0002a9ad 	.word	0x0002a9ad
   2b828:	0002a9f1 	.word	0x0002a9f1
   2b82c:	0002ae09 	.word	0x0002ae09
   2b830:	0002ad0d 	.word	0x0002ad0d
   2b834:	00020040 	.word	0x00020040
   2b838:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2b83c:	46c0      	nop			; (mov r8, r8)
   2b83e:	68bb      	ldr	r3, [r7, #8]
   2b840:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2b842:	4912      	ldr	r1, [pc, #72]	; (2b88c <tcc_init+0x3c4>)
   2b844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b846:	4091      	lsls	r1, r2
   2b848:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2b84a:	4013      	ands	r3, r2
   2b84c:	d1f7      	bne.n	2b83e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2b84e:	687a      	ldr	r2, [r7, #4]
   2b850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b852:	3306      	adds	r3, #6
   2b854:	009b      	lsls	r3, r3, #2
   2b856:	18d3      	adds	r3, r2, r3
   2b858:	3304      	adds	r3, #4
   2b85a:	681a      	ldr	r2, [r3, #0]
   2b85c:	68b9      	ldr	r1, [r7, #8]
   2b85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b860:	3310      	adds	r3, #16
   2b862:	009b      	lsls	r3, r3, #2
   2b864:	18cb      	adds	r3, r1, r3
   2b866:	3304      	adds	r3, #4
   2b868:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b86c:	3301      	adds	r3, #1
   2b86e:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b870:	233b      	movs	r3, #59	; 0x3b
   2b872:	18fb      	adds	r3, r7, r3
   2b874:	781b      	ldrb	r3, [r3, #0]
   2b876:	4a06      	ldr	r2, [pc, #24]	; (2b890 <tcc_init+0x3c8>)
   2b878:	5cd3      	ldrb	r3, [r2, r3]
   2b87a:	001a      	movs	r2, r3
   2b87c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b87e:	429a      	cmp	r2, r3
   2b880:	dcdc      	bgt.n	2b83c <tcc_init+0x374>
	}

	return STATUS_OK;
   2b882:	2300      	movs	r3, #0
}
   2b884:	0018      	movs	r0, r3
   2b886:	46bd      	mov	sp, r7
   2b888:	b011      	add	sp, #68	; 0x44
   2b88a:	bd90      	pop	{r4, r7, pc}
   2b88c:	00080100 	.word	0x00080100
   2b890:	0003a0e0 	.word	0x0003a0e0

0002b894 <system_interrupt_enable>:
{
   2b894:	b580      	push	{r7, lr}
   2b896:	b082      	sub	sp, #8
   2b898:	af00      	add	r7, sp, #0
   2b89a:	0002      	movs	r2, r0
   2b89c:	1dfb      	adds	r3, r7, #7
   2b89e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2b8a0:	4b06      	ldr	r3, [pc, #24]	; (2b8bc <system_interrupt_enable+0x28>)
   2b8a2:	1dfa      	adds	r2, r7, #7
   2b8a4:	7812      	ldrb	r2, [r2, #0]
   2b8a6:	0011      	movs	r1, r2
   2b8a8:	221f      	movs	r2, #31
   2b8aa:	400a      	ands	r2, r1
   2b8ac:	2101      	movs	r1, #1
   2b8ae:	4091      	lsls	r1, r2
   2b8b0:	000a      	movs	r2, r1
   2b8b2:	601a      	str	r2, [r3, #0]
}
   2b8b4:	46c0      	nop			; (mov r8, r8)
   2b8b6:	46bd      	mov	sp, r7
   2b8b8:	b002      	add	sp, #8
   2b8ba:	bd80      	pop	{r7, pc}
   2b8bc:	e000e100 	.word	0xe000e100

0002b8c0 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2b8c0:	b580      	push	{r7, lr}
   2b8c2:	b082      	sub	sp, #8
   2b8c4:	af00      	add	r7, sp, #0
   2b8c6:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2b8c8:	4a04      	ldr	r2, [pc, #16]	; (2b8dc <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2b8ca:	687b      	ldr	r3, [r7, #4]
   2b8cc:	18d3      	adds	r3, r2, r3
   2b8ce:	781b      	ldrb	r3, [r3, #0]
   2b8d0:	b25b      	sxtb	r3, r3
}
   2b8d2:	0018      	movs	r0, r3
   2b8d4:	46bd      	mov	sp, r7
   2b8d6:	b002      	add	sp, #8
   2b8d8:	bd80      	pop	{r7, pc}
   2b8da:	46c0      	nop			; (mov r8, r8)
   2b8dc:	2000011c 	.word	0x2000011c

0002b8e0 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2b8e0:	b580      	push	{r7, lr}
   2b8e2:	b084      	sub	sp, #16
   2b8e4:	af00      	add	r7, sp, #0
   2b8e6:	60f8      	str	r0, [r7, #12]
   2b8e8:	60b9      	str	r1, [r7, #8]
   2b8ea:	1dfb      	adds	r3, r7, #7
   2b8ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2b8ee:	1dfb      	adds	r3, r7, #7
   2b8f0:	781b      	ldrb	r3, [r3, #0]
   2b8f2:	68fa      	ldr	r2, [r7, #12]
   2b8f4:	009b      	lsls	r3, r3, #2
   2b8f6:	18d3      	adds	r3, r2, r3
   2b8f8:	3304      	adds	r3, #4
   2b8fa:	68ba      	ldr	r2, [r7, #8]
   2b8fc:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2b8fe:	68fb      	ldr	r3, [r7, #12]
   2b900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2b902:	1dfb      	adds	r3, r7, #7
   2b904:	7819      	ldrb	r1, [r3, #0]
   2b906:	4b05      	ldr	r3, [pc, #20]	; (2b91c <tcc_register_callback+0x3c>)
   2b908:	0089      	lsls	r1, r1, #2
   2b90a:	58cb      	ldr	r3, [r1, r3]
   2b90c:	431a      	orrs	r2, r3
   2b90e:	68fb      	ldr	r3, [r7, #12]
   2b910:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2b912:	2300      	movs	r3, #0
}
   2b914:	0018      	movs	r0, r3
   2b916:	46bd      	mov	sp, r7
   2b918:	b004      	add	sp, #16
   2b91a:	bd80      	pop	{r7, pc}
   2b91c:	0003a0e8 	.word	0x0003a0e8

0002b920 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2b920:	b580      	push	{r7, lr}
   2b922:	b082      	sub	sp, #8
   2b924:	af00      	add	r7, sp, #0
   2b926:	6078      	str	r0, [r7, #4]
   2b928:	000a      	movs	r2, r1
   2b92a:	1cfb      	adds	r3, r7, #3
   2b92c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2b92e:	687b      	ldr	r3, [r7, #4]
   2b930:	681b      	ldr	r3, [r3, #0]
   2b932:	0018      	movs	r0, r3
   2b934:	4b0f      	ldr	r3, [pc, #60]	; (2b974 <tcc_enable_callback+0x54>)
   2b936:	4798      	blx	r3
   2b938:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2b93a:	0018      	movs	r0, r3
   2b93c:	4b0e      	ldr	r3, [pc, #56]	; (2b978 <tcc_enable_callback+0x58>)
   2b93e:	4798      	blx	r3
   2b940:	0003      	movs	r3, r0
   2b942:	0018      	movs	r0, r3
   2b944:	4b0d      	ldr	r3, [pc, #52]	; (2b97c <tcc_enable_callback+0x5c>)
   2b946:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2b948:	687b      	ldr	r3, [r7, #4]
   2b94a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2b94c:	1cfb      	adds	r3, r7, #3
   2b94e:	7819      	ldrb	r1, [r3, #0]
   2b950:	4b0b      	ldr	r3, [pc, #44]	; (2b980 <tcc_enable_callback+0x60>)
   2b952:	0089      	lsls	r1, r1, #2
   2b954:	58cb      	ldr	r3, [r1, r3]
   2b956:	431a      	orrs	r2, r3
   2b958:	687b      	ldr	r3, [r7, #4]
   2b95a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2b95c:	687b      	ldr	r3, [r7, #4]
   2b95e:	681b      	ldr	r3, [r3, #0]
   2b960:	1cfa      	adds	r2, r7, #3
   2b962:	7811      	ldrb	r1, [r2, #0]
   2b964:	4a06      	ldr	r2, [pc, #24]	; (2b980 <tcc_enable_callback+0x60>)
   2b966:	0089      	lsls	r1, r1, #2
   2b968:	588a      	ldr	r2, [r1, r2]
   2b96a:	629a      	str	r2, [r3, #40]	; 0x28
}
   2b96c:	46c0      	nop			; (mov r8, r8)
   2b96e:	46bd      	mov	sp, r7
   2b970:	b002      	add	sp, #8
   2b972:	bd80      	pop	{r7, pc}
   2b974:	0002ae31 	.word	0x0002ae31
   2b978:	0002b8c1 	.word	0x0002b8c1
   2b97c:	0002b895 	.word	0x0002b895
   2b980:	0003a0e8 	.word	0x0003a0e8

0002b984 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2b984:	b580      	push	{r7, lr}
   2b986:	af00      	add	r7, sp, #0
   2b988:	2000      	movs	r0, #0
   2b98a:	4b02      	ldr	r3, [pc, #8]	; (2b994 <TCC0_Handler+0x10>)
   2b98c:	4798      	blx	r3
   2b98e:	46c0      	nop			; (mov r8, r8)
   2b990:	46bd      	mov	sp, r7
   2b992:	bd80      	pop	{r7, pc}
   2b994:	0002b9c1 	.word	0x0002b9c1

0002b998 <TCC1_Handler>:
   2b998:	b580      	push	{r7, lr}
   2b99a:	af00      	add	r7, sp, #0
   2b99c:	2001      	movs	r0, #1
   2b99e:	4b02      	ldr	r3, [pc, #8]	; (2b9a8 <TCC1_Handler+0x10>)
   2b9a0:	4798      	blx	r3
   2b9a2:	46c0      	nop			; (mov r8, r8)
   2b9a4:	46bd      	mov	sp, r7
   2b9a6:	bd80      	pop	{r7, pc}
   2b9a8:	0002b9c1 	.word	0x0002b9c1

0002b9ac <TCC2_Handler>:
   2b9ac:	b580      	push	{r7, lr}
   2b9ae:	af00      	add	r7, sp, #0
   2b9b0:	2002      	movs	r0, #2
   2b9b2:	4b02      	ldr	r3, [pc, #8]	; (2b9bc <TCC2_Handler+0x10>)
   2b9b4:	4798      	blx	r3
   2b9b6:	46c0      	nop			; (mov r8, r8)
   2b9b8:	46bd      	mov	sp, r7
   2b9ba:	bd80      	pop	{r7, pc}
   2b9bc:	0002b9c1 	.word	0x0002b9c1

0002b9c0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2b9c0:	b580      	push	{r7, lr}
   2b9c2:	b086      	sub	sp, #24
   2b9c4:	af00      	add	r7, sp, #0
   2b9c6:	0002      	movs	r2, r0
   2b9c8:	1dfb      	adds	r3, r7, #7
   2b9ca:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2b9cc:	1dfb      	adds	r3, r7, #7
   2b9ce:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2b9d0:	4b18      	ldr	r3, [pc, #96]	; (2ba34 <_tcc_interrupt_handler+0x74>)
   2b9d2:	0092      	lsls	r2, r2, #2
   2b9d4:	58d3      	ldr	r3, [r2, r3]
   2b9d6:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b9d8:	693b      	ldr	r3, [r7, #16]
   2b9da:	681b      	ldr	r3, [r3, #0]
   2b9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2b9de:	693b      	ldr	r3, [r7, #16]
   2b9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b9e2:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2b9e4:	693b      	ldr	r3, [r7, #16]
   2b9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b9e8:	4013      	ands	r3, r2
   2b9ea:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b9ec:	2300      	movs	r3, #0
   2b9ee:	617b      	str	r3, [r7, #20]
   2b9f0:	e019      	b.n	2ba26 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2b9f2:	4b11      	ldr	r3, [pc, #68]	; (2ba38 <_tcc_interrupt_handler+0x78>)
   2b9f4:	697a      	ldr	r2, [r7, #20]
   2b9f6:	0092      	lsls	r2, r2, #2
   2b9f8:	58d3      	ldr	r3, [r2, r3]
   2b9fa:	68fa      	ldr	r2, [r7, #12]
   2b9fc:	4013      	ands	r3, r2
   2b9fe:	d00f      	beq.n	2ba20 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2ba00:	693a      	ldr	r2, [r7, #16]
   2ba02:	697b      	ldr	r3, [r7, #20]
   2ba04:	009b      	lsls	r3, r3, #2
   2ba06:	18d3      	adds	r3, r2, r3
   2ba08:	3304      	adds	r3, #4
   2ba0a:	681b      	ldr	r3, [r3, #0]
   2ba0c:	693a      	ldr	r2, [r7, #16]
   2ba0e:	0010      	movs	r0, r2
   2ba10:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2ba12:	693b      	ldr	r3, [r7, #16]
   2ba14:	681b      	ldr	r3, [r3, #0]
   2ba16:	4a08      	ldr	r2, [pc, #32]	; (2ba38 <_tcc_interrupt_handler+0x78>)
   2ba18:	6979      	ldr	r1, [r7, #20]
   2ba1a:	0089      	lsls	r1, r1, #2
   2ba1c:	588a      	ldr	r2, [r1, r2]
   2ba1e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2ba20:	697b      	ldr	r3, [r7, #20]
   2ba22:	3301      	adds	r3, #1
   2ba24:	617b      	str	r3, [r7, #20]
   2ba26:	697b      	ldr	r3, [r7, #20]
   2ba28:	2b0b      	cmp	r3, #11
   2ba2a:	dde2      	ble.n	2b9f2 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2ba2c:	46c0      	nop			; (mov r8, r8)
   2ba2e:	46bd      	mov	sp, r7
   2ba30:	b006      	add	sp, #24
   2ba32:	bd80      	pop	{r7, pc}
   2ba34:	20005854 	.word	0x20005854
   2ba38:	0003a0e8 	.word	0x0003a0e8

0002ba3c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2ba3c:	b580      	push	{r7, lr}
   2ba3e:	b082      	sub	sp, #8
   2ba40:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2ba42:	4b2f      	ldr	r3, [pc, #188]	; (2bb00 <Reset_Handler+0xc4>)
   2ba44:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2ba46:	4b2f      	ldr	r3, [pc, #188]	; (2bb04 <Reset_Handler+0xc8>)
   2ba48:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2ba4a:	687a      	ldr	r2, [r7, #4]
   2ba4c:	683b      	ldr	r3, [r7, #0]
   2ba4e:	429a      	cmp	r2, r3
   2ba50:	d00c      	beq.n	2ba6c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2ba52:	e007      	b.n	2ba64 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2ba54:	683b      	ldr	r3, [r7, #0]
   2ba56:	1d1a      	adds	r2, r3, #4
   2ba58:	603a      	str	r2, [r7, #0]
   2ba5a:	687a      	ldr	r2, [r7, #4]
   2ba5c:	1d11      	adds	r1, r2, #4
   2ba5e:	6079      	str	r1, [r7, #4]
   2ba60:	6812      	ldr	r2, [r2, #0]
   2ba62:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2ba64:	683a      	ldr	r2, [r7, #0]
   2ba66:	4b28      	ldr	r3, [pc, #160]	; (2bb08 <Reset_Handler+0xcc>)
   2ba68:	429a      	cmp	r2, r3
   2ba6a:	d3f3      	bcc.n	2ba54 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2ba6c:	4b27      	ldr	r3, [pc, #156]	; (2bb0c <Reset_Handler+0xd0>)
   2ba6e:	603b      	str	r3, [r7, #0]
   2ba70:	e004      	b.n	2ba7c <Reset_Handler+0x40>
                *pDest++ = 0;
   2ba72:	683b      	ldr	r3, [r7, #0]
   2ba74:	1d1a      	adds	r2, r3, #4
   2ba76:	603a      	str	r2, [r7, #0]
   2ba78:	2200      	movs	r2, #0
   2ba7a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2ba7c:	683a      	ldr	r2, [r7, #0]
   2ba7e:	4b24      	ldr	r3, [pc, #144]	; (2bb10 <Reset_Handler+0xd4>)
   2ba80:	429a      	cmp	r2, r3
   2ba82:	d3f6      	bcc.n	2ba72 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2ba84:	4b23      	ldr	r3, [pc, #140]	; (2bb14 <Reset_Handler+0xd8>)
   2ba86:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2ba88:	4b23      	ldr	r3, [pc, #140]	; (2bb18 <Reset_Handler+0xdc>)
   2ba8a:	687a      	ldr	r2, [r7, #4]
   2ba8c:	21ff      	movs	r1, #255	; 0xff
   2ba8e:	438a      	bics	r2, r1
   2ba90:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2ba92:	4a22      	ldr	r2, [pc, #136]	; (2bb1c <Reset_Handler+0xe0>)
   2ba94:	2390      	movs	r3, #144	; 0x90
   2ba96:	005b      	lsls	r3, r3, #1
   2ba98:	2102      	movs	r1, #2
   2ba9a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2ba9c:	4a20      	ldr	r2, [pc, #128]	; (2bb20 <Reset_Handler+0xe4>)
   2ba9e:	78d3      	ldrb	r3, [r2, #3]
   2baa0:	2103      	movs	r1, #3
   2baa2:	438b      	bics	r3, r1
   2baa4:	1c19      	adds	r1, r3, #0
   2baa6:	2302      	movs	r3, #2
   2baa8:	430b      	orrs	r3, r1
   2baaa:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2baac:	4a1c      	ldr	r2, [pc, #112]	; (2bb20 <Reset_Handler+0xe4>)
   2baae:	78d3      	ldrb	r3, [r2, #3]
   2bab0:	210c      	movs	r1, #12
   2bab2:	438b      	bics	r3, r1
   2bab4:	1c19      	adds	r1, r3, #0
   2bab6:	2308      	movs	r3, #8
   2bab8:	430b      	orrs	r3, r1
   2baba:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2babc:	4a19      	ldr	r2, [pc, #100]	; (2bb24 <Reset_Handler+0xe8>)
   2babe:	7b93      	ldrb	r3, [r2, #14]
   2bac0:	2130      	movs	r1, #48	; 0x30
   2bac2:	438b      	bics	r3, r1
   2bac4:	1c19      	adds	r1, r3, #0
   2bac6:	2320      	movs	r3, #32
   2bac8:	430b      	orrs	r3, r1
   2baca:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2bacc:	4a15      	ldr	r2, [pc, #84]	; (2bb24 <Reset_Handler+0xe8>)
   2bace:	7b93      	ldrb	r3, [r2, #14]
   2bad0:	210c      	movs	r1, #12
   2bad2:	438b      	bics	r3, r1
   2bad4:	1c19      	adds	r1, r3, #0
   2bad6:	2308      	movs	r3, #8
   2bad8:	430b      	orrs	r3, r1
   2bada:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2badc:	4a11      	ldr	r2, [pc, #68]	; (2bb24 <Reset_Handler+0xe8>)
   2bade:	7b93      	ldrb	r3, [r2, #14]
   2bae0:	2103      	movs	r1, #3
   2bae2:	438b      	bics	r3, r1
   2bae4:	1c19      	adds	r1, r3, #0
   2bae6:	2302      	movs	r3, #2
   2bae8:	430b      	orrs	r3, r1
   2baea:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2baec:	4a0e      	ldr	r2, [pc, #56]	; (2bb28 <Reset_Handler+0xec>)
   2baee:	6853      	ldr	r3, [r2, #4]
   2baf0:	2180      	movs	r1, #128	; 0x80
   2baf2:	430b      	orrs	r3, r1
   2baf4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2baf6:	4b0d      	ldr	r3, [pc, #52]	; (2bb2c <Reset_Handler+0xf0>)
   2baf8:	4798      	blx	r3

        /* Branch to main function */
        main();
   2bafa:	4b0d      	ldr	r3, [pc, #52]	; (2bb30 <Reset_Handler+0xf4>)
   2bafc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2bafe:	e7fe      	b.n	2bafe <Reset_Handler+0xc2>
   2bb00:	0003aee0 	.word	0x0003aee0
   2bb04:	20000000 	.word	0x20000000
   2bb08:	200002f4 	.word	0x200002f4
   2bb0c:	20000300 	.word	0x20000300
   2bb10:	200058c4 	.word	0x200058c4
   2bb14:	00012000 	.word	0x00012000
   2bb18:	e000ed00 	.word	0xe000ed00
   2bb1c:	41007000 	.word	0x41007000
   2bb20:	41005000 	.word	0x41005000
   2bb24:	41004800 	.word	0x41004800
   2bb28:	41004000 	.word	0x41004000
   2bb2c:	0003549d 	.word	0x0003549d
   2bb30:	00033271 	.word	0x00033271

0002bb34 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2bb34:	b580      	push	{r7, lr}
   2bb36:	af00      	add	r7, sp, #0
  __asm volatile (
   2bb38:	2004      	movs	r0, #4
   2bb3a:	4671      	mov	r1, lr
   2bb3c:	4208      	tst	r0, r1
   2bb3e:	d002      	beq.n	2bb46 <_MSP>
   2bb40:	f3ef 8009 	mrs	r0, PSP
   2bb44:	e001      	b.n	2bb4a <_HALT>

0002bb46 <_MSP>:
   2bb46:	f3ef 8008 	mrs	r0, MSP

0002bb4a <_HALT>:
   2bb4a:	6941      	ldr	r1, [r0, #20]
   2bb4c:	e004      	b.n	2bb58 <HardFault_HandlerC>
   2bb4e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2bb50:	46c0      	nop			; (mov r8, r8)
   2bb52:	46bd      	mov	sp, r7
   2bb54:	bd80      	pop	{r7, pc}
	...

0002bb58 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2bb58:	b580      	push	{r7, lr}
   2bb5a:	b090      	sub	sp, #64	; 0x40
   2bb5c:	af00      	add	r7, sp, #0
   2bb5e:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2bb60:	687b      	ldr	r3, [r7, #4]
   2bb62:	681b      	ldr	r3, [r3, #0]
   2bb64:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2bb66:	687b      	ldr	r3, [r7, #4]
   2bb68:	685b      	ldr	r3, [r3, #4]
   2bb6a:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2bb6c:	687b      	ldr	r3, [r7, #4]
   2bb6e:	689b      	ldr	r3, [r3, #8]
   2bb70:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2bb72:	687b      	ldr	r3, [r7, #4]
   2bb74:	68db      	ldr	r3, [r3, #12]
   2bb76:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2bb78:	687b      	ldr	r3, [r7, #4]
   2bb7a:	691b      	ldr	r3, [r3, #16]
   2bb7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2bb7e:	687b      	ldr	r3, [r7, #4]
   2bb80:	695b      	ldr	r3, [r3, #20]
   2bb82:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2bb84:	687b      	ldr	r3, [r7, #4]
   2bb86:	699b      	ldr	r3, [r3, #24]
   2bb88:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2bb8a:	687b      	ldr	r3, [r7, #4]
   2bb8c:	69db      	ldr	r3, [r3, #28]
   2bb8e:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2bb90:	4b0b      	ldr	r3, [pc, #44]	; (2bbc0 <HardFault_HandlerC+0x68>)
   2bb92:	681b      	ldr	r3, [r3, #0]
   2bb94:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2bb96:	4b0b      	ldr	r3, [pc, #44]	; (2bbc4 <HardFault_HandlerC+0x6c>)
   2bb98:	681b      	ldr	r3, [r3, #0]
   2bb9a:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2bb9c:	4b0a      	ldr	r3, [pc, #40]	; (2bbc8 <HardFault_HandlerC+0x70>)
   2bb9e:	681b      	ldr	r3, [r3, #0]
   2bba0:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2bba2:	4b0a      	ldr	r3, [pc, #40]	; (2bbcc <HardFault_HandlerC+0x74>)
   2bba4:	681b      	ldr	r3, [r3, #0]
   2bba6:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2bba8:	4b09      	ldr	r3, [pc, #36]	; (2bbd0 <HardFault_HandlerC+0x78>)
   2bbaa:	681b      	ldr	r3, [r3, #0]
   2bbac:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2bbae:	4b09      	ldr	r3, [pc, #36]	; (2bbd4 <HardFault_HandlerC+0x7c>)
   2bbb0:	681b      	ldr	r3, [r3, #0]
   2bbb2:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2bbb4:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2bbb6:	46c0      	nop			; (mov r8, r8)
   2bbb8:	46bd      	mov	sp, r7
   2bbba:	b010      	add	sp, #64	; 0x40
   2bbbc:	bd80      	pop	{r7, pc}
   2bbbe:	46c0      	nop			; (mov r8, r8)
   2bbc0:	e000ed28 	.word	0xe000ed28
   2bbc4:	e000ed2c 	.word	0xe000ed2c
   2bbc8:	e000ed30 	.word	0xe000ed30
   2bbcc:	e000ed3c 	.word	0xe000ed3c
   2bbd0:	e000ed34 	.word	0xe000ed34
   2bbd4:	e000ed38 	.word	0xe000ed38

0002bbd8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2bbd8:	b580      	push	{r7, lr}
   2bbda:	b086      	sub	sp, #24
   2bbdc:	af00      	add	r7, sp, #0
   2bbde:	60f8      	str	r0, [r7, #12]
   2bbe0:	60b9      	str	r1, [r7, #8]
   2bbe2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2bbe4:	2300      	movs	r3, #0
   2bbe6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2bbe8:	68fb      	ldr	r3, [r7, #12]
   2bbea:	2b00      	cmp	r3, #0
   2bbec:	d012      	beq.n	2bc14 <_read+0x3c>
		return -1;
   2bbee:	2301      	movs	r3, #1
   2bbf0:	425b      	negs	r3, r3
   2bbf2:	e013      	b.n	2bc1c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2bbf4:	4b0b      	ldr	r3, [pc, #44]	; (2bc24 <_read+0x4c>)
   2bbf6:	681a      	ldr	r2, [r3, #0]
   2bbf8:	4b0b      	ldr	r3, [pc, #44]	; (2bc28 <_read+0x50>)
   2bbfa:	681b      	ldr	r3, [r3, #0]
   2bbfc:	68b9      	ldr	r1, [r7, #8]
   2bbfe:	0018      	movs	r0, r3
   2bc00:	4790      	blx	r2
		ptr++;
   2bc02:	68bb      	ldr	r3, [r7, #8]
   2bc04:	3301      	adds	r3, #1
   2bc06:	60bb      	str	r3, [r7, #8]
		nChars++;
   2bc08:	697b      	ldr	r3, [r7, #20]
   2bc0a:	3301      	adds	r3, #1
   2bc0c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2bc0e:	687b      	ldr	r3, [r7, #4]
   2bc10:	3b01      	subs	r3, #1
   2bc12:	607b      	str	r3, [r7, #4]
   2bc14:	687b      	ldr	r3, [r7, #4]
   2bc16:	2b00      	cmp	r3, #0
   2bc18:	dcec      	bgt.n	2bbf4 <_read+0x1c>
	}
	return nChars;
   2bc1a:	697b      	ldr	r3, [r7, #20]
}
   2bc1c:	0018      	movs	r0, r3
   2bc1e:	46bd      	mov	sp, r7
   2bc20:	b006      	add	sp, #24
   2bc22:	bd80      	pop	{r7, pc}
   2bc24:	20005860 	.word	0x20005860
   2bc28:	20005868 	.word	0x20005868

0002bc2c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2bc2c:	b580      	push	{r7, lr}
   2bc2e:	b086      	sub	sp, #24
   2bc30:	af00      	add	r7, sp, #0
   2bc32:	60f8      	str	r0, [r7, #12]
   2bc34:	60b9      	str	r1, [r7, #8]
   2bc36:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2bc38:	2300      	movs	r3, #0
   2bc3a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2bc3c:	68fb      	ldr	r3, [r7, #12]
   2bc3e:	2b01      	cmp	r3, #1
   2bc40:	d01d      	beq.n	2bc7e <_write+0x52>
   2bc42:	68fb      	ldr	r3, [r7, #12]
   2bc44:	2b02      	cmp	r3, #2
   2bc46:	d01a      	beq.n	2bc7e <_write+0x52>
   2bc48:	68fb      	ldr	r3, [r7, #12]
   2bc4a:	2b03      	cmp	r3, #3
   2bc4c:	d017      	beq.n	2bc7e <_write+0x52>
		return -1;
   2bc4e:	2301      	movs	r3, #1
   2bc50:	425b      	negs	r3, r3
   2bc52:	e018      	b.n	2bc86 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2bc54:	4b0e      	ldr	r3, [pc, #56]	; (2bc90 <_write+0x64>)
   2bc56:	681a      	ldr	r2, [r3, #0]
   2bc58:	4b0e      	ldr	r3, [pc, #56]	; (2bc94 <_write+0x68>)
   2bc5a:	6818      	ldr	r0, [r3, #0]
   2bc5c:	68bb      	ldr	r3, [r7, #8]
   2bc5e:	1c59      	adds	r1, r3, #1
   2bc60:	60b9      	str	r1, [r7, #8]
   2bc62:	781b      	ldrb	r3, [r3, #0]
   2bc64:	0019      	movs	r1, r3
   2bc66:	4790      	blx	r2
   2bc68:	1e03      	subs	r3, r0, #0
   2bc6a:	da02      	bge.n	2bc72 <_write+0x46>
			return -1;
   2bc6c:	2301      	movs	r3, #1
   2bc6e:	425b      	negs	r3, r3
   2bc70:	e009      	b.n	2bc86 <_write+0x5a>
		}
		++nChars;
   2bc72:	697b      	ldr	r3, [r7, #20]
   2bc74:	3301      	adds	r3, #1
   2bc76:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2bc78:	687b      	ldr	r3, [r7, #4]
   2bc7a:	3b01      	subs	r3, #1
   2bc7c:	607b      	str	r3, [r7, #4]
   2bc7e:	687b      	ldr	r3, [r7, #4]
   2bc80:	2b00      	cmp	r3, #0
   2bc82:	d1e7      	bne.n	2bc54 <_write+0x28>
	}
	return nChars;
   2bc84:	697b      	ldr	r3, [r7, #20]
}
   2bc86:	0018      	movs	r0, r3
   2bc88:	46bd      	mov	sp, r7
   2bc8a:	b006      	add	sp, #24
   2bc8c:	bd80      	pop	{r7, pc}
   2bc8e:	46c0      	nop			; (mov r8, r8)
   2bc90:	20005864 	.word	0x20005864
   2bc94:	20005868 	.word	0x20005868

0002bc98 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2bc98:	b580      	push	{r7, lr}
   2bc9a:	b084      	sub	sp, #16
   2bc9c:	af00      	add	r7, sp, #0
   2bc9e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2bca0:	4b0a      	ldr	r3, [pc, #40]	; (2bccc <_sbrk+0x34>)
   2bca2:	681b      	ldr	r3, [r3, #0]
   2bca4:	2b00      	cmp	r3, #0
   2bca6:	d102      	bne.n	2bcae <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2bca8:	4b08      	ldr	r3, [pc, #32]	; (2bccc <_sbrk+0x34>)
   2bcaa:	4a09      	ldr	r2, [pc, #36]	; (2bcd0 <_sbrk+0x38>)
   2bcac:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2bcae:	4b07      	ldr	r3, [pc, #28]	; (2bccc <_sbrk+0x34>)
   2bcb0:	681b      	ldr	r3, [r3, #0]
   2bcb2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2bcb4:	4b05      	ldr	r3, [pc, #20]	; (2bccc <_sbrk+0x34>)
   2bcb6:	681a      	ldr	r2, [r3, #0]
   2bcb8:	687b      	ldr	r3, [r7, #4]
   2bcba:	18d2      	adds	r2, r2, r3
   2bcbc:	4b03      	ldr	r3, [pc, #12]	; (2bccc <_sbrk+0x34>)
   2bcbe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2bcc0:	68fb      	ldr	r3, [r7, #12]
}
   2bcc2:	0018      	movs	r0, r3
   2bcc4:	46bd      	mov	sp, r7
   2bcc6:	b004      	add	sp, #16
   2bcc8:	bd80      	pop	{r7, pc}
   2bcca:	46c0      	nop			; (mov r8, r8)
   2bccc:	20003f2c 	.word	0x20003f2c
   2bcd0:	200078c8 	.word	0x200078c8

0002bcd4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2bcd4:	b580      	push	{r7, lr}
   2bcd6:	b082      	sub	sp, #8
   2bcd8:	af00      	add	r7, sp, #0
   2bcda:	6078      	str	r0, [r7, #4]
	return -1;
   2bcdc:	2301      	movs	r3, #1
   2bcde:	425b      	negs	r3, r3
}
   2bce0:	0018      	movs	r0, r3
   2bce2:	46bd      	mov	sp, r7
   2bce4:	b002      	add	sp, #8
   2bce6:	bd80      	pop	{r7, pc}

0002bce8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2bce8:	b580      	push	{r7, lr}
   2bcea:	b082      	sub	sp, #8
   2bcec:	af00      	add	r7, sp, #0
   2bcee:	6078      	str	r0, [r7, #4]
   2bcf0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2bcf2:	683b      	ldr	r3, [r7, #0]
   2bcf4:	2280      	movs	r2, #128	; 0x80
   2bcf6:	0192      	lsls	r2, r2, #6
   2bcf8:	605a      	str	r2, [r3, #4]

	return 0;
   2bcfa:	2300      	movs	r3, #0
}
   2bcfc:	0018      	movs	r0, r3
   2bcfe:	46bd      	mov	sp, r7
   2bd00:	b002      	add	sp, #8
   2bd02:	bd80      	pop	{r7, pc}

0002bd04 <_isatty>:

extern int _isatty(int file)
{
   2bd04:	b580      	push	{r7, lr}
   2bd06:	b082      	sub	sp, #8
   2bd08:	af00      	add	r7, sp, #0
   2bd0a:	6078      	str	r0, [r7, #4]
	return 1;
   2bd0c:	2301      	movs	r3, #1
}
   2bd0e:	0018      	movs	r0, r3
   2bd10:	46bd      	mov	sp, r7
   2bd12:	b002      	add	sp, #8
   2bd14:	bd80      	pop	{r7, pc}

0002bd16 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2bd16:	b580      	push	{r7, lr}
   2bd18:	b084      	sub	sp, #16
   2bd1a:	af00      	add	r7, sp, #0
   2bd1c:	60f8      	str	r0, [r7, #12]
   2bd1e:	60b9      	str	r1, [r7, #8]
   2bd20:	607a      	str	r2, [r7, #4]
	return 0;
   2bd22:	2300      	movs	r3, #0
}
   2bd24:	0018      	movs	r0, r3
   2bd26:	46bd      	mov	sp, r7
   2bd28:	b004      	add	sp, #16
   2bd2a:	bd80      	pop	{r7, pc}

0002bd2c <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2bd2c:	b580      	push	{r7, lr}
   2bd2e:	b082      	sub	sp, #8
   2bd30:	af00      	add	r7, sp, #0
   2bd32:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2bd34:	687b      	ldr	r3, [r7, #4]
   2bd36:	2200      	movs	r2, #0
   2bd38:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2bd3a:	687b      	ldr	r3, [r7, #4]
   2bd3c:	2200      	movs	r2, #0
   2bd3e:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2bd40:	687b      	ldr	r3, [r7, #4]
   2bd42:	2200      	movs	r2, #0
   2bd44:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2bd46:	687b      	ldr	r3, [r7, #4]
   2bd48:	2200      	movs	r2, #0
   2bd4a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2bd4c:	687b      	ldr	r3, [r7, #4]
   2bd4e:	2201      	movs	r2, #1
   2bd50:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2bd52:	687b      	ldr	r3, [r7, #4]
   2bd54:	2201      	movs	r2, #1
   2bd56:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2bd58:	687b      	ldr	r3, [r7, #4]
   2bd5a:	22fa      	movs	r2, #250	; 0xfa
   2bd5c:	00d2      	lsls	r2, r2, #3
   2bd5e:	80da      	strh	r2, [r3, #6]
}
   2bd60:	46c0      	nop			; (mov r8, r8)
   2bd62:	46bd      	mov	sp, r7
   2bd64:	b002      	add	sp, #8
   2bd66:	bd80      	pop	{r7, pc}

0002bd68 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2bd68:	b580      	push	{r7, lr}
   2bd6a:	b086      	sub	sp, #24
   2bd6c:	af00      	add	r7, sp, #0
   2bd6e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2bd70:	230c      	movs	r3, #12
   2bd72:	18fb      	adds	r3, r7, r3
   2bd74:	0018      	movs	r0, r3
   2bd76:	4b23      	ldr	r3, [pc, #140]	; (2be04 <rtc_calendar_get_config_defaults+0x9c>)
   2bd78:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2bd7a:	687b      	ldr	r3, [r7, #4]
   2bd7c:	22a0      	movs	r2, #160	; 0xa0
   2bd7e:	0112      	lsls	r2, r2, #4
   2bd80:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2bd82:	687b      	ldr	r3, [r7, #4]
   2bd84:	2200      	movs	r2, #0
   2bd86:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2bd88:	687b      	ldr	r3, [r7, #4]
   2bd8a:	2200      	movs	r2, #0
   2bd8c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2bd8e:	687b      	ldr	r3, [r7, #4]
   2bd90:	2200      	movs	r2, #0
   2bd92:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2bd94:	687b      	ldr	r3, [r7, #4]
   2bd96:	22fa      	movs	r2, #250	; 0xfa
   2bd98:	00d2      	lsls	r2, r2, #3
   2bd9a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2bd9c:	2317      	movs	r3, #23
   2bd9e:	18fb      	adds	r3, r7, r3
   2bda0:	2200      	movs	r2, #0
   2bda2:	701a      	strb	r2, [r3, #0]
   2bda4:	e025      	b.n	2bdf2 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2bda6:	2317      	movs	r3, #23
   2bda8:	18fb      	adds	r3, r7, r3
   2bdaa:	781a      	ldrb	r2, [r3, #0]
   2bdac:	6879      	ldr	r1, [r7, #4]
   2bdae:	2008      	movs	r0, #8
   2bdb0:	0013      	movs	r3, r2
   2bdb2:	009b      	lsls	r3, r3, #2
   2bdb4:	189b      	adds	r3, r3, r2
   2bdb6:	005b      	lsls	r3, r3, #1
   2bdb8:	18cb      	adds	r3, r1, r3
   2bdba:	181a      	adds	r2, r3, r0
   2bdbc:	230c      	movs	r3, #12
   2bdbe:	18fb      	adds	r3, r7, r3
   2bdc0:	0010      	movs	r0, r2
   2bdc2:	0019      	movs	r1, r3
   2bdc4:	2308      	movs	r3, #8
   2bdc6:	001a      	movs	r2, r3
   2bdc8:	4b0f      	ldr	r3, [pc, #60]	; (2be08 <rtc_calendar_get_config_defaults+0xa0>)
   2bdca:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2bdcc:	2317      	movs	r3, #23
   2bdce:	18fb      	adds	r3, r7, r3
   2bdd0:	781a      	ldrb	r2, [r3, #0]
   2bdd2:	6879      	ldr	r1, [r7, #4]
   2bdd4:	0013      	movs	r3, r2
   2bdd6:	009b      	lsls	r3, r3, #2
   2bdd8:	189b      	adds	r3, r3, r2
   2bdda:	005b      	lsls	r3, r3, #1
   2bddc:	18cb      	adds	r3, r1, r3
   2bdde:	3310      	adds	r3, #16
   2bde0:	2206      	movs	r2, #6
   2bde2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2bde4:	2317      	movs	r3, #23
   2bde6:	18fb      	adds	r3, r7, r3
   2bde8:	781a      	ldrb	r2, [r3, #0]
   2bdea:	2317      	movs	r3, #23
   2bdec:	18fb      	adds	r3, r7, r3
   2bdee:	3201      	adds	r2, #1
   2bdf0:	701a      	strb	r2, [r3, #0]
   2bdf2:	2317      	movs	r3, #23
   2bdf4:	18fb      	adds	r3, r7, r3
   2bdf6:	781b      	ldrb	r3, [r3, #0]
   2bdf8:	2b00      	cmp	r3, #0
   2bdfa:	d0d4      	beq.n	2bda6 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2bdfc:	46c0      	nop			; (mov r8, r8)
   2bdfe:	46bd      	mov	sp, r7
   2be00:	b006      	add	sp, #24
   2be02:	bd80      	pop	{r7, pc}
   2be04:	0002bd2d 	.word	0x0002bd2d
   2be08:	0003550d 	.word	0x0003550d

0002be0c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2be0c:	b580      	push	{r7, lr}
   2be0e:	b088      	sub	sp, #32
   2be10:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2be12:	230c      	movs	r3, #12
   2be14:	18fb      	adds	r3, r7, r3
   2be16:	0018      	movs	r0, r3
   2be18:	4b1a      	ldr	r3, [pc, #104]	; (2be84 <configure_rtc_calendar+0x78>)
   2be1a:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2be1c:	1d3b      	adds	r3, r7, #4
   2be1e:	0018      	movs	r0, r3
   2be20:	4b19      	ldr	r3, [pc, #100]	; (2be88 <configure_rtc_calendar+0x7c>)
   2be22:	4798      	blx	r3
	init_time.year   = 2014;
   2be24:	1d3b      	adds	r3, r7, #4
   2be26:	4a19      	ldr	r2, [pc, #100]	; (2be8c <configure_rtc_calendar+0x80>)
   2be28:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2be2a:	1d3b      	adds	r3, r7, #4
   2be2c:	2201      	movs	r2, #1
   2be2e:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2be30:	1d3b      	adds	r3, r7, #4
   2be32:	2201      	movs	r2, #1
   2be34:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2be36:	1d3b      	adds	r3, r7, #4
   2be38:	2200      	movs	r2, #0
   2be3a:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2be3c:	1d3b      	adds	r3, r7, #4
   2be3e:	2200      	movs	r2, #0
   2be40:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2be42:	1d3b      	adds	r3, r7, #4
   2be44:	2204      	movs	r2, #4
   2be46:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2be48:	230c      	movs	r3, #12
   2be4a:	18fb      	adds	r3, r7, r3
   2be4c:	2201      	movs	r2, #1
   2be4e:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2be50:	230c      	movs	r3, #12
   2be52:	18fb      	adds	r3, r7, r3
   2be54:	1d3a      	adds	r2, r7, #4
   2be56:	3308      	adds	r3, #8
   2be58:	ca03      	ldmia	r2!, {r0, r1}
   2be5a:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2be5c:	230c      	movs	r3, #12
   2be5e:	18fb      	adds	r3, r7, r3
   2be60:	2206      	movs	r2, #6
   2be62:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2be64:	230c      	movs	r3, #12
   2be66:	18fa      	adds	r2, r7, r3
   2be68:	4909      	ldr	r1, [pc, #36]	; (2be90 <configure_rtc_calendar+0x84>)
   2be6a:	4b0a      	ldr	r3, [pc, #40]	; (2be94 <configure_rtc_calendar+0x88>)
   2be6c:	0018      	movs	r0, r3
   2be6e:	4b0a      	ldr	r3, [pc, #40]	; (2be98 <configure_rtc_calendar+0x8c>)
   2be70:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2be72:	4b08      	ldr	r3, [pc, #32]	; (2be94 <configure_rtc_calendar+0x88>)
   2be74:	0018      	movs	r0, r3
   2be76:	4b09      	ldr	r3, [pc, #36]	; (2be9c <configure_rtc_calendar+0x90>)
   2be78:	4798      	blx	r3
}
   2be7a:	46c0      	nop			; (mov r8, r8)
   2be7c:	46bd      	mov	sp, r7
   2be7e:	b008      	add	sp, #32
   2be80:	bd80      	pop	{r7, pc}
   2be82:	46c0      	nop			; (mov r8, r8)
   2be84:	0002bd69 	.word	0x0002bd69
   2be88:	0002bd2d 	.word	0x0002bd2d
   2be8c:	000007de 	.word	0x000007de
   2be90:	40001400 	.word	0x40001400
   2be94:	2000586c 	.word	0x2000586c
   2be98:	00027949 	.word	0x00027949
   2be9c:	00027675 	.word	0x00027675

0002bea0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2bea0:	b590      	push	{r4, r7, lr}
   2bea2:	b085      	sub	sp, #20
   2bea4:	af00      	add	r7, sp, #0
   2bea6:	0002      	movs	r2, r0
   2bea8:	1dfb      	adds	r3, r7, #7
   2beaa:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2beac:	4b1a      	ldr	r3, [pc, #104]	; (2bf18 <disk_initialize+0x78>)
   2beae:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2beb0:	1dfb      	adds	r3, r7, #7
   2beb2:	781b      	ldrb	r3, [r3, #0]
   2beb4:	2b01      	cmp	r3, #1
   2beb6:	d901      	bls.n	2bebc <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2beb8:	2301      	movs	r3, #1
   2beba:	e029      	b.n	2bf10 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2bebc:	2300      	movs	r3, #0
   2bebe:	60fb      	str	r3, [r7, #12]
   2bec0:	e010      	b.n	2bee4 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2bec2:	230b      	movs	r3, #11
   2bec4:	18fc      	adds	r4, r7, r3
   2bec6:	1dfb      	adds	r3, r7, #7
   2bec8:	781b      	ldrb	r3, [r3, #0]
   2beca:	0018      	movs	r0, r3
   2becc:	4b13      	ldr	r3, [pc, #76]	; (2bf1c <disk_initialize+0x7c>)
   2bece:	4798      	blx	r3
   2bed0:	0003      	movs	r3, r0
   2bed2:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2bed4:	230b      	movs	r3, #11
   2bed6:	18fb      	adds	r3, r7, r3
   2bed8:	781b      	ldrb	r3, [r3, #0]
   2beda:	2b03      	cmp	r3, #3
   2bedc:	d106      	bne.n	2beec <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2bede:	68fb      	ldr	r3, [r7, #12]
   2bee0:	3301      	adds	r3, #1
   2bee2:	60fb      	str	r3, [r7, #12]
   2bee4:	68fb      	ldr	r3, [r7, #12]
   2bee6:	2b01      	cmp	r3, #1
   2bee8:	ddeb      	ble.n	2bec2 <disk_initialize+0x22>
   2beea:	e000      	b.n	2beee <disk_initialize+0x4e>
			break;
   2beec:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2beee:	230b      	movs	r3, #11
   2bef0:	18fb      	adds	r3, r7, r3
   2bef2:	781b      	ldrb	r3, [r3, #0]
   2bef4:	2b00      	cmp	r3, #0
   2bef6:	d001      	beq.n	2befc <disk_initialize+0x5c>
		return STA_NOINIT;
   2bef8:	2301      	movs	r3, #1
   2befa:	e009      	b.n	2bf10 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2befc:	1dfb      	adds	r3, r7, #7
   2befe:	781b      	ldrb	r3, [r3, #0]
   2bf00:	0018      	movs	r0, r3
   2bf02:	4b07      	ldr	r3, [pc, #28]	; (2bf20 <disk_initialize+0x80>)
   2bf04:	4798      	blx	r3
   2bf06:	1e03      	subs	r3, r0, #0
   2bf08:	d001      	beq.n	2bf0e <disk_initialize+0x6e>
		return STA_PROTECT;
   2bf0a:	2304      	movs	r3, #4
   2bf0c:	e000      	b.n	2bf10 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2bf0e:	2300      	movs	r3, #0
}
   2bf10:	0018      	movs	r0, r3
   2bf12:	46bd      	mov	sp, r7
   2bf14:	b005      	add	sp, #20
   2bf16:	bd90      	pop	{r4, r7, pc}
   2bf18:	0002be0d 	.word	0x0002be0d
   2bf1c:	00026b71 	.word	0x00026b71
   2bf20:	00026c29 	.word	0x00026c29

0002bf24 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2bf24:	b580      	push	{r7, lr}
   2bf26:	b082      	sub	sp, #8
   2bf28:	af00      	add	r7, sp, #0
   2bf2a:	0002      	movs	r2, r0
   2bf2c:	1dfb      	adds	r3, r7, #7
   2bf2e:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2bf30:	1dfb      	adds	r3, r7, #7
   2bf32:	781b      	ldrb	r3, [r3, #0]
   2bf34:	0018      	movs	r0, r3
   2bf36:	4b08      	ldr	r3, [pc, #32]	; (2bf58 <disk_status+0x34>)
   2bf38:	4798      	blx	r3
   2bf3a:	1e03      	subs	r3, r0, #0
   2bf3c:	d002      	beq.n	2bf44 <disk_status+0x20>
   2bf3e:	2b02      	cmp	r3, #2
   2bf40:	d002      	beq.n	2bf48 <disk_status+0x24>
   2bf42:	e003      	b.n	2bf4c <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2bf44:	2300      	movs	r3, #0
   2bf46:	e002      	b.n	2bf4e <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2bf48:	2303      	movs	r3, #3
   2bf4a:	e000      	b.n	2bf4e <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2bf4c:	2301      	movs	r3, #1
	}
}
   2bf4e:	0018      	movs	r0, r3
   2bf50:	46bd      	mov	sp, r7
   2bf52:	b002      	add	sp, #8
   2bf54:	bd80      	pop	{r7, pc}
   2bf56:	46c0      	nop			; (mov r8, r8)
   2bf58:	00026b71 	.word	0x00026b71

0002bf5c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2bf5c:	b590      	push	{r4, r7, lr}
   2bf5e:	b089      	sub	sp, #36	; 0x24
   2bf60:	af00      	add	r7, sp, #0
   2bf62:	60b9      	str	r1, [r7, #8]
   2bf64:	607a      	str	r2, [r7, #4]
   2bf66:	0019      	movs	r1, r3
   2bf68:	230f      	movs	r3, #15
   2bf6a:	18fb      	adds	r3, r7, r3
   2bf6c:	1c02      	adds	r2, r0, #0
   2bf6e:	701a      	strb	r2, [r3, #0]
   2bf70:	230e      	movs	r3, #14
   2bf72:	18fb      	adds	r3, r7, r3
   2bf74:	1c0a      	adds	r2, r1, #0
   2bf76:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2bf78:	231b      	movs	r3, #27
   2bf7a:	18fc      	adds	r4, r7, r3
   2bf7c:	230f      	movs	r3, #15
   2bf7e:	18fb      	adds	r3, r7, r3
   2bf80:	781b      	ldrb	r3, [r3, #0]
   2bf82:	0018      	movs	r0, r3
   2bf84:	4b28      	ldr	r3, [pc, #160]	; (2c028 <disk_read+0xcc>)
   2bf86:	4798      	blx	r3
   2bf88:	0003      	movs	r3, r0
   2bf8a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2bf8c:	231b      	movs	r3, #27
   2bf8e:	18fb      	adds	r3, r7, r3
   2bf90:	781b      	ldrb	r3, [r3, #0]
   2bf92:	2b00      	cmp	r3, #0
   2bf94:	d101      	bne.n	2bf9a <disk_read+0x3e>
		return RES_ERROR;
   2bf96:	2301      	movs	r3, #1
   2bf98:	e042      	b.n	2c020 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2bf9a:	2314      	movs	r3, #20
   2bf9c:	18fa      	adds	r2, r7, r3
   2bf9e:	230f      	movs	r3, #15
   2bfa0:	18fb      	adds	r3, r7, r3
   2bfa2:	781b      	ldrb	r3, [r3, #0]
   2bfa4:	0011      	movs	r1, r2
   2bfa6:	0018      	movs	r0, r3
   2bfa8:	4b20      	ldr	r3, [pc, #128]	; (2c02c <disk_read+0xd0>)
   2bfaa:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2bfac:	230e      	movs	r3, #14
   2bfae:	18fb      	adds	r3, r7, r3
   2bfb0:	781b      	ldrb	r3, [r3, #0]
   2bfb2:	221b      	movs	r2, #27
   2bfb4:	18ba      	adds	r2, r7, r2
   2bfb6:	7812      	ldrb	r2, [r2, #0]
   2bfb8:	4353      	muls	r3, r2
   2bfba:	001a      	movs	r2, r3
   2bfbc:	687b      	ldr	r3, [r7, #4]
   2bfbe:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2bfc0:	697b      	ldr	r3, [r7, #20]
   2bfc2:	3301      	adds	r3, #1
   2bfc4:	211b      	movs	r1, #27
   2bfc6:	1879      	adds	r1, r7, r1
   2bfc8:	7809      	ldrb	r1, [r1, #0]
   2bfca:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2bfcc:	429a      	cmp	r2, r3
   2bfce:	d901      	bls.n	2bfd4 <disk_read+0x78>
		return RES_PARERR;
   2bfd0:	2304      	movs	r3, #4
   2bfd2:	e025      	b.n	2c020 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2bfd4:	2300      	movs	r3, #0
   2bfd6:	61fb      	str	r3, [r7, #28]
   2bfd8:	e01b      	b.n	2c012 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2bfda:	231b      	movs	r3, #27
   2bfdc:	18fb      	adds	r3, r7, r3
   2bfde:	781b      	ldrb	r3, [r3, #0]
   2bfe0:	69fa      	ldr	r2, [r7, #28]
   2bfe2:	435a      	muls	r2, r3
   2bfe4:	687b      	ldr	r3, [r7, #4]
   2bfe6:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2bfe8:	231b      	movs	r3, #27
   2bfea:	18fb      	adds	r3, r7, r3
   2bfec:	781b      	ldrb	r3, [r3, #0]
   2bfee:	69fa      	ldr	r2, [r7, #28]
   2bff0:	4353      	muls	r3, r2
   2bff2:	025b      	lsls	r3, r3, #9
   2bff4:	68ba      	ldr	r2, [r7, #8]
   2bff6:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2bff8:	230f      	movs	r3, #15
   2bffa:	18fb      	adds	r3, r7, r3
   2bffc:	781b      	ldrb	r3, [r3, #0]
   2bffe:	0018      	movs	r0, r3
   2c000:	4b0b      	ldr	r3, [pc, #44]	; (2c030 <disk_read+0xd4>)
   2c002:	4798      	blx	r3
   2c004:	1e03      	subs	r3, r0, #0
   2c006:	d001      	beq.n	2c00c <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c008:	2301      	movs	r3, #1
   2c00a:	e009      	b.n	2c020 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2c00c:	69fb      	ldr	r3, [r7, #28]
   2c00e:	3301      	adds	r3, #1
   2c010:	61fb      	str	r3, [r7, #28]
   2c012:	230e      	movs	r3, #14
   2c014:	18fb      	adds	r3, r7, r3
   2c016:	781a      	ldrb	r2, [r3, #0]
   2c018:	69fb      	ldr	r3, [r7, #28]
   2c01a:	429a      	cmp	r2, r3
   2c01c:	d8dd      	bhi.n	2bfda <disk_read+0x7e>
		}
	}

	return RES_OK;
   2c01e:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c020:	0018      	movs	r0, r3
   2c022:	46bd      	mov	sp, r7
   2c024:	b009      	add	sp, #36	; 0x24
   2c026:	bd90      	pop	{r4, r7, pc}
   2c028:	00026bfd 	.word	0x00026bfd
   2c02c:	00026bb1 	.word	0x00026bb1
   2c030:	00026c71 	.word	0x00026c71

0002c034 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2c034:	b590      	push	{r4, r7, lr}
   2c036:	b089      	sub	sp, #36	; 0x24
   2c038:	af00      	add	r7, sp, #0
   2c03a:	60b9      	str	r1, [r7, #8]
   2c03c:	607a      	str	r2, [r7, #4]
   2c03e:	0019      	movs	r1, r3
   2c040:	230f      	movs	r3, #15
   2c042:	18fb      	adds	r3, r7, r3
   2c044:	1c02      	adds	r2, r0, #0
   2c046:	701a      	strb	r2, [r3, #0]
   2c048:	230e      	movs	r3, #14
   2c04a:	18fb      	adds	r3, r7, r3
   2c04c:	1c0a      	adds	r2, r1, #0
   2c04e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c050:	231b      	movs	r3, #27
   2c052:	18fc      	adds	r4, r7, r3
   2c054:	230f      	movs	r3, #15
   2c056:	18fb      	adds	r3, r7, r3
   2c058:	781b      	ldrb	r3, [r3, #0]
   2c05a:	0018      	movs	r0, r3
   2c05c:	4b28      	ldr	r3, [pc, #160]	; (2c100 <disk_write+0xcc>)
   2c05e:	4798      	blx	r3
   2c060:	0003      	movs	r3, r0
   2c062:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c064:	231b      	movs	r3, #27
   2c066:	18fb      	adds	r3, r7, r3
   2c068:	781b      	ldrb	r3, [r3, #0]
   2c06a:	2b00      	cmp	r3, #0
   2c06c:	d101      	bne.n	2c072 <disk_write+0x3e>
		return RES_ERROR;
   2c06e:	2301      	movs	r3, #1
   2c070:	e042      	b.n	2c0f8 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c072:	2314      	movs	r3, #20
   2c074:	18fa      	adds	r2, r7, r3
   2c076:	230f      	movs	r3, #15
   2c078:	18fb      	adds	r3, r7, r3
   2c07a:	781b      	ldrb	r3, [r3, #0]
   2c07c:	0011      	movs	r1, r2
   2c07e:	0018      	movs	r0, r3
   2c080:	4b20      	ldr	r3, [pc, #128]	; (2c104 <disk_write+0xd0>)
   2c082:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c084:	230e      	movs	r3, #14
   2c086:	18fb      	adds	r3, r7, r3
   2c088:	781b      	ldrb	r3, [r3, #0]
   2c08a:	221b      	movs	r2, #27
   2c08c:	18ba      	adds	r2, r7, r2
   2c08e:	7812      	ldrb	r2, [r2, #0]
   2c090:	4353      	muls	r3, r2
   2c092:	001a      	movs	r2, r3
   2c094:	687b      	ldr	r3, [r7, #4]
   2c096:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c098:	697b      	ldr	r3, [r7, #20]
   2c09a:	3301      	adds	r3, #1
   2c09c:	211b      	movs	r1, #27
   2c09e:	1879      	adds	r1, r7, r1
   2c0a0:	7809      	ldrb	r1, [r1, #0]
   2c0a2:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c0a4:	429a      	cmp	r2, r3
   2c0a6:	d901      	bls.n	2c0ac <disk_write+0x78>
		return RES_PARERR;
   2c0a8:	2304      	movs	r3, #4
   2c0aa:	e025      	b.n	2c0f8 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2c0ac:	2300      	movs	r3, #0
   2c0ae:	61fb      	str	r3, [r7, #28]
   2c0b0:	e01b      	b.n	2c0ea <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c0b2:	231b      	movs	r3, #27
   2c0b4:	18fb      	adds	r3, r7, r3
   2c0b6:	781b      	ldrb	r3, [r3, #0]
   2c0b8:	69fa      	ldr	r2, [r7, #28]
   2c0ba:	435a      	muls	r2, r3
   2c0bc:	687b      	ldr	r3, [r7, #4]
   2c0be:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c0c0:	231b      	movs	r3, #27
   2c0c2:	18fb      	adds	r3, r7, r3
   2c0c4:	781b      	ldrb	r3, [r3, #0]
   2c0c6:	69fa      	ldr	r2, [r7, #28]
   2c0c8:	4353      	muls	r3, r2
   2c0ca:	025b      	lsls	r3, r3, #9
   2c0cc:	68ba      	ldr	r2, [r7, #8]
   2c0ce:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c0d0:	230f      	movs	r3, #15
   2c0d2:	18fb      	adds	r3, r7, r3
   2c0d4:	781b      	ldrb	r3, [r3, #0]
   2c0d6:	0018      	movs	r0, r3
   2c0d8:	4b0b      	ldr	r3, [pc, #44]	; (2c108 <disk_write+0xd4>)
   2c0da:	4798      	blx	r3
   2c0dc:	1e03      	subs	r3, r0, #0
   2c0de:	d001      	beq.n	2c0e4 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c0e0:	2301      	movs	r3, #1
   2c0e2:	e009      	b.n	2c0f8 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2c0e4:	69fb      	ldr	r3, [r7, #28]
   2c0e6:	3301      	adds	r3, #1
   2c0e8:	61fb      	str	r3, [r7, #28]
   2c0ea:	230e      	movs	r3, #14
   2c0ec:	18fb      	adds	r3, r7, r3
   2c0ee:	781a      	ldrb	r2, [r3, #0]
   2c0f0:	69fb      	ldr	r3, [r7, #28]
   2c0f2:	429a      	cmp	r2, r3
   2c0f4:	d8dd      	bhi.n	2c0b2 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2c0f6:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c0f8:	0018      	movs	r0, r3
   2c0fa:	46bd      	mov	sp, r7
   2c0fc:	b009      	add	sp, #36	; 0x24
   2c0fe:	bd90      	pop	{r4, r7, pc}
   2c100:	00026bfd 	.word	0x00026bfd
   2c104:	00026bb1 	.word	0x00026bb1
   2c108:	00026cc5 	.word	0x00026cc5

0002c10c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2c10c:	b590      	push	{r4, r7, lr}
   2c10e:	b085      	sub	sp, #20
   2c110:	af00      	add	r7, sp, #0
   2c112:	603a      	str	r2, [r7, #0]
   2c114:	1dfb      	adds	r3, r7, #7
   2c116:	1c02      	adds	r2, r0, #0
   2c118:	701a      	strb	r2, [r3, #0]
   2c11a:	1dbb      	adds	r3, r7, #6
   2c11c:	1c0a      	adds	r2, r1, #0
   2c11e:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2c120:	230f      	movs	r3, #15
   2c122:	18fb      	adds	r3, r7, r3
   2c124:	2204      	movs	r2, #4
   2c126:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2c128:	1dbb      	adds	r3, r7, #6
   2c12a:	781b      	ldrb	r3, [r3, #0]
   2c12c:	2b01      	cmp	r3, #1
   2c12e:	d00f      	beq.n	2c150 <disk_ioctl+0x44>
   2c130:	dc02      	bgt.n	2c138 <disk_ioctl+0x2c>
   2c132:	2b00      	cmp	r3, #0
   2c134:	d044      	beq.n	2c1c0 <disk_ioctl+0xb4>
   2c136:	e054      	b.n	2c1e2 <disk_ioctl+0xd6>
   2c138:	2b02      	cmp	r3, #2
   2c13a:	d01a      	beq.n	2c172 <disk_ioctl+0x66>
   2c13c:	2b03      	cmp	r3, #3
   2c13e:	d150      	bne.n	2c1e2 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2c140:	683b      	ldr	r3, [r7, #0]
   2c142:	2201      	movs	r2, #1
   2c144:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2c146:	230f      	movs	r3, #15
   2c148:	18fb      	adds	r3, r7, r3
   2c14a:	2200      	movs	r2, #0
   2c14c:	701a      	strb	r2, [r3, #0]
		break;
   2c14e:	e04c      	b.n	2c1ea <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2c150:	2308      	movs	r3, #8
   2c152:	18fa      	adds	r2, r7, r3
   2c154:	1dfb      	adds	r3, r7, #7
   2c156:	781b      	ldrb	r3, [r3, #0]
   2c158:	0011      	movs	r1, r2
   2c15a:	0018      	movs	r0, r3
   2c15c:	4b26      	ldr	r3, [pc, #152]	; (2c1f8 <disk_ioctl+0xec>)
   2c15e:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2c160:	68bb      	ldr	r3, [r7, #8]
   2c162:	1c5a      	adds	r2, r3, #1
   2c164:	683b      	ldr	r3, [r7, #0]
   2c166:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2c168:	230f      	movs	r3, #15
   2c16a:	18fb      	adds	r3, r7, r3
   2c16c:	2200      	movs	r2, #0
   2c16e:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c170:	e03b      	b.n	2c1ea <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2c172:	230e      	movs	r3, #14
   2c174:	18fc      	adds	r4, r7, r3
   2c176:	1dfb      	adds	r3, r7, #7
   2c178:	781b      	ldrb	r3, [r3, #0]
   2c17a:	0018      	movs	r0, r3
   2c17c:	4b1f      	ldr	r3, [pc, #124]	; (2c1fc <disk_ioctl+0xf0>)
   2c17e:	4798      	blx	r3
   2c180:	0003      	movs	r3, r0
   2c182:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2c184:	230e      	movs	r3, #14
   2c186:	18fb      	adds	r3, r7, r3
   2c188:	781b      	ldrb	r3, [r3, #0]
   2c18a:	2b01      	cmp	r3, #1
   2c18c:	d010      	beq.n	2c1b0 <disk_ioctl+0xa4>
   2c18e:	230e      	movs	r3, #14
   2c190:	18fb      	adds	r3, r7, r3
   2c192:	781b      	ldrb	r3, [r3, #0]
   2c194:	2b02      	cmp	r3, #2
   2c196:	d00b      	beq.n	2c1b0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2c198:	230e      	movs	r3, #14
   2c19a:	18fb      	adds	r3, r7, r3
   2c19c:	781b      	ldrb	r3, [r3, #0]
   2c19e:	2b04      	cmp	r3, #4
   2c1a0:	d006      	beq.n	2c1b0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2c1a2:	230e      	movs	r3, #14
   2c1a4:	18fb      	adds	r3, r7, r3
   2c1a6:	781b      	ldrb	r3, [r3, #0]
   2c1a8:	2b08      	cmp	r3, #8
   2c1aa:	d001      	beq.n	2c1b0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2c1ac:	2301      	movs	r3, #1
   2c1ae:	e01f      	b.n	2c1f0 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2c1b0:	683b      	ldr	r3, [r7, #0]
   2c1b2:	2200      	movs	r2, #0
   2c1b4:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2c1b6:	230f      	movs	r3, #15
   2c1b8:	18fb      	adds	r3, r7, r3
   2c1ba:	2200      	movs	r2, #0
   2c1bc:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c1be:	e014      	b.n	2c1ea <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2c1c0:	1dfb      	adds	r3, r7, #7
   2c1c2:	781b      	ldrb	r3, [r3, #0]
   2c1c4:	0018      	movs	r0, r3
   2c1c6:	4b0e      	ldr	r3, [pc, #56]	; (2c200 <disk_ioctl+0xf4>)
   2c1c8:	4798      	blx	r3
   2c1ca:	1e03      	subs	r3, r0, #0
   2c1cc:	d104      	bne.n	2c1d8 <disk_ioctl+0xcc>
			res = RES_OK;
   2c1ce:	230f      	movs	r3, #15
   2c1d0:	18fb      	adds	r3, r7, r3
   2c1d2:	2200      	movs	r2, #0
   2c1d4:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2c1d6:	e008      	b.n	2c1ea <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2c1d8:	230f      	movs	r3, #15
   2c1da:	18fb      	adds	r3, r7, r3
   2c1dc:	2203      	movs	r2, #3
   2c1de:	701a      	strb	r2, [r3, #0]
		break;
   2c1e0:	e003      	b.n	2c1ea <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2c1e2:	230f      	movs	r3, #15
   2c1e4:	18fb      	adds	r3, r7, r3
   2c1e6:	2204      	movs	r2, #4
   2c1e8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c1ea:	230f      	movs	r3, #15
   2c1ec:	18fb      	adds	r3, r7, r3
   2c1ee:	781b      	ldrb	r3, [r3, #0]
}
   2c1f0:	0018      	movs	r0, r3
   2c1f2:	46bd      	mov	sp, r7
   2c1f4:	b005      	add	sp, #20
   2c1f6:	bd90      	pop	{r4, r7, pc}
   2c1f8:	00026bb1 	.word	0x00026bb1
   2c1fc:	00026bfd 	.word	0x00026bfd
   2c200:	00026b71 	.word	0x00026b71

0002c204 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2c204:	b580      	push	{r7, lr}
   2c206:	b084      	sub	sp, #16
   2c208:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2c20a:	1d3a      	adds	r2, r7, #4
   2c20c:	4b12      	ldr	r3, [pc, #72]	; (2c258 <get_fattime+0x54>)
   2c20e:	0011      	movs	r1, r2
   2c210:	0018      	movs	r0, r3
   2c212:	4b12      	ldr	r3, [pc, #72]	; (2c25c <get_fattime+0x58>)
   2c214:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2c216:	1d3b      	adds	r3, r7, #4
   2c218:	88db      	ldrh	r3, [r3, #6]
   2c21a:	4a11      	ldr	r2, [pc, #68]	; (2c260 <get_fattime+0x5c>)
   2c21c:	4694      	mov	ip, r2
   2c21e:	4463      	add	r3, ip
   2c220:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2c222:	1d3b      	adds	r3, r7, #4
   2c224:	795b      	ldrb	r3, [r3, #5]
   2c226:	055b      	lsls	r3, r3, #21
   2c228:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2c22a:	1d3b      	adds	r3, r7, #4
   2c22c:	791b      	ldrb	r3, [r3, #4]
   2c22e:	041b      	lsls	r3, r3, #16
   2c230:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2c232:	1d3b      	adds	r3, r7, #4
   2c234:	789b      	ldrb	r3, [r3, #2]
   2c236:	02db      	lsls	r3, r3, #11
   2c238:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2c23a:	1d3b      	adds	r3, r7, #4
   2c23c:	785b      	ldrb	r3, [r3, #1]
   2c23e:	015b      	lsls	r3, r3, #5
   2c240:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2c242:	1d3a      	adds	r2, r7, #4
   2c244:	7812      	ldrb	r2, [r2, #0]
   2c246:	0852      	lsrs	r2, r2, #1
   2c248:	b2d2      	uxtb	r2, r2
   2c24a:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2c24c:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2c24e:	68fb      	ldr	r3, [r7, #12]
}
   2c250:	0018      	movs	r0, r3
   2c252:	46bd      	mov	sp, r7
   2c254:	b004      	add	sp, #16
   2c256:	bd80      	pop	{r7, pc}
   2c258:	2000586c 	.word	0x2000586c
   2c25c:	000279dd 	.word	0x000279dd
   2c260:	fffff844 	.word	0xfffff844

0002c264 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2c264:	b580      	push	{r7, lr}
   2c266:	b086      	sub	sp, #24
   2c268:	af00      	add	r7, sp, #0
   2c26a:	60f8      	str	r0, [r7, #12]
   2c26c:	60b9      	str	r1, [r7, #8]
   2c26e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c270:	68fb      	ldr	r3, [r7, #12]
   2c272:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2c274:	68bb      	ldr	r3, [r7, #8]
   2c276:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2c278:	e007      	b.n	2c28a <mem_cpy+0x26>
		*d++ = *s++;
   2c27a:	697b      	ldr	r3, [r7, #20]
   2c27c:	1c5a      	adds	r2, r3, #1
   2c27e:	617a      	str	r2, [r7, #20]
   2c280:	693a      	ldr	r2, [r7, #16]
   2c282:	1c51      	adds	r1, r2, #1
   2c284:	6139      	str	r1, [r7, #16]
   2c286:	7812      	ldrb	r2, [r2, #0]
   2c288:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c28a:	687b      	ldr	r3, [r7, #4]
   2c28c:	1e5a      	subs	r2, r3, #1
   2c28e:	607a      	str	r2, [r7, #4]
   2c290:	2b00      	cmp	r3, #0
   2c292:	d1f2      	bne.n	2c27a <mem_cpy+0x16>
}
   2c294:	46c0      	nop			; (mov r8, r8)
   2c296:	46bd      	mov	sp, r7
   2c298:	b006      	add	sp, #24
   2c29a:	bd80      	pop	{r7, pc}

0002c29c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2c29c:	b580      	push	{r7, lr}
   2c29e:	b086      	sub	sp, #24
   2c2a0:	af00      	add	r7, sp, #0
   2c2a2:	60f8      	str	r0, [r7, #12]
   2c2a4:	60b9      	str	r1, [r7, #8]
   2c2a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c2a8:	68fb      	ldr	r3, [r7, #12]
   2c2aa:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2c2ac:	e005      	b.n	2c2ba <mem_set+0x1e>
		*d++ = (BYTE)val;
   2c2ae:	697b      	ldr	r3, [r7, #20]
   2c2b0:	1c5a      	adds	r2, r3, #1
   2c2b2:	617a      	str	r2, [r7, #20]
   2c2b4:	68ba      	ldr	r2, [r7, #8]
   2c2b6:	b2d2      	uxtb	r2, r2
   2c2b8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c2ba:	687b      	ldr	r3, [r7, #4]
   2c2bc:	1e5a      	subs	r2, r3, #1
   2c2be:	607a      	str	r2, [r7, #4]
   2c2c0:	2b00      	cmp	r3, #0
   2c2c2:	d1f4      	bne.n	2c2ae <mem_set+0x12>
}
   2c2c4:	46c0      	nop			; (mov r8, r8)
   2c2c6:	46bd      	mov	sp, r7
   2c2c8:	b006      	add	sp, #24
   2c2ca:	bd80      	pop	{r7, pc}

0002c2cc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2c2cc:	b580      	push	{r7, lr}
   2c2ce:	b088      	sub	sp, #32
   2c2d0:	af00      	add	r7, sp, #0
   2c2d2:	60f8      	str	r0, [r7, #12]
   2c2d4:	60b9      	str	r1, [r7, #8]
   2c2d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2c2d8:	68fb      	ldr	r3, [r7, #12]
   2c2da:	61fb      	str	r3, [r7, #28]
   2c2dc:	68bb      	ldr	r3, [r7, #8]
   2c2de:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2c2e0:	2300      	movs	r3, #0
   2c2e2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2c2e4:	46c0      	nop			; (mov r8, r8)
   2c2e6:	687b      	ldr	r3, [r7, #4]
   2c2e8:	1e5a      	subs	r2, r3, #1
   2c2ea:	607a      	str	r2, [r7, #4]
   2c2ec:	2b00      	cmp	r3, #0
   2c2ee:	d00d      	beq.n	2c30c <mem_cmp+0x40>
   2c2f0:	69fb      	ldr	r3, [r7, #28]
   2c2f2:	1c5a      	adds	r2, r3, #1
   2c2f4:	61fa      	str	r2, [r7, #28]
   2c2f6:	781b      	ldrb	r3, [r3, #0]
   2c2f8:	0019      	movs	r1, r3
   2c2fa:	69bb      	ldr	r3, [r7, #24]
   2c2fc:	1c5a      	adds	r2, r3, #1
   2c2fe:	61ba      	str	r2, [r7, #24]
   2c300:	781b      	ldrb	r3, [r3, #0]
   2c302:	1acb      	subs	r3, r1, r3
   2c304:	617b      	str	r3, [r7, #20]
   2c306:	697b      	ldr	r3, [r7, #20]
   2c308:	2b00      	cmp	r3, #0
   2c30a:	d0ec      	beq.n	2c2e6 <mem_cmp+0x1a>
	return r;
   2c30c:	697b      	ldr	r3, [r7, #20]
}
   2c30e:	0018      	movs	r0, r3
   2c310:	46bd      	mov	sp, r7
   2c312:	b008      	add	sp, #32
   2c314:	bd80      	pop	{r7, pc}

0002c316 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2c316:	b580      	push	{r7, lr}
   2c318:	b082      	sub	sp, #8
   2c31a:	af00      	add	r7, sp, #0
   2c31c:	6078      	str	r0, [r7, #4]
   2c31e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2c320:	e002      	b.n	2c328 <chk_chr+0x12>
   2c322:	687b      	ldr	r3, [r7, #4]
   2c324:	3301      	adds	r3, #1
   2c326:	607b      	str	r3, [r7, #4]
   2c328:	687b      	ldr	r3, [r7, #4]
   2c32a:	781b      	ldrb	r3, [r3, #0]
   2c32c:	2b00      	cmp	r3, #0
   2c32e:	d005      	beq.n	2c33c <chk_chr+0x26>
   2c330:	687b      	ldr	r3, [r7, #4]
   2c332:	781b      	ldrb	r3, [r3, #0]
   2c334:	001a      	movs	r2, r3
   2c336:	683b      	ldr	r3, [r7, #0]
   2c338:	429a      	cmp	r2, r3
   2c33a:	d1f2      	bne.n	2c322 <chk_chr+0xc>
	return *str;
   2c33c:	687b      	ldr	r3, [r7, #4]
   2c33e:	781b      	ldrb	r3, [r3, #0]
}
   2c340:	0018      	movs	r0, r3
   2c342:	46bd      	mov	sp, r7
   2c344:	b002      	add	sp, #8
   2c346:	bd80      	pop	{r7, pc}

0002c348 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2c348:	b590      	push	{r4, r7, lr}
   2c34a:	b085      	sub	sp, #20
   2c34c:	af00      	add	r7, sp, #0
   2c34e:	6078      	str	r0, [r7, #4]
   2c350:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2c352:	687b      	ldr	r3, [r7, #4]
   2c354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c356:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2c358:	68fa      	ldr	r2, [r7, #12]
   2c35a:	683b      	ldr	r3, [r7, #0]
   2c35c:	429a      	cmp	r2, r3
   2c35e:	d04e      	beq.n	2c3fe <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2c360:	687b      	ldr	r3, [r7, #4]
   2c362:	791b      	ldrb	r3, [r3, #4]
   2c364:	2b00      	cmp	r3, #0
   2c366:	d037      	beq.n	2c3d8 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2c368:	687b      	ldr	r3, [r7, #4]
   2c36a:	7858      	ldrb	r0, [r3, #1]
   2c36c:	687b      	ldr	r3, [r7, #4]
   2c36e:	3330      	adds	r3, #48	; 0x30
   2c370:	0019      	movs	r1, r3
   2c372:	68fa      	ldr	r2, [r7, #12]
   2c374:	2301      	movs	r3, #1
   2c376:	4c24      	ldr	r4, [pc, #144]	; (2c408 <move_window+0xc0>)
   2c378:	47a0      	blx	r4
   2c37a:	1e03      	subs	r3, r0, #0
   2c37c:	d001      	beq.n	2c382 <move_window+0x3a>
				return FR_DISK_ERR;
   2c37e:	2301      	movs	r3, #1
   2c380:	e03e      	b.n	2c400 <move_window+0xb8>
			fs->wflag = 0;
   2c382:	687b      	ldr	r3, [r7, #4]
   2c384:	2200      	movs	r2, #0
   2c386:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2c388:	687b      	ldr	r3, [r7, #4]
   2c38a:	6a1a      	ldr	r2, [r3, #32]
   2c38c:	687b      	ldr	r3, [r7, #4]
   2c38e:	69db      	ldr	r3, [r3, #28]
   2c390:	18d2      	adds	r2, r2, r3
   2c392:	68fb      	ldr	r3, [r7, #12]
   2c394:	429a      	cmp	r2, r3
   2c396:	d91f      	bls.n	2c3d8 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c398:	230b      	movs	r3, #11
   2c39a:	18fb      	adds	r3, r7, r3
   2c39c:	687a      	ldr	r2, [r7, #4]
   2c39e:	78d2      	ldrb	r2, [r2, #3]
   2c3a0:	701a      	strb	r2, [r3, #0]
   2c3a2:	e014      	b.n	2c3ce <move_window+0x86>
					wsect += fs->fsize;
   2c3a4:	687b      	ldr	r3, [r7, #4]
   2c3a6:	69db      	ldr	r3, [r3, #28]
   2c3a8:	68fa      	ldr	r2, [r7, #12]
   2c3aa:	18d3      	adds	r3, r2, r3
   2c3ac:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2c3ae:	687b      	ldr	r3, [r7, #4]
   2c3b0:	7858      	ldrb	r0, [r3, #1]
   2c3b2:	687b      	ldr	r3, [r7, #4]
   2c3b4:	3330      	adds	r3, #48	; 0x30
   2c3b6:	0019      	movs	r1, r3
   2c3b8:	68fa      	ldr	r2, [r7, #12]
   2c3ba:	2301      	movs	r3, #1
   2c3bc:	4c12      	ldr	r4, [pc, #72]	; (2c408 <move_window+0xc0>)
   2c3be:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c3c0:	230b      	movs	r3, #11
   2c3c2:	18fb      	adds	r3, r7, r3
   2c3c4:	781a      	ldrb	r2, [r3, #0]
   2c3c6:	230b      	movs	r3, #11
   2c3c8:	18fb      	adds	r3, r7, r3
   2c3ca:	3a01      	subs	r2, #1
   2c3cc:	701a      	strb	r2, [r3, #0]
   2c3ce:	230b      	movs	r3, #11
   2c3d0:	18fb      	adds	r3, r7, r3
   2c3d2:	781b      	ldrb	r3, [r3, #0]
   2c3d4:	2b01      	cmp	r3, #1
   2c3d6:	d8e5      	bhi.n	2c3a4 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2c3d8:	683b      	ldr	r3, [r7, #0]
   2c3da:	2b00      	cmp	r3, #0
   2c3dc:	d00f      	beq.n	2c3fe <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2c3de:	687b      	ldr	r3, [r7, #4]
   2c3e0:	7858      	ldrb	r0, [r3, #1]
   2c3e2:	687b      	ldr	r3, [r7, #4]
   2c3e4:	3330      	adds	r3, #48	; 0x30
   2c3e6:	0019      	movs	r1, r3
   2c3e8:	683a      	ldr	r2, [r7, #0]
   2c3ea:	2301      	movs	r3, #1
   2c3ec:	4c07      	ldr	r4, [pc, #28]	; (2c40c <move_window+0xc4>)
   2c3ee:	47a0      	blx	r4
   2c3f0:	1e03      	subs	r3, r0, #0
   2c3f2:	d001      	beq.n	2c3f8 <move_window+0xb0>
				return FR_DISK_ERR;
   2c3f4:	2301      	movs	r3, #1
   2c3f6:	e003      	b.n	2c400 <move_window+0xb8>
			fs->winsect = sector;
   2c3f8:	687b      	ldr	r3, [r7, #4]
   2c3fa:	683a      	ldr	r2, [r7, #0]
   2c3fc:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2c3fe:	2300      	movs	r3, #0
}
   2c400:	0018      	movs	r0, r3
   2c402:	46bd      	mov	sp, r7
   2c404:	b005      	add	sp, #20
   2c406:	bd90      	pop	{r4, r7, pc}
   2c408:	0002c035 	.word	0x0002c035
   2c40c:	0002bf5d 	.word	0x0002bf5d

0002c410 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2c410:	b590      	push	{r4, r7, lr}
   2c412:	b085      	sub	sp, #20
   2c414:	af00      	add	r7, sp, #0
   2c416:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2c418:	230f      	movs	r3, #15
   2c41a:	18fc      	adds	r4, r7, r3
   2c41c:	687b      	ldr	r3, [r7, #4]
   2c41e:	2100      	movs	r1, #0
   2c420:	0018      	movs	r0, r3
   2c422:	4b52      	ldr	r3, [pc, #328]	; (2c56c <sync+0x15c>)
   2c424:	4798      	blx	r3
   2c426:	0003      	movs	r3, r0
   2c428:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2c42a:	230f      	movs	r3, #15
   2c42c:	18fb      	adds	r3, r7, r3
   2c42e:	781b      	ldrb	r3, [r3, #0]
   2c430:	2b00      	cmp	r3, #0
   2c432:	d000      	beq.n	2c436 <sync+0x26>
   2c434:	e093      	b.n	2c55e <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2c436:	687b      	ldr	r3, [r7, #4]
   2c438:	781b      	ldrb	r3, [r3, #0]
   2c43a:	2b03      	cmp	r3, #3
   2c43c:	d000      	beq.n	2c440 <sync+0x30>
   2c43e:	e081      	b.n	2c544 <sync+0x134>
   2c440:	687b      	ldr	r3, [r7, #4]
   2c442:	795b      	ldrb	r3, [r3, #5]
   2c444:	2b00      	cmp	r3, #0
   2c446:	d07d      	beq.n	2c544 <sync+0x134>
			fs->winsect = 0;
   2c448:	687b      	ldr	r3, [r7, #4]
   2c44a:	2200      	movs	r2, #0
   2c44c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2c44e:	687b      	ldr	r3, [r7, #4]
   2c450:	3330      	adds	r3, #48	; 0x30
   2c452:	0018      	movs	r0, r3
   2c454:	2380      	movs	r3, #128	; 0x80
   2c456:	009b      	lsls	r3, r3, #2
   2c458:	001a      	movs	r2, r3
   2c45a:	2100      	movs	r1, #0
   2c45c:	4b44      	ldr	r3, [pc, #272]	; (2c570 <sync+0x160>)
   2c45e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2c460:	687b      	ldr	r3, [r7, #4]
   2c462:	4a44      	ldr	r2, [pc, #272]	; (2c574 <sync+0x164>)
   2c464:	2155      	movs	r1, #85	; 0x55
   2c466:	5499      	strb	r1, [r3, r2]
   2c468:	687b      	ldr	r3, [r7, #4]
   2c46a:	4a43      	ldr	r2, [pc, #268]	; (2c578 <sync+0x168>)
   2c46c:	21aa      	movs	r1, #170	; 0xaa
   2c46e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2c470:	687b      	ldr	r3, [r7, #4]
   2c472:	2230      	movs	r2, #48	; 0x30
   2c474:	2152      	movs	r1, #82	; 0x52
   2c476:	5499      	strb	r1, [r3, r2]
   2c478:	687b      	ldr	r3, [r7, #4]
   2c47a:	2231      	movs	r2, #49	; 0x31
   2c47c:	2152      	movs	r1, #82	; 0x52
   2c47e:	5499      	strb	r1, [r3, r2]
   2c480:	687b      	ldr	r3, [r7, #4]
   2c482:	2232      	movs	r2, #50	; 0x32
   2c484:	2161      	movs	r1, #97	; 0x61
   2c486:	5499      	strb	r1, [r3, r2]
   2c488:	687b      	ldr	r3, [r7, #4]
   2c48a:	2233      	movs	r2, #51	; 0x33
   2c48c:	2141      	movs	r1, #65	; 0x41
   2c48e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2c490:	687a      	ldr	r2, [r7, #4]
   2c492:	2385      	movs	r3, #133	; 0x85
   2c494:	009b      	lsls	r3, r3, #2
   2c496:	2172      	movs	r1, #114	; 0x72
   2c498:	54d1      	strb	r1, [r2, r3]
   2c49a:	687b      	ldr	r3, [r7, #4]
   2c49c:	4a37      	ldr	r2, [pc, #220]	; (2c57c <sync+0x16c>)
   2c49e:	2172      	movs	r1, #114	; 0x72
   2c4a0:	5499      	strb	r1, [r3, r2]
   2c4a2:	687b      	ldr	r3, [r7, #4]
   2c4a4:	4a36      	ldr	r2, [pc, #216]	; (2c580 <sync+0x170>)
   2c4a6:	2141      	movs	r1, #65	; 0x41
   2c4a8:	5499      	strb	r1, [r3, r2]
   2c4aa:	687b      	ldr	r3, [r7, #4]
   2c4ac:	4a35      	ldr	r2, [pc, #212]	; (2c584 <sync+0x174>)
   2c4ae:	2161      	movs	r1, #97	; 0x61
   2c4b0:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2c4b2:	687b      	ldr	r3, [r7, #4]
   2c4b4:	691b      	ldr	r3, [r3, #16]
   2c4b6:	b2d9      	uxtb	r1, r3
   2c4b8:	687a      	ldr	r2, [r7, #4]
   2c4ba:	2386      	movs	r3, #134	; 0x86
   2c4bc:	009b      	lsls	r3, r3, #2
   2c4be:	54d1      	strb	r1, [r2, r3]
   2c4c0:	687b      	ldr	r3, [r7, #4]
   2c4c2:	691b      	ldr	r3, [r3, #16]
   2c4c4:	b29b      	uxth	r3, r3
   2c4c6:	0a1b      	lsrs	r3, r3, #8
   2c4c8:	b29b      	uxth	r3, r3
   2c4ca:	b2d9      	uxtb	r1, r3
   2c4cc:	687b      	ldr	r3, [r7, #4]
   2c4ce:	4a2e      	ldr	r2, [pc, #184]	; (2c588 <sync+0x178>)
   2c4d0:	5499      	strb	r1, [r3, r2]
   2c4d2:	687b      	ldr	r3, [r7, #4]
   2c4d4:	691b      	ldr	r3, [r3, #16]
   2c4d6:	0c1b      	lsrs	r3, r3, #16
   2c4d8:	b2d9      	uxtb	r1, r3
   2c4da:	687b      	ldr	r3, [r7, #4]
   2c4dc:	4a2b      	ldr	r2, [pc, #172]	; (2c58c <sync+0x17c>)
   2c4de:	5499      	strb	r1, [r3, r2]
   2c4e0:	687b      	ldr	r3, [r7, #4]
   2c4e2:	691b      	ldr	r3, [r3, #16]
   2c4e4:	0e1b      	lsrs	r3, r3, #24
   2c4e6:	b2d9      	uxtb	r1, r3
   2c4e8:	687b      	ldr	r3, [r7, #4]
   2c4ea:	4a29      	ldr	r2, [pc, #164]	; (2c590 <sync+0x180>)
   2c4ec:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2c4ee:	687b      	ldr	r3, [r7, #4]
   2c4f0:	68db      	ldr	r3, [r3, #12]
   2c4f2:	b2d9      	uxtb	r1, r3
   2c4f4:	687a      	ldr	r2, [r7, #4]
   2c4f6:	2387      	movs	r3, #135	; 0x87
   2c4f8:	009b      	lsls	r3, r3, #2
   2c4fa:	54d1      	strb	r1, [r2, r3]
   2c4fc:	687b      	ldr	r3, [r7, #4]
   2c4fe:	68db      	ldr	r3, [r3, #12]
   2c500:	b29b      	uxth	r3, r3
   2c502:	0a1b      	lsrs	r3, r3, #8
   2c504:	b29b      	uxth	r3, r3
   2c506:	b2d9      	uxtb	r1, r3
   2c508:	687b      	ldr	r3, [r7, #4]
   2c50a:	4a22      	ldr	r2, [pc, #136]	; (2c594 <sync+0x184>)
   2c50c:	5499      	strb	r1, [r3, r2]
   2c50e:	687b      	ldr	r3, [r7, #4]
   2c510:	68db      	ldr	r3, [r3, #12]
   2c512:	0c1b      	lsrs	r3, r3, #16
   2c514:	b2d9      	uxtb	r1, r3
   2c516:	687b      	ldr	r3, [r7, #4]
   2c518:	4a1f      	ldr	r2, [pc, #124]	; (2c598 <sync+0x188>)
   2c51a:	5499      	strb	r1, [r3, r2]
   2c51c:	687b      	ldr	r3, [r7, #4]
   2c51e:	68db      	ldr	r3, [r3, #12]
   2c520:	0e1b      	lsrs	r3, r3, #24
   2c522:	b2d9      	uxtb	r1, r3
   2c524:	687b      	ldr	r3, [r7, #4]
   2c526:	4a1d      	ldr	r2, [pc, #116]	; (2c59c <sync+0x18c>)
   2c528:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2c52a:	687b      	ldr	r3, [r7, #4]
   2c52c:	7858      	ldrb	r0, [r3, #1]
   2c52e:	687b      	ldr	r3, [r7, #4]
   2c530:	3330      	adds	r3, #48	; 0x30
   2c532:	0019      	movs	r1, r3
   2c534:	687b      	ldr	r3, [r7, #4]
   2c536:	695a      	ldr	r2, [r3, #20]
   2c538:	2301      	movs	r3, #1
   2c53a:	4c19      	ldr	r4, [pc, #100]	; (2c5a0 <sync+0x190>)
   2c53c:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2c53e:	687b      	ldr	r3, [r7, #4]
   2c540:	2200      	movs	r2, #0
   2c542:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2c544:	687b      	ldr	r3, [r7, #4]
   2c546:	785b      	ldrb	r3, [r3, #1]
   2c548:	2200      	movs	r2, #0
   2c54a:	2100      	movs	r1, #0
   2c54c:	0018      	movs	r0, r3
   2c54e:	4b15      	ldr	r3, [pc, #84]	; (2c5a4 <sync+0x194>)
   2c550:	4798      	blx	r3
   2c552:	1e03      	subs	r3, r0, #0
   2c554:	d003      	beq.n	2c55e <sync+0x14e>
			res = FR_DISK_ERR;
   2c556:	230f      	movs	r3, #15
   2c558:	18fb      	adds	r3, r7, r3
   2c55a:	2201      	movs	r2, #1
   2c55c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c55e:	230f      	movs	r3, #15
   2c560:	18fb      	adds	r3, r7, r3
   2c562:	781b      	ldrb	r3, [r3, #0]
}
   2c564:	0018      	movs	r0, r3
   2c566:	46bd      	mov	sp, r7
   2c568:	b005      	add	sp, #20
   2c56a:	bd90      	pop	{r4, r7, pc}
   2c56c:	0002c349 	.word	0x0002c349
   2c570:	0002c29d 	.word	0x0002c29d
   2c574:	0000022e 	.word	0x0000022e
   2c578:	0000022f 	.word	0x0000022f
   2c57c:	00000215 	.word	0x00000215
   2c580:	00000216 	.word	0x00000216
   2c584:	00000217 	.word	0x00000217
   2c588:	00000219 	.word	0x00000219
   2c58c:	0000021a 	.word	0x0000021a
   2c590:	0000021b 	.word	0x0000021b
   2c594:	0000021d 	.word	0x0000021d
   2c598:	0000021e 	.word	0x0000021e
   2c59c:	0000021f 	.word	0x0000021f
   2c5a0:	0002c035 	.word	0x0002c035
   2c5a4:	0002c10d 	.word	0x0002c10d

0002c5a8 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2c5a8:	b580      	push	{r7, lr}
   2c5aa:	b082      	sub	sp, #8
   2c5ac:	af00      	add	r7, sp, #0
   2c5ae:	6078      	str	r0, [r7, #4]
   2c5b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2c5b2:	683b      	ldr	r3, [r7, #0]
   2c5b4:	3b02      	subs	r3, #2
   2c5b6:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2c5b8:	687b      	ldr	r3, [r7, #4]
   2c5ba:	699b      	ldr	r3, [r3, #24]
   2c5bc:	1e9a      	subs	r2, r3, #2
   2c5be:	683b      	ldr	r3, [r7, #0]
   2c5c0:	429a      	cmp	r2, r3
   2c5c2:	d801      	bhi.n	2c5c8 <clust2sect+0x20>
   2c5c4:	2300      	movs	r3, #0
   2c5c6:	e007      	b.n	2c5d8 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2c5c8:	687b      	ldr	r3, [r7, #4]
   2c5ca:	789b      	ldrb	r3, [r3, #2]
   2c5cc:	001a      	movs	r2, r3
   2c5ce:	683b      	ldr	r3, [r7, #0]
   2c5d0:	435a      	muls	r2, r3
   2c5d2:	687b      	ldr	r3, [r7, #4]
   2c5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c5d6:	18d3      	adds	r3, r2, r3
}
   2c5d8:	0018      	movs	r0, r3
   2c5da:	46bd      	mov	sp, r7
   2c5dc:	b002      	add	sp, #8
   2c5de:	bd80      	pop	{r7, pc}

0002c5e0 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2c5e0:	b580      	push	{r7, lr}
   2c5e2:	b086      	sub	sp, #24
   2c5e4:	af00      	add	r7, sp, #0
   2c5e6:	6078      	str	r0, [r7, #4]
   2c5e8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2c5ea:	683b      	ldr	r3, [r7, #0]
   2c5ec:	2b01      	cmp	r3, #1
   2c5ee:	d904      	bls.n	2c5fa <get_fat+0x1a>
   2c5f0:	687b      	ldr	r3, [r7, #4]
   2c5f2:	699a      	ldr	r2, [r3, #24]
   2c5f4:	683b      	ldr	r3, [r7, #0]
   2c5f6:	429a      	cmp	r2, r3
   2c5f8:	d801      	bhi.n	2c5fe <get_fat+0x1e>
		return 1;
   2c5fa:	2301      	movs	r3, #1
   2c5fc:	e09f      	b.n	2c73e <get_fat+0x15e>

	switch (fs->fs_type) {
   2c5fe:	687b      	ldr	r3, [r7, #4]
   2c600:	781b      	ldrb	r3, [r3, #0]
   2c602:	2b02      	cmp	r3, #2
   2c604:	d048      	beq.n	2c698 <get_fat+0xb8>
   2c606:	2b03      	cmp	r3, #3
   2c608:	d067      	beq.n	2c6da <get_fat+0xfa>
   2c60a:	2b01      	cmp	r3, #1
   2c60c:	d000      	beq.n	2c610 <get_fat+0x30>
   2c60e:	e094      	b.n	2c73a <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2c610:	683b      	ldr	r3, [r7, #0]
   2c612:	617b      	str	r3, [r7, #20]
   2c614:	697b      	ldr	r3, [r7, #20]
   2c616:	085b      	lsrs	r3, r3, #1
   2c618:	697a      	ldr	r2, [r7, #20]
   2c61a:	18d3      	adds	r3, r2, r3
   2c61c:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c61e:	687b      	ldr	r3, [r7, #4]
   2c620:	6a1a      	ldr	r2, [r3, #32]
   2c622:	697b      	ldr	r3, [r7, #20]
   2c624:	0a5b      	lsrs	r3, r3, #9
   2c626:	18d2      	adds	r2, r2, r3
   2c628:	687b      	ldr	r3, [r7, #4]
   2c62a:	0011      	movs	r1, r2
   2c62c:	0018      	movs	r0, r3
   2c62e:	4b46      	ldr	r3, [pc, #280]	; (2c748 <get_fat+0x168>)
   2c630:	4798      	blx	r3
   2c632:	1e03      	subs	r3, r0, #0
   2c634:	d000      	beq.n	2c638 <get_fat+0x58>
   2c636:	e079      	b.n	2c72c <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2c638:	697b      	ldr	r3, [r7, #20]
   2c63a:	05db      	lsls	r3, r3, #23
   2c63c:	0ddb      	lsrs	r3, r3, #23
   2c63e:	687a      	ldr	r2, [r7, #4]
   2c640:	2130      	movs	r1, #48	; 0x30
   2c642:	18d3      	adds	r3, r2, r3
   2c644:	185b      	adds	r3, r3, r1
   2c646:	781b      	ldrb	r3, [r3, #0]
   2c648:	613b      	str	r3, [r7, #16]
   2c64a:	697b      	ldr	r3, [r7, #20]
   2c64c:	3301      	adds	r3, #1
   2c64e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c650:	687b      	ldr	r3, [r7, #4]
   2c652:	6a1a      	ldr	r2, [r3, #32]
   2c654:	697b      	ldr	r3, [r7, #20]
   2c656:	0a5b      	lsrs	r3, r3, #9
   2c658:	18d2      	adds	r2, r2, r3
   2c65a:	687b      	ldr	r3, [r7, #4]
   2c65c:	0011      	movs	r1, r2
   2c65e:	0018      	movs	r0, r3
   2c660:	4b39      	ldr	r3, [pc, #228]	; (2c748 <get_fat+0x168>)
   2c662:	4798      	blx	r3
   2c664:	1e03      	subs	r3, r0, #0
   2c666:	d163      	bne.n	2c730 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2c668:	697b      	ldr	r3, [r7, #20]
   2c66a:	05db      	lsls	r3, r3, #23
   2c66c:	0ddb      	lsrs	r3, r3, #23
   2c66e:	687a      	ldr	r2, [r7, #4]
   2c670:	2130      	movs	r1, #48	; 0x30
   2c672:	18d3      	adds	r3, r2, r3
   2c674:	185b      	adds	r3, r3, r1
   2c676:	781b      	ldrb	r3, [r3, #0]
   2c678:	021b      	lsls	r3, r3, #8
   2c67a:	001a      	movs	r2, r3
   2c67c:	693b      	ldr	r3, [r7, #16]
   2c67e:	4313      	orrs	r3, r2
   2c680:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2c682:	683b      	ldr	r3, [r7, #0]
   2c684:	2201      	movs	r2, #1
   2c686:	4013      	ands	r3, r2
   2c688:	d002      	beq.n	2c690 <get_fat+0xb0>
   2c68a:	693b      	ldr	r3, [r7, #16]
   2c68c:	091b      	lsrs	r3, r3, #4
   2c68e:	e056      	b.n	2c73e <get_fat+0x15e>
   2c690:	693b      	ldr	r3, [r7, #16]
   2c692:	051b      	lsls	r3, r3, #20
   2c694:	0d1b      	lsrs	r3, r3, #20
   2c696:	e052      	b.n	2c73e <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c698:	687b      	ldr	r3, [r7, #4]
   2c69a:	6a1a      	ldr	r2, [r3, #32]
   2c69c:	683b      	ldr	r3, [r7, #0]
   2c69e:	0a1b      	lsrs	r3, r3, #8
   2c6a0:	18d2      	adds	r2, r2, r3
   2c6a2:	687b      	ldr	r3, [r7, #4]
   2c6a4:	0011      	movs	r1, r2
   2c6a6:	0018      	movs	r0, r3
   2c6a8:	4b27      	ldr	r3, [pc, #156]	; (2c748 <get_fat+0x168>)
   2c6aa:	4798      	blx	r3
   2c6ac:	1e03      	subs	r3, r0, #0
   2c6ae:	d141      	bne.n	2c734 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2c6b0:	683b      	ldr	r3, [r7, #0]
   2c6b2:	005a      	lsls	r2, r3, #1
   2c6b4:	23ff      	movs	r3, #255	; 0xff
   2c6b6:	005b      	lsls	r3, r3, #1
   2c6b8:	4013      	ands	r3, r2
   2c6ba:	3330      	adds	r3, #48	; 0x30
   2c6bc:	687a      	ldr	r2, [r7, #4]
   2c6be:	18d3      	adds	r3, r2, r3
   2c6c0:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2c6c2:	68fb      	ldr	r3, [r7, #12]
   2c6c4:	3301      	adds	r3, #1
   2c6c6:	781b      	ldrb	r3, [r3, #0]
   2c6c8:	021b      	lsls	r3, r3, #8
   2c6ca:	b21a      	sxth	r2, r3
   2c6cc:	68fb      	ldr	r3, [r7, #12]
   2c6ce:	781b      	ldrb	r3, [r3, #0]
   2c6d0:	b21b      	sxth	r3, r3
   2c6d2:	4313      	orrs	r3, r2
   2c6d4:	b21b      	sxth	r3, r3
   2c6d6:	b29b      	uxth	r3, r3
   2c6d8:	e031      	b.n	2c73e <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c6da:	687b      	ldr	r3, [r7, #4]
   2c6dc:	6a1a      	ldr	r2, [r3, #32]
   2c6de:	683b      	ldr	r3, [r7, #0]
   2c6e0:	09db      	lsrs	r3, r3, #7
   2c6e2:	18d2      	adds	r2, r2, r3
   2c6e4:	687b      	ldr	r3, [r7, #4]
   2c6e6:	0011      	movs	r1, r2
   2c6e8:	0018      	movs	r0, r3
   2c6ea:	4b17      	ldr	r3, [pc, #92]	; (2c748 <get_fat+0x168>)
   2c6ec:	4798      	blx	r3
   2c6ee:	1e03      	subs	r3, r0, #0
   2c6f0:	d122      	bne.n	2c738 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2c6f2:	683b      	ldr	r3, [r7, #0]
   2c6f4:	009a      	lsls	r2, r3, #2
   2c6f6:	23fe      	movs	r3, #254	; 0xfe
   2c6f8:	005b      	lsls	r3, r3, #1
   2c6fa:	4013      	ands	r3, r2
   2c6fc:	3330      	adds	r3, #48	; 0x30
   2c6fe:	687a      	ldr	r2, [r7, #4]
   2c700:	18d3      	adds	r3, r2, r3
   2c702:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2c704:	68fb      	ldr	r3, [r7, #12]
   2c706:	3303      	adds	r3, #3
   2c708:	781b      	ldrb	r3, [r3, #0]
   2c70a:	061a      	lsls	r2, r3, #24
   2c70c:	68fb      	ldr	r3, [r7, #12]
   2c70e:	3302      	adds	r3, #2
   2c710:	781b      	ldrb	r3, [r3, #0]
   2c712:	041b      	lsls	r3, r3, #16
   2c714:	4313      	orrs	r3, r2
   2c716:	68fa      	ldr	r2, [r7, #12]
   2c718:	3201      	adds	r2, #1
   2c71a:	7812      	ldrb	r2, [r2, #0]
   2c71c:	0212      	lsls	r2, r2, #8
   2c71e:	4313      	orrs	r3, r2
   2c720:	68fa      	ldr	r2, [r7, #12]
   2c722:	7812      	ldrb	r2, [r2, #0]
   2c724:	4313      	orrs	r3, r2
   2c726:	011b      	lsls	r3, r3, #4
   2c728:	091b      	lsrs	r3, r3, #4
   2c72a:	e008      	b.n	2c73e <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c72c:	46c0      	nop			; (mov r8, r8)
   2c72e:	e004      	b.n	2c73a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c730:	46c0      	nop			; (mov r8, r8)
   2c732:	e002      	b.n	2c73a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c734:	46c0      	nop			; (mov r8, r8)
   2c736:	e000      	b.n	2c73a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c738:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2c73a:	2301      	movs	r3, #1
   2c73c:	425b      	negs	r3, r3
}
   2c73e:	0018      	movs	r0, r3
   2c740:	46bd      	mov	sp, r7
   2c742:	b006      	add	sp, #24
   2c744:	bd80      	pop	{r7, pc}
   2c746:	46c0      	nop			; (mov r8, r8)
   2c748:	0002c349 	.word	0x0002c349

0002c74c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2c74c:	b590      	push	{r4, r7, lr}
   2c74e:	b089      	sub	sp, #36	; 0x24
   2c750:	af00      	add	r7, sp, #0
   2c752:	60f8      	str	r0, [r7, #12]
   2c754:	60b9      	str	r1, [r7, #8]
   2c756:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c758:	68bb      	ldr	r3, [r7, #8]
   2c75a:	2b01      	cmp	r3, #1
   2c75c:	d904      	bls.n	2c768 <put_fat+0x1c>
   2c75e:	68fb      	ldr	r3, [r7, #12]
   2c760:	699a      	ldr	r2, [r3, #24]
   2c762:	68bb      	ldr	r3, [r7, #8]
   2c764:	429a      	cmp	r2, r3
   2c766:	d804      	bhi.n	2c772 <put_fat+0x26>
		res = FR_INT_ERR;
   2c768:	231f      	movs	r3, #31
   2c76a:	18fb      	adds	r3, r7, r3
   2c76c:	2202      	movs	r2, #2
   2c76e:	701a      	strb	r2, [r3, #0]
   2c770:	e100      	b.n	2c974 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2c772:	68fb      	ldr	r3, [r7, #12]
   2c774:	781b      	ldrb	r3, [r3, #0]
   2c776:	2b02      	cmp	r3, #2
   2c778:	d100      	bne.n	2c77c <put_fat+0x30>
   2c77a:	e078      	b.n	2c86e <put_fat+0x122>
   2c77c:	2b03      	cmp	r3, #3
   2c77e:	d100      	bne.n	2c782 <put_fat+0x36>
   2c780:	e09e      	b.n	2c8c0 <put_fat+0x174>
   2c782:	2b01      	cmp	r3, #1
   2c784:	d000      	beq.n	2c788 <put_fat+0x3c>
   2c786:	e0e6      	b.n	2c956 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2c788:	68bb      	ldr	r3, [r7, #8]
   2c78a:	61bb      	str	r3, [r7, #24]
   2c78c:	69bb      	ldr	r3, [r7, #24]
   2c78e:	085b      	lsrs	r3, r3, #1
   2c790:	69ba      	ldr	r2, [r7, #24]
   2c792:	18d3      	adds	r3, r2, r3
   2c794:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c796:	68fb      	ldr	r3, [r7, #12]
   2c798:	6a1a      	ldr	r2, [r3, #32]
   2c79a:	69bb      	ldr	r3, [r7, #24]
   2c79c:	0a5b      	lsrs	r3, r3, #9
   2c79e:	18d2      	adds	r2, r2, r3
   2c7a0:	231f      	movs	r3, #31
   2c7a2:	18fc      	adds	r4, r7, r3
   2c7a4:	68fb      	ldr	r3, [r7, #12]
   2c7a6:	0011      	movs	r1, r2
   2c7a8:	0018      	movs	r0, r3
   2c7aa:	4b76      	ldr	r3, [pc, #472]	; (2c984 <put_fat+0x238>)
   2c7ac:	4798      	blx	r3
   2c7ae:	0003      	movs	r3, r0
   2c7b0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c7b2:	231f      	movs	r3, #31
   2c7b4:	18fb      	adds	r3, r7, r3
   2c7b6:	781b      	ldrb	r3, [r3, #0]
   2c7b8:	2b00      	cmp	r3, #0
   2c7ba:	d000      	beq.n	2c7be <put_fat+0x72>
   2c7bc:	e0d0      	b.n	2c960 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2c7be:	69bb      	ldr	r3, [r7, #24]
   2c7c0:	05db      	lsls	r3, r3, #23
   2c7c2:	0ddb      	lsrs	r3, r3, #23
   2c7c4:	3330      	adds	r3, #48	; 0x30
   2c7c6:	68fa      	ldr	r2, [r7, #12]
   2c7c8:	18d3      	adds	r3, r2, r3
   2c7ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2c7cc:	68bb      	ldr	r3, [r7, #8]
   2c7ce:	2201      	movs	r2, #1
   2c7d0:	4013      	ands	r3, r2
   2c7d2:	d00d      	beq.n	2c7f0 <put_fat+0xa4>
   2c7d4:	697b      	ldr	r3, [r7, #20]
   2c7d6:	781b      	ldrb	r3, [r3, #0]
   2c7d8:	b25b      	sxtb	r3, r3
   2c7da:	220f      	movs	r2, #15
   2c7dc:	4013      	ands	r3, r2
   2c7de:	b25a      	sxtb	r2, r3
   2c7e0:	687b      	ldr	r3, [r7, #4]
   2c7e2:	b2db      	uxtb	r3, r3
   2c7e4:	011b      	lsls	r3, r3, #4
   2c7e6:	b25b      	sxtb	r3, r3
   2c7e8:	4313      	orrs	r3, r2
   2c7ea:	b25b      	sxtb	r3, r3
   2c7ec:	b2db      	uxtb	r3, r3
   2c7ee:	e001      	b.n	2c7f4 <put_fat+0xa8>
   2c7f0:	687b      	ldr	r3, [r7, #4]
   2c7f2:	b2db      	uxtb	r3, r3
   2c7f4:	697a      	ldr	r2, [r7, #20]
   2c7f6:	7013      	strb	r3, [r2, #0]
			bc++;
   2c7f8:	69bb      	ldr	r3, [r7, #24]
   2c7fa:	3301      	adds	r3, #1
   2c7fc:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2c7fe:	68fb      	ldr	r3, [r7, #12]
   2c800:	2201      	movs	r2, #1
   2c802:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c804:	68fb      	ldr	r3, [r7, #12]
   2c806:	6a1a      	ldr	r2, [r3, #32]
   2c808:	69bb      	ldr	r3, [r7, #24]
   2c80a:	0a5b      	lsrs	r3, r3, #9
   2c80c:	18d2      	adds	r2, r2, r3
   2c80e:	231f      	movs	r3, #31
   2c810:	18fc      	adds	r4, r7, r3
   2c812:	68fb      	ldr	r3, [r7, #12]
   2c814:	0011      	movs	r1, r2
   2c816:	0018      	movs	r0, r3
   2c818:	4b5a      	ldr	r3, [pc, #360]	; (2c984 <put_fat+0x238>)
   2c81a:	4798      	blx	r3
   2c81c:	0003      	movs	r3, r0
   2c81e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c820:	231f      	movs	r3, #31
   2c822:	18fb      	adds	r3, r7, r3
   2c824:	781b      	ldrb	r3, [r3, #0]
   2c826:	2b00      	cmp	r3, #0
   2c828:	d000      	beq.n	2c82c <put_fat+0xe0>
   2c82a:	e09b      	b.n	2c964 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2c82c:	69bb      	ldr	r3, [r7, #24]
   2c82e:	05db      	lsls	r3, r3, #23
   2c830:	0ddb      	lsrs	r3, r3, #23
   2c832:	3330      	adds	r3, #48	; 0x30
   2c834:	68fa      	ldr	r2, [r7, #12]
   2c836:	18d3      	adds	r3, r2, r3
   2c838:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2c83a:	68bb      	ldr	r3, [r7, #8]
   2c83c:	2201      	movs	r2, #1
   2c83e:	4013      	ands	r3, r2
   2c840:	d003      	beq.n	2c84a <put_fat+0xfe>
   2c842:	687b      	ldr	r3, [r7, #4]
   2c844:	091b      	lsrs	r3, r3, #4
   2c846:	b2db      	uxtb	r3, r3
   2c848:	e00e      	b.n	2c868 <put_fat+0x11c>
   2c84a:	697b      	ldr	r3, [r7, #20]
   2c84c:	781b      	ldrb	r3, [r3, #0]
   2c84e:	b25b      	sxtb	r3, r3
   2c850:	220f      	movs	r2, #15
   2c852:	4393      	bics	r3, r2
   2c854:	b25a      	sxtb	r2, r3
   2c856:	687b      	ldr	r3, [r7, #4]
   2c858:	0a1b      	lsrs	r3, r3, #8
   2c85a:	b25b      	sxtb	r3, r3
   2c85c:	210f      	movs	r1, #15
   2c85e:	400b      	ands	r3, r1
   2c860:	b25b      	sxtb	r3, r3
   2c862:	4313      	orrs	r3, r2
   2c864:	b25b      	sxtb	r3, r3
   2c866:	b2db      	uxtb	r3, r3
   2c868:	697a      	ldr	r2, [r7, #20]
   2c86a:	7013      	strb	r3, [r2, #0]
			break;
   2c86c:	e07f      	b.n	2c96e <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2c86e:	68fb      	ldr	r3, [r7, #12]
   2c870:	6a1a      	ldr	r2, [r3, #32]
   2c872:	68bb      	ldr	r3, [r7, #8]
   2c874:	0a1b      	lsrs	r3, r3, #8
   2c876:	18d2      	adds	r2, r2, r3
   2c878:	231f      	movs	r3, #31
   2c87a:	18fc      	adds	r4, r7, r3
   2c87c:	68fb      	ldr	r3, [r7, #12]
   2c87e:	0011      	movs	r1, r2
   2c880:	0018      	movs	r0, r3
   2c882:	4b40      	ldr	r3, [pc, #256]	; (2c984 <put_fat+0x238>)
   2c884:	4798      	blx	r3
   2c886:	0003      	movs	r3, r0
   2c888:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c88a:	231f      	movs	r3, #31
   2c88c:	18fb      	adds	r3, r7, r3
   2c88e:	781b      	ldrb	r3, [r3, #0]
   2c890:	2b00      	cmp	r3, #0
   2c892:	d169      	bne.n	2c968 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2c894:	68bb      	ldr	r3, [r7, #8]
   2c896:	005a      	lsls	r2, r3, #1
   2c898:	23ff      	movs	r3, #255	; 0xff
   2c89a:	005b      	lsls	r3, r3, #1
   2c89c:	4013      	ands	r3, r2
   2c89e:	3330      	adds	r3, #48	; 0x30
   2c8a0:	68fa      	ldr	r2, [r7, #12]
   2c8a2:	18d3      	adds	r3, r2, r3
   2c8a4:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2c8a6:	687b      	ldr	r3, [r7, #4]
   2c8a8:	b2da      	uxtb	r2, r3
   2c8aa:	697b      	ldr	r3, [r7, #20]
   2c8ac:	701a      	strb	r2, [r3, #0]
   2c8ae:	697b      	ldr	r3, [r7, #20]
   2c8b0:	3301      	adds	r3, #1
   2c8b2:	687a      	ldr	r2, [r7, #4]
   2c8b4:	b292      	uxth	r2, r2
   2c8b6:	0a12      	lsrs	r2, r2, #8
   2c8b8:	b292      	uxth	r2, r2
   2c8ba:	b2d2      	uxtb	r2, r2
   2c8bc:	701a      	strb	r2, [r3, #0]
			break;
   2c8be:	e056      	b.n	2c96e <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2c8c0:	68fb      	ldr	r3, [r7, #12]
   2c8c2:	6a1a      	ldr	r2, [r3, #32]
   2c8c4:	68bb      	ldr	r3, [r7, #8]
   2c8c6:	09db      	lsrs	r3, r3, #7
   2c8c8:	18d2      	adds	r2, r2, r3
   2c8ca:	231f      	movs	r3, #31
   2c8cc:	18fc      	adds	r4, r7, r3
   2c8ce:	68fb      	ldr	r3, [r7, #12]
   2c8d0:	0011      	movs	r1, r2
   2c8d2:	0018      	movs	r0, r3
   2c8d4:	4b2b      	ldr	r3, [pc, #172]	; (2c984 <put_fat+0x238>)
   2c8d6:	4798      	blx	r3
   2c8d8:	0003      	movs	r3, r0
   2c8da:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c8dc:	231f      	movs	r3, #31
   2c8de:	18fb      	adds	r3, r7, r3
   2c8e0:	781b      	ldrb	r3, [r3, #0]
   2c8e2:	2b00      	cmp	r3, #0
   2c8e4:	d142      	bne.n	2c96c <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2c8e6:	68bb      	ldr	r3, [r7, #8]
   2c8e8:	009a      	lsls	r2, r3, #2
   2c8ea:	23fe      	movs	r3, #254	; 0xfe
   2c8ec:	005b      	lsls	r3, r3, #1
   2c8ee:	4013      	ands	r3, r2
   2c8f0:	3330      	adds	r3, #48	; 0x30
   2c8f2:	68fa      	ldr	r2, [r7, #12]
   2c8f4:	18d3      	adds	r3, r2, r3
   2c8f6:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2c8f8:	697b      	ldr	r3, [r7, #20]
   2c8fa:	3303      	adds	r3, #3
   2c8fc:	781b      	ldrb	r3, [r3, #0]
   2c8fe:	061a      	lsls	r2, r3, #24
   2c900:	697b      	ldr	r3, [r7, #20]
   2c902:	3302      	adds	r3, #2
   2c904:	781b      	ldrb	r3, [r3, #0]
   2c906:	041b      	lsls	r3, r3, #16
   2c908:	4313      	orrs	r3, r2
   2c90a:	697a      	ldr	r2, [r7, #20]
   2c90c:	3201      	adds	r2, #1
   2c90e:	7812      	ldrb	r2, [r2, #0]
   2c910:	0212      	lsls	r2, r2, #8
   2c912:	4313      	orrs	r3, r2
   2c914:	697a      	ldr	r2, [r7, #20]
   2c916:	7812      	ldrb	r2, [r2, #0]
   2c918:	4313      	orrs	r3, r2
   2c91a:	0f1b      	lsrs	r3, r3, #28
   2c91c:	071b      	lsls	r3, r3, #28
   2c91e:	687a      	ldr	r2, [r7, #4]
   2c920:	4313      	orrs	r3, r2
   2c922:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2c924:	687b      	ldr	r3, [r7, #4]
   2c926:	b2da      	uxtb	r2, r3
   2c928:	697b      	ldr	r3, [r7, #20]
   2c92a:	701a      	strb	r2, [r3, #0]
   2c92c:	697b      	ldr	r3, [r7, #20]
   2c92e:	3301      	adds	r3, #1
   2c930:	687a      	ldr	r2, [r7, #4]
   2c932:	b292      	uxth	r2, r2
   2c934:	0a12      	lsrs	r2, r2, #8
   2c936:	b292      	uxth	r2, r2
   2c938:	b2d2      	uxtb	r2, r2
   2c93a:	701a      	strb	r2, [r3, #0]
   2c93c:	697b      	ldr	r3, [r7, #20]
   2c93e:	3302      	adds	r3, #2
   2c940:	687a      	ldr	r2, [r7, #4]
   2c942:	0c12      	lsrs	r2, r2, #16
   2c944:	b2d2      	uxtb	r2, r2
   2c946:	701a      	strb	r2, [r3, #0]
   2c948:	697b      	ldr	r3, [r7, #20]
   2c94a:	3303      	adds	r3, #3
   2c94c:	687a      	ldr	r2, [r7, #4]
   2c94e:	0e12      	lsrs	r2, r2, #24
   2c950:	b2d2      	uxtb	r2, r2
   2c952:	701a      	strb	r2, [r3, #0]
			break;
   2c954:	e00b      	b.n	2c96e <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2c956:	231f      	movs	r3, #31
   2c958:	18fb      	adds	r3, r7, r3
   2c95a:	2202      	movs	r2, #2
   2c95c:	701a      	strb	r2, [r3, #0]
   2c95e:	e006      	b.n	2c96e <put_fat+0x222>
			if (res != FR_OK) break;
   2c960:	46c0      	nop			; (mov r8, r8)
   2c962:	e004      	b.n	2c96e <put_fat+0x222>
			if (res != FR_OK) break;
   2c964:	46c0      	nop			; (mov r8, r8)
   2c966:	e002      	b.n	2c96e <put_fat+0x222>
			if (res != FR_OK) break;
   2c968:	46c0      	nop			; (mov r8, r8)
   2c96a:	e000      	b.n	2c96e <put_fat+0x222>
			if (res != FR_OK) break;
   2c96c:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2c96e:	68fb      	ldr	r3, [r7, #12]
   2c970:	2201      	movs	r2, #1
   2c972:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2c974:	231f      	movs	r3, #31
   2c976:	18fb      	adds	r3, r7, r3
   2c978:	781b      	ldrb	r3, [r3, #0]
}
   2c97a:	0018      	movs	r0, r3
   2c97c:	46bd      	mov	sp, r7
   2c97e:	b009      	add	sp, #36	; 0x24
   2c980:	bd90      	pop	{r4, r7, pc}
   2c982:	46c0      	nop			; (mov r8, r8)
   2c984:	0002c349 	.word	0x0002c349

0002c988 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2c988:	b590      	push	{r4, r7, lr}
   2c98a:	b085      	sub	sp, #20
   2c98c:	af00      	add	r7, sp, #0
   2c98e:	6078      	str	r0, [r7, #4]
   2c990:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c992:	683b      	ldr	r3, [r7, #0]
   2c994:	2b01      	cmp	r3, #1
   2c996:	d904      	bls.n	2c9a2 <remove_chain+0x1a>
   2c998:	687b      	ldr	r3, [r7, #4]
   2c99a:	699a      	ldr	r2, [r3, #24]
   2c99c:	683b      	ldr	r3, [r7, #0]
   2c99e:	429a      	cmp	r2, r3
   2c9a0:	d804      	bhi.n	2c9ac <remove_chain+0x24>
		res = FR_INT_ERR;
   2c9a2:	230f      	movs	r3, #15
   2c9a4:	18fb      	adds	r3, r7, r3
   2c9a6:	2202      	movs	r2, #2
   2c9a8:	701a      	strb	r2, [r3, #0]
   2c9aa:	e045      	b.n	2ca38 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2c9ac:	230f      	movs	r3, #15
   2c9ae:	18fb      	adds	r3, r7, r3
   2c9b0:	2200      	movs	r2, #0
   2c9b2:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2c9b4:	e037      	b.n	2ca26 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2c9b6:	683a      	ldr	r2, [r7, #0]
   2c9b8:	687b      	ldr	r3, [r7, #4]
   2c9ba:	0011      	movs	r1, r2
   2c9bc:	0018      	movs	r0, r3
   2c9be:	4b22      	ldr	r3, [pc, #136]	; (2ca48 <remove_chain+0xc0>)
   2c9c0:	4798      	blx	r3
   2c9c2:	0003      	movs	r3, r0
   2c9c4:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2c9c6:	68bb      	ldr	r3, [r7, #8]
   2c9c8:	2b00      	cmp	r3, #0
   2c9ca:	d032      	beq.n	2ca32 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2c9cc:	68bb      	ldr	r3, [r7, #8]
   2c9ce:	2b01      	cmp	r3, #1
   2c9d0:	d104      	bne.n	2c9dc <remove_chain+0x54>
   2c9d2:	230f      	movs	r3, #15
   2c9d4:	18fb      	adds	r3, r7, r3
   2c9d6:	2202      	movs	r2, #2
   2c9d8:	701a      	strb	r2, [r3, #0]
   2c9da:	e02d      	b.n	2ca38 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2c9dc:	68bb      	ldr	r3, [r7, #8]
   2c9de:	3301      	adds	r3, #1
   2c9e0:	d104      	bne.n	2c9ec <remove_chain+0x64>
   2c9e2:	230f      	movs	r3, #15
   2c9e4:	18fb      	adds	r3, r7, r3
   2c9e6:	2201      	movs	r2, #1
   2c9e8:	701a      	strb	r2, [r3, #0]
   2c9ea:	e025      	b.n	2ca38 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2c9ec:	230f      	movs	r3, #15
   2c9ee:	18fc      	adds	r4, r7, r3
   2c9f0:	6839      	ldr	r1, [r7, #0]
   2c9f2:	687b      	ldr	r3, [r7, #4]
   2c9f4:	2200      	movs	r2, #0
   2c9f6:	0018      	movs	r0, r3
   2c9f8:	4b14      	ldr	r3, [pc, #80]	; (2ca4c <remove_chain+0xc4>)
   2c9fa:	4798      	blx	r3
   2c9fc:	0003      	movs	r3, r0
   2c9fe:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ca00:	230f      	movs	r3, #15
   2ca02:	18fb      	adds	r3, r7, r3
   2ca04:	781b      	ldrb	r3, [r3, #0]
   2ca06:	2b00      	cmp	r3, #0
   2ca08:	d115      	bne.n	2ca36 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2ca0a:	687b      	ldr	r3, [r7, #4]
   2ca0c:	691b      	ldr	r3, [r3, #16]
   2ca0e:	3301      	adds	r3, #1
   2ca10:	d007      	beq.n	2ca22 <remove_chain+0x9a>
				fs->free_clust++;
   2ca12:	687b      	ldr	r3, [r7, #4]
   2ca14:	691b      	ldr	r3, [r3, #16]
   2ca16:	1c5a      	adds	r2, r3, #1
   2ca18:	687b      	ldr	r3, [r7, #4]
   2ca1a:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2ca1c:	687b      	ldr	r3, [r7, #4]
   2ca1e:	2201      	movs	r2, #1
   2ca20:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2ca22:	68bb      	ldr	r3, [r7, #8]
   2ca24:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2ca26:	687b      	ldr	r3, [r7, #4]
   2ca28:	699a      	ldr	r2, [r3, #24]
   2ca2a:	683b      	ldr	r3, [r7, #0]
   2ca2c:	429a      	cmp	r2, r3
   2ca2e:	d8c2      	bhi.n	2c9b6 <remove_chain+0x2e>
   2ca30:	e002      	b.n	2ca38 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2ca32:	46c0      	nop			; (mov r8, r8)
   2ca34:	e000      	b.n	2ca38 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2ca36:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2ca38:	230f      	movs	r3, #15
   2ca3a:	18fb      	adds	r3, r7, r3
   2ca3c:	781b      	ldrb	r3, [r3, #0]
}
   2ca3e:	0018      	movs	r0, r3
   2ca40:	46bd      	mov	sp, r7
   2ca42:	b005      	add	sp, #20
   2ca44:	bd90      	pop	{r4, r7, pc}
   2ca46:	46c0      	nop			; (mov r8, r8)
   2ca48:	0002c5e1 	.word	0x0002c5e1
   2ca4c:	0002c74d 	.word	0x0002c74d

0002ca50 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2ca50:	b590      	push	{r4, r7, lr}
   2ca52:	b087      	sub	sp, #28
   2ca54:	af00      	add	r7, sp, #0
   2ca56:	6078      	str	r0, [r7, #4]
   2ca58:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2ca5a:	683b      	ldr	r3, [r7, #0]
   2ca5c:	2b00      	cmp	r3, #0
   2ca5e:	d10d      	bne.n	2ca7c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2ca60:	687b      	ldr	r3, [r7, #4]
   2ca62:	68db      	ldr	r3, [r3, #12]
   2ca64:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2ca66:	693b      	ldr	r3, [r7, #16]
   2ca68:	2b00      	cmp	r3, #0
   2ca6a:	d004      	beq.n	2ca76 <create_chain+0x26>
   2ca6c:	687b      	ldr	r3, [r7, #4]
   2ca6e:	699a      	ldr	r2, [r3, #24]
   2ca70:	693b      	ldr	r3, [r7, #16]
   2ca72:	429a      	cmp	r2, r3
   2ca74:	d818      	bhi.n	2caa8 <create_chain+0x58>
   2ca76:	2301      	movs	r3, #1
   2ca78:	613b      	str	r3, [r7, #16]
   2ca7a:	e015      	b.n	2caa8 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2ca7c:	683a      	ldr	r2, [r7, #0]
   2ca7e:	687b      	ldr	r3, [r7, #4]
   2ca80:	0011      	movs	r1, r2
   2ca82:	0018      	movs	r0, r3
   2ca84:	4b3e      	ldr	r3, [pc, #248]	; (2cb80 <create_chain+0x130>)
   2ca86:	4798      	blx	r3
   2ca88:	0003      	movs	r3, r0
   2ca8a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2ca8c:	68bb      	ldr	r3, [r7, #8]
   2ca8e:	2b01      	cmp	r3, #1
   2ca90:	d801      	bhi.n	2ca96 <create_chain+0x46>
   2ca92:	2301      	movs	r3, #1
   2ca94:	e070      	b.n	2cb78 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2ca96:	687b      	ldr	r3, [r7, #4]
   2ca98:	699a      	ldr	r2, [r3, #24]
   2ca9a:	68bb      	ldr	r3, [r7, #8]
   2ca9c:	429a      	cmp	r2, r3
   2ca9e:	d901      	bls.n	2caa4 <create_chain+0x54>
   2caa0:	68bb      	ldr	r3, [r7, #8]
   2caa2:	e069      	b.n	2cb78 <create_chain+0x128>
		scl = clst;
   2caa4:	683b      	ldr	r3, [r7, #0]
   2caa6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2caa8:	693b      	ldr	r3, [r7, #16]
   2caaa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2caac:	697b      	ldr	r3, [r7, #20]
   2caae:	3301      	adds	r3, #1
   2cab0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2cab2:	687b      	ldr	r3, [r7, #4]
   2cab4:	699a      	ldr	r2, [r3, #24]
   2cab6:	697b      	ldr	r3, [r7, #20]
   2cab8:	429a      	cmp	r2, r3
   2caba:	d807      	bhi.n	2cacc <create_chain+0x7c>
			ncl = 2;
   2cabc:	2302      	movs	r3, #2
   2cabe:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2cac0:	697a      	ldr	r2, [r7, #20]
   2cac2:	693b      	ldr	r3, [r7, #16]
   2cac4:	429a      	cmp	r2, r3
   2cac6:	d901      	bls.n	2cacc <create_chain+0x7c>
   2cac8:	2300      	movs	r3, #0
   2caca:	e055      	b.n	2cb78 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2cacc:	697a      	ldr	r2, [r7, #20]
   2cace:	687b      	ldr	r3, [r7, #4]
   2cad0:	0011      	movs	r1, r2
   2cad2:	0018      	movs	r0, r3
   2cad4:	4b2a      	ldr	r3, [pc, #168]	; (2cb80 <create_chain+0x130>)
   2cad6:	4798      	blx	r3
   2cad8:	0003      	movs	r3, r0
   2cada:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2cadc:	68bb      	ldr	r3, [r7, #8]
   2cade:	2b00      	cmp	r3, #0
   2cae0:	d00d      	beq.n	2cafe <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2cae2:	68bb      	ldr	r3, [r7, #8]
   2cae4:	3301      	adds	r3, #1
   2cae6:	d002      	beq.n	2caee <create_chain+0x9e>
   2cae8:	68bb      	ldr	r3, [r7, #8]
   2caea:	2b01      	cmp	r3, #1
   2caec:	d101      	bne.n	2caf2 <create_chain+0xa2>
			return cs;
   2caee:	68bb      	ldr	r3, [r7, #8]
   2caf0:	e042      	b.n	2cb78 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2caf2:	697a      	ldr	r2, [r7, #20]
   2caf4:	693b      	ldr	r3, [r7, #16]
   2caf6:	429a      	cmp	r2, r3
   2caf8:	d1d8      	bne.n	2caac <create_chain+0x5c>
   2cafa:	2300      	movs	r3, #0
   2cafc:	e03c      	b.n	2cb78 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2cafe:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2cb00:	230f      	movs	r3, #15
   2cb02:	18fc      	adds	r4, r7, r3
   2cb04:	4a1f      	ldr	r2, [pc, #124]	; (2cb84 <create_chain+0x134>)
   2cb06:	6979      	ldr	r1, [r7, #20]
   2cb08:	687b      	ldr	r3, [r7, #4]
   2cb0a:	0018      	movs	r0, r3
   2cb0c:	4b1e      	ldr	r3, [pc, #120]	; (2cb88 <create_chain+0x138>)
   2cb0e:	4798      	blx	r3
   2cb10:	0003      	movs	r3, r0
   2cb12:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2cb14:	230f      	movs	r3, #15
   2cb16:	18fb      	adds	r3, r7, r3
   2cb18:	781b      	ldrb	r3, [r3, #0]
   2cb1a:	2b00      	cmp	r3, #0
   2cb1c:	d10c      	bne.n	2cb38 <create_chain+0xe8>
   2cb1e:	683b      	ldr	r3, [r7, #0]
   2cb20:	2b00      	cmp	r3, #0
   2cb22:	d009      	beq.n	2cb38 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2cb24:	230f      	movs	r3, #15
   2cb26:	18fc      	adds	r4, r7, r3
   2cb28:	697a      	ldr	r2, [r7, #20]
   2cb2a:	6839      	ldr	r1, [r7, #0]
   2cb2c:	687b      	ldr	r3, [r7, #4]
   2cb2e:	0018      	movs	r0, r3
   2cb30:	4b15      	ldr	r3, [pc, #84]	; (2cb88 <create_chain+0x138>)
   2cb32:	4798      	blx	r3
   2cb34:	0003      	movs	r3, r0
   2cb36:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2cb38:	230f      	movs	r3, #15
   2cb3a:	18fb      	adds	r3, r7, r3
   2cb3c:	781b      	ldrb	r3, [r3, #0]
   2cb3e:	2b00      	cmp	r3, #0
   2cb40:	d10f      	bne.n	2cb62 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2cb42:	687b      	ldr	r3, [r7, #4]
   2cb44:	697a      	ldr	r2, [r7, #20]
   2cb46:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2cb48:	687b      	ldr	r3, [r7, #4]
   2cb4a:	691b      	ldr	r3, [r3, #16]
   2cb4c:	3301      	adds	r3, #1
   2cb4e:	d012      	beq.n	2cb76 <create_chain+0x126>
			fs->free_clust--;
   2cb50:	687b      	ldr	r3, [r7, #4]
   2cb52:	691b      	ldr	r3, [r3, #16]
   2cb54:	1e5a      	subs	r2, r3, #1
   2cb56:	687b      	ldr	r3, [r7, #4]
   2cb58:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2cb5a:	687b      	ldr	r3, [r7, #4]
   2cb5c:	2201      	movs	r2, #1
   2cb5e:	715a      	strb	r2, [r3, #5]
   2cb60:	e009      	b.n	2cb76 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2cb62:	230f      	movs	r3, #15
   2cb64:	18fb      	adds	r3, r7, r3
   2cb66:	781b      	ldrb	r3, [r3, #0]
   2cb68:	2b01      	cmp	r3, #1
   2cb6a:	d102      	bne.n	2cb72 <create_chain+0x122>
   2cb6c:	2301      	movs	r3, #1
   2cb6e:	425b      	negs	r3, r3
   2cb70:	e000      	b.n	2cb74 <create_chain+0x124>
   2cb72:	2301      	movs	r3, #1
   2cb74:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2cb76:	697b      	ldr	r3, [r7, #20]
}
   2cb78:	0018      	movs	r0, r3
   2cb7a:	46bd      	mov	sp, r7
   2cb7c:	b007      	add	sp, #28
   2cb7e:	bd90      	pop	{r4, r7, pc}
   2cb80:	0002c5e1 	.word	0x0002c5e1
   2cb84:	0fffffff 	.word	0x0fffffff
   2cb88:	0002c74d 	.word	0x0002c74d

0002cb8c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2cb8c:	b580      	push	{r7, lr}
   2cb8e:	b084      	sub	sp, #16
   2cb90:	af00      	add	r7, sp, #0
   2cb92:	6078      	str	r0, [r7, #4]
   2cb94:	000a      	movs	r2, r1
   2cb96:	1cbb      	adds	r3, r7, #2
   2cb98:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2cb9a:	687b      	ldr	r3, [r7, #4]
   2cb9c:	1cba      	adds	r2, r7, #2
   2cb9e:	8812      	ldrh	r2, [r2, #0]
   2cba0:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2cba2:	687b      	ldr	r3, [r7, #4]
   2cba4:	689b      	ldr	r3, [r3, #8]
   2cba6:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2cba8:	68fb      	ldr	r3, [r7, #12]
   2cbaa:	2b01      	cmp	r3, #1
   2cbac:	d005      	beq.n	2cbba <dir_sdi+0x2e>
   2cbae:	687b      	ldr	r3, [r7, #4]
   2cbb0:	681b      	ldr	r3, [r3, #0]
   2cbb2:	699a      	ldr	r2, [r3, #24]
   2cbb4:	68fb      	ldr	r3, [r7, #12]
   2cbb6:	429a      	cmp	r2, r3
   2cbb8:	d801      	bhi.n	2cbbe <dir_sdi+0x32>
		return FR_INT_ERR;
   2cbba:	2302      	movs	r3, #2
   2cbbc:	e075      	b.n	2ccaa <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2cbbe:	68fb      	ldr	r3, [r7, #12]
   2cbc0:	2b00      	cmp	r3, #0
   2cbc2:	d108      	bne.n	2cbd6 <dir_sdi+0x4a>
   2cbc4:	687b      	ldr	r3, [r7, #4]
   2cbc6:	681b      	ldr	r3, [r3, #0]
   2cbc8:	781b      	ldrb	r3, [r3, #0]
   2cbca:	2b03      	cmp	r3, #3
   2cbcc:	d103      	bne.n	2cbd6 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2cbce:	687b      	ldr	r3, [r7, #4]
   2cbd0:	681b      	ldr	r3, [r3, #0]
   2cbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cbd4:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2cbd6:	68fb      	ldr	r3, [r7, #12]
   2cbd8:	2b00      	cmp	r3, #0
   2cbda:	d116      	bne.n	2cc0a <dir_sdi+0x7e>
		dj->clust = clst;
   2cbdc:	687b      	ldr	r3, [r7, #4]
   2cbde:	68fa      	ldr	r2, [r7, #12]
   2cbe0:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2cbe2:	687b      	ldr	r3, [r7, #4]
   2cbe4:	681b      	ldr	r3, [r3, #0]
   2cbe6:	891b      	ldrh	r3, [r3, #8]
   2cbe8:	1cba      	adds	r2, r7, #2
   2cbea:	8812      	ldrh	r2, [r2, #0]
   2cbec:	429a      	cmp	r2, r3
   2cbee:	d301      	bcc.n	2cbf4 <dir_sdi+0x68>
			return FR_INT_ERR;
   2cbf0:	2302      	movs	r3, #2
   2cbf2:	e05a      	b.n	2ccaa <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2cbf4:	687b      	ldr	r3, [r7, #4]
   2cbf6:	681b      	ldr	r3, [r3, #0]
   2cbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cbfa:	1cba      	adds	r2, r7, #2
   2cbfc:	8812      	ldrh	r2, [r2, #0]
   2cbfe:	0912      	lsrs	r2, r2, #4
   2cc00:	b292      	uxth	r2, r2
   2cc02:	189a      	adds	r2, r3, r2
   2cc04:	687b      	ldr	r3, [r7, #4]
   2cc06:	611a      	str	r2, [r3, #16]
   2cc08:	e042      	b.n	2cc90 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2cc0a:	687b      	ldr	r3, [r7, #4]
   2cc0c:	681b      	ldr	r3, [r3, #0]
   2cc0e:	789b      	ldrb	r3, [r3, #2]
   2cc10:	b29a      	uxth	r2, r3
   2cc12:	230a      	movs	r3, #10
   2cc14:	18fb      	adds	r3, r7, r3
   2cc16:	0112      	lsls	r2, r2, #4
   2cc18:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2cc1a:	e020      	b.n	2cc5e <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2cc1c:	687b      	ldr	r3, [r7, #4]
   2cc1e:	681b      	ldr	r3, [r3, #0]
   2cc20:	68fa      	ldr	r2, [r7, #12]
   2cc22:	0011      	movs	r1, r2
   2cc24:	0018      	movs	r0, r3
   2cc26:	4b23      	ldr	r3, [pc, #140]	; (2ccb4 <dir_sdi+0x128>)
   2cc28:	4798      	blx	r3
   2cc2a:	0003      	movs	r3, r0
   2cc2c:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2cc2e:	68fb      	ldr	r3, [r7, #12]
   2cc30:	3301      	adds	r3, #1
   2cc32:	d101      	bne.n	2cc38 <dir_sdi+0xac>
   2cc34:	2301      	movs	r3, #1
   2cc36:	e038      	b.n	2ccaa <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2cc38:	68fb      	ldr	r3, [r7, #12]
   2cc3a:	2b01      	cmp	r3, #1
   2cc3c:	d905      	bls.n	2cc4a <dir_sdi+0xbe>
   2cc3e:	687b      	ldr	r3, [r7, #4]
   2cc40:	681b      	ldr	r3, [r3, #0]
   2cc42:	699a      	ldr	r2, [r3, #24]
   2cc44:	68fb      	ldr	r3, [r7, #12]
   2cc46:	429a      	cmp	r2, r3
   2cc48:	d801      	bhi.n	2cc4e <dir_sdi+0xc2>
				return FR_INT_ERR;
   2cc4a:	2302      	movs	r3, #2
   2cc4c:	e02d      	b.n	2ccaa <dir_sdi+0x11e>
			idx -= ic;
   2cc4e:	1cbb      	adds	r3, r7, #2
   2cc50:	1cb9      	adds	r1, r7, #2
   2cc52:	220a      	movs	r2, #10
   2cc54:	18ba      	adds	r2, r7, r2
   2cc56:	8809      	ldrh	r1, [r1, #0]
   2cc58:	8812      	ldrh	r2, [r2, #0]
   2cc5a:	1a8a      	subs	r2, r1, r2
   2cc5c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2cc5e:	1cba      	adds	r2, r7, #2
   2cc60:	230a      	movs	r3, #10
   2cc62:	18fb      	adds	r3, r7, r3
   2cc64:	8812      	ldrh	r2, [r2, #0]
   2cc66:	881b      	ldrh	r3, [r3, #0]
   2cc68:	429a      	cmp	r2, r3
   2cc6a:	d2d7      	bcs.n	2cc1c <dir_sdi+0x90>
		}
		dj->clust = clst;
   2cc6c:	687b      	ldr	r3, [r7, #4]
   2cc6e:	68fa      	ldr	r2, [r7, #12]
   2cc70:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2cc72:	687b      	ldr	r3, [r7, #4]
   2cc74:	681b      	ldr	r3, [r3, #0]
   2cc76:	68fa      	ldr	r2, [r7, #12]
   2cc78:	0011      	movs	r1, r2
   2cc7a:	0018      	movs	r0, r3
   2cc7c:	4b0e      	ldr	r3, [pc, #56]	; (2ccb8 <dir_sdi+0x12c>)
   2cc7e:	4798      	blx	r3
   2cc80:	0002      	movs	r2, r0
   2cc82:	1cbb      	adds	r3, r7, #2
   2cc84:	881b      	ldrh	r3, [r3, #0]
   2cc86:	091b      	lsrs	r3, r3, #4
   2cc88:	b29b      	uxth	r3, r3
   2cc8a:	18d2      	adds	r2, r2, r3
   2cc8c:	687b      	ldr	r3, [r7, #4]
   2cc8e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2cc90:	687b      	ldr	r3, [r7, #4]
   2cc92:	681b      	ldr	r3, [r3, #0]
   2cc94:	3330      	adds	r3, #48	; 0x30
   2cc96:	001a      	movs	r2, r3
   2cc98:	1cbb      	adds	r3, r7, #2
   2cc9a:	881b      	ldrh	r3, [r3, #0]
   2cc9c:	210f      	movs	r1, #15
   2cc9e:	400b      	ands	r3, r1
   2cca0:	015b      	lsls	r3, r3, #5
   2cca2:	18d2      	adds	r2, r2, r3
   2cca4:	687b      	ldr	r3, [r7, #4]
   2cca6:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2cca8:	2300      	movs	r3, #0
}
   2ccaa:	0018      	movs	r0, r3
   2ccac:	46bd      	mov	sp, r7
   2ccae:	b004      	add	sp, #16
   2ccb0:	bd80      	pop	{r7, pc}
   2ccb2:	46c0      	nop			; (mov r8, r8)
   2ccb4:	0002c5e1 	.word	0x0002c5e1
   2ccb8:	0002c5a9 	.word	0x0002c5a9

0002ccbc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2ccbc:	b590      	push	{r4, r7, lr}
   2ccbe:	b085      	sub	sp, #20
   2ccc0:	af00      	add	r7, sp, #0
   2ccc2:	6078      	str	r0, [r7, #4]
   2ccc4:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2ccc6:	687b      	ldr	r3, [r7, #4]
   2ccc8:	88da      	ldrh	r2, [r3, #6]
   2ccca:	2308      	movs	r3, #8
   2cccc:	18fb      	adds	r3, r7, r3
   2ccce:	3201      	adds	r2, #1
   2ccd0:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2ccd2:	2308      	movs	r3, #8
   2ccd4:	18fb      	adds	r3, r7, r3
   2ccd6:	881b      	ldrh	r3, [r3, #0]
   2ccd8:	2b00      	cmp	r3, #0
   2ccda:	d003      	beq.n	2cce4 <dir_next+0x28>
   2ccdc:	687b      	ldr	r3, [r7, #4]
   2ccde:	691b      	ldr	r3, [r3, #16]
   2cce0:	2b00      	cmp	r3, #0
   2cce2:	d101      	bne.n	2cce8 <dir_next+0x2c>
		return FR_NO_FILE;
   2cce4:	2304      	movs	r3, #4
   2cce6:	e0d2      	b.n	2ce8e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2cce8:	2308      	movs	r3, #8
   2ccea:	18fb      	adds	r3, r7, r3
   2ccec:	881b      	ldrh	r3, [r3, #0]
   2ccee:	220f      	movs	r2, #15
   2ccf0:	4013      	ands	r3, r2
   2ccf2:	b29b      	uxth	r3, r3
   2ccf4:	2b00      	cmp	r3, #0
   2ccf6:	d000      	beq.n	2ccfa <dir_next+0x3e>
   2ccf8:	e0b6      	b.n	2ce68 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2ccfa:	687b      	ldr	r3, [r7, #4]
   2ccfc:	691b      	ldr	r3, [r3, #16]
   2ccfe:	1c5a      	adds	r2, r3, #1
   2cd00:	687b      	ldr	r3, [r7, #4]
   2cd02:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2cd04:	687b      	ldr	r3, [r7, #4]
   2cd06:	68db      	ldr	r3, [r3, #12]
   2cd08:	2b00      	cmp	r3, #0
   2cd0a:	d10a      	bne.n	2cd22 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2cd0c:	687b      	ldr	r3, [r7, #4]
   2cd0e:	681b      	ldr	r3, [r3, #0]
   2cd10:	891b      	ldrh	r3, [r3, #8]
   2cd12:	2208      	movs	r2, #8
   2cd14:	18ba      	adds	r2, r7, r2
   2cd16:	8812      	ldrh	r2, [r2, #0]
   2cd18:	429a      	cmp	r2, r3
   2cd1a:	d200      	bcs.n	2cd1e <dir_next+0x62>
   2cd1c:	e0a4      	b.n	2ce68 <dir_next+0x1ac>
				return FR_NO_FILE;
   2cd1e:	2304      	movs	r3, #4
   2cd20:	e0b5      	b.n	2ce8e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2cd22:	2308      	movs	r3, #8
   2cd24:	18fb      	adds	r3, r7, r3
   2cd26:	881b      	ldrh	r3, [r3, #0]
   2cd28:	091b      	lsrs	r3, r3, #4
   2cd2a:	b29b      	uxth	r3, r3
   2cd2c:	001a      	movs	r2, r3
   2cd2e:	687b      	ldr	r3, [r7, #4]
   2cd30:	681b      	ldr	r3, [r3, #0]
   2cd32:	789b      	ldrb	r3, [r3, #2]
   2cd34:	3b01      	subs	r3, #1
   2cd36:	4013      	ands	r3, r2
   2cd38:	d000      	beq.n	2cd3c <dir_next+0x80>
   2cd3a:	e095      	b.n	2ce68 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2cd3c:	687b      	ldr	r3, [r7, #4]
   2cd3e:	681a      	ldr	r2, [r3, #0]
   2cd40:	687b      	ldr	r3, [r7, #4]
   2cd42:	68db      	ldr	r3, [r3, #12]
   2cd44:	0019      	movs	r1, r3
   2cd46:	0010      	movs	r0, r2
   2cd48:	4b53      	ldr	r3, [pc, #332]	; (2ce98 <dir_next+0x1dc>)
   2cd4a:	4798      	blx	r3
   2cd4c:	0003      	movs	r3, r0
   2cd4e:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2cd50:	68fb      	ldr	r3, [r7, #12]
   2cd52:	2b01      	cmp	r3, #1
   2cd54:	d801      	bhi.n	2cd5a <dir_next+0x9e>
   2cd56:	2302      	movs	r3, #2
   2cd58:	e099      	b.n	2ce8e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2cd5a:	68fb      	ldr	r3, [r7, #12]
   2cd5c:	3301      	adds	r3, #1
   2cd5e:	d101      	bne.n	2cd64 <dir_next+0xa8>
   2cd60:	2301      	movs	r3, #1
   2cd62:	e094      	b.n	2ce8e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2cd64:	687b      	ldr	r3, [r7, #4]
   2cd66:	681b      	ldr	r3, [r3, #0]
   2cd68:	699a      	ldr	r2, [r3, #24]
   2cd6a:	68fb      	ldr	r3, [r7, #12]
   2cd6c:	429a      	cmp	r2, r3
   2cd6e:	d900      	bls.n	2cd72 <dir_next+0xb6>
   2cd70:	e06d      	b.n	2ce4e <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2cd72:	683b      	ldr	r3, [r7, #0]
   2cd74:	2b00      	cmp	r3, #0
   2cd76:	d101      	bne.n	2cd7c <dir_next+0xc0>
   2cd78:	2304      	movs	r3, #4
   2cd7a:	e088      	b.n	2ce8e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2cd7c:	687b      	ldr	r3, [r7, #4]
   2cd7e:	681a      	ldr	r2, [r3, #0]
   2cd80:	687b      	ldr	r3, [r7, #4]
   2cd82:	68db      	ldr	r3, [r3, #12]
   2cd84:	0019      	movs	r1, r3
   2cd86:	0010      	movs	r0, r2
   2cd88:	4b44      	ldr	r3, [pc, #272]	; (2ce9c <dir_next+0x1e0>)
   2cd8a:	4798      	blx	r3
   2cd8c:	0003      	movs	r3, r0
   2cd8e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2cd90:	68fb      	ldr	r3, [r7, #12]
   2cd92:	2b00      	cmp	r3, #0
   2cd94:	d101      	bne.n	2cd9a <dir_next+0xde>
   2cd96:	2307      	movs	r3, #7
   2cd98:	e079      	b.n	2ce8e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2cd9a:	68fb      	ldr	r3, [r7, #12]
   2cd9c:	2b01      	cmp	r3, #1
   2cd9e:	d101      	bne.n	2cda4 <dir_next+0xe8>
   2cda0:	2302      	movs	r3, #2
   2cda2:	e074      	b.n	2ce8e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2cda4:	68fb      	ldr	r3, [r7, #12]
   2cda6:	3301      	adds	r3, #1
   2cda8:	d101      	bne.n	2cdae <dir_next+0xf2>
   2cdaa:	2301      	movs	r3, #1
   2cdac:	e06f      	b.n	2ce8e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2cdae:	687b      	ldr	r3, [r7, #4]
   2cdb0:	681b      	ldr	r3, [r3, #0]
   2cdb2:	2100      	movs	r1, #0
   2cdb4:	0018      	movs	r0, r3
   2cdb6:	4b3a      	ldr	r3, [pc, #232]	; (2cea0 <dir_next+0x1e4>)
   2cdb8:	4798      	blx	r3
   2cdba:	1e03      	subs	r3, r0, #0
   2cdbc:	d001      	beq.n	2cdc2 <dir_next+0x106>
   2cdbe:	2301      	movs	r3, #1
   2cdc0:	e065      	b.n	2ce8e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2cdc2:	687b      	ldr	r3, [r7, #4]
   2cdc4:	681b      	ldr	r3, [r3, #0]
   2cdc6:	3330      	adds	r3, #48	; 0x30
   2cdc8:	0018      	movs	r0, r3
   2cdca:	2380      	movs	r3, #128	; 0x80
   2cdcc:	009b      	lsls	r3, r3, #2
   2cdce:	001a      	movs	r2, r3
   2cdd0:	2100      	movs	r1, #0
   2cdd2:	4b34      	ldr	r3, [pc, #208]	; (2cea4 <dir_next+0x1e8>)
   2cdd4:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2cdd6:	687b      	ldr	r3, [r7, #4]
   2cdd8:	681c      	ldr	r4, [r3, #0]
   2cdda:	687b      	ldr	r3, [r7, #4]
   2cddc:	681b      	ldr	r3, [r3, #0]
   2cdde:	68fa      	ldr	r2, [r7, #12]
   2cde0:	0011      	movs	r1, r2
   2cde2:	0018      	movs	r0, r3
   2cde4:	4b30      	ldr	r3, [pc, #192]	; (2cea8 <dir_next+0x1ec>)
   2cde6:	4798      	blx	r3
   2cde8:	0003      	movs	r3, r0
   2cdea:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2cdec:	230b      	movs	r3, #11
   2cdee:	18fb      	adds	r3, r7, r3
   2cdf0:	2200      	movs	r2, #0
   2cdf2:	701a      	strb	r2, [r3, #0]
   2cdf4:	e019      	b.n	2ce2a <dir_next+0x16e>
						dj->fs->wflag = 1;
   2cdf6:	687b      	ldr	r3, [r7, #4]
   2cdf8:	681b      	ldr	r3, [r3, #0]
   2cdfa:	2201      	movs	r2, #1
   2cdfc:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2cdfe:	687b      	ldr	r3, [r7, #4]
   2ce00:	681b      	ldr	r3, [r3, #0]
   2ce02:	2100      	movs	r1, #0
   2ce04:	0018      	movs	r0, r3
   2ce06:	4b26      	ldr	r3, [pc, #152]	; (2cea0 <dir_next+0x1e4>)
   2ce08:	4798      	blx	r3
   2ce0a:	1e03      	subs	r3, r0, #0
   2ce0c:	d001      	beq.n	2ce12 <dir_next+0x156>
   2ce0e:	2301      	movs	r3, #1
   2ce10:	e03d      	b.n	2ce8e <dir_next+0x1d2>
						dj->fs->winsect++;
   2ce12:	687b      	ldr	r3, [r7, #4]
   2ce14:	681b      	ldr	r3, [r3, #0]
   2ce16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ce18:	3201      	adds	r2, #1
   2ce1a:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2ce1c:	230b      	movs	r3, #11
   2ce1e:	18fb      	adds	r3, r7, r3
   2ce20:	781a      	ldrb	r2, [r3, #0]
   2ce22:	230b      	movs	r3, #11
   2ce24:	18fb      	adds	r3, r7, r3
   2ce26:	3201      	adds	r2, #1
   2ce28:	701a      	strb	r2, [r3, #0]
   2ce2a:	687b      	ldr	r3, [r7, #4]
   2ce2c:	681b      	ldr	r3, [r3, #0]
   2ce2e:	789b      	ldrb	r3, [r3, #2]
   2ce30:	220b      	movs	r2, #11
   2ce32:	18ba      	adds	r2, r7, r2
   2ce34:	7812      	ldrb	r2, [r2, #0]
   2ce36:	429a      	cmp	r2, r3
   2ce38:	d3dd      	bcc.n	2cdf6 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2ce3a:	687b      	ldr	r3, [r7, #4]
   2ce3c:	681b      	ldr	r3, [r3, #0]
   2ce3e:	687a      	ldr	r2, [r7, #4]
   2ce40:	6812      	ldr	r2, [r2, #0]
   2ce42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2ce44:	220b      	movs	r2, #11
   2ce46:	18ba      	adds	r2, r7, r2
   2ce48:	7812      	ldrb	r2, [r2, #0]
   2ce4a:	1a8a      	subs	r2, r1, r2
   2ce4c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2ce4e:	687b      	ldr	r3, [r7, #4]
   2ce50:	68fa      	ldr	r2, [r7, #12]
   2ce52:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2ce54:	687b      	ldr	r3, [r7, #4]
   2ce56:	681b      	ldr	r3, [r3, #0]
   2ce58:	68fa      	ldr	r2, [r7, #12]
   2ce5a:	0011      	movs	r1, r2
   2ce5c:	0018      	movs	r0, r3
   2ce5e:	4b12      	ldr	r3, [pc, #72]	; (2cea8 <dir_next+0x1ec>)
   2ce60:	4798      	blx	r3
   2ce62:	0002      	movs	r2, r0
   2ce64:	687b      	ldr	r3, [r7, #4]
   2ce66:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2ce68:	687b      	ldr	r3, [r7, #4]
   2ce6a:	2208      	movs	r2, #8
   2ce6c:	18ba      	adds	r2, r7, r2
   2ce6e:	8812      	ldrh	r2, [r2, #0]
   2ce70:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2ce72:	687b      	ldr	r3, [r7, #4]
   2ce74:	681b      	ldr	r3, [r3, #0]
   2ce76:	3330      	adds	r3, #48	; 0x30
   2ce78:	001a      	movs	r2, r3
   2ce7a:	2308      	movs	r3, #8
   2ce7c:	18fb      	adds	r3, r7, r3
   2ce7e:	881b      	ldrh	r3, [r3, #0]
   2ce80:	210f      	movs	r1, #15
   2ce82:	400b      	ands	r3, r1
   2ce84:	015b      	lsls	r3, r3, #5
   2ce86:	18d2      	adds	r2, r2, r3
   2ce88:	687b      	ldr	r3, [r7, #4]
   2ce8a:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2ce8c:	2300      	movs	r3, #0
}
   2ce8e:	0018      	movs	r0, r3
   2ce90:	46bd      	mov	sp, r7
   2ce92:	b005      	add	sp, #20
   2ce94:	bd90      	pop	{r4, r7, pc}
   2ce96:	46c0      	nop			; (mov r8, r8)
   2ce98:	0002c5e1 	.word	0x0002c5e1
   2ce9c:	0002ca51 	.word	0x0002ca51
   2cea0:	0002c349 	.word	0x0002c349
   2cea4:	0002c29d 	.word	0x0002c29d
   2cea8:	0002c5a9 	.word	0x0002c5a9

0002ceac <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2ceac:	b590      	push	{r4, r7, lr}
   2ceae:	b087      	sub	sp, #28
   2ceb0:	af00      	add	r7, sp, #0
   2ceb2:	6078      	str	r0, [r7, #4]
   2ceb4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2ceb6:	683b      	ldr	r3, [r7, #0]
   2ceb8:	781b      	ldrb	r3, [r3, #0]
   2ceba:	001a      	movs	r2, r3
   2cebc:	2340      	movs	r3, #64	; 0x40
   2cebe:	439a      	bics	r2, r3
   2cec0:	0013      	movs	r3, r2
   2cec2:	1e5a      	subs	r2, r3, #1
   2cec4:	0013      	movs	r3, r2
   2cec6:	005b      	lsls	r3, r3, #1
   2cec8:	189b      	adds	r3, r3, r2
   2ceca:	009b      	lsls	r3, r3, #2
   2cecc:	189b      	adds	r3, r3, r2
   2cece:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2ced0:	2300      	movs	r3, #0
   2ced2:	613b      	str	r3, [r7, #16]
   2ced4:	230e      	movs	r3, #14
   2ced6:	18fb      	adds	r3, r7, r3
   2ced8:	2201      	movs	r2, #1
   2ceda:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2cedc:	4a31      	ldr	r2, [pc, #196]	; (2cfa4 <cmp_lfn+0xf8>)
   2cede:	693b      	ldr	r3, [r7, #16]
   2cee0:	18d3      	adds	r3, r2, r3
   2cee2:	781b      	ldrb	r3, [r3, #0]
   2cee4:	3301      	adds	r3, #1
   2cee6:	683a      	ldr	r2, [r7, #0]
   2cee8:	18d3      	adds	r3, r2, r3
   2ceea:	781b      	ldrb	r3, [r3, #0]
   2ceec:	021b      	lsls	r3, r3, #8
   2ceee:	b21a      	sxth	r2, r3
   2cef0:	492c      	ldr	r1, [pc, #176]	; (2cfa4 <cmp_lfn+0xf8>)
   2cef2:	693b      	ldr	r3, [r7, #16]
   2cef4:	18cb      	adds	r3, r1, r3
   2cef6:	781b      	ldrb	r3, [r3, #0]
   2cef8:	0019      	movs	r1, r3
   2cefa:	683b      	ldr	r3, [r7, #0]
   2cefc:	185b      	adds	r3, r3, r1
   2cefe:	781b      	ldrb	r3, [r3, #0]
   2cf00:	b21b      	sxth	r3, r3
   2cf02:	4313      	orrs	r3, r2
   2cf04:	b21a      	sxth	r2, r3
   2cf06:	230c      	movs	r3, #12
   2cf08:	18fb      	adds	r3, r7, r3
   2cf0a:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2cf0c:	230e      	movs	r3, #14
   2cf0e:	18fb      	adds	r3, r7, r3
   2cf10:	881b      	ldrh	r3, [r3, #0]
   2cf12:	2b00      	cmp	r3, #0
   2cf14:	d01f      	beq.n	2cf56 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2cf16:	230e      	movs	r3, #14
   2cf18:	18fc      	adds	r4, r7, r3
   2cf1a:	230c      	movs	r3, #12
   2cf1c:	18fb      	adds	r3, r7, r3
   2cf1e:	881b      	ldrh	r3, [r3, #0]
   2cf20:	0018      	movs	r0, r3
   2cf22:	4b21      	ldr	r3, [pc, #132]	; (2cfa8 <cmp_lfn+0xfc>)
   2cf24:	4798      	blx	r3
   2cf26:	0003      	movs	r3, r0
   2cf28:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2cf2a:	697b      	ldr	r3, [r7, #20]
   2cf2c:	2bfe      	cmp	r3, #254	; 0xfe
   2cf2e:	d810      	bhi.n	2cf52 <cmp_lfn+0xa6>
   2cf30:	697b      	ldr	r3, [r7, #20]
   2cf32:	1c5a      	adds	r2, r3, #1
   2cf34:	617a      	str	r2, [r7, #20]
   2cf36:	005b      	lsls	r3, r3, #1
   2cf38:	687a      	ldr	r2, [r7, #4]
   2cf3a:	18d3      	adds	r3, r2, r3
   2cf3c:	881b      	ldrh	r3, [r3, #0]
   2cf3e:	0018      	movs	r0, r3
   2cf40:	4b19      	ldr	r3, [pc, #100]	; (2cfa8 <cmp_lfn+0xfc>)
   2cf42:	4798      	blx	r3
   2cf44:	0003      	movs	r3, r0
   2cf46:	001a      	movs	r2, r3
   2cf48:	230e      	movs	r3, #14
   2cf4a:	18fb      	adds	r3, r7, r3
   2cf4c:	881b      	ldrh	r3, [r3, #0]
   2cf4e:	4293      	cmp	r3, r2
   2cf50:	d009      	beq.n	2cf66 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2cf52:	2300      	movs	r3, #0
   2cf54:	e022      	b.n	2cf9c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2cf56:	230c      	movs	r3, #12
   2cf58:	18fb      	adds	r3, r7, r3
   2cf5a:	881b      	ldrh	r3, [r3, #0]
   2cf5c:	4a13      	ldr	r2, [pc, #76]	; (2cfac <cmp_lfn+0x100>)
   2cf5e:	4293      	cmp	r3, r2
   2cf60:	d001      	beq.n	2cf66 <cmp_lfn+0xba>
   2cf62:	2300      	movs	r3, #0
   2cf64:	e01a      	b.n	2cf9c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2cf66:	693b      	ldr	r3, [r7, #16]
   2cf68:	3301      	adds	r3, #1
   2cf6a:	613b      	str	r3, [r7, #16]
   2cf6c:	693b      	ldr	r3, [r7, #16]
   2cf6e:	2b0c      	cmp	r3, #12
   2cf70:	d9b4      	bls.n	2cedc <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2cf72:	683b      	ldr	r3, [r7, #0]
   2cf74:	781b      	ldrb	r3, [r3, #0]
   2cf76:	001a      	movs	r2, r3
   2cf78:	2340      	movs	r3, #64	; 0x40
   2cf7a:	4013      	ands	r3, r2
   2cf7c:	d00d      	beq.n	2cf9a <cmp_lfn+0xee>
   2cf7e:	230e      	movs	r3, #14
   2cf80:	18fb      	adds	r3, r7, r3
   2cf82:	881b      	ldrh	r3, [r3, #0]
   2cf84:	2b00      	cmp	r3, #0
   2cf86:	d008      	beq.n	2cf9a <cmp_lfn+0xee>
   2cf88:	697b      	ldr	r3, [r7, #20]
   2cf8a:	005b      	lsls	r3, r3, #1
   2cf8c:	687a      	ldr	r2, [r7, #4]
   2cf8e:	18d3      	adds	r3, r2, r3
   2cf90:	881b      	ldrh	r3, [r3, #0]
   2cf92:	2b00      	cmp	r3, #0
   2cf94:	d001      	beq.n	2cf9a <cmp_lfn+0xee>
		return 0;
   2cf96:	2300      	movs	r3, #0
   2cf98:	e000      	b.n	2cf9c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2cf9a:	2301      	movs	r3, #1
}
   2cf9c:	0018      	movs	r0, r3
   2cf9e:	46bd      	mov	sp, r7
   2cfa0:	b007      	add	sp, #28
   2cfa2:	bd90      	pop	{r4, r7, pc}
   2cfa4:	0003a118 	.word	0x0003a118
   2cfa8:	0002ef59 	.word	0x0002ef59
   2cfac:	0000ffff 	.word	0x0000ffff

0002cfb0 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2cfb0:	b580      	push	{r7, lr}
   2cfb2:	b088      	sub	sp, #32
   2cfb4:	af00      	add	r7, sp, #0
   2cfb6:	60f8      	str	r0, [r7, #12]
   2cfb8:	60b9      	str	r1, [r7, #8]
   2cfba:	0019      	movs	r1, r3
   2cfbc:	1dfb      	adds	r3, r7, #7
   2cfbe:	701a      	strb	r2, [r3, #0]
   2cfc0:	1dbb      	adds	r3, r7, #6
   2cfc2:	1c0a      	adds	r2, r1, #0
   2cfc4:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2cfc6:	68bb      	ldr	r3, [r7, #8]
   2cfc8:	330d      	adds	r3, #13
   2cfca:	1dba      	adds	r2, r7, #6
   2cfcc:	7812      	ldrb	r2, [r2, #0]
   2cfce:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2cfd0:	68bb      	ldr	r3, [r7, #8]
   2cfd2:	330b      	adds	r3, #11
   2cfd4:	220f      	movs	r2, #15
   2cfd6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2cfd8:	68bb      	ldr	r3, [r7, #8]
   2cfda:	330c      	adds	r3, #12
   2cfdc:	2200      	movs	r2, #0
   2cfde:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2cfe0:	68bb      	ldr	r3, [r7, #8]
   2cfe2:	331a      	adds	r3, #26
   2cfe4:	2200      	movs	r2, #0
   2cfe6:	701a      	strb	r2, [r3, #0]
   2cfe8:	68bb      	ldr	r3, [r7, #8]
   2cfea:	331b      	adds	r3, #27
   2cfec:	2200      	movs	r2, #0
   2cfee:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2cff0:	1dfb      	adds	r3, r7, #7
   2cff2:	781b      	ldrb	r3, [r3, #0]
   2cff4:	1e5a      	subs	r2, r3, #1
   2cff6:	0013      	movs	r3, r2
   2cff8:	005b      	lsls	r3, r3, #1
   2cffa:	189b      	adds	r3, r3, r2
   2cffc:	009b      	lsls	r3, r3, #2
   2cffe:	189b      	adds	r3, r3, r2
   2d000:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2d002:	2316      	movs	r3, #22
   2d004:	18fb      	adds	r3, r7, r3
   2d006:	2200      	movs	r2, #0
   2d008:	801a      	strh	r2, [r3, #0]
   2d00a:	2300      	movs	r3, #0
   2d00c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2d00e:	2316      	movs	r3, #22
   2d010:	18fb      	adds	r3, r7, r3
   2d012:	881b      	ldrh	r3, [r3, #0]
   2d014:	4a28      	ldr	r2, [pc, #160]	; (2d0b8 <fit_lfn+0x108>)
   2d016:	4293      	cmp	r3, r2
   2d018:	d009      	beq.n	2d02e <fit_lfn+0x7e>
   2d01a:	69fb      	ldr	r3, [r7, #28]
   2d01c:	1c5a      	adds	r2, r3, #1
   2d01e:	61fa      	str	r2, [r7, #28]
   2d020:	005b      	lsls	r3, r3, #1
   2d022:	68fa      	ldr	r2, [r7, #12]
   2d024:	18d2      	adds	r2, r2, r3
   2d026:	2316      	movs	r3, #22
   2d028:	18fb      	adds	r3, r7, r3
   2d02a:	8812      	ldrh	r2, [r2, #0]
   2d02c:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2d02e:	4a23      	ldr	r2, [pc, #140]	; (2d0bc <fit_lfn+0x10c>)
   2d030:	69bb      	ldr	r3, [r7, #24]
   2d032:	18d3      	adds	r3, r2, r3
   2d034:	781b      	ldrb	r3, [r3, #0]
   2d036:	001a      	movs	r2, r3
   2d038:	68bb      	ldr	r3, [r7, #8]
   2d03a:	189b      	adds	r3, r3, r2
   2d03c:	2216      	movs	r2, #22
   2d03e:	18ba      	adds	r2, r7, r2
   2d040:	8812      	ldrh	r2, [r2, #0]
   2d042:	b2d2      	uxtb	r2, r2
   2d044:	701a      	strb	r2, [r3, #0]
   2d046:	4a1d      	ldr	r2, [pc, #116]	; (2d0bc <fit_lfn+0x10c>)
   2d048:	69bb      	ldr	r3, [r7, #24]
   2d04a:	18d3      	adds	r3, r2, r3
   2d04c:	781b      	ldrb	r3, [r3, #0]
   2d04e:	3301      	adds	r3, #1
   2d050:	68ba      	ldr	r2, [r7, #8]
   2d052:	18d3      	adds	r3, r2, r3
   2d054:	2216      	movs	r2, #22
   2d056:	18ba      	adds	r2, r7, r2
   2d058:	8812      	ldrh	r2, [r2, #0]
   2d05a:	0a12      	lsrs	r2, r2, #8
   2d05c:	b292      	uxth	r2, r2
   2d05e:	b2d2      	uxtb	r2, r2
   2d060:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2d062:	2316      	movs	r3, #22
   2d064:	18fb      	adds	r3, r7, r3
   2d066:	881b      	ldrh	r3, [r3, #0]
   2d068:	2b00      	cmp	r3, #0
   2d06a:	d104      	bne.n	2d076 <fit_lfn+0xc6>
   2d06c:	2316      	movs	r3, #22
   2d06e:	18fb      	adds	r3, r7, r3
   2d070:	2201      	movs	r2, #1
   2d072:	4252      	negs	r2, r2
   2d074:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2d076:	69bb      	ldr	r3, [r7, #24]
   2d078:	3301      	adds	r3, #1
   2d07a:	61bb      	str	r3, [r7, #24]
   2d07c:	69bb      	ldr	r3, [r7, #24]
   2d07e:	2b0c      	cmp	r3, #12
   2d080:	d9c5      	bls.n	2d00e <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2d082:	2316      	movs	r3, #22
   2d084:	18fb      	adds	r3, r7, r3
   2d086:	881b      	ldrh	r3, [r3, #0]
   2d088:	4a0b      	ldr	r2, [pc, #44]	; (2d0b8 <fit_lfn+0x108>)
   2d08a:	4293      	cmp	r3, r2
   2d08c:	d006      	beq.n	2d09c <fit_lfn+0xec>
   2d08e:	69fb      	ldr	r3, [r7, #28]
   2d090:	005b      	lsls	r3, r3, #1
   2d092:	68fa      	ldr	r2, [r7, #12]
   2d094:	18d3      	adds	r3, r2, r3
   2d096:	881b      	ldrh	r3, [r3, #0]
   2d098:	2b00      	cmp	r3, #0
   2d09a:	d105      	bne.n	2d0a8 <fit_lfn+0xf8>
   2d09c:	1dfb      	adds	r3, r7, #7
   2d09e:	1dfa      	adds	r2, r7, #7
   2d0a0:	7812      	ldrb	r2, [r2, #0]
   2d0a2:	2140      	movs	r1, #64	; 0x40
   2d0a4:	430a      	orrs	r2, r1
   2d0a6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2d0a8:	68bb      	ldr	r3, [r7, #8]
   2d0aa:	1dfa      	adds	r2, r7, #7
   2d0ac:	7812      	ldrb	r2, [r2, #0]
   2d0ae:	701a      	strb	r2, [r3, #0]
}
   2d0b0:	46c0      	nop			; (mov r8, r8)
   2d0b2:	46bd      	mov	sp, r7
   2d0b4:	b008      	add	sp, #32
   2d0b6:	bd80      	pop	{r7, pc}
   2d0b8:	0000ffff 	.word	0x0000ffff
   2d0bc:	0003a118 	.word	0x0003a118

0002d0c0 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2d0c0:	b580      	push	{r7, lr}
   2d0c2:	b08a      	sub	sp, #40	; 0x28
   2d0c4:	af00      	add	r7, sp, #0
   2d0c6:	60f8      	str	r0, [r7, #12]
   2d0c8:	60b9      	str	r1, [r7, #8]
   2d0ca:	607a      	str	r2, [r7, #4]
   2d0cc:	001a      	movs	r2, r3
   2d0ce:	1cbb      	adds	r3, r7, #2
   2d0d0:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2d0d2:	68b9      	ldr	r1, [r7, #8]
   2d0d4:	68fb      	ldr	r3, [r7, #12]
   2d0d6:	220b      	movs	r2, #11
   2d0d8:	0018      	movs	r0, r3
   2d0da:	4b38      	ldr	r3, [pc, #224]	; (2d1bc <gen_numname+0xfc>)
   2d0dc:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2d0de:	1cbb      	adds	r3, r7, #2
   2d0e0:	881b      	ldrh	r3, [r3, #0]
   2d0e2:	2b05      	cmp	r3, #5
   2d0e4:	d911      	bls.n	2d10a <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2d0e6:	1cbb      	adds	r3, r7, #2
   2d0e8:	881b      	ldrh	r3, [r3, #0]
   2d0ea:	b29a      	uxth	r2, r3
   2d0ec:	0852      	lsrs	r2, r2, #1
   2d0ee:	03db      	lsls	r3, r3, #15
   2d0f0:	4313      	orrs	r3, r2
   2d0f2:	b299      	uxth	r1, r3
   2d0f4:	687b      	ldr	r3, [r7, #4]
   2d0f6:	1c9a      	adds	r2, r3, #2
   2d0f8:	607a      	str	r2, [r7, #4]
   2d0fa:	881a      	ldrh	r2, [r3, #0]
   2d0fc:	1cbb      	adds	r3, r7, #2
   2d0fe:	188a      	adds	r2, r1, r2
   2d100:	801a      	strh	r2, [r3, #0]
   2d102:	687b      	ldr	r3, [r7, #4]
   2d104:	881b      	ldrh	r3, [r3, #0]
   2d106:	2b00      	cmp	r3, #0
   2d108:	d1ed      	bne.n	2d0e6 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2d10a:	2307      	movs	r3, #7
   2d10c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2d10e:	1cbb      	adds	r3, r7, #2
   2d110:	881b      	ldrh	r3, [r3, #0]
   2d112:	b2db      	uxtb	r3, r3
   2d114:	220f      	movs	r2, #15
   2d116:	4013      	ands	r3, r2
   2d118:	b2da      	uxtb	r2, r3
   2d11a:	2327      	movs	r3, #39	; 0x27
   2d11c:	18fb      	adds	r3, r7, r3
   2d11e:	3230      	adds	r2, #48	; 0x30
   2d120:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2d122:	2327      	movs	r3, #39	; 0x27
   2d124:	18fb      	adds	r3, r7, r3
   2d126:	781b      	ldrb	r3, [r3, #0]
   2d128:	2b39      	cmp	r3, #57	; 0x39
   2d12a:	d906      	bls.n	2d13a <gen_numname+0x7a>
   2d12c:	2327      	movs	r3, #39	; 0x27
   2d12e:	18fb      	adds	r3, r7, r3
   2d130:	2227      	movs	r2, #39	; 0x27
   2d132:	18ba      	adds	r2, r7, r2
   2d134:	7812      	ldrb	r2, [r2, #0]
   2d136:	3207      	adds	r2, #7
   2d138:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2d13a:	6a3b      	ldr	r3, [r7, #32]
   2d13c:	1e5a      	subs	r2, r3, #1
   2d13e:	623a      	str	r2, [r7, #32]
   2d140:	2214      	movs	r2, #20
   2d142:	18ba      	adds	r2, r7, r2
   2d144:	2127      	movs	r1, #39	; 0x27
   2d146:	1879      	adds	r1, r7, r1
   2d148:	7809      	ldrb	r1, [r1, #0]
   2d14a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2d14c:	1cbb      	adds	r3, r7, #2
   2d14e:	1cba      	adds	r2, r7, #2
   2d150:	8812      	ldrh	r2, [r2, #0]
   2d152:	0912      	lsrs	r2, r2, #4
   2d154:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2d156:	1cbb      	adds	r3, r7, #2
   2d158:	881b      	ldrh	r3, [r3, #0]
   2d15a:	2b00      	cmp	r3, #0
   2d15c:	d1d7      	bne.n	2d10e <gen_numname+0x4e>
	ns[i] = '~';
   2d15e:	2314      	movs	r3, #20
   2d160:	18fa      	adds	r2, r7, r3
   2d162:	6a3b      	ldr	r3, [r7, #32]
   2d164:	18d3      	adds	r3, r2, r3
   2d166:	227e      	movs	r2, #126	; 0x7e
   2d168:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2d16a:	2300      	movs	r3, #0
   2d16c:	61fb      	str	r3, [r7, #28]
   2d16e:	e002      	b.n	2d176 <gen_numname+0xb6>
   2d170:	69fb      	ldr	r3, [r7, #28]
   2d172:	3301      	adds	r3, #1
   2d174:	61fb      	str	r3, [r7, #28]
   2d176:	69fa      	ldr	r2, [r7, #28]
   2d178:	6a3b      	ldr	r3, [r7, #32]
   2d17a:	429a      	cmp	r2, r3
   2d17c:	d205      	bcs.n	2d18a <gen_numname+0xca>
   2d17e:	68fa      	ldr	r2, [r7, #12]
   2d180:	69fb      	ldr	r3, [r7, #28]
   2d182:	18d3      	adds	r3, r2, r3
   2d184:	781b      	ldrb	r3, [r3, #0]
   2d186:	2b20      	cmp	r3, #32
   2d188:	d1f2      	bne.n	2d170 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2d18a:	69fb      	ldr	r3, [r7, #28]
   2d18c:	1c5a      	adds	r2, r3, #1
   2d18e:	61fa      	str	r2, [r7, #28]
   2d190:	68fa      	ldr	r2, [r7, #12]
   2d192:	18d2      	adds	r2, r2, r3
   2d194:	6a3b      	ldr	r3, [r7, #32]
   2d196:	2b07      	cmp	r3, #7
   2d198:	d806      	bhi.n	2d1a8 <gen_numname+0xe8>
   2d19a:	6a3b      	ldr	r3, [r7, #32]
   2d19c:	1c59      	adds	r1, r3, #1
   2d19e:	6239      	str	r1, [r7, #32]
   2d1a0:	2114      	movs	r1, #20
   2d1a2:	1879      	adds	r1, r7, r1
   2d1a4:	5ccb      	ldrb	r3, [r1, r3]
   2d1a6:	e000      	b.n	2d1aa <gen_numname+0xea>
   2d1a8:	2320      	movs	r3, #32
   2d1aa:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2d1ac:	69fb      	ldr	r3, [r7, #28]
   2d1ae:	2b07      	cmp	r3, #7
   2d1b0:	d9eb      	bls.n	2d18a <gen_numname+0xca>
}
   2d1b2:	46c0      	nop			; (mov r8, r8)
   2d1b4:	46bd      	mov	sp, r7
   2d1b6:	b00a      	add	sp, #40	; 0x28
   2d1b8:	bd80      	pop	{r7, pc}
   2d1ba:	46c0      	nop			; (mov r8, r8)
   2d1bc:	0002c265 	.word	0x0002c265

0002d1c0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2d1c0:	b580      	push	{r7, lr}
   2d1c2:	b084      	sub	sp, #16
   2d1c4:	af00      	add	r7, sp, #0
   2d1c6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2d1c8:	230f      	movs	r3, #15
   2d1ca:	18fb      	adds	r3, r7, r3
   2d1cc:	2200      	movs	r2, #0
   2d1ce:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2d1d0:	230b      	movs	r3, #11
   2d1d2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2d1d4:	230f      	movs	r3, #15
   2d1d6:	18fb      	adds	r3, r7, r3
   2d1d8:	781b      	ldrb	r3, [r3, #0]
   2d1da:	b2da      	uxtb	r2, r3
   2d1dc:	0852      	lsrs	r2, r2, #1
   2d1de:	01db      	lsls	r3, r3, #7
   2d1e0:	4313      	orrs	r3, r2
   2d1e2:	b2d9      	uxtb	r1, r3
   2d1e4:	687b      	ldr	r3, [r7, #4]
   2d1e6:	1c5a      	adds	r2, r3, #1
   2d1e8:	607a      	str	r2, [r7, #4]
   2d1ea:	781a      	ldrb	r2, [r3, #0]
   2d1ec:	230f      	movs	r3, #15
   2d1ee:	18fb      	adds	r3, r7, r3
   2d1f0:	188a      	adds	r2, r1, r2
   2d1f2:	701a      	strb	r2, [r3, #0]
   2d1f4:	68bb      	ldr	r3, [r7, #8]
   2d1f6:	3b01      	subs	r3, #1
   2d1f8:	60bb      	str	r3, [r7, #8]
   2d1fa:	68bb      	ldr	r3, [r7, #8]
   2d1fc:	2b00      	cmp	r3, #0
   2d1fe:	d1e9      	bne.n	2d1d4 <sum_sfn+0x14>
	return sum;
   2d200:	230f      	movs	r3, #15
   2d202:	18fb      	adds	r3, r7, r3
   2d204:	781b      	ldrb	r3, [r3, #0]
}
   2d206:	0018      	movs	r0, r3
   2d208:	46bd      	mov	sp, r7
   2d20a:	b004      	add	sp, #16
   2d20c:	bd80      	pop	{r7, pc}
	...

0002d210 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2d210:	b590      	push	{r4, r7, lr}
   2d212:	b087      	sub	sp, #28
   2d214:	af00      	add	r7, sp, #0
   2d216:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2d218:	2317      	movs	r3, #23
   2d21a:	18fc      	adds	r4, r7, r3
   2d21c:	687b      	ldr	r3, [r7, #4]
   2d21e:	2100      	movs	r1, #0
   2d220:	0018      	movs	r0, r3
   2d222:	4b74      	ldr	r3, [pc, #464]	; (2d3f4 <dir_find+0x1e4>)
   2d224:	4798      	blx	r3
   2d226:	0003      	movs	r3, r0
   2d228:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d22a:	2317      	movs	r3, #23
   2d22c:	18fb      	adds	r3, r7, r3
   2d22e:	781b      	ldrb	r3, [r3, #0]
   2d230:	2b00      	cmp	r3, #0
   2d232:	d003      	beq.n	2d23c <dir_find+0x2c>
   2d234:	2317      	movs	r3, #23
   2d236:	18fb      	adds	r3, r7, r3
   2d238:	781b      	ldrb	r3, [r3, #0]
   2d23a:	e0d6      	b.n	2d3ea <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2d23c:	2314      	movs	r3, #20
   2d23e:	18fb      	adds	r3, r7, r3
   2d240:	22ff      	movs	r2, #255	; 0xff
   2d242:	701a      	strb	r2, [r3, #0]
   2d244:	2315      	movs	r3, #21
   2d246:	18fb      	adds	r3, r7, r3
   2d248:	2214      	movs	r2, #20
   2d24a:	18ba      	adds	r2, r7, r2
   2d24c:	7812      	ldrb	r2, [r2, #0]
   2d24e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2d250:	687b      	ldr	r3, [r7, #4]
   2d252:	681a      	ldr	r2, [r3, #0]
   2d254:	687b      	ldr	r3, [r7, #4]
   2d256:	691b      	ldr	r3, [r3, #16]
   2d258:	2117      	movs	r1, #23
   2d25a:	187c      	adds	r4, r7, r1
   2d25c:	0019      	movs	r1, r3
   2d25e:	0010      	movs	r0, r2
   2d260:	4b65      	ldr	r3, [pc, #404]	; (2d3f8 <dir_find+0x1e8>)
   2d262:	4798      	blx	r3
   2d264:	0003      	movs	r3, r0
   2d266:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d268:	2317      	movs	r3, #23
   2d26a:	18fb      	adds	r3, r7, r3
   2d26c:	781b      	ldrb	r3, [r3, #0]
   2d26e:	2b00      	cmp	r3, #0
   2d270:	d000      	beq.n	2d274 <dir_find+0x64>
   2d272:	e0b2      	b.n	2d3da <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2d274:	687b      	ldr	r3, [r7, #4]
   2d276:	695b      	ldr	r3, [r3, #20]
   2d278:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2d27a:	2316      	movs	r3, #22
   2d27c:	18fb      	adds	r3, r7, r3
   2d27e:	693a      	ldr	r2, [r7, #16]
   2d280:	7812      	ldrb	r2, [r2, #0]
   2d282:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2d284:	2316      	movs	r3, #22
   2d286:	18fb      	adds	r3, r7, r3
   2d288:	781b      	ldrb	r3, [r3, #0]
   2d28a:	2b00      	cmp	r3, #0
   2d28c:	d104      	bne.n	2d298 <dir_find+0x88>
   2d28e:	2317      	movs	r3, #23
   2d290:	18fb      	adds	r3, r7, r3
   2d292:	2204      	movs	r2, #4
   2d294:	701a      	strb	r2, [r3, #0]
   2d296:	e0a5      	b.n	2d3e4 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2d298:	693b      	ldr	r3, [r7, #16]
   2d29a:	330b      	adds	r3, #11
   2d29c:	781a      	ldrb	r2, [r3, #0]
   2d29e:	230f      	movs	r3, #15
   2d2a0:	18fb      	adds	r3, r7, r3
   2d2a2:	213f      	movs	r1, #63	; 0x3f
   2d2a4:	400a      	ands	r2, r1
   2d2a6:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2d2a8:	2316      	movs	r3, #22
   2d2aa:	18fb      	adds	r3, r7, r3
   2d2ac:	781b      	ldrb	r3, [r3, #0]
   2d2ae:	2be5      	cmp	r3, #229	; 0xe5
   2d2b0:	d00a      	beq.n	2d2c8 <dir_find+0xb8>
   2d2b2:	230f      	movs	r3, #15
   2d2b4:	18fb      	adds	r3, r7, r3
   2d2b6:	781b      	ldrb	r3, [r3, #0]
   2d2b8:	2208      	movs	r2, #8
   2d2ba:	4013      	ands	r3, r2
   2d2bc:	d009      	beq.n	2d2d2 <dir_find+0xc2>
   2d2be:	230f      	movs	r3, #15
   2d2c0:	18fb      	adds	r3, r7, r3
   2d2c2:	781b      	ldrb	r3, [r3, #0]
   2d2c4:	2b0f      	cmp	r3, #15
   2d2c6:	d004      	beq.n	2d2d2 <dir_find+0xc2>
			ord = 0xFF;
   2d2c8:	2315      	movs	r3, #21
   2d2ca:	18fb      	adds	r3, r7, r3
   2d2cc:	22ff      	movs	r2, #255	; 0xff
   2d2ce:	701a      	strb	r2, [r3, #0]
   2d2d0:	e073      	b.n	2d3ba <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2d2d2:	230f      	movs	r3, #15
   2d2d4:	18fb      	adds	r3, r7, r3
   2d2d6:	781b      	ldrb	r3, [r3, #0]
   2d2d8:	2b0f      	cmp	r3, #15
   2d2da:	d145      	bne.n	2d368 <dir_find+0x158>
				if (dj->lfn) {
   2d2dc:	687b      	ldr	r3, [r7, #4]
   2d2de:	69db      	ldr	r3, [r3, #28]
   2d2e0:	2b00      	cmp	r3, #0
   2d2e2:	d100      	bne.n	2d2e6 <dir_find+0xd6>
   2d2e4:	e069      	b.n	2d3ba <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2d2e6:	2316      	movs	r3, #22
   2d2e8:	18fb      	adds	r3, r7, r3
   2d2ea:	781b      	ldrb	r3, [r3, #0]
   2d2ec:	2240      	movs	r2, #64	; 0x40
   2d2ee:	4013      	ands	r3, r2
   2d2f0:	d016      	beq.n	2d320 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2d2f2:	2314      	movs	r3, #20
   2d2f4:	18fb      	adds	r3, r7, r3
   2d2f6:	693a      	ldr	r2, [r7, #16]
   2d2f8:	7b52      	ldrb	r2, [r2, #13]
   2d2fa:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2d2fc:	2316      	movs	r3, #22
   2d2fe:	18fb      	adds	r3, r7, r3
   2d300:	2216      	movs	r2, #22
   2d302:	18ba      	adds	r2, r7, r2
   2d304:	7812      	ldrb	r2, [r2, #0]
   2d306:	2140      	movs	r1, #64	; 0x40
   2d308:	438a      	bics	r2, r1
   2d30a:	701a      	strb	r2, [r3, #0]
   2d30c:	2315      	movs	r3, #21
   2d30e:	18fb      	adds	r3, r7, r3
   2d310:	2216      	movs	r2, #22
   2d312:	18ba      	adds	r2, r7, r2
   2d314:	7812      	ldrb	r2, [r2, #0]
   2d316:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2d318:	687b      	ldr	r3, [r7, #4]
   2d31a:	88da      	ldrh	r2, [r3, #6]
   2d31c:	687b      	ldr	r3, [r7, #4]
   2d31e:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2d320:	2316      	movs	r3, #22
   2d322:	18fa      	adds	r2, r7, r3
   2d324:	2315      	movs	r3, #21
   2d326:	18fb      	adds	r3, r7, r3
   2d328:	7812      	ldrb	r2, [r2, #0]
   2d32a:	781b      	ldrb	r3, [r3, #0]
   2d32c:	429a      	cmp	r2, r3
   2d32e:	d116      	bne.n	2d35e <dir_find+0x14e>
   2d330:	693b      	ldr	r3, [r7, #16]
   2d332:	330d      	adds	r3, #13
   2d334:	781b      	ldrb	r3, [r3, #0]
   2d336:	2214      	movs	r2, #20
   2d338:	18ba      	adds	r2, r7, r2
   2d33a:	7812      	ldrb	r2, [r2, #0]
   2d33c:	429a      	cmp	r2, r3
   2d33e:	d10e      	bne.n	2d35e <dir_find+0x14e>
   2d340:	687b      	ldr	r3, [r7, #4]
   2d342:	69db      	ldr	r3, [r3, #28]
   2d344:	693a      	ldr	r2, [r7, #16]
   2d346:	0011      	movs	r1, r2
   2d348:	0018      	movs	r0, r3
   2d34a:	4b2c      	ldr	r3, [pc, #176]	; (2d3fc <dir_find+0x1ec>)
   2d34c:	4798      	blx	r3
   2d34e:	1e03      	subs	r3, r0, #0
   2d350:	d005      	beq.n	2d35e <dir_find+0x14e>
   2d352:	2315      	movs	r3, #21
   2d354:	18fb      	adds	r3, r7, r3
   2d356:	781b      	ldrb	r3, [r3, #0]
   2d358:	3b01      	subs	r3, #1
   2d35a:	b2da      	uxtb	r2, r3
   2d35c:	e000      	b.n	2d360 <dir_find+0x150>
   2d35e:	22ff      	movs	r2, #255	; 0xff
   2d360:	2315      	movs	r3, #21
   2d362:	18fb      	adds	r3, r7, r3
   2d364:	701a      	strb	r2, [r3, #0]
   2d366:	e028      	b.n	2d3ba <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d368:	2315      	movs	r3, #21
   2d36a:	18fb      	adds	r3, r7, r3
   2d36c:	781b      	ldrb	r3, [r3, #0]
   2d36e:	2b00      	cmp	r3, #0
   2d370:	d10a      	bne.n	2d388 <dir_find+0x178>
   2d372:	693b      	ldr	r3, [r7, #16]
   2d374:	0018      	movs	r0, r3
   2d376:	4b22      	ldr	r3, [pc, #136]	; (2d400 <dir_find+0x1f0>)
   2d378:	4798      	blx	r3
   2d37a:	0003      	movs	r3, r0
   2d37c:	001a      	movs	r2, r3
   2d37e:	2314      	movs	r3, #20
   2d380:	18fb      	adds	r3, r7, r3
   2d382:	781b      	ldrb	r3, [r3, #0]
   2d384:	4293      	cmp	r3, r2
   2d386:	d02a      	beq.n	2d3de <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2d388:	2315      	movs	r3, #21
   2d38a:	18fb      	adds	r3, r7, r3
   2d38c:	22ff      	movs	r2, #255	; 0xff
   2d38e:	701a      	strb	r2, [r3, #0]
   2d390:	687b      	ldr	r3, [r7, #4]
   2d392:	2201      	movs	r2, #1
   2d394:	4252      	negs	r2, r2
   2d396:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d398:	687b      	ldr	r3, [r7, #4]
   2d39a:	699b      	ldr	r3, [r3, #24]
   2d39c:	330b      	adds	r3, #11
   2d39e:	781b      	ldrb	r3, [r3, #0]
   2d3a0:	001a      	movs	r2, r3
   2d3a2:	2301      	movs	r3, #1
   2d3a4:	4013      	ands	r3, r2
   2d3a6:	d108      	bne.n	2d3ba <dir_find+0x1aa>
   2d3a8:	687b      	ldr	r3, [r7, #4]
   2d3aa:	6999      	ldr	r1, [r3, #24]
   2d3ac:	693b      	ldr	r3, [r7, #16]
   2d3ae:	220b      	movs	r2, #11
   2d3b0:	0018      	movs	r0, r3
   2d3b2:	4b14      	ldr	r3, [pc, #80]	; (2d404 <dir_find+0x1f4>)
   2d3b4:	4798      	blx	r3
   2d3b6:	1e03      	subs	r3, r0, #0
   2d3b8:	d013      	beq.n	2d3e2 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2d3ba:	2317      	movs	r3, #23
   2d3bc:	18fc      	adds	r4, r7, r3
   2d3be:	687b      	ldr	r3, [r7, #4]
   2d3c0:	2100      	movs	r1, #0
   2d3c2:	0018      	movs	r0, r3
   2d3c4:	4b10      	ldr	r3, [pc, #64]	; (2d408 <dir_find+0x1f8>)
   2d3c6:	4798      	blx	r3
   2d3c8:	0003      	movs	r3, r0
   2d3ca:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d3cc:	2317      	movs	r3, #23
   2d3ce:	18fb      	adds	r3, r7, r3
   2d3d0:	781b      	ldrb	r3, [r3, #0]
   2d3d2:	2b00      	cmp	r3, #0
   2d3d4:	d100      	bne.n	2d3d8 <dir_find+0x1c8>
   2d3d6:	e73b      	b.n	2d250 <dir_find+0x40>
   2d3d8:	e004      	b.n	2d3e4 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2d3da:	46c0      	nop			; (mov r8, r8)
   2d3dc:	e002      	b.n	2d3e4 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d3de:	46c0      	nop			; (mov r8, r8)
   2d3e0:	e000      	b.n	2d3e4 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d3e2:	46c0      	nop			; (mov r8, r8)

	return res;
   2d3e4:	2317      	movs	r3, #23
   2d3e6:	18fb      	adds	r3, r7, r3
   2d3e8:	781b      	ldrb	r3, [r3, #0]
}
   2d3ea:	0018      	movs	r0, r3
   2d3ec:	46bd      	mov	sp, r7
   2d3ee:	b007      	add	sp, #28
   2d3f0:	bd90      	pop	{r4, r7, pc}
   2d3f2:	46c0      	nop			; (mov r8, r8)
   2d3f4:	0002cb8d 	.word	0x0002cb8d
   2d3f8:	0002c349 	.word	0x0002c349
   2d3fc:	0002cead 	.word	0x0002cead
   2d400:	0002d1c1 	.word	0x0002d1c1
   2d404:	0002c2cd 	.word	0x0002c2cd
   2d408:	0002ccbd 	.word	0x0002ccbd

0002d40c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2d40c:	b590      	push	{r4, r7, lr}
   2d40e:	b08d      	sub	sp, #52	; 0x34
   2d410:	af00      	add	r7, sp, #0
   2d412:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2d414:	687b      	ldr	r3, [r7, #4]
   2d416:	699b      	ldr	r3, [r3, #24]
   2d418:	627b      	str	r3, [r7, #36]	; 0x24
   2d41a:	687b      	ldr	r3, [r7, #4]
   2d41c:	69db      	ldr	r3, [r3, #28]
   2d41e:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2d420:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d422:	230c      	movs	r3, #12
   2d424:	18fb      	adds	r3, r7, r3
   2d426:	220c      	movs	r2, #12
   2d428:	0018      	movs	r0, r3
   2d42a:	4bc8      	ldr	r3, [pc, #800]	; (2d74c <dir_register+0x340>)
   2d42c:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2d42e:	230c      	movs	r3, #12
   2d430:	18fb      	adds	r3, r7, r3
   2d432:	7adb      	ldrb	r3, [r3, #11]
   2d434:	001a      	movs	r2, r3
   2d436:	2301      	movs	r3, #1
   2d438:	4013      	ands	r3, r2
   2d43a:	d048      	beq.n	2d4ce <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2d43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d43e:	330b      	adds	r3, #11
   2d440:	2200      	movs	r2, #0
   2d442:	701a      	strb	r2, [r3, #0]
   2d444:	687b      	ldr	r3, [r7, #4]
   2d446:	2200      	movs	r2, #0
   2d448:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2d44a:	232c      	movs	r3, #44	; 0x2c
   2d44c:	18fb      	adds	r3, r7, r3
   2d44e:	2201      	movs	r2, #1
   2d450:	801a      	strh	r2, [r3, #0]
   2d452:	e01c      	b.n	2d48e <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2d454:	232c      	movs	r3, #44	; 0x2c
   2d456:	18fb      	adds	r3, r7, r3
   2d458:	881b      	ldrh	r3, [r3, #0]
   2d45a:	6a3a      	ldr	r2, [r7, #32]
   2d45c:	210c      	movs	r1, #12
   2d45e:	1879      	adds	r1, r7, r1
   2d460:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2d462:	4cbb      	ldr	r4, [pc, #748]	; (2d750 <dir_register+0x344>)
   2d464:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2d466:	232f      	movs	r3, #47	; 0x2f
   2d468:	18fc      	adds	r4, r7, r3
   2d46a:	687b      	ldr	r3, [r7, #4]
   2d46c:	0018      	movs	r0, r3
   2d46e:	4bb9      	ldr	r3, [pc, #740]	; (2d754 <dir_register+0x348>)
   2d470:	4798      	blx	r3
   2d472:	0003      	movs	r3, r0
   2d474:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2d476:	232f      	movs	r3, #47	; 0x2f
   2d478:	18fb      	adds	r3, r7, r3
   2d47a:	781b      	ldrb	r3, [r3, #0]
   2d47c:	2b00      	cmp	r3, #0
   2d47e:	d10c      	bne.n	2d49a <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2d480:	232c      	movs	r3, #44	; 0x2c
   2d482:	18fb      	adds	r3, r7, r3
   2d484:	881a      	ldrh	r2, [r3, #0]
   2d486:	232c      	movs	r3, #44	; 0x2c
   2d488:	18fb      	adds	r3, r7, r3
   2d48a:	3201      	adds	r2, #1
   2d48c:	801a      	strh	r2, [r3, #0]
   2d48e:	232c      	movs	r3, #44	; 0x2c
   2d490:	18fb      	adds	r3, r7, r3
   2d492:	881b      	ldrh	r3, [r3, #0]
   2d494:	2b63      	cmp	r3, #99	; 0x63
   2d496:	d9dd      	bls.n	2d454 <dir_register+0x48>
   2d498:	e000      	b.n	2d49c <dir_register+0x90>
			if (res != FR_OK) break;
   2d49a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2d49c:	232c      	movs	r3, #44	; 0x2c
   2d49e:	18fb      	adds	r3, r7, r3
   2d4a0:	881b      	ldrh	r3, [r3, #0]
   2d4a2:	2b64      	cmp	r3, #100	; 0x64
   2d4a4:	d101      	bne.n	2d4aa <dir_register+0x9e>
   2d4a6:	2307      	movs	r3, #7
   2d4a8:	e14c      	b.n	2d744 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2d4aa:	232f      	movs	r3, #47	; 0x2f
   2d4ac:	18fb      	adds	r3, r7, r3
   2d4ae:	781b      	ldrb	r3, [r3, #0]
   2d4b0:	2b04      	cmp	r3, #4
   2d4b2:	d003      	beq.n	2d4bc <dir_register+0xb0>
   2d4b4:	232f      	movs	r3, #47	; 0x2f
   2d4b6:	18fb      	adds	r3, r7, r3
   2d4b8:	781b      	ldrb	r3, [r3, #0]
   2d4ba:	e143      	b.n	2d744 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d4be:	330b      	adds	r3, #11
   2d4c0:	220c      	movs	r2, #12
   2d4c2:	18ba      	adds	r2, r7, r2
   2d4c4:	7ad2      	ldrb	r2, [r2, #11]
   2d4c6:	701a      	strb	r2, [r3, #0]
   2d4c8:	687b      	ldr	r3, [r7, #4]
   2d4ca:	6a3a      	ldr	r2, [r7, #32]
   2d4cc:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2d4ce:	230c      	movs	r3, #12
   2d4d0:	18fb      	adds	r3, r7, r3
   2d4d2:	7adb      	ldrb	r3, [r3, #11]
   2d4d4:	001a      	movs	r2, r3
   2d4d6:	2302      	movs	r3, #2
   2d4d8:	4013      	ands	r3, r2
   2d4da:	d023      	beq.n	2d524 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2d4dc:	232a      	movs	r3, #42	; 0x2a
   2d4de:	18fb      	adds	r3, r7, r3
   2d4e0:	2200      	movs	r2, #0
   2d4e2:	801a      	strh	r2, [r3, #0]
   2d4e4:	e006      	b.n	2d4f4 <dir_register+0xe8>
   2d4e6:	232a      	movs	r3, #42	; 0x2a
   2d4e8:	18fb      	adds	r3, r7, r3
   2d4ea:	881a      	ldrh	r2, [r3, #0]
   2d4ec:	232a      	movs	r3, #42	; 0x2a
   2d4ee:	18fb      	adds	r3, r7, r3
   2d4f0:	3201      	adds	r2, #1
   2d4f2:	801a      	strh	r2, [r3, #0]
   2d4f4:	232a      	movs	r3, #42	; 0x2a
   2d4f6:	18fb      	adds	r3, r7, r3
   2d4f8:	881b      	ldrh	r3, [r3, #0]
   2d4fa:	005b      	lsls	r3, r3, #1
   2d4fc:	6a3a      	ldr	r2, [r7, #32]
   2d4fe:	18d3      	adds	r3, r2, r3
   2d500:	881b      	ldrh	r3, [r3, #0]
   2d502:	2b00      	cmp	r3, #0
   2d504:	d1ef      	bne.n	2d4e6 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2d506:	232a      	movs	r3, #42	; 0x2a
   2d508:	18fb      	adds	r3, r7, r3
   2d50a:	881b      	ldrh	r3, [r3, #0]
   2d50c:	3319      	adds	r3, #25
   2d50e:	001a      	movs	r2, r3
   2d510:	4b91      	ldr	r3, [pc, #580]	; (2d758 <dir_register+0x34c>)
   2d512:	210d      	movs	r1, #13
   2d514:	0010      	movs	r0, r2
   2d516:	4798      	blx	r3
   2d518:	0003      	movs	r3, r0
   2d51a:	001a      	movs	r2, r3
   2d51c:	232a      	movs	r3, #42	; 0x2a
   2d51e:	18fb      	adds	r3, r7, r3
   2d520:	801a      	strh	r2, [r3, #0]
   2d522:	e003      	b.n	2d52c <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2d524:	232a      	movs	r3, #42	; 0x2a
   2d526:	18fb      	adds	r3, r7, r3
   2d528:	2201      	movs	r2, #1
   2d52a:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2d52c:	232f      	movs	r3, #47	; 0x2f
   2d52e:	18fc      	adds	r4, r7, r3
   2d530:	687b      	ldr	r3, [r7, #4]
   2d532:	2100      	movs	r1, #0
   2d534:	0018      	movs	r0, r3
   2d536:	4b89      	ldr	r3, [pc, #548]	; (2d75c <dir_register+0x350>)
   2d538:	4798      	blx	r3
   2d53a:	0003      	movs	r3, r0
   2d53c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d53e:	232f      	movs	r3, #47	; 0x2f
   2d540:	18fb      	adds	r3, r7, r3
   2d542:	781b      	ldrb	r3, [r3, #0]
   2d544:	2b00      	cmp	r3, #0
   2d546:	d003      	beq.n	2d550 <dir_register+0x144>
   2d548:	232f      	movs	r3, #47	; 0x2f
   2d54a:	18fb      	adds	r3, r7, r3
   2d54c:	781b      	ldrb	r3, [r3, #0]
   2d54e:	e0f9      	b.n	2d744 <dir_register+0x338>
	n = is = 0;
   2d550:	2328      	movs	r3, #40	; 0x28
   2d552:	18fb      	adds	r3, r7, r3
   2d554:	2200      	movs	r2, #0
   2d556:	801a      	strh	r2, [r3, #0]
   2d558:	232c      	movs	r3, #44	; 0x2c
   2d55a:	18fb      	adds	r3, r7, r3
   2d55c:	2228      	movs	r2, #40	; 0x28
   2d55e:	18ba      	adds	r2, r7, r2
   2d560:	8812      	ldrh	r2, [r2, #0]
   2d562:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2d564:	687b      	ldr	r3, [r7, #4]
   2d566:	681a      	ldr	r2, [r3, #0]
   2d568:	687b      	ldr	r3, [r7, #4]
   2d56a:	691b      	ldr	r3, [r3, #16]
   2d56c:	212f      	movs	r1, #47	; 0x2f
   2d56e:	187c      	adds	r4, r7, r1
   2d570:	0019      	movs	r1, r3
   2d572:	0010      	movs	r0, r2
   2d574:	4b7a      	ldr	r3, [pc, #488]	; (2d760 <dir_register+0x354>)
   2d576:	4798      	blx	r3
   2d578:	0003      	movs	r3, r0
   2d57a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d57c:	232f      	movs	r3, #47	; 0x2f
   2d57e:	18fb      	adds	r3, r7, r3
   2d580:	781b      	ldrb	r3, [r3, #0]
   2d582:	2b00      	cmp	r3, #0
   2d584:	d13c      	bne.n	2d600 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2d586:	687b      	ldr	r3, [r7, #4]
   2d588:	695a      	ldr	r2, [r3, #20]
   2d58a:	231f      	movs	r3, #31
   2d58c:	18fb      	adds	r3, r7, r3
   2d58e:	7812      	ldrb	r2, [r2, #0]
   2d590:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2d592:	231f      	movs	r3, #31
   2d594:	18fb      	adds	r3, r7, r3
   2d596:	781b      	ldrb	r3, [r3, #0]
   2d598:	2be5      	cmp	r3, #229	; 0xe5
   2d59a:	d004      	beq.n	2d5a6 <dir_register+0x19a>
   2d59c:	231f      	movs	r3, #31
   2d59e:	18fb      	adds	r3, r7, r3
   2d5a0:	781b      	ldrb	r3, [r3, #0]
   2d5a2:	2b00      	cmp	r3, #0
   2d5a4:	d119      	bne.n	2d5da <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2d5a6:	232c      	movs	r3, #44	; 0x2c
   2d5a8:	18fb      	adds	r3, r7, r3
   2d5aa:	881b      	ldrh	r3, [r3, #0]
   2d5ac:	2b00      	cmp	r3, #0
   2d5ae:	d104      	bne.n	2d5ba <dir_register+0x1ae>
   2d5b0:	2328      	movs	r3, #40	; 0x28
   2d5b2:	18fb      	adds	r3, r7, r3
   2d5b4:	687a      	ldr	r2, [r7, #4]
   2d5b6:	88d2      	ldrh	r2, [r2, #6]
   2d5b8:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2d5ba:	232c      	movs	r3, #44	; 0x2c
   2d5bc:	18fb      	adds	r3, r7, r3
   2d5be:	222c      	movs	r2, #44	; 0x2c
   2d5c0:	18ba      	adds	r2, r7, r2
   2d5c2:	8812      	ldrh	r2, [r2, #0]
   2d5c4:	3201      	adds	r2, #1
   2d5c6:	801a      	strh	r2, [r3, #0]
   2d5c8:	232c      	movs	r3, #44	; 0x2c
   2d5ca:	18fa      	adds	r2, r7, r3
   2d5cc:	232a      	movs	r3, #42	; 0x2a
   2d5ce:	18fb      	adds	r3, r7, r3
   2d5d0:	8812      	ldrh	r2, [r2, #0]
   2d5d2:	881b      	ldrh	r3, [r3, #0]
   2d5d4:	429a      	cmp	r2, r3
   2d5d6:	d104      	bne.n	2d5e2 <dir_register+0x1d6>
   2d5d8:	e013      	b.n	2d602 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2d5da:	232c      	movs	r3, #44	; 0x2c
   2d5dc:	18fb      	adds	r3, r7, r3
   2d5de:	2200      	movs	r2, #0
   2d5e0:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2d5e2:	232f      	movs	r3, #47	; 0x2f
   2d5e4:	18fc      	adds	r4, r7, r3
   2d5e6:	687b      	ldr	r3, [r7, #4]
   2d5e8:	2101      	movs	r1, #1
   2d5ea:	0018      	movs	r0, r3
   2d5ec:	4b5d      	ldr	r3, [pc, #372]	; (2d764 <dir_register+0x358>)
   2d5ee:	4798      	blx	r3
   2d5f0:	0003      	movs	r3, r0
   2d5f2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d5f4:	232f      	movs	r3, #47	; 0x2f
   2d5f6:	18fb      	adds	r3, r7, r3
   2d5f8:	781b      	ldrb	r3, [r3, #0]
   2d5fa:	2b00      	cmp	r3, #0
   2d5fc:	d0b2      	beq.n	2d564 <dir_register+0x158>
   2d5fe:	e000      	b.n	2d602 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2d600:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2d602:	232f      	movs	r3, #47	; 0x2f
   2d604:	18fb      	adds	r3, r7, r3
   2d606:	781b      	ldrb	r3, [r3, #0]
   2d608:	2b00      	cmp	r3, #0
   2d60a:	d163      	bne.n	2d6d4 <dir_register+0x2c8>
   2d60c:	232a      	movs	r3, #42	; 0x2a
   2d60e:	18fb      	adds	r3, r7, r3
   2d610:	881b      	ldrh	r3, [r3, #0]
   2d612:	2b01      	cmp	r3, #1
   2d614:	d95e      	bls.n	2d6d4 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2d616:	232f      	movs	r3, #47	; 0x2f
   2d618:	18fc      	adds	r4, r7, r3
   2d61a:	2328      	movs	r3, #40	; 0x28
   2d61c:	18fb      	adds	r3, r7, r3
   2d61e:	881a      	ldrh	r2, [r3, #0]
   2d620:	687b      	ldr	r3, [r7, #4]
   2d622:	0011      	movs	r1, r2
   2d624:	0018      	movs	r0, r3
   2d626:	4b4d      	ldr	r3, [pc, #308]	; (2d75c <dir_register+0x350>)
   2d628:	4798      	blx	r3
   2d62a:	0003      	movs	r3, r0
   2d62c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d62e:	232f      	movs	r3, #47	; 0x2f
   2d630:	18fb      	adds	r3, r7, r3
   2d632:	781b      	ldrb	r3, [r3, #0]
   2d634:	2b00      	cmp	r3, #0
   2d636:	d14d      	bne.n	2d6d4 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2d638:	687b      	ldr	r3, [r7, #4]
   2d63a:	699b      	ldr	r3, [r3, #24]
   2d63c:	221e      	movs	r2, #30
   2d63e:	18bc      	adds	r4, r7, r2
   2d640:	0018      	movs	r0, r3
   2d642:	4b49      	ldr	r3, [pc, #292]	; (2d768 <dir_register+0x35c>)
   2d644:	4798      	blx	r3
   2d646:	0003      	movs	r3, r0
   2d648:	7023      	strb	r3, [r4, #0]
			ne--;
   2d64a:	232a      	movs	r3, #42	; 0x2a
   2d64c:	18fb      	adds	r3, r7, r3
   2d64e:	881a      	ldrh	r2, [r3, #0]
   2d650:	232a      	movs	r3, #42	; 0x2a
   2d652:	18fb      	adds	r3, r7, r3
   2d654:	3a01      	subs	r2, #1
   2d656:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2d658:	687b      	ldr	r3, [r7, #4]
   2d65a:	681a      	ldr	r2, [r3, #0]
   2d65c:	687b      	ldr	r3, [r7, #4]
   2d65e:	691b      	ldr	r3, [r3, #16]
   2d660:	212f      	movs	r1, #47	; 0x2f
   2d662:	187c      	adds	r4, r7, r1
   2d664:	0019      	movs	r1, r3
   2d666:	0010      	movs	r0, r2
   2d668:	4b3d      	ldr	r3, [pc, #244]	; (2d760 <dir_register+0x354>)
   2d66a:	4798      	blx	r3
   2d66c:	0003      	movs	r3, r0
   2d66e:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2d670:	232f      	movs	r3, #47	; 0x2f
   2d672:	18fb      	adds	r3, r7, r3
   2d674:	781b      	ldrb	r3, [r3, #0]
   2d676:	2b00      	cmp	r3, #0
   2d678:	d12b      	bne.n	2d6d2 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2d67a:	687b      	ldr	r3, [r7, #4]
   2d67c:	69d8      	ldr	r0, [r3, #28]
   2d67e:	687b      	ldr	r3, [r7, #4]
   2d680:	6959      	ldr	r1, [r3, #20]
   2d682:	232a      	movs	r3, #42	; 0x2a
   2d684:	18fb      	adds	r3, r7, r3
   2d686:	881b      	ldrh	r3, [r3, #0]
   2d688:	b2da      	uxtb	r2, r3
   2d68a:	231e      	movs	r3, #30
   2d68c:	18fb      	adds	r3, r7, r3
   2d68e:	781b      	ldrb	r3, [r3, #0]
   2d690:	4c36      	ldr	r4, [pc, #216]	; (2d76c <dir_register+0x360>)
   2d692:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2d694:	687b      	ldr	r3, [r7, #4]
   2d696:	681b      	ldr	r3, [r3, #0]
   2d698:	2201      	movs	r2, #1
   2d69a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2d69c:	232f      	movs	r3, #47	; 0x2f
   2d69e:	18fc      	adds	r4, r7, r3
   2d6a0:	687b      	ldr	r3, [r7, #4]
   2d6a2:	2100      	movs	r1, #0
   2d6a4:	0018      	movs	r0, r3
   2d6a6:	4b2f      	ldr	r3, [pc, #188]	; (2d764 <dir_register+0x358>)
   2d6a8:	4798      	blx	r3
   2d6aa:	0003      	movs	r3, r0
   2d6ac:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2d6ae:	232f      	movs	r3, #47	; 0x2f
   2d6b0:	18fb      	adds	r3, r7, r3
   2d6b2:	781b      	ldrb	r3, [r3, #0]
   2d6b4:	2b00      	cmp	r3, #0
   2d6b6:	d10d      	bne.n	2d6d4 <dir_register+0x2c8>
   2d6b8:	232a      	movs	r3, #42	; 0x2a
   2d6ba:	18fb      	adds	r3, r7, r3
   2d6bc:	222a      	movs	r2, #42	; 0x2a
   2d6be:	18ba      	adds	r2, r7, r2
   2d6c0:	8812      	ldrh	r2, [r2, #0]
   2d6c2:	3a01      	subs	r2, #1
   2d6c4:	801a      	strh	r2, [r3, #0]
   2d6c6:	232a      	movs	r3, #42	; 0x2a
   2d6c8:	18fb      	adds	r3, r7, r3
   2d6ca:	881b      	ldrh	r3, [r3, #0]
   2d6cc:	2b00      	cmp	r3, #0
   2d6ce:	d1c3      	bne.n	2d658 <dir_register+0x24c>
   2d6d0:	e000      	b.n	2d6d4 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2d6d2:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2d6d4:	232f      	movs	r3, #47	; 0x2f
   2d6d6:	18fb      	adds	r3, r7, r3
   2d6d8:	781b      	ldrb	r3, [r3, #0]
   2d6da:	2b00      	cmp	r3, #0
   2d6dc:	d12f      	bne.n	2d73e <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2d6de:	687b      	ldr	r3, [r7, #4]
   2d6e0:	681a      	ldr	r2, [r3, #0]
   2d6e2:	687b      	ldr	r3, [r7, #4]
   2d6e4:	691b      	ldr	r3, [r3, #16]
   2d6e6:	212f      	movs	r1, #47	; 0x2f
   2d6e8:	187c      	adds	r4, r7, r1
   2d6ea:	0019      	movs	r1, r3
   2d6ec:	0010      	movs	r0, r2
   2d6ee:	4b1c      	ldr	r3, [pc, #112]	; (2d760 <dir_register+0x354>)
   2d6f0:	4798      	blx	r3
   2d6f2:	0003      	movs	r3, r0
   2d6f4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d6f6:	232f      	movs	r3, #47	; 0x2f
   2d6f8:	18fb      	adds	r3, r7, r3
   2d6fa:	781b      	ldrb	r3, [r3, #0]
   2d6fc:	2b00      	cmp	r3, #0
   2d6fe:	d11e      	bne.n	2d73e <dir_register+0x332>
			dir = dj->dir;
   2d700:	687b      	ldr	r3, [r7, #4]
   2d702:	695b      	ldr	r3, [r3, #20]
   2d704:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2d706:	69bb      	ldr	r3, [r7, #24]
   2d708:	2220      	movs	r2, #32
   2d70a:	2100      	movs	r1, #0
   2d70c:	0018      	movs	r0, r3
   2d70e:	4b18      	ldr	r3, [pc, #96]	; (2d770 <dir_register+0x364>)
   2d710:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2d712:	687b      	ldr	r3, [r7, #4]
   2d714:	6999      	ldr	r1, [r3, #24]
   2d716:	69bb      	ldr	r3, [r7, #24]
   2d718:	220b      	movs	r2, #11
   2d71a:	0018      	movs	r0, r3
   2d71c:	4b0b      	ldr	r3, [pc, #44]	; (2d74c <dir_register+0x340>)
   2d71e:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2d720:	69bb      	ldr	r3, [r7, #24]
   2d722:	330c      	adds	r3, #12
   2d724:	001a      	movs	r2, r3
   2d726:	687b      	ldr	r3, [r7, #4]
   2d728:	699b      	ldr	r3, [r3, #24]
   2d72a:	330b      	adds	r3, #11
   2d72c:	781b      	ldrb	r3, [r3, #0]
   2d72e:	2118      	movs	r1, #24
   2d730:	400b      	ands	r3, r1
   2d732:	b2db      	uxtb	r3, r3
   2d734:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2d736:	687b      	ldr	r3, [r7, #4]
   2d738:	681b      	ldr	r3, [r3, #0]
   2d73a:	2201      	movs	r2, #1
   2d73c:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2d73e:	232f      	movs	r3, #47	; 0x2f
   2d740:	18fb      	adds	r3, r7, r3
   2d742:	781b      	ldrb	r3, [r3, #0]
}
   2d744:	0018      	movs	r0, r3
   2d746:	46bd      	mov	sp, r7
   2d748:	b00d      	add	sp, #52	; 0x34
   2d74a:	bd90      	pop	{r4, r7, pc}
   2d74c:	0002c265 	.word	0x0002c265
   2d750:	0002d0c1 	.word	0x0002d0c1
   2d754:	0002d211 	.word	0x0002d211
   2d758:	0003367d 	.word	0x0003367d
   2d75c:	0002cb8d 	.word	0x0002cb8d
   2d760:	0002c349 	.word	0x0002c349
   2d764:	0002ccbd 	.word	0x0002ccbd
   2d768:	0002d1c1 	.word	0x0002d1c1
   2d76c:	0002cfb1 	.word	0x0002cfb1
   2d770:	0002c29d 	.word	0x0002c29d

0002d774 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2d774:	b590      	push	{r4, r7, lr}
   2d776:	b08b      	sub	sp, #44	; 0x2c
   2d778:	af00      	add	r7, sp, #0
   2d77a:	6078      	str	r0, [r7, #4]
   2d77c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2d77e:	683b      	ldr	r3, [r7, #0]
   2d780:	681b      	ldr	r3, [r3, #0]
   2d782:	613b      	str	r3, [r7, #16]
   2d784:	e002      	b.n	2d78c <create_name+0x18>
   2d786:	693b      	ldr	r3, [r7, #16]
   2d788:	3301      	adds	r3, #1
   2d78a:	613b      	str	r3, [r7, #16]
   2d78c:	693b      	ldr	r3, [r7, #16]
   2d78e:	781b      	ldrb	r3, [r3, #0]
   2d790:	2b2f      	cmp	r3, #47	; 0x2f
   2d792:	d0f8      	beq.n	2d786 <create_name+0x12>
   2d794:	693b      	ldr	r3, [r7, #16]
   2d796:	781b      	ldrb	r3, [r3, #0]
   2d798:	2b5c      	cmp	r3, #92	; 0x5c
   2d79a:	d0f4      	beq.n	2d786 <create_name+0x12>
	lfn = dj->lfn;
   2d79c:	687b      	ldr	r3, [r7, #4]
   2d79e:	69db      	ldr	r3, [r3, #28]
   2d7a0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2d7a2:	2300      	movs	r3, #0
   2d7a4:	617b      	str	r3, [r7, #20]
   2d7a6:	697b      	ldr	r3, [r7, #20]
   2d7a8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2d7aa:	69bb      	ldr	r3, [r7, #24]
   2d7ac:	1c5a      	adds	r2, r3, #1
   2d7ae:	61ba      	str	r2, [r7, #24]
   2d7b0:	693a      	ldr	r2, [r7, #16]
   2d7b2:	18d3      	adds	r3, r2, r3
   2d7b4:	781a      	ldrb	r2, [r3, #0]
   2d7b6:	2324      	movs	r3, #36	; 0x24
   2d7b8:	18fb      	adds	r3, r7, r3
   2d7ba:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2d7bc:	2324      	movs	r3, #36	; 0x24
   2d7be:	18fb      	adds	r3, r7, r3
   2d7c0:	881b      	ldrh	r3, [r3, #0]
   2d7c2:	2b1f      	cmp	r3, #31
   2d7c4:	d944      	bls.n	2d850 <create_name+0xdc>
   2d7c6:	2324      	movs	r3, #36	; 0x24
   2d7c8:	18fb      	adds	r3, r7, r3
   2d7ca:	881b      	ldrh	r3, [r3, #0]
   2d7cc:	2b2f      	cmp	r3, #47	; 0x2f
   2d7ce:	d03f      	beq.n	2d850 <create_name+0xdc>
   2d7d0:	2324      	movs	r3, #36	; 0x24
   2d7d2:	18fb      	adds	r3, r7, r3
   2d7d4:	881b      	ldrh	r3, [r3, #0]
   2d7d6:	2b5c      	cmp	r3, #92	; 0x5c
   2d7d8:	d03a      	beq.n	2d850 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2d7da:	697b      	ldr	r3, [r7, #20]
   2d7dc:	2bfe      	cmp	r3, #254	; 0xfe
   2d7de:	d901      	bls.n	2d7e4 <create_name+0x70>
			return FR_INVALID_NAME;
   2d7e0:	2306      	movs	r3, #6
   2d7e2:	e1e7      	b.n	2dbb4 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2d7e4:	2324      	movs	r3, #36	; 0x24
   2d7e6:	18fb      	adds	r3, r7, r3
   2d7e8:	2224      	movs	r2, #36	; 0x24
   2d7ea:	18ba      	adds	r2, r7, r2
   2d7ec:	8812      	ldrh	r2, [r2, #0]
   2d7ee:	21ff      	movs	r1, #255	; 0xff
   2d7f0:	400a      	ands	r2, r1
   2d7f2:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2d7f4:	2324      	movs	r3, #36	; 0x24
   2d7f6:	18fc      	adds	r4, r7, r3
   2d7f8:	2324      	movs	r3, #36	; 0x24
   2d7fa:	18fb      	adds	r3, r7, r3
   2d7fc:	881b      	ldrh	r3, [r3, #0]
   2d7fe:	2101      	movs	r1, #1
   2d800:	0018      	movs	r0, r3
   2d802:	4bba      	ldr	r3, [pc, #744]	; (2daec <create_name+0x378>)
   2d804:	4798      	blx	r3
   2d806:	0003      	movs	r3, r0
   2d808:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2d80a:	2324      	movs	r3, #36	; 0x24
   2d80c:	18fb      	adds	r3, r7, r3
   2d80e:	881b      	ldrh	r3, [r3, #0]
   2d810:	2b00      	cmp	r3, #0
   2d812:	d101      	bne.n	2d818 <create_name+0xa4>
   2d814:	2306      	movs	r3, #6
   2d816:	e1cd      	b.n	2dbb4 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2d818:	2324      	movs	r3, #36	; 0x24
   2d81a:	18fb      	adds	r3, r7, r3
   2d81c:	881b      	ldrh	r3, [r3, #0]
   2d81e:	2b7f      	cmp	r3, #127	; 0x7f
   2d820:	d80b      	bhi.n	2d83a <create_name+0xc6>
   2d822:	2324      	movs	r3, #36	; 0x24
   2d824:	18fb      	adds	r3, r7, r3
   2d826:	881a      	ldrh	r2, [r3, #0]
   2d828:	4bb1      	ldr	r3, [pc, #708]	; (2daf0 <create_name+0x37c>)
   2d82a:	0011      	movs	r1, r2
   2d82c:	0018      	movs	r0, r3
   2d82e:	4bb1      	ldr	r3, [pc, #708]	; (2daf4 <create_name+0x380>)
   2d830:	4798      	blx	r3
   2d832:	1e03      	subs	r3, r0, #0
   2d834:	d001      	beq.n	2d83a <create_name+0xc6>
			return FR_INVALID_NAME;
   2d836:	2306      	movs	r3, #6
   2d838:	e1bc      	b.n	2dbb4 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2d83a:	697b      	ldr	r3, [r7, #20]
   2d83c:	1c5a      	adds	r2, r3, #1
   2d83e:	617a      	str	r2, [r7, #20]
   2d840:	005b      	lsls	r3, r3, #1
   2d842:	68fa      	ldr	r2, [r7, #12]
   2d844:	18d3      	adds	r3, r2, r3
   2d846:	2224      	movs	r2, #36	; 0x24
   2d848:	18ba      	adds	r2, r7, r2
   2d84a:	8812      	ldrh	r2, [r2, #0]
   2d84c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2d84e:	e7ac      	b.n	2d7aa <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2d850:	693a      	ldr	r2, [r7, #16]
   2d852:	69bb      	ldr	r3, [r7, #24]
   2d854:	18d2      	adds	r2, r2, r3
   2d856:	683b      	ldr	r3, [r7, #0]
   2d858:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2d85a:	2324      	movs	r3, #36	; 0x24
   2d85c:	18fb      	adds	r3, r7, r3
   2d85e:	881b      	ldrh	r3, [r3, #0]
   2d860:	2b1f      	cmp	r3, #31
   2d862:	d801      	bhi.n	2d868 <create_name+0xf4>
   2d864:	2204      	movs	r2, #4
   2d866:	e000      	b.n	2d86a <create_name+0xf6>
   2d868:	2200      	movs	r2, #0
   2d86a:	2326      	movs	r3, #38	; 0x26
   2d86c:	18fb      	adds	r3, r7, r3
   2d86e:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2d870:	e017      	b.n	2d8a2 <create_name+0x12e>
		w = lfn[di-1];
   2d872:	697b      	ldr	r3, [r7, #20]
   2d874:	4aa0      	ldr	r2, [pc, #640]	; (2daf8 <create_name+0x384>)
   2d876:	4694      	mov	ip, r2
   2d878:	4463      	add	r3, ip
   2d87a:	005b      	lsls	r3, r3, #1
   2d87c:	68fa      	ldr	r2, [r7, #12]
   2d87e:	18d2      	adds	r2, r2, r3
   2d880:	2324      	movs	r3, #36	; 0x24
   2d882:	18fb      	adds	r3, r7, r3
   2d884:	8812      	ldrh	r2, [r2, #0]
   2d886:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2d888:	2324      	movs	r3, #36	; 0x24
   2d88a:	18fb      	adds	r3, r7, r3
   2d88c:	881b      	ldrh	r3, [r3, #0]
   2d88e:	2b20      	cmp	r3, #32
   2d890:	d004      	beq.n	2d89c <create_name+0x128>
   2d892:	2324      	movs	r3, #36	; 0x24
   2d894:	18fb      	adds	r3, r7, r3
   2d896:	881b      	ldrh	r3, [r3, #0]
   2d898:	2b2e      	cmp	r3, #46	; 0x2e
   2d89a:	d106      	bne.n	2d8aa <create_name+0x136>
		di--;
   2d89c:	697b      	ldr	r3, [r7, #20]
   2d89e:	3b01      	subs	r3, #1
   2d8a0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2d8a2:	697b      	ldr	r3, [r7, #20]
   2d8a4:	2b00      	cmp	r3, #0
   2d8a6:	d1e4      	bne.n	2d872 <create_name+0xfe>
   2d8a8:	e000      	b.n	2d8ac <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2d8aa:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2d8ac:	697b      	ldr	r3, [r7, #20]
   2d8ae:	2b00      	cmp	r3, #0
   2d8b0:	d101      	bne.n	2d8b6 <create_name+0x142>
   2d8b2:	2306      	movs	r3, #6
   2d8b4:	e17e      	b.n	2dbb4 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2d8b6:	697b      	ldr	r3, [r7, #20]
   2d8b8:	005b      	lsls	r3, r3, #1
   2d8ba:	68fa      	ldr	r2, [r7, #12]
   2d8bc:	18d3      	adds	r3, r2, r3
   2d8be:	2200      	movs	r2, #0
   2d8c0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2d8c2:	687b      	ldr	r3, [r7, #4]
   2d8c4:	699b      	ldr	r3, [r3, #24]
   2d8c6:	220b      	movs	r2, #11
   2d8c8:	2120      	movs	r1, #32
   2d8ca:	0018      	movs	r0, r3
   2d8cc:	4b8b      	ldr	r3, [pc, #556]	; (2dafc <create_name+0x388>)
   2d8ce:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2d8d0:	2300      	movs	r3, #0
   2d8d2:	61bb      	str	r3, [r7, #24]
   2d8d4:	e002      	b.n	2d8dc <create_name+0x168>
   2d8d6:	69bb      	ldr	r3, [r7, #24]
   2d8d8:	3301      	adds	r3, #1
   2d8da:	61bb      	str	r3, [r7, #24]
   2d8dc:	69bb      	ldr	r3, [r7, #24]
   2d8de:	005b      	lsls	r3, r3, #1
   2d8e0:	68fa      	ldr	r2, [r7, #12]
   2d8e2:	18d3      	adds	r3, r2, r3
   2d8e4:	881b      	ldrh	r3, [r3, #0]
   2d8e6:	2b20      	cmp	r3, #32
   2d8e8:	d0f5      	beq.n	2d8d6 <create_name+0x162>
   2d8ea:	69bb      	ldr	r3, [r7, #24]
   2d8ec:	005b      	lsls	r3, r3, #1
   2d8ee:	68fa      	ldr	r2, [r7, #12]
   2d8f0:	18d3      	adds	r3, r2, r3
   2d8f2:	881b      	ldrh	r3, [r3, #0]
   2d8f4:	2b2e      	cmp	r3, #46	; 0x2e
   2d8f6:	d0ee      	beq.n	2d8d6 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2d8f8:	69bb      	ldr	r3, [r7, #24]
   2d8fa:	2b00      	cmp	r3, #0
   2d8fc:	d00b      	beq.n	2d916 <create_name+0x1a2>
   2d8fe:	2326      	movs	r3, #38	; 0x26
   2d900:	18fb      	adds	r3, r7, r3
   2d902:	2226      	movs	r2, #38	; 0x26
   2d904:	18ba      	adds	r2, r7, r2
   2d906:	7812      	ldrb	r2, [r2, #0]
   2d908:	2103      	movs	r1, #3
   2d90a:	430a      	orrs	r2, r1
   2d90c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2d90e:	e002      	b.n	2d916 <create_name+0x1a2>
   2d910:	697b      	ldr	r3, [r7, #20]
   2d912:	3b01      	subs	r3, #1
   2d914:	617b      	str	r3, [r7, #20]
   2d916:	697b      	ldr	r3, [r7, #20]
   2d918:	2b00      	cmp	r3, #0
   2d91a:	d009      	beq.n	2d930 <create_name+0x1bc>
   2d91c:	697b      	ldr	r3, [r7, #20]
   2d91e:	4a76      	ldr	r2, [pc, #472]	; (2daf8 <create_name+0x384>)
   2d920:	4694      	mov	ip, r2
   2d922:	4463      	add	r3, ip
   2d924:	005b      	lsls	r3, r3, #1
   2d926:	68fa      	ldr	r2, [r7, #12]
   2d928:	18d3      	adds	r3, r2, r3
   2d92a:	881b      	ldrh	r3, [r3, #0]
   2d92c:	2b2e      	cmp	r3, #46	; 0x2e
   2d92e:	d1ef      	bne.n	2d910 <create_name+0x19c>

	b = i = 0; ni = 8;
   2d930:	2300      	movs	r3, #0
   2d932:	623b      	str	r3, [r7, #32]
   2d934:	2327      	movs	r3, #39	; 0x27
   2d936:	18fb      	adds	r3, r7, r3
   2d938:	2200      	movs	r2, #0
   2d93a:	701a      	strb	r2, [r3, #0]
   2d93c:	2308      	movs	r3, #8
   2d93e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2d940:	69bb      	ldr	r3, [r7, #24]
   2d942:	1c5a      	adds	r2, r3, #1
   2d944:	61ba      	str	r2, [r7, #24]
   2d946:	005b      	lsls	r3, r3, #1
   2d948:	68fa      	ldr	r2, [r7, #12]
   2d94a:	18d2      	adds	r2, r2, r3
   2d94c:	2324      	movs	r3, #36	; 0x24
   2d94e:	18fb      	adds	r3, r7, r3
   2d950:	8812      	ldrh	r2, [r2, #0]
   2d952:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2d954:	2324      	movs	r3, #36	; 0x24
   2d956:	18fb      	adds	r3, r7, r3
   2d958:	881b      	ldrh	r3, [r3, #0]
   2d95a:	2b00      	cmp	r3, #0
   2d95c:	d100      	bne.n	2d960 <create_name+0x1ec>
   2d95e:	e0c3      	b.n	2dae8 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2d960:	2324      	movs	r3, #36	; 0x24
   2d962:	18fb      	adds	r3, r7, r3
   2d964:	881b      	ldrh	r3, [r3, #0]
   2d966:	2b20      	cmp	r3, #32
   2d968:	d008      	beq.n	2d97c <create_name+0x208>
   2d96a:	2324      	movs	r3, #36	; 0x24
   2d96c:	18fb      	adds	r3, r7, r3
   2d96e:	881b      	ldrh	r3, [r3, #0]
   2d970:	2b2e      	cmp	r3, #46	; 0x2e
   2d972:	d10c      	bne.n	2d98e <create_name+0x21a>
   2d974:	69ba      	ldr	r2, [r7, #24]
   2d976:	697b      	ldr	r3, [r7, #20]
   2d978:	429a      	cmp	r2, r3
   2d97a:	d008      	beq.n	2d98e <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2d97c:	2326      	movs	r3, #38	; 0x26
   2d97e:	18fb      	adds	r3, r7, r3
   2d980:	2226      	movs	r2, #38	; 0x26
   2d982:	18ba      	adds	r2, r7, r2
   2d984:	7812      	ldrb	r2, [r2, #0]
   2d986:	2103      	movs	r1, #3
   2d988:	430a      	orrs	r2, r1
   2d98a:	701a      	strb	r2, [r3, #0]
   2d98c:	e0ab      	b.n	2dae6 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2d98e:	6a3a      	ldr	r2, [r7, #32]
   2d990:	69fb      	ldr	r3, [r7, #28]
   2d992:	429a      	cmp	r2, r3
   2d994:	d203      	bcs.n	2d99e <create_name+0x22a>
   2d996:	69ba      	ldr	r2, [r7, #24]
   2d998:	697b      	ldr	r3, [r7, #20]
   2d99a:	429a      	cmp	r2, r3
   2d99c:	d12a      	bne.n	2d9f4 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2d99e:	69fb      	ldr	r3, [r7, #28]
   2d9a0:	2b0b      	cmp	r3, #11
   2d9a2:	d108      	bne.n	2d9b6 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2d9a4:	2326      	movs	r3, #38	; 0x26
   2d9a6:	18fb      	adds	r3, r7, r3
   2d9a8:	2226      	movs	r2, #38	; 0x26
   2d9aa:	18ba      	adds	r2, r7, r2
   2d9ac:	7812      	ldrb	r2, [r2, #0]
   2d9ae:	2103      	movs	r1, #3
   2d9b0:	430a      	orrs	r2, r1
   2d9b2:	701a      	strb	r2, [r3, #0]
   2d9b4:	e0a9      	b.n	2db0a <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2d9b6:	69ba      	ldr	r2, [r7, #24]
   2d9b8:	697b      	ldr	r3, [r7, #20]
   2d9ba:	429a      	cmp	r2, r3
   2d9bc:	d007      	beq.n	2d9ce <create_name+0x25a>
   2d9be:	2326      	movs	r3, #38	; 0x26
   2d9c0:	18fb      	adds	r3, r7, r3
   2d9c2:	2226      	movs	r2, #38	; 0x26
   2d9c4:	18ba      	adds	r2, r7, r2
   2d9c6:	7812      	ldrb	r2, [r2, #0]
   2d9c8:	2103      	movs	r1, #3
   2d9ca:	430a      	orrs	r2, r1
   2d9cc:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2d9ce:	69ba      	ldr	r2, [r7, #24]
   2d9d0:	697b      	ldr	r3, [r7, #20]
   2d9d2:	429a      	cmp	r2, r3
   2d9d4:	d900      	bls.n	2d9d8 <create_name+0x264>
   2d9d6:	e097      	b.n	2db08 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2d9d8:	697b      	ldr	r3, [r7, #20]
   2d9da:	61bb      	str	r3, [r7, #24]
   2d9dc:	2308      	movs	r3, #8
   2d9de:	623b      	str	r3, [r7, #32]
   2d9e0:	230b      	movs	r3, #11
   2d9e2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2d9e4:	2327      	movs	r3, #39	; 0x27
   2d9e6:	18fb      	adds	r3, r7, r3
   2d9e8:	2227      	movs	r2, #39	; 0x27
   2d9ea:	18ba      	adds	r2, r7, r2
   2d9ec:	7812      	ldrb	r2, [r2, #0]
   2d9ee:	0092      	lsls	r2, r2, #2
   2d9f0:	701a      	strb	r2, [r3, #0]
   2d9f2:	e078      	b.n	2dae6 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2d9f4:	2324      	movs	r3, #36	; 0x24
   2d9f6:	18fb      	adds	r3, r7, r3
   2d9f8:	881b      	ldrh	r3, [r3, #0]
   2d9fa:	2b7f      	cmp	r3, #127	; 0x7f
   2d9fc:	d920      	bls.n	2da40 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2d9fe:	2324      	movs	r3, #36	; 0x24
   2da00:	18fc      	adds	r4, r7, r3
   2da02:	2324      	movs	r3, #36	; 0x24
   2da04:	18fb      	adds	r3, r7, r3
   2da06:	881b      	ldrh	r3, [r3, #0]
   2da08:	2100      	movs	r1, #0
   2da0a:	0018      	movs	r0, r3
   2da0c:	4b37      	ldr	r3, [pc, #220]	; (2daec <create_name+0x378>)
   2da0e:	4798      	blx	r3
   2da10:	0003      	movs	r3, r0
   2da12:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2da14:	2324      	movs	r3, #36	; 0x24
   2da16:	18fb      	adds	r3, r7, r3
   2da18:	881b      	ldrh	r3, [r3, #0]
   2da1a:	2b00      	cmp	r3, #0
   2da1c:	d008      	beq.n	2da30 <create_name+0x2bc>
   2da1e:	2324      	movs	r3, #36	; 0x24
   2da20:	18fb      	adds	r3, r7, r3
   2da22:	881b      	ldrh	r3, [r3, #0]
   2da24:	3b80      	subs	r3, #128	; 0x80
   2da26:	4a36      	ldr	r2, [pc, #216]	; (2db00 <create_name+0x38c>)
   2da28:	5cd2      	ldrb	r2, [r2, r3]
   2da2a:	2324      	movs	r3, #36	; 0x24
   2da2c:	18fb      	adds	r3, r7, r3
   2da2e:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2da30:	2326      	movs	r3, #38	; 0x26
   2da32:	18fb      	adds	r3, r7, r3
   2da34:	2226      	movs	r2, #38	; 0x26
   2da36:	18ba      	adds	r2, r7, r2
   2da38:	7812      	ldrb	r2, [r2, #0]
   2da3a:	2102      	movs	r1, #2
   2da3c:	430a      	orrs	r2, r1
   2da3e:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2da40:	2324      	movs	r3, #36	; 0x24
   2da42:	18fb      	adds	r3, r7, r3
   2da44:	881b      	ldrh	r3, [r3, #0]
   2da46:	2b00      	cmp	r3, #0
   2da48:	d009      	beq.n	2da5e <create_name+0x2ea>
   2da4a:	2324      	movs	r3, #36	; 0x24
   2da4c:	18fb      	adds	r3, r7, r3
   2da4e:	881a      	ldrh	r2, [r3, #0]
   2da50:	4b2c      	ldr	r3, [pc, #176]	; (2db04 <create_name+0x390>)
   2da52:	0011      	movs	r1, r2
   2da54:	0018      	movs	r0, r3
   2da56:	4b27      	ldr	r3, [pc, #156]	; (2daf4 <create_name+0x380>)
   2da58:	4798      	blx	r3
   2da5a:	1e03      	subs	r3, r0, #0
   2da5c:	d00c      	beq.n	2da78 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2da5e:	2324      	movs	r3, #36	; 0x24
   2da60:	18fb      	adds	r3, r7, r3
   2da62:	225f      	movs	r2, #95	; 0x5f
   2da64:	801a      	strh	r2, [r3, #0]
   2da66:	2326      	movs	r3, #38	; 0x26
   2da68:	18fb      	adds	r3, r7, r3
   2da6a:	2226      	movs	r2, #38	; 0x26
   2da6c:	18ba      	adds	r2, r7, r2
   2da6e:	7812      	ldrb	r2, [r2, #0]
   2da70:	2103      	movs	r1, #3
   2da72:	430a      	orrs	r2, r1
   2da74:	701a      	strb	r2, [r3, #0]
   2da76:	e02b      	b.n	2dad0 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2da78:	2324      	movs	r3, #36	; 0x24
   2da7a:	18fb      	adds	r3, r7, r3
   2da7c:	881b      	ldrh	r3, [r3, #0]
   2da7e:	2b40      	cmp	r3, #64	; 0x40
   2da80:	d90d      	bls.n	2da9e <create_name+0x32a>
   2da82:	2324      	movs	r3, #36	; 0x24
   2da84:	18fb      	adds	r3, r7, r3
   2da86:	881b      	ldrh	r3, [r3, #0]
   2da88:	2b5a      	cmp	r3, #90	; 0x5a
   2da8a:	d808      	bhi.n	2da9e <create_name+0x32a>
					b |= 2;
   2da8c:	2327      	movs	r3, #39	; 0x27
   2da8e:	18fb      	adds	r3, r7, r3
   2da90:	2227      	movs	r2, #39	; 0x27
   2da92:	18ba      	adds	r2, r7, r2
   2da94:	7812      	ldrb	r2, [r2, #0]
   2da96:	2102      	movs	r1, #2
   2da98:	430a      	orrs	r2, r1
   2da9a:	701a      	strb	r2, [r3, #0]
   2da9c:	e018      	b.n	2dad0 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2da9e:	2324      	movs	r3, #36	; 0x24
   2daa0:	18fb      	adds	r3, r7, r3
   2daa2:	881b      	ldrh	r3, [r3, #0]
   2daa4:	2b60      	cmp	r3, #96	; 0x60
   2daa6:	d913      	bls.n	2dad0 <create_name+0x35c>
   2daa8:	2324      	movs	r3, #36	; 0x24
   2daaa:	18fb      	adds	r3, r7, r3
   2daac:	881b      	ldrh	r3, [r3, #0]
   2daae:	2b7a      	cmp	r3, #122	; 0x7a
   2dab0:	d80e      	bhi.n	2dad0 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2dab2:	2327      	movs	r3, #39	; 0x27
   2dab4:	18fb      	adds	r3, r7, r3
   2dab6:	2227      	movs	r2, #39	; 0x27
   2dab8:	18ba      	adds	r2, r7, r2
   2daba:	7812      	ldrb	r2, [r2, #0]
   2dabc:	2101      	movs	r1, #1
   2dabe:	430a      	orrs	r2, r1
   2dac0:	701a      	strb	r2, [r3, #0]
   2dac2:	2324      	movs	r3, #36	; 0x24
   2dac4:	18fb      	adds	r3, r7, r3
   2dac6:	2224      	movs	r2, #36	; 0x24
   2dac8:	18ba      	adds	r2, r7, r2
   2daca:	8812      	ldrh	r2, [r2, #0]
   2dacc:	3a20      	subs	r2, #32
   2dace:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2dad0:	687b      	ldr	r3, [r7, #4]
   2dad2:	699a      	ldr	r2, [r3, #24]
   2dad4:	6a3b      	ldr	r3, [r7, #32]
   2dad6:	1c59      	adds	r1, r3, #1
   2dad8:	6239      	str	r1, [r7, #32]
   2dada:	18d3      	adds	r3, r2, r3
   2dadc:	2224      	movs	r2, #36	; 0x24
   2dade:	18ba      	adds	r2, r7, r2
   2dae0:	8812      	ldrh	r2, [r2, #0]
   2dae2:	b2d2      	uxtb	r2, r2
   2dae4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2dae6:	e72b      	b.n	2d940 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2dae8:	46c0      	nop			; (mov r8, r8)
   2daea:	e00e      	b.n	2db0a <create_name+0x396>
   2daec:	0002eead 	.word	0x0002eead
   2daf0:	0003a128 	.word	0x0003a128
   2daf4:	0002c317 	.word	0x0002c317
   2daf8:	7fffffff 	.word	0x7fffffff
   2dafc:	0002c29d 	.word	0x0002c29d
   2db00:	0003a170 	.word	0x0003a170
   2db04:	0003a134 	.word	0x0003a134
			if (si > di) break;			/* No extension */
   2db08:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2db0a:	687b      	ldr	r3, [r7, #4]
   2db0c:	699b      	ldr	r3, [r3, #24]
   2db0e:	781b      	ldrb	r3, [r3, #0]
   2db10:	2be5      	cmp	r3, #229	; 0xe5
   2db12:	d103      	bne.n	2db1c <create_name+0x3a8>
   2db14:	687b      	ldr	r3, [r7, #4]
   2db16:	699b      	ldr	r3, [r3, #24]
   2db18:	2205      	movs	r2, #5
   2db1a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2db1c:	69fb      	ldr	r3, [r7, #28]
   2db1e:	2b08      	cmp	r3, #8
   2db20:	d106      	bne.n	2db30 <create_name+0x3bc>
   2db22:	2327      	movs	r3, #39	; 0x27
   2db24:	18fb      	adds	r3, r7, r3
   2db26:	2227      	movs	r2, #39	; 0x27
   2db28:	18ba      	adds	r2, r7, r2
   2db2a:	7812      	ldrb	r2, [r2, #0]
   2db2c:	0092      	lsls	r2, r2, #2
   2db2e:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2db30:	2327      	movs	r3, #39	; 0x27
   2db32:	18fb      	adds	r3, r7, r3
   2db34:	781b      	ldrb	r3, [r3, #0]
   2db36:	220c      	movs	r2, #12
   2db38:	4013      	ands	r3, r2
   2db3a:	2b0c      	cmp	r3, #12
   2db3c:	d006      	beq.n	2db4c <create_name+0x3d8>
   2db3e:	2327      	movs	r3, #39	; 0x27
   2db40:	18fb      	adds	r3, r7, r3
   2db42:	781b      	ldrb	r3, [r3, #0]
   2db44:	2203      	movs	r2, #3
   2db46:	4013      	ands	r3, r2
   2db48:	2b03      	cmp	r3, #3
   2db4a:	d107      	bne.n	2db5c <create_name+0x3e8>
		cf |= NS_LFN;
   2db4c:	2326      	movs	r3, #38	; 0x26
   2db4e:	18fb      	adds	r3, r7, r3
   2db50:	2226      	movs	r2, #38	; 0x26
   2db52:	18ba      	adds	r2, r7, r2
   2db54:	7812      	ldrb	r2, [r2, #0]
   2db56:	2102      	movs	r1, #2
   2db58:	430a      	orrs	r2, r1
   2db5a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2db5c:	2326      	movs	r3, #38	; 0x26
   2db5e:	18fb      	adds	r3, r7, r3
   2db60:	781b      	ldrb	r3, [r3, #0]
   2db62:	2202      	movs	r2, #2
   2db64:	4013      	ands	r3, r2
   2db66:	d11d      	bne.n	2dba4 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2db68:	2327      	movs	r3, #39	; 0x27
   2db6a:	18fb      	adds	r3, r7, r3
   2db6c:	781b      	ldrb	r3, [r3, #0]
   2db6e:	2203      	movs	r2, #3
   2db70:	4013      	ands	r3, r2
   2db72:	2b01      	cmp	r3, #1
   2db74:	d107      	bne.n	2db86 <create_name+0x412>
   2db76:	2326      	movs	r3, #38	; 0x26
   2db78:	18fb      	adds	r3, r7, r3
   2db7a:	2226      	movs	r2, #38	; 0x26
   2db7c:	18ba      	adds	r2, r7, r2
   2db7e:	7812      	ldrb	r2, [r2, #0]
   2db80:	2110      	movs	r1, #16
   2db82:	430a      	orrs	r2, r1
   2db84:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2db86:	2327      	movs	r3, #39	; 0x27
   2db88:	18fb      	adds	r3, r7, r3
   2db8a:	781b      	ldrb	r3, [r3, #0]
   2db8c:	220c      	movs	r2, #12
   2db8e:	4013      	ands	r3, r2
   2db90:	2b04      	cmp	r3, #4
   2db92:	d107      	bne.n	2dba4 <create_name+0x430>
   2db94:	2326      	movs	r3, #38	; 0x26
   2db96:	18fb      	adds	r3, r7, r3
   2db98:	2226      	movs	r2, #38	; 0x26
   2db9a:	18ba      	adds	r2, r7, r2
   2db9c:	7812      	ldrb	r2, [r2, #0]
   2db9e:	2108      	movs	r1, #8
   2dba0:	430a      	orrs	r2, r1
   2dba2:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2dba4:	687b      	ldr	r3, [r7, #4]
   2dba6:	699b      	ldr	r3, [r3, #24]
   2dba8:	330b      	adds	r3, #11
   2dbaa:	2226      	movs	r2, #38	; 0x26
   2dbac:	18ba      	adds	r2, r7, r2
   2dbae:	7812      	ldrb	r2, [r2, #0]
   2dbb0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2dbb2:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2dbb4:	0018      	movs	r0, r3
   2dbb6:	46bd      	mov	sp, r7
   2dbb8:	b00b      	add	sp, #44	; 0x2c
   2dbba:	bd90      	pop	{r4, r7, pc}

0002dbbc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2dbbc:	b590      	push	{r4, r7, lr}
   2dbbe:	b085      	sub	sp, #20
   2dbc0:	af00      	add	r7, sp, #0
   2dbc2:	6078      	str	r0, [r7, #4]
   2dbc4:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2dbc6:	683b      	ldr	r3, [r7, #0]
   2dbc8:	781b      	ldrb	r3, [r3, #0]
   2dbca:	2b2f      	cmp	r3, #47	; 0x2f
   2dbcc:	d003      	beq.n	2dbd6 <follow_path+0x1a>
   2dbce:	683b      	ldr	r3, [r7, #0]
   2dbd0:	781b      	ldrb	r3, [r3, #0]
   2dbd2:	2b5c      	cmp	r3, #92	; 0x5c
   2dbd4:	d102      	bne.n	2dbdc <follow_path+0x20>
		path++;
   2dbd6:	683b      	ldr	r3, [r7, #0]
   2dbd8:	3301      	adds	r3, #1
   2dbda:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2dbdc:	687b      	ldr	r3, [r7, #4]
   2dbde:	2200      	movs	r2, #0
   2dbe0:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2dbe2:	683b      	ldr	r3, [r7, #0]
   2dbe4:	781b      	ldrb	r3, [r3, #0]
   2dbe6:	2b1f      	cmp	r3, #31
   2dbe8:	d80c      	bhi.n	2dc04 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2dbea:	230f      	movs	r3, #15
   2dbec:	18fc      	adds	r4, r7, r3
   2dbee:	687b      	ldr	r3, [r7, #4]
   2dbf0:	2100      	movs	r1, #0
   2dbf2:	0018      	movs	r0, r3
   2dbf4:	4b3c      	ldr	r3, [pc, #240]	; (2dce8 <follow_path+0x12c>)
   2dbf6:	4798      	blx	r3
   2dbf8:	0003      	movs	r3, r0
   2dbfa:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2dbfc:	687b      	ldr	r3, [r7, #4]
   2dbfe:	2200      	movs	r2, #0
   2dc00:	615a      	str	r2, [r3, #20]
   2dc02:	e06a      	b.n	2dcda <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2dc04:	230f      	movs	r3, #15
   2dc06:	18fc      	adds	r4, r7, r3
   2dc08:	003a      	movs	r2, r7
   2dc0a:	687b      	ldr	r3, [r7, #4]
   2dc0c:	0011      	movs	r1, r2
   2dc0e:	0018      	movs	r0, r3
   2dc10:	4b36      	ldr	r3, [pc, #216]	; (2dcec <follow_path+0x130>)
   2dc12:	4798      	blx	r3
   2dc14:	0003      	movs	r3, r0
   2dc16:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2dc18:	230f      	movs	r3, #15
   2dc1a:	18fb      	adds	r3, r7, r3
   2dc1c:	781b      	ldrb	r3, [r3, #0]
   2dc1e:	2b00      	cmp	r3, #0
   2dc20:	d154      	bne.n	2dccc <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2dc22:	230f      	movs	r3, #15
   2dc24:	18fc      	adds	r4, r7, r3
   2dc26:	687b      	ldr	r3, [r7, #4]
   2dc28:	0018      	movs	r0, r3
   2dc2a:	4b31      	ldr	r3, [pc, #196]	; (2dcf0 <follow_path+0x134>)
   2dc2c:	4798      	blx	r3
   2dc2e:	0003      	movs	r3, r0
   2dc30:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2dc32:	687b      	ldr	r3, [r7, #4]
   2dc34:	699a      	ldr	r2, [r3, #24]
   2dc36:	230e      	movs	r3, #14
   2dc38:	18fb      	adds	r3, r7, r3
   2dc3a:	7ad2      	ldrb	r2, [r2, #11]
   2dc3c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2dc3e:	230f      	movs	r3, #15
   2dc40:	18fb      	adds	r3, r7, r3
   2dc42:	781b      	ldrb	r3, [r3, #0]
   2dc44:	2b00      	cmp	r3, #0
   2dc46:	d00f      	beq.n	2dc68 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2dc48:	230f      	movs	r3, #15
   2dc4a:	18fb      	adds	r3, r7, r3
   2dc4c:	781b      	ldrb	r3, [r3, #0]
   2dc4e:	2b04      	cmp	r3, #4
   2dc50:	d13e      	bne.n	2dcd0 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2dc52:	230e      	movs	r3, #14
   2dc54:	18fb      	adds	r3, r7, r3
   2dc56:	781b      	ldrb	r3, [r3, #0]
   2dc58:	2204      	movs	r2, #4
   2dc5a:	4013      	ands	r3, r2
   2dc5c:	d13a      	bne.n	2dcd4 <follow_path+0x118>
   2dc5e:	230f      	movs	r3, #15
   2dc60:	18fb      	adds	r3, r7, r3
   2dc62:	2205      	movs	r2, #5
   2dc64:	701a      	strb	r2, [r3, #0]
				}
				break;
   2dc66:	e035      	b.n	2dcd4 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2dc68:	230e      	movs	r3, #14
   2dc6a:	18fb      	adds	r3, r7, r3
   2dc6c:	781b      	ldrb	r3, [r3, #0]
   2dc6e:	2204      	movs	r2, #4
   2dc70:	4013      	ands	r3, r2
   2dc72:	d131      	bne.n	2dcd8 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2dc74:	687b      	ldr	r3, [r7, #4]
   2dc76:	695b      	ldr	r3, [r3, #20]
   2dc78:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2dc7a:	68bb      	ldr	r3, [r7, #8]
   2dc7c:	330b      	adds	r3, #11
   2dc7e:	781b      	ldrb	r3, [r3, #0]
   2dc80:	001a      	movs	r2, r3
   2dc82:	2310      	movs	r3, #16
   2dc84:	4013      	ands	r3, r2
   2dc86:	d104      	bne.n	2dc92 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2dc88:	230f      	movs	r3, #15
   2dc8a:	18fb      	adds	r3, r7, r3
   2dc8c:	2205      	movs	r2, #5
   2dc8e:	701a      	strb	r2, [r3, #0]
   2dc90:	e023      	b.n	2dcda <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2dc92:	68bb      	ldr	r3, [r7, #8]
   2dc94:	3315      	adds	r3, #21
   2dc96:	781b      	ldrb	r3, [r3, #0]
   2dc98:	021b      	lsls	r3, r3, #8
   2dc9a:	b21a      	sxth	r2, r3
   2dc9c:	68bb      	ldr	r3, [r7, #8]
   2dc9e:	3314      	adds	r3, #20
   2dca0:	781b      	ldrb	r3, [r3, #0]
   2dca2:	b21b      	sxth	r3, r3
   2dca4:	4313      	orrs	r3, r2
   2dca6:	b21b      	sxth	r3, r3
   2dca8:	b29b      	uxth	r3, r3
   2dcaa:	041b      	lsls	r3, r3, #16
   2dcac:	68ba      	ldr	r2, [r7, #8]
   2dcae:	321b      	adds	r2, #27
   2dcb0:	7812      	ldrb	r2, [r2, #0]
   2dcb2:	0212      	lsls	r2, r2, #8
   2dcb4:	b211      	sxth	r1, r2
   2dcb6:	68ba      	ldr	r2, [r7, #8]
   2dcb8:	321a      	adds	r2, #26
   2dcba:	7812      	ldrb	r2, [r2, #0]
   2dcbc:	b212      	sxth	r2, r2
   2dcbe:	430a      	orrs	r2, r1
   2dcc0:	b212      	sxth	r2, r2
   2dcc2:	b292      	uxth	r2, r2
   2dcc4:	431a      	orrs	r2, r3
   2dcc6:	687b      	ldr	r3, [r7, #4]
   2dcc8:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2dcca:	e79b      	b.n	2dc04 <follow_path+0x48>
			if (res != FR_OK) break;
   2dccc:	46c0      	nop			; (mov r8, r8)
   2dcce:	e004      	b.n	2dcda <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2dcd0:	46c0      	nop			; (mov r8, r8)
   2dcd2:	e002      	b.n	2dcda <follow_path+0x11e>
				break;
   2dcd4:	46c0      	nop			; (mov r8, r8)
   2dcd6:	e000      	b.n	2dcda <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2dcd8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2dcda:	230f      	movs	r3, #15
   2dcdc:	18fb      	adds	r3, r7, r3
   2dcde:	781b      	ldrb	r3, [r3, #0]
}
   2dce0:	0018      	movs	r0, r3
   2dce2:	46bd      	mov	sp, r7
   2dce4:	b005      	add	sp, #20
   2dce6:	bd90      	pop	{r4, r7, pc}
   2dce8:	0002cb8d 	.word	0x0002cb8d
   2dcec:	0002d775 	.word	0x0002d775
   2dcf0:	0002d211 	.word	0x0002d211

0002dcf4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2dcf4:	b590      	push	{r4, r7, lr}
   2dcf6:	b083      	sub	sp, #12
   2dcf8:	af00      	add	r7, sp, #0
   2dcfa:	6078      	str	r0, [r7, #4]
   2dcfc:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2dcfe:	687b      	ldr	r3, [r7, #4]
   2dd00:	7858      	ldrb	r0, [r3, #1]
   2dd02:	687b      	ldr	r3, [r7, #4]
   2dd04:	3330      	adds	r3, #48	; 0x30
   2dd06:	0019      	movs	r1, r3
   2dd08:	683a      	ldr	r2, [r7, #0]
   2dd0a:	2301      	movs	r3, #1
   2dd0c:	4c2a      	ldr	r4, [pc, #168]	; (2ddb8 <check_fs+0xc4>)
   2dd0e:	47a0      	blx	r4
   2dd10:	1e03      	subs	r3, r0, #0
   2dd12:	d001      	beq.n	2dd18 <check_fs+0x24>
		return 3;
   2dd14:	2303      	movs	r3, #3
   2dd16:	e04b      	b.n	2ddb0 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2dd18:	687b      	ldr	r3, [r7, #4]
   2dd1a:	4a28      	ldr	r2, [pc, #160]	; (2ddbc <check_fs+0xc8>)
   2dd1c:	4694      	mov	ip, r2
   2dd1e:	4463      	add	r3, ip
   2dd20:	3301      	adds	r3, #1
   2dd22:	781b      	ldrb	r3, [r3, #0]
   2dd24:	021b      	lsls	r3, r3, #8
   2dd26:	b21a      	sxth	r2, r3
   2dd28:	687b      	ldr	r3, [r7, #4]
   2dd2a:	4924      	ldr	r1, [pc, #144]	; (2ddbc <check_fs+0xc8>)
   2dd2c:	5c5b      	ldrb	r3, [r3, r1]
   2dd2e:	b21b      	sxth	r3, r3
   2dd30:	4313      	orrs	r3, r2
   2dd32:	b21b      	sxth	r3, r3
   2dd34:	4a22      	ldr	r2, [pc, #136]	; (2ddc0 <check_fs+0xcc>)
   2dd36:	4293      	cmp	r3, r2
   2dd38:	d001      	beq.n	2dd3e <check_fs+0x4a>
		return 2;
   2dd3a:	2302      	movs	r3, #2
   2dd3c:	e038      	b.n	2ddb0 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2dd3e:	687b      	ldr	r3, [r7, #4]
   2dd40:	3366      	adds	r3, #102	; 0x66
   2dd42:	3303      	adds	r3, #3
   2dd44:	781b      	ldrb	r3, [r3, #0]
   2dd46:	061a      	lsls	r2, r3, #24
   2dd48:	687b      	ldr	r3, [r7, #4]
   2dd4a:	3366      	adds	r3, #102	; 0x66
   2dd4c:	3302      	adds	r3, #2
   2dd4e:	781b      	ldrb	r3, [r3, #0]
   2dd50:	041b      	lsls	r3, r3, #16
   2dd52:	4313      	orrs	r3, r2
   2dd54:	687a      	ldr	r2, [r7, #4]
   2dd56:	3266      	adds	r2, #102	; 0x66
   2dd58:	3201      	adds	r2, #1
   2dd5a:	7812      	ldrb	r2, [r2, #0]
   2dd5c:	0212      	lsls	r2, r2, #8
   2dd5e:	4313      	orrs	r3, r2
   2dd60:	687a      	ldr	r2, [r7, #4]
   2dd62:	2166      	movs	r1, #102	; 0x66
   2dd64:	5c52      	ldrb	r2, [r2, r1]
   2dd66:	4313      	orrs	r3, r2
   2dd68:	021b      	lsls	r3, r3, #8
   2dd6a:	0a1b      	lsrs	r3, r3, #8
   2dd6c:	4a15      	ldr	r2, [pc, #84]	; (2ddc4 <check_fs+0xd0>)
   2dd6e:	4293      	cmp	r3, r2
   2dd70:	d101      	bne.n	2dd76 <check_fs+0x82>
		return 0;
   2dd72:	2300      	movs	r3, #0
   2dd74:	e01c      	b.n	2ddb0 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2dd76:	687b      	ldr	r3, [r7, #4]
   2dd78:	3382      	adds	r3, #130	; 0x82
   2dd7a:	3303      	adds	r3, #3
   2dd7c:	781b      	ldrb	r3, [r3, #0]
   2dd7e:	061a      	lsls	r2, r3, #24
   2dd80:	687b      	ldr	r3, [r7, #4]
   2dd82:	3382      	adds	r3, #130	; 0x82
   2dd84:	3302      	adds	r3, #2
   2dd86:	781b      	ldrb	r3, [r3, #0]
   2dd88:	041b      	lsls	r3, r3, #16
   2dd8a:	4313      	orrs	r3, r2
   2dd8c:	687a      	ldr	r2, [r7, #4]
   2dd8e:	3282      	adds	r2, #130	; 0x82
   2dd90:	3201      	adds	r2, #1
   2dd92:	7812      	ldrb	r2, [r2, #0]
   2dd94:	0212      	lsls	r2, r2, #8
   2dd96:	4313      	orrs	r3, r2
   2dd98:	687a      	ldr	r2, [r7, #4]
   2dd9a:	2182      	movs	r1, #130	; 0x82
   2dd9c:	5c52      	ldrb	r2, [r2, r1]
   2dd9e:	4313      	orrs	r3, r2
   2dda0:	021b      	lsls	r3, r3, #8
   2dda2:	0a1b      	lsrs	r3, r3, #8
   2dda4:	4a07      	ldr	r2, [pc, #28]	; (2ddc4 <check_fs+0xd0>)
   2dda6:	4293      	cmp	r3, r2
   2dda8:	d101      	bne.n	2ddae <check_fs+0xba>
		return 0;
   2ddaa:	2300      	movs	r3, #0
   2ddac:	e000      	b.n	2ddb0 <check_fs+0xbc>

	return 1;
   2ddae:	2301      	movs	r3, #1
}
   2ddb0:	0018      	movs	r0, r3
   2ddb2:	46bd      	mov	sp, r7
   2ddb4:	b003      	add	sp, #12
   2ddb6:	bd90      	pop	{r4, r7, pc}
   2ddb8:	0002bf5d 	.word	0x0002bf5d
   2ddbc:	0000022e 	.word	0x0000022e
   2ddc0:	ffffaa55 	.word	0xffffaa55
   2ddc4:	00544146 	.word	0x00544146

0002ddc8 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2ddc8:	b590      	push	{r4, r7, lr}
   2ddca:	b093      	sub	sp, #76	; 0x4c
   2ddcc:	af00      	add	r7, sp, #0
   2ddce:	60f8      	str	r0, [r7, #12]
   2ddd0:	60b9      	str	r1, [r7, #8]
   2ddd2:	1dfb      	adds	r3, r7, #7
   2ddd4:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2ddd6:	68fb      	ldr	r3, [r7, #12]
   2ddd8:	681b      	ldr	r3, [r3, #0]
   2ddda:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2dddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ddde:	781b      	ldrb	r3, [r3, #0]
   2dde0:	3b30      	subs	r3, #48	; 0x30
   2dde2:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2dde4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2dde6:	2b09      	cmp	r3, #9
   2dde8:	d80b      	bhi.n	2de02 <chk_mounted+0x3a>
   2ddea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ddec:	3301      	adds	r3, #1
   2ddee:	781b      	ldrb	r3, [r3, #0]
   2ddf0:	2b3a      	cmp	r3, #58	; 0x3a
   2ddf2:	d106      	bne.n	2de02 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2ddf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ddf6:	3302      	adds	r3, #2
   2ddf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   2ddfa:	68fb      	ldr	r3, [r7, #12]
   2ddfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2ddfe:	601a      	str	r2, [r3, #0]
   2de00:	e001      	b.n	2de06 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2de02:	2300      	movs	r3, #0
   2de04:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2de06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2de08:	2b07      	cmp	r3, #7
   2de0a:	d901      	bls.n	2de10 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2de0c:	230b      	movs	r3, #11
   2de0e:	e2af      	b.n	2e370 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2de10:	4bc5      	ldr	r3, [pc, #788]	; (2e128 <chk_mounted+0x360>)
   2de12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2de14:	0092      	lsls	r2, r2, #2
   2de16:	58d3      	ldr	r3, [r2, r3]
   2de18:	62bb      	str	r3, [r7, #40]	; 0x28
   2de1a:	68bb      	ldr	r3, [r7, #8]
   2de1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2de1e:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de22:	2b00      	cmp	r3, #0
   2de24:	d101      	bne.n	2de2a <chk_mounted+0x62>
   2de26:	230c      	movs	r3, #12
   2de28:	e2a2      	b.n	2e370 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2de2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de2c:	781b      	ldrb	r3, [r3, #0]
   2de2e:	2b00      	cmp	r3, #0
   2de30:	d01c      	beq.n	2de6c <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2de32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de34:	785b      	ldrb	r3, [r3, #1]
   2de36:	2227      	movs	r2, #39	; 0x27
   2de38:	18bc      	adds	r4, r7, r2
   2de3a:	0018      	movs	r0, r3
   2de3c:	4bbb      	ldr	r3, [pc, #748]	; (2e12c <chk_mounted+0x364>)
   2de3e:	4798      	blx	r3
   2de40:	0003      	movs	r3, r0
   2de42:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2de44:	2327      	movs	r3, #39	; 0x27
   2de46:	18fb      	adds	r3, r7, r3
   2de48:	781b      	ldrb	r3, [r3, #0]
   2de4a:	2201      	movs	r2, #1
   2de4c:	4013      	ands	r3, r2
   2de4e:	d10d      	bne.n	2de6c <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2de50:	1dfb      	adds	r3, r7, #7
   2de52:	781b      	ldrb	r3, [r3, #0]
   2de54:	2b00      	cmp	r3, #0
   2de56:	d007      	beq.n	2de68 <chk_mounted+0xa0>
   2de58:	2327      	movs	r3, #39	; 0x27
   2de5a:	18fb      	adds	r3, r7, r3
   2de5c:	781b      	ldrb	r3, [r3, #0]
   2de5e:	2204      	movs	r2, #4
   2de60:	4013      	ands	r3, r2
   2de62:	d001      	beq.n	2de68 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2de64:	230a      	movs	r3, #10
   2de66:	e283      	b.n	2e370 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2de68:	2300      	movs	r3, #0
   2de6a:	e281      	b.n	2e370 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de6e:	2200      	movs	r2, #0
   2de70:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2de72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2de74:	b2da      	uxtb	r2, r3
   2de76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de78:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2de7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2de7c:	785b      	ldrb	r3, [r3, #1]
   2de7e:	2227      	movs	r2, #39	; 0x27
   2de80:	18bc      	adds	r4, r7, r2
   2de82:	0018      	movs	r0, r3
   2de84:	4baa      	ldr	r3, [pc, #680]	; (2e130 <chk_mounted+0x368>)
   2de86:	4798      	blx	r3
   2de88:	0003      	movs	r3, r0
   2de8a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2de8c:	2327      	movs	r3, #39	; 0x27
   2de8e:	18fb      	adds	r3, r7, r3
   2de90:	781b      	ldrb	r3, [r3, #0]
   2de92:	2201      	movs	r2, #1
   2de94:	4013      	ands	r3, r2
   2de96:	d001      	beq.n	2de9c <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2de98:	2303      	movs	r3, #3
   2de9a:	e269      	b.n	2e370 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2de9c:	1dfb      	adds	r3, r7, #7
   2de9e:	781b      	ldrb	r3, [r3, #0]
   2dea0:	2b00      	cmp	r3, #0
   2dea2:	d007      	beq.n	2deb4 <chk_mounted+0xec>
   2dea4:	2327      	movs	r3, #39	; 0x27
   2dea6:	18fb      	adds	r3, r7, r3
   2dea8:	781b      	ldrb	r3, [r3, #0]
   2deaa:	2204      	movs	r2, #4
   2deac:	4013      	ands	r3, r2
   2deae:	d001      	beq.n	2deb4 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2deb0:	230a      	movs	r3, #10
   2deb2:	e25d      	b.n	2e370 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2deb4:	2300      	movs	r3, #0
   2deb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2deb8:	2347      	movs	r3, #71	; 0x47
   2deba:	18fc      	adds	r4, r7, r3
   2debc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2debe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dec0:	0011      	movs	r1, r2
   2dec2:	0018      	movs	r0, r3
   2dec4:	4b9b      	ldr	r3, [pc, #620]	; (2e134 <chk_mounted+0x36c>)
   2dec6:	4798      	blx	r3
   2dec8:	0003      	movs	r3, r0
   2deca:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2decc:	2347      	movs	r3, #71	; 0x47
   2dece:	18fb      	adds	r3, r7, r3
   2ded0:	781b      	ldrb	r3, [r3, #0]
   2ded2:	2b01      	cmp	r3, #1
   2ded4:	d13b      	bne.n	2df4e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2ded6:	2346      	movs	r3, #70	; 0x46
   2ded8:	18fb      	adds	r3, r7, r3
   2deda:	2200      	movs	r2, #0
   2dedc:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2dede:	2346      	movs	r3, #70	; 0x46
   2dee0:	18fb      	adds	r3, r7, r3
   2dee2:	781b      	ldrb	r3, [r3, #0]
   2dee4:	2b00      	cmp	r3, #0
   2dee6:	d006      	beq.n	2def6 <chk_mounted+0x12e>
   2dee8:	2346      	movs	r3, #70	; 0x46
   2deea:	18fb      	adds	r3, r7, r3
   2deec:	781a      	ldrb	r2, [r3, #0]
   2deee:	2346      	movs	r3, #70	; 0x46
   2def0:	18fb      	adds	r3, r7, r3
   2def2:	3a01      	subs	r2, #1
   2def4:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2def6:	2346      	movs	r3, #70	; 0x46
   2def8:	18fb      	adds	r3, r7, r3
   2defa:	781b      	ldrb	r3, [r3, #0]
   2defc:	011b      	lsls	r3, r3, #4
   2defe:	33bf      	adds	r3, #191	; 0xbf
   2df00:	33ff      	adds	r3, #255	; 0xff
   2df02:	3330      	adds	r3, #48	; 0x30
   2df04:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2df06:	18d3      	adds	r3, r2, r3
   2df08:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2df0a:	6a3b      	ldr	r3, [r7, #32]
   2df0c:	3304      	adds	r3, #4
   2df0e:	781b      	ldrb	r3, [r3, #0]
   2df10:	2b00      	cmp	r3, #0
   2df12:	d01c      	beq.n	2df4e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2df14:	6a3b      	ldr	r3, [r7, #32]
   2df16:	330b      	adds	r3, #11
   2df18:	781b      	ldrb	r3, [r3, #0]
   2df1a:	061a      	lsls	r2, r3, #24
   2df1c:	6a3b      	ldr	r3, [r7, #32]
   2df1e:	330a      	adds	r3, #10
   2df20:	781b      	ldrb	r3, [r3, #0]
   2df22:	041b      	lsls	r3, r3, #16
   2df24:	4313      	orrs	r3, r2
   2df26:	6a3a      	ldr	r2, [r7, #32]
   2df28:	3209      	adds	r2, #9
   2df2a:	7812      	ldrb	r2, [r2, #0]
   2df2c:	0212      	lsls	r2, r2, #8
   2df2e:	4313      	orrs	r3, r2
   2df30:	6a3a      	ldr	r2, [r7, #32]
   2df32:	3208      	adds	r2, #8
   2df34:	7812      	ldrb	r2, [r2, #0]
   2df36:	4313      	orrs	r3, r2
   2df38:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2df3a:	2347      	movs	r3, #71	; 0x47
   2df3c:	18fc      	adds	r4, r7, r3
   2df3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2df40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df42:	0011      	movs	r1, r2
   2df44:	0018      	movs	r0, r3
   2df46:	4b7b      	ldr	r3, [pc, #492]	; (2e134 <chk_mounted+0x36c>)
   2df48:	4798      	blx	r3
   2df4a:	0003      	movs	r3, r0
   2df4c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2df4e:	2347      	movs	r3, #71	; 0x47
   2df50:	18fb      	adds	r3, r7, r3
   2df52:	781b      	ldrb	r3, [r3, #0]
   2df54:	2b03      	cmp	r3, #3
   2df56:	d101      	bne.n	2df5c <chk_mounted+0x194>
   2df58:	2301      	movs	r3, #1
   2df5a:	e209      	b.n	2e370 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2df5c:	2347      	movs	r3, #71	; 0x47
   2df5e:	18fb      	adds	r3, r7, r3
   2df60:	781b      	ldrb	r3, [r3, #0]
   2df62:	2b00      	cmp	r3, #0
   2df64:	d001      	beq.n	2df6a <chk_mounted+0x1a2>
   2df66:	230d      	movs	r3, #13
   2df68:	e202      	b.n	2e370 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2df6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df6c:	223c      	movs	r2, #60	; 0x3c
   2df6e:	5c9b      	ldrb	r3, [r3, r2]
   2df70:	021b      	lsls	r3, r3, #8
   2df72:	b21a      	sxth	r2, r3
   2df74:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df76:	213b      	movs	r1, #59	; 0x3b
   2df78:	5c5b      	ldrb	r3, [r3, r1]
   2df7a:	b21b      	sxth	r3, r3
   2df7c:	4313      	orrs	r3, r2
   2df7e:	b21a      	sxth	r2, r3
   2df80:	2380      	movs	r3, #128	; 0x80
   2df82:	009b      	lsls	r3, r3, #2
   2df84:	429a      	cmp	r2, r3
   2df86:	d001      	beq.n	2df8c <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2df88:	230d      	movs	r3, #13
   2df8a:	e1f1      	b.n	2e370 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2df8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df8e:	2247      	movs	r2, #71	; 0x47
   2df90:	5c9b      	ldrb	r3, [r3, r2]
   2df92:	021b      	lsls	r3, r3, #8
   2df94:	b21a      	sxth	r2, r3
   2df96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df98:	2146      	movs	r1, #70	; 0x46
   2df9a:	5c5b      	ldrb	r3, [r3, r1]
   2df9c:	b21b      	sxth	r3, r3
   2df9e:	4313      	orrs	r3, r2
   2dfa0:	b21b      	sxth	r3, r3
   2dfa2:	b29b      	uxth	r3, r3
   2dfa4:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2dfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2dfa8:	2b00      	cmp	r3, #0
   2dfaa:	d112      	bne.n	2dfd2 <chk_mounted+0x20a>
   2dfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dfae:	2257      	movs	r2, #87	; 0x57
   2dfb0:	5c9b      	ldrb	r3, [r3, r2]
   2dfb2:	061a      	lsls	r2, r3, #24
   2dfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dfb6:	2156      	movs	r1, #86	; 0x56
   2dfb8:	5c5b      	ldrb	r3, [r3, r1]
   2dfba:	041b      	lsls	r3, r3, #16
   2dfbc:	4313      	orrs	r3, r2
   2dfbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dfc0:	2155      	movs	r1, #85	; 0x55
   2dfc2:	5c52      	ldrb	r2, [r2, r1]
   2dfc4:	0212      	lsls	r2, r2, #8
   2dfc6:	4313      	orrs	r3, r2
   2dfc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dfca:	2154      	movs	r1, #84	; 0x54
   2dfcc:	5c52      	ldrb	r2, [r2, r1]
   2dfce:	4313      	orrs	r3, r2
   2dfd0:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2dfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dfd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2dfd6:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2dfd8:	231f      	movs	r3, #31
   2dfda:	18fb      	adds	r3, r7, r3
   2dfdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dfde:	2140      	movs	r1, #64	; 0x40
   2dfe0:	5c52      	ldrb	r2, [r2, r1]
   2dfe2:	701a      	strb	r2, [r3, #0]
   2dfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dfe6:	221f      	movs	r2, #31
   2dfe8:	18ba      	adds	r2, r7, r2
   2dfea:	7812      	ldrb	r2, [r2, #0]
   2dfec:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2dfee:	231f      	movs	r3, #31
   2dff0:	18fb      	adds	r3, r7, r3
   2dff2:	781b      	ldrb	r3, [r3, #0]
   2dff4:	2b01      	cmp	r3, #1
   2dff6:	d006      	beq.n	2e006 <chk_mounted+0x23e>
   2dff8:	231f      	movs	r3, #31
   2dffa:	18fb      	adds	r3, r7, r3
   2dffc:	781b      	ldrb	r3, [r3, #0]
   2dffe:	2b02      	cmp	r3, #2
   2e000:	d001      	beq.n	2e006 <chk_mounted+0x23e>
   2e002:	230d      	movs	r3, #13
   2e004:	e1b4      	b.n	2e370 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2e006:	231f      	movs	r3, #31
   2e008:	18fb      	adds	r3, r7, r3
   2e00a:	781a      	ldrb	r2, [r3, #0]
   2e00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e00e:	4353      	muls	r3, r2
   2e010:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2e012:	231f      	movs	r3, #31
   2e014:	18fb      	adds	r3, r7, r3
   2e016:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e018:	213d      	movs	r1, #61	; 0x3d
   2e01a:	5c52      	ldrb	r2, [r2, r1]
   2e01c:	701a      	strb	r2, [r3, #0]
   2e01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e020:	221f      	movs	r2, #31
   2e022:	18ba      	adds	r2, r7, r2
   2e024:	7812      	ldrb	r2, [r2, #0]
   2e026:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2e028:	231f      	movs	r3, #31
   2e02a:	18fb      	adds	r3, r7, r3
   2e02c:	781b      	ldrb	r3, [r3, #0]
   2e02e:	2b00      	cmp	r3, #0
   2e030:	d008      	beq.n	2e044 <chk_mounted+0x27c>
   2e032:	231f      	movs	r3, #31
   2e034:	18fb      	adds	r3, r7, r3
   2e036:	781b      	ldrb	r3, [r3, #0]
   2e038:	221f      	movs	r2, #31
   2e03a:	18ba      	adds	r2, r7, r2
   2e03c:	7812      	ldrb	r2, [r2, #0]
   2e03e:	3a01      	subs	r2, #1
   2e040:	4013      	ands	r3, r2
   2e042:	d001      	beq.n	2e048 <chk_mounted+0x280>
   2e044:	230d      	movs	r3, #13
   2e046:	e193      	b.n	2e370 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2e048:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e04a:	2242      	movs	r2, #66	; 0x42
   2e04c:	5c9b      	ldrb	r3, [r3, r2]
   2e04e:	021b      	lsls	r3, r3, #8
   2e050:	b21a      	sxth	r2, r3
   2e052:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e054:	2141      	movs	r1, #65	; 0x41
   2e056:	5c5b      	ldrb	r3, [r3, r1]
   2e058:	b21b      	sxth	r3, r3
   2e05a:	4313      	orrs	r3, r2
   2e05c:	b21b      	sxth	r3, r3
   2e05e:	b29a      	uxth	r2, r3
   2e060:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e062:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2e064:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e066:	891b      	ldrh	r3, [r3, #8]
   2e068:	220f      	movs	r2, #15
   2e06a:	4013      	ands	r3, r2
   2e06c:	b29b      	uxth	r3, r3
   2e06e:	2b00      	cmp	r3, #0
   2e070:	d001      	beq.n	2e076 <chk_mounted+0x2ae>
   2e072:	230d      	movs	r3, #13
   2e074:	e17c      	b.n	2e370 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2e076:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e078:	2244      	movs	r2, #68	; 0x44
   2e07a:	5c9b      	ldrb	r3, [r3, r2]
   2e07c:	021b      	lsls	r3, r3, #8
   2e07e:	b21a      	sxth	r2, r3
   2e080:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e082:	2143      	movs	r1, #67	; 0x43
   2e084:	5c5b      	ldrb	r3, [r3, r1]
   2e086:	b21b      	sxth	r3, r3
   2e088:	4313      	orrs	r3, r2
   2e08a:	b21b      	sxth	r3, r3
   2e08c:	b29b      	uxth	r3, r3
   2e08e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2e090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e092:	2b00      	cmp	r3, #0
   2e094:	d112      	bne.n	2e0bc <chk_mounted+0x2f4>
   2e096:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e098:	2253      	movs	r2, #83	; 0x53
   2e09a:	5c9b      	ldrb	r3, [r3, r2]
   2e09c:	061a      	lsls	r2, r3, #24
   2e09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0a0:	2152      	movs	r1, #82	; 0x52
   2e0a2:	5c5b      	ldrb	r3, [r3, r1]
   2e0a4:	041b      	lsls	r3, r3, #16
   2e0a6:	4313      	orrs	r3, r2
   2e0a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e0aa:	2151      	movs	r1, #81	; 0x51
   2e0ac:	5c52      	ldrb	r2, [r2, r1]
   2e0ae:	0212      	lsls	r2, r2, #8
   2e0b0:	4313      	orrs	r3, r2
   2e0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e0b4:	2150      	movs	r1, #80	; 0x50
   2e0b6:	5c52      	ldrb	r2, [r2, r1]
   2e0b8:	4313      	orrs	r3, r2
   2e0ba:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2e0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0be:	223f      	movs	r2, #63	; 0x3f
   2e0c0:	5c9b      	ldrb	r3, [r3, r2]
   2e0c2:	021b      	lsls	r3, r3, #8
   2e0c4:	b21a      	sxth	r2, r3
   2e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0c8:	213e      	movs	r1, #62	; 0x3e
   2e0ca:	5c5b      	ldrb	r3, [r3, r1]
   2e0cc:	b21b      	sxth	r3, r3
   2e0ce:	4313      	orrs	r3, r2
   2e0d0:	b21a      	sxth	r2, r3
   2e0d2:	231c      	movs	r3, #28
   2e0d4:	18fb      	adds	r3, r7, r3
   2e0d6:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2e0d8:	231c      	movs	r3, #28
   2e0da:	18fb      	adds	r3, r7, r3
   2e0dc:	881b      	ldrh	r3, [r3, #0]
   2e0de:	2b00      	cmp	r3, #0
   2e0e0:	d101      	bne.n	2e0e6 <chk_mounted+0x31e>
   2e0e2:	230d      	movs	r3, #13
   2e0e4:	e144      	b.n	2e370 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2e0e6:	231c      	movs	r3, #28
   2e0e8:	18fb      	adds	r3, r7, r3
   2e0ea:	881a      	ldrh	r2, [r3, #0]
   2e0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e0ee:	18d3      	adds	r3, r2, r3
   2e0f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e0f2:	8912      	ldrh	r2, [r2, #8]
   2e0f4:	0912      	lsrs	r2, r2, #4
   2e0f6:	b292      	uxth	r2, r2
   2e0f8:	189b      	adds	r3, r3, r2
   2e0fa:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2e0fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e0fe:	69bb      	ldr	r3, [r7, #24]
   2e100:	429a      	cmp	r2, r3
   2e102:	d201      	bcs.n	2e108 <chk_mounted+0x340>
   2e104:	230d      	movs	r3, #13
   2e106:	e133      	b.n	2e370 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2e108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e10a:	69bb      	ldr	r3, [r7, #24]
   2e10c:	1ad2      	subs	r2, r2, r3
   2e10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e110:	789b      	ldrb	r3, [r3, #2]
   2e112:	0019      	movs	r1, r3
   2e114:	4b08      	ldr	r3, [pc, #32]	; (2e138 <chk_mounted+0x370>)
   2e116:	0010      	movs	r0, r2
   2e118:	4798      	blx	r3
   2e11a:	0003      	movs	r3, r0
   2e11c:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2e11e:	697b      	ldr	r3, [r7, #20]
   2e120:	2b00      	cmp	r3, #0
   2e122:	d10b      	bne.n	2e13c <chk_mounted+0x374>
   2e124:	230d      	movs	r3, #13
   2e126:	e123      	b.n	2e370 <chk_mounted+0x5a8>
   2e128:	20003f30 	.word	0x20003f30
   2e12c:	0002bf25 	.word	0x0002bf25
   2e130:	0002bea1 	.word	0x0002bea1
   2e134:	0002dcf5 	.word	0x0002dcf5
   2e138:	00033569 	.word	0x00033569
	fmt = FS_FAT12;
   2e13c:	2347      	movs	r3, #71	; 0x47
   2e13e:	18fb      	adds	r3, r7, r3
   2e140:	2201      	movs	r2, #1
   2e142:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2e144:	697b      	ldr	r3, [r7, #20]
   2e146:	4a8c      	ldr	r2, [pc, #560]	; (2e378 <chk_mounted+0x5b0>)
   2e148:	4293      	cmp	r3, r2
   2e14a:	d903      	bls.n	2e154 <chk_mounted+0x38c>
   2e14c:	2347      	movs	r3, #71	; 0x47
   2e14e:	18fb      	adds	r3, r7, r3
   2e150:	2202      	movs	r2, #2
   2e152:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2e154:	697b      	ldr	r3, [r7, #20]
   2e156:	4a89      	ldr	r2, [pc, #548]	; (2e37c <chk_mounted+0x5b4>)
   2e158:	4293      	cmp	r3, r2
   2e15a:	d903      	bls.n	2e164 <chk_mounted+0x39c>
   2e15c:	2347      	movs	r3, #71	; 0x47
   2e15e:	18fb      	adds	r3, r7, r3
   2e160:	2203      	movs	r2, #3
   2e162:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2e164:	697b      	ldr	r3, [r7, #20]
   2e166:	1c9a      	adds	r2, r3, #2
   2e168:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e16a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2e16c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e16e:	69bb      	ldr	r3, [r7, #24]
   2e170:	18d2      	adds	r2, r2, r3
   2e172:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e174:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2e176:	231c      	movs	r3, #28
   2e178:	18fb      	adds	r3, r7, r3
   2e17a:	881a      	ldrh	r2, [r3, #0]
   2e17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e17e:	18d2      	adds	r2, r2, r3
   2e180:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e182:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2e184:	2347      	movs	r3, #71	; 0x47
   2e186:	18fb      	adds	r3, r7, r3
   2e188:	781b      	ldrb	r3, [r3, #0]
   2e18a:	2b03      	cmp	r3, #3
   2e18c:	d11e      	bne.n	2e1cc <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2e18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e190:	891b      	ldrh	r3, [r3, #8]
   2e192:	2b00      	cmp	r3, #0
   2e194:	d001      	beq.n	2e19a <chk_mounted+0x3d2>
   2e196:	230d      	movs	r3, #13
   2e198:	e0ea      	b.n	2e370 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2e19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e19c:	225f      	movs	r2, #95	; 0x5f
   2e19e:	5c9b      	ldrb	r3, [r3, r2]
   2e1a0:	061a      	lsls	r2, r3, #24
   2e1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1a4:	215e      	movs	r1, #94	; 0x5e
   2e1a6:	5c5b      	ldrb	r3, [r3, r1]
   2e1a8:	041b      	lsls	r3, r3, #16
   2e1aa:	4313      	orrs	r3, r2
   2e1ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e1ae:	215d      	movs	r1, #93	; 0x5d
   2e1b0:	5c52      	ldrb	r2, [r2, r1]
   2e1b2:	0212      	lsls	r2, r2, #8
   2e1b4:	4313      	orrs	r3, r2
   2e1b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e1b8:	215c      	movs	r1, #92	; 0x5c
   2e1ba:	5c52      	ldrb	r2, [r2, r1]
   2e1bc:	431a      	orrs	r2, r3
   2e1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1c0:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2e1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1c4:	699b      	ldr	r3, [r3, #24]
   2e1c6:	009b      	lsls	r3, r3, #2
   2e1c8:	633b      	str	r3, [r7, #48]	; 0x30
   2e1ca:	e020      	b.n	2e20e <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2e1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1ce:	891b      	ldrh	r3, [r3, #8]
   2e1d0:	2b00      	cmp	r3, #0
   2e1d2:	d101      	bne.n	2e1d8 <chk_mounted+0x410>
   2e1d4:	230d      	movs	r3, #13
   2e1d6:	e0cb      	b.n	2e370 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2e1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1da:	6a1a      	ldr	r2, [r3, #32]
   2e1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e1de:	18d2      	adds	r2, r2, r3
   2e1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1e2:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2e1e4:	2347      	movs	r3, #71	; 0x47
   2e1e6:	18fb      	adds	r3, r7, r3
   2e1e8:	781b      	ldrb	r3, [r3, #0]
   2e1ea:	2b02      	cmp	r3, #2
   2e1ec:	d103      	bne.n	2e1f6 <chk_mounted+0x42e>
   2e1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1f0:	699b      	ldr	r3, [r3, #24]
   2e1f2:	005b      	lsls	r3, r3, #1
   2e1f4:	e00a      	b.n	2e20c <chk_mounted+0x444>
   2e1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1f8:	699a      	ldr	r2, [r3, #24]
   2e1fa:	0013      	movs	r3, r2
   2e1fc:	005b      	lsls	r3, r3, #1
   2e1fe:	189b      	adds	r3, r3, r2
   2e200:	085a      	lsrs	r2, r3, #1
   2e202:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e204:	699b      	ldr	r3, [r3, #24]
   2e206:	2101      	movs	r1, #1
   2e208:	400b      	ands	r3, r1
   2e20a:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2e20c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2e20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e210:	69da      	ldr	r2, [r3, #28]
   2e212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e214:	495a      	ldr	r1, [pc, #360]	; (2e380 <chk_mounted+0x5b8>)
   2e216:	468c      	mov	ip, r1
   2e218:	4463      	add	r3, ip
   2e21a:	0a5b      	lsrs	r3, r3, #9
   2e21c:	429a      	cmp	r2, r3
   2e21e:	d201      	bcs.n	2e224 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2e220:	230d      	movs	r3, #13
   2e222:	e0a5      	b.n	2e370 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2e224:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e226:	2201      	movs	r2, #1
   2e228:	4252      	negs	r2, r2
   2e22a:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2e22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e22e:	2200      	movs	r2, #0
   2e230:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2e232:	2347      	movs	r3, #71	; 0x47
   2e234:	18fb      	adds	r3, r7, r3
   2e236:	781b      	ldrb	r3, [r3, #0]
   2e238:	2b03      	cmp	r3, #3
   2e23a:	d000      	beq.n	2e23e <chk_mounted+0x476>
   2e23c:	e082      	b.n	2e344 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2e23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e240:	2200      	movs	r2, #0
   2e242:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2e244:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e246:	2261      	movs	r2, #97	; 0x61
   2e248:	5c9b      	ldrb	r3, [r3, r2]
   2e24a:	021b      	lsls	r3, r3, #8
   2e24c:	b21a      	sxth	r2, r3
   2e24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e250:	2160      	movs	r1, #96	; 0x60
   2e252:	5c5b      	ldrb	r3, [r3, r1]
   2e254:	b21b      	sxth	r3, r3
   2e256:	4313      	orrs	r3, r2
   2e258:	b21b      	sxth	r3, r3
   2e25a:	b29b      	uxth	r3, r3
   2e25c:	001a      	movs	r2, r3
   2e25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e260:	18d2      	adds	r2, r2, r3
   2e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e264:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e266:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e268:	7858      	ldrb	r0, [r3, #1]
   2e26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e26c:	3330      	adds	r3, #48	; 0x30
   2e26e:	0019      	movs	r1, r3
   2e270:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e272:	695a      	ldr	r2, [r3, #20]
   2e274:	2301      	movs	r3, #1
   2e276:	4c43      	ldr	r4, [pc, #268]	; (2e384 <chk_mounted+0x5bc>)
   2e278:	47a0      	blx	r4
   2e27a:	1e03      	subs	r3, r0, #0
   2e27c:	d162      	bne.n	2e344 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e280:	4a41      	ldr	r2, [pc, #260]	; (2e388 <chk_mounted+0x5c0>)
   2e282:	5c9b      	ldrb	r3, [r3, r2]
   2e284:	021b      	lsls	r3, r3, #8
   2e286:	b21a      	sxth	r2, r3
   2e288:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e28a:	4940      	ldr	r1, [pc, #256]	; (2e38c <chk_mounted+0x5c4>)
   2e28c:	5c5b      	ldrb	r3, [r3, r1]
   2e28e:	b21b      	sxth	r3, r3
   2e290:	4313      	orrs	r3, r2
   2e292:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e294:	4a3e      	ldr	r2, [pc, #248]	; (2e390 <chk_mounted+0x5c8>)
   2e296:	4293      	cmp	r3, r2
   2e298:	d154      	bne.n	2e344 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e29c:	2233      	movs	r2, #51	; 0x33
   2e29e:	5c9b      	ldrb	r3, [r3, r2]
   2e2a0:	061a      	lsls	r2, r3, #24
   2e2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2a4:	2132      	movs	r1, #50	; 0x32
   2e2a6:	5c5b      	ldrb	r3, [r3, r1]
   2e2a8:	041b      	lsls	r3, r3, #16
   2e2aa:	4313      	orrs	r3, r2
   2e2ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e2ae:	2131      	movs	r1, #49	; 0x31
   2e2b0:	5c52      	ldrb	r2, [r2, r1]
   2e2b2:	0212      	lsls	r2, r2, #8
   2e2b4:	4313      	orrs	r3, r2
   2e2b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e2b8:	2130      	movs	r1, #48	; 0x30
   2e2ba:	5c52      	ldrb	r2, [r2, r1]
   2e2bc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e2be:	4a35      	ldr	r2, [pc, #212]	; (2e394 <chk_mounted+0x5cc>)
   2e2c0:	4293      	cmp	r3, r2
   2e2c2:	d13f      	bne.n	2e344 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2c6:	4a34      	ldr	r2, [pc, #208]	; (2e398 <chk_mounted+0x5d0>)
   2e2c8:	5c9b      	ldrb	r3, [r3, r2]
   2e2ca:	061a      	lsls	r2, r3, #24
   2e2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2ce:	4933      	ldr	r1, [pc, #204]	; (2e39c <chk_mounted+0x5d4>)
   2e2d0:	5c5b      	ldrb	r3, [r3, r1]
   2e2d2:	041b      	lsls	r3, r3, #16
   2e2d4:	4313      	orrs	r3, r2
   2e2d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e2d8:	4931      	ldr	r1, [pc, #196]	; (2e3a0 <chk_mounted+0x5d8>)
   2e2da:	5c52      	ldrb	r2, [r2, r1]
   2e2dc:	0212      	lsls	r2, r2, #8
   2e2de:	4313      	orrs	r3, r2
   2e2e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e2e2:	2285      	movs	r2, #133	; 0x85
   2e2e4:	0092      	lsls	r2, r2, #2
   2e2e6:	5c8a      	ldrb	r2, [r1, r2]
   2e2e8:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e2ea:	4a2e      	ldr	r2, [pc, #184]	; (2e3a4 <chk_mounted+0x5dc>)
   2e2ec:	4293      	cmp	r3, r2
   2e2ee:	d129      	bne.n	2e344 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2e2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2f2:	4a2d      	ldr	r2, [pc, #180]	; (2e3a8 <chk_mounted+0x5e0>)
   2e2f4:	5c9b      	ldrb	r3, [r3, r2]
   2e2f6:	061a      	lsls	r2, r3, #24
   2e2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2fa:	492c      	ldr	r1, [pc, #176]	; (2e3ac <chk_mounted+0x5e4>)
   2e2fc:	5c5b      	ldrb	r3, [r3, r1]
   2e2fe:	041b      	lsls	r3, r3, #16
   2e300:	4313      	orrs	r3, r2
   2e302:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e304:	492a      	ldr	r1, [pc, #168]	; (2e3b0 <chk_mounted+0x5e8>)
   2e306:	5c52      	ldrb	r2, [r2, r1]
   2e308:	0212      	lsls	r2, r2, #8
   2e30a:	4313      	orrs	r3, r2
   2e30c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e30e:	2287      	movs	r2, #135	; 0x87
   2e310:	0092      	lsls	r2, r2, #2
   2e312:	5c8a      	ldrb	r2, [r1, r2]
   2e314:	431a      	orrs	r2, r3
   2e316:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e318:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2e31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e31c:	4a25      	ldr	r2, [pc, #148]	; (2e3b4 <chk_mounted+0x5ec>)
   2e31e:	5c9b      	ldrb	r3, [r3, r2]
   2e320:	061a      	lsls	r2, r3, #24
   2e322:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e324:	4924      	ldr	r1, [pc, #144]	; (2e3b8 <chk_mounted+0x5f0>)
   2e326:	5c5b      	ldrb	r3, [r3, r1]
   2e328:	041b      	lsls	r3, r3, #16
   2e32a:	4313      	orrs	r3, r2
   2e32c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e32e:	4923      	ldr	r1, [pc, #140]	; (2e3bc <chk_mounted+0x5f4>)
   2e330:	5c52      	ldrb	r2, [r2, r1]
   2e332:	0212      	lsls	r2, r2, #8
   2e334:	4313      	orrs	r3, r2
   2e336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e338:	2286      	movs	r2, #134	; 0x86
   2e33a:	0092      	lsls	r2, r2, #2
   2e33c:	5c8a      	ldrb	r2, [r1, r2]
   2e33e:	431a      	orrs	r2, r3
   2e340:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e342:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e346:	2247      	movs	r2, #71	; 0x47
   2e348:	18ba      	adds	r2, r7, r2
   2e34a:	7812      	ldrb	r2, [r2, #0]
   2e34c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2e34e:	4b1c      	ldr	r3, [pc, #112]	; (2e3c0 <chk_mounted+0x5f8>)
   2e350:	881b      	ldrh	r3, [r3, #0]
   2e352:	3301      	adds	r3, #1
   2e354:	b29a      	uxth	r2, r3
   2e356:	4b1a      	ldr	r3, [pc, #104]	; (2e3c0 <chk_mounted+0x5f8>)
   2e358:	801a      	strh	r2, [r3, #0]
   2e35a:	4b19      	ldr	r3, [pc, #100]	; (2e3c0 <chk_mounted+0x5f8>)
   2e35c:	881a      	ldrh	r2, [r3, #0]
   2e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e360:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2e362:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e364:	2200      	movs	r2, #0
   2e366:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e36a:	2200      	movs	r2, #0
   2e36c:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2e36e:	2300      	movs	r3, #0
}
   2e370:	0018      	movs	r0, r3
   2e372:	46bd      	mov	sp, r7
   2e374:	b013      	add	sp, #76	; 0x4c
   2e376:	bd90      	pop	{r4, r7, pc}
   2e378:	00000ff5 	.word	0x00000ff5
   2e37c:	0000fff5 	.word	0x0000fff5
   2e380:	000001ff 	.word	0x000001ff
   2e384:	0002bf5d 	.word	0x0002bf5d
   2e388:	0000022f 	.word	0x0000022f
   2e38c:	0000022e 	.word	0x0000022e
   2e390:	ffffaa55 	.word	0xffffaa55
   2e394:	41615252 	.word	0x41615252
   2e398:	00000217 	.word	0x00000217
   2e39c:	00000216 	.word	0x00000216
   2e3a0:	00000215 	.word	0x00000215
   2e3a4:	61417272 	.word	0x61417272
   2e3a8:	0000021f 	.word	0x0000021f
   2e3ac:	0000021e 	.word	0x0000021e
   2e3b0:	0000021d 	.word	0x0000021d
   2e3b4:	0000021b 	.word	0x0000021b
   2e3b8:	0000021a 	.word	0x0000021a
   2e3bc:	00000219 	.word	0x00000219
   2e3c0:	20003f50 	.word	0x20003f50

0002e3c4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2e3c4:	b580      	push	{r7, lr}
   2e3c6:	b082      	sub	sp, #8
   2e3c8:	af00      	add	r7, sp, #0
   2e3ca:	6078      	str	r0, [r7, #4]
   2e3cc:	000a      	movs	r2, r1
   2e3ce:	1cbb      	adds	r3, r7, #2
   2e3d0:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2e3d2:	687b      	ldr	r3, [r7, #4]
   2e3d4:	2b00      	cmp	r3, #0
   2e3d6:	d009      	beq.n	2e3ec <validate+0x28>
   2e3d8:	687b      	ldr	r3, [r7, #4]
   2e3da:	781b      	ldrb	r3, [r3, #0]
   2e3dc:	2b00      	cmp	r3, #0
   2e3de:	d005      	beq.n	2e3ec <validate+0x28>
   2e3e0:	687b      	ldr	r3, [r7, #4]
   2e3e2:	88db      	ldrh	r3, [r3, #6]
   2e3e4:	1cba      	adds	r2, r7, #2
   2e3e6:	8812      	ldrh	r2, [r2, #0]
   2e3e8:	429a      	cmp	r2, r3
   2e3ea:	d001      	beq.n	2e3f0 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2e3ec:	2309      	movs	r3, #9
   2e3ee:	e00c      	b.n	2e40a <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2e3f0:	687b      	ldr	r3, [r7, #4]
   2e3f2:	785b      	ldrb	r3, [r3, #1]
   2e3f4:	0018      	movs	r0, r3
   2e3f6:	4b07      	ldr	r3, [pc, #28]	; (2e414 <validate+0x50>)
   2e3f8:	4798      	blx	r3
   2e3fa:	0003      	movs	r3, r0
   2e3fc:	001a      	movs	r2, r3
   2e3fe:	2301      	movs	r3, #1
   2e400:	4013      	ands	r3, r2
   2e402:	d001      	beq.n	2e408 <validate+0x44>
		return FR_NOT_READY;
   2e404:	2303      	movs	r3, #3
   2e406:	e000      	b.n	2e40a <validate+0x46>

	return FR_OK;
   2e408:	2300      	movs	r3, #0
}
   2e40a:	0018      	movs	r0, r3
   2e40c:	46bd      	mov	sp, r7
   2e40e:	b002      	add	sp, #8
   2e410:	bd80      	pop	{r7, pc}
   2e412:	46c0      	nop			; (mov r8, r8)
   2e414:	0002bf25 	.word	0x0002bf25

0002e418 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2e418:	b580      	push	{r7, lr}
   2e41a:	b084      	sub	sp, #16
   2e41c:	af00      	add	r7, sp, #0
   2e41e:	0002      	movs	r2, r0
   2e420:	6039      	str	r1, [r7, #0]
   2e422:	1dfb      	adds	r3, r7, #7
   2e424:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2e426:	1dfb      	adds	r3, r7, #7
   2e428:	781b      	ldrb	r3, [r3, #0]
   2e42a:	2b07      	cmp	r3, #7
   2e42c:	d901      	bls.n	2e432 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2e42e:	230b      	movs	r3, #11
   2e430:	e018      	b.n	2e464 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2e432:	1dfb      	adds	r3, r7, #7
   2e434:	781a      	ldrb	r2, [r3, #0]
   2e436:	4b0d      	ldr	r3, [pc, #52]	; (2e46c <f_mount+0x54>)
   2e438:	0092      	lsls	r2, r2, #2
   2e43a:	58d3      	ldr	r3, [r2, r3]
   2e43c:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2e43e:	68fb      	ldr	r3, [r7, #12]
   2e440:	2b00      	cmp	r3, #0
   2e442:	d002      	beq.n	2e44a <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2e444:	68fb      	ldr	r3, [r7, #12]
   2e446:	2200      	movs	r2, #0
   2e448:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2e44a:	683b      	ldr	r3, [r7, #0]
   2e44c:	2b00      	cmp	r3, #0
   2e44e:	d002      	beq.n	2e456 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2e450:	683b      	ldr	r3, [r7, #0]
   2e452:	2200      	movs	r2, #0
   2e454:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2e456:	1dfb      	adds	r3, r7, #7
   2e458:	781a      	ldrb	r2, [r3, #0]
   2e45a:	4b04      	ldr	r3, [pc, #16]	; (2e46c <f_mount+0x54>)
   2e45c:	0092      	lsls	r2, r2, #2
   2e45e:	6839      	ldr	r1, [r7, #0]
   2e460:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2e462:	2300      	movs	r3, #0
}
   2e464:	0018      	movs	r0, r3
   2e466:	46bd      	mov	sp, r7
   2e468:	b004      	add	sp, #16
   2e46a:	bd80      	pop	{r7, pc}
   2e46c:	20003f30 	.word	0x20003f30

0002e470 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2e470:	b590      	push	{r4, r7, lr}
   2e472:	4ce5      	ldr	r4, [pc, #916]	; (2e808 <f_open+0x398>)
   2e474:	44a5      	add	sp, r4
   2e476:	af00      	add	r7, sp, #0
   2e478:	60f8      	str	r0, [r7, #12]
   2e47a:	60b9      	str	r1, [r7, #8]
   2e47c:	4be3      	ldr	r3, [pc, #908]	; (2e80c <f_open+0x39c>)
   2e47e:	2194      	movs	r1, #148	; 0x94
   2e480:	0089      	lsls	r1, r1, #2
   2e482:	468c      	mov	ip, r1
   2e484:	44bc      	add	ip, r7
   2e486:	4463      	add	r3, ip
   2e488:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2e48a:	68fb      	ldr	r3, [r7, #12]
   2e48c:	2200      	movs	r2, #0
   2e48e:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2e490:	4bde      	ldr	r3, [pc, #888]	; (2e80c <f_open+0x39c>)
   2e492:	2294      	movs	r2, #148	; 0x94
   2e494:	0092      	lsls	r2, r2, #2
   2e496:	4694      	mov	ip, r2
   2e498:	44bc      	add	ip, r7
   2e49a:	4463      	add	r3, ip
   2e49c:	4adb      	ldr	r2, [pc, #876]	; (2e80c <f_open+0x39c>)
   2e49e:	2194      	movs	r1, #148	; 0x94
   2e4a0:	0089      	lsls	r1, r1, #2
   2e4a2:	468c      	mov	ip, r1
   2e4a4:	44bc      	add	ip, r7
   2e4a6:	4462      	add	r2, ip
   2e4a8:	7812      	ldrb	r2, [r2, #0]
   2e4aa:	211f      	movs	r1, #31
   2e4ac:	400a      	ands	r2, r1
   2e4ae:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2e4b0:	4bd6      	ldr	r3, [pc, #856]	; (2e80c <f_open+0x39c>)
   2e4b2:	2294      	movs	r2, #148	; 0x94
   2e4b4:	0092      	lsls	r2, r2, #2
   2e4b6:	4694      	mov	ip, r2
   2e4b8:	44bc      	add	ip, r7
   2e4ba:	4463      	add	r3, ip
   2e4bc:	781b      	ldrb	r3, [r3, #0]
   2e4be:	2201      	movs	r2, #1
   2e4c0:	4393      	bics	r3, r2
   2e4c2:	b2da      	uxtb	r2, r3
   2e4c4:	4bd2      	ldr	r3, [pc, #840]	; (2e810 <f_open+0x3a0>)
   2e4c6:	18fc      	adds	r4, r7, r3
   2e4c8:	2387      	movs	r3, #135	; 0x87
   2e4ca:	009b      	lsls	r3, r3, #2
   2e4cc:	18f9      	adds	r1, r7, r3
   2e4ce:	2308      	movs	r3, #8
   2e4d0:	18fb      	adds	r3, r7, r3
   2e4d2:	0018      	movs	r0, r3
   2e4d4:	4bcf      	ldr	r3, [pc, #828]	; (2e814 <f_open+0x3a4>)
   2e4d6:	4798      	blx	r3
   2e4d8:	0003      	movs	r3, r0
   2e4da:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2e4dc:	2387      	movs	r3, #135	; 0x87
   2e4de:	009b      	lsls	r3, r3, #2
   2e4e0:	18fb      	adds	r3, r7, r3
   2e4e2:	2284      	movs	r2, #132	; 0x84
   2e4e4:	0092      	lsls	r2, r2, #2
   2e4e6:	18ba      	adds	r2, r7, r2
   2e4e8:	619a      	str	r2, [r3, #24]
   2e4ea:	2387      	movs	r3, #135	; 0x87
   2e4ec:	009b      	lsls	r3, r3, #2
   2e4ee:	18fb      	adds	r3, r7, r3
   2e4f0:	2210      	movs	r2, #16
   2e4f2:	18ba      	adds	r2, r7, r2
   2e4f4:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2e4f6:	4bc6      	ldr	r3, [pc, #792]	; (2e810 <f_open+0x3a0>)
   2e4f8:	18fb      	adds	r3, r7, r3
   2e4fa:	781b      	ldrb	r3, [r3, #0]
   2e4fc:	2b00      	cmp	r3, #0
   2e4fe:	d10b      	bne.n	2e518 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2e500:	68ba      	ldr	r2, [r7, #8]
   2e502:	4bc3      	ldr	r3, [pc, #780]	; (2e810 <f_open+0x3a0>)
   2e504:	18fc      	adds	r4, r7, r3
   2e506:	2387      	movs	r3, #135	; 0x87
   2e508:	009b      	lsls	r3, r3, #2
   2e50a:	18fb      	adds	r3, r7, r3
   2e50c:	0011      	movs	r1, r2
   2e50e:	0018      	movs	r0, r3
   2e510:	4bc1      	ldr	r3, [pc, #772]	; (2e818 <f_open+0x3a8>)
   2e512:	4798      	blx	r3
   2e514:	0003      	movs	r3, r0
   2e516:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2e518:	2387      	movs	r3, #135	; 0x87
   2e51a:	009b      	lsls	r3, r3, #2
   2e51c:	18fb      	adds	r3, r7, r3
   2e51e:	695b      	ldr	r3, [r3, #20]
   2e520:	2292      	movs	r2, #146	; 0x92
   2e522:	0092      	lsls	r2, r2, #2
   2e524:	18ba      	adds	r2, r7, r2
   2e526:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2e528:	4bb9      	ldr	r3, [pc, #740]	; (2e810 <f_open+0x3a0>)
   2e52a:	18fb      	adds	r3, r7, r3
   2e52c:	781b      	ldrb	r3, [r3, #0]
   2e52e:	2b00      	cmp	r3, #0
   2e530:	d109      	bne.n	2e546 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2e532:	2392      	movs	r3, #146	; 0x92
   2e534:	009b      	lsls	r3, r3, #2
   2e536:	18fb      	adds	r3, r7, r3
   2e538:	681b      	ldr	r3, [r3, #0]
   2e53a:	2b00      	cmp	r3, #0
   2e53c:	d103      	bne.n	2e546 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2e53e:	4bb4      	ldr	r3, [pc, #720]	; (2e810 <f_open+0x3a0>)
   2e540:	18fb      	adds	r3, r7, r3
   2e542:	2206      	movs	r2, #6
   2e544:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2e546:	4bb1      	ldr	r3, [pc, #708]	; (2e80c <f_open+0x39c>)
   2e548:	2294      	movs	r2, #148	; 0x94
   2e54a:	0092      	lsls	r2, r2, #2
   2e54c:	4694      	mov	ip, r2
   2e54e:	44bc      	add	ip, r7
   2e550:	4463      	add	r3, ip
   2e552:	781b      	ldrb	r3, [r3, #0]
   2e554:	221c      	movs	r2, #28
   2e556:	4013      	ands	r3, r2
   2e558:	d100      	bne.n	2e55c <f_open+0xec>
   2e55a:	e141      	b.n	2e7e0 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2e55c:	4bac      	ldr	r3, [pc, #688]	; (2e810 <f_open+0x3a0>)
   2e55e:	18fb      	adds	r3, r7, r3
   2e560:	781b      	ldrb	r3, [r3, #0]
   2e562:	2b00      	cmp	r3, #0
   2e564:	d027      	beq.n	2e5b6 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2e566:	4baa      	ldr	r3, [pc, #680]	; (2e810 <f_open+0x3a0>)
   2e568:	18fb      	adds	r3, r7, r3
   2e56a:	781b      	ldrb	r3, [r3, #0]
   2e56c:	2b04      	cmp	r3, #4
   2e56e:	d109      	bne.n	2e584 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2e570:	4ba7      	ldr	r3, [pc, #668]	; (2e810 <f_open+0x3a0>)
   2e572:	18fc      	adds	r4, r7, r3
   2e574:	2387      	movs	r3, #135	; 0x87
   2e576:	009b      	lsls	r3, r3, #2
   2e578:	18fb      	adds	r3, r7, r3
   2e57a:	0018      	movs	r0, r3
   2e57c:	4ba7      	ldr	r3, [pc, #668]	; (2e81c <f_open+0x3ac>)
   2e57e:	4798      	blx	r3
   2e580:	0003      	movs	r3, r0
   2e582:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2e584:	4ba1      	ldr	r3, [pc, #644]	; (2e80c <f_open+0x39c>)
   2e586:	2294      	movs	r2, #148	; 0x94
   2e588:	0092      	lsls	r2, r2, #2
   2e58a:	4694      	mov	ip, r2
   2e58c:	44bc      	add	ip, r7
   2e58e:	4463      	add	r3, ip
   2e590:	4a9e      	ldr	r2, [pc, #632]	; (2e80c <f_open+0x39c>)
   2e592:	2194      	movs	r1, #148	; 0x94
   2e594:	0089      	lsls	r1, r1, #2
   2e596:	468c      	mov	ip, r1
   2e598:	44bc      	add	ip, r7
   2e59a:	4462      	add	r2, ip
   2e59c:	7812      	ldrb	r2, [r2, #0]
   2e59e:	2108      	movs	r1, #8
   2e5a0:	430a      	orrs	r2, r1
   2e5a2:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2e5a4:	2387      	movs	r3, #135	; 0x87
   2e5a6:	009b      	lsls	r3, r3, #2
   2e5a8:	18fb      	adds	r3, r7, r3
   2e5aa:	695b      	ldr	r3, [r3, #20]
   2e5ac:	2292      	movs	r2, #146	; 0x92
   2e5ae:	0092      	lsls	r2, r2, #2
   2e5b0:	18ba      	adds	r2, r7, r2
   2e5b2:	6013      	str	r3, [r2, #0]
   2e5b4:	e01c      	b.n	2e5f0 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2e5b6:	2392      	movs	r3, #146	; 0x92
   2e5b8:	009b      	lsls	r3, r3, #2
   2e5ba:	18fb      	adds	r3, r7, r3
   2e5bc:	681b      	ldr	r3, [r3, #0]
   2e5be:	330b      	adds	r3, #11
   2e5c0:	781b      	ldrb	r3, [r3, #0]
   2e5c2:	001a      	movs	r2, r3
   2e5c4:	2311      	movs	r3, #17
   2e5c6:	4013      	ands	r3, r2
   2e5c8:	d004      	beq.n	2e5d4 <f_open+0x164>
				res = FR_DENIED;
   2e5ca:	4b91      	ldr	r3, [pc, #580]	; (2e810 <f_open+0x3a0>)
   2e5cc:	18fb      	adds	r3, r7, r3
   2e5ce:	2207      	movs	r2, #7
   2e5d0:	701a      	strb	r2, [r3, #0]
   2e5d2:	e00d      	b.n	2e5f0 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2e5d4:	4b8d      	ldr	r3, [pc, #564]	; (2e80c <f_open+0x39c>)
   2e5d6:	2294      	movs	r2, #148	; 0x94
   2e5d8:	0092      	lsls	r2, r2, #2
   2e5da:	4694      	mov	ip, r2
   2e5dc:	44bc      	add	ip, r7
   2e5de:	4463      	add	r3, ip
   2e5e0:	781b      	ldrb	r3, [r3, #0]
   2e5e2:	2204      	movs	r2, #4
   2e5e4:	4013      	ands	r3, r2
   2e5e6:	d003      	beq.n	2e5f0 <f_open+0x180>
					res = FR_EXIST;
   2e5e8:	4b89      	ldr	r3, [pc, #548]	; (2e810 <f_open+0x3a0>)
   2e5ea:	18fb      	adds	r3, r7, r3
   2e5ec:	2208      	movs	r2, #8
   2e5ee:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2e5f0:	4b87      	ldr	r3, [pc, #540]	; (2e810 <f_open+0x3a0>)
   2e5f2:	18fb      	adds	r3, r7, r3
   2e5f4:	781b      	ldrb	r3, [r3, #0]
   2e5f6:	2b00      	cmp	r3, #0
   2e5f8:	d000      	beq.n	2e5fc <f_open+0x18c>
   2e5fa:	e12f      	b.n	2e85c <f_open+0x3ec>
   2e5fc:	4b83      	ldr	r3, [pc, #524]	; (2e80c <f_open+0x39c>)
   2e5fe:	2294      	movs	r2, #148	; 0x94
   2e600:	0092      	lsls	r2, r2, #2
   2e602:	4694      	mov	ip, r2
   2e604:	44bc      	add	ip, r7
   2e606:	4463      	add	r3, ip
   2e608:	781b      	ldrb	r3, [r3, #0]
   2e60a:	2208      	movs	r2, #8
   2e60c:	4013      	ands	r3, r2
   2e60e:	d100      	bne.n	2e612 <f_open+0x1a2>
   2e610:	e124      	b.n	2e85c <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2e612:	4b83      	ldr	r3, [pc, #524]	; (2e820 <f_open+0x3b0>)
   2e614:	4798      	blx	r3
   2e616:	0003      	movs	r3, r0
   2e618:	2291      	movs	r2, #145	; 0x91
   2e61a:	0092      	lsls	r2, r2, #2
   2e61c:	18ba      	adds	r2, r7, r2
   2e61e:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2e620:	2392      	movs	r3, #146	; 0x92
   2e622:	009b      	lsls	r3, r3, #2
   2e624:	18fb      	adds	r3, r7, r3
   2e626:	681b      	ldr	r3, [r3, #0]
   2e628:	330e      	adds	r3, #14
   2e62a:	2291      	movs	r2, #145	; 0x91
   2e62c:	0092      	lsls	r2, r2, #2
   2e62e:	18ba      	adds	r2, r7, r2
   2e630:	6812      	ldr	r2, [r2, #0]
   2e632:	b2d2      	uxtb	r2, r2
   2e634:	701a      	strb	r2, [r3, #0]
   2e636:	2392      	movs	r3, #146	; 0x92
   2e638:	009b      	lsls	r3, r3, #2
   2e63a:	18fb      	adds	r3, r7, r3
   2e63c:	681b      	ldr	r3, [r3, #0]
   2e63e:	330f      	adds	r3, #15
   2e640:	2291      	movs	r2, #145	; 0x91
   2e642:	0092      	lsls	r2, r2, #2
   2e644:	18ba      	adds	r2, r7, r2
   2e646:	6812      	ldr	r2, [r2, #0]
   2e648:	b292      	uxth	r2, r2
   2e64a:	0a12      	lsrs	r2, r2, #8
   2e64c:	b292      	uxth	r2, r2
   2e64e:	b2d2      	uxtb	r2, r2
   2e650:	701a      	strb	r2, [r3, #0]
   2e652:	2392      	movs	r3, #146	; 0x92
   2e654:	009b      	lsls	r3, r3, #2
   2e656:	18fb      	adds	r3, r7, r3
   2e658:	681b      	ldr	r3, [r3, #0]
   2e65a:	3310      	adds	r3, #16
   2e65c:	2291      	movs	r2, #145	; 0x91
   2e65e:	0092      	lsls	r2, r2, #2
   2e660:	18ba      	adds	r2, r7, r2
   2e662:	6812      	ldr	r2, [r2, #0]
   2e664:	0c12      	lsrs	r2, r2, #16
   2e666:	b2d2      	uxtb	r2, r2
   2e668:	701a      	strb	r2, [r3, #0]
   2e66a:	2392      	movs	r3, #146	; 0x92
   2e66c:	009b      	lsls	r3, r3, #2
   2e66e:	18fb      	adds	r3, r7, r3
   2e670:	681b      	ldr	r3, [r3, #0]
   2e672:	3311      	adds	r3, #17
   2e674:	2291      	movs	r2, #145	; 0x91
   2e676:	0092      	lsls	r2, r2, #2
   2e678:	18ba      	adds	r2, r7, r2
   2e67a:	6812      	ldr	r2, [r2, #0]
   2e67c:	0e12      	lsrs	r2, r2, #24
   2e67e:	b2d2      	uxtb	r2, r2
   2e680:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2e682:	2392      	movs	r3, #146	; 0x92
   2e684:	009b      	lsls	r3, r3, #2
   2e686:	18fb      	adds	r3, r7, r3
   2e688:	681b      	ldr	r3, [r3, #0]
   2e68a:	330b      	adds	r3, #11
   2e68c:	2200      	movs	r2, #0
   2e68e:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2e690:	2392      	movs	r3, #146	; 0x92
   2e692:	009b      	lsls	r3, r3, #2
   2e694:	18fb      	adds	r3, r7, r3
   2e696:	681b      	ldr	r3, [r3, #0]
   2e698:	331c      	adds	r3, #28
   2e69a:	2200      	movs	r2, #0
   2e69c:	701a      	strb	r2, [r3, #0]
   2e69e:	2392      	movs	r3, #146	; 0x92
   2e6a0:	009b      	lsls	r3, r3, #2
   2e6a2:	18fb      	adds	r3, r7, r3
   2e6a4:	681b      	ldr	r3, [r3, #0]
   2e6a6:	331d      	adds	r3, #29
   2e6a8:	2200      	movs	r2, #0
   2e6aa:	701a      	strb	r2, [r3, #0]
   2e6ac:	2392      	movs	r3, #146	; 0x92
   2e6ae:	009b      	lsls	r3, r3, #2
   2e6b0:	18fb      	adds	r3, r7, r3
   2e6b2:	681b      	ldr	r3, [r3, #0]
   2e6b4:	331e      	adds	r3, #30
   2e6b6:	2200      	movs	r2, #0
   2e6b8:	701a      	strb	r2, [r3, #0]
   2e6ba:	2392      	movs	r3, #146	; 0x92
   2e6bc:	009b      	lsls	r3, r3, #2
   2e6be:	18fb      	adds	r3, r7, r3
   2e6c0:	681b      	ldr	r3, [r3, #0]
   2e6c2:	331f      	adds	r3, #31
   2e6c4:	2200      	movs	r2, #0
   2e6c6:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2e6c8:	2392      	movs	r3, #146	; 0x92
   2e6ca:	009b      	lsls	r3, r3, #2
   2e6cc:	18fb      	adds	r3, r7, r3
   2e6ce:	681b      	ldr	r3, [r3, #0]
   2e6d0:	3315      	adds	r3, #21
   2e6d2:	781b      	ldrb	r3, [r3, #0]
   2e6d4:	021b      	lsls	r3, r3, #8
   2e6d6:	b21a      	sxth	r2, r3
   2e6d8:	2392      	movs	r3, #146	; 0x92
   2e6da:	009b      	lsls	r3, r3, #2
   2e6dc:	18fb      	adds	r3, r7, r3
   2e6de:	681b      	ldr	r3, [r3, #0]
   2e6e0:	3314      	adds	r3, #20
   2e6e2:	781b      	ldrb	r3, [r3, #0]
   2e6e4:	b21b      	sxth	r3, r3
   2e6e6:	4313      	orrs	r3, r2
   2e6e8:	b21b      	sxth	r3, r3
   2e6ea:	b29b      	uxth	r3, r3
   2e6ec:	041b      	lsls	r3, r3, #16
   2e6ee:	2292      	movs	r2, #146	; 0x92
   2e6f0:	0092      	lsls	r2, r2, #2
   2e6f2:	18ba      	adds	r2, r7, r2
   2e6f4:	6812      	ldr	r2, [r2, #0]
   2e6f6:	321b      	adds	r2, #27
   2e6f8:	7812      	ldrb	r2, [r2, #0]
   2e6fa:	0212      	lsls	r2, r2, #8
   2e6fc:	b211      	sxth	r1, r2
   2e6fe:	2292      	movs	r2, #146	; 0x92
   2e700:	0092      	lsls	r2, r2, #2
   2e702:	18ba      	adds	r2, r7, r2
   2e704:	6812      	ldr	r2, [r2, #0]
   2e706:	321a      	adds	r2, #26
   2e708:	7812      	ldrb	r2, [r2, #0]
   2e70a:	b212      	sxth	r2, r2
   2e70c:	430a      	orrs	r2, r1
   2e70e:	b212      	sxth	r2, r2
   2e710:	b292      	uxth	r2, r2
   2e712:	4313      	orrs	r3, r2
   2e714:	2290      	movs	r2, #144	; 0x90
   2e716:	0092      	lsls	r2, r2, #2
   2e718:	18ba      	adds	r2, r7, r2
   2e71a:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2e71c:	2392      	movs	r3, #146	; 0x92
   2e71e:	009b      	lsls	r3, r3, #2
   2e720:	18fb      	adds	r3, r7, r3
   2e722:	681b      	ldr	r3, [r3, #0]
   2e724:	331a      	adds	r3, #26
   2e726:	2200      	movs	r2, #0
   2e728:	701a      	strb	r2, [r3, #0]
   2e72a:	2392      	movs	r3, #146	; 0x92
   2e72c:	009b      	lsls	r3, r3, #2
   2e72e:	18fb      	adds	r3, r7, r3
   2e730:	681b      	ldr	r3, [r3, #0]
   2e732:	331b      	adds	r3, #27
   2e734:	2200      	movs	r2, #0
   2e736:	701a      	strb	r2, [r3, #0]
   2e738:	2392      	movs	r3, #146	; 0x92
   2e73a:	009b      	lsls	r3, r3, #2
   2e73c:	18fb      	adds	r3, r7, r3
   2e73e:	681b      	ldr	r3, [r3, #0]
   2e740:	3314      	adds	r3, #20
   2e742:	2200      	movs	r2, #0
   2e744:	701a      	strb	r2, [r3, #0]
   2e746:	2392      	movs	r3, #146	; 0x92
   2e748:	009b      	lsls	r3, r3, #2
   2e74a:	18fb      	adds	r3, r7, r3
   2e74c:	681b      	ldr	r3, [r3, #0]
   2e74e:	3315      	adds	r3, #21
   2e750:	2200      	movs	r2, #0
   2e752:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2e754:	2387      	movs	r3, #135	; 0x87
   2e756:	009b      	lsls	r3, r3, #2
   2e758:	18fb      	adds	r3, r7, r3
   2e75a:	681b      	ldr	r3, [r3, #0]
   2e75c:	2201      	movs	r2, #1
   2e75e:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2e760:	2390      	movs	r3, #144	; 0x90
   2e762:	009b      	lsls	r3, r3, #2
   2e764:	18fb      	adds	r3, r7, r3
   2e766:	681b      	ldr	r3, [r3, #0]
   2e768:	2b00      	cmp	r3, #0
   2e76a:	d100      	bne.n	2e76e <f_open+0x2fe>
   2e76c:	e076      	b.n	2e85c <f_open+0x3ec>
				dw = dj.fs->winsect;
   2e76e:	2387      	movs	r3, #135	; 0x87
   2e770:	009b      	lsls	r3, r3, #2
   2e772:	18fb      	adds	r3, r7, r3
   2e774:	681b      	ldr	r3, [r3, #0]
   2e776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e778:	2291      	movs	r2, #145	; 0x91
   2e77a:	0092      	lsls	r2, r2, #2
   2e77c:	18ba      	adds	r2, r7, r2
   2e77e:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2e780:	2387      	movs	r3, #135	; 0x87
   2e782:	009b      	lsls	r3, r3, #2
   2e784:	18fb      	adds	r3, r7, r3
   2e786:	681b      	ldr	r3, [r3, #0]
   2e788:	4a21      	ldr	r2, [pc, #132]	; (2e810 <f_open+0x3a0>)
   2e78a:	18bc      	adds	r4, r7, r2
   2e78c:	2290      	movs	r2, #144	; 0x90
   2e78e:	0092      	lsls	r2, r2, #2
   2e790:	18ba      	adds	r2, r7, r2
   2e792:	6812      	ldr	r2, [r2, #0]
   2e794:	0011      	movs	r1, r2
   2e796:	0018      	movs	r0, r3
   2e798:	4b22      	ldr	r3, [pc, #136]	; (2e824 <f_open+0x3b4>)
   2e79a:	4798      	blx	r3
   2e79c:	0003      	movs	r3, r0
   2e79e:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2e7a0:	4b1b      	ldr	r3, [pc, #108]	; (2e810 <f_open+0x3a0>)
   2e7a2:	18fb      	adds	r3, r7, r3
   2e7a4:	781b      	ldrb	r3, [r3, #0]
   2e7a6:	2b00      	cmp	r3, #0
   2e7a8:	d158      	bne.n	2e85c <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2e7aa:	2387      	movs	r3, #135	; 0x87
   2e7ac:	009b      	lsls	r3, r3, #2
   2e7ae:	18fb      	adds	r3, r7, r3
   2e7b0:	681b      	ldr	r3, [r3, #0]
   2e7b2:	2290      	movs	r2, #144	; 0x90
   2e7b4:	0092      	lsls	r2, r2, #2
   2e7b6:	18ba      	adds	r2, r7, r2
   2e7b8:	6812      	ldr	r2, [r2, #0]
   2e7ba:	3a01      	subs	r2, #1
   2e7bc:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2e7be:	2387      	movs	r3, #135	; 0x87
   2e7c0:	009b      	lsls	r3, r3, #2
   2e7c2:	18fb      	adds	r3, r7, r3
   2e7c4:	681b      	ldr	r3, [r3, #0]
   2e7c6:	4a12      	ldr	r2, [pc, #72]	; (2e810 <f_open+0x3a0>)
   2e7c8:	18bc      	adds	r4, r7, r2
   2e7ca:	2291      	movs	r2, #145	; 0x91
   2e7cc:	0092      	lsls	r2, r2, #2
   2e7ce:	18ba      	adds	r2, r7, r2
   2e7d0:	6812      	ldr	r2, [r2, #0]
   2e7d2:	0011      	movs	r1, r2
   2e7d4:	0018      	movs	r0, r3
   2e7d6:	4b14      	ldr	r3, [pc, #80]	; (2e828 <f_open+0x3b8>)
   2e7d8:	4798      	blx	r3
   2e7da:	0003      	movs	r3, r0
   2e7dc:	7023      	strb	r3, [r4, #0]
   2e7de:	e03d      	b.n	2e85c <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2e7e0:	4b0b      	ldr	r3, [pc, #44]	; (2e810 <f_open+0x3a0>)
   2e7e2:	18fb      	adds	r3, r7, r3
   2e7e4:	781b      	ldrb	r3, [r3, #0]
   2e7e6:	2b00      	cmp	r3, #0
   2e7e8:	d138      	bne.n	2e85c <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2e7ea:	2392      	movs	r3, #146	; 0x92
   2e7ec:	009b      	lsls	r3, r3, #2
   2e7ee:	18fb      	adds	r3, r7, r3
   2e7f0:	681b      	ldr	r3, [r3, #0]
   2e7f2:	330b      	adds	r3, #11
   2e7f4:	781b      	ldrb	r3, [r3, #0]
   2e7f6:	001a      	movs	r2, r3
   2e7f8:	2310      	movs	r3, #16
   2e7fa:	4013      	ands	r3, r2
   2e7fc:	d016      	beq.n	2e82c <f_open+0x3bc>
				res = FR_NO_FILE;
   2e7fe:	4b04      	ldr	r3, [pc, #16]	; (2e810 <f_open+0x3a0>)
   2e800:	18fb      	adds	r3, r7, r3
   2e802:	2204      	movs	r2, #4
   2e804:	701a      	strb	r2, [r3, #0]
   2e806:	e029      	b.n	2e85c <f_open+0x3ec>
   2e808:	fffffdac 	.word	0xfffffdac
   2e80c:	fffffdb7 	.word	0xfffffdb7
   2e810:	0000024f 	.word	0x0000024f
   2e814:	0002ddc9 	.word	0x0002ddc9
   2e818:	0002dbbd 	.word	0x0002dbbd
   2e81c:	0002d40d 	.word	0x0002d40d
   2e820:	0002c205 	.word	0x0002c205
   2e824:	0002c989 	.word	0x0002c989
   2e828:	0002c349 	.word	0x0002c349
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2e82c:	4b5a      	ldr	r3, [pc, #360]	; (2e998 <f_open+0x528>)
   2e82e:	2294      	movs	r2, #148	; 0x94
   2e830:	0092      	lsls	r2, r2, #2
   2e832:	4694      	mov	ip, r2
   2e834:	44bc      	add	ip, r7
   2e836:	4463      	add	r3, ip
   2e838:	781b      	ldrb	r3, [r3, #0]
   2e83a:	2202      	movs	r2, #2
   2e83c:	4013      	ands	r3, r2
   2e83e:	d00d      	beq.n	2e85c <f_open+0x3ec>
   2e840:	2392      	movs	r3, #146	; 0x92
   2e842:	009b      	lsls	r3, r3, #2
   2e844:	18fb      	adds	r3, r7, r3
   2e846:	681b      	ldr	r3, [r3, #0]
   2e848:	330b      	adds	r3, #11
   2e84a:	781b      	ldrb	r3, [r3, #0]
   2e84c:	001a      	movs	r2, r3
   2e84e:	2301      	movs	r3, #1
   2e850:	4013      	ands	r3, r2
   2e852:	d003      	beq.n	2e85c <f_open+0x3ec>
					res = FR_DENIED;
   2e854:	4b51      	ldr	r3, [pc, #324]	; (2e99c <f_open+0x52c>)
   2e856:	18fb      	adds	r3, r7, r3
   2e858:	2207      	movs	r2, #7
   2e85a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2e85c:	4b4f      	ldr	r3, [pc, #316]	; (2e99c <f_open+0x52c>)
   2e85e:	18fb      	adds	r3, r7, r3
   2e860:	781b      	ldrb	r3, [r3, #0]
   2e862:	2b00      	cmp	r3, #0
   2e864:	d126      	bne.n	2e8b4 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2e866:	4b4c      	ldr	r3, [pc, #304]	; (2e998 <f_open+0x528>)
   2e868:	2294      	movs	r2, #148	; 0x94
   2e86a:	0092      	lsls	r2, r2, #2
   2e86c:	4694      	mov	ip, r2
   2e86e:	44bc      	add	ip, r7
   2e870:	4463      	add	r3, ip
   2e872:	781b      	ldrb	r3, [r3, #0]
   2e874:	2208      	movs	r2, #8
   2e876:	4013      	ands	r3, r2
   2e878:	d00f      	beq.n	2e89a <f_open+0x42a>
			mode |= FA__WRITTEN;
   2e87a:	4b47      	ldr	r3, [pc, #284]	; (2e998 <f_open+0x528>)
   2e87c:	2294      	movs	r2, #148	; 0x94
   2e87e:	0092      	lsls	r2, r2, #2
   2e880:	4694      	mov	ip, r2
   2e882:	44bc      	add	ip, r7
   2e884:	4463      	add	r3, ip
   2e886:	4a44      	ldr	r2, [pc, #272]	; (2e998 <f_open+0x528>)
   2e888:	2194      	movs	r1, #148	; 0x94
   2e88a:	0089      	lsls	r1, r1, #2
   2e88c:	468c      	mov	ip, r1
   2e88e:	44bc      	add	ip, r7
   2e890:	4462      	add	r2, ip
   2e892:	7812      	ldrb	r2, [r2, #0]
   2e894:	2120      	movs	r1, #32
   2e896:	430a      	orrs	r2, r1
   2e898:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2e89a:	2387      	movs	r3, #135	; 0x87
   2e89c:	009b      	lsls	r3, r3, #2
   2e89e:	18fb      	adds	r3, r7, r3
   2e8a0:	681b      	ldr	r3, [r3, #0]
   2e8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e8a4:	68fb      	ldr	r3, [r7, #12]
   2e8a6:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2e8a8:	68fb      	ldr	r3, [r7, #12]
   2e8aa:	2292      	movs	r2, #146	; 0x92
   2e8ac:	0092      	lsls	r2, r2, #2
   2e8ae:	18ba      	adds	r2, r7, r2
   2e8b0:	6812      	ldr	r2, [r2, #0]
   2e8b2:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2e8b4:	4b39      	ldr	r3, [pc, #228]	; (2e99c <f_open+0x52c>)
   2e8b6:	18fb      	adds	r3, r7, r3
   2e8b8:	781b      	ldrb	r3, [r3, #0]
   2e8ba:	2b00      	cmp	r3, #0
   2e8bc:	d163      	bne.n	2e986 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2e8be:	68fb      	ldr	r3, [r7, #12]
   2e8c0:	4a35      	ldr	r2, [pc, #212]	; (2e998 <f_open+0x528>)
   2e8c2:	2194      	movs	r1, #148	; 0x94
   2e8c4:	0089      	lsls	r1, r1, #2
   2e8c6:	468c      	mov	ip, r1
   2e8c8:	44bc      	add	ip, r7
   2e8ca:	4462      	add	r2, ip
   2e8cc:	7812      	ldrb	r2, [r2, #0]
   2e8ce:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2e8d0:	2392      	movs	r3, #146	; 0x92
   2e8d2:	009b      	lsls	r3, r3, #2
   2e8d4:	18fb      	adds	r3, r7, r3
   2e8d6:	681b      	ldr	r3, [r3, #0]
   2e8d8:	3315      	adds	r3, #21
   2e8da:	781b      	ldrb	r3, [r3, #0]
   2e8dc:	021b      	lsls	r3, r3, #8
   2e8de:	b21a      	sxth	r2, r3
   2e8e0:	2392      	movs	r3, #146	; 0x92
   2e8e2:	009b      	lsls	r3, r3, #2
   2e8e4:	18fb      	adds	r3, r7, r3
   2e8e6:	681b      	ldr	r3, [r3, #0]
   2e8e8:	3314      	adds	r3, #20
   2e8ea:	781b      	ldrb	r3, [r3, #0]
   2e8ec:	b21b      	sxth	r3, r3
   2e8ee:	4313      	orrs	r3, r2
   2e8f0:	b21b      	sxth	r3, r3
   2e8f2:	b29b      	uxth	r3, r3
   2e8f4:	041b      	lsls	r3, r3, #16
   2e8f6:	2292      	movs	r2, #146	; 0x92
   2e8f8:	0092      	lsls	r2, r2, #2
   2e8fa:	18ba      	adds	r2, r7, r2
   2e8fc:	6812      	ldr	r2, [r2, #0]
   2e8fe:	321b      	adds	r2, #27
   2e900:	7812      	ldrb	r2, [r2, #0]
   2e902:	0212      	lsls	r2, r2, #8
   2e904:	b211      	sxth	r1, r2
   2e906:	2292      	movs	r2, #146	; 0x92
   2e908:	0092      	lsls	r2, r2, #2
   2e90a:	18ba      	adds	r2, r7, r2
   2e90c:	6812      	ldr	r2, [r2, #0]
   2e90e:	321a      	adds	r2, #26
   2e910:	7812      	ldrb	r2, [r2, #0]
   2e912:	b212      	sxth	r2, r2
   2e914:	430a      	orrs	r2, r1
   2e916:	b212      	sxth	r2, r2
   2e918:	b292      	uxth	r2, r2
   2e91a:	431a      	orrs	r2, r3
   2e91c:	68fb      	ldr	r3, [r7, #12]
   2e91e:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2e920:	2392      	movs	r3, #146	; 0x92
   2e922:	009b      	lsls	r3, r3, #2
   2e924:	18fb      	adds	r3, r7, r3
   2e926:	681b      	ldr	r3, [r3, #0]
   2e928:	331f      	adds	r3, #31
   2e92a:	781b      	ldrb	r3, [r3, #0]
   2e92c:	061a      	lsls	r2, r3, #24
   2e92e:	2392      	movs	r3, #146	; 0x92
   2e930:	009b      	lsls	r3, r3, #2
   2e932:	18fb      	adds	r3, r7, r3
   2e934:	681b      	ldr	r3, [r3, #0]
   2e936:	331e      	adds	r3, #30
   2e938:	781b      	ldrb	r3, [r3, #0]
   2e93a:	041b      	lsls	r3, r3, #16
   2e93c:	4313      	orrs	r3, r2
   2e93e:	2292      	movs	r2, #146	; 0x92
   2e940:	0092      	lsls	r2, r2, #2
   2e942:	18ba      	adds	r2, r7, r2
   2e944:	6812      	ldr	r2, [r2, #0]
   2e946:	321d      	adds	r2, #29
   2e948:	7812      	ldrb	r2, [r2, #0]
   2e94a:	0212      	lsls	r2, r2, #8
   2e94c:	4313      	orrs	r3, r2
   2e94e:	2292      	movs	r2, #146	; 0x92
   2e950:	0092      	lsls	r2, r2, #2
   2e952:	18ba      	adds	r2, r7, r2
   2e954:	6812      	ldr	r2, [r2, #0]
   2e956:	321c      	adds	r2, #28
   2e958:	7812      	ldrb	r2, [r2, #0]
   2e95a:	431a      	orrs	r2, r3
   2e95c:	68fb      	ldr	r3, [r7, #12]
   2e95e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2e960:	68fb      	ldr	r3, [r7, #12]
   2e962:	2200      	movs	r2, #0
   2e964:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2e966:	68fb      	ldr	r3, [r7, #12]
   2e968:	2200      	movs	r2, #0
   2e96a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2e96c:	2387      	movs	r3, #135	; 0x87
   2e96e:	009b      	lsls	r3, r3, #2
   2e970:	18fb      	adds	r3, r7, r3
   2e972:	681a      	ldr	r2, [r3, #0]
   2e974:	68fb      	ldr	r3, [r7, #12]
   2e976:	601a      	str	r2, [r3, #0]
   2e978:	2387      	movs	r3, #135	; 0x87
   2e97a:	009b      	lsls	r3, r3, #2
   2e97c:	18fb      	adds	r3, r7, r3
   2e97e:	681b      	ldr	r3, [r3, #0]
   2e980:	88da      	ldrh	r2, [r3, #6]
   2e982:	68fb      	ldr	r3, [r7, #12]
   2e984:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2e986:	4b05      	ldr	r3, [pc, #20]	; (2e99c <f_open+0x52c>)
   2e988:	18fb      	adds	r3, r7, r3
   2e98a:	781b      	ldrb	r3, [r3, #0]
}
   2e98c:	0018      	movs	r0, r3
   2e98e:	46bd      	mov	sp, r7
   2e990:	2395      	movs	r3, #149	; 0x95
   2e992:	009b      	lsls	r3, r3, #2
   2e994:	449d      	add	sp, r3
   2e996:	bd90      	pop	{r4, r7, pc}
   2e998:	fffffdb7 	.word	0xfffffdb7
   2e99c:	0000024f 	.word	0x0000024f

0002e9a0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2e9a0:	b590      	push	{r4, r7, lr}
   2e9a2:	b08b      	sub	sp, #44	; 0x2c
   2e9a4:	af00      	add	r7, sp, #0
   2e9a6:	60f8      	str	r0, [r7, #12]
   2e9a8:	60b9      	str	r1, [r7, #8]
   2e9aa:	607a      	str	r2, [r7, #4]
   2e9ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2e9ae:	68bb      	ldr	r3, [r7, #8]
   2e9b0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2e9b2:	683b      	ldr	r3, [r7, #0]
   2e9b4:	2200      	movs	r2, #0
   2e9b6:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2e9b8:	68fb      	ldr	r3, [r7, #12]
   2e9ba:	681a      	ldr	r2, [r3, #0]
   2e9bc:	68fb      	ldr	r3, [r7, #12]
   2e9be:	889b      	ldrh	r3, [r3, #4]
   2e9c0:	2117      	movs	r1, #23
   2e9c2:	187c      	adds	r4, r7, r1
   2e9c4:	0019      	movs	r1, r3
   2e9c6:	0010      	movs	r0, r2
   2e9c8:	4bc3      	ldr	r3, [pc, #780]	; (2ecd8 <f_write+0x338>)
   2e9ca:	4798      	blx	r3
   2e9cc:	0003      	movs	r3, r0
   2e9ce:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2e9d0:	2317      	movs	r3, #23
   2e9d2:	18fb      	adds	r3, r7, r3
   2e9d4:	781b      	ldrb	r3, [r3, #0]
   2e9d6:	2b00      	cmp	r3, #0
   2e9d8:	d003      	beq.n	2e9e2 <f_write+0x42>
   2e9da:	2317      	movs	r3, #23
   2e9dc:	18fb      	adds	r3, r7, r3
   2e9de:	781b      	ldrb	r3, [r3, #0]
   2e9e0:	e176      	b.n	2ecd0 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2e9e2:	68fb      	ldr	r3, [r7, #12]
   2e9e4:	799b      	ldrb	r3, [r3, #6]
   2e9e6:	b25b      	sxtb	r3, r3
   2e9e8:	2b00      	cmp	r3, #0
   2e9ea:	da01      	bge.n	2e9f0 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2e9ec:	2302      	movs	r3, #2
   2e9ee:	e16f      	b.n	2ecd0 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2e9f0:	68fb      	ldr	r3, [r7, #12]
   2e9f2:	799b      	ldrb	r3, [r3, #6]
   2e9f4:	001a      	movs	r2, r3
   2e9f6:	2302      	movs	r3, #2
   2e9f8:	4013      	ands	r3, r2
   2e9fa:	d101      	bne.n	2ea00 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2e9fc:	2307      	movs	r3, #7
   2e9fe:	e167      	b.n	2ecd0 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2ea00:	68fb      	ldr	r3, [r7, #12]
   2ea02:	68da      	ldr	r2, [r3, #12]
   2ea04:	687b      	ldr	r3, [r7, #4]
   2ea06:	18d2      	adds	r2, r2, r3
   2ea08:	68fb      	ldr	r3, [r7, #12]
   2ea0a:	68db      	ldr	r3, [r3, #12]
   2ea0c:	429a      	cmp	r2, r3
   2ea0e:	d300      	bcc.n	2ea12 <f_write+0x72>
   2ea10:	e146      	b.n	2eca0 <f_write+0x300>
   2ea12:	2300      	movs	r3, #0
   2ea14:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2ea16:	e143      	b.n	2eca0 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2ea18:	68fb      	ldr	r3, [r7, #12]
   2ea1a:	689b      	ldr	r3, [r3, #8]
   2ea1c:	05db      	lsls	r3, r3, #23
   2ea1e:	0ddb      	lsrs	r3, r3, #23
   2ea20:	d000      	beq.n	2ea24 <f_write+0x84>
   2ea22:	e0f6      	b.n	2ec12 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2ea24:	68fb      	ldr	r3, [r7, #12]
   2ea26:	689b      	ldr	r3, [r3, #8]
   2ea28:	0a5b      	lsrs	r3, r3, #9
   2ea2a:	b2da      	uxtb	r2, r3
   2ea2c:	68fb      	ldr	r3, [r7, #12]
   2ea2e:	681b      	ldr	r3, [r3, #0]
   2ea30:	789b      	ldrb	r3, [r3, #2]
   2ea32:	3b01      	subs	r3, #1
   2ea34:	b2d9      	uxtb	r1, r3
   2ea36:	2316      	movs	r3, #22
   2ea38:	18fb      	adds	r3, r7, r3
   2ea3a:	400a      	ands	r2, r1
   2ea3c:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2ea3e:	2316      	movs	r3, #22
   2ea40:	18fb      	adds	r3, r7, r3
   2ea42:	781b      	ldrb	r3, [r3, #0]
   2ea44:	2b00      	cmp	r3, #0
   2ea46:	d140      	bne.n	2eaca <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2ea48:	68fb      	ldr	r3, [r7, #12]
   2ea4a:	689b      	ldr	r3, [r3, #8]
   2ea4c:	2b00      	cmp	r3, #0
   2ea4e:	d111      	bne.n	2ea74 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2ea50:	68fb      	ldr	r3, [r7, #12]
   2ea52:	691b      	ldr	r3, [r3, #16]
   2ea54:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2ea56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ea58:	2b00      	cmp	r3, #0
   2ea5a:	d115      	bne.n	2ea88 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2ea5c:	68fb      	ldr	r3, [r7, #12]
   2ea5e:	681b      	ldr	r3, [r3, #0]
   2ea60:	2100      	movs	r1, #0
   2ea62:	0018      	movs	r0, r3
   2ea64:	4b9d      	ldr	r3, [pc, #628]	; (2ecdc <f_write+0x33c>)
   2ea66:	4798      	blx	r3
   2ea68:	0003      	movs	r3, r0
   2ea6a:	627b      	str	r3, [r7, #36]	; 0x24
   2ea6c:	68fb      	ldr	r3, [r7, #12]
   2ea6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ea70:	611a      	str	r2, [r3, #16]
   2ea72:	e009      	b.n	2ea88 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2ea74:	68fb      	ldr	r3, [r7, #12]
   2ea76:	681a      	ldr	r2, [r3, #0]
   2ea78:	68fb      	ldr	r3, [r7, #12]
   2ea7a:	695b      	ldr	r3, [r3, #20]
   2ea7c:	0019      	movs	r1, r3
   2ea7e:	0010      	movs	r0, r2
   2ea80:	4b96      	ldr	r3, [pc, #600]	; (2ecdc <f_write+0x33c>)
   2ea82:	4798      	blx	r3
   2ea84:	0003      	movs	r3, r0
   2ea86:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ea8a:	2b00      	cmp	r3, #0
   2ea8c:	d100      	bne.n	2ea90 <f_write+0xf0>
   2ea8e:	e10c      	b.n	2ecaa <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2ea90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ea92:	2b01      	cmp	r3, #1
   2ea94:	d109      	bne.n	2eaaa <f_write+0x10a>
   2ea96:	68fb      	ldr	r3, [r7, #12]
   2ea98:	799b      	ldrb	r3, [r3, #6]
   2ea9a:	2280      	movs	r2, #128	; 0x80
   2ea9c:	4252      	negs	r2, r2
   2ea9e:	4313      	orrs	r3, r2
   2eaa0:	b2da      	uxtb	r2, r3
   2eaa2:	68fb      	ldr	r3, [r7, #12]
   2eaa4:	719a      	strb	r2, [r3, #6]
   2eaa6:	2302      	movs	r3, #2
   2eaa8:	e112      	b.n	2ecd0 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2eaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eaac:	3301      	adds	r3, #1
   2eaae:	d109      	bne.n	2eac4 <f_write+0x124>
   2eab0:	68fb      	ldr	r3, [r7, #12]
   2eab2:	799b      	ldrb	r3, [r3, #6]
   2eab4:	2280      	movs	r2, #128	; 0x80
   2eab6:	4252      	negs	r2, r2
   2eab8:	4313      	orrs	r3, r2
   2eaba:	b2da      	uxtb	r2, r3
   2eabc:	68fb      	ldr	r3, [r7, #12]
   2eabe:	719a      	strb	r2, [r3, #6]
   2eac0:	2301      	movs	r3, #1
   2eac2:	e105      	b.n	2ecd0 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2eac4:	68fb      	ldr	r3, [r7, #12]
   2eac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2eac8:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2eaca:	68fb      	ldr	r3, [r7, #12]
   2eacc:	681b      	ldr	r3, [r3, #0]
   2eace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ead0:	68fb      	ldr	r3, [r7, #12]
   2ead2:	699b      	ldr	r3, [r3, #24]
   2ead4:	429a      	cmp	r2, r3
   2ead6:	d111      	bne.n	2eafc <f_write+0x15c>
   2ead8:	68fb      	ldr	r3, [r7, #12]
   2eada:	681b      	ldr	r3, [r3, #0]
   2eadc:	2100      	movs	r1, #0
   2eade:	0018      	movs	r0, r3
   2eae0:	4b7f      	ldr	r3, [pc, #508]	; (2ece0 <f_write+0x340>)
   2eae2:	4798      	blx	r3
   2eae4:	1e03      	subs	r3, r0, #0
   2eae6:	d009      	beq.n	2eafc <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2eae8:	68fb      	ldr	r3, [r7, #12]
   2eaea:	799b      	ldrb	r3, [r3, #6]
   2eaec:	2280      	movs	r2, #128	; 0x80
   2eaee:	4252      	negs	r2, r2
   2eaf0:	4313      	orrs	r3, r2
   2eaf2:	b2da      	uxtb	r2, r3
   2eaf4:	68fb      	ldr	r3, [r7, #12]
   2eaf6:	719a      	strb	r2, [r3, #6]
   2eaf8:	2301      	movs	r3, #1
   2eafa:	e0e9      	b.n	2ecd0 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2eafc:	68fb      	ldr	r3, [r7, #12]
   2eafe:	681a      	ldr	r2, [r3, #0]
   2eb00:	68fb      	ldr	r3, [r7, #12]
   2eb02:	695b      	ldr	r3, [r3, #20]
   2eb04:	0019      	movs	r1, r3
   2eb06:	0010      	movs	r0, r2
   2eb08:	4b76      	ldr	r3, [pc, #472]	; (2ece4 <f_write+0x344>)
   2eb0a:	4798      	blx	r3
   2eb0c:	0003      	movs	r3, r0
   2eb0e:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2eb10:	693b      	ldr	r3, [r7, #16]
   2eb12:	2b00      	cmp	r3, #0
   2eb14:	d109      	bne.n	2eb2a <f_write+0x18a>
   2eb16:	68fb      	ldr	r3, [r7, #12]
   2eb18:	799b      	ldrb	r3, [r3, #6]
   2eb1a:	2280      	movs	r2, #128	; 0x80
   2eb1c:	4252      	negs	r2, r2
   2eb1e:	4313      	orrs	r3, r2
   2eb20:	b2da      	uxtb	r2, r3
   2eb22:	68fb      	ldr	r3, [r7, #12]
   2eb24:	719a      	strb	r2, [r3, #6]
   2eb26:	2302      	movs	r3, #2
   2eb28:	e0d2      	b.n	2ecd0 <f_write+0x330>
			sect += csect;
   2eb2a:	2316      	movs	r3, #22
   2eb2c:	18fb      	adds	r3, r7, r3
   2eb2e:	781b      	ldrb	r3, [r3, #0]
   2eb30:	693a      	ldr	r2, [r7, #16]
   2eb32:	18d3      	adds	r3, r2, r3
   2eb34:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2eb36:	687b      	ldr	r3, [r7, #4]
   2eb38:	0a5b      	lsrs	r3, r3, #9
   2eb3a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2eb3c:	69fb      	ldr	r3, [r7, #28]
   2eb3e:	2b00      	cmp	r3, #0
   2eb40:	d048      	beq.n	2ebd4 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2eb42:	2316      	movs	r3, #22
   2eb44:	18fb      	adds	r3, r7, r3
   2eb46:	781a      	ldrb	r2, [r3, #0]
   2eb48:	69fb      	ldr	r3, [r7, #28]
   2eb4a:	18d2      	adds	r2, r2, r3
   2eb4c:	68fb      	ldr	r3, [r7, #12]
   2eb4e:	681b      	ldr	r3, [r3, #0]
   2eb50:	789b      	ldrb	r3, [r3, #2]
   2eb52:	429a      	cmp	r2, r3
   2eb54:	d908      	bls.n	2eb68 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2eb56:	68fb      	ldr	r3, [r7, #12]
   2eb58:	681b      	ldr	r3, [r3, #0]
   2eb5a:	789b      	ldrb	r3, [r3, #2]
   2eb5c:	001a      	movs	r2, r3
   2eb5e:	2316      	movs	r3, #22
   2eb60:	18fb      	adds	r3, r7, r3
   2eb62:	781b      	ldrb	r3, [r3, #0]
   2eb64:	1ad3      	subs	r3, r2, r3
   2eb66:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2eb68:	68fb      	ldr	r3, [r7, #12]
   2eb6a:	681b      	ldr	r3, [r3, #0]
   2eb6c:	7858      	ldrb	r0, [r3, #1]
   2eb6e:	69fb      	ldr	r3, [r7, #28]
   2eb70:	b2db      	uxtb	r3, r3
   2eb72:	693a      	ldr	r2, [r7, #16]
   2eb74:	69b9      	ldr	r1, [r7, #24]
   2eb76:	4c5c      	ldr	r4, [pc, #368]	; (2ece8 <f_write+0x348>)
   2eb78:	47a0      	blx	r4
   2eb7a:	1e03      	subs	r3, r0, #0
   2eb7c:	d009      	beq.n	2eb92 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2eb7e:	68fb      	ldr	r3, [r7, #12]
   2eb80:	799b      	ldrb	r3, [r3, #6]
   2eb82:	2280      	movs	r2, #128	; 0x80
   2eb84:	4252      	negs	r2, r2
   2eb86:	4313      	orrs	r3, r2
   2eb88:	b2da      	uxtb	r2, r3
   2eb8a:	68fb      	ldr	r3, [r7, #12]
   2eb8c:	719a      	strb	r2, [r3, #6]
   2eb8e:	2301      	movs	r3, #1
   2eb90:	e09e      	b.n	2ecd0 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2eb92:	68fb      	ldr	r3, [r7, #12]
   2eb94:	681b      	ldr	r3, [r3, #0]
   2eb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2eb98:	693b      	ldr	r3, [r7, #16]
   2eb9a:	1ad2      	subs	r2, r2, r3
   2eb9c:	69fb      	ldr	r3, [r7, #28]
   2eb9e:	429a      	cmp	r2, r3
   2eba0:	d214      	bcs.n	2ebcc <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2eba2:	68fb      	ldr	r3, [r7, #12]
   2eba4:	681b      	ldr	r3, [r3, #0]
   2eba6:	3330      	adds	r3, #48	; 0x30
   2eba8:	0018      	movs	r0, r3
   2ebaa:	68fb      	ldr	r3, [r7, #12]
   2ebac:	681b      	ldr	r3, [r3, #0]
   2ebae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ebb0:	693b      	ldr	r3, [r7, #16]
   2ebb2:	1ad3      	subs	r3, r2, r3
   2ebb4:	025b      	lsls	r3, r3, #9
   2ebb6:	69ba      	ldr	r2, [r7, #24]
   2ebb8:	18d1      	adds	r1, r2, r3
   2ebba:	2380      	movs	r3, #128	; 0x80
   2ebbc:	009b      	lsls	r3, r3, #2
   2ebbe:	001a      	movs	r2, r3
   2ebc0:	4b4a      	ldr	r3, [pc, #296]	; (2ecec <f_write+0x34c>)
   2ebc2:	4798      	blx	r3
					fp->fs->wflag = 0;
   2ebc4:	68fb      	ldr	r3, [r7, #12]
   2ebc6:	681b      	ldr	r3, [r3, #0]
   2ebc8:	2200      	movs	r2, #0
   2ebca:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2ebcc:	69fb      	ldr	r3, [r7, #28]
   2ebce:	025b      	lsls	r3, r3, #9
   2ebd0:	623b      	str	r3, [r7, #32]
				continue;
   2ebd2:	e051      	b.n	2ec78 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2ebd4:	68fb      	ldr	r3, [r7, #12]
   2ebd6:	689a      	ldr	r2, [r3, #8]
   2ebd8:	68fb      	ldr	r3, [r7, #12]
   2ebda:	68db      	ldr	r3, [r3, #12]
   2ebdc:	429a      	cmp	r2, r3
   2ebde:	d315      	bcc.n	2ec0c <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2ebe0:	68fb      	ldr	r3, [r7, #12]
   2ebe2:	681b      	ldr	r3, [r3, #0]
   2ebe4:	2100      	movs	r1, #0
   2ebe6:	0018      	movs	r0, r3
   2ebe8:	4b3d      	ldr	r3, [pc, #244]	; (2ece0 <f_write+0x340>)
   2ebea:	4798      	blx	r3
   2ebec:	1e03      	subs	r3, r0, #0
   2ebee:	d009      	beq.n	2ec04 <f_write+0x264>
   2ebf0:	68fb      	ldr	r3, [r7, #12]
   2ebf2:	799b      	ldrb	r3, [r3, #6]
   2ebf4:	2280      	movs	r2, #128	; 0x80
   2ebf6:	4252      	negs	r2, r2
   2ebf8:	4313      	orrs	r3, r2
   2ebfa:	b2da      	uxtb	r2, r3
   2ebfc:	68fb      	ldr	r3, [r7, #12]
   2ebfe:	719a      	strb	r2, [r3, #6]
   2ec00:	2301      	movs	r3, #1
   2ec02:	e065      	b.n	2ecd0 <f_write+0x330>
				fp->fs->winsect = sect;
   2ec04:	68fb      	ldr	r3, [r7, #12]
   2ec06:	681b      	ldr	r3, [r3, #0]
   2ec08:	693a      	ldr	r2, [r7, #16]
   2ec0a:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2ec0c:	68fb      	ldr	r3, [r7, #12]
   2ec0e:	693a      	ldr	r2, [r7, #16]
   2ec10:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2ec12:	68fb      	ldr	r3, [r7, #12]
   2ec14:	689b      	ldr	r3, [r3, #8]
   2ec16:	05db      	lsls	r3, r3, #23
   2ec18:	0ddb      	lsrs	r3, r3, #23
   2ec1a:	2280      	movs	r2, #128	; 0x80
   2ec1c:	0092      	lsls	r2, r2, #2
   2ec1e:	1ad3      	subs	r3, r2, r3
   2ec20:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2ec22:	6a3a      	ldr	r2, [r7, #32]
   2ec24:	687b      	ldr	r3, [r7, #4]
   2ec26:	429a      	cmp	r2, r3
   2ec28:	d901      	bls.n	2ec2e <f_write+0x28e>
   2ec2a:	687b      	ldr	r3, [r7, #4]
   2ec2c:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2ec2e:	68fb      	ldr	r3, [r7, #12]
   2ec30:	681a      	ldr	r2, [r3, #0]
   2ec32:	68fb      	ldr	r3, [r7, #12]
   2ec34:	699b      	ldr	r3, [r3, #24]
   2ec36:	0019      	movs	r1, r3
   2ec38:	0010      	movs	r0, r2
   2ec3a:	4b29      	ldr	r3, [pc, #164]	; (2ece0 <f_write+0x340>)
   2ec3c:	4798      	blx	r3
   2ec3e:	1e03      	subs	r3, r0, #0
   2ec40:	d009      	beq.n	2ec56 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2ec42:	68fb      	ldr	r3, [r7, #12]
   2ec44:	799b      	ldrb	r3, [r3, #6]
   2ec46:	2280      	movs	r2, #128	; 0x80
   2ec48:	4252      	negs	r2, r2
   2ec4a:	4313      	orrs	r3, r2
   2ec4c:	b2da      	uxtb	r2, r3
   2ec4e:	68fb      	ldr	r3, [r7, #12]
   2ec50:	719a      	strb	r2, [r3, #6]
   2ec52:	2301      	movs	r3, #1
   2ec54:	e03c      	b.n	2ecd0 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2ec56:	68fb      	ldr	r3, [r7, #12]
   2ec58:	681a      	ldr	r2, [r3, #0]
   2ec5a:	68fb      	ldr	r3, [r7, #12]
   2ec5c:	689b      	ldr	r3, [r3, #8]
   2ec5e:	05db      	lsls	r3, r3, #23
   2ec60:	0ddb      	lsrs	r3, r3, #23
   2ec62:	3330      	adds	r3, #48	; 0x30
   2ec64:	18d3      	adds	r3, r2, r3
   2ec66:	6a3a      	ldr	r2, [r7, #32]
   2ec68:	69b9      	ldr	r1, [r7, #24]
   2ec6a:	0018      	movs	r0, r3
   2ec6c:	4b1f      	ldr	r3, [pc, #124]	; (2ecec <f_write+0x34c>)
   2ec6e:	4798      	blx	r3
		fp->fs->wflag = 1;
   2ec70:	68fb      	ldr	r3, [r7, #12]
   2ec72:	681b      	ldr	r3, [r3, #0]
   2ec74:	2201      	movs	r2, #1
   2ec76:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2ec78:	69ba      	ldr	r2, [r7, #24]
   2ec7a:	6a3b      	ldr	r3, [r7, #32]
   2ec7c:	18d3      	adds	r3, r2, r3
   2ec7e:	61bb      	str	r3, [r7, #24]
   2ec80:	68fb      	ldr	r3, [r7, #12]
   2ec82:	689a      	ldr	r2, [r3, #8]
   2ec84:	6a3b      	ldr	r3, [r7, #32]
   2ec86:	18d2      	adds	r2, r2, r3
   2ec88:	68fb      	ldr	r3, [r7, #12]
   2ec8a:	609a      	str	r2, [r3, #8]
   2ec8c:	683b      	ldr	r3, [r7, #0]
   2ec8e:	681a      	ldr	r2, [r3, #0]
   2ec90:	6a3b      	ldr	r3, [r7, #32]
   2ec92:	18d2      	adds	r2, r2, r3
   2ec94:	683b      	ldr	r3, [r7, #0]
   2ec96:	601a      	str	r2, [r3, #0]
   2ec98:	687a      	ldr	r2, [r7, #4]
   2ec9a:	6a3b      	ldr	r3, [r7, #32]
   2ec9c:	1ad3      	subs	r3, r2, r3
   2ec9e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2eca0:	687b      	ldr	r3, [r7, #4]
   2eca2:	2b00      	cmp	r3, #0
   2eca4:	d000      	beq.n	2eca8 <f_write+0x308>
   2eca6:	e6b7      	b.n	2ea18 <f_write+0x78>
   2eca8:	e000      	b.n	2ecac <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ecaa:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2ecac:	68fb      	ldr	r3, [r7, #12]
   2ecae:	689a      	ldr	r2, [r3, #8]
   2ecb0:	68fb      	ldr	r3, [r7, #12]
   2ecb2:	68db      	ldr	r3, [r3, #12]
   2ecb4:	429a      	cmp	r2, r3
   2ecb6:	d903      	bls.n	2ecc0 <f_write+0x320>
   2ecb8:	68fb      	ldr	r3, [r7, #12]
   2ecba:	689a      	ldr	r2, [r3, #8]
   2ecbc:	68fb      	ldr	r3, [r7, #12]
   2ecbe:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2ecc0:	68fb      	ldr	r3, [r7, #12]
   2ecc2:	799b      	ldrb	r3, [r3, #6]
   2ecc4:	2220      	movs	r2, #32
   2ecc6:	4313      	orrs	r3, r2
   2ecc8:	b2da      	uxtb	r2, r3
   2ecca:	68fb      	ldr	r3, [r7, #12]
   2eccc:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2ecce:	2300      	movs	r3, #0
}
   2ecd0:	0018      	movs	r0, r3
   2ecd2:	46bd      	mov	sp, r7
   2ecd4:	b00b      	add	sp, #44	; 0x2c
   2ecd6:	bd90      	pop	{r4, r7, pc}
   2ecd8:	0002e3c5 	.word	0x0002e3c5
   2ecdc:	0002ca51 	.word	0x0002ca51
   2ece0:	0002c349 	.word	0x0002c349
   2ece4:	0002c5a9 	.word	0x0002c5a9
   2ece8:	0002c035 	.word	0x0002c035
   2ecec:	0002c265 	.word	0x0002c265

0002ecf0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2ecf0:	b590      	push	{r4, r7, lr}
   2ecf2:	b087      	sub	sp, #28
   2ecf4:	af00      	add	r7, sp, #0
   2ecf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2ecf8:	687b      	ldr	r3, [r7, #4]
   2ecfa:	681a      	ldr	r2, [r3, #0]
   2ecfc:	687b      	ldr	r3, [r7, #4]
   2ecfe:	889b      	ldrh	r3, [r3, #4]
   2ed00:	2117      	movs	r1, #23
   2ed02:	187c      	adds	r4, r7, r1
   2ed04:	0019      	movs	r1, r3
   2ed06:	0010      	movs	r0, r2
   2ed08:	4b55      	ldr	r3, [pc, #340]	; (2ee60 <f_sync+0x170>)
   2ed0a:	4798      	blx	r3
   2ed0c:	0003      	movs	r3, r0
   2ed0e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2ed10:	2317      	movs	r3, #23
   2ed12:	18fb      	adds	r3, r7, r3
   2ed14:	781b      	ldrb	r3, [r3, #0]
   2ed16:	2b00      	cmp	r3, #0
   2ed18:	d000      	beq.n	2ed1c <f_sync+0x2c>
   2ed1a:	e09a      	b.n	2ee52 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2ed1c:	687b      	ldr	r3, [r7, #4]
   2ed1e:	799b      	ldrb	r3, [r3, #6]
   2ed20:	001a      	movs	r2, r3
   2ed22:	2320      	movs	r3, #32
   2ed24:	4013      	ands	r3, r2
   2ed26:	d100      	bne.n	2ed2a <f_sync+0x3a>
   2ed28:	e093      	b.n	2ee52 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2ed2a:	687b      	ldr	r3, [r7, #4]
   2ed2c:	681a      	ldr	r2, [r3, #0]
   2ed2e:	687b      	ldr	r3, [r7, #4]
   2ed30:	69db      	ldr	r3, [r3, #28]
   2ed32:	2117      	movs	r1, #23
   2ed34:	187c      	adds	r4, r7, r1
   2ed36:	0019      	movs	r1, r3
   2ed38:	0010      	movs	r0, r2
   2ed3a:	4b4a      	ldr	r3, [pc, #296]	; (2ee64 <f_sync+0x174>)
   2ed3c:	4798      	blx	r3
   2ed3e:	0003      	movs	r3, r0
   2ed40:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2ed42:	2317      	movs	r3, #23
   2ed44:	18fb      	adds	r3, r7, r3
   2ed46:	781b      	ldrb	r3, [r3, #0]
   2ed48:	2b00      	cmp	r3, #0
   2ed4a:	d000      	beq.n	2ed4e <f_sync+0x5e>
   2ed4c:	e081      	b.n	2ee52 <f_sync+0x162>
				dir = fp->dir_ptr;
   2ed4e:	687b      	ldr	r3, [r7, #4]
   2ed50:	6a1b      	ldr	r3, [r3, #32]
   2ed52:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2ed54:	693b      	ldr	r3, [r7, #16]
   2ed56:	330b      	adds	r3, #11
   2ed58:	693a      	ldr	r2, [r7, #16]
   2ed5a:	320b      	adds	r2, #11
   2ed5c:	7812      	ldrb	r2, [r2, #0]
   2ed5e:	2120      	movs	r1, #32
   2ed60:	430a      	orrs	r2, r1
   2ed62:	b2d2      	uxtb	r2, r2
   2ed64:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2ed66:	693b      	ldr	r3, [r7, #16]
   2ed68:	331c      	adds	r3, #28
   2ed6a:	001a      	movs	r2, r3
   2ed6c:	687b      	ldr	r3, [r7, #4]
   2ed6e:	68db      	ldr	r3, [r3, #12]
   2ed70:	b2db      	uxtb	r3, r3
   2ed72:	7013      	strb	r3, [r2, #0]
   2ed74:	693b      	ldr	r3, [r7, #16]
   2ed76:	331d      	adds	r3, #29
   2ed78:	001a      	movs	r2, r3
   2ed7a:	687b      	ldr	r3, [r7, #4]
   2ed7c:	68db      	ldr	r3, [r3, #12]
   2ed7e:	b29b      	uxth	r3, r3
   2ed80:	0a1b      	lsrs	r3, r3, #8
   2ed82:	b29b      	uxth	r3, r3
   2ed84:	b2db      	uxtb	r3, r3
   2ed86:	7013      	strb	r3, [r2, #0]
   2ed88:	693b      	ldr	r3, [r7, #16]
   2ed8a:	331e      	adds	r3, #30
   2ed8c:	001a      	movs	r2, r3
   2ed8e:	687b      	ldr	r3, [r7, #4]
   2ed90:	68db      	ldr	r3, [r3, #12]
   2ed92:	0c1b      	lsrs	r3, r3, #16
   2ed94:	b2db      	uxtb	r3, r3
   2ed96:	7013      	strb	r3, [r2, #0]
   2ed98:	693b      	ldr	r3, [r7, #16]
   2ed9a:	331f      	adds	r3, #31
   2ed9c:	001a      	movs	r2, r3
   2ed9e:	687b      	ldr	r3, [r7, #4]
   2eda0:	68db      	ldr	r3, [r3, #12]
   2eda2:	0e1b      	lsrs	r3, r3, #24
   2eda4:	b2db      	uxtb	r3, r3
   2eda6:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2eda8:	693b      	ldr	r3, [r7, #16]
   2edaa:	331a      	adds	r3, #26
   2edac:	001a      	movs	r2, r3
   2edae:	687b      	ldr	r3, [r7, #4]
   2edb0:	691b      	ldr	r3, [r3, #16]
   2edb2:	b2db      	uxtb	r3, r3
   2edb4:	7013      	strb	r3, [r2, #0]
   2edb6:	693b      	ldr	r3, [r7, #16]
   2edb8:	331b      	adds	r3, #27
   2edba:	001a      	movs	r2, r3
   2edbc:	687b      	ldr	r3, [r7, #4]
   2edbe:	691b      	ldr	r3, [r3, #16]
   2edc0:	b29b      	uxth	r3, r3
   2edc2:	0a1b      	lsrs	r3, r3, #8
   2edc4:	b29b      	uxth	r3, r3
   2edc6:	b2db      	uxtb	r3, r3
   2edc8:	7013      	strb	r3, [r2, #0]
   2edca:	693b      	ldr	r3, [r7, #16]
   2edcc:	3314      	adds	r3, #20
   2edce:	001a      	movs	r2, r3
   2edd0:	687b      	ldr	r3, [r7, #4]
   2edd2:	691b      	ldr	r3, [r3, #16]
   2edd4:	0c1b      	lsrs	r3, r3, #16
   2edd6:	b2db      	uxtb	r3, r3
   2edd8:	7013      	strb	r3, [r2, #0]
   2edda:	693b      	ldr	r3, [r7, #16]
   2eddc:	3315      	adds	r3, #21
   2edde:	001a      	movs	r2, r3
   2ede0:	687b      	ldr	r3, [r7, #4]
   2ede2:	691b      	ldr	r3, [r3, #16]
   2ede4:	0c1b      	lsrs	r3, r3, #16
   2ede6:	b29b      	uxth	r3, r3
   2ede8:	0a1b      	lsrs	r3, r3, #8
   2edea:	b29b      	uxth	r3, r3
   2edec:	b2db      	uxtb	r3, r3
   2edee:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2edf0:	4b1d      	ldr	r3, [pc, #116]	; (2ee68 <f_sync+0x178>)
   2edf2:	4798      	blx	r3
   2edf4:	0003      	movs	r3, r0
   2edf6:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2edf8:	693b      	ldr	r3, [r7, #16]
   2edfa:	3316      	adds	r3, #22
   2edfc:	68fa      	ldr	r2, [r7, #12]
   2edfe:	b2d2      	uxtb	r2, r2
   2ee00:	701a      	strb	r2, [r3, #0]
   2ee02:	693b      	ldr	r3, [r7, #16]
   2ee04:	3317      	adds	r3, #23
   2ee06:	68fa      	ldr	r2, [r7, #12]
   2ee08:	b292      	uxth	r2, r2
   2ee0a:	0a12      	lsrs	r2, r2, #8
   2ee0c:	b292      	uxth	r2, r2
   2ee0e:	b2d2      	uxtb	r2, r2
   2ee10:	701a      	strb	r2, [r3, #0]
   2ee12:	693b      	ldr	r3, [r7, #16]
   2ee14:	3318      	adds	r3, #24
   2ee16:	68fa      	ldr	r2, [r7, #12]
   2ee18:	0c12      	lsrs	r2, r2, #16
   2ee1a:	b2d2      	uxtb	r2, r2
   2ee1c:	701a      	strb	r2, [r3, #0]
   2ee1e:	693b      	ldr	r3, [r7, #16]
   2ee20:	3319      	adds	r3, #25
   2ee22:	68fa      	ldr	r2, [r7, #12]
   2ee24:	0e12      	lsrs	r2, r2, #24
   2ee26:	b2d2      	uxtb	r2, r2
   2ee28:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2ee2a:	687b      	ldr	r3, [r7, #4]
   2ee2c:	799b      	ldrb	r3, [r3, #6]
   2ee2e:	2220      	movs	r2, #32
   2ee30:	4393      	bics	r3, r2
   2ee32:	b2da      	uxtb	r2, r3
   2ee34:	687b      	ldr	r3, [r7, #4]
   2ee36:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2ee38:	687b      	ldr	r3, [r7, #4]
   2ee3a:	681b      	ldr	r3, [r3, #0]
   2ee3c:	2201      	movs	r2, #1
   2ee3e:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2ee40:	687b      	ldr	r3, [r7, #4]
   2ee42:	681b      	ldr	r3, [r3, #0]
   2ee44:	2217      	movs	r2, #23
   2ee46:	18bc      	adds	r4, r7, r2
   2ee48:	0018      	movs	r0, r3
   2ee4a:	4b08      	ldr	r3, [pc, #32]	; (2ee6c <f_sync+0x17c>)
   2ee4c:	4798      	blx	r3
   2ee4e:	0003      	movs	r3, r0
   2ee50:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2ee52:	2317      	movs	r3, #23
   2ee54:	18fb      	adds	r3, r7, r3
   2ee56:	781b      	ldrb	r3, [r3, #0]
}
   2ee58:	0018      	movs	r0, r3
   2ee5a:	46bd      	mov	sp, r7
   2ee5c:	b007      	add	sp, #28
   2ee5e:	bd90      	pop	{r4, r7, pc}
   2ee60:	0002e3c5 	.word	0x0002e3c5
   2ee64:	0002c349 	.word	0x0002c349
   2ee68:	0002c205 	.word	0x0002c205
   2ee6c:	0002c411 	.word	0x0002c411

0002ee70 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2ee70:	b590      	push	{r4, r7, lr}
   2ee72:	b085      	sub	sp, #20
   2ee74:	af00      	add	r7, sp, #0
   2ee76:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2ee78:	230f      	movs	r3, #15
   2ee7a:	18fc      	adds	r4, r7, r3
   2ee7c:	687b      	ldr	r3, [r7, #4]
   2ee7e:	0018      	movs	r0, r3
   2ee80:	4b09      	ldr	r3, [pc, #36]	; (2eea8 <f_close+0x38>)
   2ee82:	4798      	blx	r3
   2ee84:	0003      	movs	r3, r0
   2ee86:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2ee88:	230f      	movs	r3, #15
   2ee8a:	18fb      	adds	r3, r7, r3
   2ee8c:	781b      	ldrb	r3, [r3, #0]
   2ee8e:	2b00      	cmp	r3, #0
   2ee90:	d102      	bne.n	2ee98 <f_close+0x28>
   2ee92:	687b      	ldr	r3, [r7, #4]
   2ee94:	2200      	movs	r2, #0
   2ee96:	601a      	str	r2, [r3, #0]
	return res;
   2ee98:	230f      	movs	r3, #15
   2ee9a:	18fb      	adds	r3, r7, r3
   2ee9c:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2ee9e:	0018      	movs	r0, r3
   2eea0:	46bd      	mov	sp, r7
   2eea2:	b005      	add	sp, #20
   2eea4:	bd90      	pop	{r4, r7, pc}
   2eea6:	46c0      	nop			; (mov r8, r8)
   2eea8:	0002ecf1 	.word	0x0002ecf1

0002eeac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2eeac:	b580      	push	{r7, lr}
   2eeae:	b084      	sub	sp, #16
   2eeb0:	af00      	add	r7, sp, #0
   2eeb2:	0002      	movs	r2, r0
   2eeb4:	6039      	str	r1, [r7, #0]
   2eeb6:	1dbb      	adds	r3, r7, #6
   2eeb8:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2eeba:	1dbb      	adds	r3, r7, #6
   2eebc:	881b      	ldrh	r3, [r3, #0]
   2eebe:	2b7f      	cmp	r3, #127	; 0x7f
   2eec0:	d805      	bhi.n	2eece <ff_convert+0x22>
		c = src;
   2eec2:	230e      	movs	r3, #14
   2eec4:	18fb      	adds	r3, r7, r3
   2eec6:	1dba      	adds	r2, r7, #6
   2eec8:	8812      	ldrh	r2, [r2, #0]
   2eeca:	801a      	strh	r2, [r3, #0]
   2eecc:	e03a      	b.n	2ef44 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2eece:	683b      	ldr	r3, [r7, #0]
   2eed0:	2b00      	cmp	r3, #0
   2eed2:	d010      	beq.n	2eef6 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2eed4:	1dbb      	adds	r3, r7, #6
   2eed6:	881b      	ldrh	r3, [r3, #0]
   2eed8:	2bff      	cmp	r3, #255	; 0xff
   2eeda:	d807      	bhi.n	2eeec <ff_convert+0x40>
   2eedc:	1dbb      	adds	r3, r7, #6
   2eede:	881b      	ldrh	r3, [r3, #0]
   2eee0:	3b80      	subs	r3, #128	; 0x80
   2eee2:	001a      	movs	r2, r3
   2eee4:	4b1b      	ldr	r3, [pc, #108]	; (2ef54 <ff_convert+0xa8>)
   2eee6:	0052      	lsls	r2, r2, #1
   2eee8:	5ad2      	ldrh	r2, [r2, r3]
   2eeea:	e000      	b.n	2eeee <ff_convert+0x42>
   2eeec:	2200      	movs	r2, #0
   2eeee:	230e      	movs	r3, #14
   2eef0:	18fb      	adds	r3, r7, r3
   2eef2:	801a      	strh	r2, [r3, #0]
   2eef4:	e026      	b.n	2ef44 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2eef6:	230e      	movs	r3, #14
   2eef8:	18fb      	adds	r3, r7, r3
   2eefa:	2200      	movs	r2, #0
   2eefc:	801a      	strh	r2, [r3, #0]
   2eefe:	e010      	b.n	2ef22 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2ef00:	230e      	movs	r3, #14
   2ef02:	18fb      	adds	r3, r7, r3
   2ef04:	881a      	ldrh	r2, [r3, #0]
   2ef06:	4b13      	ldr	r3, [pc, #76]	; (2ef54 <ff_convert+0xa8>)
   2ef08:	0052      	lsls	r2, r2, #1
   2ef0a:	5ad3      	ldrh	r3, [r2, r3]
   2ef0c:	1dba      	adds	r2, r7, #6
   2ef0e:	8812      	ldrh	r2, [r2, #0]
   2ef10:	429a      	cmp	r2, r3
   2ef12:	d00c      	beq.n	2ef2e <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2ef14:	230e      	movs	r3, #14
   2ef16:	18fb      	adds	r3, r7, r3
   2ef18:	881a      	ldrh	r2, [r3, #0]
   2ef1a:	230e      	movs	r3, #14
   2ef1c:	18fb      	adds	r3, r7, r3
   2ef1e:	3201      	adds	r2, #1
   2ef20:	801a      	strh	r2, [r3, #0]
   2ef22:	230e      	movs	r3, #14
   2ef24:	18fb      	adds	r3, r7, r3
   2ef26:	881b      	ldrh	r3, [r3, #0]
   2ef28:	2b7f      	cmp	r3, #127	; 0x7f
   2ef2a:	d9e9      	bls.n	2ef00 <ff_convert+0x54>
   2ef2c:	e000      	b.n	2ef30 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2ef2e:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2ef30:	230e      	movs	r3, #14
   2ef32:	18fb      	adds	r3, r7, r3
   2ef34:	881b      	ldrh	r3, [r3, #0]
   2ef36:	3380      	adds	r3, #128	; 0x80
   2ef38:	b29a      	uxth	r2, r3
   2ef3a:	230e      	movs	r3, #14
   2ef3c:	18fb      	adds	r3, r7, r3
   2ef3e:	21ff      	movs	r1, #255	; 0xff
   2ef40:	400a      	ands	r2, r1
   2ef42:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2ef44:	230e      	movs	r3, #14
   2ef46:	18fb      	adds	r3, r7, r3
   2ef48:	881b      	ldrh	r3, [r3, #0]
}
   2ef4a:	0018      	movs	r0, r3
   2ef4c:	46bd      	mov	sp, r7
   2ef4e:	b004      	add	sp, #16
   2ef50:	bd80      	pop	{r7, pc}
   2ef52:	46c0      	nop			; (mov r8, r8)
   2ef54:	0003a1f0 	.word	0x0003a1f0

0002ef58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2ef58:	b580      	push	{r7, lr}
   2ef5a:	b084      	sub	sp, #16
   2ef5c:	af00      	add	r7, sp, #0
   2ef5e:	0002      	movs	r2, r0
   2ef60:	1dbb      	adds	r3, r7, #6
   2ef62:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2ef64:	2300      	movs	r3, #0
   2ef66:	60fb      	str	r3, [r7, #12]
   2ef68:	e002      	b.n	2ef70 <ff_wtoupper+0x18>
   2ef6a:	68fb      	ldr	r3, [r7, #12]
   2ef6c:	3301      	adds	r3, #1
   2ef6e:	60fb      	str	r3, [r7, #12]
   2ef70:	4b0f      	ldr	r3, [pc, #60]	; (2efb0 <ff_wtoupper+0x58>)
   2ef72:	68fa      	ldr	r2, [r7, #12]
   2ef74:	0052      	lsls	r2, r2, #1
   2ef76:	5ad3      	ldrh	r3, [r2, r3]
   2ef78:	2b00      	cmp	r3, #0
   2ef7a:	d007      	beq.n	2ef8c <ff_wtoupper+0x34>
   2ef7c:	4b0c      	ldr	r3, [pc, #48]	; (2efb0 <ff_wtoupper+0x58>)
   2ef7e:	68fa      	ldr	r2, [r7, #12]
   2ef80:	0052      	lsls	r2, r2, #1
   2ef82:	5ad3      	ldrh	r3, [r2, r3]
   2ef84:	1dba      	adds	r2, r7, #6
   2ef86:	8812      	ldrh	r2, [r2, #0]
   2ef88:	429a      	cmp	r2, r3
   2ef8a:	d1ee      	bne.n	2ef6a <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2ef8c:	4b08      	ldr	r3, [pc, #32]	; (2efb0 <ff_wtoupper+0x58>)
   2ef8e:	68fa      	ldr	r2, [r7, #12]
   2ef90:	0052      	lsls	r2, r2, #1
   2ef92:	5ad3      	ldrh	r3, [r2, r3]
   2ef94:	2b00      	cmp	r3, #0
   2ef96:	d004      	beq.n	2efa2 <ff_wtoupper+0x4a>
   2ef98:	4b06      	ldr	r3, [pc, #24]	; (2efb4 <ff_wtoupper+0x5c>)
   2ef9a:	68fa      	ldr	r2, [r7, #12]
   2ef9c:	0052      	lsls	r2, r2, #1
   2ef9e:	5ad3      	ldrh	r3, [r2, r3]
   2efa0:	e001      	b.n	2efa6 <ff_wtoupper+0x4e>
   2efa2:	1dbb      	adds	r3, r7, #6
   2efa4:	881b      	ldrh	r3, [r3, #0]
}
   2efa6:	0018      	movs	r0, r3
   2efa8:	46bd      	mov	sp, r7
   2efaa:	b004      	add	sp, #16
   2efac:	bd80      	pop	{r7, pc}
   2efae:	46c0      	nop			; (mov r8, r8)
   2efb0:	0003a2f0 	.word	0x0003a2f0
   2efb4:	0003a4d0 	.word	0x0003a4d0

0002efb8 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2efb8:	b580      	push	{r7, lr}
   2efba:	b084      	sub	sp, #16
   2efbc:	af00      	add	r7, sp, #0
   2efbe:	60f8      	str	r0, [r7, #12]
   2efc0:	60b9      	str	r1, [r7, #8]
   2efc2:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2efc4:	68fb      	ldr	r3, [r7, #12]
   2efc6:	68ba      	ldr	r2, [r7, #8]
   2efc8:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2efca:	68fb      	ldr	r3, [r7, #12]
   2efcc:	687a      	ldr	r2, [r7, #4]
   2efce:	601a      	str	r2, [r3, #0]
}
   2efd0:	46c0      	nop			; (mov r8, r8)
   2efd2:	46bd      	mov	sp, r7
   2efd4:	b004      	add	sp, #16
   2efd6:	bd80      	pop	{r7, pc}

0002efd8 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2efd8:	b580      	push	{r7, lr}
   2efda:	b082      	sub	sp, #8
   2efdc:	af00      	add	r7, sp, #0
   2efde:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2efe0:	687b      	ldr	r3, [r7, #4]
   2efe2:	681b      	ldr	r3, [r3, #0]
   2efe4:	4a07      	ldr	r2, [pc, #28]	; (2f004 <getNextPacketId+0x2c>)
   2efe6:	4293      	cmp	r3, r2
   2efe8:	d003      	beq.n	2eff2 <getNextPacketId+0x1a>
   2efea:	687b      	ldr	r3, [r7, #4]
   2efec:	681b      	ldr	r3, [r3, #0]
   2efee:	1c5a      	adds	r2, r3, #1
   2eff0:	e000      	b.n	2eff4 <getNextPacketId+0x1c>
   2eff2:	2201      	movs	r2, #1
   2eff4:	687b      	ldr	r3, [r7, #4]
   2eff6:	601a      	str	r2, [r3, #0]
   2eff8:	687b      	ldr	r3, [r7, #4]
   2effa:	681b      	ldr	r3, [r3, #0]
}
   2effc:	0018      	movs	r0, r3
   2effe:	46bd      	mov	sp, r7
   2f000:	b002      	add	sp, #8
   2f002:	bd80      	pop	{r7, pc}
   2f004:	0000ffff 	.word	0x0000ffff

0002f008 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2f008:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f00a:	b087      	sub	sp, #28
   2f00c:	af00      	add	r7, sp, #0
   2f00e:	60f8      	str	r0, [r7, #12]
   2f010:	60b9      	str	r1, [r7, #8]
   2f012:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2f014:	2301      	movs	r3, #1
   2f016:	425b      	negs	r3, r3
   2f018:	617b      	str	r3, [r7, #20]
        sent = 0;
   2f01a:	2300      	movs	r3, #0
   2f01c:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2f01e:	e01a      	b.n	2f056 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2f020:	68fb      	ldr	r3, [r7, #12]
   2f022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f024:	68dc      	ldr	r4, [r3, #12]
   2f026:	68fb      	ldr	r3, [r7, #12]
   2f028:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f02a:	68fb      	ldr	r3, [r7, #12]
   2f02c:	691a      	ldr	r2, [r3, #16]
   2f02e:	693b      	ldr	r3, [r7, #16]
   2f030:	18d6      	adds	r6, r2, r3
   2f032:	687b      	ldr	r3, [r7, #4]
   2f034:	0018      	movs	r0, r3
   2f036:	4b1a      	ldr	r3, [pc, #104]	; (2f0a0 <sendPacket+0x98>)
   2f038:	4798      	blx	r3
   2f03a:	0003      	movs	r3, r0
   2f03c:	68ba      	ldr	r2, [r7, #8]
   2f03e:	0031      	movs	r1, r6
   2f040:	0028      	movs	r0, r5
   2f042:	47a0      	blx	r4
   2f044:	0003      	movs	r3, r0
   2f046:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2f048:	697b      	ldr	r3, [r7, #20]
   2f04a:	2b00      	cmp	r3, #0
   2f04c:	db0e      	blt.n	2f06c <sendPacket+0x64>
            break;
        sent += rc;
   2f04e:	693a      	ldr	r2, [r7, #16]
   2f050:	697b      	ldr	r3, [r7, #20]
   2f052:	18d3      	adds	r3, r2, r3
   2f054:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2f056:	693a      	ldr	r2, [r7, #16]
   2f058:	68bb      	ldr	r3, [r7, #8]
   2f05a:	429a      	cmp	r2, r3
   2f05c:	da07      	bge.n	2f06e <sendPacket+0x66>
   2f05e:	687b      	ldr	r3, [r7, #4]
   2f060:	0018      	movs	r0, r3
   2f062:	4b10      	ldr	r3, [pc, #64]	; (2f0a4 <sendPacket+0x9c>)
   2f064:	4798      	blx	r3
   2f066:	1e03      	subs	r3, r0, #0
   2f068:	d0da      	beq.n	2f020 <sendPacket+0x18>
   2f06a:	e000      	b.n	2f06e <sendPacket+0x66>
            break;
   2f06c:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2f06e:	693a      	ldr	r2, [r7, #16]
   2f070:	68bb      	ldr	r3, [r7, #8]
   2f072:	429a      	cmp	r2, r3
   2f074:	d10b      	bne.n	2f08e <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2f076:	68fb      	ldr	r3, [r7, #12]
   2f078:	3354      	adds	r3, #84	; 0x54
   2f07a:	001a      	movs	r2, r3
   2f07c:	68fb      	ldr	r3, [r7, #12]
   2f07e:	699b      	ldr	r3, [r3, #24]
   2f080:	0019      	movs	r1, r3
   2f082:	0010      	movs	r0, r2
   2f084:	4b08      	ldr	r3, [pc, #32]	; (2f0a8 <sendPacket+0xa0>)
   2f086:	4798      	blx	r3
        rc = SUCCESS;
   2f088:	2300      	movs	r3, #0
   2f08a:	617b      	str	r3, [r7, #20]
   2f08c:	e002      	b.n	2f094 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2f08e:	2301      	movs	r3, #1
   2f090:	425b      	negs	r3, r3
   2f092:	617b      	str	r3, [r7, #20]
    return rc;
   2f094:	697b      	ldr	r3, [r7, #20]
}
   2f096:	0018      	movs	r0, r3
   2f098:	46bd      	mov	sp, r7
   2f09a:	b007      	add	sp, #28
   2f09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f09e:	46c0      	nop			; (mov r8, r8)
   2f0a0:	0002fe69 	.word	0x0002fe69
   2f0a4:	0002fded 	.word	0x0002fded
   2f0a8:	0002fe41 	.word	0x0002fe41

0002f0ac <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2f0ac:	b580      	push	{r7, lr}
   2f0ae:	b086      	sub	sp, #24
   2f0b0:	af00      	add	r7, sp, #0
   2f0b2:	60f8      	str	r0, [r7, #12]
   2f0b4:	60b9      	str	r1, [r7, #8]
   2f0b6:	607a      	str	r2, [r7, #4]
   2f0b8:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2f0ba:	68fb      	ldr	r3, [r7, #12]
   2f0bc:	68ba      	ldr	r2, [r7, #8]
   2f0be:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f0c0:	2300      	movs	r3, #0
   2f0c2:	617b      	str	r3, [r7, #20]
   2f0c4:	e00a      	b.n	2f0dc <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2f0c6:	68fa      	ldr	r2, [r7, #12]
   2f0c8:	697b      	ldr	r3, [r7, #20]
   2f0ca:	3304      	adds	r3, #4
   2f0cc:	00db      	lsls	r3, r3, #3
   2f0ce:	18d3      	adds	r3, r2, r3
   2f0d0:	3304      	adds	r3, #4
   2f0d2:	2200      	movs	r2, #0
   2f0d4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f0d6:	697b      	ldr	r3, [r7, #20]
   2f0d8:	3301      	adds	r3, #1
   2f0da:	617b      	str	r3, [r7, #20]
   2f0dc:	697b      	ldr	r3, [r7, #20]
   2f0de:	2b04      	cmp	r3, #4
   2f0e0:	ddf1      	ble.n	2f0c6 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2f0e2:	68fb      	ldr	r3, [r7, #12]
   2f0e4:	687a      	ldr	r2, [r7, #4]
   2f0e6:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2f0e8:	68fb      	ldr	r3, [r7, #12]
   2f0ea:	683a      	ldr	r2, [r7, #0]
   2f0ec:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2f0ee:	68fb      	ldr	r3, [r7, #12]
   2f0f0:	6a3a      	ldr	r2, [r7, #32]
   2f0f2:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2f0f4:	68fb      	ldr	r3, [r7, #12]
   2f0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f0f8:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2f0fa:	68fb      	ldr	r3, [r7, #12]
   2f0fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f0fe:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2f100:	68fb      	ldr	r3, [r7, #12]
   2f102:	2200      	movs	r2, #0
   2f104:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2f106:	68fb      	ldr	r3, [r7, #12]
   2f108:	2200      	movs	r2, #0
   2f10a:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2f10c:	68fb      	ldr	r3, [r7, #12]
   2f10e:	2200      	movs	r2, #0
   2f110:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2f112:	68fb      	ldr	r3, [r7, #12]
   2f114:	2201      	movs	r2, #1
   2f116:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2f118:	68fb      	ldr	r3, [r7, #12]
   2f11a:	3354      	adds	r3, #84	; 0x54
   2f11c:	0018      	movs	r0, r3
   2f11e:	4b03      	ldr	r3, [pc, #12]	; (2f12c <MQTTClientInit+0x80>)
   2f120:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2f122:	46c0      	nop			; (mov r8, r8)
   2f124:	46bd      	mov	sp, r7
   2f126:	b006      	add	sp, #24
   2f128:	bd80      	pop	{r7, pc}
   2f12a:	46c0      	nop			; (mov r8, r8)
   2f12c:	0002fe91 	.word	0x0002fe91

0002f130 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2f130:	b590      	push	{r4, r7, lr}
   2f132:	b08b      	sub	sp, #44	; 0x2c
   2f134:	af00      	add	r7, sp, #0
   2f136:	60f8      	str	r0, [r7, #12]
   2f138:	60b9      	str	r1, [r7, #8]
   2f13a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2f13c:	2301      	movs	r3, #1
   2f13e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2f140:	2300      	movs	r3, #0
   2f142:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2f144:	2304      	movs	r3, #4
   2f146:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2f148:	68bb      	ldr	r3, [r7, #8]
   2f14a:	2200      	movs	r2, #0
   2f14c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2f14e:	2301      	movs	r3, #1
   2f150:	425b      	negs	r3, r3
   2f152:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f154:	6a3b      	ldr	r3, [r7, #32]
   2f156:	3301      	adds	r3, #1
   2f158:	623b      	str	r3, [r7, #32]
   2f15a:	6a3a      	ldr	r2, [r7, #32]
   2f15c:	69fb      	ldr	r3, [r7, #28]
   2f15e:	429a      	cmp	r2, r3
   2f160:	dd03      	ble.n	2f16a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2f162:	2301      	movs	r3, #1
   2f164:	425b      	negs	r3, r3
   2f166:	61bb      	str	r3, [r7, #24]
            goto exit;
   2f168:	e026      	b.n	2f1b8 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2f16a:	68fb      	ldr	r3, [r7, #12]
   2f16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f16e:	689c      	ldr	r4, [r3, #8]
   2f170:	68fb      	ldr	r3, [r7, #12]
   2f172:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2f174:	687b      	ldr	r3, [r7, #4]
   2f176:	2217      	movs	r2, #23
   2f178:	18b9      	adds	r1, r7, r2
   2f17a:	2201      	movs	r2, #1
   2f17c:	47a0      	blx	r4
   2f17e:	0003      	movs	r3, r0
   2f180:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2f182:	69bb      	ldr	r3, [r7, #24]
   2f184:	2b01      	cmp	r3, #1
   2f186:	d116      	bne.n	2f1b6 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2f188:	68bb      	ldr	r3, [r7, #8]
   2f18a:	681a      	ldr	r2, [r3, #0]
   2f18c:	2317      	movs	r3, #23
   2f18e:	18fb      	adds	r3, r7, r3
   2f190:	781b      	ldrb	r3, [r3, #0]
   2f192:	0019      	movs	r1, r3
   2f194:	237f      	movs	r3, #127	; 0x7f
   2f196:	400b      	ands	r3, r1
   2f198:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2f19a:	434b      	muls	r3, r1
   2f19c:	18d2      	adds	r2, r2, r3
   2f19e:	68bb      	ldr	r3, [r7, #8]
   2f1a0:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2f1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f1a4:	01db      	lsls	r3, r3, #7
   2f1a6:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2f1a8:	2317      	movs	r3, #23
   2f1aa:	18fb      	adds	r3, r7, r3
   2f1ac:	781b      	ldrb	r3, [r3, #0]
   2f1ae:	b25b      	sxtb	r3, r3
   2f1b0:	2b00      	cmp	r3, #0
   2f1b2:	dbcc      	blt.n	2f14e <decodePacket+0x1e>
   2f1b4:	e000      	b.n	2f1b8 <decodePacket+0x88>
            goto exit;
   2f1b6:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2f1b8:	6a3b      	ldr	r3, [r7, #32]
}
   2f1ba:	0018      	movs	r0, r3
   2f1bc:	46bd      	mov	sp, r7
   2f1be:	b00b      	add	sp, #44	; 0x2c
   2f1c0:	bd90      	pop	{r4, r7, pc}
	...

0002f1c4 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2f1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f1c6:	46c6      	mov	lr, r8
   2f1c8:	b500      	push	{lr}
   2f1ca:	b086      	sub	sp, #24
   2f1cc:	af00      	add	r7, sp, #0
   2f1ce:	6078      	str	r0, [r7, #4]
   2f1d0:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2f1d2:	2301      	movs	r3, #1
   2f1d4:	425b      	negs	r3, r3
   2f1d6:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2f1d8:	2300      	movs	r3, #0
   2f1da:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2f1dc:	2300      	movs	r3, #0
   2f1de:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2f1e0:	2300      	movs	r3, #0
   2f1e2:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2f1e4:	687b      	ldr	r3, [r7, #4]
   2f1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f1e8:	689c      	ldr	r4, [r3, #8]
   2f1ea:	687b      	ldr	r3, [r7, #4]
   2f1ec:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f1ee:	687b      	ldr	r3, [r7, #4]
   2f1f0:	695e      	ldr	r6, [r3, #20]
   2f1f2:	683b      	ldr	r3, [r7, #0]
   2f1f4:	0018      	movs	r0, r3
   2f1f6:	4b2b      	ldr	r3, [pc, #172]	; (2f2a4 <readPacket+0xe0>)
   2f1f8:	4798      	blx	r3
   2f1fa:	0003      	movs	r3, r0
   2f1fc:	2201      	movs	r2, #1
   2f1fe:	0031      	movs	r1, r6
   2f200:	0028      	movs	r0, r5
   2f202:	47a0      	blx	r4
   2f204:	0003      	movs	r3, r0
   2f206:	2b01      	cmp	r3, #1
   2f208:	d141      	bne.n	2f28e <readPacket+0xca>
        goto exit;

    len = 1;
   2f20a:	2301      	movs	r3, #1
   2f20c:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2f20e:	683b      	ldr	r3, [r7, #0]
   2f210:	0018      	movs	r0, r3
   2f212:	4b24      	ldr	r3, [pc, #144]	; (2f2a4 <readPacket+0xe0>)
   2f214:	4798      	blx	r3
   2f216:	0002      	movs	r2, r0
   2f218:	2308      	movs	r3, #8
   2f21a:	18f9      	adds	r1, r7, r3
   2f21c:	687b      	ldr	r3, [r7, #4]
   2f21e:	0018      	movs	r0, r3
   2f220:	4b21      	ldr	r3, [pc, #132]	; (2f2a8 <readPacket+0xe4>)
   2f222:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2f224:	687b      	ldr	r3, [r7, #4]
   2f226:	695b      	ldr	r3, [r3, #20]
   2f228:	3301      	adds	r3, #1
   2f22a:	68ba      	ldr	r2, [r7, #8]
   2f22c:	0011      	movs	r1, r2
   2f22e:	0018      	movs	r0, r3
   2f230:	4b1e      	ldr	r3, [pc, #120]	; (2f2ac <readPacket+0xe8>)
   2f232:	4798      	blx	r3
   2f234:	0002      	movs	r2, r0
   2f236:	693b      	ldr	r3, [r7, #16]
   2f238:	189b      	adds	r3, r3, r2
   2f23a:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2f23c:	68bb      	ldr	r3, [r7, #8]
   2f23e:	2b00      	cmp	r3, #0
   2f240:	dd17      	ble.n	2f272 <readPacket+0xae>
   2f242:	687b      	ldr	r3, [r7, #4]
   2f244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f246:	689c      	ldr	r4, [r3, #8]
   2f248:	687b      	ldr	r3, [r7, #4]
   2f24a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f24c:	687b      	ldr	r3, [r7, #4]
   2f24e:	695a      	ldr	r2, [r3, #20]
   2f250:	693b      	ldr	r3, [r7, #16]
   2f252:	18d6      	adds	r6, r2, r3
   2f254:	68bb      	ldr	r3, [r7, #8]
   2f256:	4698      	mov	r8, r3
   2f258:	683b      	ldr	r3, [r7, #0]
   2f25a:	0018      	movs	r0, r3
   2f25c:	4b11      	ldr	r3, [pc, #68]	; (2f2a4 <readPacket+0xe0>)
   2f25e:	4798      	blx	r3
   2f260:	0003      	movs	r3, r0
   2f262:	4642      	mov	r2, r8
   2f264:	0031      	movs	r1, r6
   2f266:	0028      	movs	r0, r5
   2f268:	47a0      	blx	r4
   2f26a:	0002      	movs	r2, r0
   2f26c:	68bb      	ldr	r3, [r7, #8]
   2f26e:	429a      	cmp	r2, r3
   2f270:	d10f      	bne.n	2f292 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2f272:	687b      	ldr	r3, [r7, #4]
   2f274:	695b      	ldr	r3, [r3, #20]
   2f276:	781a      	ldrb	r2, [r3, #0]
   2f278:	230c      	movs	r3, #12
   2f27a:	18fb      	adds	r3, r7, r3
   2f27c:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2f27e:	230c      	movs	r3, #12
   2f280:	18fb      	adds	r3, r7, r3
   2f282:	781b      	ldrb	r3, [r3, #0]
   2f284:	061b      	lsls	r3, r3, #24
   2f286:	0f1b      	lsrs	r3, r3, #28
   2f288:	b2db      	uxtb	r3, r3
   2f28a:	617b      	str	r3, [r7, #20]
   2f28c:	e002      	b.n	2f294 <readPacket+0xd0>
        goto exit;
   2f28e:	46c0      	nop			; (mov r8, r8)
   2f290:	e000      	b.n	2f294 <readPacket+0xd0>
        goto exit;
   2f292:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2f294:	697b      	ldr	r3, [r7, #20]
}
   2f296:	0018      	movs	r0, r3
   2f298:	46bd      	mov	sp, r7
   2f29a:	b006      	add	sp, #24
   2f29c:	bc04      	pop	{r2}
   2f29e:	4690      	mov	r8, r2
   2f2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f2a2:	46c0      	nop			; (mov r8, r8)
   2f2a4:	0002fe69 	.word	0x0002fe69
   2f2a8:	0002f131 	.word	0x0002f131
   2f2ac:	00030c41 	.word	0x00030c41

0002f2b0 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2f2b0:	b580      	push	{r7, lr}
   2f2b2:	b086      	sub	sp, #24
   2f2b4:	af00      	add	r7, sp, #0
   2f2b6:	6078      	str	r0, [r7, #4]
   2f2b8:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2f2ba:	687b      	ldr	r3, [r7, #4]
   2f2bc:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2f2be:	683b      	ldr	r3, [r7, #0]
   2f2c0:	689b      	ldr	r3, [r3, #8]
   2f2c2:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2f2c4:	683b      	ldr	r3, [r7, #0]
   2f2c6:	685b      	ldr	r3, [r3, #4]
   2f2c8:	001a      	movs	r2, r3
   2f2ca:	693b      	ldr	r3, [r7, #16]
   2f2cc:	189b      	adds	r3, r3, r2
   2f2ce:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2f2d0:	e039      	b.n	2f346 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2f2d2:	693b      	ldr	r3, [r7, #16]
   2f2d4:	781b      	ldrb	r3, [r3, #0]
   2f2d6:	2b2f      	cmp	r3, #47	; 0x2f
   2f2d8:	d103      	bne.n	2f2e2 <isTopicMatched+0x32>
   2f2da:	697b      	ldr	r3, [r7, #20]
   2f2dc:	781b      	ldrb	r3, [r3, #0]
   2f2de:	2b2f      	cmp	r3, #47	; 0x2f
   2f2e0:	d13a      	bne.n	2f358 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2f2e2:	697b      	ldr	r3, [r7, #20]
   2f2e4:	781b      	ldrb	r3, [r3, #0]
   2f2e6:	2b2b      	cmp	r3, #43	; 0x2b
   2f2e8:	d009      	beq.n	2f2fe <isTopicMatched+0x4e>
   2f2ea:	697b      	ldr	r3, [r7, #20]
   2f2ec:	781b      	ldrb	r3, [r3, #0]
   2f2ee:	2b23      	cmp	r3, #35	; 0x23
   2f2f0:	d005      	beq.n	2f2fe <isTopicMatched+0x4e>
   2f2f2:	697b      	ldr	r3, [r7, #20]
   2f2f4:	781a      	ldrb	r2, [r3, #0]
   2f2f6:	693b      	ldr	r3, [r7, #16]
   2f2f8:	781b      	ldrb	r3, [r3, #0]
   2f2fa:	429a      	cmp	r2, r3
   2f2fc:	d12e      	bne.n	2f35c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2f2fe:	697b      	ldr	r3, [r7, #20]
   2f300:	781b      	ldrb	r3, [r3, #0]
   2f302:	2b2b      	cmp	r3, #43	; 0x2b
   2f304:	d112      	bne.n	2f32c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2f306:	693b      	ldr	r3, [r7, #16]
   2f308:	3301      	adds	r3, #1
   2f30a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f30c:	e005      	b.n	2f31a <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2f30e:	693b      	ldr	r3, [r7, #16]
   2f310:	3301      	adds	r3, #1
   2f312:	613b      	str	r3, [r7, #16]
   2f314:	693b      	ldr	r3, [r7, #16]
   2f316:	3301      	adds	r3, #1
   2f318:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f31a:	68fa      	ldr	r2, [r7, #12]
   2f31c:	68bb      	ldr	r3, [r7, #8]
   2f31e:	429a      	cmp	r2, r3
   2f320:	d20b      	bcs.n	2f33a <isTopicMatched+0x8a>
   2f322:	68fb      	ldr	r3, [r7, #12]
   2f324:	781b      	ldrb	r3, [r3, #0]
   2f326:	2b2f      	cmp	r3, #47	; 0x2f
   2f328:	d1f1      	bne.n	2f30e <isTopicMatched+0x5e>
   2f32a:	e006      	b.n	2f33a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2f32c:	697b      	ldr	r3, [r7, #20]
   2f32e:	781b      	ldrb	r3, [r3, #0]
   2f330:	2b23      	cmp	r3, #35	; 0x23
   2f332:	d102      	bne.n	2f33a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2f334:	68bb      	ldr	r3, [r7, #8]
   2f336:	3b01      	subs	r3, #1
   2f338:	613b      	str	r3, [r7, #16]
        curf++;
   2f33a:	697b      	ldr	r3, [r7, #20]
   2f33c:	3301      	adds	r3, #1
   2f33e:	617b      	str	r3, [r7, #20]
        curn++;
   2f340:	693b      	ldr	r3, [r7, #16]
   2f342:	3301      	adds	r3, #1
   2f344:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2f346:	697b      	ldr	r3, [r7, #20]
   2f348:	781b      	ldrb	r3, [r3, #0]
   2f34a:	2b00      	cmp	r3, #0
   2f34c:	d007      	beq.n	2f35e <isTopicMatched+0xae>
   2f34e:	693a      	ldr	r2, [r7, #16]
   2f350:	68bb      	ldr	r3, [r7, #8]
   2f352:	429a      	cmp	r2, r3
   2f354:	d3bd      	bcc.n	2f2d2 <isTopicMatched+0x22>
   2f356:	e002      	b.n	2f35e <isTopicMatched+0xae>
            break;
   2f358:	46c0      	nop			; (mov r8, r8)
   2f35a:	e000      	b.n	2f35e <isTopicMatched+0xae>
            break;
   2f35c:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2f35e:	693a      	ldr	r2, [r7, #16]
   2f360:	68bb      	ldr	r3, [r7, #8]
   2f362:	429a      	cmp	r2, r3
   2f364:	d105      	bne.n	2f372 <isTopicMatched+0xc2>
   2f366:	697b      	ldr	r3, [r7, #20]
   2f368:	781b      	ldrb	r3, [r3, #0]
   2f36a:	2b00      	cmp	r3, #0
   2f36c:	d101      	bne.n	2f372 <isTopicMatched+0xc2>
   2f36e:	2301      	movs	r3, #1
   2f370:	e000      	b.n	2f374 <isTopicMatched+0xc4>
   2f372:	2300      	movs	r3, #0
   2f374:	b2db      	uxtb	r3, r3
}
   2f376:	0018      	movs	r0, r3
   2f378:	46bd      	mov	sp, r7
   2f37a:	b006      	add	sp, #24
   2f37c:	bd80      	pop	{r7, pc}
	...

0002f380 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2f380:	b580      	push	{r7, lr}
   2f382:	b08a      	sub	sp, #40	; 0x28
   2f384:	af00      	add	r7, sp, #0
   2f386:	60f8      	str	r0, [r7, #12]
   2f388:	60b9      	str	r1, [r7, #8]
   2f38a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2f38c:	2301      	movs	r3, #1
   2f38e:	425b      	negs	r3, r3
   2f390:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f392:	2300      	movs	r3, #0
   2f394:	627b      	str	r3, [r7, #36]	; 0x24
   2f396:	e044      	b.n	2f422 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f398:	68fa      	ldr	r2, [r7, #12]
   2f39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f39c:	3304      	adds	r3, #4
   2f39e:	00db      	lsls	r3, r3, #3
   2f3a0:	18d3      	adds	r3, r2, r3
   2f3a2:	3304      	adds	r3, #4
   2f3a4:	681b      	ldr	r3, [r3, #0]
   2f3a6:	2b00      	cmp	r3, #0
   2f3a8:	d038      	beq.n	2f41c <deliverMessage+0x9c>
   2f3aa:	68fa      	ldr	r2, [r7, #12]
   2f3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f3ae:	3304      	adds	r3, #4
   2f3b0:	00db      	lsls	r3, r3, #3
   2f3b2:	18d3      	adds	r3, r2, r3
   2f3b4:	3304      	adds	r3, #4
   2f3b6:	681a      	ldr	r2, [r3, #0]
   2f3b8:	68bb      	ldr	r3, [r7, #8]
   2f3ba:	0011      	movs	r1, r2
   2f3bc:	0018      	movs	r0, r3
   2f3be:	4b28      	ldr	r3, [pc, #160]	; (2f460 <deliverMessage+0xe0>)
   2f3c0:	4798      	blx	r3
   2f3c2:	1e03      	subs	r3, r0, #0
   2f3c4:	d10d      	bne.n	2f3e2 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2f3c6:	68fa      	ldr	r2, [r7, #12]
   2f3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f3ca:	3304      	adds	r3, #4
   2f3cc:	00db      	lsls	r3, r3, #3
   2f3ce:	18d3      	adds	r3, r2, r3
   2f3d0:	3304      	adds	r3, #4
   2f3d2:	681b      	ldr	r3, [r3, #0]
   2f3d4:	68ba      	ldr	r2, [r7, #8]
   2f3d6:	0011      	movs	r1, r2
   2f3d8:	0018      	movs	r0, r3
   2f3da:	4b22      	ldr	r3, [pc, #136]	; (2f464 <deliverMessage+0xe4>)
   2f3dc:	4798      	blx	r3
   2f3de:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f3e0:	d01c      	beq.n	2f41c <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2f3e2:	68fa      	ldr	r2, [r7, #12]
   2f3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f3e6:	3304      	adds	r3, #4
   2f3e8:	00db      	lsls	r3, r3, #3
   2f3ea:	18d3      	adds	r3, r2, r3
   2f3ec:	3308      	adds	r3, #8
   2f3ee:	681b      	ldr	r3, [r3, #0]
   2f3f0:	2b00      	cmp	r3, #0
   2f3f2:	d013      	beq.n	2f41c <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2f3f4:	687a      	ldr	r2, [r7, #4]
   2f3f6:	68b9      	ldr	r1, [r7, #8]
   2f3f8:	2318      	movs	r3, #24
   2f3fa:	18fb      	adds	r3, r7, r3
   2f3fc:	0018      	movs	r0, r3
   2f3fe:	4b1a      	ldr	r3, [pc, #104]	; (2f468 <deliverMessage+0xe8>)
   2f400:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2f402:	68fa      	ldr	r2, [r7, #12]
   2f404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f406:	3304      	adds	r3, #4
   2f408:	00db      	lsls	r3, r3, #3
   2f40a:	18d3      	adds	r3, r2, r3
   2f40c:	3308      	adds	r3, #8
   2f40e:	681b      	ldr	r3, [r3, #0]
   2f410:	2218      	movs	r2, #24
   2f412:	18ba      	adds	r2, r7, r2
   2f414:	0010      	movs	r0, r2
   2f416:	4798      	blx	r3
                rc = SUCCESS;
   2f418:	2300      	movs	r3, #0
   2f41a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f41e:	3301      	adds	r3, #1
   2f420:	627b      	str	r3, [r7, #36]	; 0x24
   2f422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f424:	2b04      	cmp	r3, #4
   2f426:	ddb7      	ble.n	2f398 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2f428:	6a3b      	ldr	r3, [r7, #32]
   2f42a:	3301      	adds	r3, #1
   2f42c:	d112      	bne.n	2f454 <deliverMessage+0xd4>
   2f42e:	68fb      	ldr	r3, [r7, #12]
   2f430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f432:	2b00      	cmp	r3, #0
   2f434:	d00e      	beq.n	2f454 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2f436:	687a      	ldr	r2, [r7, #4]
   2f438:	68b9      	ldr	r1, [r7, #8]
   2f43a:	2310      	movs	r3, #16
   2f43c:	18fb      	adds	r3, r7, r3
   2f43e:	0018      	movs	r0, r3
   2f440:	4b09      	ldr	r3, [pc, #36]	; (2f468 <deliverMessage+0xe8>)
   2f442:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2f444:	68fb      	ldr	r3, [r7, #12]
   2f446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f448:	2210      	movs	r2, #16
   2f44a:	18ba      	adds	r2, r7, r2
   2f44c:	0010      	movs	r0, r2
   2f44e:	4798      	blx	r3
        rc = SUCCESS;
   2f450:	2300      	movs	r3, #0
   2f452:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2f454:	6a3b      	ldr	r3, [r7, #32]
}
   2f456:	0018      	movs	r0, r3
   2f458:	46bd      	mov	sp, r7
   2f45a:	b00a      	add	sp, #40	; 0x28
   2f45c:	bd80      	pop	{r7, pc}
   2f45e:	46c0      	nop			; (mov r8, r8)
   2f460:	00031055 	.word	0x00031055
   2f464:	0002f2b1 	.word	0x0002f2b1
   2f468:	0002efb9 	.word	0x0002efb9

0002f46c <keepalive>:


int keepalive(MQTTClient* c)
{
   2f46c:	b580      	push	{r7, lr}
   2f46e:	b088      	sub	sp, #32
   2f470:	af00      	add	r7, sp, #0
   2f472:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f474:	2301      	movs	r3, #1
   2f476:	425b      	negs	r3, r3
   2f478:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2f47a:	687b      	ldr	r3, [r7, #4]
   2f47c:	699b      	ldr	r3, [r3, #24]
   2f47e:	2b00      	cmp	r3, #0
   2f480:	d102      	bne.n	2f488 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2f482:	2300      	movs	r3, #0
   2f484:	61fb      	str	r3, [r7, #28]
        goto exit;
   2f486:	e033      	b.n	2f4f0 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2f488:	687b      	ldr	r3, [r7, #4]
   2f48a:	3354      	adds	r3, #84	; 0x54
   2f48c:	0018      	movs	r0, r3
   2f48e:	4b1b      	ldr	r3, [pc, #108]	; (2f4fc <keepalive+0x90>)
   2f490:	4798      	blx	r3
   2f492:	1e03      	subs	r3, r0, #0
   2f494:	d02c      	beq.n	2f4f0 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2f496:	687b      	ldr	r3, [r7, #4]
   2f498:	7f1b      	ldrb	r3, [r3, #28]
   2f49a:	2b00      	cmp	r3, #0
   2f49c:	d128      	bne.n	2f4f0 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2f49e:	230c      	movs	r3, #12
   2f4a0:	18fb      	adds	r3, r7, r3
   2f4a2:	0018      	movs	r0, r3
   2f4a4:	4b16      	ldr	r3, [pc, #88]	; (2f500 <keepalive+0x94>)
   2f4a6:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2f4a8:	23fa      	movs	r3, #250	; 0xfa
   2f4aa:	009a      	lsls	r2, r3, #2
   2f4ac:	230c      	movs	r3, #12
   2f4ae:	18fb      	adds	r3, r7, r3
   2f4b0:	0011      	movs	r1, r2
   2f4b2:	0018      	movs	r0, r3
   2f4b4:	4b13      	ldr	r3, [pc, #76]	; (2f504 <keepalive+0x98>)
   2f4b6:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2f4b8:	687b      	ldr	r3, [r7, #4]
   2f4ba:	691a      	ldr	r2, [r3, #16]
   2f4bc:	687b      	ldr	r3, [r7, #4]
   2f4be:	689b      	ldr	r3, [r3, #8]
   2f4c0:	0019      	movs	r1, r3
   2f4c2:	0010      	movs	r0, r2
   2f4c4:	4b10      	ldr	r3, [pc, #64]	; (2f508 <keepalive+0x9c>)
   2f4c6:	4798      	blx	r3
   2f4c8:	0003      	movs	r3, r0
   2f4ca:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2f4cc:	69bb      	ldr	r3, [r7, #24]
   2f4ce:	2b00      	cmp	r3, #0
   2f4d0:	dd0e      	ble.n	2f4f0 <keepalive+0x84>
   2f4d2:	230c      	movs	r3, #12
   2f4d4:	18fa      	adds	r2, r7, r3
   2f4d6:	69b9      	ldr	r1, [r7, #24]
   2f4d8:	687b      	ldr	r3, [r7, #4]
   2f4da:	0018      	movs	r0, r3
   2f4dc:	4b0b      	ldr	r3, [pc, #44]	; (2f50c <keepalive+0xa0>)
   2f4de:	4798      	blx	r3
   2f4e0:	0003      	movs	r3, r0
   2f4e2:	61fb      	str	r3, [r7, #28]
   2f4e4:	69fb      	ldr	r3, [r7, #28]
   2f4e6:	2b00      	cmp	r3, #0
   2f4e8:	d102      	bne.n	2f4f0 <keepalive+0x84>
                c->ping_outstanding = 1;
   2f4ea:	687b      	ldr	r3, [r7, #4]
   2f4ec:	2201      	movs	r2, #1
   2f4ee:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2f4f0:	69fb      	ldr	r3, [r7, #28]
}
   2f4f2:	0018      	movs	r0, r3
   2f4f4:	46bd      	mov	sp, r7
   2f4f6:	b008      	add	sp, #32
   2f4f8:	bd80      	pop	{r7, pc}
   2f4fa:	46c0      	nop			; (mov r8, r8)
   2f4fc:	0002fded 	.word	0x0002fded
   2f500:	0002fe91 	.word	0x0002fe91
   2f504:	0002fe19 	.word	0x0002fe19
   2f508:	00030a65 	.word	0x00030a65
   2f50c:	0002f009 	.word	0x0002f009

0002f510 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2f510:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f512:	b095      	sub	sp, #84	; 0x54
   2f514:	af06      	add	r7, sp, #24
   2f516:	6078      	str	r0, [r7, #4]
   2f518:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2f51a:	683a      	ldr	r2, [r7, #0]
   2f51c:	687b      	ldr	r3, [r7, #4]
   2f51e:	0011      	movs	r1, r2
   2f520:	0018      	movs	r0, r3
   2f522:	4b70      	ldr	r3, [pc, #448]	; (2f6e4 <cycle+0x1d4>)
   2f524:	4798      	blx	r3
   2f526:	0002      	movs	r2, r0
   2f528:	232e      	movs	r3, #46	; 0x2e
   2f52a:	18fb      	adds	r3, r7, r3
   2f52c:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2f52e:	2300      	movs	r3, #0
   2f530:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2f532:	2300      	movs	r3, #0
   2f534:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2f536:	232e      	movs	r3, #46	; 0x2e
   2f538:	18fb      	adds	r3, r7, r3
   2f53a:	881b      	ldrh	r3, [r3, #0]
   2f53c:	2b0d      	cmp	r3, #13
   2f53e:	d900      	bls.n	2f542 <cycle+0x32>
   2f540:	e0bd      	b.n	2f6be <cycle+0x1ae>
   2f542:	009a      	lsls	r2, r3, #2
   2f544:	4b68      	ldr	r3, [pc, #416]	; (2f6e8 <cycle+0x1d8>)
   2f546:	18d3      	adds	r3, r2, r3
   2f548:	681b      	ldr	r3, [r3, #0]
   2f54a:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f54c:	687b      	ldr	r3, [r7, #4]
   2f54e:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2f550:	687b      	ldr	r3, [r7, #4]
   2f552:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f554:	001e      	movs	r6, r3
   2f556:	2310      	movs	r3, #16
   2f558:	18fb      	adds	r3, r7, r3
   2f55a:	1d1d      	adds	r5, r3, #4
   2f55c:	2310      	movs	r3, #16
   2f55e:	18fb      	adds	r3, r7, r3
   2f560:	1c5c      	adds	r4, r3, #1
   2f562:	230c      	movs	r3, #12
   2f564:	18f9      	adds	r1, r7, r3
   2f566:	2310      	movs	r3, #16
   2f568:	18fb      	adds	r3, r7, r3
   2f56a:	1c98      	adds	r0, r3, #2
   2f56c:	9604      	str	r6, [sp, #16]
   2f56e:	9203      	str	r2, [sp, #12]
   2f570:	2310      	movs	r3, #16
   2f572:	18fb      	adds	r3, r7, r3
   2f574:	330c      	adds	r3, #12
   2f576:	9302      	str	r3, [sp, #8]
   2f578:	2310      	movs	r3, #16
   2f57a:	18fb      	adds	r3, r7, r3
   2f57c:	3308      	adds	r3, #8
   2f57e:	9301      	str	r3, [sp, #4]
   2f580:	2320      	movs	r3, #32
   2f582:	18fb      	adds	r3, r7, r3
   2f584:	9300      	str	r3, [sp, #0]
   2f586:	002b      	movs	r3, r5
   2f588:	0022      	movs	r2, r4
   2f58a:	4c58      	ldr	r4, [pc, #352]	; (2f6ec <cycle+0x1dc>)
   2f58c:	47a0      	blx	r4
   2f58e:	0003      	movs	r3, r0
   2f590:	2b01      	cmp	r3, #1
   2f592:	d000      	beq.n	2f596 <cycle+0x86>
   2f594:	e098      	b.n	2f6c8 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2f596:	68fb      	ldr	r3, [r7, #12]
   2f598:	b2da      	uxtb	r2, r3
   2f59a:	2310      	movs	r3, #16
   2f59c:	18fb      	adds	r3, r7, r3
   2f59e:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2f5a0:	2310      	movs	r3, #16
   2f5a2:	18fa      	adds	r2, r7, r3
   2f5a4:	2320      	movs	r3, #32
   2f5a6:	18f9      	adds	r1, r7, r3
   2f5a8:	687b      	ldr	r3, [r7, #4]
   2f5aa:	0018      	movs	r0, r3
   2f5ac:	4b50      	ldr	r3, [pc, #320]	; (2f6f0 <cycle+0x1e0>)
   2f5ae:	4798      	blx	r3
            if (msg.qos != QOS0)
   2f5b0:	2310      	movs	r3, #16
   2f5b2:	18fb      	adds	r3, r7, r3
   2f5b4:	781b      	ldrb	r3, [r3, #0]
   2f5b6:	2b00      	cmp	r3, #0
   2f5b8:	d100      	bne.n	2f5bc <cycle+0xac>
   2f5ba:	e07d      	b.n	2f6b8 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2f5bc:	2310      	movs	r3, #16
   2f5be:	18fb      	adds	r3, r7, r3
   2f5c0:	781b      	ldrb	r3, [r3, #0]
   2f5c2:	2b01      	cmp	r3, #1
   2f5c4:	d10f      	bne.n	2f5e6 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2f5c6:	687b      	ldr	r3, [r7, #4]
   2f5c8:	6918      	ldr	r0, [r3, #16]
   2f5ca:	687b      	ldr	r3, [r7, #4]
   2f5cc:	689b      	ldr	r3, [r3, #8]
   2f5ce:	0019      	movs	r1, r3
   2f5d0:	2310      	movs	r3, #16
   2f5d2:	18fb      	adds	r3, r7, r3
   2f5d4:	889b      	ldrh	r3, [r3, #4]
   2f5d6:	9300      	str	r3, [sp, #0]
   2f5d8:	2300      	movs	r3, #0
   2f5da:	2204      	movs	r2, #4
   2f5dc:	4c45      	ldr	r4, [pc, #276]	; (2f6f4 <cycle+0x1e4>)
   2f5de:	47a0      	blx	r4
   2f5e0:	0003      	movs	r3, r0
   2f5e2:	637b      	str	r3, [r7, #52]	; 0x34
   2f5e4:	e013      	b.n	2f60e <cycle+0xfe>
                else if (msg.qos == QOS2)
   2f5e6:	2310      	movs	r3, #16
   2f5e8:	18fb      	adds	r3, r7, r3
   2f5ea:	781b      	ldrb	r3, [r3, #0]
   2f5ec:	2b02      	cmp	r3, #2
   2f5ee:	d10e      	bne.n	2f60e <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2f5f0:	687b      	ldr	r3, [r7, #4]
   2f5f2:	6918      	ldr	r0, [r3, #16]
   2f5f4:	687b      	ldr	r3, [r7, #4]
   2f5f6:	689b      	ldr	r3, [r3, #8]
   2f5f8:	0019      	movs	r1, r3
   2f5fa:	2310      	movs	r3, #16
   2f5fc:	18fb      	adds	r3, r7, r3
   2f5fe:	889b      	ldrh	r3, [r3, #4]
   2f600:	9300      	str	r3, [sp, #0]
   2f602:	2300      	movs	r3, #0
   2f604:	2205      	movs	r2, #5
   2f606:	4c3b      	ldr	r4, [pc, #236]	; (2f6f4 <cycle+0x1e4>)
   2f608:	47a0      	blx	r4
   2f60a:	0003      	movs	r3, r0
   2f60c:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2f60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f610:	2b00      	cmp	r3, #0
   2f612:	dc03      	bgt.n	2f61c <cycle+0x10c>
                    rc = FAILURE;
   2f614:	2301      	movs	r3, #1
   2f616:	425b      	negs	r3, r3
   2f618:	633b      	str	r3, [r7, #48]	; 0x30
   2f61a:	e007      	b.n	2f62c <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2f61c:	683a      	ldr	r2, [r7, #0]
   2f61e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f620:	687b      	ldr	r3, [r7, #4]
   2f622:	0018      	movs	r0, r3
   2f624:	4b34      	ldr	r3, [pc, #208]	; (2f6f8 <cycle+0x1e8>)
   2f626:	4798      	blx	r3
   2f628:	0003      	movs	r3, r0
   2f62a:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2f62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f62e:	3301      	adds	r3, #1
   2f630:	d142      	bne.n	2f6b8 <cycle+0x1a8>
                    goto exit; // there was a problem
   2f632:	46c0      	nop			; (mov r8, r8)
   2f634:	e049      	b.n	2f6ca <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f636:	687b      	ldr	r3, [r7, #4]
   2f638:	695c      	ldr	r4, [r3, #20]
   2f63a:	687b      	ldr	r3, [r7, #4]
   2f63c:	68db      	ldr	r3, [r3, #12]
   2f63e:	220a      	movs	r2, #10
   2f640:	18ba      	adds	r2, r7, r2
   2f642:	2109      	movs	r1, #9
   2f644:	1879      	adds	r1, r7, r1
   2f646:	2008      	movs	r0, #8
   2f648:	1838      	adds	r0, r7, r0
   2f64a:	9300      	str	r3, [sp, #0]
   2f64c:	0023      	movs	r3, r4
   2f64e:	4c2b      	ldr	r4, [pc, #172]	; (2f6fc <cycle+0x1ec>)
   2f650:	47a0      	blx	r4
   2f652:	0003      	movs	r3, r0
   2f654:	2b01      	cmp	r3, #1
   2f656:	d003      	beq.n	2f660 <cycle+0x150>
                rc = FAILURE;
   2f658:	2301      	movs	r3, #1
   2f65a:	425b      	negs	r3, r3
   2f65c:	633b      	str	r3, [r7, #48]	; 0x30
   2f65e:	e023      	b.n	2f6a8 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2f660:	687b      	ldr	r3, [r7, #4]
   2f662:	6918      	ldr	r0, [r3, #16]
   2f664:	687b      	ldr	r3, [r7, #4]
   2f666:	689b      	ldr	r3, [r3, #8]
   2f668:	0019      	movs	r1, r3
   2f66a:	230a      	movs	r3, #10
   2f66c:	18fb      	adds	r3, r7, r3
   2f66e:	881b      	ldrh	r3, [r3, #0]
   2f670:	9300      	str	r3, [sp, #0]
   2f672:	2300      	movs	r3, #0
   2f674:	2206      	movs	r2, #6
   2f676:	4c1f      	ldr	r4, [pc, #124]	; (2f6f4 <cycle+0x1e4>)
   2f678:	47a0      	blx	r4
   2f67a:	0003      	movs	r3, r0
   2f67c:	637b      	str	r3, [r7, #52]	; 0x34
   2f67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f680:	2b00      	cmp	r3, #0
   2f682:	dc03      	bgt.n	2f68c <cycle+0x17c>
                rc = FAILURE;
   2f684:	2301      	movs	r3, #1
   2f686:	425b      	negs	r3, r3
   2f688:	633b      	str	r3, [r7, #48]	; 0x30
   2f68a:	e00d      	b.n	2f6a8 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2f68c:	683a      	ldr	r2, [r7, #0]
   2f68e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f690:	687b      	ldr	r3, [r7, #4]
   2f692:	0018      	movs	r0, r3
   2f694:	4b18      	ldr	r3, [pc, #96]	; (2f6f8 <cycle+0x1e8>)
   2f696:	4798      	blx	r3
   2f698:	0003      	movs	r3, r0
   2f69a:	633b      	str	r3, [r7, #48]	; 0x30
   2f69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f69e:	2b00      	cmp	r3, #0
   2f6a0:	d002      	beq.n	2f6a8 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2f6a2:	2301      	movs	r3, #1
   2f6a4:	425b      	negs	r3, r3
   2f6a6:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f6aa:	3301      	adds	r3, #1
   2f6ac:	d106      	bne.n	2f6bc <cycle+0x1ac>
                goto exit; // there was a problem
   2f6ae:	e00c      	b.n	2f6ca <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2f6b0:	687b      	ldr	r3, [r7, #4]
   2f6b2:	2200      	movs	r2, #0
   2f6b4:	771a      	strb	r2, [r3, #28]
            break;
   2f6b6:	e002      	b.n	2f6be <cycle+0x1ae>
            break;
   2f6b8:	46c0      	nop			; (mov r8, r8)
   2f6ba:	e000      	b.n	2f6be <cycle+0x1ae>
            break;
   2f6bc:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2f6be:	687b      	ldr	r3, [r7, #4]
   2f6c0:	0018      	movs	r0, r3
   2f6c2:	4b0f      	ldr	r3, [pc, #60]	; (2f700 <cycle+0x1f0>)
   2f6c4:	4798      	blx	r3
   2f6c6:	e000      	b.n	2f6ca <cycle+0x1ba>
                goto exit;
   2f6c8:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2f6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f6cc:	2b00      	cmp	r3, #0
   2f6ce:	d103      	bne.n	2f6d8 <cycle+0x1c8>
        rc = packet_type;
   2f6d0:	232e      	movs	r3, #46	; 0x2e
   2f6d2:	18fb      	adds	r3, r7, r3
   2f6d4:	881b      	ldrh	r3, [r3, #0]
   2f6d6:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2f6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2f6da:	0018      	movs	r0, r3
   2f6dc:	46bd      	mov	sp, r7
   2f6de:	b00f      	add	sp, #60	; 0x3c
   2f6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f6e2:	46c0      	nop			; (mov r8, r8)
   2f6e4:	0002f1c5 	.word	0x0002f1c5
   2f6e8:	0003a6b0 	.word	0x0003a6b0
   2f6ec:	00030a89 	.word	0x00030a89
   2f6f0:	0002f381 	.word	0x0002f381
   2f6f4:	00031281 	.word	0x00031281
   2f6f8:	0002f009 	.word	0x0002f009
   2f6fc:	00030b8d 	.word	0x00030b8d
   2f700:	0002f46d 	.word	0x0002f46d

0002f704 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2f704:	b580      	push	{r7, lr}
   2f706:	b086      	sub	sp, #24
   2f708:	af00      	add	r7, sp, #0
   2f70a:	6078      	str	r0, [r7, #4]
   2f70c:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2f70e:	2300      	movs	r3, #0
   2f710:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2f712:	2308      	movs	r3, #8
   2f714:	18fb      	adds	r3, r7, r3
   2f716:	0018      	movs	r0, r3
   2f718:	4b11      	ldr	r3, [pc, #68]	; (2f760 <MQTTYield+0x5c>)
   2f71a:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2f71c:	683a      	ldr	r2, [r7, #0]
   2f71e:	2308      	movs	r3, #8
   2f720:	18fb      	adds	r3, r7, r3
   2f722:	0011      	movs	r1, r2
   2f724:	0018      	movs	r0, r3
   2f726:	4b0f      	ldr	r3, [pc, #60]	; (2f764 <MQTTYield+0x60>)
   2f728:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2f72a:	2308      	movs	r3, #8
   2f72c:	18fa      	adds	r2, r7, r3
   2f72e:	687b      	ldr	r3, [r7, #4]
   2f730:	0011      	movs	r1, r2
   2f732:	0018      	movs	r0, r3
   2f734:	4b0c      	ldr	r3, [pc, #48]	; (2f768 <MQTTYield+0x64>)
   2f736:	4798      	blx	r3
   2f738:	0003      	movs	r3, r0
   2f73a:	3301      	adds	r3, #1
   2f73c:	d103      	bne.n	2f746 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2f73e:	2301      	movs	r3, #1
   2f740:	425b      	negs	r3, r3
   2f742:	617b      	str	r3, [r7, #20]
            break;
   2f744:	e006      	b.n	2f754 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2f746:	2308      	movs	r3, #8
   2f748:	18fb      	adds	r3, r7, r3
   2f74a:	0018      	movs	r0, r3
   2f74c:	4b07      	ldr	r3, [pc, #28]	; (2f76c <MQTTYield+0x68>)
   2f74e:	4798      	blx	r3
   2f750:	1e03      	subs	r3, r0, #0
   2f752:	d0ea      	beq.n	2f72a <MQTTYield+0x26>
        
    return rc;
   2f754:	697b      	ldr	r3, [r7, #20]
}
   2f756:	0018      	movs	r0, r3
   2f758:	46bd      	mov	sp, r7
   2f75a:	b006      	add	sp, #24
   2f75c:	bd80      	pop	{r7, pc}
   2f75e:	46c0      	nop			; (mov r8, r8)
   2f760:	0002fe91 	.word	0x0002fe91
   2f764:	0002fe19 	.word	0x0002fe19
   2f768:	0002f511 	.word	0x0002f511
   2f76c:	0002fded 	.word	0x0002fded

0002f770 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2f770:	b580      	push	{r7, lr}
   2f772:	b086      	sub	sp, #24
   2f774:	af00      	add	r7, sp, #0
   2f776:	60f8      	str	r0, [r7, #12]
   2f778:	60b9      	str	r1, [r7, #8]
   2f77a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f77c:	2301      	movs	r3, #1
   2f77e:	425b      	negs	r3, r3
   2f780:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2f782:	687b      	ldr	r3, [r7, #4]
   2f784:	0018      	movs	r0, r3
   2f786:	4b0b      	ldr	r3, [pc, #44]	; (2f7b4 <waitfor+0x44>)
   2f788:	4798      	blx	r3
   2f78a:	1e03      	subs	r3, r0, #0
   2f78c:	d10c      	bne.n	2f7a8 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2f78e:	687a      	ldr	r2, [r7, #4]
   2f790:	68fb      	ldr	r3, [r7, #12]
   2f792:	0011      	movs	r1, r2
   2f794:	0018      	movs	r0, r3
   2f796:	4b08      	ldr	r3, [pc, #32]	; (2f7b8 <waitfor+0x48>)
   2f798:	4798      	blx	r3
   2f79a:	0003      	movs	r3, r0
   2f79c:	617b      	str	r3, [r7, #20]
   2f79e:	697a      	ldr	r2, [r7, #20]
   2f7a0:	68bb      	ldr	r3, [r7, #8]
   2f7a2:	429a      	cmp	r2, r3
   2f7a4:	d1ed      	bne.n	2f782 <waitfor+0x12>
   2f7a6:	e000      	b.n	2f7aa <waitfor+0x3a>
            break; // we timed out
   2f7a8:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2f7aa:	697b      	ldr	r3, [r7, #20]
}
   2f7ac:	0018      	movs	r0, r3
   2f7ae:	46bd      	mov	sp, r7
   2f7b0:	b006      	add	sp, #24
   2f7b2:	bd80      	pop	{r7, pc}
   2f7b4:	0002fded 	.word	0x0002fded
   2f7b8:	0002f511 	.word	0x0002f511

0002f7bc <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2f7bc:	b590      	push	{r4, r7, lr}
   2f7be:	b09f      	sub	sp, #124	; 0x7c
   2f7c0:	af00      	add	r7, sp, #0
   2f7c2:	6078      	str	r0, [r7, #4]
   2f7c4:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2f7c6:	2301      	movs	r3, #1
   2f7c8:	425b      	negs	r3, r3
   2f7ca:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2f7cc:	230c      	movs	r3, #12
   2f7ce:	18fa      	adds	r2, r7, r3
   2f7d0:	4b41      	ldr	r3, [pc, #260]	; (2f8d8 <MQTTConnect+0x11c>)
   2f7d2:	0010      	movs	r0, r2
   2f7d4:	0019      	movs	r1, r3
   2f7d6:	2358      	movs	r3, #88	; 0x58
   2f7d8:	001a      	movs	r2, r3
   2f7da:	4b40      	ldr	r3, [pc, #256]	; (2f8dc <MQTTConnect+0x120>)
   2f7dc:	4798      	blx	r3
    int len = 0;
   2f7de:	2300      	movs	r3, #0
   2f7e0:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2f7e2:	687b      	ldr	r3, [r7, #4]
   2f7e4:	6a1b      	ldr	r3, [r3, #32]
   2f7e6:	2b00      	cmp	r3, #0
   2f7e8:	d166      	bne.n	2f8b8 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2f7ea:	2364      	movs	r3, #100	; 0x64
   2f7ec:	18fb      	adds	r3, r7, r3
   2f7ee:	0018      	movs	r0, r3
   2f7f0:	4b3b      	ldr	r3, [pc, #236]	; (2f8e0 <MQTTConnect+0x124>)
   2f7f2:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2f7f4:	687b      	ldr	r3, [r7, #4]
   2f7f6:	685a      	ldr	r2, [r3, #4]
   2f7f8:	2364      	movs	r3, #100	; 0x64
   2f7fa:	18fb      	adds	r3, r7, r3
   2f7fc:	0011      	movs	r1, r2
   2f7fe:	0018      	movs	r0, r3
   2f800:	4b38      	ldr	r3, [pc, #224]	; (2f8e4 <MQTTConnect+0x128>)
   2f802:	4798      	blx	r3

    if (options == 0)
   2f804:	683b      	ldr	r3, [r7, #0]
   2f806:	2b00      	cmp	r3, #0
   2f808:	d102      	bne.n	2f810 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2f80a:	230c      	movs	r3, #12
   2f80c:	18fb      	adds	r3, r7, r3
   2f80e:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2f810:	683b      	ldr	r3, [r7, #0]
   2f812:	8b1b      	ldrh	r3, [r3, #24]
   2f814:	001a      	movs	r2, r3
   2f816:	687b      	ldr	r3, [r7, #4]
   2f818:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2f81a:	687b      	ldr	r3, [r7, #4]
   2f81c:	3354      	adds	r3, #84	; 0x54
   2f81e:	001a      	movs	r2, r3
   2f820:	687b      	ldr	r3, [r7, #4]
   2f822:	699b      	ldr	r3, [r3, #24]
   2f824:	0019      	movs	r1, r3
   2f826:	0010      	movs	r0, r2
   2f828:	4b2f      	ldr	r3, [pc, #188]	; (2f8e8 <MQTTConnect+0x12c>)
   2f82a:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2f82c:	687b      	ldr	r3, [r7, #4]
   2f82e:	6918      	ldr	r0, [r3, #16]
   2f830:	687b      	ldr	r3, [r7, #4]
   2f832:	689b      	ldr	r3, [r3, #8]
   2f834:	0019      	movs	r1, r3
   2f836:	683b      	ldr	r3, [r7, #0]
   2f838:	001a      	movs	r2, r3
   2f83a:	4b2c      	ldr	r3, [pc, #176]	; (2f8ec <MQTTConnect+0x130>)
   2f83c:	4798      	blx	r3
   2f83e:	0003      	movs	r3, r0
   2f840:	673b      	str	r3, [r7, #112]	; 0x70
   2f842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f844:	2b00      	cmp	r3, #0
   2f846:	dd39      	ble.n	2f8bc <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2f848:	2364      	movs	r3, #100	; 0x64
   2f84a:	18fa      	adds	r2, r7, r3
   2f84c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2f84e:	687b      	ldr	r3, [r7, #4]
   2f850:	0018      	movs	r0, r3
   2f852:	4b27      	ldr	r3, [pc, #156]	; (2f8f0 <MQTTConnect+0x134>)
   2f854:	4798      	blx	r3
   2f856:	0003      	movs	r3, r0
   2f858:	677b      	str	r3, [r7, #116]	; 0x74
   2f85a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f85c:	2b00      	cmp	r3, #0
   2f85e:	d12f      	bne.n	2f8c0 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2f860:	2364      	movs	r3, #100	; 0x64
   2f862:	18fa      	adds	r2, r7, r3
   2f864:	687b      	ldr	r3, [r7, #4]
   2f866:	2102      	movs	r1, #2
   2f868:	0018      	movs	r0, r3
   2f86a:	4b22      	ldr	r3, [pc, #136]	; (2f8f4 <MQTTConnect+0x138>)
   2f86c:	4798      	blx	r3
   2f86e:	0003      	movs	r3, r0
   2f870:	2b02      	cmp	r3, #2
   2f872:	d11d      	bne.n	2f8b0 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2f874:	230b      	movs	r3, #11
   2f876:	18fb      	adds	r3, r7, r3
   2f878:	22ff      	movs	r2, #255	; 0xff
   2f87a:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2f87c:	230a      	movs	r3, #10
   2f87e:	18fb      	adds	r3, r7, r3
   2f880:	2200      	movs	r2, #0
   2f882:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2f884:	687b      	ldr	r3, [r7, #4]
   2f886:	695a      	ldr	r2, [r3, #20]
   2f888:	687b      	ldr	r3, [r7, #4]
   2f88a:	68db      	ldr	r3, [r3, #12]
   2f88c:	210b      	movs	r1, #11
   2f88e:	1879      	adds	r1, r7, r1
   2f890:	200a      	movs	r0, #10
   2f892:	1838      	adds	r0, r7, r0
   2f894:	4c18      	ldr	r4, [pc, #96]	; (2f8f8 <MQTTConnect+0x13c>)
   2f896:	47a0      	blx	r4
   2f898:	0003      	movs	r3, r0
   2f89a:	2b01      	cmp	r3, #1
   2f89c:	d104      	bne.n	2f8a8 <MQTTConnect+0xec>
            rc = connack_rc;
   2f89e:	230b      	movs	r3, #11
   2f8a0:	18fb      	adds	r3, r7, r3
   2f8a2:	781b      	ldrb	r3, [r3, #0]
   2f8a4:	677b      	str	r3, [r7, #116]	; 0x74
   2f8a6:	e00c      	b.n	2f8c2 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2f8a8:	2301      	movs	r3, #1
   2f8aa:	425b      	negs	r3, r3
   2f8ac:	677b      	str	r3, [r7, #116]	; 0x74
   2f8ae:	e008      	b.n	2f8c2 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2f8b0:	2301      	movs	r3, #1
   2f8b2:	425b      	negs	r3, r3
   2f8b4:	677b      	str	r3, [r7, #116]	; 0x74
   2f8b6:	e004      	b.n	2f8c2 <MQTTConnect+0x106>
		goto exit;
   2f8b8:	46c0      	nop			; (mov r8, r8)
   2f8ba:	e002      	b.n	2f8c2 <MQTTConnect+0x106>
        goto exit;
   2f8bc:	46c0      	nop			; (mov r8, r8)
   2f8be:	e000      	b.n	2f8c2 <MQTTConnect+0x106>
        goto exit; // there was a problem
   2f8c0:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2f8c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f8c4:	2b00      	cmp	r3, #0
   2f8c6:	d102      	bne.n	2f8ce <MQTTConnect+0x112>
        c->isconnected = 1;
   2f8c8:	687b      	ldr	r3, [r7, #4]
   2f8ca:	2201      	movs	r2, #1
   2f8cc:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2f8ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2f8d0:	0018      	movs	r0, r3
   2f8d2:	46bd      	mov	sp, r7
   2f8d4:	b01f      	add	sp, #124	; 0x7c
   2f8d6:	bd90      	pop	{r4, r7, pc}
   2f8d8:	0003a6e8 	.word	0x0003a6e8
   2f8dc:	0003550d 	.word	0x0003550d
   2f8e0:	0002fe91 	.word	0x0002fe91
   2f8e4:	0002fe19 	.word	0x0002fe19
   2f8e8:	0002fe41 	.word	0x0002fe41
   2f8ec:	0003066d 	.word	0x0003066d
   2f8f0:	0002f009 	.word	0x0002f009
   2f8f4:	0002f771 	.word	0x0002f771
   2f8f8:	000308e9 	.word	0x000308e9

0002f8fc <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2f8fc:	b5b0      	push	{r4, r5, r7, lr}
   2f8fe:	b096      	sub	sp, #88	; 0x58
   2f900:	af04      	add	r7, sp, #16
   2f902:	60f8      	str	r0, [r7, #12]
   2f904:	60b9      	str	r1, [r7, #8]
   2f906:	603b      	str	r3, [r7, #0]
   2f908:	1dfb      	adds	r3, r7, #7
   2f90a:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2f90c:	2301      	movs	r3, #1
   2f90e:	425b      	negs	r3, r3
   2f910:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2f912:	2300      	movs	r3, #0
   2f914:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2f916:	2324      	movs	r3, #36	; 0x24
   2f918:	18fb      	adds	r3, r7, r3
   2f91a:	2200      	movs	r2, #0
   2f91c:	601a      	str	r2, [r3, #0]
   2f91e:	2324      	movs	r3, #36	; 0x24
   2f920:	18fb      	adds	r3, r7, r3
   2f922:	2200      	movs	r2, #0
   2f924:	605a      	str	r2, [r3, #4]
   2f926:	2324      	movs	r3, #36	; 0x24
   2f928:	18fb      	adds	r3, r7, r3
   2f92a:	2200      	movs	r2, #0
   2f92c:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2f92e:	1dfb      	adds	r3, r7, #7
   2f930:	781b      	ldrb	r3, [r3, #0]
   2f932:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2f934:	2324      	movs	r3, #36	; 0x24
   2f936:	18fb      	adds	r3, r7, r3
   2f938:	68ba      	ldr	r2, [r7, #8]
   2f93a:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2f93c:	68fb      	ldr	r3, [r7, #12]
   2f93e:	6a1b      	ldr	r3, [r3, #32]
   2f940:	2b00      	cmp	r3, #0
   2f942:	d100      	bne.n	2f946 <MQTTSubscribe+0x4a>
   2f944:	e088      	b.n	2fa58 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2f946:	2330      	movs	r3, #48	; 0x30
   2f948:	18fb      	adds	r3, r7, r3
   2f94a:	0018      	movs	r0, r3
   2f94c:	4b47      	ldr	r3, [pc, #284]	; (2fa6c <MQTTSubscribe+0x170>)
   2f94e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f950:	68fb      	ldr	r3, [r7, #12]
   2f952:	685a      	ldr	r2, [r3, #4]
   2f954:	2330      	movs	r3, #48	; 0x30
   2f956:	18fb      	adds	r3, r7, r3
   2f958:	0011      	movs	r1, r2
   2f95a:	0018      	movs	r0, r3
   2f95c:	4b44      	ldr	r3, [pc, #272]	; (2fa70 <MQTTSubscribe+0x174>)
   2f95e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2f960:	68fb      	ldr	r3, [r7, #12]
   2f962:	691c      	ldr	r4, [r3, #16]
   2f964:	68fb      	ldr	r3, [r7, #12]
   2f966:	689b      	ldr	r3, [r3, #8]
   2f968:	001d      	movs	r5, r3
   2f96a:	68fb      	ldr	r3, [r7, #12]
   2f96c:	0018      	movs	r0, r3
   2f96e:	4b41      	ldr	r3, [pc, #260]	; (2fa74 <MQTTSubscribe+0x178>)
   2f970:	4798      	blx	r3
   2f972:	0003      	movs	r3, r0
   2f974:	b29a      	uxth	r2, r3
   2f976:	2320      	movs	r3, #32
   2f978:	18fb      	adds	r3, r7, r3
   2f97a:	9302      	str	r3, [sp, #8]
   2f97c:	2324      	movs	r3, #36	; 0x24
   2f97e:	18fb      	adds	r3, r7, r3
   2f980:	9301      	str	r3, [sp, #4]
   2f982:	2301      	movs	r3, #1
   2f984:	9300      	str	r3, [sp, #0]
   2f986:	0013      	movs	r3, r2
   2f988:	2200      	movs	r2, #0
   2f98a:	0029      	movs	r1, r5
   2f98c:	0020      	movs	r0, r4
   2f98e:	4c3a      	ldr	r4, [pc, #232]	; (2fa78 <MQTTSubscribe+0x17c>)
   2f990:	47a0      	blx	r4
   2f992:	0003      	movs	r3, r0
   2f994:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2f996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f998:	2b00      	cmp	r3, #0
   2f99a:	dd5f      	ble.n	2fa5c <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2f99c:	2330      	movs	r3, #48	; 0x30
   2f99e:	18fa      	adds	r2, r7, r3
   2f9a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2f9a2:	68fb      	ldr	r3, [r7, #12]
   2f9a4:	0018      	movs	r0, r3
   2f9a6:	4b35      	ldr	r3, [pc, #212]	; (2fa7c <MQTTSubscribe+0x180>)
   2f9a8:	4798      	blx	r3
   2f9aa:	0003      	movs	r3, r0
   2f9ac:	647b      	str	r3, [r7, #68]	; 0x44
   2f9ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2f9b0:	2b00      	cmp	r3, #0
   2f9b2:	d155      	bne.n	2fa60 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2f9b4:	2330      	movs	r3, #48	; 0x30
   2f9b6:	18fa      	adds	r2, r7, r3
   2f9b8:	68fb      	ldr	r3, [r7, #12]
   2f9ba:	2109      	movs	r1, #9
   2f9bc:	0018      	movs	r0, r3
   2f9be:	4b30      	ldr	r3, [pc, #192]	; (2fa80 <MQTTSubscribe+0x184>)
   2f9c0:	4798      	blx	r3
   2f9c2:	0003      	movs	r3, r0
   2f9c4:	2b09      	cmp	r3, #9
   2f9c6:	d143      	bne.n	2fa50 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2f9c8:	2300      	movs	r3, #0
   2f9ca:	61fb      	str	r3, [r7, #28]
   2f9cc:	2301      	movs	r3, #1
   2f9ce:	425b      	negs	r3, r3
   2f9d0:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2f9d2:	68fb      	ldr	r3, [r7, #12]
   2f9d4:	695a      	ldr	r2, [r3, #20]
   2f9d6:	68fb      	ldr	r3, [r7, #12]
   2f9d8:	68db      	ldr	r3, [r3, #12]
   2f9da:	001c      	movs	r4, r3
   2f9dc:	2318      	movs	r3, #24
   2f9de:	18fb      	adds	r3, r7, r3
   2f9e0:	211c      	movs	r1, #28
   2f9e2:	1879      	adds	r1, r7, r1
   2f9e4:	2016      	movs	r0, #22
   2f9e6:	1838      	adds	r0, r7, r0
   2f9e8:	9401      	str	r4, [sp, #4]
   2f9ea:	9200      	str	r2, [sp, #0]
   2f9ec:	000a      	movs	r2, r1
   2f9ee:	2101      	movs	r1, #1
   2f9f0:	4c24      	ldr	r4, [pc, #144]	; (2fa84 <MQTTSubscribe+0x188>)
   2f9f2:	47a0      	blx	r4
   2f9f4:	0003      	movs	r3, r0
   2f9f6:	2b01      	cmp	r3, #1
   2f9f8:	d101      	bne.n	2f9fe <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2f9fa:	69bb      	ldr	r3, [r7, #24]
   2f9fc:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2f9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fa00:	2b80      	cmp	r3, #128	; 0x80
   2fa02:	d02e      	beq.n	2fa62 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fa04:	2300      	movs	r3, #0
   2fa06:	643b      	str	r3, [r7, #64]	; 0x40
   2fa08:	e01e      	b.n	2fa48 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2fa0a:	68fa      	ldr	r2, [r7, #12]
   2fa0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fa0e:	3304      	adds	r3, #4
   2fa10:	00db      	lsls	r3, r3, #3
   2fa12:	18d3      	adds	r3, r2, r3
   2fa14:	3304      	adds	r3, #4
   2fa16:	681b      	ldr	r3, [r3, #0]
   2fa18:	2b00      	cmp	r3, #0
   2fa1a:	d112      	bne.n	2fa42 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2fa1c:	68fa      	ldr	r2, [r7, #12]
   2fa1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fa20:	3304      	adds	r3, #4
   2fa22:	00db      	lsls	r3, r3, #3
   2fa24:	18d3      	adds	r3, r2, r3
   2fa26:	3304      	adds	r3, #4
   2fa28:	68ba      	ldr	r2, [r7, #8]
   2fa2a:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2fa2c:	68fa      	ldr	r2, [r7, #12]
   2fa2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fa30:	3304      	adds	r3, #4
   2fa32:	00db      	lsls	r3, r3, #3
   2fa34:	18d3      	adds	r3, r2, r3
   2fa36:	3308      	adds	r3, #8
   2fa38:	683a      	ldr	r2, [r7, #0]
   2fa3a:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2fa3c:	2300      	movs	r3, #0
   2fa3e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2fa40:	e00f      	b.n	2fa62 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fa42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fa44:	3301      	adds	r3, #1
   2fa46:	643b      	str	r3, [r7, #64]	; 0x40
   2fa48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fa4a:	2b04      	cmp	r3, #4
   2fa4c:	dddd      	ble.n	2fa0a <MQTTSubscribe+0x10e>
   2fa4e:	e008      	b.n	2fa62 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2fa50:	2301      	movs	r3, #1
   2fa52:	425b      	negs	r3, r3
   2fa54:	647b      	str	r3, [r7, #68]	; 0x44
   2fa56:	e004      	b.n	2fa62 <MQTTSubscribe+0x166>
		goto exit;
   2fa58:	46c0      	nop			; (mov r8, r8)
   2fa5a:	e002      	b.n	2fa62 <MQTTSubscribe+0x166>
        goto exit;
   2fa5c:	46c0      	nop			; (mov r8, r8)
   2fa5e:	e000      	b.n	2fa62 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2fa60:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fa62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2fa64:	0018      	movs	r0, r3
   2fa66:	46bd      	mov	sp, r7
   2fa68:	b012      	add	sp, #72	; 0x48
   2fa6a:	bdb0      	pop	{r4, r5, r7, pc}
   2fa6c:	0002fe91 	.word	0x0002fe91
   2fa70:	0002fe19 	.word	0x0002fe19
   2fa74:	0002efd9 	.word	0x0002efd9
   2fa78:	000313c9 	.word	0x000313c9
   2fa7c:	0002f009 	.word	0x0002f009
   2fa80:	0002f771 	.word	0x0002f771
   2fa84:	00031519 	.word	0x00031519

0002fa88 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2fa88:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fa8a:	46ce      	mov	lr, r9
   2fa8c:	4647      	mov	r7, r8
   2fa8e:	b580      	push	{r7, lr}
   2fa90:	b097      	sub	sp, #92	; 0x5c
   2fa92:	af08      	add	r7, sp, #32
   2fa94:	60f8      	str	r0, [r7, #12]
   2fa96:	60b9      	str	r1, [r7, #8]
   2fa98:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2fa9a:	2301      	movs	r3, #1
   2fa9c:	425b      	negs	r3, r3
   2fa9e:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2faa0:	2318      	movs	r3, #24
   2faa2:	18fb      	adds	r3, r7, r3
   2faa4:	2200      	movs	r2, #0
   2faa6:	601a      	str	r2, [r3, #0]
   2faa8:	2318      	movs	r3, #24
   2faaa:	18fb      	adds	r3, r7, r3
   2faac:	2200      	movs	r2, #0
   2faae:	605a      	str	r2, [r3, #4]
   2fab0:	2318      	movs	r3, #24
   2fab2:	18fb      	adds	r3, r7, r3
   2fab4:	2200      	movs	r2, #0
   2fab6:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2fab8:	2318      	movs	r3, #24
   2faba:	18fb      	adds	r3, r7, r3
   2fabc:	68ba      	ldr	r2, [r7, #8]
   2fabe:	601a      	str	r2, [r3, #0]
    int len = 0;
   2fac0:	2300      	movs	r3, #0
   2fac2:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fac4:	68fb      	ldr	r3, [r7, #12]
   2fac6:	6a1b      	ldr	r3, [r3, #32]
   2fac8:	2b00      	cmp	r3, #0
   2faca:	d100      	bne.n	2face <MQTTPublish+0x46>
   2facc:	e0a0      	b.n	2fc10 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2face:	2324      	movs	r3, #36	; 0x24
   2fad0:	18fb      	adds	r3, r7, r3
   2fad2:	0018      	movs	r0, r3
   2fad4:	4b55      	ldr	r3, [pc, #340]	; (2fc2c <MQTTPublish+0x1a4>)
   2fad6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fad8:	68fb      	ldr	r3, [r7, #12]
   2fada:	685a      	ldr	r2, [r3, #4]
   2fadc:	2324      	movs	r3, #36	; 0x24
   2fade:	18fb      	adds	r3, r7, r3
   2fae0:	0011      	movs	r1, r2
   2fae2:	0018      	movs	r0, r3
   2fae4:	4b52      	ldr	r3, [pc, #328]	; (2fc30 <MQTTPublish+0x1a8>)
   2fae6:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2fae8:	687b      	ldr	r3, [r7, #4]
   2faea:	781b      	ldrb	r3, [r3, #0]
   2faec:	2b01      	cmp	r3, #1
   2faee:	d003      	beq.n	2faf8 <MQTTPublish+0x70>
   2faf0:	687b      	ldr	r3, [r7, #4]
   2faf2:	781b      	ldrb	r3, [r3, #0]
   2faf4:	2b02      	cmp	r3, #2
   2faf6:	d107      	bne.n	2fb08 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2faf8:	68fb      	ldr	r3, [r7, #12]
   2fafa:	0018      	movs	r0, r3
   2fafc:	4b4d      	ldr	r3, [pc, #308]	; (2fc34 <MQTTPublish+0x1ac>)
   2fafe:	4798      	blx	r3
   2fb00:	0003      	movs	r3, r0
   2fb02:	b29a      	uxth	r2, r3
   2fb04:	687b      	ldr	r3, [r7, #4]
   2fb06:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fb08:	68fb      	ldr	r3, [r7, #12]
   2fb0a:	691b      	ldr	r3, [r3, #16]
   2fb0c:	469c      	mov	ip, r3
   2fb0e:	68fb      	ldr	r3, [r7, #12]
   2fb10:	689b      	ldr	r3, [r3, #8]
   2fb12:	001d      	movs	r5, r3
   2fb14:	687b      	ldr	r3, [r7, #4]
   2fb16:	781b      	ldrb	r3, [r3, #0]
   2fb18:	001e      	movs	r6, r3
   2fb1a:	687b      	ldr	r3, [r7, #4]
   2fb1c:	785b      	ldrb	r3, [r3, #1]
   2fb1e:	4698      	mov	r8, r3
   2fb20:	687b      	ldr	r3, [r7, #4]
   2fb22:	889b      	ldrh	r3, [r3, #4]
   2fb24:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2fb26:	687b      	ldr	r3, [r7, #4]
   2fb28:	689a      	ldr	r2, [r3, #8]
   2fb2a:	687b      	ldr	r3, [r7, #4]
   2fb2c:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fb2e:	9306      	str	r3, [sp, #24]
   2fb30:	9205      	str	r2, [sp, #20]
   2fb32:	2318      	movs	r3, #24
   2fb34:	18fa      	adds	r2, r7, r3
   2fb36:	2308      	movs	r3, #8
   2fb38:	446b      	add	r3, sp
   2fb3a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2fb3c:	c313      	stmia	r3!, {r0, r1, r4}
   2fb3e:	464b      	mov	r3, r9
   2fb40:	9301      	str	r3, [sp, #4]
   2fb42:	4643      	mov	r3, r8
   2fb44:	9300      	str	r3, [sp, #0]
   2fb46:	0033      	movs	r3, r6
   2fb48:	2200      	movs	r2, #0
   2fb4a:	0029      	movs	r1, r5
   2fb4c:	4660      	mov	r0, ip
   2fb4e:	4c3a      	ldr	r4, [pc, #232]	; (2fc38 <MQTTPublish+0x1b0>)
   2fb50:	47a0      	blx	r4
   2fb52:	0003      	movs	r3, r0
   2fb54:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2fb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fb58:	2b00      	cmp	r3, #0
   2fb5a:	dd5b      	ble.n	2fc14 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fb5c:	2324      	movs	r3, #36	; 0x24
   2fb5e:	18fa      	adds	r2, r7, r3
   2fb60:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2fb62:	68fb      	ldr	r3, [r7, #12]
   2fb64:	0018      	movs	r0, r3
   2fb66:	4b35      	ldr	r3, [pc, #212]	; (2fc3c <MQTTPublish+0x1b4>)
   2fb68:	4798      	blx	r3
   2fb6a:	0003      	movs	r3, r0
   2fb6c:	637b      	str	r3, [r7, #52]	; 0x34
   2fb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fb70:	2b00      	cmp	r3, #0
   2fb72:	d151      	bne.n	2fc18 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2fb74:	687b      	ldr	r3, [r7, #4]
   2fb76:	781b      	ldrb	r3, [r3, #0]
   2fb78:	2b01      	cmp	r3, #1
   2fb7a:	d122      	bne.n	2fbc2 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2fb7c:	2324      	movs	r3, #36	; 0x24
   2fb7e:	18fa      	adds	r2, r7, r3
   2fb80:	68fb      	ldr	r3, [r7, #12]
   2fb82:	2104      	movs	r1, #4
   2fb84:	0018      	movs	r0, r3
   2fb86:	4b2e      	ldr	r3, [pc, #184]	; (2fc40 <MQTTPublish+0x1b8>)
   2fb88:	4798      	blx	r3
   2fb8a:	0003      	movs	r3, r0
   2fb8c:	2b04      	cmp	r3, #4
   2fb8e:	d114      	bne.n	2fbba <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fb90:	68fb      	ldr	r3, [r7, #12]
   2fb92:	695c      	ldr	r4, [r3, #20]
   2fb94:	68fb      	ldr	r3, [r7, #12]
   2fb96:	68db      	ldr	r3, [r3, #12]
   2fb98:	2216      	movs	r2, #22
   2fb9a:	18ba      	adds	r2, r7, r2
   2fb9c:	2115      	movs	r1, #21
   2fb9e:	1879      	adds	r1, r7, r1
   2fba0:	2014      	movs	r0, #20
   2fba2:	1838      	adds	r0, r7, r0
   2fba4:	9300      	str	r3, [sp, #0]
   2fba6:	0023      	movs	r3, r4
   2fba8:	4c26      	ldr	r4, [pc, #152]	; (2fc44 <MQTTPublish+0x1bc>)
   2fbaa:	47a0      	blx	r4
   2fbac:	0003      	movs	r3, r0
   2fbae:	2b01      	cmp	r3, #1
   2fbb0:	d033      	beq.n	2fc1a <MQTTPublish+0x192>
                rc = FAILURE;
   2fbb2:	2301      	movs	r3, #1
   2fbb4:	425b      	negs	r3, r3
   2fbb6:	637b      	str	r3, [r7, #52]	; 0x34
   2fbb8:	e02f      	b.n	2fc1a <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fbba:	2301      	movs	r3, #1
   2fbbc:	425b      	negs	r3, r3
   2fbbe:	637b      	str	r3, [r7, #52]	; 0x34
   2fbc0:	e02b      	b.n	2fc1a <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2fbc2:	687b      	ldr	r3, [r7, #4]
   2fbc4:	781b      	ldrb	r3, [r3, #0]
   2fbc6:	2b02      	cmp	r3, #2
   2fbc8:	d127      	bne.n	2fc1a <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2fbca:	2324      	movs	r3, #36	; 0x24
   2fbcc:	18fa      	adds	r2, r7, r3
   2fbce:	68fb      	ldr	r3, [r7, #12]
   2fbd0:	2107      	movs	r1, #7
   2fbd2:	0018      	movs	r0, r3
   2fbd4:	4b1a      	ldr	r3, [pc, #104]	; (2fc40 <MQTTPublish+0x1b8>)
   2fbd6:	4798      	blx	r3
   2fbd8:	0003      	movs	r3, r0
   2fbda:	2b07      	cmp	r3, #7
   2fbdc:	d114      	bne.n	2fc08 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fbde:	68fb      	ldr	r3, [r7, #12]
   2fbe0:	695c      	ldr	r4, [r3, #20]
   2fbe2:	68fb      	ldr	r3, [r7, #12]
   2fbe4:	68db      	ldr	r3, [r3, #12]
   2fbe6:	2212      	movs	r2, #18
   2fbe8:	18ba      	adds	r2, r7, r2
   2fbea:	2111      	movs	r1, #17
   2fbec:	1879      	adds	r1, r7, r1
   2fbee:	2010      	movs	r0, #16
   2fbf0:	1838      	adds	r0, r7, r0
   2fbf2:	9300      	str	r3, [sp, #0]
   2fbf4:	0023      	movs	r3, r4
   2fbf6:	4c13      	ldr	r4, [pc, #76]	; (2fc44 <MQTTPublish+0x1bc>)
   2fbf8:	47a0      	blx	r4
   2fbfa:	0003      	movs	r3, r0
   2fbfc:	2b01      	cmp	r3, #1
   2fbfe:	d00c      	beq.n	2fc1a <MQTTPublish+0x192>
                rc = FAILURE;
   2fc00:	2301      	movs	r3, #1
   2fc02:	425b      	negs	r3, r3
   2fc04:	637b      	str	r3, [r7, #52]	; 0x34
   2fc06:	e008      	b.n	2fc1a <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fc08:	2301      	movs	r3, #1
   2fc0a:	425b      	negs	r3, r3
   2fc0c:	637b      	str	r3, [r7, #52]	; 0x34
   2fc0e:	e004      	b.n	2fc1a <MQTTPublish+0x192>
		goto exit;
   2fc10:	46c0      	nop			; (mov r8, r8)
   2fc12:	e002      	b.n	2fc1a <MQTTPublish+0x192>
        goto exit;
   2fc14:	46c0      	nop			; (mov r8, r8)
   2fc16:	e000      	b.n	2fc1a <MQTTPublish+0x192>
        goto exit; // there was a problem
   2fc18:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2fc1c:	0018      	movs	r0, r3
   2fc1e:	46bd      	mov	sp, r7
   2fc20:	b00f      	add	sp, #60	; 0x3c
   2fc22:	bc0c      	pop	{r2, r3}
   2fc24:	4690      	mov	r8, r2
   2fc26:	4699      	mov	r9, r3
   2fc28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fc2a:	46c0      	nop			; (mov r8, r8)
   2fc2c:	0002fe91 	.word	0x0002fe91
   2fc30:	0002fe19 	.word	0x0002fe19
   2fc34:	0002efd9 	.word	0x0002efd9
   2fc38:	00031115 	.word	0x00031115
   2fc3c:	0002f009 	.word	0x0002f009
   2fc40:	0002f771 	.word	0x0002f771
   2fc44:	00030b8d 	.word	0x00030b8d

0002fc48 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2fc48:	b580      	push	{r7, lr}
   2fc4a:	b088      	sub	sp, #32
   2fc4c:	af00      	add	r7, sp, #0
   2fc4e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2fc50:	2301      	movs	r3, #1
   2fc52:	425b      	negs	r3, r3
   2fc54:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2fc56:	2300      	movs	r3, #0
   2fc58:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2fc5a:	230c      	movs	r3, #12
   2fc5c:	18fb      	adds	r3, r7, r3
   2fc5e:	0018      	movs	r0, r3
   2fc60:	4b13      	ldr	r3, [pc, #76]	; (2fcb0 <MQTTDisconnect+0x68>)
   2fc62:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fc64:	687b      	ldr	r3, [r7, #4]
   2fc66:	685a      	ldr	r2, [r3, #4]
   2fc68:	230c      	movs	r3, #12
   2fc6a:	18fb      	adds	r3, r7, r3
   2fc6c:	0011      	movs	r1, r2
   2fc6e:	0018      	movs	r0, r3
   2fc70:	4b10      	ldr	r3, [pc, #64]	; (2fcb4 <MQTTDisconnect+0x6c>)
   2fc72:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2fc74:	687b      	ldr	r3, [r7, #4]
   2fc76:	691a      	ldr	r2, [r3, #16]
   2fc78:	687b      	ldr	r3, [r7, #4]
   2fc7a:	689b      	ldr	r3, [r3, #8]
   2fc7c:	0019      	movs	r1, r3
   2fc7e:	0010      	movs	r0, r2
   2fc80:	4b0d      	ldr	r3, [pc, #52]	; (2fcb8 <MQTTDisconnect+0x70>)
   2fc82:	4798      	blx	r3
   2fc84:	0003      	movs	r3, r0
   2fc86:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2fc88:	69bb      	ldr	r3, [r7, #24]
   2fc8a:	2b00      	cmp	r3, #0
   2fc8c:	dd08      	ble.n	2fca0 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2fc8e:	230c      	movs	r3, #12
   2fc90:	18fa      	adds	r2, r7, r3
   2fc92:	69b9      	ldr	r1, [r7, #24]
   2fc94:	687b      	ldr	r3, [r7, #4]
   2fc96:	0018      	movs	r0, r3
   2fc98:	4b08      	ldr	r3, [pc, #32]	; (2fcbc <MQTTDisconnect+0x74>)
   2fc9a:	4798      	blx	r3
   2fc9c:	0003      	movs	r3, r0
   2fc9e:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2fca0:	687b      	ldr	r3, [r7, #4]
   2fca2:	2200      	movs	r2, #0
   2fca4:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fca6:	69fb      	ldr	r3, [r7, #28]
}
   2fca8:	0018      	movs	r0, r3
   2fcaa:	46bd      	mov	sp, r7
   2fcac:	b008      	add	sp, #32
   2fcae:	bd80      	pop	{r7, pc}
   2fcb0:	0002fe91 	.word	0x0002fe91
   2fcb4:	0002fe19 	.word	0x0002fe19
   2fcb8:	00030a41 	.word	0x00030a41
   2fcbc:	0002f009 	.word	0x0002f009

0002fcc0 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2fcc0:	b580      	push	{r7, lr}
   2fcc2:	b084      	sub	sp, #16
   2fcc4:	af00      	add	r7, sp, #0
   2fcc6:	0002      	movs	r2, r0
   2fcc8:	1dfb      	adds	r3, r7, #7
   2fcca:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fccc:	2300      	movs	r3, #0
   2fcce:	60fb      	str	r3, [r7, #12]
   2fcd0:	e01c      	b.n	2fd0c <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2fcd2:	4a12      	ldr	r2, [pc, #72]	; (2fd1c <isMQTTSocket+0x5c>)
   2fcd4:	68fb      	ldr	r3, [r7, #12]
   2fcd6:	2164      	movs	r1, #100	; 0x64
   2fcd8:	434b      	muls	r3, r1
   2fcda:	18d3      	adds	r3, r2, r3
   2fcdc:	3360      	adds	r3, #96	; 0x60
   2fcde:	681b      	ldr	r3, [r3, #0]
   2fce0:	2b00      	cmp	r3, #0
   2fce2:	d010      	beq.n	2fd06 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2fce4:	4a0d      	ldr	r2, [pc, #52]	; (2fd1c <isMQTTSocket+0x5c>)
   2fce6:	68fb      	ldr	r3, [r7, #12]
   2fce8:	2164      	movs	r1, #100	; 0x64
   2fcea:	434b      	muls	r3, r1
   2fcec:	18d3      	adds	r3, r2, r3
   2fcee:	3360      	adds	r3, #96	; 0x60
   2fcf0:	681b      	ldr	r3, [r3, #0]
   2fcf2:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2fcf4:	68bb      	ldr	r3, [r7, #8]
   2fcf6:	6a1a      	ldr	r2, [r3, #32]
   2fcf8:	1dfb      	adds	r3, r7, #7
   2fcfa:	781b      	ldrb	r3, [r3, #0]
   2fcfc:	b25b      	sxtb	r3, r3
   2fcfe:	429a      	cmp	r2, r3
   2fd00:	d101      	bne.n	2fd06 <isMQTTSocket+0x46>
				return true;
   2fd02:	2301      	movs	r3, #1
   2fd04:	e006      	b.n	2fd14 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fd06:	68fb      	ldr	r3, [r7, #12]
   2fd08:	3301      	adds	r3, #1
   2fd0a:	60fb      	str	r3, [r7, #12]
   2fd0c:	68fb      	ldr	r3, [r7, #12]
   2fd0e:	2b06      	cmp	r3, #6
   2fd10:	d9df      	bls.n	2fcd2 <isMQTTSocket+0x12>
		}
	}
	return false;
   2fd12:	2300      	movs	r3, #0
}
   2fd14:	0018      	movs	r0, r3
   2fd16:	46bd      	mov	sp, r7
   2fd18:	b004      	add	sp, #16
   2fd1a:	bd80      	pop	{r7, pc}
   2fd1c:	2000406c 	.word	0x2000406c

0002fd20 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2fd20:	b580      	push	{r7, lr}
   2fd22:	b082      	sub	sp, #8
   2fd24:	af00      	add	r7, sp, #0
   2fd26:	6078      	str	r0, [r7, #4]
   2fd28:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2fd2a:	4b0d      	ldr	r3, [pc, #52]	; (2fd60 <dnsResolveCallback+0x40>)
   2fd2c:	781b      	ldrb	r3, [r3, #0]
   2fd2e:	2201      	movs	r2, #1
   2fd30:	4053      	eors	r3, r2
   2fd32:	b2db      	uxtb	r3, r3
   2fd34:	2b00      	cmp	r3, #0
   2fd36:	d00e      	beq.n	2fd56 <dnsResolveCallback+0x36>
   2fd38:	4b0a      	ldr	r3, [pc, #40]	; (2fd64 <dnsResolveCallback+0x44>)
   2fd3a:	681b      	ldr	r3, [r3, #0]
   2fd3c:	687a      	ldr	r2, [r7, #4]
   2fd3e:	0011      	movs	r1, r2
   2fd40:	0018      	movs	r0, r3
   2fd42:	4b09      	ldr	r3, [pc, #36]	; (2fd68 <dnsResolveCallback+0x48>)
   2fd44:	4798      	blx	r3
   2fd46:	1e03      	subs	r3, r0, #0
   2fd48:	d105      	bne.n	2fd56 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2fd4a:	683a      	ldr	r2, [r7, #0]
   2fd4c:	4b07      	ldr	r3, [pc, #28]	; (2fd6c <dnsResolveCallback+0x4c>)
   2fd4e:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2fd50:	4b03      	ldr	r3, [pc, #12]	; (2fd60 <dnsResolveCallback+0x40>)
   2fd52:	2201      	movs	r2, #1
   2fd54:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2fd56:	46c0      	nop			; (mov r8, r8)
   2fd58:	46bd      	mov	sp, r7
   2fd5a:	b002      	add	sp, #8
   2fd5c:	bd80      	pop	{r7, pc}
   2fd5e:	46c0      	nop			; (mov r8, r8)
   2fd60:	20003f5c 	.word	0x20003f5c
   2fd64:	20004068 	.word	0x20004068
   2fd68:	0003589b 	.word	0x0003589b
   2fd6c:	20003f54 	.word	0x20003f54

0002fd70 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2fd70:	b580      	push	{r7, lr}
   2fd72:	b084      	sub	sp, #16
   2fd74:	af00      	add	r7, sp, #0
   2fd76:	603a      	str	r2, [r7, #0]
   2fd78:	1dfb      	adds	r3, r7, #7
   2fd7a:	1c02      	adds	r2, r0, #0
   2fd7c:	701a      	strb	r2, [r3, #0]
   2fd7e:	1dbb      	adds	r3, r7, #6
   2fd80:	1c0a      	adds	r2, r1, #0
   2fd82:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2fd84:	1dfb      	adds	r3, r7, #7
   2fd86:	781b      	ldrb	r3, [r3, #0]
   2fd88:	b25b      	sxtb	r3, r3
   2fd8a:	0018      	movs	r0, r3
   2fd8c:	4b12      	ldr	r3, [pc, #72]	; (2fdd8 <tcpClientSocketEventHandler+0x68>)
   2fd8e:	4798      	blx	r3
   2fd90:	1e03      	subs	r3, r0, #0
   2fd92:	d01c      	beq.n	2fdce <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2fd94:	1dbb      	adds	r3, r7, #6
   2fd96:	781b      	ldrb	r3, [r3, #0]
   2fd98:	2b06      	cmp	r3, #6
   2fd9a:	d00c      	beq.n	2fdb6 <tcpClientSocketEventHandler+0x46>
   2fd9c:	2b07      	cmp	r3, #7
   2fd9e:	d006      	beq.n	2fdae <tcpClientSocketEventHandler+0x3e>
   2fda0:	2b05      	cmp	r3, #5
   2fda2:	d000      	beq.n	2fda6 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2fda4:	e013      	b.n	2fdce <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2fda6:	4b0d      	ldr	r3, [pc, #52]	; (2fddc <tcpClientSocketEventHandler+0x6c>)
   2fda8:	2201      	movs	r2, #1
   2fdaa:	701a      	strb	r2, [r3, #0]
			break;
   2fdac:	e00f      	b.n	2fdce <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2fdae:	4b0c      	ldr	r3, [pc, #48]	; (2fde0 <tcpClientSocketEventHandler+0x70>)
   2fdb0:	2201      	movs	r2, #1
   2fdb2:	701a      	strb	r2, [r3, #0]
			break;
   2fdb4:	e00b      	b.n	2fdce <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2fdb6:	683b      	ldr	r3, [r7, #0]
   2fdb8:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2fdba:	68fb      	ldr	r3, [r7, #12]
   2fdbc:	2204      	movs	r2, #4
   2fdbe:	5e9b      	ldrsh	r3, [r3, r2]
   2fdc0:	001a      	movs	r2, r3
   2fdc2:	4b08      	ldr	r3, [pc, #32]	; (2fde4 <tcpClientSocketEventHandler+0x74>)
   2fdc4:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2fdc6:	4b08      	ldr	r3, [pc, #32]	; (2fde8 <tcpClientSocketEventHandler+0x78>)
   2fdc8:	2201      	movs	r2, #1
   2fdca:	701a      	strb	r2, [r3, #0]
			break;
   2fdcc:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2fdce:	46c0      	nop			; (mov r8, r8)
   2fdd0:	46bd      	mov	sp, r7
   2fdd2:	b004      	add	sp, #16
   2fdd4:	bd80      	pop	{r7, pc}
   2fdd6:	46c0      	nop			; (mov r8, r8)
   2fdd8:	0002fcc1 	.word	0x0002fcc1
   2fddc:	20003f5d 	.word	0x20003f5d
   2fde0:	20003f5e 	.word	0x20003f5e
   2fde4:	20003f58 	.word	0x20003f58
   2fde8:	20003f5f 	.word	0x20003f5f

0002fdec <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2fdec:	b580      	push	{r7, lr}
   2fdee:	b082      	sub	sp, #8
   2fdf0:	af00      	add	r7, sp, #0
   2fdf2:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2fdf4:	687b      	ldr	r3, [r7, #4]
   2fdf6:	3304      	adds	r3, #4
   2fdf8:	687a      	ldr	r2, [r7, #4]
   2fdfa:	0011      	movs	r1, r2
   2fdfc:	0018      	movs	r0, r3
   2fdfe:	4b05      	ldr	r3, [pc, #20]	; (2fe14 <TimerIsExpired+0x28>)
   2fe00:	4798      	blx	r3
   2fe02:	0003      	movs	r3, r0
   2fe04:	3b01      	subs	r3, #1
   2fe06:	425a      	negs	r2, r3
   2fe08:	4153      	adcs	r3, r2
   2fe0a:	b2db      	uxtb	r3, r3
}
   2fe0c:	0018      	movs	r0, r3
   2fe0e:	46bd      	mov	sp, r7
   2fe10:	b002      	add	sp, #8
   2fe12:	bd80      	pop	{r7, pc}
   2fe14:	0001d685 	.word	0x0001d685

0002fe18 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2fe18:	b580      	push	{r7, lr}
   2fe1a:	b082      	sub	sp, #8
   2fe1c:	af00      	add	r7, sp, #0
   2fe1e:	6078      	str	r0, [r7, #4]
   2fe20:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2fe22:	687b      	ldr	r3, [r7, #4]
   2fe24:	683a      	ldr	r2, [r7, #0]
   2fe26:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2fe28:	687b      	ldr	r3, [r7, #4]
   2fe2a:	3304      	adds	r3, #4
   2fe2c:	0018      	movs	r0, r3
   2fe2e:	4b03      	ldr	r3, [pc, #12]	; (2fe3c <TimerCountdownMS+0x24>)
   2fe30:	4798      	blx	r3
}
   2fe32:	46c0      	nop			; (mov r8, r8)
   2fe34:	46bd      	mov	sp, r7
   2fe36:	b002      	add	sp, #8
   2fe38:	bd80      	pop	{r7, pc}
   2fe3a:	46c0      	nop			; (mov r8, r8)
   2fe3c:	0001d619 	.word	0x0001d619

0002fe40 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2fe40:	b580      	push	{r7, lr}
   2fe42:	b082      	sub	sp, #8
   2fe44:	af00      	add	r7, sp, #0
   2fe46:	6078      	str	r0, [r7, #4]
   2fe48:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2fe4a:	683b      	ldr	r3, [r7, #0]
   2fe4c:	22fa      	movs	r2, #250	; 0xfa
   2fe4e:	0092      	lsls	r2, r2, #2
   2fe50:	435a      	muls	r2, r3
   2fe52:	687b      	ldr	r3, [r7, #4]
   2fe54:	0011      	movs	r1, r2
   2fe56:	0018      	movs	r0, r3
   2fe58:	4b02      	ldr	r3, [pc, #8]	; (2fe64 <TimerCountdown+0x24>)
   2fe5a:	4798      	blx	r3
}
   2fe5c:	46c0      	nop			; (mov r8, r8)
   2fe5e:	46bd      	mov	sp, r7
   2fe60:	b002      	add	sp, #8
   2fe62:	bd80      	pop	{r7, pc}
   2fe64:	0002fe19 	.word	0x0002fe19

0002fe68 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2fe68:	b580      	push	{r7, lr}
   2fe6a:	b082      	sub	sp, #8
   2fe6c:	af00      	add	r7, sp, #0
   2fe6e:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2fe70:	687b      	ldr	r3, [r7, #4]
   2fe72:	3304      	adds	r3, #4
   2fe74:	687a      	ldr	r2, [r7, #4]
   2fe76:	0011      	movs	r1, r2
   2fe78:	0018      	movs	r0, r3
   2fe7a:	4b04      	ldr	r3, [pc, #16]	; (2fe8c <TimerLeftMS+0x24>)
   2fe7c:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2fe7e:	687b      	ldr	r3, [r7, #4]
   2fe80:	681b      	ldr	r3, [r3, #0]
}
   2fe82:	0018      	movs	r0, r3
   2fe84:	46bd      	mov	sp, r7
   2fe86:	b002      	add	sp, #8
   2fe88:	bd80      	pop	{r7, pc}
   2fe8a:	46c0      	nop			; (mov r8, r8)
   2fe8c:	0001d685 	.word	0x0001d685

0002fe90 <TimerInit>:


void TimerInit(Timer* timer) {
   2fe90:	b580      	push	{r7, lr}
   2fe92:	b082      	sub	sp, #8
   2fe94:	af00      	add	r7, sp, #0
   2fe96:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2fe98:	687b      	ldr	r3, [r7, #4]
   2fe9a:	2200      	movs	r2, #0
   2fe9c:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2fe9e:	687b      	ldr	r3, [r7, #4]
   2fea0:	3304      	adds	r3, #4
   2fea2:	2208      	movs	r2, #8
   2fea4:	2100      	movs	r1, #0
   2fea6:	0018      	movs	r0, r3
   2fea8:	4b02      	ldr	r3, [pc, #8]	; (2feb4 <TimerInit+0x24>)
   2feaa:	4798      	blx	r3
}
   2feac:	46c0      	nop			; (mov r8, r8)
   2feae:	46bd      	mov	sp, r7
   2feb0:	b002      	add	sp, #8
   2feb2:	bd80      	pop	{r7, pc}
   2feb4:	00035543 	.word	0x00035543

0002feb8 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2feb8:	b590      	push	{r4, r7, lr}
   2feba:	b085      	sub	sp, #20
   2febc:	af00      	add	r7, sp, #0
   2febe:	60f8      	str	r0, [r7, #12]
   2fec0:	60b9      	str	r1, [r7, #8]
   2fec2:	607a      	str	r2, [r7, #4]
   2fec4:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2fec6:	683b      	ldr	r3, [r7, #0]
   2fec8:	2b00      	cmp	r3, #0
   2feca:	d101      	bne.n	2fed0 <WINC1500_read+0x18>
   2fecc:	230a      	movs	r3, #10
   2fece:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2fed0:	4b2c      	ldr	r3, [pc, #176]	; (2ff84 <WINC1500_read+0xcc>)
   2fed2:	681b      	ldr	r3, [r3, #0]
   2fed4:	2b00      	cmp	r3, #0
   2fed6:	d131      	bne.n	2ff3c <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2fed8:	4b2b      	ldr	r3, [pc, #172]	; (2ff88 <WINC1500_read+0xd0>)
   2feda:	2200      	movs	r2, #0
   2fedc:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2fede:	68fb      	ldr	r3, [r7, #12]
   2fee0:	681b      	ldr	r3, [r3, #0]
   2fee2:	b258      	sxtb	r0, r3
   2fee4:	683c      	ldr	r4, [r7, #0]
   2fee6:	2380      	movs	r3, #128	; 0x80
   2fee8:	005a      	lsls	r2, r3, #1
   2feea:	4928      	ldr	r1, [pc, #160]	; (2ff8c <WINC1500_read+0xd4>)
   2feec:	0023      	movs	r3, r4
   2feee:	4c28      	ldr	r4, [pc, #160]	; (2ff90 <WINC1500_read+0xd8>)
   2fef0:	47a0      	blx	r4
   2fef2:	1e03      	subs	r3, r0, #0
   2fef4:	d005      	beq.n	2ff02 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2fef6:	2301      	movs	r3, #1
   2fef8:	425b      	negs	r3, r3
   2fefa:	e03e      	b.n	2ff7a <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2fefc:	2000      	movs	r0, #0
   2fefe:	4b25      	ldr	r3, [pc, #148]	; (2ff94 <WINC1500_read+0xdc>)
   2ff00:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2ff02:	4b21      	ldr	r3, [pc, #132]	; (2ff88 <WINC1500_read+0xd0>)
   2ff04:	781b      	ldrb	r3, [r3, #0]
   2ff06:	2201      	movs	r2, #1
   2ff08:	4053      	eors	r3, r2
   2ff0a:	b2db      	uxtb	r3, r3
   2ff0c:	2b00      	cmp	r3, #0
   2ff0e:	d1f5      	bne.n	2fefc <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2ff10:	4b21      	ldr	r3, [pc, #132]	; (2ff98 <WINC1500_read+0xe0>)
   2ff12:	681b      	ldr	r3, [r3, #0]
   2ff14:	2b00      	cmp	r3, #0
   2ff16:	dd08      	ble.n	2ff2a <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2ff18:	4b1f      	ldr	r3, [pc, #124]	; (2ff98 <WINC1500_read+0xe0>)
   2ff1a:	681b      	ldr	r3, [r3, #0]
   2ff1c:	001a      	movs	r2, r3
   2ff1e:	4b19      	ldr	r3, [pc, #100]	; (2ff84 <WINC1500_read+0xcc>)
   2ff20:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2ff22:	4b1e      	ldr	r3, [pc, #120]	; (2ff9c <WINC1500_read+0xe4>)
   2ff24:	2200      	movs	r2, #0
   2ff26:	601a      	str	r2, [r3, #0]
   2ff28:	e008      	b.n	2ff3c <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2ff2a:	4b16      	ldr	r3, [pc, #88]	; (2ff84 <WINC1500_read+0xcc>)
   2ff2c:	2200      	movs	r2, #0
   2ff2e:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2ff30:	4b1a      	ldr	r3, [pc, #104]	; (2ff9c <WINC1500_read+0xe4>)
   2ff32:	2200      	movs	r2, #0
   2ff34:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2ff36:	4b18      	ldr	r3, [pc, #96]	; (2ff98 <WINC1500_read+0xe0>)
   2ff38:	681b      	ldr	r3, [r3, #0]
   2ff3a:	e01e      	b.n	2ff7a <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2ff3c:	4b11      	ldr	r3, [pc, #68]	; (2ff84 <WINC1500_read+0xcc>)
   2ff3e:	681b      	ldr	r3, [r3, #0]
   2ff40:	001a      	movs	r2, r3
   2ff42:	687b      	ldr	r3, [r7, #4]
   2ff44:	4293      	cmp	r3, r2
   2ff46:	dd02      	ble.n	2ff4e <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2ff48:	2301      	movs	r3, #1
   2ff4a:	425b      	negs	r3, r3
   2ff4c:	e015      	b.n	2ff7a <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2ff4e:	4b13      	ldr	r3, [pc, #76]	; (2ff9c <WINC1500_read+0xe4>)
   2ff50:	681a      	ldr	r2, [r3, #0]
   2ff52:	4b0e      	ldr	r3, [pc, #56]	; (2ff8c <WINC1500_read+0xd4>)
   2ff54:	18d1      	adds	r1, r2, r3
   2ff56:	687a      	ldr	r2, [r7, #4]
   2ff58:	68bb      	ldr	r3, [r7, #8]
   2ff5a:	0018      	movs	r0, r3
   2ff5c:	4b10      	ldr	r3, [pc, #64]	; (2ffa0 <WINC1500_read+0xe8>)
   2ff5e:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2ff60:	4b08      	ldr	r3, [pc, #32]	; (2ff84 <WINC1500_read+0xcc>)
   2ff62:	681a      	ldr	r2, [r3, #0]
   2ff64:	687b      	ldr	r3, [r7, #4]
   2ff66:	1ad2      	subs	r2, r2, r3
   2ff68:	4b06      	ldr	r3, [pc, #24]	; (2ff84 <WINC1500_read+0xcc>)
   2ff6a:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2ff6c:	4b0b      	ldr	r3, [pc, #44]	; (2ff9c <WINC1500_read+0xe4>)
   2ff6e:	681a      	ldr	r2, [r3, #0]
   2ff70:	687b      	ldr	r3, [r7, #4]
   2ff72:	18d2      	adds	r2, r2, r3
   2ff74:	4b09      	ldr	r3, [pc, #36]	; (2ff9c <WINC1500_read+0xe4>)
   2ff76:	601a      	str	r2, [r3, #0]
  
  return len;
   2ff78:	687b      	ldr	r3, [r7, #4]
}
   2ff7a:	0018      	movs	r0, r3
   2ff7c:	46bd      	mov	sp, r7
   2ff7e:	b005      	add	sp, #20
   2ff80:	bd90      	pop	{r4, r7, pc}
   2ff82:	46c0      	nop			; (mov r8, r8)
   2ff84:	20004064 	.word	0x20004064
   2ff88:	20003f5f 	.word	0x20003f5f
   2ff8c:	20003f60 	.word	0x20003f60
   2ff90:	0002656d 	.word	0x0002656d
   2ff94:	00022ab5 	.word	0x00022ab5
   2ff98:	20003f58 	.word	0x20003f58
   2ff9c:	20004060 	.word	0x20004060
   2ffa0:	0003550d 	.word	0x0003550d

0002ffa4 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2ffa4:	b590      	push	{r4, r7, lr}
   2ffa6:	b085      	sub	sp, #20
   2ffa8:	af00      	add	r7, sp, #0
   2ffaa:	60f8      	str	r0, [r7, #12]
   2ffac:	60b9      	str	r1, [r7, #8]
   2ffae:	607a      	str	r2, [r7, #4]
   2ffb0:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2ffb2:	4b10      	ldr	r3, [pc, #64]	; (2fff4 <WINC1500_write+0x50>)
   2ffb4:	2200      	movs	r2, #0
   2ffb6:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2ffb8:	68fb      	ldr	r3, [r7, #12]
   2ffba:	681b      	ldr	r3, [r3, #0]
   2ffbc:	b258      	sxtb	r0, r3
   2ffbe:	687b      	ldr	r3, [r7, #4]
   2ffc0:	b29a      	uxth	r2, r3
   2ffc2:	68b9      	ldr	r1, [r7, #8]
   2ffc4:	2300      	movs	r3, #0
   2ffc6:	4c0c      	ldr	r4, [pc, #48]	; (2fff8 <WINC1500_write+0x54>)
   2ffc8:	47a0      	blx	r4
   2ffca:	1e03      	subs	r3, r0, #0
   2ffcc:	d005      	beq.n	2ffda <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2ffce:	2301      	movs	r3, #1
   2ffd0:	425b      	negs	r3, r3
   2ffd2:	e00a      	b.n	2ffea <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2ffd4:	2000      	movs	r0, #0
   2ffd6:	4b09      	ldr	r3, [pc, #36]	; (2fffc <WINC1500_write+0x58>)
   2ffd8:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2ffda:	4b06      	ldr	r3, [pc, #24]	; (2fff4 <WINC1500_write+0x50>)
   2ffdc:	781b      	ldrb	r3, [r3, #0]
   2ffde:	2201      	movs	r2, #1
   2ffe0:	4053      	eors	r3, r2
   2ffe2:	b2db      	uxtb	r3, r3
   2ffe4:	2b00      	cmp	r3, #0
   2ffe6:	d1f5      	bne.n	2ffd4 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2ffe8:	687b      	ldr	r3, [r7, #4]
}
   2ffea:	0018      	movs	r0, r3
   2ffec:	46bd      	mov	sp, r7
   2ffee:	b005      	add	sp, #20
   2fff0:	bd90      	pop	{r4, r7, pc}
   2fff2:	46c0      	nop			; (mov r8, r8)
   2fff4:	20003f5e 	.word	0x20003f5e
   2fff8:	00026409 	.word	0x00026409
   2fffc:	00022ab5 	.word	0x00022ab5

00030000 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   30000:	b580      	push	{r7, lr}
   30002:	b082      	sub	sp, #8
   30004:	af00      	add	r7, sp, #0
   30006:	6078      	str	r0, [r7, #4]
	close(n->socket);
   30008:	687b      	ldr	r3, [r7, #4]
   3000a:	681b      	ldr	r3, [r3, #0]
   3000c:	b25b      	sxtb	r3, r3
   3000e:	0018      	movs	r0, r3
   30010:	4b06      	ldr	r3, [pc, #24]	; (3002c <WINC1500_disconnect+0x2c>)
   30012:	4798      	blx	r3
	n->socket=-1;
   30014:	687b      	ldr	r3, [r7, #4]
   30016:	2201      	movs	r2, #1
   30018:	4252      	negs	r2, r2
   3001a:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   3001c:	4b04      	ldr	r3, [pc, #16]	; (30030 <WINC1500_disconnect+0x30>)
   3001e:	2200      	movs	r2, #0
   30020:	701a      	strb	r2, [r3, #0]
}
   30022:	46c0      	nop			; (mov r8, r8)
   30024:	46bd      	mov	sp, r7
   30026:	b002      	add	sp, #8
   30028:	bd80      	pop	{r7, pc}
   3002a:	46c0      	nop			; (mov r8, r8)
   3002c:	000266ed 	.word	0x000266ed
   30030:	20003f5d 	.word	0x20003f5d

00030034 <NetworkInit>:


void NetworkInit(Network* n) {
   30034:	b580      	push	{r7, lr}
   30036:	b082      	sub	sp, #8
   30038:	af00      	add	r7, sp, #0
   3003a:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   3003c:	687b      	ldr	r3, [r7, #4]
   3003e:	2201      	movs	r2, #1
   30040:	4252      	negs	r2, r2
   30042:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   30044:	687b      	ldr	r3, [r7, #4]
   30046:	4a06      	ldr	r2, [pc, #24]	; (30060 <NetworkInit+0x2c>)
   30048:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   3004a:	687b      	ldr	r3, [r7, #4]
   3004c:	4a05      	ldr	r2, [pc, #20]	; (30064 <NetworkInit+0x30>)
   3004e:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   30050:	687b      	ldr	r3, [r7, #4]
   30052:	4a05      	ldr	r2, [pc, #20]	; (30068 <NetworkInit+0x34>)
   30054:	611a      	str	r2, [r3, #16]
}
   30056:	46c0      	nop			; (mov r8, r8)
   30058:	46bd      	mov	sp, r7
   3005a:	b002      	add	sp, #8
   3005c:	bd80      	pop	{r7, pc}
   3005e:	46c0      	nop			; (mov r8, r8)
   30060:	0002feb9 	.word	0x0002feb9
   30064:	0002ffa5 	.word	0x0002ffa5
   30068:	00030001 	.word	0x00030001

0003006c <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   3006c:	b580      	push	{r7, lr}
   3006e:	b088      	sub	sp, #32
   30070:	af00      	add	r7, sp, #0
   30072:	60f8      	str	r0, [r7, #12]
   30074:	60b9      	str	r1, [r7, #8]
   30076:	607a      	str	r2, [r7, #4]
   30078:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   3007a:	4b37      	ldr	r3, [pc, #220]	; (30158 <ConnectNetwork+0xec>)
   3007c:	2200      	movs	r2, #0
   3007e:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   30080:	4b36      	ldr	r3, [pc, #216]	; (3015c <ConnectNetwork+0xf0>)
   30082:	68ba      	ldr	r2, [r7, #8]
   30084:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   30086:	68bb      	ldr	r3, [r7, #8]
   30088:	0018      	movs	r0, r3
   3008a:	4b35      	ldr	r3, [pc, #212]	; (30160 <ConnectNetwork+0xf4>)
   3008c:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   3008e:	e002      	b.n	30096 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   30090:	2000      	movs	r0, #0
   30092:	4b34      	ldr	r3, [pc, #208]	; (30164 <ConnectNetwork+0xf8>)
   30094:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   30096:	4b30      	ldr	r3, [pc, #192]	; (30158 <ConnectNetwork+0xec>)
   30098:	781b      	ldrb	r3, [r3, #0]
   3009a:	2201      	movs	r2, #1
   3009c:	4053      	eors	r3, r2
   3009e:	b2db      	uxtb	r3, r3
   300a0:	2b00      	cmp	r3, #0
   300a2:	d1f5      	bne.n	30090 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   300a4:	4b30      	ldr	r3, [pc, #192]	; (30168 <ConnectNetwork+0xfc>)
   300a6:	681a      	ldr	r2, [r3, #0]
   300a8:	68fb      	ldr	r3, [r7, #12]
   300aa:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   300ac:	2310      	movs	r3, #16
   300ae:	18fb      	adds	r3, r7, r3
   300b0:	2202      	movs	r2, #2
   300b2:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   300b4:	687b      	ldr	r3, [r7, #4]
   300b6:	b29b      	uxth	r3, r3
   300b8:	021b      	lsls	r3, r3, #8
   300ba:	b21a      	sxth	r2, r3
   300bc:	687b      	ldr	r3, [r7, #4]
   300be:	b29b      	uxth	r3, r3
   300c0:	0a1b      	lsrs	r3, r3, #8
   300c2:	b29b      	uxth	r3, r3
   300c4:	b21b      	sxth	r3, r3
   300c6:	4313      	orrs	r3, r2
   300c8:	b21b      	sxth	r3, r3
   300ca:	b29a      	uxth	r2, r3
   300cc:	2310      	movs	r3, #16
   300ce:	18fb      	adds	r3, r7, r3
   300d0:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   300d2:	4b25      	ldr	r3, [pc, #148]	; (30168 <ConnectNetwork+0xfc>)
   300d4:	681b      	ldr	r3, [r3, #0]
   300d6:	001a      	movs	r2, r3
   300d8:	2310      	movs	r3, #16
   300da:	18fb      	adds	r3, r7, r3
   300dc:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   300de:	68fb      	ldr	r3, [r7, #12]
   300e0:	681b      	ldr	r3, [r3, #0]
   300e2:	2b00      	cmp	r3, #0
   300e4:	da0a      	bge.n	300fc <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   300e6:	683b      	ldr	r3, [r7, #0]
   300e8:	b2db      	uxtb	r3, r3
   300ea:	001a      	movs	r2, r3
   300ec:	2101      	movs	r1, #1
   300ee:	2002      	movs	r0, #2
   300f0:	4b1e      	ldr	r3, [pc, #120]	; (3016c <ConnectNetwork+0x100>)
   300f2:	4798      	blx	r3
   300f4:	0003      	movs	r3, r0
   300f6:	001a      	movs	r2, r3
   300f8:	68fb      	ldr	r3, [r7, #12]
   300fa:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   300fc:	68fb      	ldr	r3, [r7, #12]
   300fe:	681b      	ldr	r3, [r3, #0]
   30100:	3301      	adds	r3, #1
   30102:	d108      	bne.n	30116 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   30104:	68fb      	ldr	r3, [r7, #12]
   30106:	681b      	ldr	r3, [r3, #0]
   30108:	b25b      	sxtb	r3, r3
   3010a:	0018      	movs	r0, r3
   3010c:	4b18      	ldr	r3, [pc, #96]	; (30170 <ConnectNetwork+0x104>)
   3010e:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   30110:	2309      	movs	r3, #9
   30112:	425b      	negs	r3, r3
   30114:	e01c      	b.n	30150 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   30116:	68fb      	ldr	r3, [r7, #12]
   30118:	681b      	ldr	r3, [r3, #0]
   3011a:	b25b      	sxtb	r3, r3
   3011c:	2210      	movs	r2, #16
   3011e:	18b9      	adds	r1, r7, r2
   30120:	2210      	movs	r2, #16
   30122:	0018      	movs	r0, r3
   30124:	4b13      	ldr	r3, [pc, #76]	; (30174 <ConnectNetwork+0x108>)
   30126:	4798      	blx	r3
   30128:	1e03      	subs	r3, r0, #0
   3012a:	d002      	beq.n	30132 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   3012c:	2309      	movs	r3, #9
   3012e:	425b      	negs	r3, r3
   30130:	e00e      	b.n	30150 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   30132:	4b11      	ldr	r3, [pc, #68]	; (30178 <ConnectNetwork+0x10c>)
   30134:	2200      	movs	r2, #0
   30136:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   30138:	e002      	b.n	30140 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   3013a:	2000      	movs	r0, #0
   3013c:	4b09      	ldr	r3, [pc, #36]	; (30164 <ConnectNetwork+0xf8>)
   3013e:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   30140:	4b0d      	ldr	r3, [pc, #52]	; (30178 <ConnectNetwork+0x10c>)
   30142:	781b      	ldrb	r3, [r3, #0]
   30144:	2201      	movs	r2, #1
   30146:	4053      	eors	r3, r2
   30148:	b2db      	uxtb	r3, r3
   3014a:	2b00      	cmp	r3, #0
   3014c:	d1f5      	bne.n	3013a <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   3014e:	2300      	movs	r3, #0
   30150:	0018      	movs	r0, r3
   30152:	46bd      	mov	sp, r7
   30154:	b008      	add	sp, #32
   30156:	bd80      	pop	{r7, pc}
   30158:	20003f5c 	.word	0x20003f5c
   3015c:	20004068 	.word	0x20004068
   30160:	00026935 	.word	0x00026935
   30164:	00022ab5 	.word	0x00022ab5
   30168:	20003f54 	.word	0x20003f54
   3016c:	000260e1 	.word	0x000260e1
   30170:	000266ed 	.word	0x000266ed
   30174:	000262f5 	.word	0x000262f5
   30178:	20003f5d 	.word	0x20003f5d

0003017c <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   3017c:	b580      	push	{r7, lr}
   3017e:	b084      	sub	sp, #16
   30180:	af00      	add	r7, sp, #0
   30182:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   30184:	687b      	ldr	r3, [r7, #4]
   30186:	2b00      	cmp	r3, #0
   30188:	d022      	beq.n	301d0 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   3018a:	2300      	movs	r3, #0
   3018c:	60fb      	str	r3, [r7, #12]
   3018e:	e01b      	b.n	301c8 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   30190:	4a11      	ldr	r2, [pc, #68]	; (301d8 <allocateClient+0x5c>)
   30192:	68fb      	ldr	r3, [r7, #12]
   30194:	2164      	movs	r1, #100	; 0x64
   30196:	434b      	muls	r3, r1
   30198:	18d3      	adds	r3, r2, r3
   3019a:	3360      	adds	r3, #96	; 0x60
   3019c:	681b      	ldr	r3, [r3, #0]
   3019e:	2b00      	cmp	r3, #0
   301a0:	d10f      	bne.n	301c2 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   301a2:	4a0d      	ldr	r2, [pc, #52]	; (301d8 <allocateClient+0x5c>)
   301a4:	68fb      	ldr	r3, [r7, #12]
   301a6:	2164      	movs	r1, #100	; 0x64
   301a8:	434b      	muls	r3, r1
   301aa:	18d3      	adds	r3, r2, r3
   301ac:	3360      	adds	r3, #96	; 0x60
   301ae:	687a      	ldr	r2, [r7, #4]
   301b0:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   301b2:	68fb      	ldr	r3, [r7, #12]
   301b4:	2264      	movs	r2, #100	; 0x64
   301b6:	435a      	muls	r2, r3
   301b8:	4b07      	ldr	r3, [pc, #28]	; (301d8 <allocateClient+0x5c>)
   301ba:	18d2      	adds	r2, r2, r3
   301bc:	687b      	ldr	r3, [r7, #4]
   301be:	61da      	str	r2, [r3, #28]
			return;
   301c0:	e007      	b.n	301d2 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   301c2:	68fb      	ldr	r3, [r7, #12]
   301c4:	3301      	adds	r3, #1
   301c6:	60fb      	str	r3, [r7, #12]
   301c8:	68fb      	ldr	r3, [r7, #12]
   301ca:	2b06      	cmp	r3, #6
   301cc:	d9e0      	bls.n	30190 <allocateClient+0x14>
   301ce:	e000      	b.n	301d2 <allocateClient+0x56>
		return;
   301d0:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   301d2:	46bd      	mov	sp, r7
   301d4:	b004      	add	sp, #16
   301d6:	bd80      	pop	{r7, pc}
   301d8:	2000406c 	.word	0x2000406c

000301dc <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   301dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   301de:	b089      	sub	sp, #36	; 0x24
   301e0:	af04      	add	r7, sp, #16
   301e2:	6078      	str	r0, [r7, #4]
   301e4:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   301e6:	687b      	ldr	r3, [r7, #4]
   301e8:	2b00      	cmp	r3, #0
   301ea:	d00a      	beq.n	30202 <mqtt_init+0x26>
   301ec:	683b      	ldr	r3, [r7, #0]
   301ee:	2b00      	cmp	r3, #0
   301f0:	d007      	beq.n	30202 <mqtt_init+0x26>
   301f2:	683b      	ldr	r3, [r7, #0]
   301f4:	691b      	ldr	r3, [r3, #16]
   301f6:	2b00      	cmp	r3, #0
   301f8:	d003      	beq.n	30202 <mqtt_init+0x26>
   301fa:	683b      	ldr	r3, [r7, #0]
   301fc:	689b      	ldr	r3, [r3, #8]
   301fe:	2b00      	cmp	r3, #0
   30200:	d102      	bne.n	30208 <mqtt_init+0x2c>
		return FAILURE;
   30202:	2301      	movs	r3, #1
   30204:	425b      	negs	r3, r3
   30206:	e034      	b.n	30272 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   30208:	683b      	ldr	r3, [r7, #0]
   3020a:	889b      	ldrh	r3, [r3, #4]
   3020c:	001a      	movs	r2, r3
   3020e:	23fa      	movs	r3, #250	; 0xfa
   30210:	009b      	lsls	r3, r3, #2
   30212:	4353      	muls	r3, r2
   30214:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   30216:	687b      	ldr	r3, [r7, #4]
   30218:	3320      	adds	r3, #32
   3021a:	0018      	movs	r0, r3
   3021c:	4b17      	ldr	r3, [pc, #92]	; (3027c <mqtt_init+0xa0>)
   3021e:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   30220:	687b      	ldr	r3, [r7, #4]
   30222:	3304      	adds	r3, #4
   30224:	6839      	ldr	r1, [r7, #0]
   30226:	2218      	movs	r2, #24
   30228:	0018      	movs	r0, r3
   3022a:	4b15      	ldr	r3, [pc, #84]	; (30280 <mqtt_init+0xa4>)
   3022c:	4798      	blx	r3
	allocateClient(module);
   3022e:	687b      	ldr	r3, [r7, #4]
   30230:	0018      	movs	r0, r3
   30232:	4b14      	ldr	r3, [pc, #80]	; (30284 <mqtt_init+0xa8>)
   30234:	4798      	blx	r3
	
	if(module->client)
   30236:	687b      	ldr	r3, [r7, #4]
   30238:	69db      	ldr	r3, [r3, #28]
   3023a:	2b00      	cmp	r3, #0
   3023c:	d017      	beq.n	3026e <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   3023e:	687b      	ldr	r3, [r7, #4]
   30240:	69d8      	ldr	r0, [r3, #28]
   30242:	687b      	ldr	r3, [r7, #4]
   30244:	3320      	adds	r3, #32
   30246:	001c      	movs	r4, r3
   30248:	683b      	ldr	r3, [r7, #0]
   3024a:	691e      	ldr	r6, [r3, #16]
   3024c:	683b      	ldr	r3, [r7, #0]
   3024e:	695a      	ldr	r2, [r3, #20]
   30250:	683b      	ldr	r3, [r7, #0]
   30252:	6899      	ldr	r1, [r3, #8]
   30254:	683b      	ldr	r3, [r7, #0]
   30256:	68db      	ldr	r3, [r3, #12]
   30258:	68fd      	ldr	r5, [r7, #12]
   3025a:	9302      	str	r3, [sp, #8]
   3025c:	9101      	str	r1, [sp, #4]
   3025e:	9200      	str	r2, [sp, #0]
   30260:	0033      	movs	r3, r6
   30262:	002a      	movs	r2, r5
   30264:	0021      	movs	r1, r4
   30266:	4c08      	ldr	r4, [pc, #32]	; (30288 <mqtt_init+0xac>)
   30268:	47a0      	blx	r4
		return SUCCESS;
   3026a:	2300      	movs	r3, #0
   3026c:	e001      	b.n	30272 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   3026e:	2301      	movs	r3, #1
   30270:	425b      	negs	r3, r3
}
   30272:	0018      	movs	r0, r3
   30274:	46bd      	mov	sp, r7
   30276:	b005      	add	sp, #20
   30278:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3027a:	46c0      	nop			; (mov r8, r8)
   3027c:	00030035 	.word	0x00030035
   30280:	0003550d 	.word	0x0003550d
   30284:	0003017d 	.word	0x0003017d
   30288:	0002f0ad 	.word	0x0002f0ad

0003028c <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   3028c:	b580      	push	{r7, lr}
   3028e:	b082      	sub	sp, #8
   30290:	af00      	add	r7, sp, #0
   30292:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   30294:	687b      	ldr	r3, [r7, #4]
   30296:	4a0c      	ldr	r2, [pc, #48]	; (302c8 <mqtt_get_config_defaults+0x3c>)
   30298:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   3029a:	687b      	ldr	r3, [r7, #4]
   3029c:	2200      	movs	r2, #0
   3029e:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   302a0:	687b      	ldr	r3, [r7, #4]
   302a2:	223c      	movs	r2, #60	; 0x3c
   302a4:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   302a6:	687b      	ldr	r3, [r7, #4]
   302a8:	2200      	movs	r2, #0
   302aa:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   302ac:	687b      	ldr	r3, [r7, #4]
   302ae:	2200      	movs	r2, #0
   302b0:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   302b2:	687b      	ldr	r3, [r7, #4]
   302b4:	2200      	movs	r2, #0
   302b6:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   302b8:	687b      	ldr	r3, [r7, #4]
   302ba:	2200      	movs	r2, #0
   302bc:	615a      	str	r2, [r3, #20]
}
   302be:	46c0      	nop			; (mov r8, r8)
   302c0:	46bd      	mov	sp, r7
   302c2:	b002      	add	sp, #8
   302c4:	bd80      	pop	{r7, pc}
   302c6:	46c0      	nop			; (mov r8, r8)
   302c8:	0000075b 	.word	0x0000075b

000302cc <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   302cc:	b580      	push	{r7, lr}
   302ce:	b082      	sub	sp, #8
   302d0:	af00      	add	r7, sp, #0
   302d2:	6078      	str	r0, [r7, #4]
   302d4:	6039      	str	r1, [r7, #0]
	if(module)
   302d6:	687b      	ldr	r3, [r7, #4]
   302d8:	2b00      	cmp	r3, #0
   302da:	d004      	beq.n	302e6 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   302dc:	687b      	ldr	r3, [r7, #4]
   302de:	683a      	ldr	r2, [r7, #0]
   302e0:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   302e2:	2300      	movs	r3, #0
   302e4:	e001      	b.n	302ea <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   302e6:	2301      	movs	r3, #1
   302e8:	425b      	negs	r3, r3
}
   302ea:	0018      	movs	r0, r3
   302ec:	46bd      	mov	sp, r7
   302ee:	b002      	add	sp, #8
   302f0:	bd80      	pop	{r7, pc}
	...

000302f4 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   302f4:	b580      	push	{r7, lr}
   302f6:	b082      	sub	sp, #8
   302f8:	af00      	add	r7, sp, #0
   302fa:	603a      	str	r2, [r7, #0]
   302fc:	1dfb      	adds	r3, r7, #7
   302fe:	1c02      	adds	r2, r0, #0
   30300:	701a      	strb	r2, [r3, #0]
   30302:	1dbb      	adds	r3, r7, #6
   30304:	1c0a      	adds	r2, r1, #0
   30306:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   30308:	683a      	ldr	r2, [r7, #0]
   3030a:	1dbb      	adds	r3, r7, #6
   3030c:	7819      	ldrb	r1, [r3, #0]
   3030e:	1dfb      	adds	r3, r7, #7
   30310:	781b      	ldrb	r3, [r3, #0]
   30312:	b25b      	sxtb	r3, r3
   30314:	0018      	movs	r0, r3
   30316:	4b03      	ldr	r3, [pc, #12]	; (30324 <mqtt_socket_event_handler+0x30>)
   30318:	4798      	blx	r3
}
   3031a:	46c0      	nop			; (mov r8, r8)
   3031c:	46bd      	mov	sp, r7
   3031e:	b002      	add	sp, #8
   30320:	bd80      	pop	{r7, pc}
   30322:	46c0      	nop			; (mov r8, r8)
   30324:	0002fd71 	.word	0x0002fd71

00030328 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   30328:	b580      	push	{r7, lr}
   3032a:	b082      	sub	sp, #8
   3032c:	af00      	add	r7, sp, #0
   3032e:	6078      	str	r0, [r7, #4]
   30330:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   30332:	683a      	ldr	r2, [r7, #0]
   30334:	687b      	ldr	r3, [r7, #4]
   30336:	0011      	movs	r1, r2
   30338:	0018      	movs	r0, r3
   3033a:	4b03      	ldr	r3, [pc, #12]	; (30348 <mqtt_socket_resolve_handler+0x20>)
   3033c:	4798      	blx	r3
}
   3033e:	46c0      	nop			; (mov r8, r8)
   30340:	46bd      	mov	sp, r7
   30342:	b002      	add	sp, #8
   30344:	bd80      	pop	{r7, pc}
   30346:	46c0      	nop			; (mov r8, r8)
   30348:	0002fd21 	.word	0x0002fd21

0003034c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   3034c:	b590      	push	{r4, r7, lr}
   3034e:	b085      	sub	sp, #20
   30350:	af00      	add	r7, sp, #0
   30352:	6078      	str	r0, [r7, #4]
   30354:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   30356:	687b      	ldr	r3, [r7, #4]
   30358:	3320      	adds	r3, #32
   3035a:	0018      	movs	r0, r3
   3035c:	687b      	ldr	r3, [r7, #4]
   3035e:	889b      	ldrh	r3, [r3, #4]
   30360:	001a      	movs	r2, r3
   30362:	687b      	ldr	r3, [r7, #4]
   30364:	799b      	ldrb	r3, [r3, #6]
   30366:	6839      	ldr	r1, [r7, #0]
   30368:	4c09      	ldr	r4, [pc, #36]	; (30390 <mqtt_connect+0x44>)
   3036a:	47a0      	blx	r4
   3036c:	0003      	movs	r3, r0
   3036e:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   30370:	687b      	ldr	r3, [r7, #4]
   30372:	681b      	ldr	r3, [r3, #0]
   30374:	2b00      	cmp	r3, #0
   30376:	d006      	beq.n	30386 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   30378:	687b      	ldr	r3, [r7, #4]
   3037a:	681b      	ldr	r3, [r3, #0]
   3037c:	220c      	movs	r2, #12
   3037e:	18ba      	adds	r2, r7, r2
   30380:	6878      	ldr	r0, [r7, #4]
   30382:	2100      	movs	r1, #0
   30384:	4798      	blx	r3
	return connResult.sock_connected.result;
   30386:	68fb      	ldr	r3, [r7, #12]
}
   30388:	0018      	movs	r0, r3
   3038a:	46bd      	mov	sp, r7
   3038c:	b005      	add	sp, #20
   3038e:	bd90      	pop	{r4, r7, pc}
   30390:	0003006d 	.word	0x0003006d

00030394 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   30394:	b580      	push	{r7, lr}
   30396:	b09c      	sub	sp, #112	; 0x70
   30398:	af00      	add	r7, sp, #0
   3039a:	60f8      	str	r0, [r7, #12]
   3039c:	607a      	str	r2, [r7, #4]
   3039e:	603b      	str	r3, [r7, #0]
   303a0:	230b      	movs	r3, #11
   303a2:	18fb      	adds	r3, r7, r3
   303a4:	1c0a      	adds	r2, r1, #0
   303a6:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   303a8:	2310      	movs	r3, #16
   303aa:	18fa      	adds	r2, r7, r3
   303ac:	4b31      	ldr	r3, [pc, #196]	; (30474 <mqtt_connect_broker+0xe0>)
   303ae:	0010      	movs	r0, r2
   303b0:	0019      	movs	r1, r3
   303b2:	2358      	movs	r3, #88	; 0x58
   303b4:	001a      	movs	r2, r3
   303b6:	4b30      	ldr	r3, [pc, #192]	; (30478 <mqtt_connect_broker+0xe4>)
   303b8:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   303ba:	2310      	movs	r3, #16
   303bc:	18fb      	adds	r3, r7, r3
   303be:	2204      	movs	r2, #4
   303c0:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   303c2:	2310      	movs	r3, #16
   303c4:	18fb      	adds	r3, r7, r3
   303c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
   303c8:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   303ca:	2310      	movs	r3, #16
   303cc:	18fb      	adds	r3, r7, r3
   303ce:	687a      	ldr	r2, [r7, #4]
   303d0:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   303d2:	2310      	movs	r3, #16
   303d4:	18fb      	adds	r3, r7, r3
   303d6:	683a      	ldr	r2, [r7, #0]
   303d8:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   303da:	2310      	movs	r3, #16
   303dc:	18fb      	adds	r3, r7, r3
   303de:	220b      	movs	r2, #11
   303e0:	18ba      	adds	r2, r7, r2
   303e2:	7812      	ldrb	r2, [r2, #0]
   303e4:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   303e6:	2310      	movs	r3, #16
   303e8:	18fb      	adds	r3, r7, r3
   303ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   303ec:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   303ee:	2310      	movs	r3, #16
   303f0:	18fb      	adds	r3, r7, r3
   303f2:	2280      	movs	r2, #128	; 0x80
   303f4:	18ba      	adds	r2, r7, r2
   303f6:	6812      	ldr	r2, [r2, #0]
   303f8:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   303fa:	2310      	movs	r3, #16
   303fc:	18fb      	adds	r3, r7, r3
   303fe:	228c      	movs	r2, #140	; 0x8c
   30400:	18ba      	adds	r2, r7, r2
   30402:	213c      	movs	r1, #60	; 0x3c
   30404:	7812      	ldrb	r2, [r2, #0]
   30406:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   30408:	2310      	movs	r3, #16
   3040a:	18fb      	adds	r3, r7, r3
   3040c:	2288      	movs	r2, #136	; 0x88
   3040e:	18ba      	adds	r2, r7, r2
   30410:	213d      	movs	r1, #61	; 0x3d
   30412:	7812      	ldrb	r2, [r2, #0]
   30414:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   30416:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   30418:	2b00      	cmp	r3, #0
   3041a:	d008      	beq.n	3042e <mqtt_connect_broker+0x9a>
   3041c:	2380      	movs	r3, #128	; 0x80
   3041e:	18fb      	adds	r3, r7, r3
   30420:	681b      	ldr	r3, [r3, #0]
   30422:	2b00      	cmp	r3, #0
   30424:	d003      	beq.n	3042e <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   30426:	2310      	movs	r3, #16
   30428:	18fb      	adds	r3, r7, r3
   3042a:	2201      	movs	r2, #1
   3042c:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   3042e:	68fb      	ldr	r3, [r7, #12]
   30430:	69db      	ldr	r3, [r3, #28]
   30432:	2210      	movs	r2, #16
   30434:	18ba      	adds	r2, r7, r2
   30436:	0011      	movs	r1, r2
   30438:	0018      	movs	r0, r3
   3043a:	4b10      	ldr	r3, [pc, #64]	; (3047c <mqtt_connect_broker+0xe8>)
   3043c:	4798      	blx	r3
   3043e:	0003      	movs	r3, r0
   30440:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   30442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   30444:	b2da      	uxtb	r2, r3
   30446:	2368      	movs	r3, #104	; 0x68
   30448:	18fb      	adds	r3, r7, r3
   3044a:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   3044c:	68fb      	ldr	r3, [r7, #12]
   3044e:	681b      	ldr	r3, [r3, #0]
   30450:	2b00      	cmp	r3, #0
   30452:	d006      	beq.n	30462 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   30454:	68fb      	ldr	r3, [r7, #12]
   30456:	681b      	ldr	r3, [r3, #0]
   30458:	2268      	movs	r2, #104	; 0x68
   3045a:	18ba      	adds	r2, r7, r2
   3045c:	68f8      	ldr	r0, [r7, #12]
   3045e:	2101      	movs	r1, #1
   30460:	4798      	blx	r3
	
	module->isConnected = true;
   30462:	68fb      	ldr	r3, [r7, #12]
   30464:	2234      	movs	r2, #52	; 0x34
   30466:	2101      	movs	r1, #1
   30468:	5499      	strb	r1, [r3, r2]
	return rc;
   3046a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   3046c:	0018      	movs	r0, r3
   3046e:	46bd      	mov	sp, r7
   30470:	b01c      	add	sp, #112	; 0x70
   30472:	bd80      	pop	{r7, pc}
   30474:	0003a740 	.word	0x0003a740
   30478:	0003550d 	.word	0x0003550d
   3047c:	0002f7bd 	.word	0x0002f7bd

00030480 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   30480:	b580      	push	{r7, lr}
   30482:	b084      	sub	sp, #16
   30484:	af00      	add	r7, sp, #0
   30486:	6078      	str	r0, [r7, #4]
   30488:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   3048a:	687b      	ldr	r3, [r7, #4]
   3048c:	69db      	ldr	r3, [r3, #28]
   3048e:	0018      	movs	r0, r3
   30490:	4b0c      	ldr	r3, [pc, #48]	; (304c4 <mqtt_disconnect+0x44>)
   30492:	4798      	blx	r3
   30494:	0003      	movs	r3, r0
   30496:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   30498:	68fb      	ldr	r3, [r7, #12]
   3049a:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   3049c:	687b      	ldr	r3, [r7, #4]
   3049e:	681b      	ldr	r3, [r3, #0]
   304a0:	2b00      	cmp	r3, #0
   304a2:	d006      	beq.n	304b2 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   304a4:	687b      	ldr	r3, [r7, #4]
   304a6:	681b      	ldr	r3, [r3, #0]
   304a8:	2208      	movs	r2, #8
   304aa:	18ba      	adds	r2, r7, r2
   304ac:	6878      	ldr	r0, [r7, #4]
   304ae:	2105      	movs	r1, #5
   304b0:	4798      	blx	r3
	
	module->isConnected = false;
   304b2:	687b      	ldr	r3, [r7, #4]
   304b4:	2234      	movs	r2, #52	; 0x34
   304b6:	2100      	movs	r1, #0
   304b8:	5499      	strb	r1, [r3, r2]
	return rc;
   304ba:	68fb      	ldr	r3, [r7, #12]
}
   304bc:	0018      	movs	r0, r3
   304be:	46bd      	mov	sp, r7
   304c0:	b004      	add	sp, #16
   304c2:	bd80      	pop	{r7, pc}
   304c4:	0002fc49 	.word	0x0002fc49

000304c8 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   304c8:	b580      	push	{r7, lr}
   304ca:	b08a      	sub	sp, #40	; 0x28
   304cc:	af00      	add	r7, sp, #0
   304ce:	60f8      	str	r0, [r7, #12]
   304d0:	60b9      	str	r1, [r7, #8]
   304d2:	607a      	str	r2, [r7, #4]
   304d4:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   304d6:	2314      	movs	r3, #20
   304d8:	18fb      	adds	r3, r7, r3
   304da:	2230      	movs	r2, #48	; 0x30
   304dc:	18ba      	adds	r2, r7, r2
   304de:	7812      	ldrb	r2, [r2, #0]
   304e0:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   304e2:	2314      	movs	r3, #20
   304e4:	18fb      	adds	r3, r7, r3
   304e6:	687a      	ldr	r2, [r7, #4]
   304e8:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   304ea:	2314      	movs	r3, #20
   304ec:	18fb      	adds	r3, r7, r3
   304ee:	683a      	ldr	r2, [r7, #0]
   304f0:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   304f2:	2314      	movs	r3, #20
   304f4:	18fb      	adds	r3, r7, r3
   304f6:	2234      	movs	r2, #52	; 0x34
   304f8:	18ba      	adds	r2, r7, r2
   304fa:	7812      	ldrb	r2, [r2, #0]
   304fc:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   304fe:	68fb      	ldr	r3, [r7, #12]
   30500:	69db      	ldr	r3, [r3, #28]
   30502:	2214      	movs	r2, #20
   30504:	18ba      	adds	r2, r7, r2
   30506:	68b9      	ldr	r1, [r7, #8]
   30508:	0018      	movs	r0, r3
   3050a:	4b09      	ldr	r3, [pc, #36]	; (30530 <mqtt_publish+0x68>)
   3050c:	4798      	blx	r3
   3050e:	0003      	movs	r3, r0
   30510:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   30512:	68fb      	ldr	r3, [r7, #12]
   30514:	681b      	ldr	r3, [r3, #0]
   30516:	2b00      	cmp	r3, #0
   30518:	d005      	beq.n	30526 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   3051a:	68fb      	ldr	r3, [r7, #12]
   3051c:	681b      	ldr	r3, [r3, #0]
   3051e:	68f8      	ldr	r0, [r7, #12]
   30520:	2200      	movs	r2, #0
   30522:	2102      	movs	r1, #2
   30524:	4798      	blx	r3
	
	return rc;
   30526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30528:	0018      	movs	r0, r3
   3052a:	46bd      	mov	sp, r7
   3052c:	b00a      	add	sp, #40	; 0x28
   3052e:	bd80      	pop	{r7, pc}
   30530:	0002fa89 	.word	0x0002fa89

00030534 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   30534:	b590      	push	{r4, r7, lr}
   30536:	b087      	sub	sp, #28
   30538:	af00      	add	r7, sp, #0
   3053a:	60f8      	str	r0, [r7, #12]
   3053c:	60b9      	str	r1, [r7, #8]
   3053e:	603b      	str	r3, [r7, #0]
   30540:	1dfb      	adds	r3, r7, #7
   30542:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   30544:	68fb      	ldr	r3, [r7, #12]
   30546:	69d8      	ldr	r0, [r3, #28]
   30548:	683c      	ldr	r4, [r7, #0]
   3054a:	1dfb      	adds	r3, r7, #7
   3054c:	781a      	ldrb	r2, [r3, #0]
   3054e:	68b9      	ldr	r1, [r7, #8]
   30550:	0023      	movs	r3, r4
   30552:	4c09      	ldr	r4, [pc, #36]	; (30578 <mqtt_subscribe+0x44>)
   30554:	47a0      	blx	r4
   30556:	0003      	movs	r3, r0
   30558:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   3055a:	68fb      	ldr	r3, [r7, #12]
   3055c:	681b      	ldr	r3, [r3, #0]
   3055e:	2b00      	cmp	r3, #0
   30560:	d005      	beq.n	3056e <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   30562:	68fb      	ldr	r3, [r7, #12]
   30564:	681b      	ldr	r3, [r3, #0]
   30566:	68f8      	ldr	r0, [r7, #12]
   30568:	2200      	movs	r2, #0
   3056a:	2103      	movs	r1, #3
   3056c:	4798      	blx	r3
	
	return rc;
   3056e:	697b      	ldr	r3, [r7, #20]
}
   30570:	0018      	movs	r0, r3
   30572:	46bd      	mov	sp, r7
   30574:	b007      	add	sp, #28
   30576:	bd90      	pop	{r4, r7, pc}
   30578:	0002f8fd 	.word	0x0002f8fd

0003057c <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   3057c:	b580      	push	{r7, lr}
   3057e:	b082      	sub	sp, #8
   30580:	af00      	add	r7, sp, #0
   30582:	6078      	str	r0, [r7, #4]
   30584:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   30586:	687b      	ldr	r3, [r7, #4]
   30588:	69db      	ldr	r3, [r3, #28]
   3058a:	683a      	ldr	r2, [r7, #0]
   3058c:	0011      	movs	r1, r2
   3058e:	0018      	movs	r0, r3
   30590:	4b03      	ldr	r3, [pc, #12]	; (305a0 <mqtt_yield+0x24>)
   30592:	4798      	blx	r3
   30594:	0003      	movs	r3, r0
   30596:	0018      	movs	r0, r3
   30598:	46bd      	mov	sp, r7
   3059a:	b002      	add	sp, #8
   3059c:	bd80      	pop	{r7, pc}
   3059e:	46c0      	nop			; (mov r8, r8)
   305a0:	0002f705 	.word	0x0002f705

000305a4 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   305a4:	b590      	push	{r4, r7, lr}
   305a6:	b085      	sub	sp, #20
   305a8:	af00      	add	r7, sp, #0
   305aa:	6078      	str	r0, [r7, #4]
	int len = 0;
   305ac:	2300      	movs	r3, #0
   305ae:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   305b0:	687b      	ldr	r3, [r7, #4]
   305b2:	7a1b      	ldrb	r3, [r3, #8]
   305b4:	2b03      	cmp	r3, #3
   305b6:	d102      	bne.n	305be <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   305b8:	230c      	movs	r3, #12
   305ba:	60fb      	str	r3, [r7, #12]
   305bc:	e005      	b.n	305ca <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   305be:	687b      	ldr	r3, [r7, #4]
   305c0:	7a1b      	ldrb	r3, [r3, #8]
   305c2:	2b04      	cmp	r3, #4
   305c4:	d101      	bne.n	305ca <MQTTSerialize_connectLength+0x26>
		len = 10;
   305c6:	230a      	movs	r3, #10
   305c8:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   305ca:	687b      	ldr	r3, [r7, #4]
   305cc:	68d8      	ldr	r0, [r3, #12]
   305ce:	6919      	ldr	r1, [r3, #16]
   305d0:	695a      	ldr	r2, [r3, #20]
   305d2:	4b25      	ldr	r3, [pc, #148]	; (30668 <MQTTSerialize_connectLength+0xc4>)
   305d4:	4798      	blx	r3
   305d6:	0003      	movs	r3, r0
   305d8:	3302      	adds	r3, #2
   305da:	68fa      	ldr	r2, [r7, #12]
   305dc:	18d3      	adds	r3, r2, r3
   305de:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   305e0:	687b      	ldr	r3, [r7, #4]
   305e2:	7edb      	ldrb	r3, [r3, #27]
   305e4:	2b00      	cmp	r3, #0
   305e6:	d013      	beq.n	30610 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   305e8:	687b      	ldr	r3, [r7, #4]
   305ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
   305ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
   305ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   305f0:	4b1d      	ldr	r3, [pc, #116]	; (30668 <MQTTSerialize_connectLength+0xc4>)
   305f2:	4798      	blx	r3
   305f4:	0003      	movs	r3, r0
   305f6:	1c9c      	adds	r4, r3, #2
   305f8:	687b      	ldr	r3, [r7, #4]
   305fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
   305fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   305fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   30600:	4b19      	ldr	r3, [pc, #100]	; (30668 <MQTTSerialize_connectLength+0xc4>)
   30602:	4798      	blx	r3
   30604:	0003      	movs	r3, r0
   30606:	18e3      	adds	r3, r4, r3
   30608:	3302      	adds	r3, #2
   3060a:	68fa      	ldr	r2, [r7, #12]
   3060c:	18d3      	adds	r3, r2, r3
   3060e:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   30610:	687b      	ldr	r3, [r7, #4]
   30612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30614:	2b00      	cmp	r3, #0
   30616:	d103      	bne.n	30620 <MQTTSerialize_connectLength+0x7c>
   30618:	687b      	ldr	r3, [r7, #4]
   3061a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   3061c:	2b00      	cmp	r3, #0
   3061e:	d00a      	beq.n	30636 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   30620:	687b      	ldr	r3, [r7, #4]
   30622:	6c18      	ldr	r0, [r3, #64]	; 0x40
   30624:	6c59      	ldr	r1, [r3, #68]	; 0x44
   30626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   30628:	4b0f      	ldr	r3, [pc, #60]	; (30668 <MQTTSerialize_connectLength+0xc4>)
   3062a:	4798      	blx	r3
   3062c:	0003      	movs	r3, r0
   3062e:	3302      	adds	r3, #2
   30630:	68fa      	ldr	r2, [r7, #12]
   30632:	18d3      	adds	r3, r2, r3
   30634:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   30636:	687b      	ldr	r3, [r7, #4]
   30638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3063a:	2b00      	cmp	r3, #0
   3063c:	d103      	bne.n	30646 <MQTTSerialize_connectLength+0xa2>
   3063e:	687b      	ldr	r3, [r7, #4]
   30640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30642:	2b00      	cmp	r3, #0
   30644:	d00a      	beq.n	3065c <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   30646:	687b      	ldr	r3, [r7, #4]
   30648:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   3064a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   3064c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3064e:	4b06      	ldr	r3, [pc, #24]	; (30668 <MQTTSerialize_connectLength+0xc4>)
   30650:	4798      	blx	r3
   30652:	0003      	movs	r3, r0
   30654:	3302      	adds	r3, #2
   30656:	68fa      	ldr	r2, [r7, #12]
   30658:	18d3      	adds	r3, r2, r3
   3065a:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   3065c:	68fb      	ldr	r3, [r7, #12]
}
   3065e:	0018      	movs	r0, r3
   30660:	46bd      	mov	sp, r7
   30662:	b005      	add	sp, #20
   30664:	bd90      	pop	{r4, r7, pc}
   30666:	46c0      	nop			; (mov r8, r8)
   30668:	00031015 	.word	0x00031015

0003066c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   3066c:	b590      	push	{r4, r7, lr}
   3066e:	b08b      	sub	sp, #44	; 0x2c
   30670:	af00      	add	r7, sp, #0
   30672:	60f8      	str	r0, [r7, #12]
   30674:	60b9      	str	r1, [r7, #8]
   30676:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   30678:	68fb      	ldr	r3, [r7, #12]
   3067a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   3067c:	2300      	movs	r3, #0
   3067e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   30680:	2300      	movs	r3, #0
   30682:	617b      	str	r3, [r7, #20]
	int len = 0;
   30684:	2300      	movs	r3, #0
   30686:	623b      	str	r3, [r7, #32]
	int rc = -1;
   30688:	2301      	movs	r3, #1
   3068a:	425b      	negs	r3, r3
   3068c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   3068e:	687b      	ldr	r3, [r7, #4]
   30690:	0018      	movs	r0, r3
   30692:	4b8c      	ldr	r3, [pc, #560]	; (308c4 <MQTTSerialize_connect+0x258>)
   30694:	4798      	blx	r3
   30696:	0003      	movs	r3, r0
   30698:	623b      	str	r3, [r7, #32]
   3069a:	6a3b      	ldr	r3, [r7, #32]
   3069c:	0018      	movs	r0, r3
   3069e:	4b8a      	ldr	r3, [pc, #552]	; (308c8 <MQTTSerialize_connect+0x25c>)
   306a0:	4798      	blx	r3
   306a2:	0002      	movs	r2, r0
   306a4:	68bb      	ldr	r3, [r7, #8]
   306a6:	429a      	cmp	r2, r3
   306a8:	dd03      	ble.n	306b2 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   306aa:	2302      	movs	r3, #2
   306ac:	425b      	negs	r3, r3
   306ae:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   306b0:	e103      	b.n	308ba <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   306b2:	2318      	movs	r3, #24
   306b4:	18fb      	adds	r3, r7, r3
   306b6:	2200      	movs	r2, #0
   306b8:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   306ba:	2318      	movs	r3, #24
   306bc:	18fb      	adds	r3, r7, r3
   306be:	781a      	ldrb	r2, [r3, #0]
   306c0:	210f      	movs	r1, #15
   306c2:	400a      	ands	r2, r1
   306c4:	1c11      	adds	r1, r2, #0
   306c6:	2210      	movs	r2, #16
   306c8:	430a      	orrs	r2, r1
   306ca:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   306cc:	2318      	movs	r3, #24
   306ce:	18fb      	adds	r3, r7, r3
   306d0:	781a      	ldrb	r2, [r3, #0]
   306d2:	231c      	movs	r3, #28
   306d4:	18fb      	adds	r3, r7, r3
   306d6:	0011      	movs	r1, r2
   306d8:	0018      	movs	r0, r3
   306da:	4b7c      	ldr	r3, [pc, #496]	; (308cc <MQTTSerialize_connect+0x260>)
   306dc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   306de:	69fb      	ldr	r3, [r7, #28]
   306e0:	6a3a      	ldr	r2, [r7, #32]
   306e2:	0011      	movs	r1, r2
   306e4:	0018      	movs	r0, r3
   306e6:	4b7a      	ldr	r3, [pc, #488]	; (308d0 <MQTTSerialize_connect+0x264>)
   306e8:	4798      	blx	r3
   306ea:	0002      	movs	r2, r0
   306ec:	69fb      	ldr	r3, [r7, #28]
   306ee:	189b      	adds	r3, r3, r2
   306f0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   306f2:	687b      	ldr	r3, [r7, #4]
   306f4:	7a1b      	ldrb	r3, [r3, #8]
   306f6:	2b04      	cmp	r3, #4
   306f8:	d10d      	bne.n	30716 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   306fa:	4a76      	ldr	r2, [pc, #472]	; (308d4 <MQTTSerialize_connect+0x268>)
   306fc:	231c      	movs	r3, #28
   306fe:	18fb      	adds	r3, r7, r3
   30700:	0011      	movs	r1, r2
   30702:	0018      	movs	r0, r3
   30704:	4b74      	ldr	r3, [pc, #464]	; (308d8 <MQTTSerialize_connect+0x26c>)
   30706:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   30708:	231c      	movs	r3, #28
   3070a:	18fb      	adds	r3, r7, r3
   3070c:	2104      	movs	r1, #4
   3070e:	0018      	movs	r0, r3
   30710:	4b6e      	ldr	r3, [pc, #440]	; (308cc <MQTTSerialize_connect+0x260>)
   30712:	4798      	blx	r3
   30714:	e00c      	b.n	30730 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   30716:	4a71      	ldr	r2, [pc, #452]	; (308dc <MQTTSerialize_connect+0x270>)
   30718:	231c      	movs	r3, #28
   3071a:	18fb      	adds	r3, r7, r3
   3071c:	0011      	movs	r1, r2
   3071e:	0018      	movs	r0, r3
   30720:	4b6d      	ldr	r3, [pc, #436]	; (308d8 <MQTTSerialize_connect+0x26c>)
   30722:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   30724:	231c      	movs	r3, #28
   30726:	18fb      	adds	r3, r7, r3
   30728:	2103      	movs	r1, #3
   3072a:	0018      	movs	r0, r3
   3072c:	4b67      	ldr	r3, [pc, #412]	; (308cc <MQTTSerialize_connect+0x260>)
   3072e:	4798      	blx	r3
	}

	flags.all = 0;
   30730:	2314      	movs	r3, #20
   30732:	18fb      	adds	r3, r7, r3
   30734:	2200      	movs	r2, #0
   30736:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   30738:	687b      	ldr	r3, [r7, #4]
   3073a:	7e9b      	ldrb	r3, [r3, #26]
   3073c:	1c1a      	adds	r2, r3, #0
   3073e:	2301      	movs	r3, #1
   30740:	4013      	ands	r3, r2
   30742:	b2da      	uxtb	r2, r3
   30744:	2314      	movs	r3, #20
   30746:	18fb      	adds	r3, r7, r3
   30748:	2101      	movs	r1, #1
   3074a:	400a      	ands	r2, r1
   3074c:	1890      	adds	r0, r2, r2
   3074e:	781a      	ldrb	r2, [r3, #0]
   30750:	2102      	movs	r1, #2
   30752:	438a      	bics	r2, r1
   30754:	1c11      	adds	r1, r2, #0
   30756:	1c02      	adds	r2, r0, #0
   30758:	430a      	orrs	r2, r1
   3075a:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   3075c:	687b      	ldr	r3, [r7, #4]
   3075e:	7edb      	ldrb	r3, [r3, #27]
   30760:	1e5a      	subs	r2, r3, #1
   30762:	4193      	sbcs	r3, r2
   30764:	b2da      	uxtb	r2, r3
   30766:	2314      	movs	r3, #20
   30768:	18fb      	adds	r3, r7, r3
   3076a:	2101      	movs	r1, #1
   3076c:	400a      	ands	r2, r1
   3076e:	0090      	lsls	r0, r2, #2
   30770:	781a      	ldrb	r2, [r3, #0]
   30772:	2104      	movs	r1, #4
   30774:	438a      	bics	r2, r1
   30776:	1c11      	adds	r1, r2, #0
   30778:	1c02      	adds	r2, r0, #0
   3077a:	430a      	orrs	r2, r1
   3077c:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   3077e:	2314      	movs	r3, #20
   30780:	18fb      	adds	r3, r7, r3
   30782:	781b      	ldrb	r3, [r3, #0]
   30784:	2204      	movs	r2, #4
   30786:	4013      	ands	r3, r2
   30788:	b2db      	uxtb	r3, r3
   3078a:	2b00      	cmp	r3, #0
   3078c:	d025      	beq.n	307da <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   3078e:	687b      	ldr	r3, [r7, #4]
   30790:	223d      	movs	r2, #61	; 0x3d
   30792:	5c9b      	ldrb	r3, [r3, r2]
   30794:	1c1a      	adds	r2, r3, #0
   30796:	2303      	movs	r3, #3
   30798:	4013      	ands	r3, r2
   3079a:	b2da      	uxtb	r2, r3
   3079c:	2314      	movs	r3, #20
   3079e:	18fb      	adds	r3, r7, r3
   307a0:	2103      	movs	r1, #3
   307a2:	400a      	ands	r2, r1
   307a4:	00d0      	lsls	r0, r2, #3
   307a6:	781a      	ldrb	r2, [r3, #0]
   307a8:	2118      	movs	r1, #24
   307aa:	438a      	bics	r2, r1
   307ac:	1c11      	adds	r1, r2, #0
   307ae:	1c02      	adds	r2, r0, #0
   307b0:	430a      	orrs	r2, r1
   307b2:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   307b4:	687b      	ldr	r3, [r7, #4]
   307b6:	223c      	movs	r2, #60	; 0x3c
   307b8:	5c9b      	ldrb	r3, [r3, r2]
   307ba:	1c1a      	adds	r2, r3, #0
   307bc:	2301      	movs	r3, #1
   307be:	4013      	ands	r3, r2
   307c0:	b2da      	uxtb	r2, r3
   307c2:	2314      	movs	r3, #20
   307c4:	18fb      	adds	r3, r7, r3
   307c6:	2101      	movs	r1, #1
   307c8:	400a      	ands	r2, r1
   307ca:	0150      	lsls	r0, r2, #5
   307cc:	781a      	ldrb	r2, [r3, #0]
   307ce:	2120      	movs	r1, #32
   307d0:	438a      	bics	r2, r1
   307d2:	1c11      	adds	r1, r2, #0
   307d4:	1c02      	adds	r2, r0, #0
   307d6:	430a      	orrs	r2, r1
   307d8:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   307da:	687b      	ldr	r3, [r7, #4]
   307dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   307de:	2b00      	cmp	r3, #0
   307e0:	d103      	bne.n	307ea <MQTTSerialize_connect+0x17e>
   307e2:	687b      	ldr	r3, [r7, #4]
   307e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   307e6:	2b00      	cmp	r3, #0
   307e8:	d006      	beq.n	307f8 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   307ea:	2314      	movs	r3, #20
   307ec:	18fb      	adds	r3, r7, r3
   307ee:	781a      	ldrb	r2, [r3, #0]
   307f0:	2180      	movs	r1, #128	; 0x80
   307f2:	4249      	negs	r1, r1
   307f4:	430a      	orrs	r2, r1
   307f6:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   307f8:	687b      	ldr	r3, [r7, #4]
   307fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   307fc:	2b00      	cmp	r3, #0
   307fe:	d103      	bne.n	30808 <MQTTSerialize_connect+0x19c>
   30800:	687b      	ldr	r3, [r7, #4]
   30802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30804:	2b00      	cmp	r3, #0
   30806:	d005      	beq.n	30814 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   30808:	2314      	movs	r3, #20
   3080a:	18fb      	adds	r3, r7, r3
   3080c:	781a      	ldrb	r2, [r3, #0]
   3080e:	2140      	movs	r1, #64	; 0x40
   30810:	430a      	orrs	r2, r1
   30812:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   30814:	2314      	movs	r3, #20
   30816:	18fb      	adds	r3, r7, r3
   30818:	781a      	ldrb	r2, [r3, #0]
   3081a:	231c      	movs	r3, #28
   3081c:	18fb      	adds	r3, r7, r3
   3081e:	0011      	movs	r1, r2
   30820:	0018      	movs	r0, r3
   30822:	4b2a      	ldr	r3, [pc, #168]	; (308cc <MQTTSerialize_connect+0x260>)
   30824:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   30826:	687b      	ldr	r3, [r7, #4]
   30828:	8b1b      	ldrh	r3, [r3, #24]
   3082a:	001a      	movs	r2, r3
   3082c:	231c      	movs	r3, #28
   3082e:	18fb      	adds	r3, r7, r3
   30830:	0011      	movs	r1, r2
   30832:	0018      	movs	r0, r3
   30834:	4b2a      	ldr	r3, [pc, #168]	; (308e0 <MQTTSerialize_connect+0x274>)
   30836:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   30838:	687b      	ldr	r3, [r7, #4]
   3083a:	221c      	movs	r2, #28
   3083c:	18b8      	adds	r0, r7, r2
   3083e:	68d9      	ldr	r1, [r3, #12]
   30840:	691a      	ldr	r2, [r3, #16]
   30842:	695b      	ldr	r3, [r3, #20]
   30844:	4c27      	ldr	r4, [pc, #156]	; (308e4 <MQTTSerialize_connect+0x278>)
   30846:	47a0      	blx	r4
	if (options->willFlag)
   30848:	687b      	ldr	r3, [r7, #4]
   3084a:	7edb      	ldrb	r3, [r3, #27]
   3084c:	2b00      	cmp	r3, #0
   3084e:	d00f      	beq.n	30870 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   30850:	687b      	ldr	r3, [r7, #4]
   30852:	221c      	movs	r2, #28
   30854:	18b8      	adds	r0, r7, r2
   30856:	6a59      	ldr	r1, [r3, #36]	; 0x24
   30858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3085a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   3085c:	4c21      	ldr	r4, [pc, #132]	; (308e4 <MQTTSerialize_connect+0x278>)
   3085e:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   30860:	687b      	ldr	r3, [r7, #4]
   30862:	221c      	movs	r2, #28
   30864:	18b8      	adds	r0, r7, r2
   30866:	6b19      	ldr	r1, [r3, #48]	; 0x30
   30868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3086a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   3086c:	4c1d      	ldr	r4, [pc, #116]	; (308e4 <MQTTSerialize_connect+0x278>)
   3086e:	47a0      	blx	r4
	}
	if (flags.bits.username)
   30870:	2314      	movs	r3, #20
   30872:	18fb      	adds	r3, r7, r3
   30874:	781b      	ldrb	r3, [r3, #0]
   30876:	227f      	movs	r2, #127	; 0x7f
   30878:	4393      	bics	r3, r2
   3087a:	b2db      	uxtb	r3, r3
   3087c:	2b00      	cmp	r3, #0
   3087e:	d007      	beq.n	30890 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   30880:	687b      	ldr	r3, [r7, #4]
   30882:	221c      	movs	r2, #28
   30884:	18b8      	adds	r0, r7, r2
   30886:	6c19      	ldr	r1, [r3, #64]	; 0x40
   30888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3088a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   3088c:	4c15      	ldr	r4, [pc, #84]	; (308e4 <MQTTSerialize_connect+0x278>)
   3088e:	47a0      	blx	r4
	if (flags.bits.password)
   30890:	2314      	movs	r3, #20
   30892:	18fb      	adds	r3, r7, r3
   30894:	781b      	ldrb	r3, [r3, #0]
   30896:	2240      	movs	r2, #64	; 0x40
   30898:	4013      	ands	r3, r2
   3089a:	b2db      	uxtb	r3, r3
   3089c:	2b00      	cmp	r3, #0
   3089e:	d007      	beq.n	308b0 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   308a0:	687b      	ldr	r3, [r7, #4]
   308a2:	221c      	movs	r2, #28
   308a4:	18b8      	adds	r0, r7, r2
   308a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   308a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   308aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   308ac:	4c0d      	ldr	r4, [pc, #52]	; (308e4 <MQTTSerialize_connect+0x278>)
   308ae:	47a0      	blx	r4

	rc = ptr - buf;
   308b0:	69fb      	ldr	r3, [r7, #28]
   308b2:	001a      	movs	r2, r3
   308b4:	68fb      	ldr	r3, [r7, #12]
   308b6:	1ad3      	subs	r3, r2, r3
   308b8:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   308ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   308bc:	0018      	movs	r0, r3
   308be:	46bd      	mov	sp, r7
   308c0:	b00b      	add	sp, #44	; 0x2c
   308c2:	bd90      	pop	{r4, r7, pc}
   308c4:	000305a5 	.word	0x000305a5
   308c8:	00030d39 	.word	0x00030d39
   308cc:	00030e5b 	.word	0x00030e5b
   308d0:	00030c41 	.word	0x00030c41
   308d4:	0003a798 	.word	0x0003a798
   308d8:	00030edd 	.word	0x00030edd
   308dc:	0003a7a0 	.word	0x0003a7a0
   308e0:	00030e85 	.word	0x00030e85
   308e4:	00030f2d 	.word	0x00030f2d

000308e8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   308e8:	b580      	push	{r7, lr}
   308ea:	b08a      	sub	sp, #40	; 0x28
   308ec:	af00      	add	r7, sp, #0
   308ee:	60f8      	str	r0, [r7, #12]
   308f0:	60b9      	str	r1, [r7, #8]
   308f2:	607a      	str	r2, [r7, #4]
   308f4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   308f6:	2300      	movs	r3, #0
   308f8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   308fa:	687b      	ldr	r3, [r7, #4]
   308fc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   308fe:	2300      	movs	r3, #0
   30900:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30902:	2300      	movs	r3, #0
   30904:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   30906:	2300      	movs	r3, #0
   30908:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3090a:	2318      	movs	r3, #24
   3090c:	18fb      	adds	r3, r7, r3
   3090e:	0018      	movs	r0, r3
   30910:	4b25      	ldr	r3, [pc, #148]	; (309a8 <MQTTDeserialize_connack+0xc0>)
   30912:	4798      	blx	r3
   30914:	0003      	movs	r3, r0
   30916:	001a      	movs	r2, r3
   30918:	231c      	movs	r3, #28
   3091a:	18fb      	adds	r3, r7, r3
   3091c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   3091e:	231c      	movs	r3, #28
   30920:	18fb      	adds	r3, r7, r3
   30922:	781b      	ldrb	r3, [r3, #0]
   30924:	220f      	movs	r2, #15
   30926:	4393      	bics	r3, r2
   30928:	b2db      	uxtb	r3, r3
   3092a:	2b20      	cmp	r3, #32
   3092c:	d134      	bne.n	30998 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   3092e:	69bb      	ldr	r3, [r7, #24]
   30930:	2214      	movs	r2, #20
   30932:	18ba      	adds	r2, r7, r2
   30934:	0011      	movs	r1, r2
   30936:	0018      	movs	r0, r3
   30938:	4b1c      	ldr	r3, [pc, #112]	; (309ac <MQTTDeserialize_connack+0xc4>)
   3093a:	4798      	blx	r3
   3093c:	0003      	movs	r3, r0
   3093e:	627b      	str	r3, [r7, #36]	; 0x24
   30940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30942:	69bb      	ldr	r3, [r7, #24]
   30944:	189b      	adds	r3, r3, r2
   30946:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30948:	69bb      	ldr	r3, [r7, #24]
   3094a:	697a      	ldr	r2, [r7, #20]
   3094c:	189b      	adds	r3, r3, r2
   3094e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30950:	6a3b      	ldr	r3, [r7, #32]
   30952:	69ba      	ldr	r2, [r7, #24]
   30954:	1a9b      	subs	r3, r3, r2
   30956:	2b01      	cmp	r3, #1
   30958:	dd20      	ble.n	3099c <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   3095a:	2318      	movs	r3, #24
   3095c:	18fb      	adds	r3, r7, r3
   3095e:	0018      	movs	r0, r3
   30960:	4b11      	ldr	r3, [pc, #68]	; (309a8 <MQTTDeserialize_connack+0xc0>)
   30962:	4798      	blx	r3
   30964:	0003      	movs	r3, r0
   30966:	001a      	movs	r2, r3
   30968:	2310      	movs	r3, #16
   3096a:	18fb      	adds	r3, r7, r3
   3096c:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   3096e:	2310      	movs	r3, #16
   30970:	18fb      	adds	r3, r7, r3
   30972:	781b      	ldrb	r3, [r3, #0]
   30974:	061b      	lsls	r3, r3, #24
   30976:	0fdb      	lsrs	r3, r3, #31
   30978:	b2db      	uxtb	r3, r3
   3097a:	001a      	movs	r2, r3
   3097c:	68fb      	ldr	r3, [r7, #12]
   3097e:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   30980:	2318      	movs	r3, #24
   30982:	18fb      	adds	r3, r7, r3
   30984:	0018      	movs	r0, r3
   30986:	4b08      	ldr	r3, [pc, #32]	; (309a8 <MQTTDeserialize_connack+0xc0>)
   30988:	4798      	blx	r3
   3098a:	0003      	movs	r3, r0
   3098c:	001a      	movs	r2, r3
   3098e:	68bb      	ldr	r3, [r7, #8]
   30990:	701a      	strb	r2, [r3, #0]

	rc = 1;
   30992:	2301      	movs	r3, #1
   30994:	627b      	str	r3, [r7, #36]	; 0x24
   30996:	e002      	b.n	3099e <MQTTDeserialize_connack+0xb6>
		goto exit;
   30998:	46c0      	nop			; (mov r8, r8)
   3099a:	e000      	b.n	3099e <MQTTDeserialize_connack+0xb6>
		goto exit;
   3099c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   309a0:	0018      	movs	r0, r3
   309a2:	46bd      	mov	sp, r7
   309a4:	b00a      	add	sp, #40	; 0x28
   309a6:	bd80      	pop	{r7, pc}
   309a8:	00030e2f 	.word	0x00030e2f
   309ac:	00030dc9 	.word	0x00030dc9

000309b0 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   309b0:	b580      	push	{r7, lr}
   309b2:	b088      	sub	sp, #32
   309b4:	af00      	add	r7, sp, #0
   309b6:	60f8      	str	r0, [r7, #12]
   309b8:	60b9      	str	r1, [r7, #8]
   309ba:	1dfb      	adds	r3, r7, #7
   309bc:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   309be:	2300      	movs	r3, #0
   309c0:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   309c2:	2301      	movs	r3, #1
   309c4:	425b      	negs	r3, r3
   309c6:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   309c8:	68fb      	ldr	r3, [r7, #12]
   309ca:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   309cc:	68bb      	ldr	r3, [r7, #8]
   309ce:	2b01      	cmp	r3, #1
   309d0:	dc03      	bgt.n	309da <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   309d2:	2302      	movs	r3, #2
   309d4:	425b      	negs	r3, r3
   309d6:	61fb      	str	r3, [r7, #28]
		goto exit;
   309d8:	e029      	b.n	30a2e <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   309da:	2318      	movs	r3, #24
   309dc:	18fb      	adds	r3, r7, r3
   309de:	2200      	movs	r2, #0
   309e0:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   309e2:	1dfb      	adds	r3, r7, #7
   309e4:	781b      	ldrb	r3, [r3, #0]
   309e6:	220f      	movs	r2, #15
   309e8:	4013      	ands	r3, r2
   309ea:	b2da      	uxtb	r2, r3
   309ec:	2318      	movs	r3, #24
   309ee:	18fb      	adds	r3, r7, r3
   309f0:	0110      	lsls	r0, r2, #4
   309f2:	781a      	ldrb	r2, [r3, #0]
   309f4:	210f      	movs	r1, #15
   309f6:	400a      	ands	r2, r1
   309f8:	1c11      	adds	r1, r2, #0
   309fa:	1c02      	adds	r2, r0, #0
   309fc:	430a      	orrs	r2, r1
   309fe:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30a00:	2318      	movs	r3, #24
   30a02:	18fb      	adds	r3, r7, r3
   30a04:	781a      	ldrb	r2, [r3, #0]
   30a06:	2314      	movs	r3, #20
   30a08:	18fb      	adds	r3, r7, r3
   30a0a:	0011      	movs	r1, r2
   30a0c:	0018      	movs	r0, r3
   30a0e:	4b0a      	ldr	r3, [pc, #40]	; (30a38 <MQTTSerialize_zero+0x88>)
   30a10:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   30a12:	697b      	ldr	r3, [r7, #20]
   30a14:	2100      	movs	r1, #0
   30a16:	0018      	movs	r0, r3
   30a18:	4b08      	ldr	r3, [pc, #32]	; (30a3c <MQTTSerialize_zero+0x8c>)
   30a1a:	4798      	blx	r3
   30a1c:	0002      	movs	r2, r0
   30a1e:	697b      	ldr	r3, [r7, #20]
   30a20:	189b      	adds	r3, r3, r2
   30a22:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   30a24:	697b      	ldr	r3, [r7, #20]
   30a26:	001a      	movs	r2, r3
   30a28:	68fb      	ldr	r3, [r7, #12]
   30a2a:	1ad3      	subs	r3, r2, r3
   30a2c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30a2e:	69fb      	ldr	r3, [r7, #28]
}
   30a30:	0018      	movs	r0, r3
   30a32:	46bd      	mov	sp, r7
   30a34:	b008      	add	sp, #32
   30a36:	bd80      	pop	{r7, pc}
   30a38:	00030e5b 	.word	0x00030e5b
   30a3c:	00030c41 	.word	0x00030c41

00030a40 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   30a40:	b580      	push	{r7, lr}
   30a42:	b082      	sub	sp, #8
   30a44:	af00      	add	r7, sp, #0
   30a46:	6078      	str	r0, [r7, #4]
   30a48:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   30a4a:	6839      	ldr	r1, [r7, #0]
   30a4c:	687b      	ldr	r3, [r7, #4]
   30a4e:	220e      	movs	r2, #14
   30a50:	0018      	movs	r0, r3
   30a52:	4b03      	ldr	r3, [pc, #12]	; (30a60 <MQTTSerialize_disconnect+0x20>)
   30a54:	4798      	blx	r3
   30a56:	0003      	movs	r3, r0
}
   30a58:	0018      	movs	r0, r3
   30a5a:	46bd      	mov	sp, r7
   30a5c:	b002      	add	sp, #8
   30a5e:	bd80      	pop	{r7, pc}
   30a60:	000309b1 	.word	0x000309b1

00030a64 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   30a64:	b580      	push	{r7, lr}
   30a66:	b082      	sub	sp, #8
   30a68:	af00      	add	r7, sp, #0
   30a6a:	6078      	str	r0, [r7, #4]
   30a6c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   30a6e:	6839      	ldr	r1, [r7, #0]
   30a70:	687b      	ldr	r3, [r7, #4]
   30a72:	220c      	movs	r2, #12
   30a74:	0018      	movs	r0, r3
   30a76:	4b03      	ldr	r3, [pc, #12]	; (30a84 <MQTTSerialize_pingreq+0x20>)
   30a78:	4798      	blx	r3
   30a7a:	0003      	movs	r3, r0
}
   30a7c:	0018      	movs	r0, r3
   30a7e:	46bd      	mov	sp, r7
   30a80:	b002      	add	sp, #8
   30a82:	bd80      	pop	{r7, pc}
   30a84:	000309b1 	.word	0x000309b1

00030a88 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   30a88:	b580      	push	{r7, lr}
   30a8a:	b08a      	sub	sp, #40	; 0x28
   30a8c:	af00      	add	r7, sp, #0
   30a8e:	60f8      	str	r0, [r7, #12]
   30a90:	60b9      	str	r1, [r7, #8]
   30a92:	607a      	str	r2, [r7, #4]
   30a94:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30a96:	2300      	movs	r3, #0
   30a98:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30a9c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30a9e:	2300      	movs	r3, #0
   30aa0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30aa2:	2300      	movs	r3, #0
   30aa4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   30aa6:	2300      	movs	r3, #0
   30aa8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30aaa:	2318      	movs	r3, #24
   30aac:	18fb      	adds	r3, r7, r3
   30aae:	0018      	movs	r0, r3
   30ab0:	4b32      	ldr	r3, [pc, #200]	; (30b7c <MQTTDeserialize_publish+0xf4>)
   30ab2:	4798      	blx	r3
   30ab4:	0003      	movs	r3, r0
   30ab6:	001a      	movs	r2, r3
   30ab8:	231c      	movs	r3, #28
   30aba:	18fb      	adds	r3, r7, r3
   30abc:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   30abe:	231c      	movs	r3, #28
   30ac0:	18fb      	adds	r3, r7, r3
   30ac2:	781b      	ldrb	r3, [r3, #0]
   30ac4:	220f      	movs	r2, #15
   30ac6:	4393      	bics	r3, r2
   30ac8:	b2db      	uxtb	r3, r3
   30aca:	2b30      	cmp	r3, #48	; 0x30
   30acc:	d150      	bne.n	30b70 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   30ace:	231c      	movs	r3, #28
   30ad0:	18fb      	adds	r3, r7, r3
   30ad2:	781b      	ldrb	r3, [r3, #0]
   30ad4:	071b      	lsls	r3, r3, #28
   30ad6:	0fdb      	lsrs	r3, r3, #31
   30ad8:	b2db      	uxtb	r3, r3
   30ada:	001a      	movs	r2, r3
   30adc:	68fb      	ldr	r3, [r7, #12]
   30ade:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   30ae0:	231c      	movs	r3, #28
   30ae2:	18fb      	adds	r3, r7, r3
   30ae4:	781b      	ldrb	r3, [r3, #0]
   30ae6:	075b      	lsls	r3, r3, #29
   30ae8:	0f9b      	lsrs	r3, r3, #30
   30aea:	b2db      	uxtb	r3, r3
   30aec:	001a      	movs	r2, r3
   30aee:	68bb      	ldr	r3, [r7, #8]
   30af0:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   30af2:	231c      	movs	r3, #28
   30af4:	18fb      	adds	r3, r7, r3
   30af6:	781b      	ldrb	r3, [r3, #0]
   30af8:	07db      	lsls	r3, r3, #31
   30afa:	0fdb      	lsrs	r3, r3, #31
   30afc:	b2db      	uxtb	r3, r3
   30afe:	001a      	movs	r2, r3
   30b00:	687b      	ldr	r3, [r7, #4]
   30b02:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30b04:	69bb      	ldr	r3, [r7, #24]
   30b06:	2214      	movs	r2, #20
   30b08:	18ba      	adds	r2, r7, r2
   30b0a:	0011      	movs	r1, r2
   30b0c:	0018      	movs	r0, r3
   30b0e:	4b1c      	ldr	r3, [pc, #112]	; (30b80 <MQTTDeserialize_publish+0xf8>)
   30b10:	4798      	blx	r3
   30b12:	0003      	movs	r3, r0
   30b14:	627b      	str	r3, [r7, #36]	; 0x24
   30b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30b18:	69bb      	ldr	r3, [r7, #24]
   30b1a:	189b      	adds	r3, r3, r2
   30b1c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30b1e:	69bb      	ldr	r3, [r7, #24]
   30b20:	697a      	ldr	r2, [r7, #20]
   30b22:	189b      	adds	r3, r3, r2
   30b24:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30b26:	6a3a      	ldr	r2, [r7, #32]
   30b28:	2318      	movs	r3, #24
   30b2a:	18f9      	adds	r1, r7, r3
   30b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30b2e:	0018      	movs	r0, r3
   30b30:	4b14      	ldr	r3, [pc, #80]	; (30b84 <MQTTDeserialize_publish+0xfc>)
   30b32:	4798      	blx	r3
   30b34:	1e03      	subs	r3, r0, #0
   30b36:	d01c      	beq.n	30b72 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   30b38:	6a3b      	ldr	r3, [r7, #32]
   30b3a:	69ba      	ldr	r2, [r7, #24]
   30b3c:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30b3e:	d418      	bmi.n	30b72 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   30b40:	68bb      	ldr	r3, [r7, #8]
   30b42:	681b      	ldr	r3, [r3, #0]
   30b44:	2b00      	cmp	r3, #0
   30b46:	dd08      	ble.n	30b5a <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   30b48:	2318      	movs	r3, #24
   30b4a:	18fb      	adds	r3, r7, r3
   30b4c:	0018      	movs	r0, r3
   30b4e:	4b0e      	ldr	r3, [pc, #56]	; (30b88 <MQTTDeserialize_publish+0x100>)
   30b50:	4798      	blx	r3
   30b52:	0003      	movs	r3, r0
   30b54:	b29a      	uxth	r2, r3
   30b56:	683b      	ldr	r3, [r7, #0]
   30b58:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   30b5a:	6a3b      	ldr	r3, [r7, #32]
   30b5c:	69ba      	ldr	r2, [r7, #24]
   30b5e:	1a9a      	subs	r2, r3, r2
   30b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30b62:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   30b64:	69ba      	ldr	r2, [r7, #24]
   30b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30b68:	601a      	str	r2, [r3, #0]
	rc = 1;
   30b6a:	2301      	movs	r3, #1
   30b6c:	627b      	str	r3, [r7, #36]	; 0x24
   30b6e:	e000      	b.n	30b72 <MQTTDeserialize_publish+0xea>
		goto exit;
   30b70:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30b74:	0018      	movs	r0, r3
   30b76:	46bd      	mov	sp, r7
   30b78:	b00a      	add	sp, #40	; 0x28
   30b7a:	bd80      	pop	{r7, pc}
   30b7c:	00030e2f 	.word	0x00030e2f
   30b80:	00030dc9 	.word	0x00030dc9
   30b84:	00030fad 	.word	0x00030fad
   30b88:	00030dfd 	.word	0x00030dfd

00030b8c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   30b8c:	b580      	push	{r7, lr}
   30b8e:	b08a      	sub	sp, #40	; 0x28
   30b90:	af00      	add	r7, sp, #0
   30b92:	60f8      	str	r0, [r7, #12]
   30b94:	60b9      	str	r1, [r7, #8]
   30b96:	607a      	str	r2, [r7, #4]
   30b98:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30b9a:	2300      	movs	r3, #0
   30b9c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30b9e:	683b      	ldr	r3, [r7, #0]
   30ba0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30ba2:	2300      	movs	r3, #0
   30ba4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30ba6:	2300      	movs	r3, #0
   30ba8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30baa:	2318      	movs	r3, #24
   30bac:	18fb      	adds	r3, r7, r3
   30bae:	0018      	movs	r0, r3
   30bb0:	4b20      	ldr	r3, [pc, #128]	; (30c34 <MQTTDeserialize_ack+0xa8>)
   30bb2:	4798      	blx	r3
   30bb4:	0003      	movs	r3, r0
   30bb6:	001a      	movs	r2, r3
   30bb8:	231c      	movs	r3, #28
   30bba:	18fb      	adds	r3, r7, r3
   30bbc:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   30bbe:	231c      	movs	r3, #28
   30bc0:	18fb      	adds	r3, r7, r3
   30bc2:	781b      	ldrb	r3, [r3, #0]
   30bc4:	071b      	lsls	r3, r3, #28
   30bc6:	0fdb      	lsrs	r3, r3, #31
   30bc8:	b2db      	uxtb	r3, r3
   30bca:	001a      	movs	r2, r3
   30bcc:	68bb      	ldr	r3, [r7, #8]
   30bce:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   30bd0:	231c      	movs	r3, #28
   30bd2:	18fb      	adds	r3, r7, r3
   30bd4:	781b      	ldrb	r3, [r3, #0]
   30bd6:	061b      	lsls	r3, r3, #24
   30bd8:	0f1b      	lsrs	r3, r3, #28
   30bda:	b2db      	uxtb	r3, r3
   30bdc:	001a      	movs	r2, r3
   30bde:	68fb      	ldr	r3, [r7, #12]
   30be0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30be2:	69bb      	ldr	r3, [r7, #24]
   30be4:	2214      	movs	r2, #20
   30be6:	18ba      	adds	r2, r7, r2
   30be8:	0011      	movs	r1, r2
   30bea:	0018      	movs	r0, r3
   30bec:	4b12      	ldr	r3, [pc, #72]	; (30c38 <MQTTDeserialize_ack+0xac>)
   30bee:	4798      	blx	r3
   30bf0:	0003      	movs	r3, r0
   30bf2:	627b      	str	r3, [r7, #36]	; 0x24
   30bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30bf6:	69bb      	ldr	r3, [r7, #24]
   30bf8:	189b      	adds	r3, r3, r2
   30bfa:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30bfc:	69bb      	ldr	r3, [r7, #24]
   30bfe:	697a      	ldr	r2, [r7, #20]
   30c00:	189b      	adds	r3, r3, r2
   30c02:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   30c04:	6a3b      	ldr	r3, [r7, #32]
   30c06:	69ba      	ldr	r2, [r7, #24]
   30c08:	1a9b      	subs	r3, r3, r2
   30c0a:	2b01      	cmp	r3, #1
   30c0c:	dd0b      	ble.n	30c26 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   30c0e:	2318      	movs	r3, #24
   30c10:	18fb      	adds	r3, r7, r3
   30c12:	0018      	movs	r0, r3
   30c14:	4b09      	ldr	r3, [pc, #36]	; (30c3c <MQTTDeserialize_ack+0xb0>)
   30c16:	4798      	blx	r3
   30c18:	0003      	movs	r3, r0
   30c1a:	b29a      	uxth	r2, r3
   30c1c:	687b      	ldr	r3, [r7, #4]
   30c1e:	801a      	strh	r2, [r3, #0]

	rc = 1;
   30c20:	2301      	movs	r3, #1
   30c22:	627b      	str	r3, [r7, #36]	; 0x24
   30c24:	e000      	b.n	30c28 <MQTTDeserialize_ack+0x9c>
		goto exit;
   30c26:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30c2a:	0018      	movs	r0, r3
   30c2c:	46bd      	mov	sp, r7
   30c2e:	b00a      	add	sp, #40	; 0x28
   30c30:	bd80      	pop	{r7, pc}
   30c32:	46c0      	nop			; (mov r8, r8)
   30c34:	00030e2f 	.word	0x00030e2f
   30c38:	00030dc9 	.word	0x00030dc9
   30c3c:	00030dfd 	.word	0x00030dfd

00030c40 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   30c40:	b580      	push	{r7, lr}
   30c42:	b084      	sub	sp, #16
   30c44:	af00      	add	r7, sp, #0
   30c46:	6078      	str	r0, [r7, #4]
   30c48:	6039      	str	r1, [r7, #0]
	int rc = 0;
   30c4a:	2300      	movs	r3, #0
   30c4c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   30c4e:	683b      	ldr	r3, [r7, #0]
   30c50:	4a17      	ldr	r2, [pc, #92]	; (30cb0 <MQTTPacket_encode+0x70>)
   30c52:	4013      	ands	r3, r2
   30c54:	d504      	bpl.n	30c60 <MQTTPacket_encode+0x20>
   30c56:	3b01      	subs	r3, #1
   30c58:	2280      	movs	r2, #128	; 0x80
   30c5a:	4252      	negs	r2, r2
   30c5c:	4313      	orrs	r3, r2
   30c5e:	3301      	adds	r3, #1
   30c60:	001a      	movs	r2, r3
   30c62:	230b      	movs	r3, #11
   30c64:	18fb      	adds	r3, r7, r3
   30c66:	701a      	strb	r2, [r3, #0]
		length /= 128;
   30c68:	683b      	ldr	r3, [r7, #0]
   30c6a:	2b00      	cmp	r3, #0
   30c6c:	da00      	bge.n	30c70 <MQTTPacket_encode+0x30>
   30c6e:	337f      	adds	r3, #127	; 0x7f
   30c70:	11db      	asrs	r3, r3, #7
   30c72:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   30c74:	683b      	ldr	r3, [r7, #0]
   30c76:	2b00      	cmp	r3, #0
   30c78:	dd08      	ble.n	30c8c <MQTTPacket_encode+0x4c>
			d |= 0x80;
   30c7a:	230b      	movs	r3, #11
   30c7c:	18fb      	adds	r3, r7, r3
   30c7e:	220b      	movs	r2, #11
   30c80:	18ba      	adds	r2, r7, r2
   30c82:	7812      	ldrb	r2, [r2, #0]
   30c84:	2180      	movs	r1, #128	; 0x80
   30c86:	4249      	negs	r1, r1
   30c88:	430a      	orrs	r2, r1
   30c8a:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   30c8c:	68fb      	ldr	r3, [r7, #12]
   30c8e:	1c5a      	adds	r2, r3, #1
   30c90:	60fa      	str	r2, [r7, #12]
   30c92:	001a      	movs	r2, r3
   30c94:	687b      	ldr	r3, [r7, #4]
   30c96:	189b      	adds	r3, r3, r2
   30c98:	220b      	movs	r2, #11
   30c9a:	18ba      	adds	r2, r7, r2
   30c9c:	7812      	ldrb	r2, [r2, #0]
   30c9e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   30ca0:	683b      	ldr	r3, [r7, #0]
   30ca2:	2b00      	cmp	r3, #0
   30ca4:	dcd3      	bgt.n	30c4e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   30ca6:	68fb      	ldr	r3, [r7, #12]
}
   30ca8:	0018      	movs	r0, r3
   30caa:	46bd      	mov	sp, r7
   30cac:	b004      	add	sp, #16
   30cae:	bd80      	pop	{r7, pc}
   30cb0:	8000007f 	.word	0x8000007f

00030cb4 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   30cb4:	b580      	push	{r7, lr}
   30cb6:	b086      	sub	sp, #24
   30cb8:	af00      	add	r7, sp, #0
   30cba:	6078      	str	r0, [r7, #4]
   30cbc:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   30cbe:	2301      	movs	r3, #1
   30cc0:	617b      	str	r3, [r7, #20]
	int len = 0;
   30cc2:	2300      	movs	r3, #0
   30cc4:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   30cc6:	683b      	ldr	r3, [r7, #0]
   30cc8:	2200      	movs	r2, #0
   30cca:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   30ccc:	2301      	movs	r3, #1
   30cce:	425b      	negs	r3, r3
   30cd0:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30cd2:	693b      	ldr	r3, [r7, #16]
   30cd4:	3301      	adds	r3, #1
   30cd6:	613b      	str	r3, [r7, #16]
   30cd8:	693b      	ldr	r3, [r7, #16]
   30cda:	2b04      	cmp	r3, #4
   30cdc:	dd03      	ble.n	30ce6 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   30cde:	2301      	movs	r3, #1
   30ce0:	425b      	negs	r3, r3
   30ce2:	60fb      	str	r3, [r7, #12]
			goto exit;
   30ce4:	e022      	b.n	30d2c <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   30ce6:	230b      	movs	r3, #11
   30ce8:	18fa      	adds	r2, r7, r3
   30cea:	687b      	ldr	r3, [r7, #4]
   30cec:	2101      	movs	r1, #1
   30cee:	0010      	movs	r0, r2
   30cf0:	4798      	blx	r3
   30cf2:	0003      	movs	r3, r0
   30cf4:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   30cf6:	68fb      	ldr	r3, [r7, #12]
   30cf8:	2b01      	cmp	r3, #1
   30cfa:	d116      	bne.n	30d2a <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   30cfc:	683b      	ldr	r3, [r7, #0]
   30cfe:	681a      	ldr	r2, [r3, #0]
   30d00:	230b      	movs	r3, #11
   30d02:	18fb      	adds	r3, r7, r3
   30d04:	781b      	ldrb	r3, [r3, #0]
   30d06:	0019      	movs	r1, r3
   30d08:	237f      	movs	r3, #127	; 0x7f
   30d0a:	400b      	ands	r3, r1
   30d0c:	6979      	ldr	r1, [r7, #20]
   30d0e:	434b      	muls	r3, r1
   30d10:	18d2      	adds	r2, r2, r3
   30d12:	683b      	ldr	r3, [r7, #0]
   30d14:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   30d16:	697b      	ldr	r3, [r7, #20]
   30d18:	01db      	lsls	r3, r3, #7
   30d1a:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   30d1c:	230b      	movs	r3, #11
   30d1e:	18fb      	adds	r3, r7, r3
   30d20:	781b      	ldrb	r3, [r3, #0]
   30d22:	b25b      	sxtb	r3, r3
   30d24:	2b00      	cmp	r3, #0
   30d26:	dbd1      	blt.n	30ccc <MQTTPacket_decode+0x18>
   30d28:	e000      	b.n	30d2c <MQTTPacket_decode+0x78>
			goto exit;
   30d2a:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   30d2c:	693b      	ldr	r3, [r7, #16]
}
   30d2e:	0018      	movs	r0, r3
   30d30:	46bd      	mov	sp, r7
   30d32:	b006      	add	sp, #24
   30d34:	bd80      	pop	{r7, pc}
	...

00030d38 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   30d38:	b580      	push	{r7, lr}
   30d3a:	b082      	sub	sp, #8
   30d3c:	af00      	add	r7, sp, #0
   30d3e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   30d40:	687b      	ldr	r3, [r7, #4]
   30d42:	3301      	adds	r3, #1
   30d44:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   30d46:	687b      	ldr	r3, [r7, #4]
   30d48:	2b7f      	cmp	r3, #127	; 0x7f
   30d4a:	dc03      	bgt.n	30d54 <MQTTPacket_len+0x1c>
		rem_len += 1;
   30d4c:	687b      	ldr	r3, [r7, #4]
   30d4e:	3301      	adds	r3, #1
   30d50:	607b      	str	r3, [r7, #4]
   30d52:	e012      	b.n	30d7a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   30d54:	687b      	ldr	r3, [r7, #4]
   30d56:	4a0b      	ldr	r2, [pc, #44]	; (30d84 <MQTTPacket_len+0x4c>)
   30d58:	4293      	cmp	r3, r2
   30d5a:	dc03      	bgt.n	30d64 <MQTTPacket_len+0x2c>
		rem_len += 2;
   30d5c:	687b      	ldr	r3, [r7, #4]
   30d5e:	3302      	adds	r3, #2
   30d60:	607b      	str	r3, [r7, #4]
   30d62:	e00a      	b.n	30d7a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   30d64:	687b      	ldr	r3, [r7, #4]
   30d66:	4a08      	ldr	r2, [pc, #32]	; (30d88 <MQTTPacket_len+0x50>)
   30d68:	4293      	cmp	r3, r2
   30d6a:	dc03      	bgt.n	30d74 <MQTTPacket_len+0x3c>
		rem_len += 3;
   30d6c:	687b      	ldr	r3, [r7, #4]
   30d6e:	3303      	adds	r3, #3
   30d70:	607b      	str	r3, [r7, #4]
   30d72:	e002      	b.n	30d7a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   30d74:	687b      	ldr	r3, [r7, #4]
   30d76:	3304      	adds	r3, #4
   30d78:	607b      	str	r3, [r7, #4]
	return rem_len;
   30d7a:	687b      	ldr	r3, [r7, #4]
}
   30d7c:	0018      	movs	r0, r3
   30d7e:	46bd      	mov	sp, r7
   30d80:	b002      	add	sp, #8
   30d82:	bd80      	pop	{r7, pc}
   30d84:	00003fff 	.word	0x00003fff
   30d88:	001ffffe 	.word	0x001ffffe

00030d8c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   30d8c:	b580      	push	{r7, lr}
   30d8e:	b084      	sub	sp, #16
   30d90:	af00      	add	r7, sp, #0
   30d92:	6078      	str	r0, [r7, #4]
   30d94:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   30d96:	2300      	movs	r3, #0
   30d98:	60fb      	str	r3, [r7, #12]
   30d9a:	e00a      	b.n	30db2 <bufchar+0x26>
		*c = *bufptr++;
   30d9c:	4b09      	ldr	r3, [pc, #36]	; (30dc4 <bufchar+0x38>)
   30d9e:	681b      	ldr	r3, [r3, #0]
   30da0:	1c59      	adds	r1, r3, #1
   30da2:	4a08      	ldr	r2, [pc, #32]	; (30dc4 <bufchar+0x38>)
   30da4:	6011      	str	r1, [r2, #0]
   30da6:	781a      	ldrb	r2, [r3, #0]
   30da8:	687b      	ldr	r3, [r7, #4]
   30daa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   30dac:	68fb      	ldr	r3, [r7, #12]
   30dae:	3301      	adds	r3, #1
   30db0:	60fb      	str	r3, [r7, #12]
   30db2:	68fa      	ldr	r2, [r7, #12]
   30db4:	683b      	ldr	r3, [r7, #0]
   30db6:	429a      	cmp	r2, r3
   30db8:	dbf0      	blt.n	30d9c <bufchar+0x10>
	return count;
   30dba:	683b      	ldr	r3, [r7, #0]
}
   30dbc:	0018      	movs	r0, r3
   30dbe:	46bd      	mov	sp, r7
   30dc0:	b004      	add	sp, #16
   30dc2:	bd80      	pop	{r7, pc}
   30dc4:	20004328 	.word	0x20004328

00030dc8 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   30dc8:	b580      	push	{r7, lr}
   30dca:	b082      	sub	sp, #8
   30dcc:	af00      	add	r7, sp, #0
   30dce:	6078      	str	r0, [r7, #4]
   30dd0:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   30dd2:	4b07      	ldr	r3, [pc, #28]	; (30df0 <MQTTPacket_decodeBuf+0x28>)
   30dd4:	687a      	ldr	r2, [r7, #4]
   30dd6:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   30dd8:	683a      	ldr	r2, [r7, #0]
   30dda:	4b06      	ldr	r3, [pc, #24]	; (30df4 <MQTTPacket_decodeBuf+0x2c>)
   30ddc:	0011      	movs	r1, r2
   30dde:	0018      	movs	r0, r3
   30de0:	4b05      	ldr	r3, [pc, #20]	; (30df8 <MQTTPacket_decodeBuf+0x30>)
   30de2:	4798      	blx	r3
   30de4:	0003      	movs	r3, r0
}
   30de6:	0018      	movs	r0, r3
   30de8:	46bd      	mov	sp, r7
   30dea:	b002      	add	sp, #8
   30dec:	bd80      	pop	{r7, pc}
   30dee:	46c0      	nop			; (mov r8, r8)
   30df0:	20004328 	.word	0x20004328
   30df4:	00030d8d 	.word	0x00030d8d
   30df8:	00030cb5 	.word	0x00030cb5

00030dfc <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   30dfc:	b580      	push	{r7, lr}
   30dfe:	b084      	sub	sp, #16
   30e00:	af00      	add	r7, sp, #0
   30e02:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   30e04:	687b      	ldr	r3, [r7, #4]
   30e06:	681b      	ldr	r3, [r3, #0]
   30e08:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   30e0a:	68fb      	ldr	r3, [r7, #12]
   30e0c:	781b      	ldrb	r3, [r3, #0]
   30e0e:	021b      	lsls	r3, r3, #8
   30e10:	68fa      	ldr	r2, [r7, #12]
   30e12:	3201      	adds	r2, #1
   30e14:	7812      	ldrb	r2, [r2, #0]
   30e16:	189b      	adds	r3, r3, r2
   30e18:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   30e1a:	687b      	ldr	r3, [r7, #4]
   30e1c:	681b      	ldr	r3, [r3, #0]
   30e1e:	1c9a      	adds	r2, r3, #2
   30e20:	687b      	ldr	r3, [r7, #4]
   30e22:	601a      	str	r2, [r3, #0]
	return len;
   30e24:	68bb      	ldr	r3, [r7, #8]
}
   30e26:	0018      	movs	r0, r3
   30e28:	46bd      	mov	sp, r7
   30e2a:	b004      	add	sp, #16
   30e2c:	bd80      	pop	{r7, pc}

00030e2e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   30e2e:	b580      	push	{r7, lr}
   30e30:	b084      	sub	sp, #16
   30e32:	af00      	add	r7, sp, #0
   30e34:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   30e36:	687b      	ldr	r3, [r7, #4]
   30e38:	681a      	ldr	r2, [r3, #0]
   30e3a:	230f      	movs	r3, #15
   30e3c:	18fb      	adds	r3, r7, r3
   30e3e:	7812      	ldrb	r2, [r2, #0]
   30e40:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   30e42:	687b      	ldr	r3, [r7, #4]
   30e44:	681b      	ldr	r3, [r3, #0]
   30e46:	1c5a      	adds	r2, r3, #1
   30e48:	687b      	ldr	r3, [r7, #4]
   30e4a:	601a      	str	r2, [r3, #0]
	return c;
   30e4c:	230f      	movs	r3, #15
   30e4e:	18fb      	adds	r3, r7, r3
   30e50:	781b      	ldrb	r3, [r3, #0]
}
   30e52:	0018      	movs	r0, r3
   30e54:	46bd      	mov	sp, r7
   30e56:	b004      	add	sp, #16
   30e58:	bd80      	pop	{r7, pc}

00030e5a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   30e5a:	b580      	push	{r7, lr}
   30e5c:	b082      	sub	sp, #8
   30e5e:	af00      	add	r7, sp, #0
   30e60:	6078      	str	r0, [r7, #4]
   30e62:	000a      	movs	r2, r1
   30e64:	1cfb      	adds	r3, r7, #3
   30e66:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   30e68:	687b      	ldr	r3, [r7, #4]
   30e6a:	681b      	ldr	r3, [r3, #0]
   30e6c:	1cfa      	adds	r2, r7, #3
   30e6e:	7812      	ldrb	r2, [r2, #0]
   30e70:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   30e72:	687b      	ldr	r3, [r7, #4]
   30e74:	681b      	ldr	r3, [r3, #0]
   30e76:	1c5a      	adds	r2, r3, #1
   30e78:	687b      	ldr	r3, [r7, #4]
   30e7a:	601a      	str	r2, [r3, #0]
}
   30e7c:	46c0      	nop			; (mov r8, r8)
   30e7e:	46bd      	mov	sp, r7
   30e80:	b002      	add	sp, #8
   30e82:	bd80      	pop	{r7, pc}

00030e84 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   30e84:	b580      	push	{r7, lr}
   30e86:	b082      	sub	sp, #8
   30e88:	af00      	add	r7, sp, #0
   30e8a:	6078      	str	r0, [r7, #4]
   30e8c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   30e8e:	687b      	ldr	r3, [r7, #4]
   30e90:	681a      	ldr	r2, [r3, #0]
   30e92:	683b      	ldr	r3, [r7, #0]
   30e94:	2b00      	cmp	r3, #0
   30e96:	da00      	bge.n	30e9a <writeInt+0x16>
   30e98:	33ff      	adds	r3, #255	; 0xff
   30e9a:	121b      	asrs	r3, r3, #8
   30e9c:	b2db      	uxtb	r3, r3
   30e9e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   30ea0:	687b      	ldr	r3, [r7, #4]
   30ea2:	681b      	ldr	r3, [r3, #0]
   30ea4:	1c5a      	adds	r2, r3, #1
   30ea6:	687b      	ldr	r3, [r7, #4]
   30ea8:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   30eaa:	687b      	ldr	r3, [r7, #4]
   30eac:	681a      	ldr	r2, [r3, #0]
   30eae:	683b      	ldr	r3, [r7, #0]
   30eb0:	4908      	ldr	r1, [pc, #32]	; (30ed4 <writeInt+0x50>)
   30eb2:	400b      	ands	r3, r1
   30eb4:	d503      	bpl.n	30ebe <writeInt+0x3a>
   30eb6:	3b01      	subs	r3, #1
   30eb8:	4907      	ldr	r1, [pc, #28]	; (30ed8 <writeInt+0x54>)
   30eba:	430b      	orrs	r3, r1
   30ebc:	3301      	adds	r3, #1
   30ebe:	b2db      	uxtb	r3, r3
   30ec0:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   30ec2:	687b      	ldr	r3, [r7, #4]
   30ec4:	681b      	ldr	r3, [r3, #0]
   30ec6:	1c5a      	adds	r2, r3, #1
   30ec8:	687b      	ldr	r3, [r7, #4]
   30eca:	601a      	str	r2, [r3, #0]
}
   30ecc:	46c0      	nop			; (mov r8, r8)
   30ece:	46bd      	mov	sp, r7
   30ed0:	b002      	add	sp, #8
   30ed2:	bd80      	pop	{r7, pc}
   30ed4:	800000ff 	.word	0x800000ff
   30ed8:	ffffff00 	.word	0xffffff00

00030edc <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   30edc:	b580      	push	{r7, lr}
   30ede:	b084      	sub	sp, #16
   30ee0:	af00      	add	r7, sp, #0
   30ee2:	6078      	str	r0, [r7, #4]
   30ee4:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   30ee6:	683b      	ldr	r3, [r7, #0]
   30ee8:	0018      	movs	r0, r3
   30eea:	4b0d      	ldr	r3, [pc, #52]	; (30f20 <writeCString+0x44>)
   30eec:	4798      	blx	r3
   30eee:	0003      	movs	r3, r0
   30ef0:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   30ef2:	68fa      	ldr	r2, [r7, #12]
   30ef4:	687b      	ldr	r3, [r7, #4]
   30ef6:	0011      	movs	r1, r2
   30ef8:	0018      	movs	r0, r3
   30efa:	4b0a      	ldr	r3, [pc, #40]	; (30f24 <writeCString+0x48>)
   30efc:	4798      	blx	r3
	memcpy(*pptr, string, len);
   30efe:	687b      	ldr	r3, [r7, #4]
   30f00:	681b      	ldr	r3, [r3, #0]
   30f02:	68fa      	ldr	r2, [r7, #12]
   30f04:	6839      	ldr	r1, [r7, #0]
   30f06:	0018      	movs	r0, r3
   30f08:	4b07      	ldr	r3, [pc, #28]	; (30f28 <writeCString+0x4c>)
   30f0a:	4798      	blx	r3
	*pptr += len;
   30f0c:	687b      	ldr	r3, [r7, #4]
   30f0e:	681a      	ldr	r2, [r3, #0]
   30f10:	68fb      	ldr	r3, [r7, #12]
   30f12:	18d2      	adds	r2, r2, r3
   30f14:	687b      	ldr	r3, [r7, #4]
   30f16:	601a      	str	r2, [r3, #0]
}
   30f18:	46c0      	nop			; (mov r8, r8)
   30f1a:	46bd      	mov	sp, r7
   30f1c:	b004      	add	sp, #16
   30f1e:	bd80      	pop	{r7, pc}
   30f20:	000358fb 	.word	0x000358fb
   30f24:	00030e85 	.word	0x00030e85
   30f28:	0003550d 	.word	0x0003550d

00030f2c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   30f2c:	b580      	push	{r7, lr}
   30f2e:	b084      	sub	sp, #16
   30f30:	af00      	add	r7, sp, #0
   30f32:	60f8      	str	r0, [r7, #12]
   30f34:	0038      	movs	r0, r7
   30f36:	6001      	str	r1, [r0, #0]
   30f38:	6042      	str	r2, [r0, #4]
   30f3a:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   30f3c:	003b      	movs	r3, r7
   30f3e:	685b      	ldr	r3, [r3, #4]
   30f40:	2b00      	cmp	r3, #0
   30f42:	dd17      	ble.n	30f74 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   30f44:	003b      	movs	r3, r7
   30f46:	685a      	ldr	r2, [r3, #4]
   30f48:	68fb      	ldr	r3, [r7, #12]
   30f4a:	0011      	movs	r1, r2
   30f4c:	0018      	movs	r0, r3
   30f4e:	4b14      	ldr	r3, [pc, #80]	; (30fa0 <writeMQTTString+0x74>)
   30f50:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   30f52:	68fb      	ldr	r3, [r7, #12]
   30f54:	6818      	ldr	r0, [r3, #0]
   30f56:	003b      	movs	r3, r7
   30f58:	6899      	ldr	r1, [r3, #8]
   30f5a:	003b      	movs	r3, r7
   30f5c:	685b      	ldr	r3, [r3, #4]
   30f5e:	001a      	movs	r2, r3
   30f60:	4b10      	ldr	r3, [pc, #64]	; (30fa4 <writeMQTTString+0x78>)
   30f62:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   30f64:	68fb      	ldr	r3, [r7, #12]
   30f66:	681a      	ldr	r2, [r3, #0]
   30f68:	003b      	movs	r3, r7
   30f6a:	685b      	ldr	r3, [r3, #4]
   30f6c:	18d2      	adds	r2, r2, r3
   30f6e:	68fb      	ldr	r3, [r7, #12]
   30f70:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   30f72:	e010      	b.n	30f96 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   30f74:	003b      	movs	r3, r7
   30f76:	681b      	ldr	r3, [r3, #0]
   30f78:	2b00      	cmp	r3, #0
   30f7a:	d007      	beq.n	30f8c <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   30f7c:	003b      	movs	r3, r7
   30f7e:	681a      	ldr	r2, [r3, #0]
   30f80:	68fb      	ldr	r3, [r7, #12]
   30f82:	0011      	movs	r1, r2
   30f84:	0018      	movs	r0, r3
   30f86:	4b08      	ldr	r3, [pc, #32]	; (30fa8 <writeMQTTString+0x7c>)
   30f88:	4798      	blx	r3
}
   30f8a:	e004      	b.n	30f96 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   30f8c:	68fb      	ldr	r3, [r7, #12]
   30f8e:	2100      	movs	r1, #0
   30f90:	0018      	movs	r0, r3
   30f92:	4b03      	ldr	r3, [pc, #12]	; (30fa0 <writeMQTTString+0x74>)
   30f94:	4798      	blx	r3
}
   30f96:	46c0      	nop			; (mov r8, r8)
   30f98:	46bd      	mov	sp, r7
   30f9a:	b004      	add	sp, #16
   30f9c:	bd80      	pop	{r7, pc}
   30f9e:	46c0      	nop			; (mov r8, r8)
   30fa0:	00030e85 	.word	0x00030e85
   30fa4:	0003550d 	.word	0x0003550d
   30fa8:	00030edd 	.word	0x00030edd

00030fac <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   30fac:	b580      	push	{r7, lr}
   30fae:	b086      	sub	sp, #24
   30fb0:	af00      	add	r7, sp, #0
   30fb2:	60f8      	str	r0, [r7, #12]
   30fb4:	60b9      	str	r1, [r7, #8]
   30fb6:	607a      	str	r2, [r7, #4]
	int rc = 0;
   30fb8:	2300      	movs	r3, #0
   30fba:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   30fbc:	687a      	ldr	r2, [r7, #4]
   30fbe:	68bb      	ldr	r3, [r7, #8]
   30fc0:	681b      	ldr	r3, [r3, #0]
   30fc2:	1ad3      	subs	r3, r2, r3
   30fc4:	2b01      	cmp	r3, #1
   30fc6:	dd1b      	ble.n	31000 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   30fc8:	68bb      	ldr	r3, [r7, #8]
   30fca:	0018      	movs	r0, r3
   30fcc:	4b10      	ldr	r3, [pc, #64]	; (31010 <readMQTTLenString+0x64>)
   30fce:	4798      	blx	r3
   30fd0:	0002      	movs	r2, r0
   30fd2:	68fb      	ldr	r3, [r7, #12]
   30fd4:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   30fd6:	68bb      	ldr	r3, [r7, #8]
   30fd8:	681a      	ldr	r2, [r3, #0]
   30fda:	68fb      	ldr	r3, [r7, #12]
   30fdc:	685b      	ldr	r3, [r3, #4]
   30fde:	18d2      	adds	r2, r2, r3
   30fe0:	687b      	ldr	r3, [r7, #4]
   30fe2:	429a      	cmp	r2, r3
   30fe4:	d80c      	bhi.n	31000 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   30fe6:	68bb      	ldr	r3, [r7, #8]
   30fe8:	681a      	ldr	r2, [r3, #0]
   30fea:	68fb      	ldr	r3, [r7, #12]
   30fec:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   30fee:	68bb      	ldr	r3, [r7, #8]
   30ff0:	681a      	ldr	r2, [r3, #0]
   30ff2:	68fb      	ldr	r3, [r7, #12]
   30ff4:	685b      	ldr	r3, [r3, #4]
   30ff6:	18d2      	adds	r2, r2, r3
   30ff8:	68bb      	ldr	r3, [r7, #8]
   30ffa:	601a      	str	r2, [r3, #0]
			rc = 1;
   30ffc:	2301      	movs	r3, #1
   30ffe:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   31000:	68fb      	ldr	r3, [r7, #12]
   31002:	2200      	movs	r2, #0
   31004:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   31006:	697b      	ldr	r3, [r7, #20]
}
   31008:	0018      	movs	r0, r3
   3100a:	46bd      	mov	sp, r7
   3100c:	b006      	add	sp, #24
   3100e:	bd80      	pop	{r7, pc}
   31010:	00030dfd 	.word	0x00030dfd

00031014 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   31014:	b580      	push	{r7, lr}
   31016:	b086      	sub	sp, #24
   31018:	af00      	add	r7, sp, #0
   3101a:	1d3b      	adds	r3, r7, #4
   3101c:	6018      	str	r0, [r3, #0]
   3101e:	6059      	str	r1, [r3, #4]
   31020:	609a      	str	r2, [r3, #8]
	int rc = 0;
   31022:	2300      	movs	r3, #0
   31024:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   31026:	1d3b      	adds	r3, r7, #4
   31028:	681b      	ldr	r3, [r3, #0]
   3102a:	2b00      	cmp	r3, #0
   3102c:	d007      	beq.n	3103e <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   3102e:	1d3b      	adds	r3, r7, #4
   31030:	681b      	ldr	r3, [r3, #0]
   31032:	0018      	movs	r0, r3
   31034:	4b06      	ldr	r3, [pc, #24]	; (31050 <MQTTstrlen+0x3c>)
   31036:	4798      	blx	r3
   31038:	0003      	movs	r3, r0
   3103a:	617b      	str	r3, [r7, #20]
   3103c:	e002      	b.n	31044 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   3103e:	1d3b      	adds	r3, r7, #4
   31040:	685b      	ldr	r3, [r3, #4]
   31042:	617b      	str	r3, [r7, #20]
	return rc;
   31044:	697b      	ldr	r3, [r7, #20]
}
   31046:	0018      	movs	r0, r3
   31048:	46bd      	mov	sp, r7
   3104a:	b006      	add	sp, #24
   3104c:	bd80      	pop	{r7, pc}
   3104e:	46c0      	nop			; (mov r8, r8)
   31050:	000358fb 	.word	0x000358fb

00031054 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   31054:	b580      	push	{r7, lr}
   31056:	b086      	sub	sp, #24
   31058:	af00      	add	r7, sp, #0
   3105a:	6078      	str	r0, [r7, #4]
   3105c:	6039      	str	r1, [r7, #0]
	int alen = 0,
   3105e:	2300      	movs	r3, #0
   31060:	617b      	str	r3, [r7, #20]
		blen = 0;
   31062:	2300      	movs	r3, #0
   31064:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   31066:	687b      	ldr	r3, [r7, #4]
   31068:	681b      	ldr	r3, [r3, #0]
   3106a:	2b00      	cmp	r3, #0
   3106c:	d00a      	beq.n	31084 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   3106e:	687b      	ldr	r3, [r7, #4]
   31070:	681b      	ldr	r3, [r3, #0]
   31072:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   31074:	687b      	ldr	r3, [r7, #4]
   31076:	681b      	ldr	r3, [r3, #0]
   31078:	0018      	movs	r0, r3
   3107a:	4b12      	ldr	r3, [pc, #72]	; (310c4 <MQTTPacket_equals+0x70>)
   3107c:	4798      	blx	r3
   3107e:	0003      	movs	r3, r0
   31080:	617b      	str	r3, [r7, #20]
   31082:	e005      	b.n	31090 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   31084:	687b      	ldr	r3, [r7, #4]
   31086:	689b      	ldr	r3, [r3, #8]
   31088:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   3108a:	687b      	ldr	r3, [r7, #4]
   3108c:	685b      	ldr	r3, [r3, #4]
   3108e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   31090:	683b      	ldr	r3, [r7, #0]
   31092:	0018      	movs	r0, r3
   31094:	4b0b      	ldr	r3, [pc, #44]	; (310c4 <MQTTPacket_equals+0x70>)
   31096:	4798      	blx	r3
   31098:	0003      	movs	r3, r0
   3109a:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   3109c:	697a      	ldr	r2, [r7, #20]
   3109e:	68fb      	ldr	r3, [r7, #12]
   310a0:	429a      	cmp	r2, r3
   310a2:	d109      	bne.n	310b8 <MQTTPacket_equals+0x64>
   310a4:	697a      	ldr	r2, [r7, #20]
   310a6:	6839      	ldr	r1, [r7, #0]
   310a8:	693b      	ldr	r3, [r7, #16]
   310aa:	0018      	movs	r0, r3
   310ac:	4b06      	ldr	r3, [pc, #24]	; (310c8 <MQTTPacket_equals+0x74>)
   310ae:	4798      	blx	r3
   310b0:	1e03      	subs	r3, r0, #0
   310b2:	d101      	bne.n	310b8 <MQTTPacket_equals+0x64>
   310b4:	2301      	movs	r3, #1
   310b6:	e000      	b.n	310ba <MQTTPacket_equals+0x66>
   310b8:	2300      	movs	r3, #0
}
   310ba:	0018      	movs	r0, r3
   310bc:	46bd      	mov	sp, r7
   310be:	b006      	add	sp, #24
   310c0:	bd80      	pop	{r7, pc}
   310c2:	46c0      	nop			; (mov r8, r8)
   310c4:	000358fb 	.word	0x000358fb
   310c8:	00035909 	.word	0x00035909

000310cc <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   310cc:	b580      	push	{r7, lr}
   310ce:	b086      	sub	sp, #24
   310d0:	af00      	add	r7, sp, #0
   310d2:	60f8      	str	r0, [r7, #12]
   310d4:	0038      	movs	r0, r7
   310d6:	6001      	str	r1, [r0, #0]
   310d8:	6042      	str	r2, [r0, #4]
   310da:	6083      	str	r3, [r0, #8]
	int len = 0;
   310dc:	2300      	movs	r3, #0
   310de:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   310e0:	003b      	movs	r3, r7
   310e2:	6818      	ldr	r0, [r3, #0]
   310e4:	6859      	ldr	r1, [r3, #4]
   310e6:	689a      	ldr	r2, [r3, #8]
   310e8:	4b09      	ldr	r3, [pc, #36]	; (31110 <MQTTSerialize_publishLength+0x44>)
   310ea:	4798      	blx	r3
   310ec:	0003      	movs	r3, r0
   310ee:	1c9a      	adds	r2, r3, #2
   310f0:	6a3b      	ldr	r3, [r7, #32]
   310f2:	18d3      	adds	r3, r2, r3
   310f4:	697a      	ldr	r2, [r7, #20]
   310f6:	18d3      	adds	r3, r2, r3
   310f8:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   310fa:	68fb      	ldr	r3, [r7, #12]
   310fc:	2b00      	cmp	r3, #0
   310fe:	dd02      	ble.n	31106 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   31100:	697b      	ldr	r3, [r7, #20]
   31102:	3302      	adds	r3, #2
   31104:	617b      	str	r3, [r7, #20]
	return len;
   31106:	697b      	ldr	r3, [r7, #20]
}
   31108:	0018      	movs	r0, r3
   3110a:	46bd      	mov	sp, r7
   3110c:	b006      	add	sp, #24
   3110e:	bd80      	pop	{r7, pc}
   31110:	00031015 	.word	0x00031015

00031114 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   31114:	b590      	push	{r4, r7, lr}
   31116:	b08b      	sub	sp, #44	; 0x2c
   31118:	af02      	add	r7, sp, #8
   3111a:	60f8      	str	r0, [r7, #12]
   3111c:	60b9      	str	r1, [r7, #8]
   3111e:	603b      	str	r3, [r7, #0]
   31120:	1dfb      	adds	r3, r7, #7
   31122:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   31124:	68fb      	ldr	r3, [r7, #12]
   31126:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   31128:	2300      	movs	r3, #0
   3112a:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   3112c:	2300      	movs	r3, #0
   3112e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   31130:	2300      	movs	r3, #0
   31132:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   31134:	2308      	movs	r3, #8
   31136:	2230      	movs	r2, #48	; 0x30
   31138:	4694      	mov	ip, r2
   3113a:	44bc      	add	ip, r7
   3113c:	4463      	add	r3, ip
   3113e:	6838      	ldr	r0, [r7, #0]
   31140:	6cba      	ldr	r2, [r7, #72]	; 0x48
   31142:	9200      	str	r2, [sp, #0]
   31144:	6819      	ldr	r1, [r3, #0]
   31146:	685a      	ldr	r2, [r3, #4]
   31148:	689b      	ldr	r3, [r3, #8]
   3114a:	4c46      	ldr	r4, [pc, #280]	; (31264 <MQTTSerialize_publish+0x150>)
   3114c:	47a0      	blx	r4
   3114e:	0003      	movs	r3, r0
   31150:	61bb      	str	r3, [r7, #24]
   31152:	69bb      	ldr	r3, [r7, #24]
   31154:	0018      	movs	r0, r3
   31156:	4b44      	ldr	r3, [pc, #272]	; (31268 <MQTTSerialize_publish+0x154>)
   31158:	4798      	blx	r3
   3115a:	0002      	movs	r2, r0
   3115c:	68bb      	ldr	r3, [r7, #8]
   3115e:	429a      	cmp	r2, r3
   31160:	dd03      	ble.n	3116a <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   31162:	2302      	movs	r3, #2
   31164:	425b      	negs	r3, r3
   31166:	61fb      	str	r3, [r7, #28]
		goto exit;
   31168:	e077      	b.n	3125a <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   3116a:	2310      	movs	r3, #16
   3116c:	18fb      	adds	r3, r7, r3
   3116e:	781a      	ldrb	r2, [r3, #0]
   31170:	210f      	movs	r1, #15
   31172:	400a      	ands	r2, r1
   31174:	1c11      	adds	r1, r2, #0
   31176:	2230      	movs	r2, #48	; 0x30
   31178:	430a      	orrs	r2, r1
   3117a:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3117c:	1dfb      	adds	r3, r7, #7
   3117e:	781b      	ldrb	r3, [r3, #0]
   31180:	2201      	movs	r2, #1
   31182:	4013      	ands	r3, r2
   31184:	b2da      	uxtb	r2, r3
   31186:	2310      	movs	r3, #16
   31188:	18fb      	adds	r3, r7, r3
   3118a:	2101      	movs	r1, #1
   3118c:	400a      	ands	r2, r1
   3118e:	00d0      	lsls	r0, r2, #3
   31190:	781a      	ldrb	r2, [r3, #0]
   31192:	2108      	movs	r1, #8
   31194:	438a      	bics	r2, r1
   31196:	1c11      	adds	r1, r2, #0
   31198:	1c02      	adds	r2, r0, #0
   3119a:	430a      	orrs	r2, r1
   3119c:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   3119e:	683b      	ldr	r3, [r7, #0]
   311a0:	b2db      	uxtb	r3, r3
   311a2:	1c1a      	adds	r2, r3, #0
   311a4:	2303      	movs	r3, #3
   311a6:	4013      	ands	r3, r2
   311a8:	b2da      	uxtb	r2, r3
   311aa:	2310      	movs	r3, #16
   311ac:	18fb      	adds	r3, r7, r3
   311ae:	2103      	movs	r1, #3
   311b0:	400a      	ands	r2, r1
   311b2:	1890      	adds	r0, r2, r2
   311b4:	781a      	ldrb	r2, [r3, #0]
   311b6:	2106      	movs	r1, #6
   311b8:	438a      	bics	r2, r1
   311ba:	1c11      	adds	r1, r2, #0
   311bc:	1c02      	adds	r2, r0, #0
   311be:	430a      	orrs	r2, r1
   311c0:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   311c2:	2330      	movs	r3, #48	; 0x30
   311c4:	18fb      	adds	r3, r7, r3
   311c6:	781b      	ldrb	r3, [r3, #0]
   311c8:	2201      	movs	r2, #1
   311ca:	4013      	ands	r3, r2
   311cc:	b2da      	uxtb	r2, r3
   311ce:	2310      	movs	r3, #16
   311d0:	18fb      	adds	r3, r7, r3
   311d2:	2101      	movs	r1, #1
   311d4:	400a      	ands	r2, r1
   311d6:	0010      	movs	r0, r2
   311d8:	781a      	ldrb	r2, [r3, #0]
   311da:	2101      	movs	r1, #1
   311dc:	438a      	bics	r2, r1
   311de:	1c11      	adds	r1, r2, #0
   311e0:	1c02      	adds	r2, r0, #0
   311e2:	430a      	orrs	r2, r1
   311e4:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   311e6:	2310      	movs	r3, #16
   311e8:	18fb      	adds	r3, r7, r3
   311ea:	781a      	ldrb	r2, [r3, #0]
   311ec:	2314      	movs	r3, #20
   311ee:	18fb      	adds	r3, r7, r3
   311f0:	0011      	movs	r1, r2
   311f2:	0018      	movs	r0, r3
   311f4:	4b1d      	ldr	r3, [pc, #116]	; (3126c <MQTTSerialize_publish+0x158>)
   311f6:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   311f8:	697b      	ldr	r3, [r7, #20]
   311fa:	69ba      	ldr	r2, [r7, #24]
   311fc:	0011      	movs	r1, r2
   311fe:	0018      	movs	r0, r3
   31200:	4b1b      	ldr	r3, [pc, #108]	; (31270 <MQTTSerialize_publish+0x15c>)
   31202:	4798      	blx	r3
   31204:	0002      	movs	r2, r0
   31206:	697b      	ldr	r3, [r7, #20]
   31208:	189b      	adds	r3, r3, r2
   3120a:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   3120c:	2308      	movs	r3, #8
   3120e:	2230      	movs	r2, #48	; 0x30
   31210:	4694      	mov	ip, r2
   31212:	44bc      	add	ip, r7
   31214:	4463      	add	r3, ip
   31216:	2214      	movs	r2, #20
   31218:	18b8      	adds	r0, r7, r2
   3121a:	6819      	ldr	r1, [r3, #0]
   3121c:	685a      	ldr	r2, [r3, #4]
   3121e:	689b      	ldr	r3, [r3, #8]
   31220:	4c14      	ldr	r4, [pc, #80]	; (31274 <MQTTSerialize_publish+0x160>)
   31222:	47a0      	blx	r4

	if (qos > 0)
   31224:	683b      	ldr	r3, [r7, #0]
   31226:	2b00      	cmp	r3, #0
   31228:	dd08      	ble.n	3123c <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   3122a:	2334      	movs	r3, #52	; 0x34
   3122c:	18fb      	adds	r3, r7, r3
   3122e:	881a      	ldrh	r2, [r3, #0]
   31230:	2314      	movs	r3, #20
   31232:	18fb      	adds	r3, r7, r3
   31234:	0011      	movs	r1, r2
   31236:	0018      	movs	r0, r3
   31238:	4b0f      	ldr	r3, [pc, #60]	; (31278 <MQTTSerialize_publish+0x164>)
   3123a:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   3123c:	697b      	ldr	r3, [r7, #20]
   3123e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   31240:	6c79      	ldr	r1, [r7, #68]	; 0x44
   31242:	0018      	movs	r0, r3
   31244:	4b0d      	ldr	r3, [pc, #52]	; (3127c <MQTTSerialize_publish+0x168>)
   31246:	4798      	blx	r3
	ptr += payloadlen;
   31248:	697a      	ldr	r2, [r7, #20]
   3124a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3124c:	18d3      	adds	r3, r2, r3
   3124e:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   31250:	697b      	ldr	r3, [r7, #20]
   31252:	001a      	movs	r2, r3
   31254:	68fb      	ldr	r3, [r7, #12]
   31256:	1ad3      	subs	r3, r2, r3
   31258:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3125a:	69fb      	ldr	r3, [r7, #28]
}
   3125c:	0018      	movs	r0, r3
   3125e:	46bd      	mov	sp, r7
   31260:	b009      	add	sp, #36	; 0x24
   31262:	bd90      	pop	{r4, r7, pc}
   31264:	000310cd 	.word	0x000310cd
   31268:	00030d39 	.word	0x00030d39
   3126c:	00030e5b 	.word	0x00030e5b
   31270:	00030c41 	.word	0x00030c41
   31274:	00030f2d 	.word	0x00030f2d
   31278:	00030e85 	.word	0x00030e85
   3127c:	0003550d 	.word	0x0003550d

00031280 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   31280:	b580      	push	{r7, lr}
   31282:	b088      	sub	sp, #32
   31284:	af00      	add	r7, sp, #0
   31286:	60f8      	str	r0, [r7, #12]
   31288:	60b9      	str	r1, [r7, #8]
   3128a:	0019      	movs	r1, r3
   3128c:	1dfb      	adds	r3, r7, #7
   3128e:	701a      	strb	r2, [r3, #0]
   31290:	1dbb      	adds	r3, r7, #6
   31292:	1c0a      	adds	r2, r1, #0
   31294:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   31296:	2300      	movs	r3, #0
   31298:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   3129a:	2300      	movs	r3, #0
   3129c:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   3129e:	68fb      	ldr	r3, [r7, #12]
   312a0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   312a2:	68bb      	ldr	r3, [r7, #8]
   312a4:	2b03      	cmp	r3, #3
   312a6:	dc03      	bgt.n	312b0 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   312a8:	2302      	movs	r3, #2
   312aa:	425b      	negs	r3, r3
   312ac:	61fb      	str	r3, [r7, #28]
		goto exit;
   312ae:	e055      	b.n	3135c <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   312b0:	1dfb      	adds	r3, r7, #7
   312b2:	781b      	ldrb	r3, [r3, #0]
   312b4:	220f      	movs	r2, #15
   312b6:	4013      	ands	r3, r2
   312b8:	b2da      	uxtb	r2, r3
   312ba:	2318      	movs	r3, #24
   312bc:	18fb      	adds	r3, r7, r3
   312be:	0110      	lsls	r0, r2, #4
   312c0:	781a      	ldrb	r2, [r3, #0]
   312c2:	210f      	movs	r1, #15
   312c4:	400a      	ands	r2, r1
   312c6:	1c11      	adds	r1, r2, #0
   312c8:	1c02      	adds	r2, r0, #0
   312ca:	430a      	orrs	r2, r1
   312cc:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   312ce:	1dbb      	adds	r3, r7, #6
   312d0:	781b      	ldrb	r3, [r3, #0]
   312d2:	2201      	movs	r2, #1
   312d4:	4013      	ands	r3, r2
   312d6:	b2da      	uxtb	r2, r3
   312d8:	2318      	movs	r3, #24
   312da:	18fb      	adds	r3, r7, r3
   312dc:	2101      	movs	r1, #1
   312de:	400a      	ands	r2, r1
   312e0:	00d0      	lsls	r0, r2, #3
   312e2:	781a      	ldrb	r2, [r3, #0]
   312e4:	2108      	movs	r1, #8
   312e6:	438a      	bics	r2, r1
   312e8:	1c11      	adds	r1, r2, #0
   312ea:	1c02      	adds	r2, r0, #0
   312ec:	430a      	orrs	r2, r1
   312ee:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   312f0:	1dfb      	adds	r3, r7, #7
   312f2:	781b      	ldrb	r3, [r3, #0]
   312f4:	3b06      	subs	r3, #6
   312f6:	425a      	negs	r2, r3
   312f8:	4153      	adcs	r3, r2
   312fa:	b2db      	uxtb	r3, r3
   312fc:	1c1a      	adds	r2, r3, #0
   312fe:	2303      	movs	r3, #3
   31300:	4013      	ands	r3, r2
   31302:	b2da      	uxtb	r2, r3
   31304:	2318      	movs	r3, #24
   31306:	18fb      	adds	r3, r7, r3
   31308:	2103      	movs	r1, #3
   3130a:	400a      	ands	r2, r1
   3130c:	1890      	adds	r0, r2, r2
   3130e:	781a      	ldrb	r2, [r3, #0]
   31310:	2106      	movs	r1, #6
   31312:	438a      	bics	r2, r1
   31314:	1c11      	adds	r1, r2, #0
   31316:	1c02      	adds	r2, r0, #0
   31318:	430a      	orrs	r2, r1
   3131a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3131c:	2318      	movs	r3, #24
   3131e:	18fb      	adds	r3, r7, r3
   31320:	781a      	ldrb	r2, [r3, #0]
   31322:	2314      	movs	r3, #20
   31324:	18fb      	adds	r3, r7, r3
   31326:	0011      	movs	r1, r2
   31328:	0018      	movs	r0, r3
   3132a:	4b0f      	ldr	r3, [pc, #60]	; (31368 <MQTTSerialize_ack+0xe8>)
   3132c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   3132e:	697b      	ldr	r3, [r7, #20]
   31330:	2102      	movs	r1, #2
   31332:	0018      	movs	r0, r3
   31334:	4b0d      	ldr	r3, [pc, #52]	; (3136c <MQTTSerialize_ack+0xec>)
   31336:	4798      	blx	r3
   31338:	0002      	movs	r2, r0
   3133a:	697b      	ldr	r3, [r7, #20]
   3133c:	189b      	adds	r3, r3, r2
   3133e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   31340:	2328      	movs	r3, #40	; 0x28
   31342:	18fb      	adds	r3, r7, r3
   31344:	881a      	ldrh	r2, [r3, #0]
   31346:	2314      	movs	r3, #20
   31348:	18fb      	adds	r3, r7, r3
   3134a:	0011      	movs	r1, r2
   3134c:	0018      	movs	r0, r3
   3134e:	4b08      	ldr	r3, [pc, #32]	; (31370 <MQTTSerialize_ack+0xf0>)
   31350:	4798      	blx	r3
	rc = ptr - buf;
   31352:	697b      	ldr	r3, [r7, #20]
   31354:	001a      	movs	r2, r3
   31356:	68fb      	ldr	r3, [r7, #12]
   31358:	1ad3      	subs	r3, r2, r3
   3135a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3135c:	69fb      	ldr	r3, [r7, #28]
}
   3135e:	0018      	movs	r0, r3
   31360:	46bd      	mov	sp, r7
   31362:	b008      	add	sp, #32
   31364:	bd80      	pop	{r7, pc}
   31366:	46c0      	nop			; (mov r8, r8)
   31368:	00030e5b 	.word	0x00030e5b
   3136c:	00030c41 	.word	0x00030c41
   31370:	00030e85 	.word	0x00030e85

00031374 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   31374:	b580      	push	{r7, lr}
   31376:	b084      	sub	sp, #16
   31378:	af00      	add	r7, sp, #0
   3137a:	6078      	str	r0, [r7, #4]
   3137c:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   3137e:	2302      	movs	r3, #2
   31380:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   31382:	2300      	movs	r3, #0
   31384:	60fb      	str	r3, [r7, #12]
   31386:	e014      	b.n	313b2 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   31388:	68fa      	ldr	r2, [r7, #12]
   3138a:	0013      	movs	r3, r2
   3138c:	005b      	lsls	r3, r3, #1
   3138e:	189b      	adds	r3, r3, r2
   31390:	009b      	lsls	r3, r3, #2
   31392:	001a      	movs	r2, r3
   31394:	683b      	ldr	r3, [r7, #0]
   31396:	189b      	adds	r3, r3, r2
   31398:	6818      	ldr	r0, [r3, #0]
   3139a:	6859      	ldr	r1, [r3, #4]
   3139c:	689a      	ldr	r2, [r3, #8]
   3139e:	4b09      	ldr	r3, [pc, #36]	; (313c4 <MQTTSerialize_subscribeLength+0x50>)
   313a0:	4798      	blx	r3
   313a2:	0003      	movs	r3, r0
   313a4:	3303      	adds	r3, #3
   313a6:	68ba      	ldr	r2, [r7, #8]
   313a8:	18d3      	adds	r3, r2, r3
   313aa:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   313ac:	68fb      	ldr	r3, [r7, #12]
   313ae:	3301      	adds	r3, #1
   313b0:	60fb      	str	r3, [r7, #12]
   313b2:	68fa      	ldr	r2, [r7, #12]
   313b4:	687b      	ldr	r3, [r7, #4]
   313b6:	429a      	cmp	r2, r3
   313b8:	dbe6      	blt.n	31388 <MQTTSerialize_subscribeLength+0x14>
	return len;
   313ba:	68bb      	ldr	r3, [r7, #8]
}
   313bc:	0018      	movs	r0, r3
   313be:	46bd      	mov	sp, r7
   313c0:	b004      	add	sp, #16
   313c2:	bd80      	pop	{r7, pc}
   313c4:	00031015 	.word	0x00031015

000313c8 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   313c8:	b590      	push	{r4, r7, lr}
   313ca:	b08b      	sub	sp, #44	; 0x2c
   313cc:	af00      	add	r7, sp, #0
   313ce:	60f8      	str	r0, [r7, #12]
   313d0:	60b9      	str	r1, [r7, #8]
   313d2:	0019      	movs	r1, r3
   313d4:	1dfb      	adds	r3, r7, #7
   313d6:	701a      	strb	r2, [r3, #0]
   313d8:	1d3b      	adds	r3, r7, #4
   313da:	1c0a      	adds	r2, r1, #0
   313dc:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   313de:	68fb      	ldr	r3, [r7, #12]
   313e0:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   313e2:	2300      	movs	r3, #0
   313e4:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   313e6:	2300      	movs	r3, #0
   313e8:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   313ea:	2300      	movs	r3, #0
   313ec:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   313ee:	2300      	movs	r3, #0
   313f0:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   313f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   313f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   313f6:	0011      	movs	r1, r2
   313f8:	0018      	movs	r0, r3
   313fa:	4b41      	ldr	r3, [pc, #260]	; (31500 <MQTTSerialize_subscribe+0x138>)
   313fc:	4798      	blx	r3
   313fe:	0003      	movs	r3, r0
   31400:	61fb      	str	r3, [r7, #28]
   31402:	69fb      	ldr	r3, [r7, #28]
   31404:	0018      	movs	r0, r3
   31406:	4b3f      	ldr	r3, [pc, #252]	; (31504 <MQTTSerialize_subscribe+0x13c>)
   31408:	4798      	blx	r3
   3140a:	0002      	movs	r2, r0
   3140c:	68bb      	ldr	r3, [r7, #8]
   3140e:	429a      	cmp	r2, r3
   31410:	dd03      	ble.n	3141a <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   31412:	2302      	movs	r3, #2
   31414:	425b      	negs	r3, r3
   31416:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   31418:	e06c      	b.n	314f4 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   3141a:	2314      	movs	r3, #20
   3141c:	18fb      	adds	r3, r7, r3
   3141e:	2200      	movs	r2, #0
   31420:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   31422:	2314      	movs	r3, #20
   31424:	18fb      	adds	r3, r7, r3
   31426:	781a      	ldrb	r2, [r3, #0]
   31428:	210f      	movs	r1, #15
   3142a:	400a      	ands	r2, r1
   3142c:	1c11      	adds	r1, r2, #0
   3142e:	2280      	movs	r2, #128	; 0x80
   31430:	4252      	negs	r2, r2
   31432:	430a      	orrs	r2, r1
   31434:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   31436:	1dfb      	adds	r3, r7, #7
   31438:	781b      	ldrb	r3, [r3, #0]
   3143a:	2201      	movs	r2, #1
   3143c:	4013      	ands	r3, r2
   3143e:	b2da      	uxtb	r2, r3
   31440:	2314      	movs	r3, #20
   31442:	18fb      	adds	r3, r7, r3
   31444:	2101      	movs	r1, #1
   31446:	400a      	ands	r2, r1
   31448:	00d0      	lsls	r0, r2, #3
   3144a:	781a      	ldrb	r2, [r3, #0]
   3144c:	2108      	movs	r1, #8
   3144e:	438a      	bics	r2, r1
   31450:	1c11      	adds	r1, r2, #0
   31452:	1c02      	adds	r2, r0, #0
   31454:	430a      	orrs	r2, r1
   31456:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   31458:	2314      	movs	r3, #20
   3145a:	18fb      	adds	r3, r7, r3
   3145c:	781a      	ldrb	r2, [r3, #0]
   3145e:	2106      	movs	r1, #6
   31460:	438a      	bics	r2, r1
   31462:	1c11      	adds	r1, r2, #0
   31464:	2202      	movs	r2, #2
   31466:	430a      	orrs	r2, r1
   31468:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3146a:	2314      	movs	r3, #20
   3146c:	18fb      	adds	r3, r7, r3
   3146e:	781a      	ldrb	r2, [r3, #0]
   31470:	2318      	movs	r3, #24
   31472:	18fb      	adds	r3, r7, r3
   31474:	0011      	movs	r1, r2
   31476:	0018      	movs	r0, r3
   31478:	4b23      	ldr	r3, [pc, #140]	; (31508 <MQTTSerialize_subscribe+0x140>)
   3147a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   3147c:	69bb      	ldr	r3, [r7, #24]
   3147e:	69fa      	ldr	r2, [r7, #28]
   31480:	0011      	movs	r1, r2
   31482:	0018      	movs	r0, r3
   31484:	4b21      	ldr	r3, [pc, #132]	; (3150c <MQTTSerialize_subscribe+0x144>)
   31486:	4798      	blx	r3
   31488:	0002      	movs	r2, r0
   3148a:	69bb      	ldr	r3, [r7, #24]
   3148c:	189b      	adds	r3, r3, r2
   3148e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   31490:	1d3b      	adds	r3, r7, #4
   31492:	881a      	ldrh	r2, [r3, #0]
   31494:	2318      	movs	r3, #24
   31496:	18fb      	adds	r3, r7, r3
   31498:	0011      	movs	r1, r2
   3149a:	0018      	movs	r0, r3
   3149c:	4b1c      	ldr	r3, [pc, #112]	; (31510 <MQTTSerialize_subscribe+0x148>)
   3149e:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   314a0:	2300      	movs	r3, #0
   314a2:	623b      	str	r3, [r7, #32]
   314a4:	e01d      	b.n	314e2 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   314a6:	6a3a      	ldr	r2, [r7, #32]
   314a8:	0013      	movs	r3, r2
   314aa:	005b      	lsls	r3, r3, #1
   314ac:	189b      	adds	r3, r3, r2
   314ae:	009b      	lsls	r3, r3, #2
   314b0:	001a      	movs	r2, r3
   314b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   314b4:	189b      	adds	r3, r3, r2
   314b6:	2218      	movs	r2, #24
   314b8:	18b8      	adds	r0, r7, r2
   314ba:	6819      	ldr	r1, [r3, #0]
   314bc:	685a      	ldr	r2, [r3, #4]
   314be:	689b      	ldr	r3, [r3, #8]
   314c0:	4c14      	ldr	r4, [pc, #80]	; (31514 <MQTTSerialize_subscribe+0x14c>)
   314c2:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   314c4:	6a3b      	ldr	r3, [r7, #32]
   314c6:	009b      	lsls	r3, r3, #2
   314c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   314ca:	18d3      	adds	r3, r2, r3
   314cc:	681b      	ldr	r3, [r3, #0]
   314ce:	b2da      	uxtb	r2, r3
   314d0:	2318      	movs	r3, #24
   314d2:	18fb      	adds	r3, r7, r3
   314d4:	0011      	movs	r1, r2
   314d6:	0018      	movs	r0, r3
   314d8:	4b0b      	ldr	r3, [pc, #44]	; (31508 <MQTTSerialize_subscribe+0x140>)
   314da:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   314dc:	6a3b      	ldr	r3, [r7, #32]
   314de:	3301      	adds	r3, #1
   314e0:	623b      	str	r3, [r7, #32]
   314e2:	6a3a      	ldr	r2, [r7, #32]
   314e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   314e6:	429a      	cmp	r2, r3
   314e8:	dbdd      	blt.n	314a6 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   314ea:	69bb      	ldr	r3, [r7, #24]
   314ec:	001a      	movs	r2, r3
   314ee:	68fb      	ldr	r3, [r7, #12]
   314f0:	1ad3      	subs	r3, r2, r3
   314f2:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   314f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   314f6:	0018      	movs	r0, r3
   314f8:	46bd      	mov	sp, r7
   314fa:	b00b      	add	sp, #44	; 0x2c
   314fc:	bd90      	pop	{r4, r7, pc}
   314fe:	46c0      	nop			; (mov r8, r8)
   31500:	00031375 	.word	0x00031375
   31504:	00030d39 	.word	0x00030d39
   31508:	00030e5b 	.word	0x00030e5b
   3150c:	00030c41 	.word	0x00030c41
   31510:	00030e85 	.word	0x00030e85
   31514:	00030f2d 	.word	0x00030f2d

00031518 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   31518:	b590      	push	{r4, r7, lr}
   3151a:	b08b      	sub	sp, #44	; 0x2c
   3151c:	af00      	add	r7, sp, #0
   3151e:	60f8      	str	r0, [r7, #12]
   31520:	60b9      	str	r1, [r7, #8]
   31522:	607a      	str	r2, [r7, #4]
   31524:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   31526:	2300      	movs	r3, #0
   31528:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3152a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3152c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   3152e:	2300      	movs	r3, #0
   31530:	623b      	str	r3, [r7, #32]
	int rc = 0;
   31532:	2300      	movs	r3, #0
   31534:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   31536:	2318      	movs	r3, #24
   31538:	18fb      	adds	r3, r7, r3
   3153a:	0018      	movs	r0, r3
   3153c:	4b2c      	ldr	r3, [pc, #176]	; (315f0 <MQTTDeserialize_suback+0xd8>)
   3153e:	4798      	blx	r3
   31540:	0003      	movs	r3, r0
   31542:	001a      	movs	r2, r3
   31544:	231c      	movs	r3, #28
   31546:	18fb      	adds	r3, r7, r3
   31548:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   3154a:	231c      	movs	r3, #28
   3154c:	18fb      	adds	r3, r7, r3
   3154e:	781b      	ldrb	r3, [r3, #0]
   31550:	220f      	movs	r2, #15
   31552:	4393      	bics	r3, r2
   31554:	b2db      	uxtb	r3, r3
   31556:	2b90      	cmp	r3, #144	; 0x90
   31558:	d142      	bne.n	315e0 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   3155a:	69bb      	ldr	r3, [r7, #24]
   3155c:	2214      	movs	r2, #20
   3155e:	18ba      	adds	r2, r7, r2
   31560:	0011      	movs	r1, r2
   31562:	0018      	movs	r0, r3
   31564:	4b23      	ldr	r3, [pc, #140]	; (315f4 <MQTTDeserialize_suback+0xdc>)
   31566:	4798      	blx	r3
   31568:	0003      	movs	r3, r0
   3156a:	627b      	str	r3, [r7, #36]	; 0x24
   3156c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3156e:	69bb      	ldr	r3, [r7, #24]
   31570:	189b      	adds	r3, r3, r2
   31572:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   31574:	69bb      	ldr	r3, [r7, #24]
   31576:	697a      	ldr	r2, [r7, #20]
   31578:	189b      	adds	r3, r3, r2
   3157a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   3157c:	6a3b      	ldr	r3, [r7, #32]
   3157e:	69ba      	ldr	r2, [r7, #24]
   31580:	1a9b      	subs	r3, r3, r2
   31582:	2b01      	cmp	r3, #1
   31584:	dd2e      	ble.n	315e4 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   31586:	2318      	movs	r3, #24
   31588:	18fb      	adds	r3, r7, r3
   3158a:	0018      	movs	r0, r3
   3158c:	4b1a      	ldr	r3, [pc, #104]	; (315f8 <MQTTDeserialize_suback+0xe0>)
   3158e:	4798      	blx	r3
   31590:	0003      	movs	r3, r0
   31592:	b29a      	uxth	r2, r3
   31594:	68fb      	ldr	r3, [r7, #12]
   31596:	801a      	strh	r2, [r3, #0]

	*count = 0;
   31598:	687b      	ldr	r3, [r7, #4]
   3159a:	2200      	movs	r2, #0
   3159c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   3159e:	e018      	b.n	315d2 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   315a0:	687b      	ldr	r3, [r7, #4]
   315a2:	681a      	ldr	r2, [r3, #0]
   315a4:	68bb      	ldr	r3, [r7, #8]
   315a6:	429a      	cmp	r2, r3
   315a8:	dd03      	ble.n	315b2 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   315aa:	2301      	movs	r3, #1
   315ac:	425b      	negs	r3, r3
   315ae:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   315b0:	e019      	b.n	315e6 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   315b2:	687b      	ldr	r3, [r7, #4]
   315b4:	681a      	ldr	r2, [r3, #0]
   315b6:	1c51      	adds	r1, r2, #1
   315b8:	687b      	ldr	r3, [r7, #4]
   315ba:	6019      	str	r1, [r3, #0]
   315bc:	0013      	movs	r3, r2
   315be:	009b      	lsls	r3, r3, #2
   315c0:	683a      	ldr	r2, [r7, #0]
   315c2:	18d4      	adds	r4, r2, r3
   315c4:	2318      	movs	r3, #24
   315c6:	18fb      	adds	r3, r7, r3
   315c8:	0018      	movs	r0, r3
   315ca:	4b09      	ldr	r3, [pc, #36]	; (315f0 <MQTTDeserialize_suback+0xd8>)
   315cc:	4798      	blx	r3
   315ce:	0003      	movs	r3, r0
   315d0:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   315d2:	69ba      	ldr	r2, [r7, #24]
   315d4:	6a3b      	ldr	r3, [r7, #32]
   315d6:	429a      	cmp	r2, r3
   315d8:	d3e2      	bcc.n	315a0 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   315da:	2301      	movs	r3, #1
   315dc:	627b      	str	r3, [r7, #36]	; 0x24
   315de:	e002      	b.n	315e6 <MQTTDeserialize_suback+0xce>
		goto exit;
   315e0:	46c0      	nop			; (mov r8, r8)
   315e2:	e000      	b.n	315e6 <MQTTDeserialize_suback+0xce>
		goto exit;
   315e4:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   315e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   315e8:	0018      	movs	r0, r3
   315ea:	46bd      	mov	sp, r7
   315ec:	b00b      	add	sp, #44	; 0x2c
   315ee:	bd90      	pop	{r4, r7, pc}
   315f0:	00030e2f 	.word	0x00030e2f
   315f4:	00030dc9 	.word	0x00030dc9
   315f8:	00030dfd 	.word	0x00030dfd

000315fc <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   315fc:	b580      	push	{r7, lr}
   315fe:	b082      	sub	sp, #8
   31600:	af00      	add	r7, sp, #0
   31602:	6078      	str	r0, [r7, #4]
	config->port = 80;
   31604:	687b      	ldr	r3, [r7, #4]
   31606:	2250      	movs	r2, #80	; 0x50
   31608:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   3160a:	687b      	ldr	r3, [r7, #4]
   3160c:	2200      	movs	r2, #0
   3160e:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   31610:	687b      	ldr	r3, [r7, #4]
   31612:	4a0b      	ldr	r2, [pc, #44]	; (31640 <http_client_get_config_defaults+0x44>)
   31614:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   31616:	687b      	ldr	r3, [r7, #4]
   31618:	2200      	movs	r2, #0
   3161a:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   3161c:	687b      	ldr	r3, [r7, #4]
   3161e:	2200      	movs	r2, #0
   31620:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   31622:	687b      	ldr	r3, [r7, #4]
   31624:	2280      	movs	r2, #128	; 0x80
   31626:	0052      	lsls	r2, r2, #1
   31628:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   3162a:	687b      	ldr	r3, [r7, #4]
   3162c:	2252      	movs	r2, #82	; 0x52
   3162e:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   31630:	687b      	ldr	r3, [r7, #4]
   31632:	4a04      	ldr	r2, [pc, #16]	; (31644 <http_client_get_config_defaults+0x48>)
   31634:	619a      	str	r2, [r3, #24]
}
   31636:	46c0      	nop			; (mov r8, r8)
   31638:	46bd      	mov	sp, r7
   3163a:	b002      	add	sp, #8
   3163c:	bd80      	pop	{r7, pc}
   3163e:	46c0      	nop			; (mov r8, r8)
   31640:	00004e20 	.word	0x00004e20
   31644:	0003a7a8 	.word	0x0003a7a8

00031648 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   31648:	b590      	push	{r4, r7, lr}
   3164a:	b083      	sub	sp, #12
   3164c:	af00      	add	r7, sp, #0
   3164e:	6078      	str	r0, [r7, #4]
   31650:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   31652:	687b      	ldr	r3, [r7, #4]
   31654:	2b00      	cmp	r3, #0
   31656:	d002      	beq.n	3165e <http_client_init+0x16>
   31658:	683b      	ldr	r3, [r7, #0]
   3165a:	2b00      	cmp	r3, #0
   3165c:	d102      	bne.n	31664 <http_client_init+0x1c>
		return -EINVAL;
   3165e:	2316      	movs	r3, #22
   31660:	425b      	negs	r3, r3
   31662:	e058      	b.n	31716 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   31664:	683b      	ldr	r3, [r7, #0]
   31666:	691b      	ldr	r3, [r3, #16]
   31668:	2b00      	cmp	r3, #0
   3166a:	d102      	bne.n	31672 <http_client_init+0x2a>
		return -EINVAL;
   3166c:	2316      	movs	r3, #22
   3166e:	425b      	negs	r3, r3
   31670:	e051      	b.n	31716 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   31672:	683b      	ldr	r3, [r7, #0]
   31674:	685b      	ldr	r3, [r3, #4]
   31676:	2b00      	cmp	r3, #0
   31678:	d102      	bne.n	31680 <http_client_init+0x38>
		return -EINVAL;
   3167a:	2316      	movs	r3, #22
   3167c:	425b      	negs	r3, r3
   3167e:	e04a      	b.n	31716 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   31680:	683b      	ldr	r3, [r7, #0]
   31682:	695b      	ldr	r3, [r3, #20]
   31684:	2b51      	cmp	r3, #81	; 0x51
   31686:	d802      	bhi.n	3168e <http_client_init+0x46>
		return -EINVAL;
   31688:	2316      	movs	r3, #22
   3168a:	425b      	negs	r3, r3
   3168c:	e043      	b.n	31716 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   3168e:	687b      	ldr	r3, [r7, #4]
   31690:	22e8      	movs	r2, #232	; 0xe8
   31692:	2100      	movs	r1, #0
   31694:	0018      	movs	r0, r3
   31696:	4b22      	ldr	r3, [pc, #136]	; (31720 <http_client_init+0xd8>)
   31698:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   3169a:	687b      	ldr	r3, [r7, #4]
   3169c:	3350      	adds	r3, #80	; 0x50
   3169e:	6839      	ldr	r1, [r7, #0]
   316a0:	221c      	movs	r2, #28
   316a2:	0018      	movs	r0, r3
   316a4:	4b1f      	ldr	r3, [pc, #124]	; (31724 <http_client_init+0xdc>)
   316a6:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   316a8:	687b      	ldr	r3, [r7, #4]
   316aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   316ac:	2b00      	cmp	r3, #0
   316ae:	d115      	bne.n	316dc <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   316b0:	683b      	ldr	r3, [r7, #0]
   316b2:	691b      	ldr	r3, [r3, #16]
   316b4:	0018      	movs	r0, r3
   316b6:	4b1c      	ldr	r3, [pc, #112]	; (31728 <http_client_init+0xe0>)
   316b8:	4798      	blx	r3
   316ba:	0003      	movs	r3, r0
   316bc:	001a      	movs	r2, r3
   316be:	687b      	ldr	r3, [r7, #4]
   316c0:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   316c2:	687b      	ldr	r3, [r7, #4]
   316c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   316c6:	2b00      	cmp	r3, #0
   316c8:	d102      	bne.n	316d0 <http_client_init+0x88>
			return -ENOMEM;
   316ca:	230c      	movs	r3, #12
   316cc:	425b      	negs	r3, r3
   316ce:	e022      	b.n	31716 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   316d0:	687b      	ldr	r3, [r7, #4]
   316d2:	2241      	movs	r2, #65	; 0x41
   316d4:	5c99      	ldrb	r1, [r3, r2]
   316d6:	2004      	movs	r0, #4
   316d8:	4301      	orrs	r1, r0
   316da:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   316dc:	683b      	ldr	r3, [r7, #0]
   316de:	891b      	ldrh	r3, [r3, #8]
   316e0:	2b00      	cmp	r3, #0
   316e2:	d010      	beq.n	31706 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   316e4:	683b      	ldr	r3, [r7, #0]
   316e6:	6858      	ldr	r0, [r3, #4]
   316e8:	687a      	ldr	r2, [r7, #4]
   316ea:	4910      	ldr	r1, [pc, #64]	; (3172c <http_client_init+0xe4>)
   316ec:	2300      	movs	r3, #0
   316ee:	4c10      	ldr	r4, [pc, #64]	; (31730 <http_client_init+0xe8>)
   316f0:	47a0      	blx	r4
   316f2:	0002      	movs	r2, r0
   316f4:	687b      	ldr	r3, [r7, #4]
   316f6:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   316f8:	687b      	ldr	r3, [r7, #4]
   316fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   316fc:	2b00      	cmp	r3, #0
   316fe:	da02      	bge.n	31706 <http_client_init+0xbe>
			return -ENOSPC;
   31700:	231c      	movs	r3, #28
   31702:	425b      	negs	r3, r3
   31704:	e007      	b.n	31716 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   31706:	687b      	ldr	r3, [r7, #4]
   31708:	2200      	movs	r2, #0
   3170a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   3170c:	687b      	ldr	r3, [r7, #4]
   3170e:	22d8      	movs	r2, #216	; 0xd8
   31710:	2100      	movs	r1, #0
   31712:	5099      	str	r1, [r3, r2]

	return 0;
   31714:	2300      	movs	r3, #0
}
   31716:	0018      	movs	r0, r3
   31718:	46bd      	mov	sp, r7
   3171a:	b003      	add	sp, #12
   3171c:	bd90      	pop	{r4, r7, pc}
   3171e:	46c0      	nop			; (mov r8, r8)
   31720:	00035543 	.word	0x00035543
   31724:	0003550d 	.word	0x0003550d
   31728:	000354e5 	.word	0x000354e5
   3172c:	000319f9 	.word	0x000319f9
   31730:	0003309d 	.word	0x0003309d

00031734 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   31734:	b580      	push	{r7, lr}
   31736:	b082      	sub	sp, #8
   31738:	af00      	add	r7, sp, #0
   3173a:	6078      	str	r0, [r7, #4]
   3173c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   3173e:	687b      	ldr	r3, [r7, #4]
   31740:	2b00      	cmp	r3, #0
   31742:	d102      	bne.n	3174a <http_client_register_callback+0x16>
		return -EINVAL;
   31744:	2316      	movs	r3, #22
   31746:	425b      	negs	r3, r3
   31748:	e003      	b.n	31752 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   3174a:	687b      	ldr	r3, [r7, #4]
   3174c:	683a      	ldr	r2, [r7, #0]
   3174e:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   31750:	2300      	movs	r3, #0
}
   31752:	0018      	movs	r0, r3
   31754:	46bd      	mov	sp, r7
   31756:	b002      	add	sp, #8
   31758:	bd80      	pop	{r7, pc}
	...

0003175c <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   3175c:	b580      	push	{r7, lr}
   3175e:	b082      	sub	sp, #8
   31760:	af00      	add	r7, sp, #0
   31762:	6078      	str	r0, [r7, #4]
	switch (err) {
   31764:	687b      	ldr	r3, [r7, #4]
   31766:	330e      	adds	r3, #14
   31768:	2b0e      	cmp	r3, #14
   3176a:	d825      	bhi.n	317b8 <_hwerr_to_stderr+0x5c>
   3176c:	009a      	lsls	r2, r3, #2
   3176e:	4b18      	ldr	r3, [pc, #96]	; (317d0 <_hwerr_to_stderr+0x74>)
   31770:	18d3      	adds	r3, r2, r3
   31772:	681b      	ldr	r3, [r3, #0]
   31774:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   31776:	2305      	movs	r3, #5
   31778:	425b      	negs	r3, r3
   3177a:	e024      	b.n	317c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   3177c:	2302      	movs	r3, #2
   3177e:	425b      	negs	r3, r3
   31780:	e021      	b.n	317c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   31782:	2370      	movs	r3, #112	; 0x70
   31784:	425b      	negs	r3, r3
   31786:	e01e      	b.n	317c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   31788:	230c      	movs	r3, #12
   3178a:	425b      	negs	r3, r3
   3178c:	e01b      	b.n	317c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   3178e:	2316      	movs	r3, #22
   31790:	425b      	negs	r3, r3
   31792:	e018      	b.n	317c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   31794:	230c      	movs	r3, #12
   31796:	425b      	negs	r3, r3
   31798:	e015      	b.n	317c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   3179a:	2305      	movs	r3, #5
   3179c:	425b      	negs	r3, r3
   3179e:	e012      	b.n	317c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   317a0:	2379      	movs	r3, #121	; 0x79
   317a2:	425b      	negs	r3, r3
   317a4:	e00f      	b.n	317c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   317a6:	2368      	movs	r3, #104	; 0x68
   317a8:	425b      	negs	r3, r3
   317aa:	e00c      	b.n	317c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   317ac:	230b      	movs	r3, #11
   317ae:	425b      	negs	r3, r3
   317b0:	e009      	b.n	317c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   317b2:	2310      	movs	r3, #16
   317b4:	425b      	negs	r3, r3
   317b6:	e006      	b.n	317c6 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   317b8:	687b      	ldr	r3, [r7, #4]
   317ba:	2b00      	cmp	r3, #0
   317bc:	da02      	bge.n	317c4 <_hwerr_to_stderr+0x68>
				return -EIO;
   317be:	2305      	movs	r3, #5
   317c0:	425b      	negs	r3, r3
   317c2:	e000      	b.n	317c6 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   317c4:	2300      	movs	r3, #0
	}
}
   317c6:	0018      	movs	r0, r3
   317c8:	46bd      	mov	sp, r7
   317ca:	b002      	add	sp, #8
   317cc:	bd80      	pop	{r7, pc}
   317ce:	46c0      	nop			; (mov r8, r8)
   317d0:	0003a8e4 	.word	0x0003a8e4

000317d4 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   317d4:	b580      	push	{r7, lr}
   317d6:	b08a      	sub	sp, #40	; 0x28
   317d8:	af00      	add	r7, sp, #0
   317da:	603a      	str	r2, [r7, #0]
   317dc:	1dfb      	adds	r3, r7, #7
   317de:	1c02      	adds	r2, r0, #0
   317e0:	701a      	strb	r2, [r3, #0]
   317e2:	1dbb      	adds	r3, r7, #6
   317e4:	1c0a      	adds	r2, r1, #0
   317e6:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   317e8:	1dfb      	adds	r3, r7, #7
   317ea:	2200      	movs	r2, #0
   317ec:	569a      	ldrsb	r2, [r3, r2]
   317ee:	4b4b      	ldr	r3, [pc, #300]	; (3191c <http_client_socket_event_handler+0x148>)
   317f0:	0092      	lsls	r2, r2, #2
   317f2:	58d3      	ldr	r3, [r2, r3]
   317f4:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   317f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317f8:	2b00      	cmp	r3, #0
   317fa:	d100      	bne.n	317fe <http_client_socket_event_handler+0x2a>
   317fc:	e08a      	b.n	31914 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   317fe:	1dbb      	adds	r3, r7, #6
   31800:	781b      	ldrb	r3, [r3, #0]
   31802:	2b06      	cmp	r3, #6
   31804:	d040      	beq.n	31888 <http_client_socket_event_handler+0xb4>
   31806:	2b07      	cmp	r3, #7
   31808:	d060      	beq.n	318cc <http_client_socket_event_handler+0xf8>
   3180a:	2b05      	cmp	r3, #5
   3180c:	d000      	beq.n	31810 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   3180e:	e082      	b.n	31916 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   31810:	683b      	ldr	r3, [r7, #0]
   31812:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   31814:	6a3b      	ldr	r3, [r7, #32]
   31816:	785b      	ldrb	r3, [r3, #1]
   31818:	b25b      	sxtb	r3, r3
   3181a:	001a      	movs	r2, r3
   3181c:	230c      	movs	r3, #12
   3181e:	18fb      	adds	r3, r7, r3
   31820:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   31822:	6a3b      	ldr	r3, [r7, #32]
   31824:	785b      	ldrb	r3, [r3, #1]
   31826:	b25b      	sxtb	r3, r3
   31828:	2b00      	cmp	r3, #0
   3182a:	da0c      	bge.n	31846 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   3182c:	6a3b      	ldr	r3, [r7, #32]
   3182e:	785b      	ldrb	r3, [r3, #1]
   31830:	b25b      	sxtb	r3, r3
   31832:	0018      	movs	r0, r3
   31834:	4b3a      	ldr	r3, [pc, #232]	; (31920 <http_client_socket_event_handler+0x14c>)
   31836:	4798      	blx	r3
   31838:	0002      	movs	r2, r0
   3183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3183c:	0011      	movs	r1, r2
   3183e:	0018      	movs	r0, r3
   31840:	4b38      	ldr	r3, [pc, #224]	; (31924 <http_client_socket_event_handler+0x150>)
   31842:	4798      	blx	r3
    	break;
   31844:	e067      	b.n	31916 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   31846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3184a:	2b00      	cmp	r3, #0
   3184c:	d006      	beq.n	3185c <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   3184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31852:	220c      	movs	r2, #12
   31854:	18ba      	adds	r2, r7, r2
   31856:	6a78      	ldr	r0, [r7, #36]	; 0x24
   31858:	2100      	movs	r1, #0
   3185a:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   3185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3185e:	2203      	movs	r2, #3
   31860:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   31862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31864:	6d58      	ldr	r0, [r3, #84]	; 0x54
   31866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31868:	6c99      	ldr	r1, [r3, #72]	; 0x48
   3186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3186c:	2258      	movs	r2, #88	; 0x58
   3186e:	5a9b      	ldrh	r3, [r3, r2]
   31870:	001a      	movs	r2, r3
   31872:	4b2d      	ldr	r3, [pc, #180]	; (31928 <http_client_socket_event_handler+0x154>)
   31874:	4798      	blx	r3
    		_http_client_recv_packet(module);
   31876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31878:	0018      	movs	r0, r3
   3187a:	4b2c      	ldr	r3, [pc, #176]	; (3192c <http_client_socket_event_handler+0x158>)
   3187c:	4798      	blx	r3
			_http_client_request(module);
   3187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31880:	0018      	movs	r0, r3
   31882:	4b2b      	ldr	r3, [pc, #172]	; (31930 <http_client_socket_event_handler+0x15c>)
   31884:	4798      	blx	r3
    	break;
   31886:	e046      	b.n	31916 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   31888:	683b      	ldr	r3, [r7, #0]
   3188a:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   3188c:	69fb      	ldr	r3, [r7, #28]
   3188e:	2204      	movs	r2, #4
   31890:	5e9b      	ldrsh	r3, [r3, r2]
   31892:	2b00      	cmp	r3, #0
   31894:	dd09      	ble.n	318aa <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   31896:	69fb      	ldr	r3, [r7, #28]
   31898:	2204      	movs	r2, #4
   3189a:	5e9b      	ldrsh	r3, [r3, r2]
   3189c:	001a      	movs	r2, r3
   3189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   318a0:	0011      	movs	r1, r2
   318a2:	0018      	movs	r0, r3
   318a4:	4b23      	ldr	r3, [pc, #140]	; (31934 <http_client_socket_event_handler+0x160>)
   318a6:	4798      	blx	r3
   318a8:	e00b      	b.n	318c2 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   318aa:	69fb      	ldr	r3, [r7, #28]
   318ac:	2204      	movs	r2, #4
   318ae:	5e9b      	ldrsh	r3, [r3, r2]
   318b0:	0018      	movs	r0, r3
   318b2:	4b1b      	ldr	r3, [pc, #108]	; (31920 <http_client_socket_event_handler+0x14c>)
   318b4:	4798      	blx	r3
   318b6:	0002      	movs	r2, r0
   318b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   318ba:	0011      	movs	r1, r2
   318bc:	0018      	movs	r0, r3
   318be:	4b19      	ldr	r3, [pc, #100]	; (31924 <http_client_socket_event_handler+0x150>)
   318c0:	4798      	blx	r3
		_http_client_recv_packet(module);
   318c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   318c4:	0018      	movs	r0, r3
   318c6:	4b19      	ldr	r3, [pc, #100]	; (3192c <http_client_socket_event_handler+0x158>)
   318c8:	4798      	blx	r3
		break;
   318ca:	e024      	b.n	31916 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   318cc:	231a      	movs	r3, #26
   318ce:	18fb      	adds	r3, r7, r3
   318d0:	683a      	ldr	r2, [r7, #0]
   318d2:	8812      	ldrh	r2, [r2, #0]
   318d4:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   318d6:	231a      	movs	r3, #26
   318d8:	18fb      	adds	r3, r7, r3
   318da:	2200      	movs	r2, #0
   318dc:	5e9b      	ldrsh	r3, [r3, r2]
   318de:	2b00      	cmp	r3, #0
   318e0:	da0d      	bge.n	318fe <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   318e2:	231a      	movs	r3, #26
   318e4:	18fb      	adds	r3, r7, r3
   318e6:	2200      	movs	r2, #0
   318e8:	5e9b      	ldrsh	r3, [r3, r2]
   318ea:	0018      	movs	r0, r3
   318ec:	4b0c      	ldr	r3, [pc, #48]	; (31920 <http_client_socket_event_handler+0x14c>)
   318ee:	4798      	blx	r3
   318f0:	0002      	movs	r2, r0
   318f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   318f4:	0011      	movs	r1, r2
   318f6:	0018      	movs	r0, r3
   318f8:	4b0a      	ldr	r3, [pc, #40]	; (31924 <http_client_socket_event_handler+0x150>)
   318fa:	4798      	blx	r3
   318fc:	e003      	b.n	31906 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   318fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31900:	0018      	movs	r0, r3
   31902:	4b0b      	ldr	r3, [pc, #44]	; (31930 <http_client_socket_event_handler+0x15c>)
   31904:	4798      	blx	r3
		module->sending = 0;
   31906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31908:	2241      	movs	r2, #65	; 0x41
   3190a:	5c99      	ldrb	r1, [r3, r2]
   3190c:	2001      	movs	r0, #1
   3190e:	4381      	bics	r1, r0
   31910:	5499      	strb	r1, [r3, r2]
    	break;
   31912:	e000      	b.n	31916 <http_client_socket_event_handler+0x142>
		return;
   31914:	46c0      	nop			; (mov r8, r8)
	}

}
   31916:	46bd      	mov	sp, r7
   31918:	b00a      	add	sp, #40	; 0x28
   3191a:	bd80      	pop	{r7, pc}
   3191c:	2000432c 	.word	0x2000432c
   31920:	0003175d 	.word	0x0003175d
   31924:	00031dd1 	.word	0x00031dd1
   31928:	0003312d 	.word	0x0003312d
   3192c:	0003265d 	.word	0x0003265d
   31930:	00031f25 	.word	0x00031f25
   31934:	000326c1 	.word	0x000326c1

00031938 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   31938:	b580      	push	{r7, lr}
   3193a:	b088      	sub	sp, #32
   3193c:	af00      	add	r7, sp, #0
   3193e:	6078      	str	r0, [r7, #4]
   31940:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31942:	2300      	movs	r3, #0
   31944:	61fb      	str	r3, [r7, #28]
   31946:	e048      	b.n	319da <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   31948:	4b27      	ldr	r3, [pc, #156]	; (319e8 <http_client_socket_resolve_handler+0xb0>)
   3194a:	69fa      	ldr	r2, [r7, #28]
   3194c:	0092      	lsls	r2, r2, #2
   3194e:	58d3      	ldr	r3, [r2, r3]
   31950:	2b00      	cmp	r3, #0
   31952:	d03f      	beq.n	319d4 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   31954:	4b24      	ldr	r3, [pc, #144]	; (319e8 <http_client_socket_resolve_handler+0xb0>)
   31956:	69fa      	ldr	r2, [r7, #28]
   31958:	0092      	lsls	r2, r2, #2
   3195a:	58d3      	ldr	r3, [r2, r3]
   3195c:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   3195e:	69bb      	ldr	r3, [r7, #24]
   31960:	1c5a      	adds	r2, r3, #1
   31962:	687b      	ldr	r3, [r7, #4]
   31964:	0011      	movs	r1, r2
   31966:	0018      	movs	r0, r3
   31968:	4b20      	ldr	r3, [pc, #128]	; (319ec <http_client_socket_resolve_handler+0xb4>)
   3196a:	4798      	blx	r3
   3196c:	1e03      	subs	r3, r0, #0
   3196e:	d131      	bne.n	319d4 <http_client_socket_resolve_handler+0x9c>
   31970:	69bb      	ldr	r3, [r7, #24]
   31972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31974:	2b01      	cmp	r3, #1
   31976:	d12d      	bne.n	319d4 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   31978:	683b      	ldr	r3, [r7, #0]
   3197a:	2b00      	cmp	r3, #0
   3197c:	d107      	bne.n	3198e <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   3197e:	2376      	movs	r3, #118	; 0x76
   31980:	425a      	negs	r2, r3
   31982:	69bb      	ldr	r3, [r7, #24]
   31984:	0011      	movs	r1, r2
   31986:	0018      	movs	r0, r3
   31988:	4b19      	ldr	r3, [pc, #100]	; (319f0 <http_client_socket_resolve_handler+0xb8>)
   3198a:	4798      	blx	r3
					return;
   3198c:	e028      	b.n	319e0 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   3198e:	2308      	movs	r3, #8
   31990:	18fb      	adds	r3, r7, r3
   31992:	2202      	movs	r2, #2
   31994:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31996:	69bb      	ldr	r3, [r7, #24]
   31998:	2250      	movs	r2, #80	; 0x50
   3199a:	5a9b      	ldrh	r3, [r3, r2]
   3199c:	021b      	lsls	r3, r3, #8
   3199e:	b21a      	sxth	r2, r3
   319a0:	69bb      	ldr	r3, [r7, #24]
   319a2:	2150      	movs	r1, #80	; 0x50
   319a4:	5a5b      	ldrh	r3, [r3, r1]
   319a6:	0a1b      	lsrs	r3, r3, #8
   319a8:	b29b      	uxth	r3, r3
   319aa:	b21b      	sxth	r3, r3
   319ac:	4313      	orrs	r3, r2
   319ae:	b21b      	sxth	r3, r3
   319b0:	b29a      	uxth	r2, r3
   319b2:	2308      	movs	r3, #8
   319b4:	18fb      	adds	r3, r7, r3
   319b6:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   319b8:	2308      	movs	r3, #8
   319ba:	18fb      	adds	r3, r7, r3
   319bc:	683a      	ldr	r2, [r7, #0]
   319be:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   319c0:	69bb      	ldr	r3, [r7, #24]
   319c2:	781b      	ldrb	r3, [r3, #0]
   319c4:	b25b      	sxtb	r3, r3
   319c6:	2208      	movs	r2, #8
   319c8:	18b9      	adds	r1, r7, r2
   319ca:	2210      	movs	r2, #16
   319cc:	0018      	movs	r0, r3
   319ce:	4b09      	ldr	r3, [pc, #36]	; (319f4 <http_client_socket_resolve_handler+0xbc>)
   319d0:	4798      	blx	r3
				return;
   319d2:	e005      	b.n	319e0 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   319d4:	69fb      	ldr	r3, [r7, #28]
   319d6:	3301      	adds	r3, #1
   319d8:	61fb      	str	r3, [r7, #28]
   319da:	69fb      	ldr	r3, [r7, #28]
   319dc:	2b06      	cmp	r3, #6
   319de:	ddb3      	ble.n	31948 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   319e0:	46bd      	mov	sp, r7
   319e2:	b008      	add	sp, #32
   319e4:	bd80      	pop	{r7, pc}
   319e6:	46c0      	nop			; (mov r8, r8)
   319e8:	2000432c 	.word	0x2000432c
   319ec:	0003589b 	.word	0x0003589b
   319f0:	00031dd1 	.word	0x00031dd1
   319f4:	000262f5 	.word	0x000262f5

000319f8 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   319f8:	b580      	push	{r7, lr}
   319fa:	b086      	sub	sp, #24
   319fc:	af00      	add	r7, sp, #0
   319fe:	60f8      	str	r0, [r7, #12]
   31a00:	60b9      	str	r1, [r7, #8]
   31a02:	607a      	str	r2, [r7, #4]
   31a04:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   31a06:	687b      	ldr	r3, [r7, #4]
   31a08:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   31a0a:	697b      	ldr	r3, [r7, #20]
   31a0c:	2b00      	cmp	r3, #0
   31a0e:	d007      	beq.n	31a20 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   31a10:	233e      	movs	r3, #62	; 0x3e
   31a12:	425a      	negs	r2, r3
   31a14:	697b      	ldr	r3, [r7, #20]
   31a16:	0011      	movs	r1, r2
   31a18:	0018      	movs	r0, r3
   31a1a:	4b03      	ldr	r3, [pc, #12]	; (31a28 <http_client_timer_callback+0x30>)
   31a1c:	4798      	blx	r3
   31a1e:	e000      	b.n	31a22 <http_client_timer_callback+0x2a>
		return;
   31a20:	46c0      	nop			; (mov r8, r8)
}
   31a22:	46bd      	mov	sp, r7
   31a24:	b006      	add	sp, #24
   31a26:	bd80      	pop	{r7, pc}
   31a28:	00031dd1 	.word	0x00031dd1

00031a2c <_is_ip>:

static int _is_ip(const char *host)
{
   31a2c:	b580      	push	{r7, lr}
   31a2e:	b084      	sub	sp, #16
   31a30:	af00      	add	r7, sp, #0
   31a32:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   31a34:	2300      	movs	r3, #0
   31a36:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   31a38:	e03a      	b.n	31ab0 <_is_ip+0x84>
		ch = *host++;
   31a3a:	687b      	ldr	r3, [r7, #4]
   31a3c:	1c5a      	adds	r2, r3, #1
   31a3e:	607a      	str	r2, [r7, #4]
   31a40:	220b      	movs	r2, #11
   31a42:	18ba      	adds	r2, r7, r2
   31a44:	781b      	ldrb	r3, [r3, #0]
   31a46:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   31a48:	230b      	movs	r3, #11
   31a4a:	18fb      	adds	r3, r7, r3
   31a4c:	781b      	ldrb	r3, [r3, #0]
   31a4e:	2b60      	cmp	r3, #96	; 0x60
   31a50:	d904      	bls.n	31a5c <_is_ip+0x30>
   31a52:	230b      	movs	r3, #11
   31a54:	18fb      	adds	r3, r7, r3
   31a56:	781b      	ldrb	r3, [r3, #0]
   31a58:	2b66      	cmp	r3, #102	; 0x66
   31a5a:	d913      	bls.n	31a84 <_is_ip+0x58>
   31a5c:	230b      	movs	r3, #11
   31a5e:	18fb      	adds	r3, r7, r3
   31a60:	781b      	ldrb	r3, [r3, #0]
   31a62:	2b40      	cmp	r3, #64	; 0x40
   31a64:	d904      	bls.n	31a70 <_is_ip+0x44>
   31a66:	230b      	movs	r3, #11
   31a68:	18fb      	adds	r3, r7, r3
   31a6a:	781b      	ldrb	r3, [r3, #0]
   31a6c:	2b46      	cmp	r3, #70	; 0x46
   31a6e:	d909      	bls.n	31a84 <_is_ip+0x58>
   31a70:	230b      	movs	r3, #11
   31a72:	18fb      	adds	r3, r7, r3
   31a74:	781b      	ldrb	r3, [r3, #0]
   31a76:	2b3a      	cmp	r3, #58	; 0x3a
   31a78:	d004      	beq.n	31a84 <_is_ip+0x58>
   31a7a:	230b      	movs	r3, #11
   31a7c:	18fb      	adds	r3, r7, r3
   31a7e:	781b      	ldrb	r3, [r3, #0]
   31a80:	2b2f      	cmp	r3, #47	; 0x2f
   31a82:	d102      	bne.n	31a8a <_is_ip+0x5e>
			isv6 = 1;
   31a84:	2301      	movs	r3, #1
   31a86:	60fb      	str	r3, [r7, #12]
   31a88:	e012      	b.n	31ab0 <_is_ip+0x84>
		} else if (ch == '.') {
   31a8a:	230b      	movs	r3, #11
   31a8c:	18fb      	adds	r3, r7, r3
   31a8e:	781b      	ldrb	r3, [r3, #0]
   31a90:	2b2e      	cmp	r3, #46	; 0x2e
   31a92:	d104      	bne.n	31a9e <_is_ip+0x72>
			if (isv6) {
   31a94:	68fb      	ldr	r3, [r7, #12]
   31a96:	2b00      	cmp	r3, #0
   31a98:	d00a      	beq.n	31ab0 <_is_ip+0x84>
				return 0;
   31a9a:	2300      	movs	r3, #0
   31a9c:	e00d      	b.n	31aba <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   31a9e:	230b      	movs	r3, #11
   31aa0:	18fb      	adds	r3, r7, r3
   31aa2:	781b      	ldrb	r3, [r3, #0]
   31aa4:	2230      	movs	r2, #48	; 0x30
   31aa6:	4013      	ands	r3, r2
   31aa8:	2b30      	cmp	r3, #48	; 0x30
   31aaa:	d001      	beq.n	31ab0 <_is_ip+0x84>
			return 0;
   31aac:	2300      	movs	r3, #0
   31aae:	e004      	b.n	31aba <_is_ip+0x8e>
	while (*host != '\0') {
   31ab0:	687b      	ldr	r3, [r7, #4]
   31ab2:	781b      	ldrb	r3, [r3, #0]
   31ab4:	2b00      	cmp	r3, #0
   31ab6:	d1c0      	bne.n	31a3a <_is_ip+0xe>
		}
	}
	return 1;
   31ab8:	2301      	movs	r3, #1
}
   31aba:	0018      	movs	r0, r3
   31abc:	46bd      	mov	sp, r7
   31abe:	b004      	add	sp, #16
   31ac0:	bd80      	pop	{r7, pc}
	...

00031ac4 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   31ac4:	b5b0      	push	{r4, r5, r7, lr}
   31ac6:	b08e      	sub	sp, #56	; 0x38
   31ac8:	af00      	add	r7, sp, #0
   31aca:	60f8      	str	r0, [r7, #12]
   31acc:	60b9      	str	r1, [r7, #8]
   31ace:	603b      	str	r3, [r7, #0]
   31ad0:	1dfb      	adds	r3, r7, #7
   31ad2:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   31ad4:	2337      	movs	r3, #55	; 0x37
   31ad6:	18fb      	adds	r3, r7, r3
   31ad8:	2200      	movs	r2, #0
   31ada:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   31adc:	2300      	movs	r3, #0
   31ade:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   31ae0:	2300      	movs	r3, #0
   31ae2:	633b      	str	r3, [r7, #48]	; 0x30
   31ae4:	2300      	movs	r3, #0
   31ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   31ae8:	2300      	movs	r3, #0
   31aea:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   31aec:	68fb      	ldr	r3, [r7, #12]
   31aee:	2b00      	cmp	r3, #0
   31af0:	d102      	bne.n	31af8 <http_client_send_request+0x34>
		return -EINVAL;
   31af2:	2316      	movs	r3, #22
   31af4:	425b      	negs	r3, r3
   31af6:	e145      	b.n	31d84 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   31af8:	68fb      	ldr	r3, [r7, #12]
   31afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31afc:	2b02      	cmp	r3, #2
   31afe:	d902      	bls.n	31b06 <http_client_send_request+0x42>
		return -EBUSY;
   31b00:	2310      	movs	r3, #16
   31b02:	425b      	negs	r3, r3
   31b04:	e13e      	b.n	31d84 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   31b06:	49a1      	ldr	r1, [pc, #644]	; (31d8c <http_client_send_request+0x2c8>)
   31b08:	68bb      	ldr	r3, [r7, #8]
   31b0a:	2207      	movs	r2, #7
   31b0c:	0018      	movs	r0, r3
   31b0e:	4ba0      	ldr	r3, [pc, #640]	; (31d90 <http_client_send_request+0x2cc>)
   31b10:	4798      	blx	r3
   31b12:	1e03      	subs	r3, r0, #0
   31b14:	d102      	bne.n	31b1c <http_client_send_request+0x58>
		i = 7;
   31b16:	2307      	movs	r3, #7
   31b18:	633b      	str	r3, [r7, #48]	; 0x30
   31b1a:	e009      	b.n	31b30 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   31b1c:	499d      	ldr	r1, [pc, #628]	; (31d94 <http_client_send_request+0x2d0>)
   31b1e:	68bb      	ldr	r3, [r7, #8]
   31b20:	2208      	movs	r2, #8
   31b22:	0018      	movs	r0, r3
   31b24:	4b9a      	ldr	r3, [pc, #616]	; (31d90 <http_client_send_request+0x2cc>)
   31b26:	4798      	blx	r3
   31b28:	1e03      	subs	r3, r0, #0
   31b2a:	d101      	bne.n	31b30 <http_client_send_request+0x6c>
		i = 8;
   31b2c:	2308      	movs	r3, #8
   31b2e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   31b30:	68fb      	ldr	r3, [r7, #12]
   31b32:	1c5c      	adds	r4, r3, #1
   31b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31b36:	68ba      	ldr	r2, [r7, #8]
   31b38:	18d5      	adds	r5, r2, r3
   31b3a:	68fb      	ldr	r3, [r7, #12]
   31b3c:	3301      	adds	r3, #1
   31b3e:	0018      	movs	r0, r3
   31b40:	4b95      	ldr	r3, [pc, #596]	; (31d98 <http_client_send_request+0x2d4>)
   31b42:	4798      	blx	r3
   31b44:	0003      	movs	r3, r0
   31b46:	001a      	movs	r2, r3
   31b48:	0029      	movs	r1, r5
   31b4a:	0020      	movs	r0, r4
   31b4c:	4b90      	ldr	r3, [pc, #576]	; (31d90 <http_client_send_request+0x2cc>)
   31b4e:	4798      	blx	r3
   31b50:	0003      	movs	r3, r0
   31b52:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31b54:	e00d      	b.n	31b72 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   31b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31b58:	1c5a      	adds	r2, r3, #1
   31b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   31b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   31b5e:	68b9      	ldr	r1, [r7, #8]
   31b60:	188a      	adds	r2, r1, r2
   31b62:	7811      	ldrb	r1, [r2, #0]
   31b64:	68fa      	ldr	r2, [r7, #12]
   31b66:	18d3      	adds	r3, r2, r3
   31b68:	1c0a      	adds	r2, r1, #0
   31b6a:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31b6e:	3301      	adds	r3, #1
   31b70:	633b      	str	r3, [r7, #48]	; 0x30
   31b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31b74:	68ba      	ldr	r2, [r7, #8]
   31b76:	18d3      	adds	r3, r2, r3
   31b78:	781b      	ldrb	r3, [r3, #0]
   31b7a:	2b00      	cmp	r3, #0
   31b7c:	d005      	beq.n	31b8a <http_client_send_request+0xc6>
   31b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31b80:	68ba      	ldr	r2, [r7, #8]
   31b82:	18d3      	adds	r3, r2, r3
   31b84:	781b      	ldrb	r3, [r3, #0]
   31b86:	2b2f      	cmp	r3, #47	; 0x2f
   31b88:	d1e5      	bne.n	31b56 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   31b8a:	68fa      	ldr	r2, [r7, #12]
   31b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31b8e:	18d3      	adds	r3, r2, r3
   31b90:	3301      	adds	r3, #1
   31b92:	2200      	movs	r2, #0
   31b94:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   31b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31b98:	68ba      	ldr	r2, [r7, #8]
   31b9a:	18d3      	adds	r3, r2, r3
   31b9c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   31b9e:	68fb      	ldr	r3, [r7, #12]
   31ba0:	3301      	adds	r3, #1
   31ba2:	781b      	ldrb	r3, [r3, #0]
   31ba4:	2b00      	cmp	r3, #0
   31ba6:	d102      	bne.n	31bae <http_client_send_request+0xea>
		return -EINVAL;
   31ba8:	2316      	movs	r3, #22
   31baa:	425b      	negs	r3, r3
   31bac:	e0ea      	b.n	31d84 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   31bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31bb0:	0018      	movs	r0, r3
   31bb2:	4b79      	ldr	r3, [pc, #484]	; (31d98 <http_client_send_request+0x2d4>)
   31bb4:	4798      	blx	r3
   31bb6:	0003      	movs	r3, r0
   31bb8:	2b3f      	cmp	r3, #63	; 0x3f
   31bba:	d902      	bls.n	31bc2 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   31bbc:	235b      	movs	r3, #91	; 0x5b
   31bbe:	425b      	negs	r3, r3
   31bc0:	e0e0      	b.n	31d84 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   31bc2:	68fb      	ldr	r3, [r7, #12]
   31bc4:	22d4      	movs	r2, #212	; 0xd4
   31bc6:	589b      	ldr	r3, [r3, r2]
   31bc8:	2b00      	cmp	r3, #0
   31bca:	d005      	beq.n	31bd8 <http_client_send_request+0x114>
		free(module->req.ext_header);
   31bcc:	68fb      	ldr	r3, [r7, #12]
   31bce:	22d4      	movs	r2, #212	; 0xd4
   31bd0:	589b      	ldr	r3, [r3, r2]
   31bd2:	0018      	movs	r0, r3
   31bd4:	4b71      	ldr	r3, [pc, #452]	; (31d9c <http_client_send_request+0x2d8>)
   31bd6:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   31bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31bda:	2b00      	cmp	r3, #0
   31bdc:	d010      	beq.n	31c00 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   31bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31be0:	0018      	movs	r0, r3
   31be2:	4b6f      	ldr	r3, [pc, #444]	; (31da0 <http_client_send_request+0x2dc>)
   31be4:	4798      	blx	r3
   31be6:	0003      	movs	r3, r0
   31be8:	0019      	movs	r1, r3
   31bea:	68fb      	ldr	r3, [r7, #12]
   31bec:	22d4      	movs	r2, #212	; 0xd4
   31bee:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   31bf0:	68fb      	ldr	r3, [r7, #12]
   31bf2:	22d4      	movs	r2, #212	; 0xd4
   31bf4:	589b      	ldr	r3, [r3, r2]
   31bf6:	2b00      	cmp	r3, #0
   31bf8:	d106      	bne.n	31c08 <http_client_send_request+0x144>
			return -ENOMEM;
   31bfa:	230c      	movs	r3, #12
   31bfc:	425b      	negs	r3, r3
   31bfe:	e0c1      	b.n	31d84 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   31c00:	68fb      	ldr	r3, [r7, #12]
   31c02:	22d4      	movs	r2, #212	; 0xd4
   31c04:	2100      	movs	r1, #0
   31c06:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   31c08:	68fb      	ldr	r3, [r7, #12]
   31c0a:	2241      	movs	r2, #65	; 0x41
   31c0c:	5c99      	ldrb	r1, [r3, r2]
   31c0e:	2001      	movs	r0, #1
   31c10:	4381      	bics	r1, r0
   31c12:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   31c14:	68fb      	ldr	r3, [r7, #12]
   31c16:	2200      	movs	r2, #0
   31c18:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   31c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31c1c:	781b      	ldrb	r3, [r3, #0]
   31c1e:	2b2f      	cmp	r3, #47	; 0x2f
   31c20:	d107      	bne.n	31c32 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   31c22:	68fb      	ldr	r3, [r7, #12]
   31c24:	3370      	adds	r3, #112	; 0x70
   31c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31c28:	0011      	movs	r1, r2
   31c2a:	0018      	movs	r0, r3
   31c2c:	4b5d      	ldr	r3, [pc, #372]	; (31da4 <http_client_send_request+0x2e0>)
   31c2e:	4798      	blx	r3
   31c30:	e00f      	b.n	31c52 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   31c32:	68fb      	ldr	r3, [r7, #12]
   31c34:	2270      	movs	r2, #112	; 0x70
   31c36:	212f      	movs	r1, #47	; 0x2f
   31c38:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   31c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31c3c:	781b      	ldrb	r3, [r3, #0]
   31c3e:	2b00      	cmp	r3, #0
   31c40:	d007      	beq.n	31c52 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   31c42:	68fb      	ldr	r3, [r7, #12]
   31c44:	3370      	adds	r3, #112	; 0x70
   31c46:	3301      	adds	r3, #1
   31c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31c4a:	0011      	movs	r1, r2
   31c4c:	0018      	movs	r0, r3
   31c4e:	4b55      	ldr	r3, [pc, #340]	; (31da4 <http_client_send_request+0x2e0>)
   31c50:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   31c52:	683b      	ldr	r3, [r7, #0]
   31c54:	2b00      	cmp	r3, #0
   31c56:	d007      	beq.n	31c68 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   31c58:	68fb      	ldr	r3, [r7, #12]
   31c5a:	33b0      	adds	r3, #176	; 0xb0
   31c5c:	6839      	ldr	r1, [r7, #0]
   31c5e:	2218      	movs	r2, #24
   31c60:	0018      	movs	r0, r3
   31c62:	4b51      	ldr	r3, [pc, #324]	; (31da8 <http_client_send_request+0x2e4>)
   31c64:	4798      	blx	r3
   31c66:	e006      	b.n	31c76 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   31c68:	68fb      	ldr	r3, [r7, #12]
   31c6a:	33b0      	adds	r3, #176	; 0xb0
   31c6c:	2218      	movs	r2, #24
   31c6e:	2100      	movs	r1, #0
   31c70:	0018      	movs	r0, r3
   31c72:	4b4e      	ldr	r3, [pc, #312]	; (31dac <http_client_send_request+0x2e8>)
   31c74:	4798      	blx	r3
	}

	module->req.method = method;
   31c76:	68fb      	ldr	r3, [r7, #12]
   31c78:	1dfa      	adds	r2, r7, #7
   31c7a:	21c8      	movs	r1, #200	; 0xc8
   31c7c:	7812      	ldrb	r2, [r2, #0]
   31c7e:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   31c80:	68fb      	ldr	r3, [r7, #12]
   31c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31c84:	2b01      	cmp	r3, #1
   31c86:	d003      	beq.n	31c90 <http_client_send_request+0x1cc>
   31c88:	d316      	bcc.n	31cb8 <http_client_send_request+0x1f4>
   31c8a:	2b02      	cmp	r3, #2
   31c8c:	d004      	beq.n	31c98 <http_client_send_request+0x1d4>
   31c8e:	e074      	b.n	31d7a <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   31c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31c92:	2b00      	cmp	r3, #0
   31c94:	d100      	bne.n	31c98 <http_client_send_request+0x1d4>
   31c96:	e073      	b.n	31d80 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   31c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31c9a:	2b00      	cmp	r3, #0
   31c9c:	d107      	bne.n	31cae <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   31c9e:	68fb      	ldr	r3, [r7, #12]
   31ca0:	2203      	movs	r2, #3
   31ca2:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   31ca4:	68fb      	ldr	r3, [r7, #12]
   31ca6:	0018      	movs	r0, r3
   31ca8:	4b41      	ldr	r3, [pc, #260]	; (31db0 <http_client_send_request+0x2ec>)
   31caa:	4798      	blx	r3
			break;
   31cac:	e069      	b.n	31d82 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   31cae:	68fb      	ldr	r3, [r7, #12]
   31cb0:	2100      	movs	r1, #0
   31cb2:	0018      	movs	r0, r3
   31cb4:	4b3f      	ldr	r3, [pc, #252]	; (31db4 <http_client_send_request+0x2f0>)
   31cb6:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   31cb8:	68fb      	ldr	r3, [r7, #12]
   31cba:	2252      	movs	r2, #82	; 0x52
   31cbc:	5c9b      	ldrb	r3, [r3, r2]
   31cbe:	2b00      	cmp	r3, #0
   31cc0:	d007      	beq.n	31cd2 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   31cc2:	2337      	movs	r3, #55	; 0x37
   31cc4:	18fb      	adds	r3, r7, r3
   31cc6:	2237      	movs	r2, #55	; 0x37
   31cc8:	18ba      	adds	r2, r7, r2
   31cca:	7812      	ldrb	r2, [r2, #0]
   31ccc:	2101      	movs	r1, #1
   31cce:	430a      	orrs	r2, r1
   31cd0:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   31cd2:	2337      	movs	r3, #55	; 0x37
   31cd4:	18fb      	adds	r3, r7, r3
   31cd6:	781b      	ldrb	r3, [r3, #0]
   31cd8:	001a      	movs	r2, r3
   31cda:	2101      	movs	r1, #1
   31cdc:	2002      	movs	r0, #2
   31cde:	4b36      	ldr	r3, [pc, #216]	; (31db8 <http_client_send_request+0x2f4>)
   31ce0:	4798      	blx	r3
   31ce2:	0003      	movs	r3, r0
   31ce4:	001a      	movs	r2, r3
   31ce6:	68fb      	ldr	r3, [r7, #12]
   31ce8:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   31cea:	68fb      	ldr	r3, [r7, #12]
   31cec:	781b      	ldrb	r3, [r3, #0]
   31cee:	b25b      	sxtb	r3, r3
   31cf0:	2b00      	cmp	r3, #0
   31cf2:	db3f      	blt.n	31d74 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   31cf4:	68fb      	ldr	r3, [r7, #12]
   31cf6:	781b      	ldrb	r3, [r3, #0]
   31cf8:	b25b      	sxtb	r3, r3
   31cfa:	001a      	movs	r2, r3
   31cfc:	4b2f      	ldr	r3, [pc, #188]	; (31dbc <http_client_send_request+0x2f8>)
   31cfe:	0092      	lsls	r2, r2, #2
   31d00:	68f9      	ldr	r1, [r7, #12]
   31d02:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   31d04:	68fb      	ldr	r3, [r7, #12]
   31d06:	3301      	adds	r3, #1
   31d08:	0018      	movs	r0, r3
   31d0a:	4b2d      	ldr	r3, [pc, #180]	; (31dc0 <http_client_send_request+0x2fc>)
   31d0c:	4798      	blx	r3
   31d0e:	1e03      	subs	r3, r0, #0
   31d10:	d027      	beq.n	31d62 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   31d12:	2314      	movs	r3, #20
   31d14:	18fb      	adds	r3, r7, r3
   31d16:	2202      	movs	r2, #2
   31d18:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31d1a:	68fb      	ldr	r3, [r7, #12]
   31d1c:	2250      	movs	r2, #80	; 0x50
   31d1e:	5a9b      	ldrh	r3, [r3, r2]
   31d20:	021b      	lsls	r3, r3, #8
   31d22:	b21a      	sxth	r2, r3
   31d24:	68fb      	ldr	r3, [r7, #12]
   31d26:	2150      	movs	r1, #80	; 0x50
   31d28:	5a5b      	ldrh	r3, [r3, r1]
   31d2a:	0a1b      	lsrs	r3, r3, #8
   31d2c:	b29b      	uxth	r3, r3
   31d2e:	b21b      	sxth	r3, r3
   31d30:	4313      	orrs	r3, r2
   31d32:	b21b      	sxth	r3, r3
   31d34:	b29a      	uxth	r2, r3
   31d36:	2314      	movs	r3, #20
   31d38:	18fb      	adds	r3, r7, r3
   31d3a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   31d3c:	68fb      	ldr	r3, [r7, #12]
   31d3e:	3301      	adds	r3, #1
   31d40:	0018      	movs	r0, r3
   31d42:	4b20      	ldr	r3, [pc, #128]	; (31dc4 <http_client_send_request+0x300>)
   31d44:	4798      	blx	r3
   31d46:	0002      	movs	r2, r0
   31d48:	2314      	movs	r3, #20
   31d4a:	18fb      	adds	r3, r7, r3
   31d4c:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31d4e:	68fb      	ldr	r3, [r7, #12]
   31d50:	781b      	ldrb	r3, [r3, #0]
   31d52:	b25b      	sxtb	r3, r3
   31d54:	2214      	movs	r2, #20
   31d56:	18b9      	adds	r1, r7, r2
   31d58:	2210      	movs	r2, #16
   31d5a:	0018      	movs	r0, r3
   31d5c:	4b1a      	ldr	r3, [pc, #104]	; (31dc8 <http_client_send_request+0x304>)
   31d5e:	4798      	blx	r3
   31d60:	e004      	b.n	31d6c <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   31d62:	68fb      	ldr	r3, [r7, #12]
   31d64:	3301      	adds	r3, #1
   31d66:	0018      	movs	r0, r3
   31d68:	4b18      	ldr	r3, [pc, #96]	; (31dcc <http_client_send_request+0x308>)
   31d6a:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   31d6c:	68fb      	ldr	r3, [r7, #12]
   31d6e:	2201      	movs	r2, #1
   31d70:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   31d72:	e006      	b.n	31d82 <http_client_send_request+0x2be>
			return -ENOSPC;
   31d74:	231c      	movs	r3, #28
   31d76:	425b      	negs	r3, r3
   31d78:	e004      	b.n	31d84 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   31d7a:	230b      	movs	r3, #11
   31d7c:	425b      	negs	r3, r3
   31d7e:	e001      	b.n	31d84 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   31d80:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   31d82:	2300      	movs	r3, #0
}
   31d84:	0018      	movs	r0, r3
   31d86:	46bd      	mov	sp, r7
   31d88:	b00e      	add	sp, #56	; 0x38
   31d8a:	bdb0      	pop	{r4, r5, r7, pc}
   31d8c:	0003a7b4 	.word	0x0003a7b4
   31d90:	00035909 	.word	0x00035909
   31d94:	0003a7bc 	.word	0x0003a7bc
   31d98:	000358fb 	.word	0x000358fb
   31d9c:	000354f9 	.word	0x000354f9
   31da0:	000358c1 	.word	0x000358c1
   31da4:	000358af 	.word	0x000358af
   31da8:	0003550d 	.word	0x0003550d
   31dac:	00035543 	.word	0x00035543
   31db0:	00031f25 	.word	0x00031f25
   31db4:	00031dd1 	.word	0x00031dd1
   31db8:	000260e1 	.word	0x000260e1
   31dbc:	2000432c 	.word	0x2000432c
   31dc0:	00031a2d 	.word	0x00031a2d
   31dc4:	0002682d 	.word	0x0002682d
   31dc8:	000262f5 	.word	0x000262f5
   31dcc:	00026935 	.word	0x00026935

00031dd0 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   31dd0:	b580      	push	{r7, lr}
   31dd2:	b086      	sub	sp, #24
   31dd4:	af00      	add	r7, sp, #0
   31dd6:	6078      	str	r0, [r7, #4]
   31dd8:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   31dda:	687b      	ldr	r3, [r7, #4]
   31ddc:	22c0      	movs	r2, #192	; 0xc0
   31dde:	589b      	ldr	r3, [r3, r2]
   31de0:	2b00      	cmp	r3, #0
   31de2:	d007      	beq.n	31df4 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   31de4:	687b      	ldr	r3, [r7, #4]
   31de6:	22c0      	movs	r2, #192	; 0xc0
   31de8:	589b      	ldr	r3, [r3, r2]
   31dea:	687a      	ldr	r2, [r7, #4]
   31dec:	21c4      	movs	r1, #196	; 0xc4
   31dee:	5852      	ldr	r2, [r2, r1]
   31df0:	0010      	movs	r0, r2
   31df2:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   31df4:	687b      	ldr	r3, [r7, #4]
   31df6:	33b0      	adds	r3, #176	; 0xb0
   31df8:	2218      	movs	r2, #24
   31dfa:	2100      	movs	r1, #0
   31dfc:	0018      	movs	r0, r3
   31dfe:	4b24      	ldr	r3, [pc, #144]	; (31e90 <_http_client_clear_conn+0xc0>)
   31e00:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   31e02:	687b      	ldr	r3, [r7, #4]
   31e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31e06:	2b00      	cmp	r3, #0
   31e08:	d005      	beq.n	31e16 <_http_client_clear_conn+0x46>
		close(module->sock);
   31e0a:	687b      	ldr	r3, [r7, #4]
   31e0c:	781b      	ldrb	r3, [r3, #0]
   31e0e:	b25b      	sxtb	r3, r3
   31e10:	0018      	movs	r0, r3
   31e12:	4b20      	ldr	r3, [pc, #128]	; (31e94 <_http_client_clear_conn+0xc4>)
   31e14:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   31e16:	687b      	ldr	r3, [r7, #4]
   31e18:	781b      	ldrb	r3, [r3, #0]
   31e1a:	b25b      	sxtb	r3, r3
   31e1c:	001a      	movs	r2, r3
   31e1e:	4b1e      	ldr	r3, [pc, #120]	; (31e98 <_http_client_clear_conn+0xc8>)
   31e20:	0092      	lsls	r2, r2, #2
   31e22:	2100      	movs	r1, #0
   31e24:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   31e26:	687b      	ldr	r3, [r7, #4]
   31e28:	336c      	adds	r3, #108	; 0x6c
   31e2a:	226c      	movs	r2, #108	; 0x6c
   31e2c:	2100      	movs	r1, #0
   31e2e:	0018      	movs	r0, r3
   31e30:	4b17      	ldr	r3, [pc, #92]	; (31e90 <_http_client_clear_conn+0xc0>)
   31e32:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   31e34:	687b      	ldr	r3, [r7, #4]
   31e36:	33d8      	adds	r3, #216	; 0xd8
   31e38:	2210      	movs	r2, #16
   31e3a:	2100      	movs	r1, #0
   31e3c:	0018      	movs	r0, r3
   31e3e:	4b14      	ldr	r3, [pc, #80]	; (31e90 <_http_client_clear_conn+0xc0>)
   31e40:	4798      	blx	r3
	module->req.state = STATE_INIT;
   31e42:	687b      	ldr	r3, [r7, #4]
   31e44:	2200      	movs	r2, #0
   31e46:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   31e48:	687b      	ldr	r3, [r7, #4]
   31e4a:	22d8      	movs	r2, #216	; 0xd8
   31e4c:	2100      	movs	r1, #0
   31e4e:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   31e50:	687b      	ldr	r3, [r7, #4]
   31e52:	2241      	movs	r2, #65	; 0x41
   31e54:	5c99      	ldrb	r1, [r3, r2]
   31e56:	2001      	movs	r0, #1
   31e58:	4381      	bics	r1, r0
   31e5a:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   31e5c:	687b      	ldr	r3, [r7, #4]
   31e5e:	2241      	movs	r2, #65	; 0x41
   31e60:	5c99      	ldrb	r1, [r3, r2]
   31e62:	2002      	movs	r0, #2
   31e64:	4381      	bics	r1, r0
   31e66:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   31e68:	230c      	movs	r3, #12
   31e6a:	18fb      	adds	r3, r7, r3
   31e6c:	683a      	ldr	r2, [r7, #0]
   31e6e:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   31e70:	687b      	ldr	r3, [r7, #4]
   31e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31e74:	2b00      	cmp	r3, #0
   31e76:	d006      	beq.n	31e86 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   31e78:	687b      	ldr	r3, [r7, #4]
   31e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31e7c:	220c      	movs	r2, #12
   31e7e:	18ba      	adds	r2, r7, r2
   31e80:	6878      	ldr	r0, [r7, #4]
   31e82:	2104      	movs	r1, #4
   31e84:	4798      	blx	r3
	}
}
   31e86:	46c0      	nop			; (mov r8, r8)
   31e88:	46bd      	mov	sp, r7
   31e8a:	b006      	add	sp, #24
   31e8c:	bd80      	pop	{r7, pc}
   31e8e:	46c0      	nop			; (mov r8, r8)
   31e90:	00035543 	.word	0x00035543
   31e94:	000266ed 	.word	0x000266ed
   31e98:	2000432c 	.word	0x2000432c

00031e9c <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   31e9c:	b590      	push	{r4, r7, lr}
   31e9e:	b087      	sub	sp, #28
   31ea0:	af00      	add	r7, sp, #0
   31ea2:	60f8      	str	r0, [r7, #12]
   31ea4:	60b9      	str	r1, [r7, #8]
   31ea6:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   31ea8:	68fb      	ldr	r3, [r7, #12]
   31eaa:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   31eac:	697b      	ldr	r3, [r7, #20]
   31eae:	2241      	movs	r2, #65	; 0x41
   31eb0:	5c99      	ldrb	r1, [r3, r2]
   31eb2:	2001      	movs	r0, #1
   31eb4:	4301      	orrs	r1, r0
   31eb6:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   31eb8:	697b      	ldr	r3, [r7, #20]
   31eba:	2000      	movs	r0, #0
   31ebc:	5618      	ldrsb	r0, [r3, r0]
   31ebe:	687b      	ldr	r3, [r7, #4]
   31ec0:	b29a      	uxth	r2, r3
   31ec2:	68b9      	ldr	r1, [r7, #8]
   31ec4:	2300      	movs	r3, #0
   31ec6:	4c14      	ldr	r4, [pc, #80]	; (31f18 <_http_client_send_wait+0x7c>)
   31ec8:	47a0      	blx	r4
   31eca:	0003      	movs	r3, r0
   31ecc:	613b      	str	r3, [r7, #16]
   31ece:	693b      	ldr	r3, [r7, #16]
   31ed0:	2b00      	cmp	r3, #0
   31ed2:	da0f      	bge.n	31ef4 <_http_client_send_wait+0x58>
		module->sending = 0;
   31ed4:	697b      	ldr	r3, [r7, #20]
   31ed6:	2241      	movs	r2, #65	; 0x41
   31ed8:	5c99      	ldrb	r1, [r3, r2]
   31eda:	2001      	movs	r0, #1
   31edc:	4381      	bics	r1, r0
   31ede:	5499      	strb	r1, [r3, r2]
		return result;
   31ee0:	693b      	ldr	r3, [r7, #16]
   31ee2:	e014      	b.n	31f0e <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   31ee4:	2000      	movs	r0, #0
   31ee6:	4b0d      	ldr	r3, [pc, #52]	; (31f1c <_http_client_send_wait+0x80>)
   31ee8:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   31eea:	697b      	ldr	r3, [r7, #20]
   31eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31eee:	0018      	movs	r0, r3
   31ef0:	4b0b      	ldr	r3, [pc, #44]	; (31f20 <_http_client_send_wait+0x84>)
   31ef2:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   31ef4:	697b      	ldr	r3, [r7, #20]
   31ef6:	2241      	movs	r2, #65	; 0x41
   31ef8:	5c9b      	ldrb	r3, [r3, r2]
   31efa:	2201      	movs	r2, #1
   31efc:	4013      	ands	r3, r2
   31efe:	b2db      	uxtb	r3, r3
   31f00:	2b00      	cmp	r3, #0
   31f02:	d003      	beq.n	31f0c <_http_client_send_wait+0x70>
   31f04:	697b      	ldr	r3, [r7, #20]
   31f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31f08:	2b02      	cmp	r3, #2
   31f0a:	d8eb      	bhi.n	31ee4 <_http_client_send_wait+0x48>
	}

	return 0;
   31f0c:	2300      	movs	r3, #0
}
   31f0e:	0018      	movs	r0, r3
   31f10:	46bd      	mov	sp, r7
   31f12:	b007      	add	sp, #28
   31f14:	bd90      	pop	{r4, r7, pc}
   31f16:	46c0      	nop			; (mov r8, r8)
   31f18:	00026409 	.word	0x00026409
   31f1c:	00022ab5 	.word	0x00022ab5
   31f20:	000331a9 	.word	0x000331a9

00031f24 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   31f24:	b5f0      	push	{r4, r5, r6, r7, lr}
   31f26:	46c6      	mov	lr, r8
   31f28:	b500      	push	{lr}
   31f2a:	b0a0      	sub	sp, #128	; 0x80
   31f2c:	af02      	add	r7, sp, #8
   31f2e:	61f8      	str	r0, [r7, #28]
   31f30:	4668      	mov	r0, sp
   31f32:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   31f34:	2318      	movs	r3, #24
   31f36:	2218      	movs	r2, #24
   31f38:	18ba      	adds	r2, r7, r2
   31f3a:	18d0      	adds	r0, r2, r3
   31f3c:	4bbd      	ldr	r3, [pc, #756]	; (32234 <_http_client_request+0x310>)
   31f3e:	469c      	mov	ip, r3
   31f40:	4663      	mov	r3, ip
   31f42:	cb16      	ldmia	r3!, {r1, r2, r4}
   31f44:	c016      	stmia	r0!, {r1, r2, r4}
   31f46:	469c      	mov	ip, r3
   31f48:	4663      	mov	r3, ip
   31f4a:	681b      	ldr	r3, [r3, #0]
   31f4c:	469c      	mov	ip, r3
   31f4e:	4663      	mov	r3, ip
   31f50:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   31f52:	69f8      	ldr	r0, [r7, #28]
   31f54:	6e40      	ldr	r0, [r0, #100]	; 0x64
   31f56:	4684      	mov	ip, r0
   31f58:	2301      	movs	r3, #1
   31f5a:	425b      	negs	r3, r3
   31f5c:	4698      	mov	r8, r3
   31f5e:	44c4      	add	ip, r8
   31f60:	4663      	mov	r3, ip
   31f62:	66fb      	str	r3, [r7, #108]	; 0x6c
   31f64:	6038      	str	r0, [r7, #0]
   31f66:	2300      	movs	r3, #0
   31f68:	607b      	str	r3, [r7, #4]
   31f6a:	6839      	ldr	r1, [r7, #0]
   31f6c:	687a      	ldr	r2, [r7, #4]
   31f6e:	000b      	movs	r3, r1
   31f70:	0f5b      	lsrs	r3, r3, #29
   31f72:	469c      	mov	ip, r3
   31f74:	0013      	movs	r3, r2
   31f76:	00db      	lsls	r3, r3, #3
   31f78:	617b      	str	r3, [r7, #20]
   31f7a:	4663      	mov	r3, ip
   31f7c:	697c      	ldr	r4, [r7, #20]
   31f7e:	431c      	orrs	r4, r3
   31f80:	617c      	str	r4, [r7, #20]
   31f82:	000b      	movs	r3, r1
   31f84:	00db      	lsls	r3, r3, #3
   31f86:	613b      	str	r3, [r7, #16]
   31f88:	0005      	movs	r5, r0
   31f8a:	2200      	movs	r2, #0
   31f8c:	0016      	movs	r6, r2
   31f8e:	0f6a      	lsrs	r2, r5, #29
   31f90:	00f3      	lsls	r3, r6, #3
   31f92:	60fb      	str	r3, [r7, #12]
   31f94:	68fb      	ldr	r3, [r7, #12]
   31f96:	4313      	orrs	r3, r2
   31f98:	60fb      	str	r3, [r7, #12]
   31f9a:	00eb      	lsls	r3, r5, #3
   31f9c:	60bb      	str	r3, [r7, #8]
   31f9e:	1dc3      	adds	r3, r0, #7
   31fa0:	08db      	lsrs	r3, r3, #3
   31fa2:	00db      	lsls	r3, r3, #3
   31fa4:	466a      	mov	r2, sp
   31fa6:	1ad3      	subs	r3, r2, r3
   31fa8:	469d      	mov	sp, r3
   31faa:	ab02      	add	r3, sp, #8
   31fac:	3300      	adds	r3, #0
   31fae:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   31fb0:	69fb      	ldr	r3, [r7, #28]
   31fb2:	2b00      	cmp	r3, #0
   31fb4:	d100      	bne.n	31fb8 <_http_client_request+0x94>
   31fb6:	e346      	b.n	32646 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   31fb8:	69fb      	ldr	r3, [r7, #28]
   31fba:	2241      	movs	r2, #65	; 0x41
   31fbc:	5c9b      	ldrb	r3, [r3, r2]
   31fbe:	2201      	movs	r2, #1
   31fc0:	4013      	ands	r3, r2
   31fc2:	b2db      	uxtb	r3, r3
   31fc4:	2b00      	cmp	r3, #0
   31fc6:	d000      	beq.n	31fca <_http_client_request+0xa6>
   31fc8:	e33f      	b.n	3264a <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   31fca:	69fb      	ldr	r3, [r7, #28]
   31fcc:	33b0      	adds	r3, #176	; 0xb0
   31fce:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   31fd0:	69fb      	ldr	r3, [r7, #28]
   31fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31fd4:	2b03      	cmp	r3, #3
   31fd6:	d003      	beq.n	31fe0 <_http_client_request+0xbc>
   31fd8:	2b04      	cmp	r3, #4
   31fda:	d100      	bne.n	31fde <_http_client_request+0xba>
   31fdc:	e1b3      	b.n	32346 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   31fde:	e32f      	b.n	32640 <_http_client_request+0x71c>
		module->req.content_length = 0;
   31fe0:	69fb      	ldr	r3, [r7, #28]
   31fe2:	22cc      	movs	r2, #204	; 0xcc
   31fe4:	2100      	movs	r1, #0
   31fe6:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   31fe8:	69fb      	ldr	r3, [r7, #28]
   31fea:	22d0      	movs	r2, #208	; 0xd0
   31fec:	2100      	movs	r1, #0
   31fee:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   31ff0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31ff2:	69fb      	ldr	r3, [r7, #28]
   31ff4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   31ff6:	4c90      	ldr	r4, [pc, #576]	; (32238 <_http_client_request+0x314>)
   31ff8:	2334      	movs	r3, #52	; 0x34
   31ffa:	2018      	movs	r0, #24
   31ffc:	1838      	adds	r0, r7, r0
   31ffe:	18c0      	adds	r0, r0, r3
   32000:	69fb      	ldr	r3, [r7, #28]
   32002:	9300      	str	r3, [sp, #0]
   32004:	0023      	movs	r3, r4
   32006:	4c8d      	ldr	r4, [pc, #564]	; (3223c <_http_client_request+0x318>)
   32008:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   3200a:	69fb      	ldr	r3, [r7, #28]
   3200c:	22c8      	movs	r2, #200	; 0xc8
   3200e:	5c9b      	ldrb	r3, [r3, r2]
   32010:	2b01      	cmp	r3, #1
   32012:	d10a      	bne.n	3202a <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   32014:	498a      	ldr	r1, [pc, #552]	; (32240 <_http_client_request+0x31c>)
   32016:	2334      	movs	r3, #52	; 0x34
   32018:	2218      	movs	r2, #24
   3201a:	4694      	mov	ip, r2
   3201c:	44bc      	add	ip, r7
   3201e:	4463      	add	r3, ip
   32020:	2204      	movs	r2, #4
   32022:	0018      	movs	r0, r3
   32024:	4b87      	ldr	r3, [pc, #540]	; (32244 <_http_client_request+0x320>)
   32026:	4798      	blx	r3
   32028:	e04e      	b.n	320c8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   3202a:	69fb      	ldr	r3, [r7, #28]
   3202c:	22c8      	movs	r2, #200	; 0xc8
   3202e:	5c9b      	ldrb	r3, [r3, r2]
   32030:	2b02      	cmp	r3, #2
   32032:	d10a      	bne.n	3204a <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   32034:	4984      	ldr	r1, [pc, #528]	; (32248 <_http_client_request+0x324>)
   32036:	2334      	movs	r3, #52	; 0x34
   32038:	2218      	movs	r2, #24
   3203a:	4694      	mov	ip, r2
   3203c:	44bc      	add	ip, r7
   3203e:	4463      	add	r3, ip
   32040:	2205      	movs	r2, #5
   32042:	0018      	movs	r0, r3
   32044:	4b7f      	ldr	r3, [pc, #508]	; (32244 <_http_client_request+0x320>)
   32046:	4798      	blx	r3
   32048:	e03e      	b.n	320c8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   3204a:	69fb      	ldr	r3, [r7, #28]
   3204c:	22c8      	movs	r2, #200	; 0xc8
   3204e:	5c9b      	ldrb	r3, [r3, r2]
   32050:	2b03      	cmp	r3, #3
   32052:	d10a      	bne.n	3206a <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   32054:	497d      	ldr	r1, [pc, #500]	; (3224c <_http_client_request+0x328>)
   32056:	2334      	movs	r3, #52	; 0x34
   32058:	2218      	movs	r2, #24
   3205a:	4694      	mov	ip, r2
   3205c:	44bc      	add	ip, r7
   3205e:	4463      	add	r3, ip
   32060:	2207      	movs	r2, #7
   32062:	0018      	movs	r0, r3
   32064:	4b77      	ldr	r3, [pc, #476]	; (32244 <_http_client_request+0x320>)
   32066:	4798      	blx	r3
   32068:	e02e      	b.n	320c8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   3206a:	69fb      	ldr	r3, [r7, #28]
   3206c:	22c8      	movs	r2, #200	; 0xc8
   3206e:	5c9b      	ldrb	r3, [r3, r2]
   32070:	2b04      	cmp	r3, #4
   32072:	d10a      	bne.n	3208a <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   32074:	4976      	ldr	r1, [pc, #472]	; (32250 <_http_client_request+0x32c>)
   32076:	2334      	movs	r3, #52	; 0x34
   32078:	2218      	movs	r2, #24
   3207a:	4694      	mov	ip, r2
   3207c:	44bc      	add	ip, r7
   3207e:	4463      	add	r3, ip
   32080:	2204      	movs	r2, #4
   32082:	0018      	movs	r0, r3
   32084:	4b6f      	ldr	r3, [pc, #444]	; (32244 <_http_client_request+0x320>)
   32086:	4798      	blx	r3
   32088:	e01e      	b.n	320c8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   3208a:	69fb      	ldr	r3, [r7, #28]
   3208c:	22c8      	movs	r2, #200	; 0xc8
   3208e:	5c9b      	ldrb	r3, [r3, r2]
   32090:	2b05      	cmp	r3, #5
   32092:	d10a      	bne.n	320aa <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   32094:	496f      	ldr	r1, [pc, #444]	; (32254 <_http_client_request+0x330>)
   32096:	2334      	movs	r3, #52	; 0x34
   32098:	2218      	movs	r2, #24
   3209a:	4694      	mov	ip, r2
   3209c:	44bc      	add	ip, r7
   3209e:	4463      	add	r3, ip
   320a0:	2208      	movs	r2, #8
   320a2:	0018      	movs	r0, r3
   320a4:	4b67      	ldr	r3, [pc, #412]	; (32244 <_http_client_request+0x320>)
   320a6:	4798      	blx	r3
   320a8:	e00e      	b.n	320c8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   320aa:	69fb      	ldr	r3, [r7, #28]
   320ac:	22c8      	movs	r2, #200	; 0xc8
   320ae:	5c9b      	ldrb	r3, [r3, r2]
   320b0:	2b06      	cmp	r3, #6
   320b2:	d109      	bne.n	320c8 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   320b4:	4968      	ldr	r1, [pc, #416]	; (32258 <_http_client_request+0x334>)
   320b6:	2334      	movs	r3, #52	; 0x34
   320b8:	2218      	movs	r2, #24
   320ba:	4694      	mov	ip, r2
   320bc:	44bc      	add	ip, r7
   320be:	4463      	add	r3, ip
   320c0:	2205      	movs	r2, #5
   320c2:	0018      	movs	r0, r3
   320c4:	4b5f      	ldr	r3, [pc, #380]	; (32244 <_http_client_request+0x320>)
   320c6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   320c8:	69fb      	ldr	r3, [r7, #28]
   320ca:	3370      	adds	r3, #112	; 0x70
   320cc:	001c      	movs	r4, r3
   320ce:	69fb      	ldr	r3, [r7, #28]
   320d0:	3370      	adds	r3, #112	; 0x70
   320d2:	0018      	movs	r0, r3
   320d4:	4b61      	ldr	r3, [pc, #388]	; (3225c <_http_client_request+0x338>)
   320d6:	4798      	blx	r3
   320d8:	0002      	movs	r2, r0
   320da:	2334      	movs	r3, #52	; 0x34
   320dc:	2118      	movs	r1, #24
   320de:	468c      	mov	ip, r1
   320e0:	44bc      	add	ip, r7
   320e2:	4463      	add	r3, ip
   320e4:	0021      	movs	r1, r4
   320e6:	0018      	movs	r0, r3
   320e8:	4b56      	ldr	r3, [pc, #344]	; (32244 <_http_client_request+0x320>)
   320ea:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   320ec:	495c      	ldr	r1, [pc, #368]	; (32260 <_http_client_request+0x33c>)
   320ee:	2334      	movs	r3, #52	; 0x34
   320f0:	2218      	movs	r2, #24
   320f2:	4694      	mov	ip, r2
   320f4:	44bc      	add	ip, r7
   320f6:	4463      	add	r3, ip
   320f8:	220b      	movs	r2, #11
   320fa:	0018      	movs	r0, r3
   320fc:	4b51      	ldr	r3, [pc, #324]	; (32244 <_http_client_request+0x320>)
   320fe:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   32100:	4958      	ldr	r1, [pc, #352]	; (32264 <_http_client_request+0x340>)
   32102:	2334      	movs	r3, #52	; 0x34
   32104:	2218      	movs	r2, #24
   32106:	4694      	mov	ip, r2
   32108:	44bc      	add	ip, r7
   3210a:	4463      	add	r3, ip
   3210c:	220c      	movs	r2, #12
   3210e:	0018      	movs	r0, r3
   32110:	4b4c      	ldr	r3, [pc, #304]	; (32244 <_http_client_request+0x320>)
   32112:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   32114:	69fb      	ldr	r3, [r7, #28]
   32116:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   32118:	69fb      	ldr	r3, [r7, #28]
   3211a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   3211c:	0018      	movs	r0, r3
   3211e:	4b4f      	ldr	r3, [pc, #316]	; (3225c <_http_client_request+0x338>)
   32120:	4798      	blx	r3
   32122:	0002      	movs	r2, r0
   32124:	2334      	movs	r3, #52	; 0x34
   32126:	2118      	movs	r1, #24
   32128:	468c      	mov	ip, r1
   3212a:	44bc      	add	ip, r7
   3212c:	4463      	add	r3, ip
   3212e:	0021      	movs	r1, r4
   32130:	0018      	movs	r0, r3
   32132:	4b44      	ldr	r3, [pc, #272]	; (32244 <_http_client_request+0x320>)
   32134:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32136:	494c      	ldr	r1, [pc, #304]	; (32268 <_http_client_request+0x344>)
   32138:	2334      	movs	r3, #52	; 0x34
   3213a:	2218      	movs	r2, #24
   3213c:	4694      	mov	ip, r2
   3213e:	44bc      	add	ip, r7
   32140:	4463      	add	r3, ip
   32142:	2202      	movs	r2, #2
   32144:	0018      	movs	r0, r3
   32146:	4b3f      	ldr	r3, [pc, #252]	; (32244 <_http_client_request+0x320>)
   32148:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   3214a:	4948      	ldr	r1, [pc, #288]	; (3226c <_http_client_request+0x348>)
   3214c:	2334      	movs	r3, #52	; 0x34
   3214e:	2218      	movs	r2, #24
   32150:	4694      	mov	ip, r2
   32152:	44bc      	add	ip, r7
   32154:	4463      	add	r3, ip
   32156:	2206      	movs	r2, #6
   32158:	0018      	movs	r0, r3
   3215a:	4b3a      	ldr	r3, [pc, #232]	; (32244 <_http_client_request+0x320>)
   3215c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   3215e:	69fb      	ldr	r3, [r7, #28]
   32160:	1c5c      	adds	r4, r3, #1
   32162:	69fb      	ldr	r3, [r7, #28]
   32164:	3301      	adds	r3, #1
   32166:	0018      	movs	r0, r3
   32168:	4b3c      	ldr	r3, [pc, #240]	; (3225c <_http_client_request+0x338>)
   3216a:	4798      	blx	r3
   3216c:	0002      	movs	r2, r0
   3216e:	2334      	movs	r3, #52	; 0x34
   32170:	2118      	movs	r1, #24
   32172:	468c      	mov	ip, r1
   32174:	44bc      	add	ip, r7
   32176:	4463      	add	r3, ip
   32178:	0021      	movs	r1, r4
   3217a:	0018      	movs	r0, r3
   3217c:	4b31      	ldr	r3, [pc, #196]	; (32244 <_http_client_request+0x320>)
   3217e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32180:	4939      	ldr	r1, [pc, #228]	; (32268 <_http_client_request+0x344>)
   32182:	2334      	movs	r3, #52	; 0x34
   32184:	2218      	movs	r2, #24
   32186:	4694      	mov	ip, r2
   32188:	44bc      	add	ip, r7
   3218a:	4463      	add	r3, ip
   3218c:	2202      	movs	r2, #2
   3218e:	0018      	movs	r0, r3
   32190:	4b2c      	ldr	r3, [pc, #176]	; (32244 <_http_client_request+0x320>)
   32192:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   32194:	4936      	ldr	r1, [pc, #216]	; (32270 <_http_client_request+0x34c>)
   32196:	2334      	movs	r3, #52	; 0x34
   32198:	2218      	movs	r2, #24
   3219a:	4694      	mov	ip, r2
   3219c:	44bc      	add	ip, r7
   3219e:	4463      	add	r3, ip
   321a0:	2218      	movs	r2, #24
   321a2:	0018      	movs	r0, r3
   321a4:	4b27      	ldr	r3, [pc, #156]	; (32244 <_http_client_request+0x320>)
   321a6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   321a8:	4932      	ldr	r1, [pc, #200]	; (32274 <_http_client_request+0x350>)
   321aa:	2334      	movs	r3, #52	; 0x34
   321ac:	2218      	movs	r2, #24
   321ae:	4694      	mov	ip, r2
   321b0:	44bc      	add	ip, r7
   321b2:	4463      	add	r3, ip
   321b4:	2213      	movs	r2, #19
   321b6:	0018      	movs	r0, r3
   321b8:	4b22      	ldr	r3, [pc, #136]	; (32244 <_http_client_request+0x320>)
   321ba:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   321bc:	492e      	ldr	r1, [pc, #184]	; (32278 <_http_client_request+0x354>)
   321be:	2334      	movs	r3, #52	; 0x34
   321c0:	2218      	movs	r2, #24
   321c2:	4694      	mov	ip, r2
   321c4:	44bc      	add	ip, r7
   321c6:	4463      	add	r3, ip
   321c8:	2217      	movs	r2, #23
   321ca:	0018      	movs	r0, r3
   321cc:	4b1d      	ldr	r3, [pc, #116]	; (32244 <_http_client_request+0x320>)
   321ce:	4798      	blx	r3
		if (entity->read != NULL) {
   321d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   321d2:	68db      	ldr	r3, [r3, #12]
   321d4:	2b00      	cmp	r3, #0
   321d6:	d100      	bne.n	321da <_http_client_request+0x2b6>
   321d8:	e088      	b.n	322ec <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   321da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   321dc:	781b      	ldrb	r3, [r3, #0]
   321de:	2b00      	cmp	r3, #0
   321e0:	d00f      	beq.n	32202 <_http_client_request+0x2de>
				module->req.content_length = -1;
   321e2:	69fb      	ldr	r3, [r7, #28]
   321e4:	21cc      	movs	r1, #204	; 0xcc
   321e6:	2201      	movs	r2, #1
   321e8:	4252      	negs	r2, r2
   321ea:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   321ec:	4923      	ldr	r1, [pc, #140]	; (3227c <_http_client_request+0x358>)
   321ee:	2334      	movs	r3, #52	; 0x34
   321f0:	2218      	movs	r2, #24
   321f2:	4694      	mov	ip, r2
   321f4:	44bc      	add	ip, r7
   321f6:	4463      	add	r3, ip
   321f8:	221c      	movs	r2, #28
   321fa:	0018      	movs	r0, r3
   321fc:	4b11      	ldr	r3, [pc, #68]	; (32244 <_http_client_request+0x320>)
   321fe:	4798      	blx	r3
   32200:	e074      	b.n	322ec <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   32202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32204:	689b      	ldr	r3, [r3, #8]
   32206:	2b00      	cmp	r3, #0
   32208:	d070      	beq.n	322ec <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   3220a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3220c:	689a      	ldr	r2, [r3, #8]
   3220e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32210:	695b      	ldr	r3, [r3, #20]
   32212:	0018      	movs	r0, r3
   32214:	4790      	blx	r2
   32216:	0001      	movs	r1, r0
   32218:	69fb      	ldr	r3, [r7, #28]
   3221a:	22cc      	movs	r2, #204	; 0xcc
   3221c:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   3221e:	69fb      	ldr	r3, [r7, #28]
   32220:	22cc      	movs	r2, #204	; 0xcc
   32222:	589b      	ldr	r3, [r3, r2]
   32224:	2b00      	cmp	r3, #0
   32226:	da2b      	bge.n	32280 <_http_client_request+0x35c>
					module->req.content_length = 0;
   32228:	69fb      	ldr	r3, [r7, #28]
   3222a:	22cc      	movs	r2, #204	; 0xcc
   3222c:	2100      	movs	r1, #0
   3222e:	5099      	str	r1, [r3, r2]
   32230:	e05c      	b.n	322ec <_http_client_request+0x3c8>
   32232:	46c0      	nop			; (mov r8, r8)
   32234:	0003a8a4 	.word	0x0003a8a4
   32238:	00031e9d 	.word	0x00031e9d
   3223c:	00032e05 	.word	0x00032e05
   32240:	0003a7c8 	.word	0x0003a7c8
   32244:	00032e85 	.word	0x00032e85
   32248:	0003a7d0 	.word	0x0003a7d0
   3224c:	0003a7d8 	.word	0x0003a7d8
   32250:	0003a7e0 	.word	0x0003a7e0
   32254:	0003a7e8 	.word	0x0003a7e8
   32258:	0003a7f4 	.word	0x0003a7f4
   3225c:	000358fb 	.word	0x000358fb
   32260:	0003a7fc 	.word	0x0003a7fc
   32264:	0003a808 	.word	0x0003a808
   32268:	0003a818 	.word	0x0003a818
   3226c:	0003a81c 	.word	0x0003a81c
   32270:	0003a824 	.word	0x0003a824
   32274:	0003a840 	.word	0x0003a840
   32278:	0003a854 	.word	0x0003a854
   3227c:	0003a86c 	.word	0x0003a86c
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   32280:	69fb      	ldr	r3, [r7, #28]
   32282:	22cc      	movs	r2, #204	; 0xcc
   32284:	589b      	ldr	r3, [r3, r2]
   32286:	001a      	movs	r2, r3
   32288:	49e0      	ldr	r1, [pc, #896]	; (3260c <_http_client_request+0x6e8>)
   3228a:	2328      	movs	r3, #40	; 0x28
   3228c:	2018      	movs	r0, #24
   3228e:	4684      	mov	ip, r0
   32290:	44bc      	add	ip, r7
   32292:	4463      	add	r3, ip
   32294:	0018      	movs	r0, r3
   32296:	4bde      	ldr	r3, [pc, #888]	; (32610 <_http_client_request+0x6ec>)
   32298:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   3229a:	49de      	ldr	r1, [pc, #888]	; (32614 <_http_client_request+0x6f0>)
   3229c:	2334      	movs	r3, #52	; 0x34
   3229e:	2218      	movs	r2, #24
   322a0:	4694      	mov	ip, r2
   322a2:	44bc      	add	ip, r7
   322a4:	4463      	add	r3, ip
   322a6:	2210      	movs	r2, #16
   322a8:	0018      	movs	r0, r3
   322aa:	4bdb      	ldr	r3, [pc, #876]	; (32618 <_http_client_request+0x6f4>)
   322ac:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   322ae:	2328      	movs	r3, #40	; 0x28
   322b0:	2218      	movs	r2, #24
   322b2:	4694      	mov	ip, r2
   322b4:	44bc      	add	ip, r7
   322b6:	4463      	add	r3, ip
   322b8:	0018      	movs	r0, r3
   322ba:	4bd8      	ldr	r3, [pc, #864]	; (3261c <_http_client_request+0x6f8>)
   322bc:	4798      	blx	r3
   322be:	0002      	movs	r2, r0
   322c0:	2328      	movs	r3, #40	; 0x28
   322c2:	2118      	movs	r1, #24
   322c4:	1879      	adds	r1, r7, r1
   322c6:	18c9      	adds	r1, r1, r3
   322c8:	2334      	movs	r3, #52	; 0x34
   322ca:	2018      	movs	r0, #24
   322cc:	4684      	mov	ip, r0
   322ce:	44bc      	add	ip, r7
   322d0:	4463      	add	r3, ip
   322d2:	0018      	movs	r0, r3
   322d4:	4bd0      	ldr	r3, [pc, #832]	; (32618 <_http_client_request+0x6f4>)
   322d6:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   322d8:	49d1      	ldr	r1, [pc, #836]	; (32620 <_http_client_request+0x6fc>)
   322da:	2334      	movs	r3, #52	; 0x34
   322dc:	2218      	movs	r2, #24
   322de:	4694      	mov	ip, r2
   322e0:	44bc      	add	ip, r7
   322e2:	4463      	add	r3, ip
   322e4:	2202      	movs	r2, #2
   322e6:	0018      	movs	r0, r3
   322e8:	4bcb      	ldr	r3, [pc, #812]	; (32618 <_http_client_request+0x6f4>)
   322ea:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   322ec:	69fb      	ldr	r3, [r7, #28]
   322ee:	22d4      	movs	r2, #212	; 0xd4
   322f0:	589b      	ldr	r3, [r3, r2]
   322f2:	2b00      	cmp	r3, #0
   322f4:	d012      	beq.n	3231c <_http_client_request+0x3f8>
				module->req.ext_header,
   322f6:	69fb      	ldr	r3, [r7, #28]
   322f8:	22d4      	movs	r2, #212	; 0xd4
   322fa:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   322fc:	69fb      	ldr	r3, [r7, #28]
   322fe:	22d4      	movs	r2, #212	; 0xd4
   32300:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   32302:	0018      	movs	r0, r3
   32304:	4bc5      	ldr	r3, [pc, #788]	; (3261c <_http_client_request+0x6f8>)
   32306:	4798      	blx	r3
   32308:	0002      	movs	r2, r0
   3230a:	2334      	movs	r3, #52	; 0x34
   3230c:	2118      	movs	r1, #24
   3230e:	468c      	mov	ip, r1
   32310:	44bc      	add	ip, r7
   32312:	4463      	add	r3, ip
   32314:	0021      	movs	r1, r4
   32316:	0018      	movs	r0, r3
   32318:	4bbf      	ldr	r3, [pc, #764]	; (32618 <_http_client_request+0x6f4>)
   3231a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3231c:	49c0      	ldr	r1, [pc, #768]	; (32620 <_http_client_request+0x6fc>)
   3231e:	2334      	movs	r3, #52	; 0x34
   32320:	2218      	movs	r2, #24
   32322:	4694      	mov	ip, r2
   32324:	44bc      	add	ip, r7
   32326:	4463      	add	r3, ip
   32328:	2202      	movs	r2, #2
   3232a:	0018      	movs	r0, r3
   3232c:	4bba      	ldr	r3, [pc, #744]	; (32618 <_http_client_request+0x6f4>)
   3232e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   32330:	2334      	movs	r3, #52	; 0x34
   32332:	2218      	movs	r2, #24
   32334:	4694      	mov	ip, r2
   32336:	44bc      	add	ip, r7
   32338:	4463      	add	r3, ip
   3233a:	0018      	movs	r0, r3
   3233c:	4bb9      	ldr	r3, [pc, #740]	; (32624 <_http_client_request+0x700>)
   3233e:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   32340:	69fb      	ldr	r3, [r7, #28]
   32342:	2204      	movs	r2, #4
   32344:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   32346:	69fb      	ldr	r3, [r7, #28]
   32348:	22cc      	movs	r2, #204	; 0xcc
   3234a:	589b      	ldr	r3, [r3, r2]
   3234c:	2b00      	cmp	r3, #0
   3234e:	db00      	blt.n	32352 <_http_client_request+0x42e>
   32350:	e0c6      	b.n	324e0 <_http_client_request+0x5bc>
   32352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32354:	68db      	ldr	r3, [r3, #12]
   32356:	2b00      	cmp	r3, #0
   32358:	d100      	bne.n	3235c <_http_client_request+0x438>
   3235a:	e0c1      	b.n	324e0 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   3235c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3235e:	68dc      	ldr	r4, [r3, #12]
   32360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32362:	6958      	ldr	r0, [r3, #20]
   32364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32366:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   32368:	69fb      	ldr	r3, [r7, #28]
   3236a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   3236c:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   3236e:	69fb      	ldr	r3, [r7, #28]
   32370:	22d0      	movs	r2, #208	; 0xd0
   32372:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32374:	002a      	movs	r2, r5
   32376:	47a0      	blx	r4
   32378:	0003      	movs	r3, r0
   3237a:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   3237c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3237e:	2b00      	cmp	r3, #0
   32380:	da01      	bge.n	32386 <_http_client_request+0x462>
				size = 0;
   32382:	2300      	movs	r3, #0
   32384:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   32386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32388:	220a      	movs	r2, #10
   3238a:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   3238c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3238e:	220d      	movs	r2, #13
   32390:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   32392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32394:	3305      	adds	r3, #5
   32396:	6eba      	ldr	r2, [r7, #104]	; 0x68
   32398:	210d      	movs	r1, #13
   3239a:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   3239c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3239e:	3306      	adds	r3, #6
   323a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
   323a2:	210a      	movs	r1, #10
   323a4:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   323a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   323a8:	2b00      	cmp	r3, #0
   323aa:	db14      	blt.n	323d6 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   323ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   323ae:	3302      	adds	r3, #2
   323b0:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   323b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   323b4:	4a9c      	ldr	r2, [pc, #624]	; (32628 <_http_client_request+0x704>)
   323b6:	4013      	ands	r3, r2
   323b8:	d504      	bpl.n	323c4 <_http_client_request+0x4a0>
   323ba:	3b01      	subs	r3, #1
   323bc:	2210      	movs	r2, #16
   323be:	4252      	negs	r2, r2
   323c0:	4313      	orrs	r3, r2
   323c2:	3301      	adds	r3, #1
   323c4:	001a      	movs	r2, r3
   323c6:	2318      	movs	r3, #24
   323c8:	2118      	movs	r1, #24
   323ca:	468c      	mov	ip, r1
   323cc:	44bc      	add	ip, r7
   323ce:	4463      	add	r3, ip
   323d0:	5c9a      	ldrb	r2, [r3, r2]
   323d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   323d4:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   323d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   323d8:	2b0f      	cmp	r3, #15
   323da:	dd19      	ble.n	32410 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   323dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   323de:	3301      	adds	r3, #1
   323e0:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   323e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   323e4:	2b00      	cmp	r3, #0
   323e6:	da00      	bge.n	323ea <_http_client_request+0x4c6>
   323e8:	330f      	adds	r3, #15
   323ea:	111b      	asrs	r3, r3, #4
   323ec:	001a      	movs	r2, r3
   323ee:	4b8e      	ldr	r3, [pc, #568]	; (32628 <_http_client_request+0x704>)
   323f0:	4013      	ands	r3, r2
   323f2:	d504      	bpl.n	323fe <_http_client_request+0x4da>
   323f4:	3b01      	subs	r3, #1
   323f6:	2210      	movs	r2, #16
   323f8:	4252      	negs	r2, r2
   323fa:	4313      	orrs	r3, r2
   323fc:	3301      	adds	r3, #1
   323fe:	001a      	movs	r2, r3
   32400:	2318      	movs	r3, #24
   32402:	2118      	movs	r1, #24
   32404:	468c      	mov	ip, r1
   32406:	44bc      	add	ip, r7
   32408:	4463      	add	r3, ip
   3240a:	5c9a      	ldrb	r2, [r3, r2]
   3240c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3240e:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   32410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32412:	2bff      	cmp	r3, #255	; 0xff
   32414:	dd18      	ble.n	32448 <_http_client_request+0x524>
				ptr = buffer;
   32416:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32418:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   3241a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3241c:	2b00      	cmp	r3, #0
   3241e:	da00      	bge.n	32422 <_http_client_request+0x4fe>
   32420:	33ff      	adds	r3, #255	; 0xff
   32422:	121b      	asrs	r3, r3, #8
   32424:	001a      	movs	r2, r3
   32426:	4b80      	ldr	r3, [pc, #512]	; (32628 <_http_client_request+0x704>)
   32428:	4013      	ands	r3, r2
   3242a:	d504      	bpl.n	32436 <_http_client_request+0x512>
   3242c:	3b01      	subs	r3, #1
   3242e:	2210      	movs	r2, #16
   32430:	4252      	negs	r2, r2
   32432:	4313      	orrs	r3, r2
   32434:	3301      	adds	r3, #1
   32436:	001a      	movs	r2, r3
   32438:	2318      	movs	r3, #24
   3243a:	2118      	movs	r1, #24
   3243c:	468c      	mov	ip, r1
   3243e:	44bc      	add	ip, r7
   32440:	4463      	add	r3, ip
   32442:	5c9a      	ldrb	r2, [r3, r2]
   32444:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32446:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   32448:	69fb      	ldr	r3, [r7, #28]
   3244a:	2000      	movs	r0, #0
   3244c:	5618      	ldrsb	r0, [r3, r0]
   3244e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32450:	3303      	adds	r3, #3
   32452:	001a      	movs	r2, r3
   32454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32456:	1ad3      	subs	r3, r2, r3
   32458:	b29a      	uxth	r2, r3
   3245a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3245c:	b29b      	uxth	r3, r3
   3245e:	18d3      	adds	r3, r2, r3
   32460:	b29b      	uxth	r3, r3
   32462:	3304      	adds	r3, #4
   32464:	b29a      	uxth	r2, r3
   32466:	6f39      	ldr	r1, [r7, #112]	; 0x70
   32468:	2300      	movs	r3, #0
   3246a:	4c70      	ldr	r4, [pc, #448]	; (3262c <_http_client_request+0x708>)
   3246c:	47a0      	blx	r4
   3246e:	0003      	movs	r3, r0
   32470:	663b      	str	r3, [r7, #96]	; 0x60
   32472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32474:	2b00      	cmp	r3, #0
   32476:	da07      	bge.n	32488 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   32478:	2305      	movs	r3, #5
   3247a:	425a      	negs	r2, r3
   3247c:	69fb      	ldr	r3, [r7, #28]
   3247e:	0011      	movs	r1, r2
   32480:	0018      	movs	r0, r3
   32482:	4b6b      	ldr	r3, [pc, #428]	; (32630 <_http_client_request+0x70c>)
   32484:	4798      	blx	r3
				return;
   32486:	e0e1      	b.n	3264c <_http_client_request+0x728>
			module->req.sent_length += size;
   32488:	69fb      	ldr	r3, [r7, #28]
   3248a:	22d0      	movs	r2, #208	; 0xd0
   3248c:	589a      	ldr	r2, [r3, r2]
   3248e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32490:	18d2      	adds	r2, r2, r3
   32492:	69fb      	ldr	r3, [r7, #28]
   32494:	21d0      	movs	r1, #208	; 0xd0
   32496:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   32498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3249a:	2b00      	cmp	r3, #0
   3249c:	d000      	beq.n	324a0 <_http_client_request+0x57c>
   3249e:	e0c9      	b.n	32634 <_http_client_request+0x710>
				if (module->req.entity.close) {
   324a0:	69fb      	ldr	r3, [r7, #28]
   324a2:	22c0      	movs	r2, #192	; 0xc0
   324a4:	589b      	ldr	r3, [r3, r2]
   324a6:	2b00      	cmp	r3, #0
   324a8:	d007      	beq.n	324ba <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   324aa:	69fb      	ldr	r3, [r7, #28]
   324ac:	22c0      	movs	r2, #192	; 0xc0
   324ae:	589b      	ldr	r3, [r3, r2]
   324b0:	69fa      	ldr	r2, [r7, #28]
   324b2:	21c4      	movs	r1, #196	; 0xc4
   324b4:	5852      	ldr	r2, [r2, r1]
   324b6:	0010      	movs	r0, r2
   324b8:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   324ba:	69fb      	ldr	r3, [r7, #28]
   324bc:	2202      	movs	r2, #2
   324be:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   324c0:	69fb      	ldr	r3, [r7, #28]
   324c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   324c4:	2b00      	cmp	r3, #0
   324c6:	d100      	bne.n	324ca <_http_client_request+0x5a6>
   324c8:	e0b5      	b.n	32636 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   324ca:	69fb      	ldr	r3, [r7, #28]
   324cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   324ce:	220c      	movs	r2, #12
   324d0:	2118      	movs	r1, #24
   324d2:	468c      	mov	ip, r1
   324d4:	44bc      	add	ip, r7
   324d6:	4462      	add	r2, ip
   324d8:	69f8      	ldr	r0, [r7, #28]
   324da:	2101      	movs	r1, #1
   324dc:	4798      	blx	r3
				break;
   324de:	e0aa      	b.n	32636 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   324e0:	69fb      	ldr	r3, [r7, #28]
   324e2:	22cc      	movs	r2, #204	; 0xcc
   324e4:	589b      	ldr	r3, [r3, r2]
   324e6:	2b00      	cmp	r3, #0
   324e8:	dc00      	bgt.n	324ec <_http_client_request+0x5c8>
   324ea:	e07c      	b.n	325e6 <_http_client_request+0x6c2>
   324ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   324ee:	68db      	ldr	r3, [r3, #12]
   324f0:	2b00      	cmp	r3, #0
   324f2:	d100      	bne.n	324f6 <_http_client_request+0x5d2>
   324f4:	e077      	b.n	325e6 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   324f6:	69fb      	ldr	r3, [r7, #28]
   324f8:	22d0      	movs	r2, #208	; 0xd0
   324fa:	589a      	ldr	r2, [r3, r2]
   324fc:	69fb      	ldr	r3, [r7, #28]
   324fe:	21cc      	movs	r1, #204	; 0xcc
   32500:	585b      	ldr	r3, [r3, r1]
   32502:	429a      	cmp	r2, r3
   32504:	db1f      	blt.n	32546 <_http_client_request+0x622>
				if (module->req.entity.close) {
   32506:	69fb      	ldr	r3, [r7, #28]
   32508:	22c0      	movs	r2, #192	; 0xc0
   3250a:	589b      	ldr	r3, [r3, r2]
   3250c:	2b00      	cmp	r3, #0
   3250e:	d007      	beq.n	32520 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   32510:	69fb      	ldr	r3, [r7, #28]
   32512:	22c0      	movs	r2, #192	; 0xc0
   32514:	589b      	ldr	r3, [r3, r2]
   32516:	69fa      	ldr	r2, [r7, #28]
   32518:	21c4      	movs	r1, #196	; 0xc4
   3251a:	5852      	ldr	r2, [r2, r1]
   3251c:	0010      	movs	r0, r2
   3251e:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   32520:	69fb      	ldr	r3, [r7, #28]
   32522:	2202      	movs	r2, #2
   32524:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   32526:	69fb      	ldr	r3, [r7, #28]
   32528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3252a:	2b00      	cmp	r3, #0
   3252c:	d100      	bne.n	32530 <_http_client_request+0x60c>
   3252e:	e084      	b.n	3263a <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32530:	69fb      	ldr	r3, [r7, #28]
   32532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32534:	220c      	movs	r2, #12
   32536:	2118      	movs	r1, #24
   32538:	468c      	mov	ip, r1
   3253a:	44bc      	add	ip, r7
   3253c:	4462      	add	r2, ip
   3253e:	69f8      	ldr	r0, [r7, #28]
   32540:	2101      	movs	r1, #1
   32542:	4798      	blx	r3
				break;
   32544:	e079      	b.n	3263a <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   32546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32548:	68dc      	ldr	r4, [r3, #12]
   3254a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3254c:	6958      	ldr	r0, [r3, #20]
   3254e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   32550:	69fb      	ldr	r3, [r7, #28]
   32552:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   32554:	69fb      	ldr	r3, [r7, #28]
   32556:	22d0      	movs	r2, #208	; 0xd0
   32558:	589b      	ldr	r3, [r3, r2]
   3255a:	002a      	movs	r2, r5
   3255c:	47a0      	blx	r4
   3255e:	0003      	movs	r3, r0
   32560:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   32562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32564:	2b00      	cmp	r3, #0
   32566:	da0d      	bge.n	32584 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   32568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3256a:	2b00      	cmp	r3, #0
   3256c:	d102      	bne.n	32574 <_http_client_request+0x650>
   3256e:	234d      	movs	r3, #77	; 0x4d
   32570:	425b      	negs	r3, r3
   32572:	e001      	b.n	32578 <_http_client_request+0x654>
   32574:	2305      	movs	r3, #5
   32576:	425b      	negs	r3, r3
   32578:	69fa      	ldr	r2, [r7, #28]
   3257a:	0019      	movs	r1, r3
   3257c:	0010      	movs	r0, r2
   3257e:	4b2c      	ldr	r3, [pc, #176]	; (32630 <_http_client_request+0x70c>)
   32580:	4798      	blx	r3
			if (size < 0) {
   32582:	e057      	b.n	32634 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   32584:	69fb      	ldr	r3, [r7, #28]
   32586:	22cc      	movs	r2, #204	; 0xcc
   32588:	589a      	ldr	r2, [r3, r2]
   3258a:	69fb      	ldr	r3, [r7, #28]
   3258c:	21d0      	movs	r1, #208	; 0xd0
   3258e:	585b      	ldr	r3, [r3, r1]
   32590:	1ad2      	subs	r2, r2, r3
   32592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32594:	429a      	cmp	r2, r3
   32596:	da07      	bge.n	325a8 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   32598:	69fb      	ldr	r3, [r7, #28]
   3259a:	22cc      	movs	r2, #204	; 0xcc
   3259c:	589a      	ldr	r2, [r3, r2]
   3259e:	69fb      	ldr	r3, [r7, #28]
   325a0:	21d0      	movs	r1, #208	; 0xd0
   325a2:	585b      	ldr	r3, [r3, r1]
   325a4:	1ad3      	subs	r3, r2, r3
   325a6:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   325a8:	69fb      	ldr	r3, [r7, #28]
   325aa:	2000      	movs	r0, #0
   325ac:	5618      	ldrsb	r0, [r3, r0]
   325ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   325b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325b2:	b29a      	uxth	r2, r3
   325b4:	2300      	movs	r3, #0
   325b6:	4c1d      	ldr	r4, [pc, #116]	; (3262c <_http_client_request+0x708>)
   325b8:	47a0      	blx	r4
   325ba:	0003      	movs	r3, r0
   325bc:	663b      	str	r3, [r7, #96]	; 0x60
   325be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   325c0:	2b00      	cmp	r3, #0
   325c2:	da07      	bge.n	325d4 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   325c4:	2305      	movs	r3, #5
   325c6:	425a      	negs	r2, r3
   325c8:	69fb      	ldr	r3, [r7, #28]
   325ca:	0011      	movs	r1, r2
   325cc:	0018      	movs	r0, r3
   325ce:	4b18      	ldr	r3, [pc, #96]	; (32630 <_http_client_request+0x70c>)
   325d0:	4798      	blx	r3
					return;
   325d2:	e03b      	b.n	3264c <_http_client_request+0x728>
				module->req.sent_length += size;
   325d4:	69fb      	ldr	r3, [r7, #28]
   325d6:	22d0      	movs	r2, #208	; 0xd0
   325d8:	589a      	ldr	r2, [r3, r2]
   325da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325dc:	18d2      	adds	r2, r2, r3
   325de:	69fb      	ldr	r3, [r7, #28]
   325e0:	21d0      	movs	r1, #208	; 0xd0
   325e2:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   325e4:	e026      	b.n	32634 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   325e6:	69fb      	ldr	r3, [r7, #28]
   325e8:	2202      	movs	r2, #2
   325ea:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   325ec:	69fb      	ldr	r3, [r7, #28]
   325ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   325f0:	2b00      	cmp	r3, #0
   325f2:	d024      	beq.n	3263e <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   325f4:	69fb      	ldr	r3, [r7, #28]
   325f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   325f8:	220c      	movs	r2, #12
   325fa:	2118      	movs	r1, #24
   325fc:	468c      	mov	ip, r1
   325fe:	44bc      	add	ip, r7
   32600:	4462      	add	r2, ip
   32602:	69f8      	ldr	r0, [r7, #28]
   32604:	2101      	movs	r1, #1
   32606:	4798      	blx	r3
			break;
   32608:	e019      	b.n	3263e <_http_client_request+0x71a>
   3260a:	46c0      	nop			; (mov r8, r8)
   3260c:	0003a88c 	.word	0x0003a88c
   32610:	00035801 	.word	0x00035801
   32614:	0003a890 	.word	0x0003a890
   32618:	00032e85 	.word	0x00032e85
   3261c:	000358fb 	.word	0x000358fb
   32620:	0003a818 	.word	0x0003a818
   32624:	00032ec1 	.word	0x00032ec1
   32628:	8000000f 	.word	0x8000000f
   3262c:	00026409 	.word	0x00026409
   32630:	00031dd1 	.word	0x00031dd1
		break;
   32634:	e004      	b.n	32640 <_http_client_request+0x71c>
				break;
   32636:	46c0      	nop			; (mov r8, r8)
   32638:	e002      	b.n	32640 <_http_client_request+0x71c>
				break;
   3263a:	46c0      	nop			; (mov r8, r8)
   3263c:	e000      	b.n	32640 <_http_client_request+0x71c>
			break;
   3263e:	46c0      	nop			; (mov r8, r8)
   32640:	69bb      	ldr	r3, [r7, #24]
   32642:	469d      	mov	sp, r3
   32644:	e004      	b.n	32650 <_http_client_request+0x72c>
		return;
   32646:	46c0      	nop			; (mov r8, r8)
   32648:	e000      	b.n	3264c <_http_client_request+0x728>
		return;
   3264a:	46c0      	nop			; (mov r8, r8)
   3264c:	69bb      	ldr	r3, [r7, #24]
   3264e:	469d      	mov	sp, r3
	}
}
   32650:	46bd      	mov	sp, r7
   32652:	b01e      	add	sp, #120	; 0x78
   32654:	bc04      	pop	{r2}
   32656:	4690      	mov	r8, r2
   32658:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3265a:	46c0      	nop			; (mov r8, r8)

0003265c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   3265c:	b590      	push	{r4, r7, lr}
   3265e:	b083      	sub	sp, #12
   32660:	af00      	add	r7, sp, #0
   32662:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   32664:	687b      	ldr	r3, [r7, #4]
   32666:	2b00      	cmp	r3, #0
   32668:	d021      	beq.n	326ae <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   3266a:	687b      	ldr	r3, [r7, #4]
   3266c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3266e:	687b      	ldr	r3, [r7, #4]
   32670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32672:	429a      	cmp	r2, r3
   32674:	d307      	bcc.n	32686 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   32676:	238b      	movs	r3, #139	; 0x8b
   32678:	425a      	negs	r2, r3
   3267a:	687b      	ldr	r3, [r7, #4]
   3267c:	0011      	movs	r1, r2
   3267e:	0018      	movs	r0, r3
   32680:	4b0d      	ldr	r3, [pc, #52]	; (326b8 <_http_client_recv_packet+0x5c>)
   32682:	4798      	blx	r3
		return;
   32684:	e014      	b.n	326b0 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   32686:	687b      	ldr	r3, [r7, #4]
   32688:	2000      	movs	r0, #0
   3268a:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   3268c:	687b      	ldr	r3, [r7, #4]
   3268e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   32690:	687b      	ldr	r3, [r7, #4]
   32692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32694:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   32696:	687b      	ldr	r3, [r7, #4]
   32698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   3269a:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   3269c:	687b      	ldr	r3, [r7, #4]
   3269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   326a0:	b29b      	uxth	r3, r3
   326a2:	1ad3      	subs	r3, r2, r3
   326a4:	b29a      	uxth	r2, r3
   326a6:	2300      	movs	r3, #0
   326a8:	4c04      	ldr	r4, [pc, #16]	; (326bc <_http_client_recv_packet+0x60>)
   326aa:	47a0      	blx	r4
   326ac:	e000      	b.n	326b0 <_http_client_recv_packet+0x54>
		return;
   326ae:	46c0      	nop			; (mov r8, r8)
}
   326b0:	46bd      	mov	sp, r7
   326b2:	b003      	add	sp, #12
   326b4:	bd90      	pop	{r4, r7, pc}
   326b6:	46c0      	nop			; (mov r8, r8)
   326b8:	00031dd1 	.word	0x00031dd1
   326bc:	0002656d 	.word	0x0002656d

000326c0 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   326c0:	b580      	push	{r7, lr}
   326c2:	b082      	sub	sp, #8
   326c4:	af00      	add	r7, sp, #0
   326c6:	6078      	str	r0, [r7, #4]
   326c8:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   326ca:	687b      	ldr	r3, [r7, #4]
   326cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   326ce:	683b      	ldr	r3, [r7, #0]
   326d0:	18d2      	adds	r2, r2, r3
   326d2:	687b      	ldr	r3, [r7, #4]
   326d4:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   326d6:	687b      	ldr	r3, [r7, #4]
   326d8:	2258      	movs	r2, #88	; 0x58
   326da:	5a9b      	ldrh	r3, [r3, r2]
   326dc:	2b00      	cmp	r3, #0
   326de:	d007      	beq.n	326f0 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   326e0:	687b      	ldr	r3, [r7, #4]
   326e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   326e4:	687b      	ldr	r3, [r7, #4]
   326e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   326e8:	0019      	movs	r1, r3
   326ea:	0010      	movs	r0, r2
   326ec:	4b06      	ldr	r3, [pc, #24]	; (32708 <_http_client_recved_packet+0x48>)
   326ee:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   326f0:	46c0      	nop			; (mov r8, r8)
   326f2:	687b      	ldr	r3, [r7, #4]
   326f4:	0018      	movs	r0, r3
   326f6:	4b05      	ldr	r3, [pc, #20]	; (3270c <_http_client_recved_packet+0x4c>)
   326f8:	4798      	blx	r3
   326fa:	1e03      	subs	r3, r0, #0
   326fc:	d1f9      	bne.n	326f2 <_http_client_recved_packet+0x32>
}
   326fe:	46c0      	nop			; (mov r8, r8)
   32700:	46bd      	mov	sp, r7
   32702:	b002      	add	sp, #8
   32704:	bd80      	pop	{r7, pc}
   32706:	46c0      	nop			; (mov r8, r8)
   32708:	0003317d 	.word	0x0003317d
   3270c:	00032711 	.word	0x00032711

00032710 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   32710:	b580      	push	{r7, lr}
   32712:	b082      	sub	sp, #8
   32714:	af00      	add	r7, sp, #0
   32716:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   32718:	687b      	ldr	r3, [r7, #4]
   3271a:	22d8      	movs	r2, #216	; 0xd8
   3271c:	589b      	ldr	r3, [r3, r2]
   3271e:	2b00      	cmp	r3, #0
   32720:	d002      	beq.n	32728 <_http_client_handle_response+0x18>
   32722:	2b01      	cmp	r3, #1
   32724:	d006      	beq.n	32734 <_http_client_handle_response+0x24>
   32726:	e00b      	b.n	32740 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   32728:	687b      	ldr	r3, [r7, #4]
   3272a:	0018      	movs	r0, r3
   3272c:	4b07      	ldr	r3, [pc, #28]	; (3274c <_http_client_handle_response+0x3c>)
   3272e:	4798      	blx	r3
   32730:	0003      	movs	r3, r0
   32732:	e006      	b.n	32742 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   32734:	687b      	ldr	r3, [r7, #4]
   32736:	0018      	movs	r0, r3
   32738:	4b05      	ldr	r3, [pc, #20]	; (32750 <_http_client_handle_response+0x40>)
   3273a:	4798      	blx	r3
   3273c:	0003      	movs	r3, r0
   3273e:	e000      	b.n	32742 <_http_client_handle_response+0x32>
	}
	return 0;
   32740:	2300      	movs	r3, #0
}
   32742:	0018      	movs	r0, r3
   32744:	46bd      	mov	sp, r7
   32746:	b002      	add	sp, #8
   32748:	bd80      	pop	{r7, pc}
   3274a:	46c0      	nop			; (mov r8, r8)
   3274c:	00032755 	.word	0x00032755
   32750:	00032c0d 	.word	0x00032c0d

00032754 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   32754:	b590      	push	{r4, r7, lr}
   32756:	b08b      	sub	sp, #44	; 0x2c
   32758:	af00      	add	r7, sp, #0
   3275a:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   3275c:	687b      	ldr	r3, [r7, #4]
   3275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32760:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32762:	4b9a      	ldr	r3, [pc, #616]	; (329cc <_http_client_handle_header+0x278>)
   32764:	681a      	ldr	r2, [r3, #0]
   32766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32768:	0011      	movs	r1, r2
   3276a:	0018      	movs	r0, r3
   3276c:	4b98      	ldr	r3, [pc, #608]	; (329d0 <_http_client_handle_header+0x27c>)
   3276e:	4798      	blx	r3
   32770:	0003      	movs	r3, r0
   32772:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   32774:	69bb      	ldr	r3, [r7, #24]
   32776:	2b00      	cmp	r3, #0
   32778:	d007      	beq.n	3278a <_http_client_handle_header+0x36>
   3277a:	687b      	ldr	r3, [r7, #4]
   3277c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3277e:	687b      	ldr	r3, [r7, #4]
   32780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32782:	18d2      	adds	r2, r2, r3
   32784:	69bb      	ldr	r3, [r7, #24]
   32786:	429a      	cmp	r2, r3
   32788:	d807      	bhi.n	3279a <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   3278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3278c:	687b      	ldr	r3, [r7, #4]
   3278e:	0011      	movs	r1, r2
   32790:	0018      	movs	r0, r3
   32792:	4b90      	ldr	r3, [pc, #576]	; (329d4 <_http_client_handle_header+0x280>)
   32794:	4798      	blx	r3
			return 0;
   32796:	2300      	movs	r3, #0
   32798:	e114      	b.n	329c4 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   3279a:	4b8c      	ldr	r3, [pc, #560]	; (329cc <_http_client_handle_header+0x278>)
   3279c:	681c      	ldr	r4, [r3, #0]
   3279e:	4b8b      	ldr	r3, [pc, #556]	; (329cc <_http_client_handle_header+0x278>)
   327a0:	681b      	ldr	r3, [r3, #0]
   327a2:	0018      	movs	r0, r3
   327a4:	4b8c      	ldr	r3, [pc, #560]	; (329d8 <_http_client_handle_header+0x284>)
   327a6:	4798      	blx	r3
   327a8:	0002      	movs	r2, r0
   327aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   327ac:	0021      	movs	r1, r4
   327ae:	0018      	movs	r0, r3
   327b0:	4b8a      	ldr	r3, [pc, #552]	; (329dc <_http_client_handle_header+0x288>)
   327b2:	4798      	blx	r3
   327b4:	1e03      	subs	r3, r0, #0
   327b6:	d15d      	bne.n	32874 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   327b8:	4b84      	ldr	r3, [pc, #528]	; (329cc <_http_client_handle_header+0x278>)
   327ba:	681b      	ldr	r3, [r3, #0]
   327bc:	0018      	movs	r0, r3
   327be:	4b86      	ldr	r3, [pc, #536]	; (329d8 <_http_client_handle_header+0x284>)
   327c0:	4798      	blx	r3
   327c2:	0002      	movs	r2, r0
   327c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   327c6:	189a      	adds	r2, r3, r2
   327c8:	687b      	ldr	r3, [r7, #4]
   327ca:	0011      	movs	r1, r2
   327cc:	0018      	movs	r0, r3
   327ce:	4b81      	ldr	r3, [pc, #516]	; (329d4 <_http_client_handle_header+0x280>)
   327d0:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   327d2:	687b      	ldr	r3, [r7, #4]
   327d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   327d6:	2b00      	cmp	r3, #0
   327d8:	d046      	beq.n	32868 <_http_client_handle_header+0x114>
   327da:	687b      	ldr	r3, [r7, #4]
   327dc:	22e4      	movs	r2, #228	; 0xe4
   327de:	5a9b      	ldrh	r3, [r3, r2]
   327e0:	2b00      	cmp	r3, #0
   327e2:	d041      	beq.n	32868 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   327e4:	687b      	ldr	r3, [r7, #4]
   327e6:	22dc      	movs	r2, #220	; 0xdc
   327e8:	589b      	ldr	r3, [r3, r2]
   327ea:	2b00      	cmp	r3, #0
   327ec:	da19      	bge.n	32822 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   327ee:	687b      	ldr	r3, [r7, #4]
   327f0:	22e4      	movs	r2, #228	; 0xe4
   327f2:	5a9a      	ldrh	r2, [r3, r2]
   327f4:	230c      	movs	r3, #12
   327f6:	18fb      	adds	r3, r7, r3
   327f8:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   327fa:	230c      	movs	r3, #12
   327fc:	18fb      	adds	r3, r7, r3
   327fe:	2201      	movs	r2, #1
   32800:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   32802:	687b      	ldr	r3, [r7, #4]
   32804:	22e0      	movs	r2, #224	; 0xe0
   32806:	2100      	movs	r1, #0
   32808:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   3280a:	230c      	movs	r3, #12
   3280c:	18fb      	adds	r3, r7, r3
   3280e:	2200      	movs	r2, #0
   32810:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32812:	687b      	ldr	r3, [r7, #4]
   32814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32816:	220c      	movs	r2, #12
   32818:	18ba      	adds	r2, r7, r2
   3281a:	6878      	ldr	r0, [r7, #4]
   3281c:	2102      	movs	r1, #2
   3281e:	4798      	blx	r3
   32820:	e022      	b.n	32868 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   32822:	687b      	ldr	r3, [r7, #4]
   32824:	22dc      	movs	r2, #220	; 0xdc
   32826:	589a      	ldr	r2, [r3, r2]
   32828:	687b      	ldr	r3, [r7, #4]
   3282a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3282c:	429a      	cmp	r2, r3
   3282e:	dd1b      	ble.n	32868 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   32830:	687b      	ldr	r3, [r7, #4]
   32832:	22e4      	movs	r2, #228	; 0xe4
   32834:	5a9a      	ldrh	r2, [r3, r2]
   32836:	230c      	movs	r3, #12
   32838:	18fb      	adds	r3, r7, r3
   3283a:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   3283c:	687b      	ldr	r3, [r7, #4]
   3283e:	22dc      	movs	r2, #220	; 0xdc
   32840:	589b      	ldr	r3, [r3, r2]
   32842:	001a      	movs	r2, r3
   32844:	230c      	movs	r3, #12
   32846:	18fb      	adds	r3, r7, r3
   32848:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   3284a:	230c      	movs	r3, #12
   3284c:	18fb      	adds	r3, r7, r3
   3284e:	2200      	movs	r2, #0
   32850:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   32852:	687b      	ldr	r3, [r7, #4]
   32854:	22e0      	movs	r2, #224	; 0xe0
   32856:	2100      	movs	r1, #0
   32858:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3285a:	687b      	ldr	r3, [r7, #4]
   3285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3285e:	220c      	movs	r2, #12
   32860:	18ba      	adds	r2, r7, r2
   32862:	6878      	ldr	r0, [r7, #4]
   32864:	2102      	movs	r1, #2
   32866:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   32868:	687b      	ldr	r3, [r7, #4]
   3286a:	22d8      	movs	r2, #216	; 0xd8
   3286c:	2101      	movs	r1, #1
   3286e:	5099      	str	r1, [r3, r2]
			return 1;
   32870:	2301      	movs	r3, #1
   32872:	e0a7      	b.n	329c4 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   32874:	495a      	ldr	r1, [pc, #360]	; (329e0 <_http_client_handle_header+0x28c>)
   32876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32878:	2210      	movs	r2, #16
   3287a:	0018      	movs	r0, r3
   3287c:	4b57      	ldr	r3, [pc, #348]	; (329dc <_http_client_handle_header+0x288>)
   3287e:	4798      	blx	r3
   32880:	1e03      	subs	r3, r0, #0
   32882:	d109      	bne.n	32898 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   32884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32886:	3310      	adds	r3, #16
   32888:	0018      	movs	r0, r3
   3288a:	4b56      	ldr	r3, [pc, #344]	; (329e4 <_http_client_handle_header+0x290>)
   3288c:	4798      	blx	r3
   3288e:	0001      	movs	r1, r0
   32890:	687b      	ldr	r3, [r7, #4]
   32892:	22dc      	movs	r2, #220	; 0xdc
   32894:	5099      	str	r1, [r3, r2]
   32896:	e08b      	b.n	329b0 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   32898:	4953      	ldr	r1, [pc, #332]	; (329e8 <_http_client_handle_header+0x294>)
   3289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3289c:	2213      	movs	r2, #19
   3289e:	0018      	movs	r0, r3
   328a0:	4b4e      	ldr	r3, [pc, #312]	; (329dc <_http_client_handle_header+0x288>)
   328a2:	4798      	blx	r3
   328a4:	1e03      	subs	r3, r0, #0
   328a6:	d127      	bne.n	328f8 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   328a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   328aa:	3313      	adds	r3, #19
   328ac:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   328ae:	e01e      	b.n	328ee <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   328b0:	6a3b      	ldr	r3, [r7, #32]
   328b2:	781b      	ldrb	r3, [r3, #0]
   328b4:	2b20      	cmp	r3, #32
   328b6:	d103      	bne.n	328c0 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   328b8:	6a3b      	ldr	r3, [r7, #32]
   328ba:	3301      	adds	r3, #1
   328bc:	623b      	str	r3, [r7, #32]
   328be:	e016      	b.n	328ee <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   328c0:	6a3b      	ldr	r3, [r7, #32]
   328c2:	781b      	ldrb	r3, [r3, #0]
   328c4:	2b43      	cmp	r3, #67	; 0x43
   328c6:	d003      	beq.n	328d0 <_http_client_handle_header+0x17c>
   328c8:	6a3b      	ldr	r3, [r7, #32]
   328ca:	781b      	ldrb	r3, [r3, #0]
   328cc:	2b63      	cmp	r3, #99	; 0x63
   328ce:	d105      	bne.n	328dc <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   328d0:	687b      	ldr	r3, [r7, #4]
   328d2:	21cc      	movs	r1, #204	; 0xcc
   328d4:	2201      	movs	r2, #1
   328d6:	4252      	negs	r2, r2
   328d8:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   328da:	e069      	b.n	329b0 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   328dc:	2386      	movs	r3, #134	; 0x86
   328de:	425a      	negs	r2, r3
   328e0:	687b      	ldr	r3, [r7, #4]
   328e2:	0011      	movs	r1, r2
   328e4:	0018      	movs	r0, r3
   328e6:	4b41      	ldr	r3, [pc, #260]	; (329ec <_http_client_handle_header+0x298>)
   328e8:	4798      	blx	r3
					return 0;
   328ea:	2300      	movs	r3, #0
   328ec:	e06a      	b.n	329c4 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   328ee:	69ba      	ldr	r2, [r7, #24]
   328f0:	6a3b      	ldr	r3, [r7, #32]
   328f2:	429a      	cmp	r2, r3
   328f4:	d8dc      	bhi.n	328b0 <_http_client_handle_header+0x15c>
   328f6:	e05b      	b.n	329b0 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   328f8:	493d      	ldr	r1, [pc, #244]	; (329f0 <_http_client_handle_header+0x29c>)
   328fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   328fc:	220c      	movs	r2, #12
   328fe:	0018      	movs	r0, r3
   32900:	4b36      	ldr	r3, [pc, #216]	; (329dc <_http_client_handle_header+0x288>)
   32902:	4798      	blx	r3
   32904:	1e03      	subs	r3, r0, #0
   32906:	d126      	bne.n	32956 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   32908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3290a:	330c      	adds	r3, #12
   3290c:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3290e:	e01d      	b.n	3294c <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   32910:	69fb      	ldr	r3, [r7, #28]
   32912:	781b      	ldrb	r3, [r3, #0]
   32914:	2b20      	cmp	r3, #32
   32916:	d103      	bne.n	32920 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32918:	69fb      	ldr	r3, [r7, #28]
   3291a:	3301      	adds	r3, #1
   3291c:	61fb      	str	r3, [r7, #28]
   3291e:	e015      	b.n	3294c <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   32920:	69fb      	ldr	r3, [r7, #28]
   32922:	781b      	ldrb	r3, [r3, #0]
   32924:	2b4b      	cmp	r3, #75	; 0x4b
   32926:	d003      	beq.n	32930 <_http_client_handle_header+0x1dc>
   32928:	69fb      	ldr	r3, [r7, #28]
   3292a:	781b      	ldrb	r3, [r3, #0]
   3292c:	2b6b      	cmp	r3, #107	; 0x6b
   3292e:	d106      	bne.n	3293e <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   32930:	687b      	ldr	r3, [r7, #4]
   32932:	2241      	movs	r2, #65	; 0x41
   32934:	5c99      	ldrb	r1, [r3, r2]
   32936:	2002      	movs	r0, #2
   32938:	4301      	orrs	r1, r0
   3293a:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   3293c:	e038      	b.n	329b0 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   3293e:	687b      	ldr	r3, [r7, #4]
   32940:	2241      	movs	r2, #65	; 0x41
   32942:	5c99      	ldrb	r1, [r3, r2]
   32944:	2002      	movs	r0, #2
   32946:	4381      	bics	r1, r0
   32948:	5499      	strb	r1, [r3, r2]
				break;
   3294a:	e031      	b.n	329b0 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3294c:	69ba      	ldr	r2, [r7, #24]
   3294e:	69fb      	ldr	r3, [r7, #28]
   32950:	429a      	cmp	r2, r3
   32952:	d8dd      	bhi.n	32910 <_http_client_handle_header+0x1bc>
   32954:	e02c      	b.n	329b0 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   32956:	4927      	ldr	r1, [pc, #156]	; (329f4 <_http_client_handle_header+0x2a0>)
   32958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3295a:	2205      	movs	r2, #5
   3295c:	0018      	movs	r0, r3
   3295e:	4b1f      	ldr	r3, [pc, #124]	; (329dc <_http_client_handle_header+0x288>)
   32960:	4798      	blx	r3
   32962:	1e03      	subs	r3, r0, #0
   32964:	d124      	bne.n	329b0 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   32966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32968:	3309      	adds	r3, #9
   3296a:	0018      	movs	r0, r3
   3296c:	4b1d      	ldr	r3, [pc, #116]	; (329e4 <_http_client_handle_header+0x290>)
   3296e:	4798      	blx	r3
   32970:	0003      	movs	r3, r0
   32972:	b299      	uxth	r1, r3
   32974:	687b      	ldr	r3, [r7, #4]
   32976:	22e4      	movs	r2, #228	; 0xe4
   32978:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   3297a:	687b      	ldr	r3, [r7, #4]
   3297c:	22dc      	movs	r2, #220	; 0xdc
   3297e:	2100      	movs	r1, #0
   32980:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   32982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32984:	3305      	adds	r3, #5
   32986:	781b      	ldrb	r3, [r3, #0]
   32988:	2b31      	cmp	r3, #49	; 0x31
   3298a:	d804      	bhi.n	32996 <_http_client_handle_header+0x242>
   3298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3298e:	3307      	adds	r3, #7
   32990:	781b      	ldrb	r3, [r3, #0]
   32992:	2b30      	cmp	r3, #48	; 0x30
   32994:	d906      	bls.n	329a4 <_http_client_handle_header+0x250>
				module->permanent = 1;
   32996:	687b      	ldr	r3, [r7, #4]
   32998:	2241      	movs	r2, #65	; 0x41
   3299a:	5c99      	ldrb	r1, [r3, r2]
   3299c:	2002      	movs	r0, #2
   3299e:	4301      	orrs	r1, r0
   329a0:	5499      	strb	r1, [r3, r2]
   329a2:	e005      	b.n	329b0 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   329a4:	687b      	ldr	r3, [r7, #4]
   329a6:	2241      	movs	r2, #65	; 0x41
   329a8:	5c99      	ldrb	r1, [r3, r2]
   329aa:	2002      	movs	r0, #2
   329ac:	4381      	bics	r1, r0
   329ae:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   329b0:	4b06      	ldr	r3, [pc, #24]	; (329cc <_http_client_handle_header+0x278>)
   329b2:	681b      	ldr	r3, [r3, #0]
   329b4:	0018      	movs	r0, r3
   329b6:	4b08      	ldr	r3, [pc, #32]	; (329d8 <_http_client_handle_header+0x284>)
   329b8:	4798      	blx	r3
   329ba:	0002      	movs	r2, r0
   329bc:	69bb      	ldr	r3, [r7, #24]
   329be:	189b      	adds	r3, r3, r2
   329c0:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   329c2:	e6ce      	b.n	32762 <_http_client_handle_header+0xe>
	}
}
   329c4:	0018      	movs	r0, r3
   329c6:	46bd      	mov	sp, r7
   329c8:	b00b      	add	sp, #44	; 0x2c
   329ca:	bd90      	pop	{r4, r7, pc}
   329cc:	20000120 	.word	0x20000120
   329d0:	00035979 	.word	0x00035979
   329d4:	00032db9 	.word	0x00032db9
   329d8:	000358fb 	.word	0x000358fb
   329dc:	00035909 	.word	0x00035909
   329e0:	0003a890 	.word	0x0003a890
   329e4:	00035491 	.word	0x00035491
   329e8:	0003a8b4 	.word	0x0003a8b4
   329ec:	00031dd1 	.word	0x00031dd1
   329f0:	0003a8c8 	.word	0x0003a8c8
   329f4:	0003a8d8 	.word	0x0003a8d8

000329f8 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   329f8:	b580      	push	{r7, lr}
   329fa:	b088      	sub	sp, #32
   329fc:	af00      	add	r7, sp, #0
   329fe:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   32a00:	687b      	ldr	r3, [r7, #4]
   32a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32a04:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   32a06:	2300      	movs	r3, #0
   32a08:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   32a0a:	687b      	ldr	r3, [r7, #4]
   32a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32a0e:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   32a10:	687b      	ldr	r3, [r7, #4]
   32a12:	22e0      	movs	r2, #224	; 0xe0
   32a14:	589b      	ldr	r3, [r3, r2]
   32a16:	2b00      	cmp	r3, #0
   32a18:	db71      	blt.n	32afe <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   32a1a:	687b      	ldr	r3, [r7, #4]
   32a1c:	22e0      	movs	r2, #224	; 0xe0
   32a1e:	589b      	ldr	r3, [r3, r2]
   32a20:	2b00      	cmp	r3, #0
   32a22:	d134      	bne.n	32a8e <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32a24:	687b      	ldr	r3, [r7, #4]
   32a26:	22d8      	movs	r2, #216	; 0xd8
   32a28:	2100      	movs	r1, #0
   32a2a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32a2c:	687b      	ldr	r3, [r7, #4]
   32a2e:	22e4      	movs	r2, #228	; 0xe4
   32a30:	2100      	movs	r1, #0
   32a32:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32a34:	2308      	movs	r3, #8
   32a36:	18fb      	adds	r3, r7, r3
   32a38:	2201      	movs	r2, #1
   32a3a:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   32a3c:	2308      	movs	r3, #8
   32a3e:	18fb      	adds	r3, r7, r3
   32a40:	2200      	movs	r2, #0
   32a42:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   32a44:	2308      	movs	r3, #8
   32a46:	18fb      	adds	r3, r7, r3
   32a48:	2200      	movs	r2, #0
   32a4a:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   32a4c:	687b      	ldr	r3, [r7, #4]
   32a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32a50:	2b00      	cmp	r3, #0
   32a52:	d006      	beq.n	32a62 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32a54:	687b      	ldr	r3, [r7, #4]
   32a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32a58:	2208      	movs	r2, #8
   32a5a:	18ba      	adds	r2, r7, r2
   32a5c:	6878      	ldr	r0, [r7, #4]
   32a5e:	2103      	movs	r1, #3
   32a60:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   32a62:	687b      	ldr	r3, [r7, #4]
   32a64:	2241      	movs	r2, #65	; 0x41
   32a66:	5c9b      	ldrb	r3, [r3, r2]
   32a68:	2202      	movs	r2, #2
   32a6a:	4013      	ands	r3, r2
   32a6c:	b2db      	uxtb	r3, r3
   32a6e:	2b00      	cmp	r3, #0
   32a70:	d105      	bne.n	32a7e <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   32a72:	687b      	ldr	r3, [r7, #4]
   32a74:	2100      	movs	r1, #0
   32a76:	0018      	movs	r0, r3
   32a78:	4b62      	ldr	r3, [pc, #392]	; (32c04 <_http_client_read_chuked_entity+0x20c>)
   32a7a:	4798      	blx	r3
					return;
   32a7c:	e0bf      	b.n	32bfe <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   32a7e:	697b      	ldr	r3, [r7, #20]
   32a80:	1c9a      	adds	r2, r3, #2
   32a82:	687b      	ldr	r3, [r7, #4]
   32a84:	0011      	movs	r1, r2
   32a86:	0018      	movs	r0, r3
   32a88:	4b5f      	ldr	r3, [pc, #380]	; (32c08 <_http_client_read_chuked_entity+0x210>)
   32a8a:	4798      	blx	r3
   32a8c:	e0b2      	b.n	32bf4 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   32a8e:	687b      	ldr	r3, [r7, #4]
   32a90:	22e0      	movs	r2, #224	; 0xe0
   32a92:	589a      	ldr	r2, [r3, r2]
   32a94:	69fb      	ldr	r3, [r7, #28]
   32a96:	429a      	cmp	r2, r3
   32a98:	dd00      	ble.n	32a9c <_http_client_read_chuked_entity+0xa4>
   32a9a:	e0ab      	b.n	32bf4 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   32a9c:	687b      	ldr	r3, [r7, #4]
   32a9e:	22e0      	movs	r2, #224	; 0xe0
   32aa0:	589b      	ldr	r3, [r3, r2]
   32aa2:	001a      	movs	r2, r3
   32aa4:	2308      	movs	r3, #8
   32aa6:	18fb      	adds	r3, r7, r3
   32aa8:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   32aaa:	2308      	movs	r3, #8
   32aac:	18fb      	adds	r3, r7, r3
   32aae:	697a      	ldr	r2, [r7, #20]
   32ab0:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   32ab2:	2308      	movs	r3, #8
   32ab4:	18fb      	adds	r3, r7, r3
   32ab6:	2200      	movs	r2, #0
   32ab8:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   32aba:	687b      	ldr	r3, [r7, #4]
   32abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32abe:	2b00      	cmp	r3, #0
   32ac0:	d006      	beq.n	32ad0 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32ac2:	687b      	ldr	r3, [r7, #4]
   32ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32ac6:	2208      	movs	r2, #8
   32ac8:	18ba      	adds	r2, r7, r2
   32aca:	6878      	ldr	r0, [r7, #4]
   32acc:	2103      	movs	r1, #3
   32ace:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   32ad0:	687b      	ldr	r3, [r7, #4]
   32ad2:	22e0      	movs	r2, #224	; 0xe0
   32ad4:	589b      	ldr	r3, [r3, r2]
   32ad6:	3302      	adds	r3, #2
   32ad8:	697a      	ldr	r2, [r7, #20]
   32ada:	18d2      	adds	r2, r2, r3
   32adc:	687b      	ldr	r3, [r7, #4]
   32ade:	0011      	movs	r1, r2
   32ae0:	0018      	movs	r0, r3
   32ae2:	4b49      	ldr	r3, [pc, #292]	; (32c08 <_http_client_read_chuked_entity+0x210>)
   32ae4:	4798      	blx	r3
				length = (int)module->recved_size;
   32ae6:	687b      	ldr	r3, [r7, #4]
   32ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32aea:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   32aec:	687b      	ldr	r3, [r7, #4]
   32aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32af0:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   32af2:	687b      	ldr	r3, [r7, #4]
   32af4:	21e0      	movs	r1, #224	; 0xe0
   32af6:	2201      	movs	r2, #1
   32af8:	4252      	negs	r2, r2
   32afa:	505a      	str	r2, [r3, r1]
   32afc:	e07a      	b.n	32bf4 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   32afe:	687b      	ldr	r3, [r7, #4]
   32b00:	22e0      	movs	r2, #224	; 0xe0
   32b02:	2100      	movs	r1, #0
   32b04:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   32b06:	e05a      	b.n	32bbe <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   32b08:	697b      	ldr	r3, [r7, #20]
   32b0a:	781b      	ldrb	r3, [r3, #0]
   32b0c:	2b0a      	cmp	r3, #10
   32b0e:	d106      	bne.n	32b1e <_http_client_read_chuked_entity+0x126>
					buffer++;
   32b10:	697b      	ldr	r3, [r7, #20]
   32b12:	3301      	adds	r3, #1
   32b14:	617b      	str	r3, [r7, #20]
					length--;
   32b16:	69fb      	ldr	r3, [r7, #28]
   32b18:	3b01      	subs	r3, #1
   32b1a:	61fb      	str	r3, [r7, #28]
					break;
   32b1c:	e052      	b.n	32bc4 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   32b1e:	69bb      	ldr	r3, [r7, #24]
   32b20:	2b00      	cmp	r3, #0
   32b22:	d145      	bne.n	32bb0 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   32b24:	697b      	ldr	r3, [r7, #20]
   32b26:	781b      	ldrb	r3, [r3, #0]
   32b28:	2b2f      	cmp	r3, #47	; 0x2f
   32b2a:	d910      	bls.n	32b4e <_http_client_read_chuked_entity+0x156>
   32b2c:	697b      	ldr	r3, [r7, #20]
   32b2e:	781b      	ldrb	r3, [r3, #0]
   32b30:	2b39      	cmp	r3, #57	; 0x39
   32b32:	d80c      	bhi.n	32b4e <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   32b34:	687b      	ldr	r3, [r7, #4]
   32b36:	22e0      	movs	r2, #224	; 0xe0
   32b38:	589b      	ldr	r3, [r3, r2]
   32b3a:	011b      	lsls	r3, r3, #4
   32b3c:	697a      	ldr	r2, [r7, #20]
   32b3e:	7812      	ldrb	r2, [r2, #0]
   32b40:	189b      	adds	r3, r3, r2
   32b42:	3b30      	subs	r3, #48	; 0x30
   32b44:	001a      	movs	r2, r3
   32b46:	687b      	ldr	r3, [r7, #4]
   32b48:	21e0      	movs	r1, #224	; 0xe0
   32b4a:	505a      	str	r2, [r3, r1]
   32b4c:	e031      	b.n	32bb2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   32b4e:	697b      	ldr	r3, [r7, #20]
   32b50:	781b      	ldrb	r3, [r3, #0]
   32b52:	2b60      	cmp	r3, #96	; 0x60
   32b54:	d910      	bls.n	32b78 <_http_client_read_chuked_entity+0x180>
   32b56:	697b      	ldr	r3, [r7, #20]
   32b58:	781b      	ldrb	r3, [r3, #0]
   32b5a:	2b66      	cmp	r3, #102	; 0x66
   32b5c:	d80c      	bhi.n	32b78 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   32b5e:	687b      	ldr	r3, [r7, #4]
   32b60:	22e0      	movs	r2, #224	; 0xe0
   32b62:	589b      	ldr	r3, [r3, r2]
   32b64:	011b      	lsls	r3, r3, #4
   32b66:	697a      	ldr	r2, [r7, #20]
   32b68:	7812      	ldrb	r2, [r2, #0]
   32b6a:	189b      	adds	r3, r3, r2
   32b6c:	3b61      	subs	r3, #97	; 0x61
   32b6e:	001a      	movs	r2, r3
   32b70:	687b      	ldr	r3, [r7, #4]
   32b72:	21e0      	movs	r1, #224	; 0xe0
   32b74:	505a      	str	r2, [r3, r1]
   32b76:	e01c      	b.n	32bb2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   32b78:	697b      	ldr	r3, [r7, #20]
   32b7a:	781b      	ldrb	r3, [r3, #0]
   32b7c:	2b40      	cmp	r3, #64	; 0x40
   32b7e:	d910      	bls.n	32ba2 <_http_client_read_chuked_entity+0x1aa>
   32b80:	697b      	ldr	r3, [r7, #20]
   32b82:	781b      	ldrb	r3, [r3, #0]
   32b84:	2b46      	cmp	r3, #70	; 0x46
   32b86:	d80c      	bhi.n	32ba2 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   32b88:	687b      	ldr	r3, [r7, #4]
   32b8a:	22e0      	movs	r2, #224	; 0xe0
   32b8c:	589b      	ldr	r3, [r3, r2]
   32b8e:	011b      	lsls	r3, r3, #4
   32b90:	697a      	ldr	r2, [r7, #20]
   32b92:	7812      	ldrb	r2, [r2, #0]
   32b94:	189b      	adds	r3, r3, r2
   32b96:	3b41      	subs	r3, #65	; 0x41
   32b98:	001a      	movs	r2, r3
   32b9a:	687b      	ldr	r3, [r7, #4]
   32b9c:	21e0      	movs	r1, #224	; 0xe0
   32b9e:	505a      	str	r2, [r3, r1]
   32ba0:	e007      	b.n	32bb2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   32ba2:	697b      	ldr	r3, [r7, #20]
   32ba4:	781b      	ldrb	r3, [r3, #0]
   32ba6:	2b3b      	cmp	r3, #59	; 0x3b
   32ba8:	d103      	bne.n	32bb2 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   32baa:	2301      	movs	r3, #1
   32bac:	61bb      	str	r3, [r7, #24]
   32bae:	e000      	b.n	32bb2 <_http_client_read_chuked_entity+0x1ba>
					continue;
   32bb0:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   32bb2:	697b      	ldr	r3, [r7, #20]
   32bb4:	3301      	adds	r3, #1
   32bb6:	617b      	str	r3, [r7, #20]
   32bb8:	69fb      	ldr	r3, [r7, #28]
   32bba:	3b01      	subs	r3, #1
   32bbc:	61fb      	str	r3, [r7, #28]
   32bbe:	69fb      	ldr	r3, [r7, #28]
   32bc0:	2b00      	cmp	r3, #0
   32bc2:	dca1      	bgt.n	32b08 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   32bc4:	687b      	ldr	r3, [r7, #4]
   32bc6:	22e0      	movs	r2, #224	; 0xe0
   32bc8:	589a      	ldr	r2, [r3, r2]
   32bca:	687b      	ldr	r3, [r7, #4]
   32bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32bce:	429a      	cmp	r2, r3
   32bd0:	dd07      	ble.n	32be2 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   32bd2:	238b      	movs	r3, #139	; 0x8b
   32bd4:	425a      	negs	r2, r3
   32bd6:	687b      	ldr	r3, [r7, #4]
   32bd8:	0011      	movs	r1, r2
   32bda:	0018      	movs	r0, r3
   32bdc:	4b09      	ldr	r3, [pc, #36]	; (32c04 <_http_client_read_chuked_entity+0x20c>)
   32bde:	4798      	blx	r3
				return;
   32be0:	e00d      	b.n	32bfe <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   32be2:	69fb      	ldr	r3, [r7, #28]
   32be4:	2b00      	cmp	r3, #0
   32be6:	d105      	bne.n	32bf4 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   32be8:	687b      	ldr	r3, [r7, #4]
   32bea:	21e0      	movs	r1, #224	; 0xe0
   32bec:	2201      	movs	r2, #1
   32bee:	4252      	negs	r2, r2
   32bf0:	505a      	str	r2, [r3, r1]
				return;
   32bf2:	e004      	b.n	32bfe <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   32bf4:	687b      	ldr	r3, [r7, #4]
   32bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32bf8:	2b00      	cmp	r3, #0
   32bfa:	d000      	beq.n	32bfe <_http_client_read_chuked_entity+0x206>
   32bfc:	e708      	b.n	32a10 <_http_client_read_chuked_entity+0x18>
}
   32bfe:	46bd      	mov	sp, r7
   32c00:	b008      	add	sp, #32
   32c02:	bd80      	pop	{r7, pc}
   32c04:	00031dd1 	.word	0x00031dd1
   32c08:	00032db9 	.word	0x00032db9

00032c0c <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   32c0c:	b580      	push	{r7, lr}
   32c0e:	b086      	sub	sp, #24
   32c10:	af00      	add	r7, sp, #0
   32c12:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   32c14:	687b      	ldr	r3, [r7, #4]
   32c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32c18:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   32c1a:	687b      	ldr	r3, [r7, #4]
   32c1c:	22dc      	movs	r2, #220	; 0xdc
   32c1e:	589b      	ldr	r3, [r3, r2]
   32c20:	2b00      	cmp	r3, #0
   32c22:	db58      	blt.n	32cd6 <_http_client_handle_entity+0xca>
   32c24:	687b      	ldr	r3, [r7, #4]
   32c26:	22dc      	movs	r2, #220	; 0xdc
   32c28:	589a      	ldr	r2, [r3, r2]
   32c2a:	687b      	ldr	r3, [r7, #4]
   32c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32c2e:	429a      	cmp	r2, r3
   32c30:	dc51      	bgt.n	32cd6 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   32c32:	687b      	ldr	r3, [r7, #4]
   32c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32c36:	0019      	movs	r1, r3
   32c38:	687b      	ldr	r3, [r7, #4]
   32c3a:	22dc      	movs	r2, #220	; 0xdc
   32c3c:	589b      	ldr	r3, [r3, r2]
   32c3e:	4299      	cmp	r1, r3
   32c40:	da00      	bge.n	32c44 <_http_client_handle_entity+0x38>
   32c42:	e0a9      	b.n	32d98 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   32c44:	687b      	ldr	r3, [r7, #4]
   32c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c48:	2b00      	cmp	r3, #0
   32c4a:	d020      	beq.n	32c8e <_http_client_handle_entity+0x82>
   32c4c:	687b      	ldr	r3, [r7, #4]
   32c4e:	22e4      	movs	r2, #228	; 0xe4
   32c50:	5a9b      	ldrh	r3, [r3, r2]
   32c52:	2b00      	cmp	r3, #0
   32c54:	d01b      	beq.n	32c8e <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   32c56:	687b      	ldr	r3, [r7, #4]
   32c58:	22e4      	movs	r2, #228	; 0xe4
   32c5a:	5a9a      	ldrh	r2, [r3, r2]
   32c5c:	2308      	movs	r3, #8
   32c5e:	18fb      	adds	r3, r7, r3
   32c60:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   32c62:	2308      	movs	r3, #8
   32c64:	18fb      	adds	r3, r7, r3
   32c66:	2200      	movs	r2, #0
   32c68:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   32c6a:	687b      	ldr	r3, [r7, #4]
   32c6c:	22dc      	movs	r2, #220	; 0xdc
   32c6e:	589b      	ldr	r3, [r3, r2]
   32c70:	001a      	movs	r2, r3
   32c72:	2308      	movs	r3, #8
   32c74:	18fb      	adds	r3, r7, r3
   32c76:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   32c78:	2308      	movs	r3, #8
   32c7a:	18fb      	adds	r3, r7, r3
   32c7c:	697a      	ldr	r2, [r7, #20]
   32c7e:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32c80:	687b      	ldr	r3, [r7, #4]
   32c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c84:	2208      	movs	r2, #8
   32c86:	18ba      	adds	r2, r7, r2
   32c88:	6878      	ldr	r0, [r7, #4]
   32c8a:	2102      	movs	r1, #2
   32c8c:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   32c8e:	687b      	ldr	r3, [r7, #4]
   32c90:	22d8      	movs	r2, #216	; 0xd8
   32c92:	2100      	movs	r1, #0
   32c94:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   32c96:	687b      	ldr	r3, [r7, #4]
   32c98:	22e4      	movs	r2, #228	; 0xe4
   32c9a:	2100      	movs	r1, #0
   32c9c:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   32c9e:	687b      	ldr	r3, [r7, #4]
   32ca0:	2241      	movs	r2, #65	; 0x41
   32ca2:	5c9b      	ldrb	r3, [r3, r2]
   32ca4:	2202      	movs	r2, #2
   32ca6:	4013      	ands	r3, r2
   32ca8:	b2db      	uxtb	r3, r3
   32caa:	2b00      	cmp	r3, #0
   32cac:	d105      	bne.n	32cba <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   32cae:	687b      	ldr	r3, [r7, #4]
   32cb0:	2100      	movs	r1, #0
   32cb2:	0018      	movs	r0, r3
   32cb4:	4b3b      	ldr	r3, [pc, #236]	; (32da4 <_http_client_handle_entity+0x198>)
   32cb6:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   32cb8:	e06e      	b.n	32d98 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   32cba:	687b      	ldr	r3, [r7, #4]
   32cbc:	22dc      	movs	r2, #220	; 0xdc
   32cbe:	589b      	ldr	r3, [r3, r2]
   32cc0:	001a      	movs	r2, r3
   32cc2:	697b      	ldr	r3, [r7, #20]
   32cc4:	189a      	adds	r2, r3, r2
   32cc6:	687b      	ldr	r3, [r7, #4]
   32cc8:	0011      	movs	r1, r2
   32cca:	0018      	movs	r0, r3
   32ccc:	4b36      	ldr	r3, [pc, #216]	; (32da8 <_http_client_handle_entity+0x19c>)
   32cce:	4798      	blx	r3
				return module->recved_size;
   32cd0:	687b      	ldr	r3, [r7, #4]
   32cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32cd4:	e061      	b.n	32d9a <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   32cd6:	687b      	ldr	r3, [r7, #4]
   32cd8:	22dc      	movs	r2, #220	; 0xdc
   32cda:	589b      	ldr	r3, [r3, r2]
   32cdc:	2b00      	cmp	r3, #0
   32cde:	db57      	blt.n	32d90 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   32ce0:	687b      	ldr	r3, [r7, #4]
   32ce2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32ce4:	2308      	movs	r3, #8
   32ce6:	18fb      	adds	r3, r7, r3
   32ce8:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   32cea:	2308      	movs	r3, #8
   32cec:	18fb      	adds	r3, r7, r3
   32cee:	697a      	ldr	r2, [r7, #20]
   32cf0:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   32cf2:	687b      	ldr	r3, [r7, #4]
   32cf4:	22e0      	movs	r2, #224	; 0xe0
   32cf6:	589a      	ldr	r2, [r3, r2]
   32cf8:	687b      	ldr	r3, [r7, #4]
   32cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32cfc:	18d2      	adds	r2, r2, r3
   32cfe:	687b      	ldr	r3, [r7, #4]
   32d00:	21e0      	movs	r1, #224	; 0xe0
   32d02:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   32d04:	687b      	ldr	r3, [r7, #4]
   32d06:	22dc      	movs	r2, #220	; 0xdc
   32d08:	589a      	ldr	r2, [r3, r2]
   32d0a:	687b      	ldr	r3, [r7, #4]
   32d0c:	21e0      	movs	r1, #224	; 0xe0
   32d0e:	585b      	ldr	r3, [r3, r1]
   32d10:	429a      	cmp	r2, r3
   32d12:	dc0c      	bgt.n	32d2e <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32d14:	687b      	ldr	r3, [r7, #4]
   32d16:	22d8      	movs	r2, #216	; 0xd8
   32d18:	2100      	movs	r1, #0
   32d1a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32d1c:	687b      	ldr	r3, [r7, #4]
   32d1e:	22e4      	movs	r2, #228	; 0xe4
   32d20:	2100      	movs	r1, #0
   32d22:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32d24:	2308      	movs	r3, #8
   32d26:	18fb      	adds	r3, r7, r3
   32d28:	2201      	movs	r2, #1
   32d2a:	721a      	strb	r2, [r3, #8]
   32d2c:	e003      	b.n	32d36 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   32d2e:	2308      	movs	r3, #8
   32d30:	18fb      	adds	r3, r7, r3
   32d32:	2200      	movs	r2, #0
   32d34:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   32d36:	687b      	ldr	r3, [r7, #4]
   32d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32d3a:	2b00      	cmp	r3, #0
   32d3c:	d006      	beq.n	32d4c <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32d3e:	687b      	ldr	r3, [r7, #4]
   32d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32d42:	2208      	movs	r2, #8
   32d44:	18ba      	adds	r2, r7, r2
   32d46:	6878      	ldr	r0, [r7, #4]
   32d48:	2103      	movs	r1, #3
   32d4a:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   32d4c:	2308      	movs	r3, #8
   32d4e:	18fb      	adds	r3, r7, r3
   32d50:	7a1b      	ldrb	r3, [r3, #8]
   32d52:	2b01      	cmp	r3, #1
   32d54:	d112      	bne.n	32d7c <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   32d56:	687b      	ldr	r3, [r7, #4]
   32d58:	2241      	movs	r2, #65	; 0x41
   32d5a:	5c9b      	ldrb	r3, [r3, r2]
   32d5c:	2202      	movs	r2, #2
   32d5e:	4013      	ands	r3, r2
   32d60:	b2db      	uxtb	r3, r3
   32d62:	2b00      	cmp	r3, #0
   32d64:	d10a      	bne.n	32d7c <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   32d66:	4b11      	ldr	r3, [pc, #68]	; (32dac <_http_client_handle_entity+0x1a0>)
   32d68:	0018      	movs	r0, r3
   32d6a:	4b11      	ldr	r3, [pc, #68]	; (32db0 <_http_client_handle_entity+0x1a4>)
   32d6c:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   32d6e:	687b      	ldr	r3, [r7, #4]
   32d70:	2100      	movs	r1, #0
   32d72:	0018      	movs	r0, r3
   32d74:	4b0b      	ldr	r3, [pc, #44]	; (32da4 <_http_client_handle_entity+0x198>)
   32d76:	4798      	blx	r3
					return 0;
   32d78:	2300      	movs	r3, #0
   32d7a:	e00e      	b.n	32d9a <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   32d7c:	687b      	ldr	r3, [r7, #4]
   32d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32d80:	697a      	ldr	r2, [r7, #20]
   32d82:	18d2      	adds	r2, r2, r3
   32d84:	687b      	ldr	r3, [r7, #4]
   32d86:	0011      	movs	r1, r2
   32d88:	0018      	movs	r0, r3
   32d8a:	4b07      	ldr	r3, [pc, #28]	; (32da8 <_http_client_handle_entity+0x19c>)
   32d8c:	4798      	blx	r3
   32d8e:	e003      	b.n	32d98 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   32d90:	687b      	ldr	r3, [r7, #4]
   32d92:	0018      	movs	r0, r3
   32d94:	4b07      	ldr	r3, [pc, #28]	; (32db4 <_http_client_handle_entity+0x1a8>)
   32d96:	4798      	blx	r3
		}
	}

	return 0;
   32d98:	2300      	movs	r3, #0
}
   32d9a:	0018      	movs	r0, r3
   32d9c:	46bd      	mov	sp, r7
   32d9e:	b006      	add	sp, #24
   32da0:	bd80      	pop	{r7, pc}
   32da2:	46c0      	nop			; (mov r8, r8)
   32da4:	00031dd1 	.word	0x00031dd1
   32da8:	00032db9 	.word	0x00032db9
   32dac:	0003a8e0 	.word	0x0003a8e0
   32db0:	00035765 	.word	0x00035765
   32db4:	000329f9 	.word	0x000329f9

00032db8 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   32db8:	b580      	push	{r7, lr}
   32dba:	b084      	sub	sp, #16
   32dbc:	af00      	add	r7, sp, #0
   32dbe:	6078      	str	r0, [r7, #4]
   32dc0:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   32dc2:	687b      	ldr	r3, [r7, #4]
   32dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32dc6:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   32dc8:	687b      	ldr	r3, [r7, #4]
   32dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32dcc:	001a      	movs	r2, r3
   32dce:	683b      	ldr	r3, [r7, #0]
   32dd0:	1ad2      	subs	r2, r2, r3
   32dd2:	68fb      	ldr	r3, [r7, #12]
   32dd4:	18d3      	adds	r3, r2, r3
   32dd6:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   32dd8:	68bb      	ldr	r3, [r7, #8]
   32dda:	2b00      	cmp	r3, #0
   32ddc:	dd09      	ble.n	32df2 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   32dde:	68ba      	ldr	r2, [r7, #8]
   32de0:	6839      	ldr	r1, [r7, #0]
   32de2:	68fb      	ldr	r3, [r7, #12]
   32de4:	0018      	movs	r0, r3
   32de6:	4b06      	ldr	r3, [pc, #24]	; (32e00 <_http_client_move_buffer+0x48>)
   32de8:	4798      	blx	r3
		module->recved_size = remain;
   32dea:	68ba      	ldr	r2, [r7, #8]
   32dec:	687b      	ldr	r3, [r7, #4]
   32dee:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   32df0:	e002      	b.n	32df8 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   32df2:	687b      	ldr	r3, [r7, #4]
   32df4:	2200      	movs	r2, #0
   32df6:	645a      	str	r2, [r3, #68]	; 0x44
}
   32df8:	46c0      	nop			; (mov r8, r8)
   32dfa:	46bd      	mov	sp, r7
   32dfc:	b004      	add	sp, #16
   32dfe:	bd80      	pop	{r7, pc}
   32e00:	0003551f 	.word	0x0003551f

00032e04 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   32e04:	b580      	push	{r7, lr}
   32e06:	b084      	sub	sp, #16
   32e08:	af00      	add	r7, sp, #0
   32e0a:	60f8      	str	r0, [r7, #12]
   32e0c:	60b9      	str	r1, [r7, #8]
   32e0e:	607a      	str	r2, [r7, #4]
   32e10:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   32e12:	68fb      	ldr	r3, [r7, #12]
   32e14:	687a      	ldr	r2, [r7, #4]
   32e16:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   32e18:	68fb      	ldr	r3, [r7, #12]
   32e1a:	68ba      	ldr	r2, [r7, #8]
   32e1c:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   32e1e:	68fb      	ldr	r3, [r7, #12]
   32e20:	2200      	movs	r2, #0
   32e22:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   32e24:	68fb      	ldr	r3, [r7, #12]
   32e26:	683a      	ldr	r2, [r7, #0]
   32e28:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   32e2a:	68fb      	ldr	r3, [r7, #12]
   32e2c:	69ba      	ldr	r2, [r7, #24]
   32e2e:	60da      	str	r2, [r3, #12]
}
   32e30:	46c0      	nop			; (mov r8, r8)
   32e32:	46bd      	mov	sp, r7
   32e34:	b004      	add	sp, #16
   32e36:	bd80      	pop	{r7, pc}

00032e38 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   32e38:	b580      	push	{r7, lr}
   32e3a:	b084      	sub	sp, #16
   32e3c:	af00      	add	r7, sp, #0
   32e3e:	6078      	str	r0, [r7, #4]
   32e40:	000a      	movs	r2, r1
   32e42:	1cfb      	adds	r3, r7, #3
   32e44:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   32e46:	687b      	ldr	r3, [r7, #4]
   32e48:	681a      	ldr	r2, [r3, #0]
   32e4a:	687b      	ldr	r3, [r7, #4]
   32e4c:	685b      	ldr	r3, [r3, #4]
   32e4e:	1ad3      	subs	r3, r2, r3
   32e50:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   32e52:	68fb      	ldr	r3, [r7, #12]
   32e54:	2b00      	cmp	r3, #0
   32e56:	dc03      	bgt.n	32e60 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   32e58:	687b      	ldr	r3, [r7, #4]
   32e5a:	0018      	movs	r0, r3
   32e5c:	4b08      	ldr	r3, [pc, #32]	; (32e80 <stream_writer_send_8+0x48>)
   32e5e:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   32e60:	687b      	ldr	r3, [r7, #4]
   32e62:	6919      	ldr	r1, [r3, #16]
   32e64:	687b      	ldr	r3, [r7, #4]
   32e66:	685b      	ldr	r3, [r3, #4]
   32e68:	1c58      	adds	r0, r3, #1
   32e6a:	687a      	ldr	r2, [r7, #4]
   32e6c:	6050      	str	r0, [r2, #4]
   32e6e:	18cb      	adds	r3, r1, r3
   32e70:	1cfa      	adds	r2, r7, #3
   32e72:	7812      	ldrb	r2, [r2, #0]
   32e74:	701a      	strb	r2, [r3, #0]
}
   32e76:	46c0      	nop			; (mov r8, r8)
   32e78:	46bd      	mov	sp, r7
   32e7a:	b004      	add	sp, #16
   32e7c:	bd80      	pop	{r7, pc}
   32e7e:	46c0      	nop			; (mov r8, r8)
   32e80:	00032ec1 	.word	0x00032ec1

00032e84 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   32e84:	b580      	push	{r7, lr}
   32e86:	b084      	sub	sp, #16
   32e88:	af00      	add	r7, sp, #0
   32e8a:	60f8      	str	r0, [r7, #12]
   32e8c:	60b9      	str	r1, [r7, #8]
   32e8e:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   32e90:	e00d      	b.n	32eae <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   32e92:	68bb      	ldr	r3, [r7, #8]
   32e94:	781b      	ldrb	r3, [r3, #0]
   32e96:	b25a      	sxtb	r2, r3
   32e98:	68fb      	ldr	r3, [r7, #12]
   32e9a:	0011      	movs	r1, r2
   32e9c:	0018      	movs	r0, r3
   32e9e:	4b07      	ldr	r3, [pc, #28]	; (32ebc <stream_writer_send_buffer+0x38>)
   32ea0:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   32ea2:	687b      	ldr	r3, [r7, #4]
   32ea4:	3b01      	subs	r3, #1
   32ea6:	607b      	str	r3, [r7, #4]
   32ea8:	68bb      	ldr	r3, [r7, #8]
   32eaa:	3301      	adds	r3, #1
   32eac:	60bb      	str	r3, [r7, #8]
   32eae:	687b      	ldr	r3, [r7, #4]
   32eb0:	2b00      	cmp	r3, #0
   32eb2:	d1ee      	bne.n	32e92 <stream_writer_send_buffer+0xe>
	}
}
   32eb4:	46c0      	nop			; (mov r8, r8)
   32eb6:	46bd      	mov	sp, r7
   32eb8:	b004      	add	sp, #16
   32eba:	bd80      	pop	{r7, pc}
   32ebc:	00032e39 	.word	0x00032e39

00032ec0 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   32ec0:	b590      	push	{r4, r7, lr}
   32ec2:	b083      	sub	sp, #12
   32ec4:	af00      	add	r7, sp, #0
   32ec6:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   32ec8:	687b      	ldr	r3, [r7, #4]
   32eca:	685b      	ldr	r3, [r3, #4]
   32ecc:	2b00      	cmp	r3, #0
   32ece:	d00c      	beq.n	32eea <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   32ed0:	687b      	ldr	r3, [r7, #4]
   32ed2:	689c      	ldr	r4, [r3, #8]
   32ed4:	687b      	ldr	r3, [r7, #4]
   32ed6:	68d8      	ldr	r0, [r3, #12]
   32ed8:	687b      	ldr	r3, [r7, #4]
   32eda:	6919      	ldr	r1, [r3, #16]
   32edc:	687b      	ldr	r3, [r7, #4]
   32ede:	685b      	ldr	r3, [r3, #4]
   32ee0:	001a      	movs	r2, r3
   32ee2:	47a0      	blx	r4
		writer->written = 0;
   32ee4:	687b      	ldr	r3, [r7, #4]
   32ee6:	2200      	movs	r2, #0
   32ee8:	605a      	str	r2, [r3, #4]
	}
}
   32eea:	46c0      	nop			; (mov r8, r8)
   32eec:	46bd      	mov	sp, r7
   32eee:	b003      	add	sp, #12
   32ef0:	bd90      	pop	{r4, r7, pc}
	...

00032ef4 <system_cpu_clock_get_hz>:
{
   32ef4:	b580      	push	{r7, lr}
   32ef6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   32ef8:	2000      	movs	r0, #0
   32efa:	4b05      	ldr	r3, [pc, #20]	; (32f10 <system_cpu_clock_get_hz+0x1c>)
   32efc:	4798      	blx	r3
   32efe:	0002      	movs	r2, r0
   32f00:	4b04      	ldr	r3, [pc, #16]	; (32f14 <system_cpu_clock_get_hz+0x20>)
   32f02:	7a1b      	ldrb	r3, [r3, #8]
   32f04:	b2db      	uxtb	r3, r3
   32f06:	40da      	lsrs	r2, r3
   32f08:	0013      	movs	r3, r2
}
   32f0a:	0018      	movs	r0, r3
   32f0c:	46bd      	mov	sp, r7
   32f0e:	bd80      	pop	{r7, pc}
   32f10:	0002a8d5 	.word	0x0002a8d5
   32f14:	40000400 	.word	0x40000400

00032f18 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   32f18:	b580      	push	{r7, lr}
   32f1a:	b084      	sub	sp, #16
   32f1c:	af00      	add	r7, sp, #0
   32f1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   32f20:	687b      	ldr	r3, [r7, #4]
   32f22:	681b      	ldr	r3, [r3, #0]
   32f24:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   32f26:	46c0      	nop			; (mov r8, r8)
   32f28:	68fb      	ldr	r3, [r7, #12]
   32f2a:	689b      	ldr	r3, [r3, #8]
   32f2c:	2202      	movs	r2, #2
   32f2e:	4013      	ands	r3, r2
   32f30:	d1fa      	bne.n	32f28 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   32f32:	68fb      	ldr	r3, [r7, #12]
   32f34:	681b      	ldr	r3, [r3, #0]
   32f36:	2202      	movs	r2, #2
   32f38:	431a      	orrs	r2, r3
   32f3a:	68fb      	ldr	r3, [r7, #12]
   32f3c:	601a      	str	r2, [r3, #0]
}
   32f3e:	46c0      	nop			; (mov r8, r8)
   32f40:	46bd      	mov	sp, r7
   32f42:	b004      	add	sp, #16
   32f44:	bd80      	pop	{r7, pc}
	...

00032f48 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   32f48:	b580      	push	{r7, lr}
   32f4a:	b082      	sub	sp, #8
   32f4c:	af00      	add	r7, sp, #0
   32f4e:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   32f50:	4b04      	ldr	r3, [pc, #16]	; (32f64 <sw_timer_tcc_callback+0x1c>)
   32f52:	681b      	ldr	r3, [r3, #0]
   32f54:	1c5a      	adds	r2, r3, #1
   32f56:	4b03      	ldr	r3, [pc, #12]	; (32f64 <sw_timer_tcc_callback+0x1c>)
   32f58:	601a      	str	r2, [r3, #0]
}
   32f5a:	46c0      	nop			; (mov r8, r8)
   32f5c:	46bd      	mov	sp, r7
   32f5e:	b002      	add	sp, #8
   32f60:	bd80      	pop	{r7, pc}
   32f62:	46c0      	nop			; (mov r8, r8)
   32f64:	20004348 	.word	0x20004348

00032f68 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   32f68:	b580      	push	{r7, lr}
   32f6a:	b082      	sub	sp, #8
   32f6c:	af00      	add	r7, sp, #0
   32f6e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   32f70:	687b      	ldr	r3, [r7, #4]
   32f72:	2264      	movs	r2, #100	; 0x64
   32f74:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   32f76:	687b      	ldr	r3, [r7, #4]
   32f78:	2200      	movs	r2, #0
   32f7a:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   32f7c:	687b      	ldr	r3, [r7, #4]
   32f7e:	2200      	movs	r2, #0
   32f80:	705a      	strb	r2, [r3, #1]
}
   32f82:	46c0      	nop			; (mov r8, r8)
   32f84:	46bd      	mov	sp, r7
   32f86:	b002      	add	sp, #8
   32f88:	bd80      	pop	{r7, pc}
	...

00032f8c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   32f8c:	b590      	push	{r4, r7, lr}
   32f8e:	b0b1      	sub	sp, #196	; 0xc4
   32f90:	af00      	add	r7, sp, #0
   32f92:	6078      	str	r0, [r7, #4]
   32f94:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   32f96:	230c      	movs	r3, #12
   32f98:	18fb      	adds	r3, r7, r3
   32f9a:	4a2e      	ldr	r2, [pc, #184]	; (33054 <sw_timer_init+0xc8>)
   32f9c:	ca13      	ldmia	r2!, {r0, r1, r4}
   32f9e:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   32fa0:	683b      	ldr	r3, [r7, #0]
   32fa2:	885b      	ldrh	r3, [r3, #2]
   32fa4:	001a      	movs	r2, r3
   32fa6:	687b      	ldr	r3, [r7, #4]
   32fa8:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   32faa:	687b      	ldr	r3, [r7, #4]
   32fac:	3314      	adds	r3, #20
   32fae:	22bc      	movs	r2, #188	; 0xbc
   32fb0:	18ba      	adds	r2, r7, r2
   32fb2:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   32fb4:	683b      	ldr	r3, [r7, #0]
   32fb6:	781b      	ldrb	r3, [r3, #0]
   32fb8:	001a      	movs	r2, r3
   32fba:	230c      	movs	r3, #12
   32fbc:	18fb      	adds	r3, r7, r3
   32fbe:	0092      	lsls	r2, r2, #2
   32fc0:	58d2      	ldr	r2, [r2, r3]
   32fc2:	2318      	movs	r3, #24
   32fc4:	18fb      	adds	r3, r7, r3
   32fc6:	0011      	movs	r1, r2
   32fc8:	0018      	movs	r0, r3
   32fca:	4b23      	ldr	r3, [pc, #140]	; (33058 <sw_timer_init+0xcc>)
   32fcc:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   32fce:	4b23      	ldr	r3, [pc, #140]	; (3305c <sw_timer_init+0xd0>)
   32fd0:	4798      	blx	r3
   32fd2:	0004      	movs	r4, r0
   32fd4:	683b      	ldr	r3, [r7, #0]
   32fd6:	885b      	ldrh	r3, [r3, #2]
   32fd8:	001a      	movs	r2, r3
   32fda:	4b21      	ldr	r3, [pc, #132]	; (33060 <sw_timer_init+0xd4>)
   32fdc:	0011      	movs	r1, r2
   32fde:	22fa      	movs	r2, #250	; 0xfa
   32fe0:	0210      	lsls	r0, r2, #8
   32fe2:	4798      	blx	r3
   32fe4:	0003      	movs	r3, r0
   32fe6:	001a      	movs	r2, r3
   32fe8:	4b1e      	ldr	r3, [pc, #120]	; (33064 <sw_timer_init+0xd8>)
   32fea:	0011      	movs	r1, r2
   32fec:	0020      	movs	r0, r4
   32fee:	4798      	blx	r3
   32ff0:	0003      	movs	r3, r0
   32ff2:	001a      	movs	r2, r3
   32ff4:	2318      	movs	r3, #24
   32ff6:	18fb      	adds	r3, r7, r3
   32ff8:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   32ffa:	2318      	movs	r3, #24
   32ffc:	18fb      	adds	r3, r7, r3
   32ffe:	2205      	movs	r2, #5
   33000:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   33002:	683b      	ldr	r3, [r7, #0]
   33004:	781b      	ldrb	r3, [r3, #0]
   33006:	001a      	movs	r2, r3
   33008:	230c      	movs	r3, #12
   3300a:	18fb      	adds	r3, r7, r3
   3300c:	0092      	lsls	r2, r2, #2
   3300e:	58d1      	ldr	r1, [r2, r3]
   33010:	2318      	movs	r3, #24
   33012:	18fa      	adds	r2, r7, r3
   33014:	23bc      	movs	r3, #188	; 0xbc
   33016:	18fb      	adds	r3, r7, r3
   33018:	681b      	ldr	r3, [r3, #0]
   3301a:	0018      	movs	r0, r3
   3301c:	4b12      	ldr	r3, [pc, #72]	; (33068 <sw_timer_init+0xdc>)
   3301e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   33020:	683b      	ldr	r3, [r7, #0]
   33022:	785b      	ldrb	r3, [r3, #1]
   33024:	3308      	adds	r3, #8
   33026:	b2da      	uxtb	r2, r3
   33028:	4910      	ldr	r1, [pc, #64]	; (3306c <sw_timer_init+0xe0>)
   3302a:	23bc      	movs	r3, #188	; 0xbc
   3302c:	18fb      	adds	r3, r7, r3
   3302e:	681b      	ldr	r3, [r3, #0]
   33030:	0018      	movs	r0, r3
   33032:	4b0f      	ldr	r3, [pc, #60]	; (33070 <sw_timer_init+0xe4>)
   33034:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   33036:	683b      	ldr	r3, [r7, #0]
   33038:	785b      	ldrb	r3, [r3, #1]
   3303a:	3308      	adds	r3, #8
   3303c:	b2da      	uxtb	r2, r3
   3303e:	23bc      	movs	r3, #188	; 0xbc
   33040:	18fb      	adds	r3, r7, r3
   33042:	681b      	ldr	r3, [r3, #0]
   33044:	0011      	movs	r1, r2
   33046:	0018      	movs	r0, r3
   33048:	4b0a      	ldr	r3, [pc, #40]	; (33074 <sw_timer_init+0xe8>)
   3304a:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   3304c:	46c0      	nop			; (mov r8, r8)
   3304e:	46bd      	mov	sp, r7
   33050:	b031      	add	sp, #196	; 0xc4
   33052:	bd90      	pop	{r4, r7, pc}
   33054:	0003a920 	.word	0x0003a920
   33058:	0002ae6d 	.word	0x0002ae6d
   3305c:	00032ef5 	.word	0x00032ef5
   33060:	0003367d 	.word	0x0003367d
   33064:	00033569 	.word	0x00033569
   33068:	0002b4c9 	.word	0x0002b4c9
   3306c:	00032f49 	.word	0x00032f49
   33070:	0002b8e1 	.word	0x0002b8e1
   33074:	0002b921 	.word	0x0002b921

00033078 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   33078:	b580      	push	{r7, lr}
   3307a:	b084      	sub	sp, #16
   3307c:	af00      	add	r7, sp, #0
   3307e:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   33080:	687b      	ldr	r3, [r7, #4]
   33082:	3314      	adds	r3, #20
   33084:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   33086:	68fb      	ldr	r3, [r7, #12]
   33088:	0018      	movs	r0, r3
   3308a:	4b03      	ldr	r3, [pc, #12]	; (33098 <sw_timer_enable+0x20>)
   3308c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   3308e:	46c0      	nop			; (mov r8, r8)
   33090:	46bd      	mov	sp, r7
   33092:	b004      	add	sp, #16
   33094:	bd80      	pop	{r7, pc}
   33096:	46c0      	nop			; (mov r8, r8)
   33098:	00032f19 	.word	0x00032f19

0003309c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   3309c:	b580      	push	{r7, lr}
   3309e:	b086      	sub	sp, #24
   330a0:	af00      	add	r7, sp, #0
   330a2:	60f8      	str	r0, [r7, #12]
   330a4:	60b9      	str	r1, [r7, #8]
   330a6:	607a      	str	r2, [r7, #4]
   330a8:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   330aa:	2300      	movs	r3, #0
   330ac:	617b      	str	r3, [r7, #20]
   330ae:	e032      	b.n	33116 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   330b0:	68f9      	ldr	r1, [r7, #12]
   330b2:	697a      	ldr	r2, [r7, #20]
   330b4:	0013      	movs	r3, r2
   330b6:	009b      	lsls	r3, r3, #2
   330b8:	189b      	adds	r3, r3, r2
   330ba:	009b      	lsls	r3, r3, #2
   330bc:	5c5b      	ldrb	r3, [r3, r1]
   330be:	07db      	lsls	r3, r3, #31
   330c0:	0fdb      	lsrs	r3, r3, #31
   330c2:	b2db      	uxtb	r3, r3
   330c4:	2b00      	cmp	r3, #0
   330c6:	d123      	bne.n	33110 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   330c8:	697a      	ldr	r2, [r7, #20]
   330ca:	0013      	movs	r3, r2
   330cc:	009b      	lsls	r3, r3, #2
   330ce:	189b      	adds	r3, r3, r2
   330d0:	009b      	lsls	r3, r3, #2
   330d2:	68fa      	ldr	r2, [r7, #12]
   330d4:	18d3      	adds	r3, r2, r3
   330d6:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   330d8:	693b      	ldr	r3, [r7, #16]
   330da:	68ba      	ldr	r2, [r7, #8]
   330dc:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   330de:	693b      	ldr	r3, [r7, #16]
   330e0:	781a      	ldrb	r2, [r3, #0]
   330e2:	2102      	movs	r1, #2
   330e4:	438a      	bics	r2, r1
   330e6:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   330e8:	693b      	ldr	r3, [r7, #16]
   330ea:	687a      	ldr	r2, [r7, #4]
   330ec:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   330ee:	68fb      	ldr	r3, [r7, #12]
   330f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   330f2:	4b0d      	ldr	r3, [pc, #52]	; (33128 <sw_timer_register_callback+0x8c>)
   330f4:	0011      	movs	r1, r2
   330f6:	6838      	ldr	r0, [r7, #0]
   330f8:	4798      	blx	r3
   330fa:	0003      	movs	r3, r0
   330fc:	001a      	movs	r2, r3
   330fe:	693b      	ldr	r3, [r7, #16]
   33100:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   33102:	693b      	ldr	r3, [r7, #16]
   33104:	781a      	ldrb	r2, [r3, #0]
   33106:	2101      	movs	r1, #1
   33108:	430a      	orrs	r2, r1
   3310a:	701a      	strb	r2, [r3, #0]
			return index;
   3310c:	697b      	ldr	r3, [r7, #20]
   3310e:	e007      	b.n	33120 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33110:	697b      	ldr	r3, [r7, #20]
   33112:	3301      	adds	r3, #1
   33114:	617b      	str	r3, [r7, #20]
   33116:	697b      	ldr	r3, [r7, #20]
   33118:	2b00      	cmp	r3, #0
   3311a:	ddc9      	ble.n	330b0 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   3311c:	2301      	movs	r3, #1
   3311e:	425b      	negs	r3, r3
}
   33120:	0018      	movs	r0, r3
   33122:	46bd      	mov	sp, r7
   33124:	b006      	add	sp, #24
   33126:	bd80      	pop	{r7, pc}
   33128:	00033569 	.word	0x00033569

0003312c <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   3312c:	b580      	push	{r7, lr}
   3312e:	b086      	sub	sp, #24
   33130:	af00      	add	r7, sp, #0
   33132:	60f8      	str	r0, [r7, #12]
   33134:	60b9      	str	r1, [r7, #8]
   33136:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   33138:	68ba      	ldr	r2, [r7, #8]
   3313a:	0013      	movs	r3, r2
   3313c:	009b      	lsls	r3, r3, #2
   3313e:	189b      	adds	r3, r3, r2
   33140:	009b      	lsls	r3, r3, #2
   33142:	68fa      	ldr	r2, [r7, #12]
   33144:	18d3      	adds	r3, r2, r3
   33146:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   33148:	697b      	ldr	r3, [r7, #20]
   3314a:	781a      	ldrb	r2, [r3, #0]
   3314c:	2102      	movs	r1, #2
   3314e:	430a      	orrs	r2, r1
   33150:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   33152:	68fb      	ldr	r3, [r7, #12]
   33154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   33156:	4b07      	ldr	r3, [pc, #28]	; (33174 <sw_timer_enable_callback+0x48>)
   33158:	0011      	movs	r1, r2
   3315a:	6878      	ldr	r0, [r7, #4]
   3315c:	4798      	blx	r3
   3315e:	0003      	movs	r3, r0
   33160:	001a      	movs	r2, r3
   33162:	4b05      	ldr	r3, [pc, #20]	; (33178 <sw_timer_enable_callback+0x4c>)
   33164:	681b      	ldr	r3, [r3, #0]
   33166:	18d2      	adds	r2, r2, r3
   33168:	697b      	ldr	r3, [r7, #20]
   3316a:	611a      	str	r2, [r3, #16]
}
   3316c:	46c0      	nop			; (mov r8, r8)
   3316e:	46bd      	mov	sp, r7
   33170:	b006      	add	sp, #24
   33172:	bd80      	pop	{r7, pc}
   33174:	00033569 	.word	0x00033569
   33178:	20004348 	.word	0x20004348

0003317c <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   3317c:	b580      	push	{r7, lr}
   3317e:	b084      	sub	sp, #16
   33180:	af00      	add	r7, sp, #0
   33182:	6078      	str	r0, [r7, #4]
   33184:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   33186:	683a      	ldr	r2, [r7, #0]
   33188:	0013      	movs	r3, r2
   3318a:	009b      	lsls	r3, r3, #2
   3318c:	189b      	adds	r3, r3, r2
   3318e:	009b      	lsls	r3, r3, #2
   33190:	687a      	ldr	r2, [r7, #4]
   33192:	18d3      	adds	r3, r2, r3
   33194:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   33196:	68fb      	ldr	r3, [r7, #12]
   33198:	781a      	ldrb	r2, [r3, #0]
   3319a:	2102      	movs	r1, #2
   3319c:	438a      	bics	r2, r1
   3319e:	701a      	strb	r2, [r3, #0]
}
   331a0:	46c0      	nop			; (mov r8, r8)
   331a2:	46bd      	mov	sp, r7
   331a4:	b004      	add	sp, #16
   331a6:	bd80      	pop	{r7, pc}

000331a8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   331a8:	b590      	push	{r4, r7, lr}
   331aa:	b085      	sub	sp, #20
   331ac:	af00      	add	r7, sp, #0
   331ae:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   331b0:	2300      	movs	r3, #0
   331b2:	60fb      	str	r3, [r7, #12]
   331b4:	e053      	b.n	3325e <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   331b6:	6879      	ldr	r1, [r7, #4]
   331b8:	68fa      	ldr	r2, [r7, #12]
   331ba:	0013      	movs	r3, r2
   331bc:	009b      	lsls	r3, r3, #2
   331be:	189b      	adds	r3, r3, r2
   331c0:	009b      	lsls	r3, r3, #2
   331c2:	5c5b      	ldrb	r3, [r3, r1]
   331c4:	07db      	lsls	r3, r3, #31
   331c6:	0fdb      	lsrs	r3, r3, #31
   331c8:	b2db      	uxtb	r3, r3
   331ca:	2b00      	cmp	r3, #0
   331cc:	d044      	beq.n	33258 <sw_timer_task+0xb0>
   331ce:	6879      	ldr	r1, [r7, #4]
   331d0:	68fa      	ldr	r2, [r7, #12]
   331d2:	0013      	movs	r3, r2
   331d4:	009b      	lsls	r3, r3, #2
   331d6:	189b      	adds	r3, r3, r2
   331d8:	009b      	lsls	r3, r3, #2
   331da:	5c5b      	ldrb	r3, [r3, r1]
   331dc:	079b      	lsls	r3, r3, #30
   331de:	0fdb      	lsrs	r3, r3, #31
   331e0:	b2db      	uxtb	r3, r3
   331e2:	2b00      	cmp	r3, #0
   331e4:	d038      	beq.n	33258 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   331e6:	68fa      	ldr	r2, [r7, #12]
   331e8:	0013      	movs	r3, r2
   331ea:	009b      	lsls	r3, r3, #2
   331ec:	189b      	adds	r3, r3, r2
   331ee:	009b      	lsls	r3, r3, #2
   331f0:	687a      	ldr	r2, [r7, #4]
   331f2:	18d3      	adds	r3, r2, r3
   331f4:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   331f6:	68bb      	ldr	r3, [r7, #8]
   331f8:	691a      	ldr	r2, [r3, #16]
   331fa:	4b1c      	ldr	r3, [pc, #112]	; (3326c <sw_timer_task+0xc4>)
   331fc:	681b      	ldr	r3, [r3, #0]
   331fe:	1ad3      	subs	r3, r2, r3
   33200:	d52a      	bpl.n	33258 <sw_timer_task+0xb0>
   33202:	68bb      	ldr	r3, [r7, #8]
   33204:	781b      	ldrb	r3, [r3, #0]
   33206:	2204      	movs	r2, #4
   33208:	4013      	ands	r3, r2
   3320a:	b2db      	uxtb	r3, r3
   3320c:	2b00      	cmp	r3, #0
   3320e:	d123      	bne.n	33258 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   33210:	68bb      	ldr	r3, [r7, #8]
   33212:	781a      	ldrb	r2, [r3, #0]
   33214:	2104      	movs	r1, #4
   33216:	430a      	orrs	r2, r1
   33218:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   3321a:	68bb      	ldr	r3, [r7, #8]
   3321c:	68db      	ldr	r3, [r3, #12]
   3321e:	2b00      	cmp	r3, #0
   33220:	d007      	beq.n	33232 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   33222:	68bb      	ldr	r3, [r7, #8]
   33224:	68da      	ldr	r2, [r3, #12]
   33226:	4b11      	ldr	r3, [pc, #68]	; (3326c <sw_timer_task+0xc4>)
   33228:	681b      	ldr	r3, [r3, #0]
   3322a:	18d2      	adds	r2, r2, r3
   3322c:	68bb      	ldr	r3, [r7, #8]
   3322e:	611a      	str	r2, [r3, #16]
   33230:	e004      	b.n	3323c <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   33232:	68bb      	ldr	r3, [r7, #8]
   33234:	781a      	ldrb	r2, [r3, #0]
   33236:	2102      	movs	r1, #2
   33238:	438a      	bics	r2, r1
   3323a:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   3323c:	68bb      	ldr	r3, [r7, #8]
   3323e:	685c      	ldr	r4, [r3, #4]
   33240:	68bb      	ldr	r3, [r7, #8]
   33242:	689a      	ldr	r2, [r3, #8]
   33244:	68bb      	ldr	r3, [r7, #8]
   33246:	68db      	ldr	r3, [r3, #12]
   33248:	68f9      	ldr	r1, [r7, #12]
   3324a:	6878      	ldr	r0, [r7, #4]
   3324c:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3324e:	68bb      	ldr	r3, [r7, #8]
   33250:	781a      	ldrb	r2, [r3, #0]
   33252:	2104      	movs	r1, #4
   33254:	438a      	bics	r2, r1
   33256:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33258:	68fb      	ldr	r3, [r7, #12]
   3325a:	3301      	adds	r3, #1
   3325c:	60fb      	str	r3, [r7, #12]
   3325e:	68fb      	ldr	r3, [r7, #12]
   33260:	2b00      	cmp	r3, #0
   33262:	dda8      	ble.n	331b6 <sw_timer_task+0xe>
			}
		}
	}
}
   33264:	46c0      	nop			; (mov r8, r8)
   33266:	46bd      	mov	sp, r7
   33268:	b005      	add	sp, #20
   3326a:	bd90      	pop	{r4, r7, pc}
   3326c:	20004348 	.word	0x20004348

00033270 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   33270:	b580      	push	{r7, lr}
   33272:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   33274:	4b06      	ldr	r3, [pc, #24]	; (33290 <main+0x20>)
   33276:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   33278:	4b06      	ldr	r3, [pc, #24]	; (33294 <main+0x24>)
   3327a:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   3327c:	2001      	movs	r0, #1
   3327e:	4b06      	ldr	r3, [pc, #24]	; (33298 <main+0x28>)
   33280:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   33282:	4b06      	ldr	r3, [pc, #24]	; (3329c <main+0x2c>)
   33284:	4798      	blx	r3

    return 0;  // Will not get here
   33286:	2300      	movs	r3, #0
}
   33288:	0018      	movs	r0, r3
   3328a:	46bd      	mov	sp, r7
   3328c:	bd80      	pop	{r7, pc}
   3328e:	46c0      	nop			; (mov r8, r8)
   33290:	0002ad61 	.word	0x0002ad61
   33294:	0001e869 	.word	0x0001e869
   33298:	00018f31 	.word	0x00018f31
   3329c:	0001cec1 	.word	0x0001cec1

000332a0 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   332a0:	b580      	push	{r7, lr}
   332a2:	b082      	sub	sp, #8
   332a4:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   332a6:	4b2e      	ldr	r3, [pc, #184]	; (33360 <vApplicationDaemonTaskStartupHook+0xc0>)
   332a8:	0018      	movs	r0, r3
   332aa:	4b2e      	ldr	r3, [pc, #184]	; (33364 <vApplicationDaemonTaskStartupHook+0xc4>)
   332ac:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   332ae:	4b2e      	ldr	r3, [pc, #184]	; (33368 <vApplicationDaemonTaskStartupHook+0xc8>)
   332b0:	0018      	movs	r0, r3
   332b2:	4b2c      	ldr	r3, [pc, #176]	; (33364 <vApplicationDaemonTaskStartupHook+0xc4>)
   332b4:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   332b6:	4b2d      	ldr	r3, [pc, #180]	; (3336c <vApplicationDaemonTaskStartupHook+0xcc>)
   332b8:	4798      	blx	r3
   332ba:	1e03      	subs	r3, r0, #0
   332bc:	d004      	beq.n	332c8 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   332be:	4b2c      	ldr	r3, [pc, #176]	; (33370 <vApplicationDaemonTaskStartupHook+0xd0>)
   332c0:	0018      	movs	r0, r3
   332c2:	4b28      	ldr	r3, [pc, #160]	; (33364 <vApplicationDaemonTaskStartupHook+0xc4>)
   332c4:	4798      	blx	r3
   332c6:	e003      	b.n	332d0 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   332c8:	4b2a      	ldr	r3, [pc, #168]	; (33374 <vApplicationDaemonTaskStartupHook+0xd4>)
   332ca:	0018      	movs	r0, r3
   332cc:	4b25      	ldr	r3, [pc, #148]	; (33364 <vApplicationDaemonTaskStartupHook+0xc4>)
   332ce:	4798      	blx	r3
    }

    if (0 != InitializeSeesaw()) {
   332d0:	4b29      	ldr	r3, [pc, #164]	; (33378 <vApplicationDaemonTaskStartupHook+0xd8>)
   332d2:	4798      	blx	r3
   332d4:	1e03      	subs	r3, r0, #0
   332d6:	d004      	beq.n	332e2 <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   332d8:	4b28      	ldr	r3, [pc, #160]	; (3337c <vApplicationDaemonTaskStartupHook+0xdc>)
   332da:	0018      	movs	r0, r3
   332dc:	4b21      	ldr	r3, [pc, #132]	; (33364 <vApplicationDaemonTaskStartupHook+0xc4>)
   332de:	4798      	blx	r3
   332e0:	e003      	b.n	332ea <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   332e2:	4b27      	ldr	r3, [pc, #156]	; (33380 <vApplicationDaemonTaskStartupHook+0xe0>)
   332e4:	0018      	movs	r0, r3
   332e6:	4b1f      	ldr	r3, [pc, #124]	; (33364 <vApplicationDaemonTaskStartupHook+0xc4>)
   332e8:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   332ea:	1dfb      	adds	r3, r7, #7
   332ec:	2200      	movs	r2, #0
   332ee:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   332f0:	4b24      	ldr	r3, [pc, #144]	; (33384 <vApplicationDaemonTaskStartupHook+0xe4>)
   332f2:	4798      	blx	r3
   332f4:	0002      	movs	r2, r0
   332f6:	1dfb      	adds	r3, r7, #7
   332f8:	0019      	movs	r1, r3
   332fa:	0010      	movs	r0, r2
   332fc:	4b22      	ldr	r3, [pc, #136]	; (33388 <vApplicationDaemonTaskStartupHook+0xe8>)
   332fe:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   33300:	1dfb      	adds	r3, r7, #7
   33302:	781b      	ldrb	r3, [r3, #0]
   33304:	2b6c      	cmp	r3, #108	; 0x6c
   33306:	d004      	beq.n	33312 <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   33308:	4b20      	ldr	r3, [pc, #128]	; (3338c <vApplicationDaemonTaskStartupHook+0xec>)
   3330a:	0018      	movs	r0, r3
   3330c:	4b15      	ldr	r3, [pc, #84]	; (33364 <vApplicationDaemonTaskStartupHook+0xc4>)
   3330e:	4798      	blx	r3
   33310:	e010      	b.n	33334 <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   33312:	4b1f      	ldr	r3, [pc, #124]	; (33390 <vApplicationDaemonTaskStartupHook+0xf0>)
   33314:	0018      	movs	r0, r3
   33316:	4b13      	ldr	r3, [pc, #76]	; (33364 <vApplicationDaemonTaskStartupHook+0xc4>)
   33318:	4798      	blx	r3
        if (InitImu() == 0) {
   3331a:	4b1e      	ldr	r3, [pc, #120]	; (33394 <vApplicationDaemonTaskStartupHook+0xf4>)
   3331c:	4798      	blx	r3
   3331e:	1e03      	subs	r3, r0, #0
   33320:	d104      	bne.n	3332c <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   33322:	4b1d      	ldr	r3, [pc, #116]	; (33398 <vApplicationDaemonTaskStartupHook+0xf8>)
   33324:	0018      	movs	r0, r3
   33326:	4b0f      	ldr	r3, [pc, #60]	; (33364 <vApplicationDaemonTaskStartupHook+0xc4>)
   33328:	4798      	blx	r3
   3332a:	e003      	b.n	33334 <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   3332c:	4b1b      	ldr	r3, [pc, #108]	; (3339c <vApplicationDaemonTaskStartupHook+0xfc>)
   3332e:	0018      	movs	r0, r3
   33330:	4b0c      	ldr	r3, [pc, #48]	; (33364 <vApplicationDaemonTaskStartupHook+0xc4>)
   33332:	4798      	blx	r3
        }
    }

    SerialConsoleWriteString("Initializing distance sensor\r\n");
   33334:	4b1a      	ldr	r3, [pc, #104]	; (333a0 <vApplicationDaemonTaskStartupHook+0x100>)
   33336:	0018      	movs	r0, r3
   33338:	4b0a      	ldr	r3, [pc, #40]	; (33364 <vApplicationDaemonTaskStartupHook+0xc4>)
   3333a:	4798      	blx	r3
    InitializeDistanceSensor();
   3333c:	4b19      	ldr	r3, [pc, #100]	; (333a4 <vApplicationDaemonTaskStartupHook+0x104>)
   3333e:	4798      	blx	r3
    SerialConsoleWriteString("Distance sensor initialized\r\n");
   33340:	4b19      	ldr	r3, [pc, #100]	; (333a8 <vApplicationDaemonTaskStartupHook+0x108>)
   33342:	0018      	movs	r0, r3
   33344:	4b07      	ldr	r3, [pc, #28]	; (33364 <vApplicationDaemonTaskStartupHook+0xc4>)
   33346:	4798      	blx	r3

    StartTasks();
   33348:	4b18      	ldr	r3, [pc, #96]	; (333ac <vApplicationDaemonTaskStartupHook+0x10c>)
   3334a:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   3334c:	4b18      	ldr	r3, [pc, #96]	; (333b0 <vApplicationDaemonTaskStartupHook+0x110>)
   3334e:	681b      	ldr	r3, [r3, #0]
   33350:	0018      	movs	r0, r3
   33352:	4b18      	ldr	r3, [pc, #96]	; (333b4 <vApplicationDaemonTaskStartupHook+0x114>)
   33354:	4798      	blx	r3
}
   33356:	46c0      	nop			; (mov r8, r8)
   33358:	46bd      	mov	sp, r7
   3335a:	b002      	add	sp, #8
   3335c:	bd80      	pop	{r7, pc}
   3335e:	46c0      	nop			; (mov r8, r8)
   33360:	0003a92c 	.word	0x0003a92c
   33364:	0001e8d9 	.word	0x0001e8d9
   33368:	0003a950 	.word	0x0003a950
   3336c:	00014d21 	.word	0x00014d21
   33370:	0003a968 	.word	0x0003a968
   33374:	0003a98c 	.word	0x0003a98c
   33378:	00015f65 	.word	0x00015f65
   3337c:	0003a9a8 	.word	0x0003a9a8
   33380:	0003a9c8 	.word	0x0003a9c8
   33384:	00015e8d 	.word	0x00015e8d
   33388:	00015a91 	.word	0x00015a91
   3338c:	0003a9e0 	.word	0x0003a9e0
   33390:	0003a9f4 	.word	0x0003a9f4
   33394:	00015e9d 	.word	0x00015e9d
   33398:	0003aa04 	.word	0x0003aa04
   3339c:	0003aa18 	.word	0x0003aa18
   333a0:	0003aa34 	.word	0x0003aa34
   333a4:	000146ed 	.word	0x000146ed
   333a8:	0003aa54 	.word	0x0003aa54
   333ac:	000333b9 	.word	0x000333b9
   333b0:	20004350 	.word	0x20004350
   333b4:	0001cd65 	.word	0x0001cd65

000333b8 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   333b8:	b590      	push	{r4, r7, lr}
   333ba:	b083      	sub	sp, #12
   333bc:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   333be:	4b44      	ldr	r3, [pc, #272]	; (334d0 <StartTasks+0x118>)
   333c0:	4798      	blx	r3
   333c2:	0003      	movs	r3, r0
   333c4:	4a43      	ldr	r2, [pc, #268]	; (334d4 <StartTasks+0x11c>)
   333c6:	4844      	ldr	r0, [pc, #272]	; (334d8 <StartTasks+0x120>)
   333c8:	2140      	movs	r1, #64	; 0x40
   333ca:	4c44      	ldr	r4, [pc, #272]	; (334dc <StartTasks+0x124>)
   333cc:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   333ce:	4b42      	ldr	r3, [pc, #264]	; (334d8 <StartTasks+0x120>)
   333d0:	0018      	movs	r0, r3
   333d2:	4b43      	ldr	r3, [pc, #268]	; (334e0 <StartTasks+0x128>)
   333d4:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   333d6:	23c8      	movs	r3, #200	; 0xc8
   333d8:	005a      	lsls	r2, r3, #1
   333da:	4942      	ldr	r1, [pc, #264]	; (334e4 <StartTasks+0x12c>)
   333dc:	4842      	ldr	r0, [pc, #264]	; (334e8 <StartTasks+0x130>)
   333de:	4b43      	ldr	r3, [pc, #268]	; (334ec <StartTasks+0x134>)
   333e0:	9301      	str	r3, [sp, #4]
   333e2:	2304      	movs	r3, #4
   333e4:	9300      	str	r3, [sp, #0]
   333e6:	2300      	movs	r3, #0
   333e8:	4c41      	ldr	r4, [pc, #260]	; (334f0 <StartTasks+0x138>)
   333ea:	47a0      	blx	r4
   333ec:	0003      	movs	r3, r0
   333ee:	2b01      	cmp	r3, #1
   333f0:	d003      	beq.n	333fa <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   333f2:	4b40      	ldr	r3, [pc, #256]	; (334f4 <StartTasks+0x13c>)
   333f4:	0018      	movs	r0, r3
   333f6:	4b3a      	ldr	r3, [pc, #232]	; (334e0 <StartTasks+0x128>)
   333f8:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   333fa:	4b35      	ldr	r3, [pc, #212]	; (334d0 <StartTasks+0x118>)
   333fc:	4798      	blx	r3
   333fe:	0003      	movs	r3, r0
   33400:	4a3d      	ldr	r2, [pc, #244]	; (334f8 <StartTasks+0x140>)
   33402:	4835      	ldr	r0, [pc, #212]	; (334d8 <StartTasks+0x120>)
   33404:	2140      	movs	r1, #64	; 0x40
   33406:	4c35      	ldr	r4, [pc, #212]	; (334dc <StartTasks+0x124>)
   33408:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3340a:	4b33      	ldr	r3, [pc, #204]	; (334d8 <StartTasks+0x120>)
   3340c:	0018      	movs	r0, r3
   3340e:	4b34      	ldr	r3, [pc, #208]	; (334e0 <StartTasks+0x128>)
   33410:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   33412:	23fa      	movs	r3, #250	; 0xfa
   33414:	009a      	lsls	r2, r3, #2
   33416:	4939      	ldr	r1, [pc, #228]	; (334fc <StartTasks+0x144>)
   33418:	4839      	ldr	r0, [pc, #228]	; (33500 <StartTasks+0x148>)
   3341a:	4b3a      	ldr	r3, [pc, #232]	; (33504 <StartTasks+0x14c>)
   3341c:	9301      	str	r3, [sp, #4]
   3341e:	2303      	movs	r3, #3
   33420:	9300      	str	r3, [sp, #0]
   33422:	2300      	movs	r3, #0
   33424:	4c32      	ldr	r4, [pc, #200]	; (334f0 <StartTasks+0x138>)
   33426:	47a0      	blx	r4
   33428:	0003      	movs	r3, r0
   3342a:	2b01      	cmp	r3, #1
   3342c:	d003      	beq.n	33436 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   3342e:	4b36      	ldr	r3, [pc, #216]	; (33508 <StartTasks+0x150>)
   33430:	0018      	movs	r0, r3
   33432:	4b2b      	ldr	r3, [pc, #172]	; (334e0 <StartTasks+0x128>)
   33434:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   33436:	4b26      	ldr	r3, [pc, #152]	; (334d0 <StartTasks+0x118>)
   33438:	4798      	blx	r3
   3343a:	0003      	movs	r3, r0
   3343c:	4a33      	ldr	r2, [pc, #204]	; (3350c <StartTasks+0x154>)
   3343e:	4826      	ldr	r0, [pc, #152]	; (334d8 <StartTasks+0x120>)
   33440:	2140      	movs	r1, #64	; 0x40
   33442:	4c26      	ldr	r4, [pc, #152]	; (334dc <StartTasks+0x124>)
   33444:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   33446:	4b24      	ldr	r3, [pc, #144]	; (334d8 <StartTasks+0x120>)
   33448:	0018      	movs	r0, r3
   3344a:	4b25      	ldr	r3, [pc, #148]	; (334e0 <StartTasks+0x128>)
   3344c:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   3344e:	23c8      	movs	r3, #200	; 0xc8
   33450:	005a      	lsls	r2, r3, #1
   33452:	492f      	ldr	r1, [pc, #188]	; (33510 <StartTasks+0x158>)
   33454:	482f      	ldr	r0, [pc, #188]	; (33514 <StartTasks+0x15c>)
   33456:	4b30      	ldr	r3, [pc, #192]	; (33518 <StartTasks+0x160>)
   33458:	9301      	str	r3, [sp, #4]
   3345a:	2302      	movs	r3, #2
   3345c:	9300      	str	r3, [sp, #0]
   3345e:	2300      	movs	r3, #0
   33460:	4c23      	ldr	r4, [pc, #140]	; (334f0 <StartTasks+0x138>)
   33462:	47a0      	blx	r4
   33464:	0003      	movs	r3, r0
   33466:	2b01      	cmp	r3, #1
   33468:	d003      	beq.n	33472 <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   3346a:	4b2c      	ldr	r3, [pc, #176]	; (3351c <StartTasks+0x164>)
   3346c:	0018      	movs	r0, r3
   3346e:	4b1c      	ldr	r3, [pc, #112]	; (334e0 <StartTasks+0x128>)
   33470:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   33472:	4b17      	ldr	r3, [pc, #92]	; (334d0 <StartTasks+0x118>)
   33474:	4798      	blx	r3
   33476:	0003      	movs	r3, r0
   33478:	4a29      	ldr	r2, [pc, #164]	; (33520 <StartTasks+0x168>)
   3347a:	4817      	ldr	r0, [pc, #92]	; (334d8 <StartTasks+0x120>)
   3347c:	2140      	movs	r1, #64	; 0x40
   3347e:	4c17      	ldr	r4, [pc, #92]	; (334dc <StartTasks+0x124>)
   33480:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   33482:	4b15      	ldr	r3, [pc, #84]	; (334d8 <StartTasks+0x120>)
   33484:	0018      	movs	r0, r3
   33486:	4b16      	ldr	r3, [pc, #88]	; (334e0 <StartTasks+0x128>)
   33488:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   3348a:	2380      	movs	r3, #128	; 0x80
   3348c:	005a      	lsls	r2, r3, #1
   3348e:	4925      	ldr	r1, [pc, #148]	; (33524 <StartTasks+0x16c>)
   33490:	4825      	ldr	r0, [pc, #148]	; (33528 <StartTasks+0x170>)
   33492:	4b26      	ldr	r3, [pc, #152]	; (3352c <StartTasks+0x174>)
   33494:	9301      	str	r3, [sp, #4]
   33496:	2304      	movs	r3, #4
   33498:	9300      	str	r3, [sp, #0]
   3349a:	2300      	movs	r3, #0
   3349c:	4c14      	ldr	r4, [pc, #80]	; (334f0 <StartTasks+0x138>)
   3349e:	47a0      	blx	r4
   334a0:	0003      	movs	r3, r0
   334a2:	2b01      	cmp	r3, #1
   334a4:	d003      	beq.n	334ae <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   334a6:	4b22      	ldr	r3, [pc, #136]	; (33530 <StartTasks+0x178>)
   334a8:	0018      	movs	r0, r3
   334aa:	4b0d      	ldr	r3, [pc, #52]	; (334e0 <StartTasks+0x128>)
   334ac:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   334ae:	4b08      	ldr	r3, [pc, #32]	; (334d0 <StartTasks+0x118>)
   334b0:	4798      	blx	r3
   334b2:	0003      	movs	r3, r0
   334b4:	4a1f      	ldr	r2, [pc, #124]	; (33534 <StartTasks+0x17c>)
   334b6:	4808      	ldr	r0, [pc, #32]	; (334d8 <StartTasks+0x120>)
   334b8:	2140      	movs	r1, #64	; 0x40
   334ba:	4c08      	ldr	r4, [pc, #32]	; (334dc <StartTasks+0x124>)
   334bc:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   334be:	4b06      	ldr	r3, [pc, #24]	; (334d8 <StartTasks+0x120>)
   334c0:	0018      	movs	r0, r3
   334c2:	4b07      	ldr	r3, [pc, #28]	; (334e0 <StartTasks+0x128>)
   334c4:	4798      	blx	r3
}
   334c6:	46c0      	nop			; (mov r8, r8)
   334c8:	46bd      	mov	sp, r7
   334ca:	b001      	add	sp, #4
   334cc:	bd90      	pop	{r4, r7, pc}
   334ce:	46c0      	nop			; (mov r8, r8)
   334d0:	0001aea1 	.word	0x0001aea1
   334d4:	0003aa74 	.word	0x0003aa74
   334d8:	20005880 	.word	0x20005880
   334dc:	0003579d 	.word	0x0003579d
   334e0:	0001e8d9 	.word	0x0001e8d9
   334e4:	0003aa98 	.word	0x0003aa98
   334e8:	00013ac9 	.word	0x00013ac9
   334ec:	2000434c 	.word	0x2000434c
   334f0:	0001c8e9 	.word	0x0001c8e9
   334f4:	0003aaa4 	.word	0x0003aaa4
   334f8:	0003aad0 	.word	0x0003aad0
   334fc:	0003aaf0 	.word	0x0003aaf0
   33500:	00017d11 	.word	0x00017d11
   33504:	20004354 	.word	0x20004354
   33508:	0003aafc 	.word	0x0003aafc
   3350c:	0003ab28 	.word	0x0003ab28
   33510:	0003ab48 	.word	0x0003ab48
   33514:	00016479 	.word	0x00016479
   33518:	20004358 	.word	0x20004358
   3351c:	0003ab50 	.word	0x0003ab50
   33520:	0003ab7c 	.word	0x0003ab7c
   33524:	0003aba0 	.word	0x0003aba0
   33528:	00014379 	.word	0x00014379
   3352c:	2000435c 	.word	0x2000435c
   33530:	0003abb0 	.word	0x0003abb0
   33534:	0003abe0 	.word	0x0003abe0

00033538 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   33538:	b580      	push	{r7, lr}
   3353a:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   3353c:	4b02      	ldr	r3, [pc, #8]	; (33548 <vApplicationMallocFailedHook+0x10>)
   3353e:	0018      	movs	r0, r3
   33540:	4b02      	ldr	r3, [pc, #8]	; (3354c <vApplicationMallocFailedHook+0x14>)
   33542:	4798      	blx	r3
    while (1)
   33544:	e7fe      	b.n	33544 <vApplicationMallocFailedHook+0xc>
   33546:	46c0      	nop			; (mov r8, r8)
   33548:	0003ac08 	.word	0x0003ac08
   3354c:	0001e8d9 	.word	0x0001e8d9

00033550 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   33550:	b580      	push	{r7, lr}
   33552:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   33554:	4b02      	ldr	r3, [pc, #8]	; (33560 <vApplicationStackOverflowHook+0x10>)
   33556:	0018      	movs	r0, r3
   33558:	4b02      	ldr	r3, [pc, #8]	; (33564 <vApplicationStackOverflowHook+0x14>)
   3355a:	4798      	blx	r3
    while (1)
   3355c:	e7fe      	b.n	3355c <vApplicationStackOverflowHook+0xc>
   3355e:	46c0      	nop			; (mov r8, r8)
   33560:	0003ac34 	.word	0x0003ac34
   33564:	0001e8d9 	.word	0x0001e8d9

00033568 <__udivsi3>:
   33568:	2200      	movs	r2, #0
   3356a:	0843      	lsrs	r3, r0, #1
   3356c:	428b      	cmp	r3, r1
   3356e:	d374      	bcc.n	3365a <__udivsi3+0xf2>
   33570:	0903      	lsrs	r3, r0, #4
   33572:	428b      	cmp	r3, r1
   33574:	d35f      	bcc.n	33636 <__udivsi3+0xce>
   33576:	0a03      	lsrs	r3, r0, #8
   33578:	428b      	cmp	r3, r1
   3357a:	d344      	bcc.n	33606 <__udivsi3+0x9e>
   3357c:	0b03      	lsrs	r3, r0, #12
   3357e:	428b      	cmp	r3, r1
   33580:	d328      	bcc.n	335d4 <__udivsi3+0x6c>
   33582:	0c03      	lsrs	r3, r0, #16
   33584:	428b      	cmp	r3, r1
   33586:	d30d      	bcc.n	335a4 <__udivsi3+0x3c>
   33588:	22ff      	movs	r2, #255	; 0xff
   3358a:	0209      	lsls	r1, r1, #8
   3358c:	ba12      	rev	r2, r2
   3358e:	0c03      	lsrs	r3, r0, #16
   33590:	428b      	cmp	r3, r1
   33592:	d302      	bcc.n	3359a <__udivsi3+0x32>
   33594:	1212      	asrs	r2, r2, #8
   33596:	0209      	lsls	r1, r1, #8
   33598:	d065      	beq.n	33666 <__udivsi3+0xfe>
   3359a:	0b03      	lsrs	r3, r0, #12
   3359c:	428b      	cmp	r3, r1
   3359e:	d319      	bcc.n	335d4 <__udivsi3+0x6c>
   335a0:	e000      	b.n	335a4 <__udivsi3+0x3c>
   335a2:	0a09      	lsrs	r1, r1, #8
   335a4:	0bc3      	lsrs	r3, r0, #15
   335a6:	428b      	cmp	r3, r1
   335a8:	d301      	bcc.n	335ae <__udivsi3+0x46>
   335aa:	03cb      	lsls	r3, r1, #15
   335ac:	1ac0      	subs	r0, r0, r3
   335ae:	4152      	adcs	r2, r2
   335b0:	0b83      	lsrs	r3, r0, #14
   335b2:	428b      	cmp	r3, r1
   335b4:	d301      	bcc.n	335ba <__udivsi3+0x52>
   335b6:	038b      	lsls	r3, r1, #14
   335b8:	1ac0      	subs	r0, r0, r3
   335ba:	4152      	adcs	r2, r2
   335bc:	0b43      	lsrs	r3, r0, #13
   335be:	428b      	cmp	r3, r1
   335c0:	d301      	bcc.n	335c6 <__udivsi3+0x5e>
   335c2:	034b      	lsls	r3, r1, #13
   335c4:	1ac0      	subs	r0, r0, r3
   335c6:	4152      	adcs	r2, r2
   335c8:	0b03      	lsrs	r3, r0, #12
   335ca:	428b      	cmp	r3, r1
   335cc:	d301      	bcc.n	335d2 <__udivsi3+0x6a>
   335ce:	030b      	lsls	r3, r1, #12
   335d0:	1ac0      	subs	r0, r0, r3
   335d2:	4152      	adcs	r2, r2
   335d4:	0ac3      	lsrs	r3, r0, #11
   335d6:	428b      	cmp	r3, r1
   335d8:	d301      	bcc.n	335de <__udivsi3+0x76>
   335da:	02cb      	lsls	r3, r1, #11
   335dc:	1ac0      	subs	r0, r0, r3
   335de:	4152      	adcs	r2, r2
   335e0:	0a83      	lsrs	r3, r0, #10
   335e2:	428b      	cmp	r3, r1
   335e4:	d301      	bcc.n	335ea <__udivsi3+0x82>
   335e6:	028b      	lsls	r3, r1, #10
   335e8:	1ac0      	subs	r0, r0, r3
   335ea:	4152      	adcs	r2, r2
   335ec:	0a43      	lsrs	r3, r0, #9
   335ee:	428b      	cmp	r3, r1
   335f0:	d301      	bcc.n	335f6 <__udivsi3+0x8e>
   335f2:	024b      	lsls	r3, r1, #9
   335f4:	1ac0      	subs	r0, r0, r3
   335f6:	4152      	adcs	r2, r2
   335f8:	0a03      	lsrs	r3, r0, #8
   335fa:	428b      	cmp	r3, r1
   335fc:	d301      	bcc.n	33602 <__udivsi3+0x9a>
   335fe:	020b      	lsls	r3, r1, #8
   33600:	1ac0      	subs	r0, r0, r3
   33602:	4152      	adcs	r2, r2
   33604:	d2cd      	bcs.n	335a2 <__udivsi3+0x3a>
   33606:	09c3      	lsrs	r3, r0, #7
   33608:	428b      	cmp	r3, r1
   3360a:	d301      	bcc.n	33610 <__udivsi3+0xa8>
   3360c:	01cb      	lsls	r3, r1, #7
   3360e:	1ac0      	subs	r0, r0, r3
   33610:	4152      	adcs	r2, r2
   33612:	0983      	lsrs	r3, r0, #6
   33614:	428b      	cmp	r3, r1
   33616:	d301      	bcc.n	3361c <__udivsi3+0xb4>
   33618:	018b      	lsls	r3, r1, #6
   3361a:	1ac0      	subs	r0, r0, r3
   3361c:	4152      	adcs	r2, r2
   3361e:	0943      	lsrs	r3, r0, #5
   33620:	428b      	cmp	r3, r1
   33622:	d301      	bcc.n	33628 <__udivsi3+0xc0>
   33624:	014b      	lsls	r3, r1, #5
   33626:	1ac0      	subs	r0, r0, r3
   33628:	4152      	adcs	r2, r2
   3362a:	0903      	lsrs	r3, r0, #4
   3362c:	428b      	cmp	r3, r1
   3362e:	d301      	bcc.n	33634 <__udivsi3+0xcc>
   33630:	010b      	lsls	r3, r1, #4
   33632:	1ac0      	subs	r0, r0, r3
   33634:	4152      	adcs	r2, r2
   33636:	08c3      	lsrs	r3, r0, #3
   33638:	428b      	cmp	r3, r1
   3363a:	d301      	bcc.n	33640 <__udivsi3+0xd8>
   3363c:	00cb      	lsls	r3, r1, #3
   3363e:	1ac0      	subs	r0, r0, r3
   33640:	4152      	adcs	r2, r2
   33642:	0883      	lsrs	r3, r0, #2
   33644:	428b      	cmp	r3, r1
   33646:	d301      	bcc.n	3364c <__udivsi3+0xe4>
   33648:	008b      	lsls	r3, r1, #2
   3364a:	1ac0      	subs	r0, r0, r3
   3364c:	4152      	adcs	r2, r2
   3364e:	0843      	lsrs	r3, r0, #1
   33650:	428b      	cmp	r3, r1
   33652:	d301      	bcc.n	33658 <__udivsi3+0xf0>
   33654:	004b      	lsls	r3, r1, #1
   33656:	1ac0      	subs	r0, r0, r3
   33658:	4152      	adcs	r2, r2
   3365a:	1a41      	subs	r1, r0, r1
   3365c:	d200      	bcs.n	33660 <__udivsi3+0xf8>
   3365e:	4601      	mov	r1, r0
   33660:	4152      	adcs	r2, r2
   33662:	4610      	mov	r0, r2
   33664:	4770      	bx	lr
   33666:	e7ff      	b.n	33668 <__udivsi3+0x100>
   33668:	b501      	push	{r0, lr}
   3366a:	2000      	movs	r0, #0
   3366c:	f000 f8f0 	bl	33850 <__aeabi_idiv0>
   33670:	bd02      	pop	{r1, pc}
   33672:	46c0      	nop			; (mov r8, r8)

00033674 <__aeabi_uidivmod>:
   33674:	2900      	cmp	r1, #0
   33676:	d0f7      	beq.n	33668 <__udivsi3+0x100>
   33678:	e776      	b.n	33568 <__udivsi3>
   3367a:	4770      	bx	lr

0003367c <__divsi3>:
   3367c:	4603      	mov	r3, r0
   3367e:	430b      	orrs	r3, r1
   33680:	d47f      	bmi.n	33782 <__divsi3+0x106>
   33682:	2200      	movs	r2, #0
   33684:	0843      	lsrs	r3, r0, #1
   33686:	428b      	cmp	r3, r1
   33688:	d374      	bcc.n	33774 <__divsi3+0xf8>
   3368a:	0903      	lsrs	r3, r0, #4
   3368c:	428b      	cmp	r3, r1
   3368e:	d35f      	bcc.n	33750 <__divsi3+0xd4>
   33690:	0a03      	lsrs	r3, r0, #8
   33692:	428b      	cmp	r3, r1
   33694:	d344      	bcc.n	33720 <__divsi3+0xa4>
   33696:	0b03      	lsrs	r3, r0, #12
   33698:	428b      	cmp	r3, r1
   3369a:	d328      	bcc.n	336ee <__divsi3+0x72>
   3369c:	0c03      	lsrs	r3, r0, #16
   3369e:	428b      	cmp	r3, r1
   336a0:	d30d      	bcc.n	336be <__divsi3+0x42>
   336a2:	22ff      	movs	r2, #255	; 0xff
   336a4:	0209      	lsls	r1, r1, #8
   336a6:	ba12      	rev	r2, r2
   336a8:	0c03      	lsrs	r3, r0, #16
   336aa:	428b      	cmp	r3, r1
   336ac:	d302      	bcc.n	336b4 <__divsi3+0x38>
   336ae:	1212      	asrs	r2, r2, #8
   336b0:	0209      	lsls	r1, r1, #8
   336b2:	d065      	beq.n	33780 <__divsi3+0x104>
   336b4:	0b03      	lsrs	r3, r0, #12
   336b6:	428b      	cmp	r3, r1
   336b8:	d319      	bcc.n	336ee <__divsi3+0x72>
   336ba:	e000      	b.n	336be <__divsi3+0x42>
   336bc:	0a09      	lsrs	r1, r1, #8
   336be:	0bc3      	lsrs	r3, r0, #15
   336c0:	428b      	cmp	r3, r1
   336c2:	d301      	bcc.n	336c8 <__divsi3+0x4c>
   336c4:	03cb      	lsls	r3, r1, #15
   336c6:	1ac0      	subs	r0, r0, r3
   336c8:	4152      	adcs	r2, r2
   336ca:	0b83      	lsrs	r3, r0, #14
   336cc:	428b      	cmp	r3, r1
   336ce:	d301      	bcc.n	336d4 <__divsi3+0x58>
   336d0:	038b      	lsls	r3, r1, #14
   336d2:	1ac0      	subs	r0, r0, r3
   336d4:	4152      	adcs	r2, r2
   336d6:	0b43      	lsrs	r3, r0, #13
   336d8:	428b      	cmp	r3, r1
   336da:	d301      	bcc.n	336e0 <__divsi3+0x64>
   336dc:	034b      	lsls	r3, r1, #13
   336de:	1ac0      	subs	r0, r0, r3
   336e0:	4152      	adcs	r2, r2
   336e2:	0b03      	lsrs	r3, r0, #12
   336e4:	428b      	cmp	r3, r1
   336e6:	d301      	bcc.n	336ec <__divsi3+0x70>
   336e8:	030b      	lsls	r3, r1, #12
   336ea:	1ac0      	subs	r0, r0, r3
   336ec:	4152      	adcs	r2, r2
   336ee:	0ac3      	lsrs	r3, r0, #11
   336f0:	428b      	cmp	r3, r1
   336f2:	d301      	bcc.n	336f8 <__divsi3+0x7c>
   336f4:	02cb      	lsls	r3, r1, #11
   336f6:	1ac0      	subs	r0, r0, r3
   336f8:	4152      	adcs	r2, r2
   336fa:	0a83      	lsrs	r3, r0, #10
   336fc:	428b      	cmp	r3, r1
   336fe:	d301      	bcc.n	33704 <__divsi3+0x88>
   33700:	028b      	lsls	r3, r1, #10
   33702:	1ac0      	subs	r0, r0, r3
   33704:	4152      	adcs	r2, r2
   33706:	0a43      	lsrs	r3, r0, #9
   33708:	428b      	cmp	r3, r1
   3370a:	d301      	bcc.n	33710 <__divsi3+0x94>
   3370c:	024b      	lsls	r3, r1, #9
   3370e:	1ac0      	subs	r0, r0, r3
   33710:	4152      	adcs	r2, r2
   33712:	0a03      	lsrs	r3, r0, #8
   33714:	428b      	cmp	r3, r1
   33716:	d301      	bcc.n	3371c <__divsi3+0xa0>
   33718:	020b      	lsls	r3, r1, #8
   3371a:	1ac0      	subs	r0, r0, r3
   3371c:	4152      	adcs	r2, r2
   3371e:	d2cd      	bcs.n	336bc <__divsi3+0x40>
   33720:	09c3      	lsrs	r3, r0, #7
   33722:	428b      	cmp	r3, r1
   33724:	d301      	bcc.n	3372a <__divsi3+0xae>
   33726:	01cb      	lsls	r3, r1, #7
   33728:	1ac0      	subs	r0, r0, r3
   3372a:	4152      	adcs	r2, r2
   3372c:	0983      	lsrs	r3, r0, #6
   3372e:	428b      	cmp	r3, r1
   33730:	d301      	bcc.n	33736 <__divsi3+0xba>
   33732:	018b      	lsls	r3, r1, #6
   33734:	1ac0      	subs	r0, r0, r3
   33736:	4152      	adcs	r2, r2
   33738:	0943      	lsrs	r3, r0, #5
   3373a:	428b      	cmp	r3, r1
   3373c:	d301      	bcc.n	33742 <__divsi3+0xc6>
   3373e:	014b      	lsls	r3, r1, #5
   33740:	1ac0      	subs	r0, r0, r3
   33742:	4152      	adcs	r2, r2
   33744:	0903      	lsrs	r3, r0, #4
   33746:	428b      	cmp	r3, r1
   33748:	d301      	bcc.n	3374e <__divsi3+0xd2>
   3374a:	010b      	lsls	r3, r1, #4
   3374c:	1ac0      	subs	r0, r0, r3
   3374e:	4152      	adcs	r2, r2
   33750:	08c3      	lsrs	r3, r0, #3
   33752:	428b      	cmp	r3, r1
   33754:	d301      	bcc.n	3375a <__divsi3+0xde>
   33756:	00cb      	lsls	r3, r1, #3
   33758:	1ac0      	subs	r0, r0, r3
   3375a:	4152      	adcs	r2, r2
   3375c:	0883      	lsrs	r3, r0, #2
   3375e:	428b      	cmp	r3, r1
   33760:	d301      	bcc.n	33766 <__divsi3+0xea>
   33762:	008b      	lsls	r3, r1, #2
   33764:	1ac0      	subs	r0, r0, r3
   33766:	4152      	adcs	r2, r2
   33768:	0843      	lsrs	r3, r0, #1
   3376a:	428b      	cmp	r3, r1
   3376c:	d301      	bcc.n	33772 <__divsi3+0xf6>
   3376e:	004b      	lsls	r3, r1, #1
   33770:	1ac0      	subs	r0, r0, r3
   33772:	4152      	adcs	r2, r2
   33774:	1a41      	subs	r1, r0, r1
   33776:	d200      	bcs.n	3377a <__divsi3+0xfe>
   33778:	4601      	mov	r1, r0
   3377a:	4152      	adcs	r2, r2
   3377c:	4610      	mov	r0, r2
   3377e:	4770      	bx	lr
   33780:	e05d      	b.n	3383e <__divsi3+0x1c2>
   33782:	0fca      	lsrs	r2, r1, #31
   33784:	d000      	beq.n	33788 <__divsi3+0x10c>
   33786:	4249      	negs	r1, r1
   33788:	1003      	asrs	r3, r0, #32
   3378a:	d300      	bcc.n	3378e <__divsi3+0x112>
   3378c:	4240      	negs	r0, r0
   3378e:	4053      	eors	r3, r2
   33790:	2200      	movs	r2, #0
   33792:	469c      	mov	ip, r3
   33794:	0903      	lsrs	r3, r0, #4
   33796:	428b      	cmp	r3, r1
   33798:	d32d      	bcc.n	337f6 <__divsi3+0x17a>
   3379a:	0a03      	lsrs	r3, r0, #8
   3379c:	428b      	cmp	r3, r1
   3379e:	d312      	bcc.n	337c6 <__divsi3+0x14a>
   337a0:	22fc      	movs	r2, #252	; 0xfc
   337a2:	0189      	lsls	r1, r1, #6
   337a4:	ba12      	rev	r2, r2
   337a6:	0a03      	lsrs	r3, r0, #8
   337a8:	428b      	cmp	r3, r1
   337aa:	d30c      	bcc.n	337c6 <__divsi3+0x14a>
   337ac:	0189      	lsls	r1, r1, #6
   337ae:	1192      	asrs	r2, r2, #6
   337b0:	428b      	cmp	r3, r1
   337b2:	d308      	bcc.n	337c6 <__divsi3+0x14a>
   337b4:	0189      	lsls	r1, r1, #6
   337b6:	1192      	asrs	r2, r2, #6
   337b8:	428b      	cmp	r3, r1
   337ba:	d304      	bcc.n	337c6 <__divsi3+0x14a>
   337bc:	0189      	lsls	r1, r1, #6
   337be:	d03a      	beq.n	33836 <__divsi3+0x1ba>
   337c0:	1192      	asrs	r2, r2, #6
   337c2:	e000      	b.n	337c6 <__divsi3+0x14a>
   337c4:	0989      	lsrs	r1, r1, #6
   337c6:	09c3      	lsrs	r3, r0, #7
   337c8:	428b      	cmp	r3, r1
   337ca:	d301      	bcc.n	337d0 <__divsi3+0x154>
   337cc:	01cb      	lsls	r3, r1, #7
   337ce:	1ac0      	subs	r0, r0, r3
   337d0:	4152      	adcs	r2, r2
   337d2:	0983      	lsrs	r3, r0, #6
   337d4:	428b      	cmp	r3, r1
   337d6:	d301      	bcc.n	337dc <__divsi3+0x160>
   337d8:	018b      	lsls	r3, r1, #6
   337da:	1ac0      	subs	r0, r0, r3
   337dc:	4152      	adcs	r2, r2
   337de:	0943      	lsrs	r3, r0, #5
   337e0:	428b      	cmp	r3, r1
   337e2:	d301      	bcc.n	337e8 <__divsi3+0x16c>
   337e4:	014b      	lsls	r3, r1, #5
   337e6:	1ac0      	subs	r0, r0, r3
   337e8:	4152      	adcs	r2, r2
   337ea:	0903      	lsrs	r3, r0, #4
   337ec:	428b      	cmp	r3, r1
   337ee:	d301      	bcc.n	337f4 <__divsi3+0x178>
   337f0:	010b      	lsls	r3, r1, #4
   337f2:	1ac0      	subs	r0, r0, r3
   337f4:	4152      	adcs	r2, r2
   337f6:	08c3      	lsrs	r3, r0, #3
   337f8:	428b      	cmp	r3, r1
   337fa:	d301      	bcc.n	33800 <__divsi3+0x184>
   337fc:	00cb      	lsls	r3, r1, #3
   337fe:	1ac0      	subs	r0, r0, r3
   33800:	4152      	adcs	r2, r2
   33802:	0883      	lsrs	r3, r0, #2
   33804:	428b      	cmp	r3, r1
   33806:	d301      	bcc.n	3380c <__divsi3+0x190>
   33808:	008b      	lsls	r3, r1, #2
   3380a:	1ac0      	subs	r0, r0, r3
   3380c:	4152      	adcs	r2, r2
   3380e:	d2d9      	bcs.n	337c4 <__divsi3+0x148>
   33810:	0843      	lsrs	r3, r0, #1
   33812:	428b      	cmp	r3, r1
   33814:	d301      	bcc.n	3381a <__divsi3+0x19e>
   33816:	004b      	lsls	r3, r1, #1
   33818:	1ac0      	subs	r0, r0, r3
   3381a:	4152      	adcs	r2, r2
   3381c:	1a41      	subs	r1, r0, r1
   3381e:	d200      	bcs.n	33822 <__divsi3+0x1a6>
   33820:	4601      	mov	r1, r0
   33822:	4663      	mov	r3, ip
   33824:	4152      	adcs	r2, r2
   33826:	105b      	asrs	r3, r3, #1
   33828:	4610      	mov	r0, r2
   3382a:	d301      	bcc.n	33830 <__divsi3+0x1b4>
   3382c:	4240      	negs	r0, r0
   3382e:	2b00      	cmp	r3, #0
   33830:	d500      	bpl.n	33834 <__divsi3+0x1b8>
   33832:	4249      	negs	r1, r1
   33834:	4770      	bx	lr
   33836:	4663      	mov	r3, ip
   33838:	105b      	asrs	r3, r3, #1
   3383a:	d300      	bcc.n	3383e <__divsi3+0x1c2>
   3383c:	4240      	negs	r0, r0
   3383e:	b501      	push	{r0, lr}
   33840:	2000      	movs	r0, #0
   33842:	f000 f805 	bl	33850 <__aeabi_idiv0>
   33846:	bd02      	pop	{r1, pc}

00033848 <__aeabi_idivmod>:
   33848:	2900      	cmp	r1, #0
   3384a:	d0f8      	beq.n	3383e <__divsi3+0x1c2>
   3384c:	e716      	b.n	3367c <__divsi3>
   3384e:	4770      	bx	lr

00033850 <__aeabi_idiv0>:
   33850:	4770      	bx	lr
   33852:	46c0      	nop			; (mov r8, r8)

00033854 <__aeabi_lmul>:
   33854:	b5f0      	push	{r4, r5, r6, r7, lr}
   33856:	46ce      	mov	lr, r9
   33858:	4647      	mov	r7, r8
   3385a:	0415      	lsls	r5, r2, #16
   3385c:	0c2d      	lsrs	r5, r5, #16
   3385e:	002e      	movs	r6, r5
   33860:	b580      	push	{r7, lr}
   33862:	0407      	lsls	r7, r0, #16
   33864:	0c14      	lsrs	r4, r2, #16
   33866:	0c3f      	lsrs	r7, r7, #16
   33868:	4699      	mov	r9, r3
   3386a:	0c03      	lsrs	r3, r0, #16
   3386c:	437e      	muls	r6, r7
   3386e:	435d      	muls	r5, r3
   33870:	4367      	muls	r7, r4
   33872:	4363      	muls	r3, r4
   33874:	197f      	adds	r7, r7, r5
   33876:	0c34      	lsrs	r4, r6, #16
   33878:	19e4      	adds	r4, r4, r7
   3387a:	469c      	mov	ip, r3
   3387c:	42a5      	cmp	r5, r4
   3387e:	d903      	bls.n	33888 <__aeabi_lmul+0x34>
   33880:	2380      	movs	r3, #128	; 0x80
   33882:	025b      	lsls	r3, r3, #9
   33884:	4698      	mov	r8, r3
   33886:	44c4      	add	ip, r8
   33888:	464b      	mov	r3, r9
   3388a:	4351      	muls	r1, r2
   3388c:	4343      	muls	r3, r0
   3388e:	0436      	lsls	r6, r6, #16
   33890:	0c36      	lsrs	r6, r6, #16
   33892:	0c25      	lsrs	r5, r4, #16
   33894:	0424      	lsls	r4, r4, #16
   33896:	4465      	add	r5, ip
   33898:	19a4      	adds	r4, r4, r6
   3389a:	1859      	adds	r1, r3, r1
   3389c:	1949      	adds	r1, r1, r5
   3389e:	0020      	movs	r0, r4
   338a0:	bc0c      	pop	{r2, r3}
   338a2:	4690      	mov	r8, r2
   338a4:	4699      	mov	r9, r3
   338a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000338a8 <__aeabi_fmul>:
   338a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   338aa:	4657      	mov	r7, sl
   338ac:	464e      	mov	r6, r9
   338ae:	4645      	mov	r5, r8
   338b0:	46de      	mov	lr, fp
   338b2:	b5e0      	push	{r5, r6, r7, lr}
   338b4:	0247      	lsls	r7, r0, #9
   338b6:	0046      	lsls	r6, r0, #1
   338b8:	4688      	mov	r8, r1
   338ba:	0a7f      	lsrs	r7, r7, #9
   338bc:	0e36      	lsrs	r6, r6, #24
   338be:	0fc4      	lsrs	r4, r0, #31
   338c0:	2e00      	cmp	r6, #0
   338c2:	d047      	beq.n	33954 <__aeabi_fmul+0xac>
   338c4:	2eff      	cmp	r6, #255	; 0xff
   338c6:	d024      	beq.n	33912 <__aeabi_fmul+0x6a>
   338c8:	00fb      	lsls	r3, r7, #3
   338ca:	2780      	movs	r7, #128	; 0x80
   338cc:	04ff      	lsls	r7, r7, #19
   338ce:	431f      	orrs	r7, r3
   338d0:	2300      	movs	r3, #0
   338d2:	4699      	mov	r9, r3
   338d4:	469a      	mov	sl, r3
   338d6:	3e7f      	subs	r6, #127	; 0x7f
   338d8:	4643      	mov	r3, r8
   338da:	025d      	lsls	r5, r3, #9
   338dc:	0058      	lsls	r0, r3, #1
   338de:	0fdb      	lsrs	r3, r3, #31
   338e0:	0a6d      	lsrs	r5, r5, #9
   338e2:	0e00      	lsrs	r0, r0, #24
   338e4:	4698      	mov	r8, r3
   338e6:	d043      	beq.n	33970 <__aeabi_fmul+0xc8>
   338e8:	28ff      	cmp	r0, #255	; 0xff
   338ea:	d03b      	beq.n	33964 <__aeabi_fmul+0xbc>
   338ec:	00eb      	lsls	r3, r5, #3
   338ee:	2580      	movs	r5, #128	; 0x80
   338f0:	2200      	movs	r2, #0
   338f2:	04ed      	lsls	r5, r5, #19
   338f4:	431d      	orrs	r5, r3
   338f6:	387f      	subs	r0, #127	; 0x7f
   338f8:	1836      	adds	r6, r6, r0
   338fa:	1c73      	adds	r3, r6, #1
   338fc:	4641      	mov	r1, r8
   338fe:	469b      	mov	fp, r3
   33900:	464b      	mov	r3, r9
   33902:	4061      	eors	r1, r4
   33904:	4313      	orrs	r3, r2
   33906:	2b0f      	cmp	r3, #15
   33908:	d864      	bhi.n	339d4 <__aeabi_fmul+0x12c>
   3390a:	4875      	ldr	r0, [pc, #468]	; (33ae0 <__aeabi_fmul+0x238>)
   3390c:	009b      	lsls	r3, r3, #2
   3390e:	58c3      	ldr	r3, [r0, r3]
   33910:	469f      	mov	pc, r3
   33912:	2f00      	cmp	r7, #0
   33914:	d142      	bne.n	3399c <__aeabi_fmul+0xf4>
   33916:	2308      	movs	r3, #8
   33918:	4699      	mov	r9, r3
   3391a:	3b06      	subs	r3, #6
   3391c:	26ff      	movs	r6, #255	; 0xff
   3391e:	469a      	mov	sl, r3
   33920:	e7da      	b.n	338d8 <__aeabi_fmul+0x30>
   33922:	4641      	mov	r1, r8
   33924:	2a02      	cmp	r2, #2
   33926:	d028      	beq.n	3397a <__aeabi_fmul+0xd2>
   33928:	2a03      	cmp	r2, #3
   3392a:	d100      	bne.n	3392e <__aeabi_fmul+0x86>
   3392c:	e0ce      	b.n	33acc <__aeabi_fmul+0x224>
   3392e:	2a01      	cmp	r2, #1
   33930:	d000      	beq.n	33934 <__aeabi_fmul+0x8c>
   33932:	e0ac      	b.n	33a8e <__aeabi_fmul+0x1e6>
   33934:	4011      	ands	r1, r2
   33936:	2000      	movs	r0, #0
   33938:	2200      	movs	r2, #0
   3393a:	b2cc      	uxtb	r4, r1
   3393c:	0240      	lsls	r0, r0, #9
   3393e:	05d2      	lsls	r2, r2, #23
   33940:	0a40      	lsrs	r0, r0, #9
   33942:	07e4      	lsls	r4, r4, #31
   33944:	4310      	orrs	r0, r2
   33946:	4320      	orrs	r0, r4
   33948:	bc3c      	pop	{r2, r3, r4, r5}
   3394a:	4690      	mov	r8, r2
   3394c:	4699      	mov	r9, r3
   3394e:	46a2      	mov	sl, r4
   33950:	46ab      	mov	fp, r5
   33952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33954:	2f00      	cmp	r7, #0
   33956:	d115      	bne.n	33984 <__aeabi_fmul+0xdc>
   33958:	2304      	movs	r3, #4
   3395a:	4699      	mov	r9, r3
   3395c:	3b03      	subs	r3, #3
   3395e:	2600      	movs	r6, #0
   33960:	469a      	mov	sl, r3
   33962:	e7b9      	b.n	338d8 <__aeabi_fmul+0x30>
   33964:	20ff      	movs	r0, #255	; 0xff
   33966:	2202      	movs	r2, #2
   33968:	2d00      	cmp	r5, #0
   3396a:	d0c5      	beq.n	338f8 <__aeabi_fmul+0x50>
   3396c:	2203      	movs	r2, #3
   3396e:	e7c3      	b.n	338f8 <__aeabi_fmul+0x50>
   33970:	2d00      	cmp	r5, #0
   33972:	d119      	bne.n	339a8 <__aeabi_fmul+0x100>
   33974:	2000      	movs	r0, #0
   33976:	2201      	movs	r2, #1
   33978:	e7be      	b.n	338f8 <__aeabi_fmul+0x50>
   3397a:	2401      	movs	r4, #1
   3397c:	22ff      	movs	r2, #255	; 0xff
   3397e:	400c      	ands	r4, r1
   33980:	2000      	movs	r0, #0
   33982:	e7db      	b.n	3393c <__aeabi_fmul+0x94>
   33984:	0038      	movs	r0, r7
   33986:	f001 fd65 	bl	35454 <__clzsi2>
   3398a:	2676      	movs	r6, #118	; 0x76
   3398c:	1f43      	subs	r3, r0, #5
   3398e:	409f      	lsls	r7, r3
   33990:	2300      	movs	r3, #0
   33992:	4276      	negs	r6, r6
   33994:	1a36      	subs	r6, r6, r0
   33996:	4699      	mov	r9, r3
   33998:	469a      	mov	sl, r3
   3399a:	e79d      	b.n	338d8 <__aeabi_fmul+0x30>
   3399c:	230c      	movs	r3, #12
   3399e:	4699      	mov	r9, r3
   339a0:	3b09      	subs	r3, #9
   339a2:	26ff      	movs	r6, #255	; 0xff
   339a4:	469a      	mov	sl, r3
   339a6:	e797      	b.n	338d8 <__aeabi_fmul+0x30>
   339a8:	0028      	movs	r0, r5
   339aa:	f001 fd53 	bl	35454 <__clzsi2>
   339ae:	1f43      	subs	r3, r0, #5
   339b0:	409d      	lsls	r5, r3
   339b2:	2376      	movs	r3, #118	; 0x76
   339b4:	425b      	negs	r3, r3
   339b6:	1a18      	subs	r0, r3, r0
   339b8:	2200      	movs	r2, #0
   339ba:	e79d      	b.n	338f8 <__aeabi_fmul+0x50>
   339bc:	2080      	movs	r0, #128	; 0x80
   339be:	2400      	movs	r4, #0
   339c0:	03c0      	lsls	r0, r0, #15
   339c2:	22ff      	movs	r2, #255	; 0xff
   339c4:	e7ba      	b.n	3393c <__aeabi_fmul+0x94>
   339c6:	003d      	movs	r5, r7
   339c8:	4652      	mov	r2, sl
   339ca:	e7ab      	b.n	33924 <__aeabi_fmul+0x7c>
   339cc:	003d      	movs	r5, r7
   339ce:	0021      	movs	r1, r4
   339d0:	4652      	mov	r2, sl
   339d2:	e7a7      	b.n	33924 <__aeabi_fmul+0x7c>
   339d4:	0c3b      	lsrs	r3, r7, #16
   339d6:	469c      	mov	ip, r3
   339d8:	042a      	lsls	r2, r5, #16
   339da:	0c12      	lsrs	r2, r2, #16
   339dc:	0c2b      	lsrs	r3, r5, #16
   339de:	0014      	movs	r4, r2
   339e0:	4660      	mov	r0, ip
   339e2:	4665      	mov	r5, ip
   339e4:	043f      	lsls	r7, r7, #16
   339e6:	0c3f      	lsrs	r7, r7, #16
   339e8:	437c      	muls	r4, r7
   339ea:	4342      	muls	r2, r0
   339ec:	435d      	muls	r5, r3
   339ee:	437b      	muls	r3, r7
   339f0:	0c27      	lsrs	r7, r4, #16
   339f2:	189b      	adds	r3, r3, r2
   339f4:	18ff      	adds	r7, r7, r3
   339f6:	42ba      	cmp	r2, r7
   339f8:	d903      	bls.n	33a02 <__aeabi_fmul+0x15a>
   339fa:	2380      	movs	r3, #128	; 0x80
   339fc:	025b      	lsls	r3, r3, #9
   339fe:	469c      	mov	ip, r3
   33a00:	4465      	add	r5, ip
   33a02:	0424      	lsls	r4, r4, #16
   33a04:	043a      	lsls	r2, r7, #16
   33a06:	0c24      	lsrs	r4, r4, #16
   33a08:	1912      	adds	r2, r2, r4
   33a0a:	0193      	lsls	r3, r2, #6
   33a0c:	1e5c      	subs	r4, r3, #1
   33a0e:	41a3      	sbcs	r3, r4
   33a10:	0c3f      	lsrs	r7, r7, #16
   33a12:	0e92      	lsrs	r2, r2, #26
   33a14:	197d      	adds	r5, r7, r5
   33a16:	431a      	orrs	r2, r3
   33a18:	01ad      	lsls	r5, r5, #6
   33a1a:	4315      	orrs	r5, r2
   33a1c:	012b      	lsls	r3, r5, #4
   33a1e:	d504      	bpl.n	33a2a <__aeabi_fmul+0x182>
   33a20:	2301      	movs	r3, #1
   33a22:	465e      	mov	r6, fp
   33a24:	086a      	lsrs	r2, r5, #1
   33a26:	401d      	ands	r5, r3
   33a28:	4315      	orrs	r5, r2
   33a2a:	0032      	movs	r2, r6
   33a2c:	327f      	adds	r2, #127	; 0x7f
   33a2e:	2a00      	cmp	r2, #0
   33a30:	dd25      	ble.n	33a7e <__aeabi_fmul+0x1d6>
   33a32:	076b      	lsls	r3, r5, #29
   33a34:	d004      	beq.n	33a40 <__aeabi_fmul+0x198>
   33a36:	230f      	movs	r3, #15
   33a38:	402b      	ands	r3, r5
   33a3a:	2b04      	cmp	r3, #4
   33a3c:	d000      	beq.n	33a40 <__aeabi_fmul+0x198>
   33a3e:	3504      	adds	r5, #4
   33a40:	012b      	lsls	r3, r5, #4
   33a42:	d503      	bpl.n	33a4c <__aeabi_fmul+0x1a4>
   33a44:	0032      	movs	r2, r6
   33a46:	4b27      	ldr	r3, [pc, #156]	; (33ae4 <__aeabi_fmul+0x23c>)
   33a48:	3280      	adds	r2, #128	; 0x80
   33a4a:	401d      	ands	r5, r3
   33a4c:	2afe      	cmp	r2, #254	; 0xfe
   33a4e:	dc94      	bgt.n	3397a <__aeabi_fmul+0xd2>
   33a50:	2401      	movs	r4, #1
   33a52:	01a8      	lsls	r0, r5, #6
   33a54:	0a40      	lsrs	r0, r0, #9
   33a56:	b2d2      	uxtb	r2, r2
   33a58:	400c      	ands	r4, r1
   33a5a:	e76f      	b.n	3393c <__aeabi_fmul+0x94>
   33a5c:	2080      	movs	r0, #128	; 0x80
   33a5e:	03c0      	lsls	r0, r0, #15
   33a60:	4207      	tst	r7, r0
   33a62:	d007      	beq.n	33a74 <__aeabi_fmul+0x1cc>
   33a64:	4205      	tst	r5, r0
   33a66:	d105      	bne.n	33a74 <__aeabi_fmul+0x1cc>
   33a68:	4328      	orrs	r0, r5
   33a6a:	0240      	lsls	r0, r0, #9
   33a6c:	0a40      	lsrs	r0, r0, #9
   33a6e:	4644      	mov	r4, r8
   33a70:	22ff      	movs	r2, #255	; 0xff
   33a72:	e763      	b.n	3393c <__aeabi_fmul+0x94>
   33a74:	4338      	orrs	r0, r7
   33a76:	0240      	lsls	r0, r0, #9
   33a78:	0a40      	lsrs	r0, r0, #9
   33a7a:	22ff      	movs	r2, #255	; 0xff
   33a7c:	e75e      	b.n	3393c <__aeabi_fmul+0x94>
   33a7e:	2401      	movs	r4, #1
   33a80:	1aa3      	subs	r3, r4, r2
   33a82:	2b1b      	cmp	r3, #27
   33a84:	dd05      	ble.n	33a92 <__aeabi_fmul+0x1ea>
   33a86:	400c      	ands	r4, r1
   33a88:	2200      	movs	r2, #0
   33a8a:	2000      	movs	r0, #0
   33a8c:	e756      	b.n	3393c <__aeabi_fmul+0x94>
   33a8e:	465e      	mov	r6, fp
   33a90:	e7cb      	b.n	33a2a <__aeabi_fmul+0x182>
   33a92:	002a      	movs	r2, r5
   33a94:	2020      	movs	r0, #32
   33a96:	40da      	lsrs	r2, r3
   33a98:	1ac3      	subs	r3, r0, r3
   33a9a:	409d      	lsls	r5, r3
   33a9c:	002b      	movs	r3, r5
   33a9e:	1e5d      	subs	r5, r3, #1
   33aa0:	41ab      	sbcs	r3, r5
   33aa2:	4313      	orrs	r3, r2
   33aa4:	075a      	lsls	r2, r3, #29
   33aa6:	d004      	beq.n	33ab2 <__aeabi_fmul+0x20a>
   33aa8:	220f      	movs	r2, #15
   33aaa:	401a      	ands	r2, r3
   33aac:	2a04      	cmp	r2, #4
   33aae:	d000      	beq.n	33ab2 <__aeabi_fmul+0x20a>
   33ab0:	3304      	adds	r3, #4
   33ab2:	015a      	lsls	r2, r3, #5
   33ab4:	d504      	bpl.n	33ac0 <__aeabi_fmul+0x218>
   33ab6:	2401      	movs	r4, #1
   33ab8:	2201      	movs	r2, #1
   33aba:	400c      	ands	r4, r1
   33abc:	2000      	movs	r0, #0
   33abe:	e73d      	b.n	3393c <__aeabi_fmul+0x94>
   33ac0:	2401      	movs	r4, #1
   33ac2:	019b      	lsls	r3, r3, #6
   33ac4:	0a58      	lsrs	r0, r3, #9
   33ac6:	400c      	ands	r4, r1
   33ac8:	2200      	movs	r2, #0
   33aca:	e737      	b.n	3393c <__aeabi_fmul+0x94>
   33acc:	2080      	movs	r0, #128	; 0x80
   33ace:	2401      	movs	r4, #1
   33ad0:	03c0      	lsls	r0, r0, #15
   33ad2:	4328      	orrs	r0, r5
   33ad4:	0240      	lsls	r0, r0, #9
   33ad6:	0a40      	lsrs	r0, r0, #9
   33ad8:	400c      	ands	r4, r1
   33ada:	22ff      	movs	r2, #255	; 0xff
   33adc:	e72e      	b.n	3393c <__aeabi_fmul+0x94>
   33ade:	46c0      	nop			; (mov r8, r8)
   33ae0:	0003ac5c 	.word	0x0003ac5c
   33ae4:	f7ffffff 	.word	0xf7ffffff

00033ae8 <__aeabi_f2iz>:
   33ae8:	0241      	lsls	r1, r0, #9
   33aea:	0043      	lsls	r3, r0, #1
   33aec:	0fc2      	lsrs	r2, r0, #31
   33aee:	0a49      	lsrs	r1, r1, #9
   33af0:	0e1b      	lsrs	r3, r3, #24
   33af2:	2000      	movs	r0, #0
   33af4:	2b7e      	cmp	r3, #126	; 0x7e
   33af6:	dd0d      	ble.n	33b14 <__aeabi_f2iz+0x2c>
   33af8:	2b9d      	cmp	r3, #157	; 0x9d
   33afa:	dc0c      	bgt.n	33b16 <__aeabi_f2iz+0x2e>
   33afc:	2080      	movs	r0, #128	; 0x80
   33afe:	0400      	lsls	r0, r0, #16
   33b00:	4301      	orrs	r1, r0
   33b02:	2b95      	cmp	r3, #149	; 0x95
   33b04:	dc0a      	bgt.n	33b1c <__aeabi_f2iz+0x34>
   33b06:	2096      	movs	r0, #150	; 0x96
   33b08:	1ac3      	subs	r3, r0, r3
   33b0a:	40d9      	lsrs	r1, r3
   33b0c:	4248      	negs	r0, r1
   33b0e:	2a00      	cmp	r2, #0
   33b10:	d100      	bne.n	33b14 <__aeabi_f2iz+0x2c>
   33b12:	0008      	movs	r0, r1
   33b14:	4770      	bx	lr
   33b16:	4b03      	ldr	r3, [pc, #12]	; (33b24 <__aeabi_f2iz+0x3c>)
   33b18:	18d0      	adds	r0, r2, r3
   33b1a:	e7fb      	b.n	33b14 <__aeabi_f2iz+0x2c>
   33b1c:	3b96      	subs	r3, #150	; 0x96
   33b1e:	4099      	lsls	r1, r3
   33b20:	e7f4      	b.n	33b0c <__aeabi_f2iz+0x24>
   33b22:	46c0      	nop			; (mov r8, r8)
   33b24:	7fffffff 	.word	0x7fffffff

00033b28 <__aeabi_i2f>:
   33b28:	b570      	push	{r4, r5, r6, lr}
   33b2a:	2800      	cmp	r0, #0
   33b2c:	d030      	beq.n	33b90 <__aeabi_i2f+0x68>
   33b2e:	17c3      	asrs	r3, r0, #31
   33b30:	18c4      	adds	r4, r0, r3
   33b32:	405c      	eors	r4, r3
   33b34:	0fc5      	lsrs	r5, r0, #31
   33b36:	0020      	movs	r0, r4
   33b38:	f001 fc8c 	bl	35454 <__clzsi2>
   33b3c:	239e      	movs	r3, #158	; 0x9e
   33b3e:	1a1b      	subs	r3, r3, r0
   33b40:	2b96      	cmp	r3, #150	; 0x96
   33b42:	dc0d      	bgt.n	33b60 <__aeabi_i2f+0x38>
   33b44:	2296      	movs	r2, #150	; 0x96
   33b46:	1ad2      	subs	r2, r2, r3
   33b48:	4094      	lsls	r4, r2
   33b4a:	002a      	movs	r2, r5
   33b4c:	0264      	lsls	r4, r4, #9
   33b4e:	0a64      	lsrs	r4, r4, #9
   33b50:	b2db      	uxtb	r3, r3
   33b52:	0264      	lsls	r4, r4, #9
   33b54:	05db      	lsls	r3, r3, #23
   33b56:	0a60      	lsrs	r0, r4, #9
   33b58:	07d2      	lsls	r2, r2, #31
   33b5a:	4318      	orrs	r0, r3
   33b5c:	4310      	orrs	r0, r2
   33b5e:	bd70      	pop	{r4, r5, r6, pc}
   33b60:	2b99      	cmp	r3, #153	; 0x99
   33b62:	dc19      	bgt.n	33b98 <__aeabi_i2f+0x70>
   33b64:	2299      	movs	r2, #153	; 0x99
   33b66:	1ad2      	subs	r2, r2, r3
   33b68:	2a00      	cmp	r2, #0
   33b6a:	dd29      	ble.n	33bc0 <__aeabi_i2f+0x98>
   33b6c:	4094      	lsls	r4, r2
   33b6e:	0022      	movs	r2, r4
   33b70:	4c14      	ldr	r4, [pc, #80]	; (33bc4 <__aeabi_i2f+0x9c>)
   33b72:	4014      	ands	r4, r2
   33b74:	0751      	lsls	r1, r2, #29
   33b76:	d004      	beq.n	33b82 <__aeabi_i2f+0x5a>
   33b78:	210f      	movs	r1, #15
   33b7a:	400a      	ands	r2, r1
   33b7c:	2a04      	cmp	r2, #4
   33b7e:	d000      	beq.n	33b82 <__aeabi_i2f+0x5a>
   33b80:	3404      	adds	r4, #4
   33b82:	0162      	lsls	r2, r4, #5
   33b84:	d413      	bmi.n	33bae <__aeabi_i2f+0x86>
   33b86:	01a4      	lsls	r4, r4, #6
   33b88:	0a64      	lsrs	r4, r4, #9
   33b8a:	b2db      	uxtb	r3, r3
   33b8c:	002a      	movs	r2, r5
   33b8e:	e7e0      	b.n	33b52 <__aeabi_i2f+0x2a>
   33b90:	2200      	movs	r2, #0
   33b92:	2300      	movs	r3, #0
   33b94:	2400      	movs	r4, #0
   33b96:	e7dc      	b.n	33b52 <__aeabi_i2f+0x2a>
   33b98:	2205      	movs	r2, #5
   33b9a:	0021      	movs	r1, r4
   33b9c:	1a12      	subs	r2, r2, r0
   33b9e:	40d1      	lsrs	r1, r2
   33ba0:	22b9      	movs	r2, #185	; 0xb9
   33ba2:	1ad2      	subs	r2, r2, r3
   33ba4:	4094      	lsls	r4, r2
   33ba6:	1e62      	subs	r2, r4, #1
   33ba8:	4194      	sbcs	r4, r2
   33baa:	430c      	orrs	r4, r1
   33bac:	e7da      	b.n	33b64 <__aeabi_i2f+0x3c>
   33bae:	4b05      	ldr	r3, [pc, #20]	; (33bc4 <__aeabi_i2f+0x9c>)
   33bb0:	002a      	movs	r2, r5
   33bb2:	401c      	ands	r4, r3
   33bb4:	239f      	movs	r3, #159	; 0x9f
   33bb6:	01a4      	lsls	r4, r4, #6
   33bb8:	1a1b      	subs	r3, r3, r0
   33bba:	0a64      	lsrs	r4, r4, #9
   33bbc:	b2db      	uxtb	r3, r3
   33bbe:	e7c8      	b.n	33b52 <__aeabi_i2f+0x2a>
   33bc0:	0022      	movs	r2, r4
   33bc2:	e7d5      	b.n	33b70 <__aeabi_i2f+0x48>
   33bc4:	fbffffff 	.word	0xfbffffff

00033bc8 <__aeabi_dadd>:
   33bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33bca:	4645      	mov	r5, r8
   33bcc:	46de      	mov	lr, fp
   33bce:	4657      	mov	r7, sl
   33bd0:	464e      	mov	r6, r9
   33bd2:	030c      	lsls	r4, r1, #12
   33bd4:	b5e0      	push	{r5, r6, r7, lr}
   33bd6:	004e      	lsls	r6, r1, #1
   33bd8:	0fc9      	lsrs	r1, r1, #31
   33bda:	4688      	mov	r8, r1
   33bdc:	000d      	movs	r5, r1
   33bde:	0a61      	lsrs	r1, r4, #9
   33be0:	0f44      	lsrs	r4, r0, #29
   33be2:	430c      	orrs	r4, r1
   33be4:	00c7      	lsls	r7, r0, #3
   33be6:	0319      	lsls	r1, r3, #12
   33be8:	0058      	lsls	r0, r3, #1
   33bea:	0fdb      	lsrs	r3, r3, #31
   33bec:	469b      	mov	fp, r3
   33bee:	0a4b      	lsrs	r3, r1, #9
   33bf0:	0f51      	lsrs	r1, r2, #29
   33bf2:	430b      	orrs	r3, r1
   33bf4:	0d76      	lsrs	r6, r6, #21
   33bf6:	0d40      	lsrs	r0, r0, #21
   33bf8:	0019      	movs	r1, r3
   33bfa:	00d2      	lsls	r2, r2, #3
   33bfc:	45d8      	cmp	r8, fp
   33bfe:	d100      	bne.n	33c02 <__aeabi_dadd+0x3a>
   33c00:	e0ae      	b.n	33d60 <__aeabi_dadd+0x198>
   33c02:	1a35      	subs	r5, r6, r0
   33c04:	2d00      	cmp	r5, #0
   33c06:	dc00      	bgt.n	33c0a <__aeabi_dadd+0x42>
   33c08:	e0f6      	b.n	33df8 <__aeabi_dadd+0x230>
   33c0a:	2800      	cmp	r0, #0
   33c0c:	d10f      	bne.n	33c2e <__aeabi_dadd+0x66>
   33c0e:	4313      	orrs	r3, r2
   33c10:	d100      	bne.n	33c14 <__aeabi_dadd+0x4c>
   33c12:	e0db      	b.n	33dcc <__aeabi_dadd+0x204>
   33c14:	1e6b      	subs	r3, r5, #1
   33c16:	2b00      	cmp	r3, #0
   33c18:	d000      	beq.n	33c1c <__aeabi_dadd+0x54>
   33c1a:	e137      	b.n	33e8c <__aeabi_dadd+0x2c4>
   33c1c:	1aba      	subs	r2, r7, r2
   33c1e:	4297      	cmp	r7, r2
   33c20:	41bf      	sbcs	r7, r7
   33c22:	1a64      	subs	r4, r4, r1
   33c24:	427f      	negs	r7, r7
   33c26:	1be4      	subs	r4, r4, r7
   33c28:	2601      	movs	r6, #1
   33c2a:	0017      	movs	r7, r2
   33c2c:	e024      	b.n	33c78 <__aeabi_dadd+0xb0>
   33c2e:	4bc6      	ldr	r3, [pc, #792]	; (33f48 <__aeabi_dadd+0x380>)
   33c30:	429e      	cmp	r6, r3
   33c32:	d04d      	beq.n	33cd0 <__aeabi_dadd+0x108>
   33c34:	2380      	movs	r3, #128	; 0x80
   33c36:	041b      	lsls	r3, r3, #16
   33c38:	4319      	orrs	r1, r3
   33c3a:	2d38      	cmp	r5, #56	; 0x38
   33c3c:	dd00      	ble.n	33c40 <__aeabi_dadd+0x78>
   33c3e:	e107      	b.n	33e50 <__aeabi_dadd+0x288>
   33c40:	2d1f      	cmp	r5, #31
   33c42:	dd00      	ble.n	33c46 <__aeabi_dadd+0x7e>
   33c44:	e138      	b.n	33eb8 <__aeabi_dadd+0x2f0>
   33c46:	2020      	movs	r0, #32
   33c48:	1b43      	subs	r3, r0, r5
   33c4a:	469a      	mov	sl, r3
   33c4c:	000b      	movs	r3, r1
   33c4e:	4650      	mov	r0, sl
   33c50:	4083      	lsls	r3, r0
   33c52:	4699      	mov	r9, r3
   33c54:	0013      	movs	r3, r2
   33c56:	4648      	mov	r0, r9
   33c58:	40eb      	lsrs	r3, r5
   33c5a:	4318      	orrs	r0, r3
   33c5c:	0003      	movs	r3, r0
   33c5e:	4650      	mov	r0, sl
   33c60:	4082      	lsls	r2, r0
   33c62:	1e50      	subs	r0, r2, #1
   33c64:	4182      	sbcs	r2, r0
   33c66:	40e9      	lsrs	r1, r5
   33c68:	431a      	orrs	r2, r3
   33c6a:	1aba      	subs	r2, r7, r2
   33c6c:	1a61      	subs	r1, r4, r1
   33c6e:	4297      	cmp	r7, r2
   33c70:	41a4      	sbcs	r4, r4
   33c72:	0017      	movs	r7, r2
   33c74:	4264      	negs	r4, r4
   33c76:	1b0c      	subs	r4, r1, r4
   33c78:	0223      	lsls	r3, r4, #8
   33c7a:	d562      	bpl.n	33d42 <__aeabi_dadd+0x17a>
   33c7c:	0264      	lsls	r4, r4, #9
   33c7e:	0a65      	lsrs	r5, r4, #9
   33c80:	2d00      	cmp	r5, #0
   33c82:	d100      	bne.n	33c86 <__aeabi_dadd+0xbe>
   33c84:	e0df      	b.n	33e46 <__aeabi_dadd+0x27e>
   33c86:	0028      	movs	r0, r5
   33c88:	f001 fbe4 	bl	35454 <__clzsi2>
   33c8c:	0003      	movs	r3, r0
   33c8e:	3b08      	subs	r3, #8
   33c90:	2b1f      	cmp	r3, #31
   33c92:	dd00      	ble.n	33c96 <__aeabi_dadd+0xce>
   33c94:	e0d2      	b.n	33e3c <__aeabi_dadd+0x274>
   33c96:	2220      	movs	r2, #32
   33c98:	003c      	movs	r4, r7
   33c9a:	1ad2      	subs	r2, r2, r3
   33c9c:	409d      	lsls	r5, r3
   33c9e:	40d4      	lsrs	r4, r2
   33ca0:	409f      	lsls	r7, r3
   33ca2:	4325      	orrs	r5, r4
   33ca4:	429e      	cmp	r6, r3
   33ca6:	dd00      	ble.n	33caa <__aeabi_dadd+0xe2>
   33ca8:	e0c4      	b.n	33e34 <__aeabi_dadd+0x26c>
   33caa:	1b9e      	subs	r6, r3, r6
   33cac:	1c73      	adds	r3, r6, #1
   33cae:	2b1f      	cmp	r3, #31
   33cb0:	dd00      	ble.n	33cb4 <__aeabi_dadd+0xec>
   33cb2:	e0f1      	b.n	33e98 <__aeabi_dadd+0x2d0>
   33cb4:	2220      	movs	r2, #32
   33cb6:	0038      	movs	r0, r7
   33cb8:	0029      	movs	r1, r5
   33cba:	1ad2      	subs	r2, r2, r3
   33cbc:	40d8      	lsrs	r0, r3
   33cbe:	4091      	lsls	r1, r2
   33cc0:	4097      	lsls	r7, r2
   33cc2:	002c      	movs	r4, r5
   33cc4:	4301      	orrs	r1, r0
   33cc6:	1e78      	subs	r0, r7, #1
   33cc8:	4187      	sbcs	r7, r0
   33cca:	40dc      	lsrs	r4, r3
   33ccc:	2600      	movs	r6, #0
   33cce:	430f      	orrs	r7, r1
   33cd0:	077b      	lsls	r3, r7, #29
   33cd2:	d009      	beq.n	33ce8 <__aeabi_dadd+0x120>
   33cd4:	230f      	movs	r3, #15
   33cd6:	403b      	ands	r3, r7
   33cd8:	2b04      	cmp	r3, #4
   33cda:	d005      	beq.n	33ce8 <__aeabi_dadd+0x120>
   33cdc:	1d3b      	adds	r3, r7, #4
   33cde:	42bb      	cmp	r3, r7
   33ce0:	41bf      	sbcs	r7, r7
   33ce2:	427f      	negs	r7, r7
   33ce4:	19e4      	adds	r4, r4, r7
   33ce6:	001f      	movs	r7, r3
   33ce8:	0223      	lsls	r3, r4, #8
   33cea:	d52c      	bpl.n	33d46 <__aeabi_dadd+0x17e>
   33cec:	4b96      	ldr	r3, [pc, #600]	; (33f48 <__aeabi_dadd+0x380>)
   33cee:	3601      	adds	r6, #1
   33cf0:	429e      	cmp	r6, r3
   33cf2:	d100      	bne.n	33cf6 <__aeabi_dadd+0x12e>
   33cf4:	e09a      	b.n	33e2c <__aeabi_dadd+0x264>
   33cf6:	4645      	mov	r5, r8
   33cf8:	4b94      	ldr	r3, [pc, #592]	; (33f4c <__aeabi_dadd+0x384>)
   33cfa:	08ff      	lsrs	r7, r7, #3
   33cfc:	401c      	ands	r4, r3
   33cfe:	0760      	lsls	r0, r4, #29
   33d00:	0576      	lsls	r6, r6, #21
   33d02:	0264      	lsls	r4, r4, #9
   33d04:	4307      	orrs	r7, r0
   33d06:	0b24      	lsrs	r4, r4, #12
   33d08:	0d76      	lsrs	r6, r6, #21
   33d0a:	2100      	movs	r1, #0
   33d0c:	0324      	lsls	r4, r4, #12
   33d0e:	0b23      	lsrs	r3, r4, #12
   33d10:	0d0c      	lsrs	r4, r1, #20
   33d12:	4a8f      	ldr	r2, [pc, #572]	; (33f50 <__aeabi_dadd+0x388>)
   33d14:	0524      	lsls	r4, r4, #20
   33d16:	431c      	orrs	r4, r3
   33d18:	4014      	ands	r4, r2
   33d1a:	0533      	lsls	r3, r6, #20
   33d1c:	4323      	orrs	r3, r4
   33d1e:	005b      	lsls	r3, r3, #1
   33d20:	07ed      	lsls	r5, r5, #31
   33d22:	085b      	lsrs	r3, r3, #1
   33d24:	432b      	orrs	r3, r5
   33d26:	0038      	movs	r0, r7
   33d28:	0019      	movs	r1, r3
   33d2a:	bc3c      	pop	{r2, r3, r4, r5}
   33d2c:	4690      	mov	r8, r2
   33d2e:	4699      	mov	r9, r3
   33d30:	46a2      	mov	sl, r4
   33d32:	46ab      	mov	fp, r5
   33d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33d36:	4664      	mov	r4, ip
   33d38:	4304      	orrs	r4, r0
   33d3a:	d100      	bne.n	33d3e <__aeabi_dadd+0x176>
   33d3c:	e211      	b.n	34162 <__aeabi_dadd+0x59a>
   33d3e:	0004      	movs	r4, r0
   33d40:	4667      	mov	r7, ip
   33d42:	077b      	lsls	r3, r7, #29
   33d44:	d1c6      	bne.n	33cd4 <__aeabi_dadd+0x10c>
   33d46:	4645      	mov	r5, r8
   33d48:	0760      	lsls	r0, r4, #29
   33d4a:	08ff      	lsrs	r7, r7, #3
   33d4c:	4307      	orrs	r7, r0
   33d4e:	08e4      	lsrs	r4, r4, #3
   33d50:	4b7d      	ldr	r3, [pc, #500]	; (33f48 <__aeabi_dadd+0x380>)
   33d52:	429e      	cmp	r6, r3
   33d54:	d030      	beq.n	33db8 <__aeabi_dadd+0x1f0>
   33d56:	0324      	lsls	r4, r4, #12
   33d58:	0576      	lsls	r6, r6, #21
   33d5a:	0b24      	lsrs	r4, r4, #12
   33d5c:	0d76      	lsrs	r6, r6, #21
   33d5e:	e7d4      	b.n	33d0a <__aeabi_dadd+0x142>
   33d60:	1a33      	subs	r3, r6, r0
   33d62:	469a      	mov	sl, r3
   33d64:	2b00      	cmp	r3, #0
   33d66:	dd78      	ble.n	33e5a <__aeabi_dadd+0x292>
   33d68:	2800      	cmp	r0, #0
   33d6a:	d031      	beq.n	33dd0 <__aeabi_dadd+0x208>
   33d6c:	4876      	ldr	r0, [pc, #472]	; (33f48 <__aeabi_dadd+0x380>)
   33d6e:	4286      	cmp	r6, r0
   33d70:	d0ae      	beq.n	33cd0 <__aeabi_dadd+0x108>
   33d72:	2080      	movs	r0, #128	; 0x80
   33d74:	0400      	lsls	r0, r0, #16
   33d76:	4301      	orrs	r1, r0
   33d78:	4653      	mov	r3, sl
   33d7a:	2b38      	cmp	r3, #56	; 0x38
   33d7c:	dc00      	bgt.n	33d80 <__aeabi_dadd+0x1b8>
   33d7e:	e0e9      	b.n	33f54 <__aeabi_dadd+0x38c>
   33d80:	430a      	orrs	r2, r1
   33d82:	1e51      	subs	r1, r2, #1
   33d84:	418a      	sbcs	r2, r1
   33d86:	2100      	movs	r1, #0
   33d88:	19d2      	adds	r2, r2, r7
   33d8a:	42ba      	cmp	r2, r7
   33d8c:	41bf      	sbcs	r7, r7
   33d8e:	1909      	adds	r1, r1, r4
   33d90:	427c      	negs	r4, r7
   33d92:	0017      	movs	r7, r2
   33d94:	190c      	adds	r4, r1, r4
   33d96:	0223      	lsls	r3, r4, #8
   33d98:	d5d3      	bpl.n	33d42 <__aeabi_dadd+0x17a>
   33d9a:	4b6b      	ldr	r3, [pc, #428]	; (33f48 <__aeabi_dadd+0x380>)
   33d9c:	3601      	adds	r6, #1
   33d9e:	429e      	cmp	r6, r3
   33da0:	d100      	bne.n	33da4 <__aeabi_dadd+0x1dc>
   33da2:	e13a      	b.n	3401a <__aeabi_dadd+0x452>
   33da4:	2001      	movs	r0, #1
   33da6:	4b69      	ldr	r3, [pc, #420]	; (33f4c <__aeabi_dadd+0x384>)
   33da8:	401c      	ands	r4, r3
   33daa:	087b      	lsrs	r3, r7, #1
   33dac:	4007      	ands	r7, r0
   33dae:	431f      	orrs	r7, r3
   33db0:	07e0      	lsls	r0, r4, #31
   33db2:	4307      	orrs	r7, r0
   33db4:	0864      	lsrs	r4, r4, #1
   33db6:	e78b      	b.n	33cd0 <__aeabi_dadd+0x108>
   33db8:	0023      	movs	r3, r4
   33dba:	433b      	orrs	r3, r7
   33dbc:	d100      	bne.n	33dc0 <__aeabi_dadd+0x1f8>
   33dbe:	e1cb      	b.n	34158 <__aeabi_dadd+0x590>
   33dc0:	2280      	movs	r2, #128	; 0x80
   33dc2:	0312      	lsls	r2, r2, #12
   33dc4:	4314      	orrs	r4, r2
   33dc6:	0324      	lsls	r4, r4, #12
   33dc8:	0b24      	lsrs	r4, r4, #12
   33dca:	e79e      	b.n	33d0a <__aeabi_dadd+0x142>
   33dcc:	002e      	movs	r6, r5
   33dce:	e77f      	b.n	33cd0 <__aeabi_dadd+0x108>
   33dd0:	0008      	movs	r0, r1
   33dd2:	4310      	orrs	r0, r2
   33dd4:	d100      	bne.n	33dd8 <__aeabi_dadd+0x210>
   33dd6:	e0b4      	b.n	33f42 <__aeabi_dadd+0x37a>
   33dd8:	1e58      	subs	r0, r3, #1
   33dda:	2800      	cmp	r0, #0
   33ddc:	d000      	beq.n	33de0 <__aeabi_dadd+0x218>
   33dde:	e0de      	b.n	33f9e <__aeabi_dadd+0x3d6>
   33de0:	18ba      	adds	r2, r7, r2
   33de2:	42ba      	cmp	r2, r7
   33de4:	419b      	sbcs	r3, r3
   33de6:	1864      	adds	r4, r4, r1
   33de8:	425b      	negs	r3, r3
   33dea:	18e4      	adds	r4, r4, r3
   33dec:	0017      	movs	r7, r2
   33dee:	2601      	movs	r6, #1
   33df0:	0223      	lsls	r3, r4, #8
   33df2:	d5a6      	bpl.n	33d42 <__aeabi_dadd+0x17a>
   33df4:	2602      	movs	r6, #2
   33df6:	e7d5      	b.n	33da4 <__aeabi_dadd+0x1dc>
   33df8:	2d00      	cmp	r5, #0
   33dfa:	d16e      	bne.n	33eda <__aeabi_dadd+0x312>
   33dfc:	1c70      	adds	r0, r6, #1
   33dfe:	0540      	lsls	r0, r0, #21
   33e00:	0d40      	lsrs	r0, r0, #21
   33e02:	2801      	cmp	r0, #1
   33e04:	dc00      	bgt.n	33e08 <__aeabi_dadd+0x240>
   33e06:	e0f9      	b.n	33ffc <__aeabi_dadd+0x434>
   33e08:	1ab8      	subs	r0, r7, r2
   33e0a:	4684      	mov	ip, r0
   33e0c:	4287      	cmp	r7, r0
   33e0e:	4180      	sbcs	r0, r0
   33e10:	1ae5      	subs	r5, r4, r3
   33e12:	4240      	negs	r0, r0
   33e14:	1a2d      	subs	r5, r5, r0
   33e16:	0228      	lsls	r0, r5, #8
   33e18:	d400      	bmi.n	33e1c <__aeabi_dadd+0x254>
   33e1a:	e089      	b.n	33f30 <__aeabi_dadd+0x368>
   33e1c:	1bd7      	subs	r7, r2, r7
   33e1e:	42ba      	cmp	r2, r7
   33e20:	4192      	sbcs	r2, r2
   33e22:	1b1c      	subs	r4, r3, r4
   33e24:	4252      	negs	r2, r2
   33e26:	1aa5      	subs	r5, r4, r2
   33e28:	46d8      	mov	r8, fp
   33e2a:	e729      	b.n	33c80 <__aeabi_dadd+0xb8>
   33e2c:	4645      	mov	r5, r8
   33e2e:	2400      	movs	r4, #0
   33e30:	2700      	movs	r7, #0
   33e32:	e76a      	b.n	33d0a <__aeabi_dadd+0x142>
   33e34:	4c45      	ldr	r4, [pc, #276]	; (33f4c <__aeabi_dadd+0x384>)
   33e36:	1af6      	subs	r6, r6, r3
   33e38:	402c      	ands	r4, r5
   33e3a:	e749      	b.n	33cd0 <__aeabi_dadd+0x108>
   33e3c:	003d      	movs	r5, r7
   33e3e:	3828      	subs	r0, #40	; 0x28
   33e40:	4085      	lsls	r5, r0
   33e42:	2700      	movs	r7, #0
   33e44:	e72e      	b.n	33ca4 <__aeabi_dadd+0xdc>
   33e46:	0038      	movs	r0, r7
   33e48:	f001 fb04 	bl	35454 <__clzsi2>
   33e4c:	3020      	adds	r0, #32
   33e4e:	e71d      	b.n	33c8c <__aeabi_dadd+0xc4>
   33e50:	430a      	orrs	r2, r1
   33e52:	1e51      	subs	r1, r2, #1
   33e54:	418a      	sbcs	r2, r1
   33e56:	2100      	movs	r1, #0
   33e58:	e707      	b.n	33c6a <__aeabi_dadd+0xa2>
   33e5a:	2b00      	cmp	r3, #0
   33e5c:	d000      	beq.n	33e60 <__aeabi_dadd+0x298>
   33e5e:	e0f3      	b.n	34048 <__aeabi_dadd+0x480>
   33e60:	1c70      	adds	r0, r6, #1
   33e62:	0543      	lsls	r3, r0, #21
   33e64:	0d5b      	lsrs	r3, r3, #21
   33e66:	2b01      	cmp	r3, #1
   33e68:	dc00      	bgt.n	33e6c <__aeabi_dadd+0x2a4>
   33e6a:	e0ad      	b.n	33fc8 <__aeabi_dadd+0x400>
   33e6c:	4b36      	ldr	r3, [pc, #216]	; (33f48 <__aeabi_dadd+0x380>)
   33e6e:	4298      	cmp	r0, r3
   33e70:	d100      	bne.n	33e74 <__aeabi_dadd+0x2ac>
   33e72:	e0d1      	b.n	34018 <__aeabi_dadd+0x450>
   33e74:	18ba      	adds	r2, r7, r2
   33e76:	42ba      	cmp	r2, r7
   33e78:	41bf      	sbcs	r7, r7
   33e7a:	1864      	adds	r4, r4, r1
   33e7c:	427f      	negs	r7, r7
   33e7e:	19e4      	adds	r4, r4, r7
   33e80:	07e7      	lsls	r7, r4, #31
   33e82:	0852      	lsrs	r2, r2, #1
   33e84:	4317      	orrs	r7, r2
   33e86:	0864      	lsrs	r4, r4, #1
   33e88:	0006      	movs	r6, r0
   33e8a:	e721      	b.n	33cd0 <__aeabi_dadd+0x108>
   33e8c:	482e      	ldr	r0, [pc, #184]	; (33f48 <__aeabi_dadd+0x380>)
   33e8e:	4285      	cmp	r5, r0
   33e90:	d100      	bne.n	33e94 <__aeabi_dadd+0x2cc>
   33e92:	e093      	b.n	33fbc <__aeabi_dadd+0x3f4>
   33e94:	001d      	movs	r5, r3
   33e96:	e6d0      	b.n	33c3a <__aeabi_dadd+0x72>
   33e98:	0029      	movs	r1, r5
   33e9a:	3e1f      	subs	r6, #31
   33e9c:	40f1      	lsrs	r1, r6
   33e9e:	2b20      	cmp	r3, #32
   33ea0:	d100      	bne.n	33ea4 <__aeabi_dadd+0x2dc>
   33ea2:	e08d      	b.n	33fc0 <__aeabi_dadd+0x3f8>
   33ea4:	2240      	movs	r2, #64	; 0x40
   33ea6:	1ad3      	subs	r3, r2, r3
   33ea8:	409d      	lsls	r5, r3
   33eaa:	432f      	orrs	r7, r5
   33eac:	1e7d      	subs	r5, r7, #1
   33eae:	41af      	sbcs	r7, r5
   33eb0:	2400      	movs	r4, #0
   33eb2:	430f      	orrs	r7, r1
   33eb4:	2600      	movs	r6, #0
   33eb6:	e744      	b.n	33d42 <__aeabi_dadd+0x17a>
   33eb8:	002b      	movs	r3, r5
   33eba:	0008      	movs	r0, r1
   33ebc:	3b20      	subs	r3, #32
   33ebe:	40d8      	lsrs	r0, r3
   33ec0:	0003      	movs	r3, r0
   33ec2:	2d20      	cmp	r5, #32
   33ec4:	d100      	bne.n	33ec8 <__aeabi_dadd+0x300>
   33ec6:	e07d      	b.n	33fc4 <__aeabi_dadd+0x3fc>
   33ec8:	2040      	movs	r0, #64	; 0x40
   33eca:	1b45      	subs	r5, r0, r5
   33ecc:	40a9      	lsls	r1, r5
   33ece:	430a      	orrs	r2, r1
   33ed0:	1e51      	subs	r1, r2, #1
   33ed2:	418a      	sbcs	r2, r1
   33ed4:	2100      	movs	r1, #0
   33ed6:	431a      	orrs	r2, r3
   33ed8:	e6c7      	b.n	33c6a <__aeabi_dadd+0xa2>
   33eda:	2e00      	cmp	r6, #0
   33edc:	d050      	beq.n	33f80 <__aeabi_dadd+0x3b8>
   33ede:	4e1a      	ldr	r6, [pc, #104]	; (33f48 <__aeabi_dadd+0x380>)
   33ee0:	42b0      	cmp	r0, r6
   33ee2:	d057      	beq.n	33f94 <__aeabi_dadd+0x3cc>
   33ee4:	2680      	movs	r6, #128	; 0x80
   33ee6:	426b      	negs	r3, r5
   33ee8:	4699      	mov	r9, r3
   33eea:	0436      	lsls	r6, r6, #16
   33eec:	4334      	orrs	r4, r6
   33eee:	464b      	mov	r3, r9
   33ef0:	2b38      	cmp	r3, #56	; 0x38
   33ef2:	dd00      	ble.n	33ef6 <__aeabi_dadd+0x32e>
   33ef4:	e0d6      	b.n	340a4 <__aeabi_dadd+0x4dc>
   33ef6:	2b1f      	cmp	r3, #31
   33ef8:	dd00      	ble.n	33efc <__aeabi_dadd+0x334>
   33efa:	e135      	b.n	34168 <__aeabi_dadd+0x5a0>
   33efc:	2620      	movs	r6, #32
   33efe:	1af5      	subs	r5, r6, r3
   33f00:	0026      	movs	r6, r4
   33f02:	40ae      	lsls	r6, r5
   33f04:	46b2      	mov	sl, r6
   33f06:	003e      	movs	r6, r7
   33f08:	40de      	lsrs	r6, r3
   33f0a:	46ac      	mov	ip, r5
   33f0c:	0035      	movs	r5, r6
   33f0e:	4656      	mov	r6, sl
   33f10:	432e      	orrs	r6, r5
   33f12:	4665      	mov	r5, ip
   33f14:	40af      	lsls	r7, r5
   33f16:	1e7d      	subs	r5, r7, #1
   33f18:	41af      	sbcs	r7, r5
   33f1a:	40dc      	lsrs	r4, r3
   33f1c:	4337      	orrs	r7, r6
   33f1e:	1bd7      	subs	r7, r2, r7
   33f20:	42ba      	cmp	r2, r7
   33f22:	4192      	sbcs	r2, r2
   33f24:	1b0c      	subs	r4, r1, r4
   33f26:	4252      	negs	r2, r2
   33f28:	1aa4      	subs	r4, r4, r2
   33f2a:	0006      	movs	r6, r0
   33f2c:	46d8      	mov	r8, fp
   33f2e:	e6a3      	b.n	33c78 <__aeabi_dadd+0xb0>
   33f30:	4664      	mov	r4, ip
   33f32:	4667      	mov	r7, ip
   33f34:	432c      	orrs	r4, r5
   33f36:	d000      	beq.n	33f3a <__aeabi_dadd+0x372>
   33f38:	e6a2      	b.n	33c80 <__aeabi_dadd+0xb8>
   33f3a:	2500      	movs	r5, #0
   33f3c:	2600      	movs	r6, #0
   33f3e:	2700      	movs	r7, #0
   33f40:	e706      	b.n	33d50 <__aeabi_dadd+0x188>
   33f42:	001e      	movs	r6, r3
   33f44:	e6c4      	b.n	33cd0 <__aeabi_dadd+0x108>
   33f46:	46c0      	nop			; (mov r8, r8)
   33f48:	000007ff 	.word	0x000007ff
   33f4c:	ff7fffff 	.word	0xff7fffff
   33f50:	800fffff 	.word	0x800fffff
   33f54:	2b1f      	cmp	r3, #31
   33f56:	dc63      	bgt.n	34020 <__aeabi_dadd+0x458>
   33f58:	2020      	movs	r0, #32
   33f5a:	1ac3      	subs	r3, r0, r3
   33f5c:	0008      	movs	r0, r1
   33f5e:	4098      	lsls	r0, r3
   33f60:	469c      	mov	ip, r3
   33f62:	4683      	mov	fp, r0
   33f64:	4653      	mov	r3, sl
   33f66:	0010      	movs	r0, r2
   33f68:	40d8      	lsrs	r0, r3
   33f6a:	0003      	movs	r3, r0
   33f6c:	4658      	mov	r0, fp
   33f6e:	4318      	orrs	r0, r3
   33f70:	4663      	mov	r3, ip
   33f72:	409a      	lsls	r2, r3
   33f74:	1e53      	subs	r3, r2, #1
   33f76:	419a      	sbcs	r2, r3
   33f78:	4653      	mov	r3, sl
   33f7a:	4302      	orrs	r2, r0
   33f7c:	40d9      	lsrs	r1, r3
   33f7e:	e703      	b.n	33d88 <__aeabi_dadd+0x1c0>
   33f80:	0026      	movs	r6, r4
   33f82:	433e      	orrs	r6, r7
   33f84:	d006      	beq.n	33f94 <__aeabi_dadd+0x3cc>
   33f86:	43eb      	mvns	r3, r5
   33f88:	4699      	mov	r9, r3
   33f8a:	2b00      	cmp	r3, #0
   33f8c:	d0c7      	beq.n	33f1e <__aeabi_dadd+0x356>
   33f8e:	4e94      	ldr	r6, [pc, #592]	; (341e0 <__aeabi_dadd+0x618>)
   33f90:	42b0      	cmp	r0, r6
   33f92:	d1ac      	bne.n	33eee <__aeabi_dadd+0x326>
   33f94:	000c      	movs	r4, r1
   33f96:	0017      	movs	r7, r2
   33f98:	0006      	movs	r6, r0
   33f9a:	46d8      	mov	r8, fp
   33f9c:	e698      	b.n	33cd0 <__aeabi_dadd+0x108>
   33f9e:	4b90      	ldr	r3, [pc, #576]	; (341e0 <__aeabi_dadd+0x618>)
   33fa0:	459a      	cmp	sl, r3
   33fa2:	d00b      	beq.n	33fbc <__aeabi_dadd+0x3f4>
   33fa4:	4682      	mov	sl, r0
   33fa6:	e6e7      	b.n	33d78 <__aeabi_dadd+0x1b0>
   33fa8:	2800      	cmp	r0, #0
   33faa:	d000      	beq.n	33fae <__aeabi_dadd+0x3e6>
   33fac:	e09e      	b.n	340ec <__aeabi_dadd+0x524>
   33fae:	0018      	movs	r0, r3
   33fb0:	4310      	orrs	r0, r2
   33fb2:	d100      	bne.n	33fb6 <__aeabi_dadd+0x3ee>
   33fb4:	e0e9      	b.n	3418a <__aeabi_dadd+0x5c2>
   33fb6:	001c      	movs	r4, r3
   33fb8:	0017      	movs	r7, r2
   33fba:	46d8      	mov	r8, fp
   33fbc:	4e88      	ldr	r6, [pc, #544]	; (341e0 <__aeabi_dadd+0x618>)
   33fbe:	e687      	b.n	33cd0 <__aeabi_dadd+0x108>
   33fc0:	2500      	movs	r5, #0
   33fc2:	e772      	b.n	33eaa <__aeabi_dadd+0x2e2>
   33fc4:	2100      	movs	r1, #0
   33fc6:	e782      	b.n	33ece <__aeabi_dadd+0x306>
   33fc8:	0023      	movs	r3, r4
   33fca:	433b      	orrs	r3, r7
   33fcc:	2e00      	cmp	r6, #0
   33fce:	d000      	beq.n	33fd2 <__aeabi_dadd+0x40a>
   33fd0:	e0ab      	b.n	3412a <__aeabi_dadd+0x562>
   33fd2:	2b00      	cmp	r3, #0
   33fd4:	d100      	bne.n	33fd8 <__aeabi_dadd+0x410>
   33fd6:	e0e7      	b.n	341a8 <__aeabi_dadd+0x5e0>
   33fd8:	000b      	movs	r3, r1
   33fda:	4313      	orrs	r3, r2
   33fdc:	d100      	bne.n	33fe0 <__aeabi_dadd+0x418>
   33fde:	e677      	b.n	33cd0 <__aeabi_dadd+0x108>
   33fe0:	18ba      	adds	r2, r7, r2
   33fe2:	42ba      	cmp	r2, r7
   33fe4:	41bf      	sbcs	r7, r7
   33fe6:	1864      	adds	r4, r4, r1
   33fe8:	427f      	negs	r7, r7
   33fea:	19e4      	adds	r4, r4, r7
   33fec:	0223      	lsls	r3, r4, #8
   33fee:	d400      	bmi.n	33ff2 <__aeabi_dadd+0x42a>
   33ff0:	e0f2      	b.n	341d8 <__aeabi_dadd+0x610>
   33ff2:	4b7c      	ldr	r3, [pc, #496]	; (341e4 <__aeabi_dadd+0x61c>)
   33ff4:	0017      	movs	r7, r2
   33ff6:	401c      	ands	r4, r3
   33ff8:	0006      	movs	r6, r0
   33ffa:	e669      	b.n	33cd0 <__aeabi_dadd+0x108>
   33ffc:	0020      	movs	r0, r4
   33ffe:	4338      	orrs	r0, r7
   34000:	2e00      	cmp	r6, #0
   34002:	d1d1      	bne.n	33fa8 <__aeabi_dadd+0x3e0>
   34004:	2800      	cmp	r0, #0
   34006:	d15b      	bne.n	340c0 <__aeabi_dadd+0x4f8>
   34008:	001c      	movs	r4, r3
   3400a:	4314      	orrs	r4, r2
   3400c:	d100      	bne.n	34010 <__aeabi_dadd+0x448>
   3400e:	e0a8      	b.n	34162 <__aeabi_dadd+0x59a>
   34010:	001c      	movs	r4, r3
   34012:	0017      	movs	r7, r2
   34014:	46d8      	mov	r8, fp
   34016:	e65b      	b.n	33cd0 <__aeabi_dadd+0x108>
   34018:	0006      	movs	r6, r0
   3401a:	2400      	movs	r4, #0
   3401c:	2700      	movs	r7, #0
   3401e:	e697      	b.n	33d50 <__aeabi_dadd+0x188>
   34020:	4650      	mov	r0, sl
   34022:	000b      	movs	r3, r1
   34024:	3820      	subs	r0, #32
   34026:	40c3      	lsrs	r3, r0
   34028:	4699      	mov	r9, r3
   3402a:	4653      	mov	r3, sl
   3402c:	2b20      	cmp	r3, #32
   3402e:	d100      	bne.n	34032 <__aeabi_dadd+0x46a>
   34030:	e095      	b.n	3415e <__aeabi_dadd+0x596>
   34032:	2340      	movs	r3, #64	; 0x40
   34034:	4650      	mov	r0, sl
   34036:	1a1b      	subs	r3, r3, r0
   34038:	4099      	lsls	r1, r3
   3403a:	430a      	orrs	r2, r1
   3403c:	1e51      	subs	r1, r2, #1
   3403e:	418a      	sbcs	r2, r1
   34040:	464b      	mov	r3, r9
   34042:	2100      	movs	r1, #0
   34044:	431a      	orrs	r2, r3
   34046:	e69f      	b.n	33d88 <__aeabi_dadd+0x1c0>
   34048:	2e00      	cmp	r6, #0
   3404a:	d130      	bne.n	340ae <__aeabi_dadd+0x4e6>
   3404c:	0026      	movs	r6, r4
   3404e:	433e      	orrs	r6, r7
   34050:	d067      	beq.n	34122 <__aeabi_dadd+0x55a>
   34052:	43db      	mvns	r3, r3
   34054:	469a      	mov	sl, r3
   34056:	2b00      	cmp	r3, #0
   34058:	d01c      	beq.n	34094 <__aeabi_dadd+0x4cc>
   3405a:	4e61      	ldr	r6, [pc, #388]	; (341e0 <__aeabi_dadd+0x618>)
   3405c:	42b0      	cmp	r0, r6
   3405e:	d060      	beq.n	34122 <__aeabi_dadd+0x55a>
   34060:	4653      	mov	r3, sl
   34062:	2b38      	cmp	r3, #56	; 0x38
   34064:	dd00      	ble.n	34068 <__aeabi_dadd+0x4a0>
   34066:	e096      	b.n	34196 <__aeabi_dadd+0x5ce>
   34068:	2b1f      	cmp	r3, #31
   3406a:	dd00      	ble.n	3406e <__aeabi_dadd+0x4a6>
   3406c:	e09f      	b.n	341ae <__aeabi_dadd+0x5e6>
   3406e:	2620      	movs	r6, #32
   34070:	1af3      	subs	r3, r6, r3
   34072:	0026      	movs	r6, r4
   34074:	409e      	lsls	r6, r3
   34076:	469c      	mov	ip, r3
   34078:	46b3      	mov	fp, r6
   3407a:	4653      	mov	r3, sl
   3407c:	003e      	movs	r6, r7
   3407e:	40de      	lsrs	r6, r3
   34080:	0033      	movs	r3, r6
   34082:	465e      	mov	r6, fp
   34084:	431e      	orrs	r6, r3
   34086:	4663      	mov	r3, ip
   34088:	409f      	lsls	r7, r3
   3408a:	1e7b      	subs	r3, r7, #1
   3408c:	419f      	sbcs	r7, r3
   3408e:	4653      	mov	r3, sl
   34090:	40dc      	lsrs	r4, r3
   34092:	4337      	orrs	r7, r6
   34094:	18bf      	adds	r7, r7, r2
   34096:	4297      	cmp	r7, r2
   34098:	4192      	sbcs	r2, r2
   3409a:	1864      	adds	r4, r4, r1
   3409c:	4252      	negs	r2, r2
   3409e:	18a4      	adds	r4, r4, r2
   340a0:	0006      	movs	r6, r0
   340a2:	e678      	b.n	33d96 <__aeabi_dadd+0x1ce>
   340a4:	4327      	orrs	r7, r4
   340a6:	1e7c      	subs	r4, r7, #1
   340a8:	41a7      	sbcs	r7, r4
   340aa:	2400      	movs	r4, #0
   340ac:	e737      	b.n	33f1e <__aeabi_dadd+0x356>
   340ae:	4e4c      	ldr	r6, [pc, #304]	; (341e0 <__aeabi_dadd+0x618>)
   340b0:	42b0      	cmp	r0, r6
   340b2:	d036      	beq.n	34122 <__aeabi_dadd+0x55a>
   340b4:	2680      	movs	r6, #128	; 0x80
   340b6:	425b      	negs	r3, r3
   340b8:	0436      	lsls	r6, r6, #16
   340ba:	469a      	mov	sl, r3
   340bc:	4334      	orrs	r4, r6
   340be:	e7cf      	b.n	34060 <__aeabi_dadd+0x498>
   340c0:	0018      	movs	r0, r3
   340c2:	4310      	orrs	r0, r2
   340c4:	d100      	bne.n	340c8 <__aeabi_dadd+0x500>
   340c6:	e603      	b.n	33cd0 <__aeabi_dadd+0x108>
   340c8:	1ab8      	subs	r0, r7, r2
   340ca:	4684      	mov	ip, r0
   340cc:	4567      	cmp	r7, ip
   340ce:	41ad      	sbcs	r5, r5
   340d0:	1ae0      	subs	r0, r4, r3
   340d2:	426d      	negs	r5, r5
   340d4:	1b40      	subs	r0, r0, r5
   340d6:	0205      	lsls	r5, r0, #8
   340d8:	d400      	bmi.n	340dc <__aeabi_dadd+0x514>
   340da:	e62c      	b.n	33d36 <__aeabi_dadd+0x16e>
   340dc:	1bd7      	subs	r7, r2, r7
   340de:	42ba      	cmp	r2, r7
   340e0:	4192      	sbcs	r2, r2
   340e2:	1b1c      	subs	r4, r3, r4
   340e4:	4252      	negs	r2, r2
   340e6:	1aa4      	subs	r4, r4, r2
   340e8:	46d8      	mov	r8, fp
   340ea:	e5f1      	b.n	33cd0 <__aeabi_dadd+0x108>
   340ec:	0018      	movs	r0, r3
   340ee:	4310      	orrs	r0, r2
   340f0:	d100      	bne.n	340f4 <__aeabi_dadd+0x52c>
   340f2:	e763      	b.n	33fbc <__aeabi_dadd+0x3f4>
   340f4:	08f8      	lsrs	r0, r7, #3
   340f6:	0767      	lsls	r7, r4, #29
   340f8:	4307      	orrs	r7, r0
   340fa:	2080      	movs	r0, #128	; 0x80
   340fc:	08e4      	lsrs	r4, r4, #3
   340fe:	0300      	lsls	r0, r0, #12
   34100:	4204      	tst	r4, r0
   34102:	d008      	beq.n	34116 <__aeabi_dadd+0x54e>
   34104:	08dd      	lsrs	r5, r3, #3
   34106:	4205      	tst	r5, r0
   34108:	d105      	bne.n	34116 <__aeabi_dadd+0x54e>
   3410a:	08d2      	lsrs	r2, r2, #3
   3410c:	0759      	lsls	r1, r3, #29
   3410e:	4311      	orrs	r1, r2
   34110:	000f      	movs	r7, r1
   34112:	002c      	movs	r4, r5
   34114:	46d8      	mov	r8, fp
   34116:	0f7b      	lsrs	r3, r7, #29
   34118:	00e4      	lsls	r4, r4, #3
   3411a:	431c      	orrs	r4, r3
   3411c:	00ff      	lsls	r7, r7, #3
   3411e:	4e30      	ldr	r6, [pc, #192]	; (341e0 <__aeabi_dadd+0x618>)
   34120:	e5d6      	b.n	33cd0 <__aeabi_dadd+0x108>
   34122:	000c      	movs	r4, r1
   34124:	0017      	movs	r7, r2
   34126:	0006      	movs	r6, r0
   34128:	e5d2      	b.n	33cd0 <__aeabi_dadd+0x108>
   3412a:	2b00      	cmp	r3, #0
   3412c:	d038      	beq.n	341a0 <__aeabi_dadd+0x5d8>
   3412e:	000b      	movs	r3, r1
   34130:	4313      	orrs	r3, r2
   34132:	d100      	bne.n	34136 <__aeabi_dadd+0x56e>
   34134:	e742      	b.n	33fbc <__aeabi_dadd+0x3f4>
   34136:	08f8      	lsrs	r0, r7, #3
   34138:	0767      	lsls	r7, r4, #29
   3413a:	4307      	orrs	r7, r0
   3413c:	2080      	movs	r0, #128	; 0x80
   3413e:	08e4      	lsrs	r4, r4, #3
   34140:	0300      	lsls	r0, r0, #12
   34142:	4204      	tst	r4, r0
   34144:	d0e7      	beq.n	34116 <__aeabi_dadd+0x54e>
   34146:	08cb      	lsrs	r3, r1, #3
   34148:	4203      	tst	r3, r0
   3414a:	d1e4      	bne.n	34116 <__aeabi_dadd+0x54e>
   3414c:	08d2      	lsrs	r2, r2, #3
   3414e:	0749      	lsls	r1, r1, #29
   34150:	4311      	orrs	r1, r2
   34152:	000f      	movs	r7, r1
   34154:	001c      	movs	r4, r3
   34156:	e7de      	b.n	34116 <__aeabi_dadd+0x54e>
   34158:	2700      	movs	r7, #0
   3415a:	2400      	movs	r4, #0
   3415c:	e5d5      	b.n	33d0a <__aeabi_dadd+0x142>
   3415e:	2100      	movs	r1, #0
   34160:	e76b      	b.n	3403a <__aeabi_dadd+0x472>
   34162:	2500      	movs	r5, #0
   34164:	2700      	movs	r7, #0
   34166:	e5f3      	b.n	33d50 <__aeabi_dadd+0x188>
   34168:	464e      	mov	r6, r9
   3416a:	0025      	movs	r5, r4
   3416c:	3e20      	subs	r6, #32
   3416e:	40f5      	lsrs	r5, r6
   34170:	464b      	mov	r3, r9
   34172:	002e      	movs	r6, r5
   34174:	2b20      	cmp	r3, #32
   34176:	d02d      	beq.n	341d4 <__aeabi_dadd+0x60c>
   34178:	2540      	movs	r5, #64	; 0x40
   3417a:	1aed      	subs	r5, r5, r3
   3417c:	40ac      	lsls	r4, r5
   3417e:	4327      	orrs	r7, r4
   34180:	1e7c      	subs	r4, r7, #1
   34182:	41a7      	sbcs	r7, r4
   34184:	2400      	movs	r4, #0
   34186:	4337      	orrs	r7, r6
   34188:	e6c9      	b.n	33f1e <__aeabi_dadd+0x356>
   3418a:	2480      	movs	r4, #128	; 0x80
   3418c:	2500      	movs	r5, #0
   3418e:	0324      	lsls	r4, r4, #12
   34190:	4e13      	ldr	r6, [pc, #76]	; (341e0 <__aeabi_dadd+0x618>)
   34192:	2700      	movs	r7, #0
   34194:	e5dc      	b.n	33d50 <__aeabi_dadd+0x188>
   34196:	4327      	orrs	r7, r4
   34198:	1e7c      	subs	r4, r7, #1
   3419a:	41a7      	sbcs	r7, r4
   3419c:	2400      	movs	r4, #0
   3419e:	e779      	b.n	34094 <__aeabi_dadd+0x4cc>
   341a0:	000c      	movs	r4, r1
   341a2:	0017      	movs	r7, r2
   341a4:	4e0e      	ldr	r6, [pc, #56]	; (341e0 <__aeabi_dadd+0x618>)
   341a6:	e593      	b.n	33cd0 <__aeabi_dadd+0x108>
   341a8:	000c      	movs	r4, r1
   341aa:	0017      	movs	r7, r2
   341ac:	e590      	b.n	33cd0 <__aeabi_dadd+0x108>
   341ae:	4656      	mov	r6, sl
   341b0:	0023      	movs	r3, r4
   341b2:	3e20      	subs	r6, #32
   341b4:	40f3      	lsrs	r3, r6
   341b6:	4699      	mov	r9, r3
   341b8:	4653      	mov	r3, sl
   341ba:	2b20      	cmp	r3, #32
   341bc:	d00e      	beq.n	341dc <__aeabi_dadd+0x614>
   341be:	2340      	movs	r3, #64	; 0x40
   341c0:	4656      	mov	r6, sl
   341c2:	1b9b      	subs	r3, r3, r6
   341c4:	409c      	lsls	r4, r3
   341c6:	4327      	orrs	r7, r4
   341c8:	1e7c      	subs	r4, r7, #1
   341ca:	41a7      	sbcs	r7, r4
   341cc:	464b      	mov	r3, r9
   341ce:	2400      	movs	r4, #0
   341d0:	431f      	orrs	r7, r3
   341d2:	e75f      	b.n	34094 <__aeabi_dadd+0x4cc>
   341d4:	2400      	movs	r4, #0
   341d6:	e7d2      	b.n	3417e <__aeabi_dadd+0x5b6>
   341d8:	0017      	movs	r7, r2
   341da:	e5b2      	b.n	33d42 <__aeabi_dadd+0x17a>
   341dc:	2400      	movs	r4, #0
   341de:	e7f2      	b.n	341c6 <__aeabi_dadd+0x5fe>
   341e0:	000007ff 	.word	0x000007ff
   341e4:	ff7fffff 	.word	0xff7fffff

000341e8 <__aeabi_ddiv>:
   341e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   341ea:	4657      	mov	r7, sl
   341ec:	4645      	mov	r5, r8
   341ee:	46de      	mov	lr, fp
   341f0:	464e      	mov	r6, r9
   341f2:	b5e0      	push	{r5, r6, r7, lr}
   341f4:	004c      	lsls	r4, r1, #1
   341f6:	030e      	lsls	r6, r1, #12
   341f8:	b087      	sub	sp, #28
   341fa:	4683      	mov	fp, r0
   341fc:	4692      	mov	sl, r2
   341fe:	001d      	movs	r5, r3
   34200:	4680      	mov	r8, r0
   34202:	0b36      	lsrs	r6, r6, #12
   34204:	0d64      	lsrs	r4, r4, #21
   34206:	0fcf      	lsrs	r7, r1, #31
   34208:	2c00      	cmp	r4, #0
   3420a:	d04f      	beq.n	342ac <__aeabi_ddiv+0xc4>
   3420c:	4b6f      	ldr	r3, [pc, #444]	; (343cc <__aeabi_ddiv+0x1e4>)
   3420e:	429c      	cmp	r4, r3
   34210:	d035      	beq.n	3427e <__aeabi_ddiv+0x96>
   34212:	2380      	movs	r3, #128	; 0x80
   34214:	0f42      	lsrs	r2, r0, #29
   34216:	041b      	lsls	r3, r3, #16
   34218:	00f6      	lsls	r6, r6, #3
   3421a:	4313      	orrs	r3, r2
   3421c:	4333      	orrs	r3, r6
   3421e:	4699      	mov	r9, r3
   34220:	00c3      	lsls	r3, r0, #3
   34222:	4698      	mov	r8, r3
   34224:	4b6a      	ldr	r3, [pc, #424]	; (343d0 <__aeabi_ddiv+0x1e8>)
   34226:	2600      	movs	r6, #0
   34228:	469c      	mov	ip, r3
   3422a:	2300      	movs	r3, #0
   3422c:	4464      	add	r4, ip
   3422e:	9303      	str	r3, [sp, #12]
   34230:	032b      	lsls	r3, r5, #12
   34232:	0b1b      	lsrs	r3, r3, #12
   34234:	469b      	mov	fp, r3
   34236:	006b      	lsls	r3, r5, #1
   34238:	0fed      	lsrs	r5, r5, #31
   3423a:	4650      	mov	r0, sl
   3423c:	0d5b      	lsrs	r3, r3, #21
   3423e:	9501      	str	r5, [sp, #4]
   34240:	d05e      	beq.n	34300 <__aeabi_ddiv+0x118>
   34242:	4a62      	ldr	r2, [pc, #392]	; (343cc <__aeabi_ddiv+0x1e4>)
   34244:	4293      	cmp	r3, r2
   34246:	d053      	beq.n	342f0 <__aeabi_ddiv+0x108>
   34248:	465a      	mov	r2, fp
   3424a:	00d1      	lsls	r1, r2, #3
   3424c:	2280      	movs	r2, #128	; 0x80
   3424e:	0f40      	lsrs	r0, r0, #29
   34250:	0412      	lsls	r2, r2, #16
   34252:	4302      	orrs	r2, r0
   34254:	430a      	orrs	r2, r1
   34256:	4693      	mov	fp, r2
   34258:	4652      	mov	r2, sl
   3425a:	00d1      	lsls	r1, r2, #3
   3425c:	4a5c      	ldr	r2, [pc, #368]	; (343d0 <__aeabi_ddiv+0x1e8>)
   3425e:	4694      	mov	ip, r2
   34260:	2200      	movs	r2, #0
   34262:	4463      	add	r3, ip
   34264:	0038      	movs	r0, r7
   34266:	4068      	eors	r0, r5
   34268:	4684      	mov	ip, r0
   3426a:	9002      	str	r0, [sp, #8]
   3426c:	1ae4      	subs	r4, r4, r3
   3426e:	4316      	orrs	r6, r2
   34270:	2e0f      	cmp	r6, #15
   34272:	d900      	bls.n	34276 <__aeabi_ddiv+0x8e>
   34274:	e0b4      	b.n	343e0 <__aeabi_ddiv+0x1f8>
   34276:	4b57      	ldr	r3, [pc, #348]	; (343d4 <__aeabi_ddiv+0x1ec>)
   34278:	00b6      	lsls	r6, r6, #2
   3427a:	599b      	ldr	r3, [r3, r6]
   3427c:	469f      	mov	pc, r3
   3427e:	0003      	movs	r3, r0
   34280:	4333      	orrs	r3, r6
   34282:	4699      	mov	r9, r3
   34284:	d16c      	bne.n	34360 <__aeabi_ddiv+0x178>
   34286:	2300      	movs	r3, #0
   34288:	4698      	mov	r8, r3
   3428a:	3302      	adds	r3, #2
   3428c:	2608      	movs	r6, #8
   3428e:	9303      	str	r3, [sp, #12]
   34290:	e7ce      	b.n	34230 <__aeabi_ddiv+0x48>
   34292:	46cb      	mov	fp, r9
   34294:	4641      	mov	r1, r8
   34296:	9a03      	ldr	r2, [sp, #12]
   34298:	9701      	str	r7, [sp, #4]
   3429a:	2a02      	cmp	r2, #2
   3429c:	d165      	bne.n	3436a <__aeabi_ddiv+0x182>
   3429e:	9b01      	ldr	r3, [sp, #4]
   342a0:	4c4a      	ldr	r4, [pc, #296]	; (343cc <__aeabi_ddiv+0x1e4>)
   342a2:	469c      	mov	ip, r3
   342a4:	2300      	movs	r3, #0
   342a6:	2200      	movs	r2, #0
   342a8:	4698      	mov	r8, r3
   342aa:	e06b      	b.n	34384 <__aeabi_ddiv+0x19c>
   342ac:	0003      	movs	r3, r0
   342ae:	4333      	orrs	r3, r6
   342b0:	4699      	mov	r9, r3
   342b2:	d04e      	beq.n	34352 <__aeabi_ddiv+0x16a>
   342b4:	2e00      	cmp	r6, #0
   342b6:	d100      	bne.n	342ba <__aeabi_ddiv+0xd2>
   342b8:	e1bc      	b.n	34634 <__aeabi_ddiv+0x44c>
   342ba:	0030      	movs	r0, r6
   342bc:	f001 f8ca 	bl	35454 <__clzsi2>
   342c0:	0003      	movs	r3, r0
   342c2:	3b0b      	subs	r3, #11
   342c4:	2b1c      	cmp	r3, #28
   342c6:	dd00      	ble.n	342ca <__aeabi_ddiv+0xe2>
   342c8:	e1ac      	b.n	34624 <__aeabi_ddiv+0x43c>
   342ca:	221d      	movs	r2, #29
   342cc:	1ad3      	subs	r3, r2, r3
   342ce:	465a      	mov	r2, fp
   342d0:	0001      	movs	r1, r0
   342d2:	40da      	lsrs	r2, r3
   342d4:	3908      	subs	r1, #8
   342d6:	408e      	lsls	r6, r1
   342d8:	0013      	movs	r3, r2
   342da:	4333      	orrs	r3, r6
   342dc:	4699      	mov	r9, r3
   342de:	465b      	mov	r3, fp
   342e0:	408b      	lsls	r3, r1
   342e2:	4698      	mov	r8, r3
   342e4:	2300      	movs	r3, #0
   342e6:	4c3c      	ldr	r4, [pc, #240]	; (343d8 <__aeabi_ddiv+0x1f0>)
   342e8:	2600      	movs	r6, #0
   342ea:	1a24      	subs	r4, r4, r0
   342ec:	9303      	str	r3, [sp, #12]
   342ee:	e79f      	b.n	34230 <__aeabi_ddiv+0x48>
   342f0:	4651      	mov	r1, sl
   342f2:	465a      	mov	r2, fp
   342f4:	4311      	orrs	r1, r2
   342f6:	d129      	bne.n	3434c <__aeabi_ddiv+0x164>
   342f8:	2200      	movs	r2, #0
   342fa:	4693      	mov	fp, r2
   342fc:	3202      	adds	r2, #2
   342fe:	e7b1      	b.n	34264 <__aeabi_ddiv+0x7c>
   34300:	4659      	mov	r1, fp
   34302:	4301      	orrs	r1, r0
   34304:	d01e      	beq.n	34344 <__aeabi_ddiv+0x15c>
   34306:	465b      	mov	r3, fp
   34308:	2b00      	cmp	r3, #0
   3430a:	d100      	bne.n	3430e <__aeabi_ddiv+0x126>
   3430c:	e19e      	b.n	3464c <__aeabi_ddiv+0x464>
   3430e:	4658      	mov	r0, fp
   34310:	f001 f8a0 	bl	35454 <__clzsi2>
   34314:	0003      	movs	r3, r0
   34316:	3b0b      	subs	r3, #11
   34318:	2b1c      	cmp	r3, #28
   3431a:	dd00      	ble.n	3431e <__aeabi_ddiv+0x136>
   3431c:	e18f      	b.n	3463e <__aeabi_ddiv+0x456>
   3431e:	0002      	movs	r2, r0
   34320:	4659      	mov	r1, fp
   34322:	3a08      	subs	r2, #8
   34324:	4091      	lsls	r1, r2
   34326:	468b      	mov	fp, r1
   34328:	211d      	movs	r1, #29
   3432a:	1acb      	subs	r3, r1, r3
   3432c:	4651      	mov	r1, sl
   3432e:	40d9      	lsrs	r1, r3
   34330:	000b      	movs	r3, r1
   34332:	4659      	mov	r1, fp
   34334:	430b      	orrs	r3, r1
   34336:	4651      	mov	r1, sl
   34338:	469b      	mov	fp, r3
   3433a:	4091      	lsls	r1, r2
   3433c:	4b26      	ldr	r3, [pc, #152]	; (343d8 <__aeabi_ddiv+0x1f0>)
   3433e:	2200      	movs	r2, #0
   34340:	1a1b      	subs	r3, r3, r0
   34342:	e78f      	b.n	34264 <__aeabi_ddiv+0x7c>
   34344:	2300      	movs	r3, #0
   34346:	2201      	movs	r2, #1
   34348:	469b      	mov	fp, r3
   3434a:	e78b      	b.n	34264 <__aeabi_ddiv+0x7c>
   3434c:	4651      	mov	r1, sl
   3434e:	2203      	movs	r2, #3
   34350:	e788      	b.n	34264 <__aeabi_ddiv+0x7c>
   34352:	2300      	movs	r3, #0
   34354:	4698      	mov	r8, r3
   34356:	3301      	adds	r3, #1
   34358:	2604      	movs	r6, #4
   3435a:	2400      	movs	r4, #0
   3435c:	9303      	str	r3, [sp, #12]
   3435e:	e767      	b.n	34230 <__aeabi_ddiv+0x48>
   34360:	2303      	movs	r3, #3
   34362:	46b1      	mov	r9, r6
   34364:	9303      	str	r3, [sp, #12]
   34366:	260c      	movs	r6, #12
   34368:	e762      	b.n	34230 <__aeabi_ddiv+0x48>
   3436a:	2a03      	cmp	r2, #3
   3436c:	d100      	bne.n	34370 <__aeabi_ddiv+0x188>
   3436e:	e25c      	b.n	3482a <__aeabi_ddiv+0x642>
   34370:	9b01      	ldr	r3, [sp, #4]
   34372:	2a01      	cmp	r2, #1
   34374:	d000      	beq.n	34378 <__aeabi_ddiv+0x190>
   34376:	e1e4      	b.n	34742 <__aeabi_ddiv+0x55a>
   34378:	4013      	ands	r3, r2
   3437a:	469c      	mov	ip, r3
   3437c:	2300      	movs	r3, #0
   3437e:	2400      	movs	r4, #0
   34380:	2200      	movs	r2, #0
   34382:	4698      	mov	r8, r3
   34384:	2100      	movs	r1, #0
   34386:	0312      	lsls	r2, r2, #12
   34388:	0b13      	lsrs	r3, r2, #12
   3438a:	0d0a      	lsrs	r2, r1, #20
   3438c:	0512      	lsls	r2, r2, #20
   3438e:	431a      	orrs	r2, r3
   34390:	0523      	lsls	r3, r4, #20
   34392:	4c12      	ldr	r4, [pc, #72]	; (343dc <__aeabi_ddiv+0x1f4>)
   34394:	4640      	mov	r0, r8
   34396:	4022      	ands	r2, r4
   34398:	4313      	orrs	r3, r2
   3439a:	4662      	mov	r2, ip
   3439c:	005b      	lsls	r3, r3, #1
   3439e:	07d2      	lsls	r2, r2, #31
   343a0:	085b      	lsrs	r3, r3, #1
   343a2:	4313      	orrs	r3, r2
   343a4:	0019      	movs	r1, r3
   343a6:	b007      	add	sp, #28
   343a8:	bc3c      	pop	{r2, r3, r4, r5}
   343aa:	4690      	mov	r8, r2
   343ac:	4699      	mov	r9, r3
   343ae:	46a2      	mov	sl, r4
   343b0:	46ab      	mov	fp, r5
   343b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   343b4:	2300      	movs	r3, #0
   343b6:	2280      	movs	r2, #128	; 0x80
   343b8:	469c      	mov	ip, r3
   343ba:	0312      	lsls	r2, r2, #12
   343bc:	4698      	mov	r8, r3
   343be:	4c03      	ldr	r4, [pc, #12]	; (343cc <__aeabi_ddiv+0x1e4>)
   343c0:	e7e0      	b.n	34384 <__aeabi_ddiv+0x19c>
   343c2:	2300      	movs	r3, #0
   343c4:	4c01      	ldr	r4, [pc, #4]	; (343cc <__aeabi_ddiv+0x1e4>)
   343c6:	2200      	movs	r2, #0
   343c8:	4698      	mov	r8, r3
   343ca:	e7db      	b.n	34384 <__aeabi_ddiv+0x19c>
   343cc:	000007ff 	.word	0x000007ff
   343d0:	fffffc01 	.word	0xfffffc01
   343d4:	0003ac9c 	.word	0x0003ac9c
   343d8:	fffffc0d 	.word	0xfffffc0d
   343dc:	800fffff 	.word	0x800fffff
   343e0:	45d9      	cmp	r9, fp
   343e2:	d900      	bls.n	343e6 <__aeabi_ddiv+0x1fe>
   343e4:	e139      	b.n	3465a <__aeabi_ddiv+0x472>
   343e6:	d100      	bne.n	343ea <__aeabi_ddiv+0x202>
   343e8:	e134      	b.n	34654 <__aeabi_ddiv+0x46c>
   343ea:	2300      	movs	r3, #0
   343ec:	4646      	mov	r6, r8
   343ee:	464d      	mov	r5, r9
   343f0:	469a      	mov	sl, r3
   343f2:	3c01      	subs	r4, #1
   343f4:	465b      	mov	r3, fp
   343f6:	0e0a      	lsrs	r2, r1, #24
   343f8:	021b      	lsls	r3, r3, #8
   343fa:	431a      	orrs	r2, r3
   343fc:	020b      	lsls	r3, r1, #8
   343fe:	0c17      	lsrs	r7, r2, #16
   34400:	9303      	str	r3, [sp, #12]
   34402:	0413      	lsls	r3, r2, #16
   34404:	0c1b      	lsrs	r3, r3, #16
   34406:	0039      	movs	r1, r7
   34408:	0028      	movs	r0, r5
   3440a:	4690      	mov	r8, r2
   3440c:	9301      	str	r3, [sp, #4]
   3440e:	f7ff f8ab 	bl	33568 <__udivsi3>
   34412:	0002      	movs	r2, r0
   34414:	9b01      	ldr	r3, [sp, #4]
   34416:	4683      	mov	fp, r0
   34418:	435a      	muls	r2, r3
   3441a:	0028      	movs	r0, r5
   3441c:	0039      	movs	r1, r7
   3441e:	4691      	mov	r9, r2
   34420:	f7ff f928 	bl	33674 <__aeabi_uidivmod>
   34424:	0c35      	lsrs	r5, r6, #16
   34426:	0409      	lsls	r1, r1, #16
   34428:	430d      	orrs	r5, r1
   3442a:	45a9      	cmp	r9, r5
   3442c:	d90d      	bls.n	3444a <__aeabi_ddiv+0x262>
   3442e:	465b      	mov	r3, fp
   34430:	4445      	add	r5, r8
   34432:	3b01      	subs	r3, #1
   34434:	45a8      	cmp	r8, r5
   34436:	d900      	bls.n	3443a <__aeabi_ddiv+0x252>
   34438:	e13a      	b.n	346b0 <__aeabi_ddiv+0x4c8>
   3443a:	45a9      	cmp	r9, r5
   3443c:	d800      	bhi.n	34440 <__aeabi_ddiv+0x258>
   3443e:	e137      	b.n	346b0 <__aeabi_ddiv+0x4c8>
   34440:	2302      	movs	r3, #2
   34442:	425b      	negs	r3, r3
   34444:	469c      	mov	ip, r3
   34446:	4445      	add	r5, r8
   34448:	44e3      	add	fp, ip
   3444a:	464b      	mov	r3, r9
   3444c:	1aeb      	subs	r3, r5, r3
   3444e:	0039      	movs	r1, r7
   34450:	0018      	movs	r0, r3
   34452:	9304      	str	r3, [sp, #16]
   34454:	f7ff f888 	bl	33568 <__udivsi3>
   34458:	9b01      	ldr	r3, [sp, #4]
   3445a:	0005      	movs	r5, r0
   3445c:	4343      	muls	r3, r0
   3445e:	0039      	movs	r1, r7
   34460:	9804      	ldr	r0, [sp, #16]
   34462:	4699      	mov	r9, r3
   34464:	f7ff f906 	bl	33674 <__aeabi_uidivmod>
   34468:	0433      	lsls	r3, r6, #16
   3446a:	0409      	lsls	r1, r1, #16
   3446c:	0c1b      	lsrs	r3, r3, #16
   3446e:	430b      	orrs	r3, r1
   34470:	4599      	cmp	r9, r3
   34472:	d909      	bls.n	34488 <__aeabi_ddiv+0x2a0>
   34474:	4443      	add	r3, r8
   34476:	1e6a      	subs	r2, r5, #1
   34478:	4598      	cmp	r8, r3
   3447a:	d900      	bls.n	3447e <__aeabi_ddiv+0x296>
   3447c:	e11a      	b.n	346b4 <__aeabi_ddiv+0x4cc>
   3447e:	4599      	cmp	r9, r3
   34480:	d800      	bhi.n	34484 <__aeabi_ddiv+0x29c>
   34482:	e117      	b.n	346b4 <__aeabi_ddiv+0x4cc>
   34484:	3d02      	subs	r5, #2
   34486:	4443      	add	r3, r8
   34488:	464a      	mov	r2, r9
   3448a:	1a9b      	subs	r3, r3, r2
   3448c:	465a      	mov	r2, fp
   3448e:	0412      	lsls	r2, r2, #16
   34490:	432a      	orrs	r2, r5
   34492:	9903      	ldr	r1, [sp, #12]
   34494:	4693      	mov	fp, r2
   34496:	0c10      	lsrs	r0, r2, #16
   34498:	0c0a      	lsrs	r2, r1, #16
   3449a:	4691      	mov	r9, r2
   3449c:	0409      	lsls	r1, r1, #16
   3449e:	465a      	mov	r2, fp
   344a0:	0c09      	lsrs	r1, r1, #16
   344a2:	464e      	mov	r6, r9
   344a4:	000d      	movs	r5, r1
   344a6:	0412      	lsls	r2, r2, #16
   344a8:	0c12      	lsrs	r2, r2, #16
   344aa:	4345      	muls	r5, r0
   344ac:	9105      	str	r1, [sp, #20]
   344ae:	4351      	muls	r1, r2
   344b0:	4372      	muls	r2, r6
   344b2:	4370      	muls	r0, r6
   344b4:	1952      	adds	r2, r2, r5
   344b6:	0c0e      	lsrs	r6, r1, #16
   344b8:	18b2      	adds	r2, r6, r2
   344ba:	4295      	cmp	r5, r2
   344bc:	d903      	bls.n	344c6 <__aeabi_ddiv+0x2de>
   344be:	2580      	movs	r5, #128	; 0x80
   344c0:	026d      	lsls	r5, r5, #9
   344c2:	46ac      	mov	ip, r5
   344c4:	4460      	add	r0, ip
   344c6:	0c15      	lsrs	r5, r2, #16
   344c8:	0409      	lsls	r1, r1, #16
   344ca:	0412      	lsls	r2, r2, #16
   344cc:	0c09      	lsrs	r1, r1, #16
   344ce:	1828      	adds	r0, r5, r0
   344d0:	1852      	adds	r2, r2, r1
   344d2:	4283      	cmp	r3, r0
   344d4:	d200      	bcs.n	344d8 <__aeabi_ddiv+0x2f0>
   344d6:	e0ce      	b.n	34676 <__aeabi_ddiv+0x48e>
   344d8:	d100      	bne.n	344dc <__aeabi_ddiv+0x2f4>
   344da:	e0c8      	b.n	3466e <__aeabi_ddiv+0x486>
   344dc:	1a1d      	subs	r5, r3, r0
   344de:	4653      	mov	r3, sl
   344e0:	1a9e      	subs	r6, r3, r2
   344e2:	45b2      	cmp	sl, r6
   344e4:	4192      	sbcs	r2, r2
   344e6:	4252      	negs	r2, r2
   344e8:	1aab      	subs	r3, r5, r2
   344ea:	469a      	mov	sl, r3
   344ec:	4598      	cmp	r8, r3
   344ee:	d100      	bne.n	344f2 <__aeabi_ddiv+0x30a>
   344f0:	e117      	b.n	34722 <__aeabi_ddiv+0x53a>
   344f2:	0039      	movs	r1, r7
   344f4:	0018      	movs	r0, r3
   344f6:	f7ff f837 	bl	33568 <__udivsi3>
   344fa:	9b01      	ldr	r3, [sp, #4]
   344fc:	0005      	movs	r5, r0
   344fe:	4343      	muls	r3, r0
   34500:	0039      	movs	r1, r7
   34502:	4650      	mov	r0, sl
   34504:	9304      	str	r3, [sp, #16]
   34506:	f7ff f8b5 	bl	33674 <__aeabi_uidivmod>
   3450a:	9804      	ldr	r0, [sp, #16]
   3450c:	040b      	lsls	r3, r1, #16
   3450e:	0c31      	lsrs	r1, r6, #16
   34510:	4319      	orrs	r1, r3
   34512:	4288      	cmp	r0, r1
   34514:	d909      	bls.n	3452a <__aeabi_ddiv+0x342>
   34516:	4441      	add	r1, r8
   34518:	1e6b      	subs	r3, r5, #1
   3451a:	4588      	cmp	r8, r1
   3451c:	d900      	bls.n	34520 <__aeabi_ddiv+0x338>
   3451e:	e107      	b.n	34730 <__aeabi_ddiv+0x548>
   34520:	4288      	cmp	r0, r1
   34522:	d800      	bhi.n	34526 <__aeabi_ddiv+0x33e>
   34524:	e104      	b.n	34730 <__aeabi_ddiv+0x548>
   34526:	3d02      	subs	r5, #2
   34528:	4441      	add	r1, r8
   3452a:	9b04      	ldr	r3, [sp, #16]
   3452c:	1acb      	subs	r3, r1, r3
   3452e:	0018      	movs	r0, r3
   34530:	0039      	movs	r1, r7
   34532:	9304      	str	r3, [sp, #16]
   34534:	f7ff f818 	bl	33568 <__udivsi3>
   34538:	9b01      	ldr	r3, [sp, #4]
   3453a:	4682      	mov	sl, r0
   3453c:	4343      	muls	r3, r0
   3453e:	0039      	movs	r1, r7
   34540:	9804      	ldr	r0, [sp, #16]
   34542:	9301      	str	r3, [sp, #4]
   34544:	f7ff f896 	bl	33674 <__aeabi_uidivmod>
   34548:	9801      	ldr	r0, [sp, #4]
   3454a:	040b      	lsls	r3, r1, #16
   3454c:	0431      	lsls	r1, r6, #16
   3454e:	0c09      	lsrs	r1, r1, #16
   34550:	4319      	orrs	r1, r3
   34552:	4288      	cmp	r0, r1
   34554:	d90d      	bls.n	34572 <__aeabi_ddiv+0x38a>
   34556:	4653      	mov	r3, sl
   34558:	4441      	add	r1, r8
   3455a:	3b01      	subs	r3, #1
   3455c:	4588      	cmp	r8, r1
   3455e:	d900      	bls.n	34562 <__aeabi_ddiv+0x37a>
   34560:	e0e8      	b.n	34734 <__aeabi_ddiv+0x54c>
   34562:	4288      	cmp	r0, r1
   34564:	d800      	bhi.n	34568 <__aeabi_ddiv+0x380>
   34566:	e0e5      	b.n	34734 <__aeabi_ddiv+0x54c>
   34568:	2302      	movs	r3, #2
   3456a:	425b      	negs	r3, r3
   3456c:	469c      	mov	ip, r3
   3456e:	4441      	add	r1, r8
   34570:	44e2      	add	sl, ip
   34572:	9b01      	ldr	r3, [sp, #4]
   34574:	042d      	lsls	r5, r5, #16
   34576:	1ace      	subs	r6, r1, r3
   34578:	4651      	mov	r1, sl
   3457a:	4329      	orrs	r1, r5
   3457c:	9d05      	ldr	r5, [sp, #20]
   3457e:	464f      	mov	r7, r9
   34580:	002a      	movs	r2, r5
   34582:	040b      	lsls	r3, r1, #16
   34584:	0c08      	lsrs	r0, r1, #16
   34586:	0c1b      	lsrs	r3, r3, #16
   34588:	435a      	muls	r2, r3
   3458a:	4345      	muls	r5, r0
   3458c:	437b      	muls	r3, r7
   3458e:	4378      	muls	r0, r7
   34590:	195b      	adds	r3, r3, r5
   34592:	0c17      	lsrs	r7, r2, #16
   34594:	18fb      	adds	r3, r7, r3
   34596:	429d      	cmp	r5, r3
   34598:	d903      	bls.n	345a2 <__aeabi_ddiv+0x3ba>
   3459a:	2580      	movs	r5, #128	; 0x80
   3459c:	026d      	lsls	r5, r5, #9
   3459e:	46ac      	mov	ip, r5
   345a0:	4460      	add	r0, ip
   345a2:	0c1d      	lsrs	r5, r3, #16
   345a4:	0412      	lsls	r2, r2, #16
   345a6:	041b      	lsls	r3, r3, #16
   345a8:	0c12      	lsrs	r2, r2, #16
   345aa:	1828      	adds	r0, r5, r0
   345ac:	189b      	adds	r3, r3, r2
   345ae:	4286      	cmp	r6, r0
   345b0:	d200      	bcs.n	345b4 <__aeabi_ddiv+0x3cc>
   345b2:	e093      	b.n	346dc <__aeabi_ddiv+0x4f4>
   345b4:	d100      	bne.n	345b8 <__aeabi_ddiv+0x3d0>
   345b6:	e08e      	b.n	346d6 <__aeabi_ddiv+0x4ee>
   345b8:	2301      	movs	r3, #1
   345ba:	4319      	orrs	r1, r3
   345bc:	4ba0      	ldr	r3, [pc, #640]	; (34840 <__aeabi_ddiv+0x658>)
   345be:	18e3      	adds	r3, r4, r3
   345c0:	2b00      	cmp	r3, #0
   345c2:	dc00      	bgt.n	345c6 <__aeabi_ddiv+0x3de>
   345c4:	e099      	b.n	346fa <__aeabi_ddiv+0x512>
   345c6:	074a      	lsls	r2, r1, #29
   345c8:	d000      	beq.n	345cc <__aeabi_ddiv+0x3e4>
   345ca:	e09e      	b.n	3470a <__aeabi_ddiv+0x522>
   345cc:	465a      	mov	r2, fp
   345ce:	01d2      	lsls	r2, r2, #7
   345d0:	d506      	bpl.n	345e0 <__aeabi_ddiv+0x3f8>
   345d2:	465a      	mov	r2, fp
   345d4:	4b9b      	ldr	r3, [pc, #620]	; (34844 <__aeabi_ddiv+0x65c>)
   345d6:	401a      	ands	r2, r3
   345d8:	2380      	movs	r3, #128	; 0x80
   345da:	4693      	mov	fp, r2
   345dc:	00db      	lsls	r3, r3, #3
   345de:	18e3      	adds	r3, r4, r3
   345e0:	4a99      	ldr	r2, [pc, #612]	; (34848 <__aeabi_ddiv+0x660>)
   345e2:	4293      	cmp	r3, r2
   345e4:	dd68      	ble.n	346b8 <__aeabi_ddiv+0x4d0>
   345e6:	2301      	movs	r3, #1
   345e8:	9a02      	ldr	r2, [sp, #8]
   345ea:	4c98      	ldr	r4, [pc, #608]	; (3484c <__aeabi_ddiv+0x664>)
   345ec:	401a      	ands	r2, r3
   345ee:	2300      	movs	r3, #0
   345f0:	4694      	mov	ip, r2
   345f2:	4698      	mov	r8, r3
   345f4:	2200      	movs	r2, #0
   345f6:	e6c5      	b.n	34384 <__aeabi_ddiv+0x19c>
   345f8:	2280      	movs	r2, #128	; 0x80
   345fa:	464b      	mov	r3, r9
   345fc:	0312      	lsls	r2, r2, #12
   345fe:	4213      	tst	r3, r2
   34600:	d00a      	beq.n	34618 <__aeabi_ddiv+0x430>
   34602:	465b      	mov	r3, fp
   34604:	4213      	tst	r3, r2
   34606:	d106      	bne.n	34616 <__aeabi_ddiv+0x42e>
   34608:	431a      	orrs	r2, r3
   3460a:	0312      	lsls	r2, r2, #12
   3460c:	0b12      	lsrs	r2, r2, #12
   3460e:	46ac      	mov	ip, r5
   34610:	4688      	mov	r8, r1
   34612:	4c8e      	ldr	r4, [pc, #568]	; (3484c <__aeabi_ddiv+0x664>)
   34614:	e6b6      	b.n	34384 <__aeabi_ddiv+0x19c>
   34616:	464b      	mov	r3, r9
   34618:	431a      	orrs	r2, r3
   3461a:	0312      	lsls	r2, r2, #12
   3461c:	0b12      	lsrs	r2, r2, #12
   3461e:	46bc      	mov	ip, r7
   34620:	4c8a      	ldr	r4, [pc, #552]	; (3484c <__aeabi_ddiv+0x664>)
   34622:	e6af      	b.n	34384 <__aeabi_ddiv+0x19c>
   34624:	0003      	movs	r3, r0
   34626:	465a      	mov	r2, fp
   34628:	3b28      	subs	r3, #40	; 0x28
   3462a:	409a      	lsls	r2, r3
   3462c:	2300      	movs	r3, #0
   3462e:	4691      	mov	r9, r2
   34630:	4698      	mov	r8, r3
   34632:	e657      	b.n	342e4 <__aeabi_ddiv+0xfc>
   34634:	4658      	mov	r0, fp
   34636:	f000 ff0d 	bl	35454 <__clzsi2>
   3463a:	3020      	adds	r0, #32
   3463c:	e640      	b.n	342c0 <__aeabi_ddiv+0xd8>
   3463e:	0003      	movs	r3, r0
   34640:	4652      	mov	r2, sl
   34642:	3b28      	subs	r3, #40	; 0x28
   34644:	409a      	lsls	r2, r3
   34646:	2100      	movs	r1, #0
   34648:	4693      	mov	fp, r2
   3464a:	e677      	b.n	3433c <__aeabi_ddiv+0x154>
   3464c:	f000 ff02 	bl	35454 <__clzsi2>
   34650:	3020      	adds	r0, #32
   34652:	e65f      	b.n	34314 <__aeabi_ddiv+0x12c>
   34654:	4588      	cmp	r8, r1
   34656:	d200      	bcs.n	3465a <__aeabi_ddiv+0x472>
   34658:	e6c7      	b.n	343ea <__aeabi_ddiv+0x202>
   3465a:	464b      	mov	r3, r9
   3465c:	07de      	lsls	r6, r3, #31
   3465e:	085d      	lsrs	r5, r3, #1
   34660:	4643      	mov	r3, r8
   34662:	085b      	lsrs	r3, r3, #1
   34664:	431e      	orrs	r6, r3
   34666:	4643      	mov	r3, r8
   34668:	07db      	lsls	r3, r3, #31
   3466a:	469a      	mov	sl, r3
   3466c:	e6c2      	b.n	343f4 <__aeabi_ddiv+0x20c>
   3466e:	2500      	movs	r5, #0
   34670:	4592      	cmp	sl, r2
   34672:	d300      	bcc.n	34676 <__aeabi_ddiv+0x48e>
   34674:	e733      	b.n	344de <__aeabi_ddiv+0x2f6>
   34676:	9e03      	ldr	r6, [sp, #12]
   34678:	4659      	mov	r1, fp
   3467a:	46b4      	mov	ip, r6
   3467c:	44e2      	add	sl, ip
   3467e:	45b2      	cmp	sl, r6
   34680:	41ad      	sbcs	r5, r5
   34682:	426d      	negs	r5, r5
   34684:	4445      	add	r5, r8
   34686:	18eb      	adds	r3, r5, r3
   34688:	3901      	subs	r1, #1
   3468a:	4598      	cmp	r8, r3
   3468c:	d207      	bcs.n	3469e <__aeabi_ddiv+0x4b6>
   3468e:	4298      	cmp	r0, r3
   34690:	d900      	bls.n	34694 <__aeabi_ddiv+0x4ac>
   34692:	e07f      	b.n	34794 <__aeabi_ddiv+0x5ac>
   34694:	d100      	bne.n	34698 <__aeabi_ddiv+0x4b0>
   34696:	e0bc      	b.n	34812 <__aeabi_ddiv+0x62a>
   34698:	1a1d      	subs	r5, r3, r0
   3469a:	468b      	mov	fp, r1
   3469c:	e71f      	b.n	344de <__aeabi_ddiv+0x2f6>
   3469e:	4598      	cmp	r8, r3
   346a0:	d1fa      	bne.n	34698 <__aeabi_ddiv+0x4b0>
   346a2:	9d03      	ldr	r5, [sp, #12]
   346a4:	4555      	cmp	r5, sl
   346a6:	d9f2      	bls.n	3468e <__aeabi_ddiv+0x4a6>
   346a8:	4643      	mov	r3, r8
   346aa:	468b      	mov	fp, r1
   346ac:	1a1d      	subs	r5, r3, r0
   346ae:	e716      	b.n	344de <__aeabi_ddiv+0x2f6>
   346b0:	469b      	mov	fp, r3
   346b2:	e6ca      	b.n	3444a <__aeabi_ddiv+0x262>
   346b4:	0015      	movs	r5, r2
   346b6:	e6e7      	b.n	34488 <__aeabi_ddiv+0x2a0>
   346b8:	465a      	mov	r2, fp
   346ba:	08c9      	lsrs	r1, r1, #3
   346bc:	0752      	lsls	r2, r2, #29
   346be:	430a      	orrs	r2, r1
   346c0:	055b      	lsls	r3, r3, #21
   346c2:	4690      	mov	r8, r2
   346c4:	0d5c      	lsrs	r4, r3, #21
   346c6:	465a      	mov	r2, fp
   346c8:	2301      	movs	r3, #1
   346ca:	9902      	ldr	r1, [sp, #8]
   346cc:	0252      	lsls	r2, r2, #9
   346ce:	4019      	ands	r1, r3
   346d0:	0b12      	lsrs	r2, r2, #12
   346d2:	468c      	mov	ip, r1
   346d4:	e656      	b.n	34384 <__aeabi_ddiv+0x19c>
   346d6:	2b00      	cmp	r3, #0
   346d8:	d100      	bne.n	346dc <__aeabi_ddiv+0x4f4>
   346da:	e76f      	b.n	345bc <__aeabi_ddiv+0x3d4>
   346dc:	4446      	add	r6, r8
   346de:	1e4a      	subs	r2, r1, #1
   346e0:	45b0      	cmp	r8, r6
   346e2:	d929      	bls.n	34738 <__aeabi_ddiv+0x550>
   346e4:	0011      	movs	r1, r2
   346e6:	4286      	cmp	r6, r0
   346e8:	d000      	beq.n	346ec <__aeabi_ddiv+0x504>
   346ea:	e765      	b.n	345b8 <__aeabi_ddiv+0x3d0>
   346ec:	9a03      	ldr	r2, [sp, #12]
   346ee:	4293      	cmp	r3, r2
   346f0:	d000      	beq.n	346f4 <__aeabi_ddiv+0x50c>
   346f2:	e761      	b.n	345b8 <__aeabi_ddiv+0x3d0>
   346f4:	e762      	b.n	345bc <__aeabi_ddiv+0x3d4>
   346f6:	2101      	movs	r1, #1
   346f8:	4249      	negs	r1, r1
   346fa:	2001      	movs	r0, #1
   346fc:	1ac2      	subs	r2, r0, r3
   346fe:	2a38      	cmp	r2, #56	; 0x38
   34700:	dd21      	ble.n	34746 <__aeabi_ddiv+0x55e>
   34702:	9b02      	ldr	r3, [sp, #8]
   34704:	4003      	ands	r3, r0
   34706:	469c      	mov	ip, r3
   34708:	e638      	b.n	3437c <__aeabi_ddiv+0x194>
   3470a:	220f      	movs	r2, #15
   3470c:	400a      	ands	r2, r1
   3470e:	2a04      	cmp	r2, #4
   34710:	d100      	bne.n	34714 <__aeabi_ddiv+0x52c>
   34712:	e75b      	b.n	345cc <__aeabi_ddiv+0x3e4>
   34714:	000a      	movs	r2, r1
   34716:	1d11      	adds	r1, r2, #4
   34718:	4291      	cmp	r1, r2
   3471a:	4192      	sbcs	r2, r2
   3471c:	4252      	negs	r2, r2
   3471e:	4493      	add	fp, r2
   34720:	e754      	b.n	345cc <__aeabi_ddiv+0x3e4>
   34722:	4b47      	ldr	r3, [pc, #284]	; (34840 <__aeabi_ddiv+0x658>)
   34724:	18e3      	adds	r3, r4, r3
   34726:	2b00      	cmp	r3, #0
   34728:	dde5      	ble.n	346f6 <__aeabi_ddiv+0x50e>
   3472a:	2201      	movs	r2, #1
   3472c:	4252      	negs	r2, r2
   3472e:	e7f2      	b.n	34716 <__aeabi_ddiv+0x52e>
   34730:	001d      	movs	r5, r3
   34732:	e6fa      	b.n	3452a <__aeabi_ddiv+0x342>
   34734:	469a      	mov	sl, r3
   34736:	e71c      	b.n	34572 <__aeabi_ddiv+0x38a>
   34738:	42b0      	cmp	r0, r6
   3473a:	d839      	bhi.n	347b0 <__aeabi_ddiv+0x5c8>
   3473c:	d06e      	beq.n	3481c <__aeabi_ddiv+0x634>
   3473e:	0011      	movs	r1, r2
   34740:	e73a      	b.n	345b8 <__aeabi_ddiv+0x3d0>
   34742:	9302      	str	r3, [sp, #8]
   34744:	e73a      	b.n	345bc <__aeabi_ddiv+0x3d4>
   34746:	2a1f      	cmp	r2, #31
   34748:	dc3c      	bgt.n	347c4 <__aeabi_ddiv+0x5dc>
   3474a:	2320      	movs	r3, #32
   3474c:	1a9b      	subs	r3, r3, r2
   3474e:	000c      	movs	r4, r1
   34750:	4658      	mov	r0, fp
   34752:	4099      	lsls	r1, r3
   34754:	4098      	lsls	r0, r3
   34756:	1e4b      	subs	r3, r1, #1
   34758:	4199      	sbcs	r1, r3
   3475a:	465b      	mov	r3, fp
   3475c:	40d4      	lsrs	r4, r2
   3475e:	40d3      	lsrs	r3, r2
   34760:	4320      	orrs	r0, r4
   34762:	4308      	orrs	r0, r1
   34764:	001a      	movs	r2, r3
   34766:	0743      	lsls	r3, r0, #29
   34768:	d009      	beq.n	3477e <__aeabi_ddiv+0x596>
   3476a:	230f      	movs	r3, #15
   3476c:	4003      	ands	r3, r0
   3476e:	2b04      	cmp	r3, #4
   34770:	d005      	beq.n	3477e <__aeabi_ddiv+0x596>
   34772:	0001      	movs	r1, r0
   34774:	1d08      	adds	r0, r1, #4
   34776:	4288      	cmp	r0, r1
   34778:	419b      	sbcs	r3, r3
   3477a:	425b      	negs	r3, r3
   3477c:	18d2      	adds	r2, r2, r3
   3477e:	0213      	lsls	r3, r2, #8
   34780:	d53a      	bpl.n	347f8 <__aeabi_ddiv+0x610>
   34782:	2301      	movs	r3, #1
   34784:	9a02      	ldr	r2, [sp, #8]
   34786:	2401      	movs	r4, #1
   34788:	401a      	ands	r2, r3
   3478a:	2300      	movs	r3, #0
   3478c:	4694      	mov	ip, r2
   3478e:	4698      	mov	r8, r3
   34790:	2200      	movs	r2, #0
   34792:	e5f7      	b.n	34384 <__aeabi_ddiv+0x19c>
   34794:	2102      	movs	r1, #2
   34796:	4249      	negs	r1, r1
   34798:	468c      	mov	ip, r1
   3479a:	9d03      	ldr	r5, [sp, #12]
   3479c:	44e3      	add	fp, ip
   3479e:	46ac      	mov	ip, r5
   347a0:	44e2      	add	sl, ip
   347a2:	45aa      	cmp	sl, r5
   347a4:	41ad      	sbcs	r5, r5
   347a6:	426d      	negs	r5, r5
   347a8:	4445      	add	r5, r8
   347aa:	18ed      	adds	r5, r5, r3
   347ac:	1a2d      	subs	r5, r5, r0
   347ae:	e696      	b.n	344de <__aeabi_ddiv+0x2f6>
   347b0:	1e8a      	subs	r2, r1, #2
   347b2:	9903      	ldr	r1, [sp, #12]
   347b4:	004d      	lsls	r5, r1, #1
   347b6:	428d      	cmp	r5, r1
   347b8:	4189      	sbcs	r1, r1
   347ba:	4249      	negs	r1, r1
   347bc:	4441      	add	r1, r8
   347be:	1876      	adds	r6, r6, r1
   347c0:	9503      	str	r5, [sp, #12]
   347c2:	e78f      	b.n	346e4 <__aeabi_ddiv+0x4fc>
   347c4:	201f      	movs	r0, #31
   347c6:	4240      	negs	r0, r0
   347c8:	1ac3      	subs	r3, r0, r3
   347ca:	4658      	mov	r0, fp
   347cc:	40d8      	lsrs	r0, r3
   347ce:	0003      	movs	r3, r0
   347d0:	2a20      	cmp	r2, #32
   347d2:	d028      	beq.n	34826 <__aeabi_ddiv+0x63e>
   347d4:	2040      	movs	r0, #64	; 0x40
   347d6:	465d      	mov	r5, fp
   347d8:	1a82      	subs	r2, r0, r2
   347da:	4095      	lsls	r5, r2
   347dc:	4329      	orrs	r1, r5
   347de:	1e4a      	subs	r2, r1, #1
   347e0:	4191      	sbcs	r1, r2
   347e2:	4319      	orrs	r1, r3
   347e4:	2307      	movs	r3, #7
   347e6:	2200      	movs	r2, #0
   347e8:	400b      	ands	r3, r1
   347ea:	d009      	beq.n	34800 <__aeabi_ddiv+0x618>
   347ec:	230f      	movs	r3, #15
   347ee:	2200      	movs	r2, #0
   347f0:	400b      	ands	r3, r1
   347f2:	0008      	movs	r0, r1
   347f4:	2b04      	cmp	r3, #4
   347f6:	d1bd      	bne.n	34774 <__aeabi_ddiv+0x58c>
   347f8:	0001      	movs	r1, r0
   347fa:	0753      	lsls	r3, r2, #29
   347fc:	0252      	lsls	r2, r2, #9
   347fe:	0b12      	lsrs	r2, r2, #12
   34800:	08c9      	lsrs	r1, r1, #3
   34802:	4319      	orrs	r1, r3
   34804:	2301      	movs	r3, #1
   34806:	4688      	mov	r8, r1
   34808:	9902      	ldr	r1, [sp, #8]
   3480a:	2400      	movs	r4, #0
   3480c:	4019      	ands	r1, r3
   3480e:	468c      	mov	ip, r1
   34810:	e5b8      	b.n	34384 <__aeabi_ddiv+0x19c>
   34812:	4552      	cmp	r2, sl
   34814:	d8be      	bhi.n	34794 <__aeabi_ddiv+0x5ac>
   34816:	468b      	mov	fp, r1
   34818:	2500      	movs	r5, #0
   3481a:	e660      	b.n	344de <__aeabi_ddiv+0x2f6>
   3481c:	9d03      	ldr	r5, [sp, #12]
   3481e:	429d      	cmp	r5, r3
   34820:	d3c6      	bcc.n	347b0 <__aeabi_ddiv+0x5c8>
   34822:	0011      	movs	r1, r2
   34824:	e762      	b.n	346ec <__aeabi_ddiv+0x504>
   34826:	2500      	movs	r5, #0
   34828:	e7d8      	b.n	347dc <__aeabi_ddiv+0x5f4>
   3482a:	2280      	movs	r2, #128	; 0x80
   3482c:	465b      	mov	r3, fp
   3482e:	0312      	lsls	r2, r2, #12
   34830:	431a      	orrs	r2, r3
   34832:	9b01      	ldr	r3, [sp, #4]
   34834:	0312      	lsls	r2, r2, #12
   34836:	0b12      	lsrs	r2, r2, #12
   34838:	469c      	mov	ip, r3
   3483a:	4688      	mov	r8, r1
   3483c:	4c03      	ldr	r4, [pc, #12]	; (3484c <__aeabi_ddiv+0x664>)
   3483e:	e5a1      	b.n	34384 <__aeabi_ddiv+0x19c>
   34840:	000003ff 	.word	0x000003ff
   34844:	feffffff 	.word	0xfeffffff
   34848:	000007fe 	.word	0x000007fe
   3484c:	000007ff 	.word	0x000007ff

00034850 <__aeabi_dmul>:
   34850:	b5f0      	push	{r4, r5, r6, r7, lr}
   34852:	4657      	mov	r7, sl
   34854:	4645      	mov	r5, r8
   34856:	46de      	mov	lr, fp
   34858:	464e      	mov	r6, r9
   3485a:	b5e0      	push	{r5, r6, r7, lr}
   3485c:	030c      	lsls	r4, r1, #12
   3485e:	4698      	mov	r8, r3
   34860:	004e      	lsls	r6, r1, #1
   34862:	0b23      	lsrs	r3, r4, #12
   34864:	b087      	sub	sp, #28
   34866:	0007      	movs	r7, r0
   34868:	4692      	mov	sl, r2
   3486a:	469b      	mov	fp, r3
   3486c:	0d76      	lsrs	r6, r6, #21
   3486e:	0fcd      	lsrs	r5, r1, #31
   34870:	2e00      	cmp	r6, #0
   34872:	d06b      	beq.n	3494c <__aeabi_dmul+0xfc>
   34874:	4b6d      	ldr	r3, [pc, #436]	; (34a2c <__aeabi_dmul+0x1dc>)
   34876:	429e      	cmp	r6, r3
   34878:	d035      	beq.n	348e6 <__aeabi_dmul+0x96>
   3487a:	2480      	movs	r4, #128	; 0x80
   3487c:	465b      	mov	r3, fp
   3487e:	0f42      	lsrs	r2, r0, #29
   34880:	0424      	lsls	r4, r4, #16
   34882:	00db      	lsls	r3, r3, #3
   34884:	4314      	orrs	r4, r2
   34886:	431c      	orrs	r4, r3
   34888:	00c3      	lsls	r3, r0, #3
   3488a:	4699      	mov	r9, r3
   3488c:	4b68      	ldr	r3, [pc, #416]	; (34a30 <__aeabi_dmul+0x1e0>)
   3488e:	46a3      	mov	fp, r4
   34890:	469c      	mov	ip, r3
   34892:	2300      	movs	r3, #0
   34894:	2700      	movs	r7, #0
   34896:	4466      	add	r6, ip
   34898:	9302      	str	r3, [sp, #8]
   3489a:	4643      	mov	r3, r8
   3489c:	031c      	lsls	r4, r3, #12
   3489e:	005a      	lsls	r2, r3, #1
   348a0:	0fdb      	lsrs	r3, r3, #31
   348a2:	4650      	mov	r0, sl
   348a4:	0b24      	lsrs	r4, r4, #12
   348a6:	0d52      	lsrs	r2, r2, #21
   348a8:	4698      	mov	r8, r3
   348aa:	d100      	bne.n	348ae <__aeabi_dmul+0x5e>
   348ac:	e076      	b.n	3499c <__aeabi_dmul+0x14c>
   348ae:	4b5f      	ldr	r3, [pc, #380]	; (34a2c <__aeabi_dmul+0x1dc>)
   348b0:	429a      	cmp	r2, r3
   348b2:	d06d      	beq.n	34990 <__aeabi_dmul+0x140>
   348b4:	2380      	movs	r3, #128	; 0x80
   348b6:	0f41      	lsrs	r1, r0, #29
   348b8:	041b      	lsls	r3, r3, #16
   348ba:	430b      	orrs	r3, r1
   348bc:	495c      	ldr	r1, [pc, #368]	; (34a30 <__aeabi_dmul+0x1e0>)
   348be:	00e4      	lsls	r4, r4, #3
   348c0:	468c      	mov	ip, r1
   348c2:	431c      	orrs	r4, r3
   348c4:	00c3      	lsls	r3, r0, #3
   348c6:	2000      	movs	r0, #0
   348c8:	4462      	add	r2, ip
   348ca:	4641      	mov	r1, r8
   348cc:	18b6      	adds	r6, r6, r2
   348ce:	4069      	eors	r1, r5
   348d0:	1c72      	adds	r2, r6, #1
   348d2:	9101      	str	r1, [sp, #4]
   348d4:	4694      	mov	ip, r2
   348d6:	4307      	orrs	r7, r0
   348d8:	2f0f      	cmp	r7, #15
   348da:	d900      	bls.n	348de <__aeabi_dmul+0x8e>
   348dc:	e0b0      	b.n	34a40 <__aeabi_dmul+0x1f0>
   348de:	4a55      	ldr	r2, [pc, #340]	; (34a34 <__aeabi_dmul+0x1e4>)
   348e0:	00bf      	lsls	r7, r7, #2
   348e2:	59d2      	ldr	r2, [r2, r7]
   348e4:	4697      	mov	pc, r2
   348e6:	465b      	mov	r3, fp
   348e8:	4303      	orrs	r3, r0
   348ea:	4699      	mov	r9, r3
   348ec:	d000      	beq.n	348f0 <__aeabi_dmul+0xa0>
   348ee:	e087      	b.n	34a00 <__aeabi_dmul+0x1b0>
   348f0:	2300      	movs	r3, #0
   348f2:	469b      	mov	fp, r3
   348f4:	3302      	adds	r3, #2
   348f6:	2708      	movs	r7, #8
   348f8:	9302      	str	r3, [sp, #8]
   348fa:	e7ce      	b.n	3489a <__aeabi_dmul+0x4a>
   348fc:	4642      	mov	r2, r8
   348fe:	9201      	str	r2, [sp, #4]
   34900:	2802      	cmp	r0, #2
   34902:	d067      	beq.n	349d4 <__aeabi_dmul+0x184>
   34904:	2803      	cmp	r0, #3
   34906:	d100      	bne.n	3490a <__aeabi_dmul+0xba>
   34908:	e20e      	b.n	34d28 <__aeabi_dmul+0x4d8>
   3490a:	2801      	cmp	r0, #1
   3490c:	d000      	beq.n	34910 <__aeabi_dmul+0xc0>
   3490e:	e162      	b.n	34bd6 <__aeabi_dmul+0x386>
   34910:	2300      	movs	r3, #0
   34912:	2400      	movs	r4, #0
   34914:	2200      	movs	r2, #0
   34916:	4699      	mov	r9, r3
   34918:	9901      	ldr	r1, [sp, #4]
   3491a:	4001      	ands	r1, r0
   3491c:	b2cd      	uxtb	r5, r1
   3491e:	2100      	movs	r1, #0
   34920:	0312      	lsls	r2, r2, #12
   34922:	0d0b      	lsrs	r3, r1, #20
   34924:	0b12      	lsrs	r2, r2, #12
   34926:	051b      	lsls	r3, r3, #20
   34928:	4313      	orrs	r3, r2
   3492a:	4a43      	ldr	r2, [pc, #268]	; (34a38 <__aeabi_dmul+0x1e8>)
   3492c:	0524      	lsls	r4, r4, #20
   3492e:	4013      	ands	r3, r2
   34930:	431c      	orrs	r4, r3
   34932:	0064      	lsls	r4, r4, #1
   34934:	07ed      	lsls	r5, r5, #31
   34936:	0864      	lsrs	r4, r4, #1
   34938:	432c      	orrs	r4, r5
   3493a:	4648      	mov	r0, r9
   3493c:	0021      	movs	r1, r4
   3493e:	b007      	add	sp, #28
   34940:	bc3c      	pop	{r2, r3, r4, r5}
   34942:	4690      	mov	r8, r2
   34944:	4699      	mov	r9, r3
   34946:	46a2      	mov	sl, r4
   34948:	46ab      	mov	fp, r5
   3494a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3494c:	4303      	orrs	r3, r0
   3494e:	4699      	mov	r9, r3
   34950:	d04f      	beq.n	349f2 <__aeabi_dmul+0x1a2>
   34952:	465b      	mov	r3, fp
   34954:	2b00      	cmp	r3, #0
   34956:	d100      	bne.n	3495a <__aeabi_dmul+0x10a>
   34958:	e189      	b.n	34c6e <__aeabi_dmul+0x41e>
   3495a:	4658      	mov	r0, fp
   3495c:	f000 fd7a 	bl	35454 <__clzsi2>
   34960:	0003      	movs	r3, r0
   34962:	3b0b      	subs	r3, #11
   34964:	2b1c      	cmp	r3, #28
   34966:	dd00      	ble.n	3496a <__aeabi_dmul+0x11a>
   34968:	e17a      	b.n	34c60 <__aeabi_dmul+0x410>
   3496a:	221d      	movs	r2, #29
   3496c:	1ad3      	subs	r3, r2, r3
   3496e:	003a      	movs	r2, r7
   34970:	0001      	movs	r1, r0
   34972:	465c      	mov	r4, fp
   34974:	40da      	lsrs	r2, r3
   34976:	3908      	subs	r1, #8
   34978:	408c      	lsls	r4, r1
   3497a:	0013      	movs	r3, r2
   3497c:	408f      	lsls	r7, r1
   3497e:	4323      	orrs	r3, r4
   34980:	469b      	mov	fp, r3
   34982:	46b9      	mov	r9, r7
   34984:	2300      	movs	r3, #0
   34986:	4e2d      	ldr	r6, [pc, #180]	; (34a3c <__aeabi_dmul+0x1ec>)
   34988:	2700      	movs	r7, #0
   3498a:	1a36      	subs	r6, r6, r0
   3498c:	9302      	str	r3, [sp, #8]
   3498e:	e784      	b.n	3489a <__aeabi_dmul+0x4a>
   34990:	4653      	mov	r3, sl
   34992:	4323      	orrs	r3, r4
   34994:	d12a      	bne.n	349ec <__aeabi_dmul+0x19c>
   34996:	2400      	movs	r4, #0
   34998:	2002      	movs	r0, #2
   3499a:	e796      	b.n	348ca <__aeabi_dmul+0x7a>
   3499c:	4653      	mov	r3, sl
   3499e:	4323      	orrs	r3, r4
   349a0:	d020      	beq.n	349e4 <__aeabi_dmul+0x194>
   349a2:	2c00      	cmp	r4, #0
   349a4:	d100      	bne.n	349a8 <__aeabi_dmul+0x158>
   349a6:	e157      	b.n	34c58 <__aeabi_dmul+0x408>
   349a8:	0020      	movs	r0, r4
   349aa:	f000 fd53 	bl	35454 <__clzsi2>
   349ae:	0003      	movs	r3, r0
   349b0:	3b0b      	subs	r3, #11
   349b2:	2b1c      	cmp	r3, #28
   349b4:	dd00      	ble.n	349b8 <__aeabi_dmul+0x168>
   349b6:	e149      	b.n	34c4c <__aeabi_dmul+0x3fc>
   349b8:	211d      	movs	r1, #29
   349ba:	1acb      	subs	r3, r1, r3
   349bc:	4651      	mov	r1, sl
   349be:	0002      	movs	r2, r0
   349c0:	40d9      	lsrs	r1, r3
   349c2:	4653      	mov	r3, sl
   349c4:	3a08      	subs	r2, #8
   349c6:	4094      	lsls	r4, r2
   349c8:	4093      	lsls	r3, r2
   349ca:	430c      	orrs	r4, r1
   349cc:	4a1b      	ldr	r2, [pc, #108]	; (34a3c <__aeabi_dmul+0x1ec>)
   349ce:	1a12      	subs	r2, r2, r0
   349d0:	2000      	movs	r0, #0
   349d2:	e77a      	b.n	348ca <__aeabi_dmul+0x7a>
   349d4:	2501      	movs	r5, #1
   349d6:	9b01      	ldr	r3, [sp, #4]
   349d8:	4c14      	ldr	r4, [pc, #80]	; (34a2c <__aeabi_dmul+0x1dc>)
   349da:	401d      	ands	r5, r3
   349dc:	2300      	movs	r3, #0
   349de:	2200      	movs	r2, #0
   349e0:	4699      	mov	r9, r3
   349e2:	e79c      	b.n	3491e <__aeabi_dmul+0xce>
   349e4:	2400      	movs	r4, #0
   349e6:	2200      	movs	r2, #0
   349e8:	2001      	movs	r0, #1
   349ea:	e76e      	b.n	348ca <__aeabi_dmul+0x7a>
   349ec:	4653      	mov	r3, sl
   349ee:	2003      	movs	r0, #3
   349f0:	e76b      	b.n	348ca <__aeabi_dmul+0x7a>
   349f2:	2300      	movs	r3, #0
   349f4:	469b      	mov	fp, r3
   349f6:	3301      	adds	r3, #1
   349f8:	2704      	movs	r7, #4
   349fa:	2600      	movs	r6, #0
   349fc:	9302      	str	r3, [sp, #8]
   349fe:	e74c      	b.n	3489a <__aeabi_dmul+0x4a>
   34a00:	2303      	movs	r3, #3
   34a02:	4681      	mov	r9, r0
   34a04:	270c      	movs	r7, #12
   34a06:	9302      	str	r3, [sp, #8]
   34a08:	e747      	b.n	3489a <__aeabi_dmul+0x4a>
   34a0a:	2280      	movs	r2, #128	; 0x80
   34a0c:	2300      	movs	r3, #0
   34a0e:	2500      	movs	r5, #0
   34a10:	0312      	lsls	r2, r2, #12
   34a12:	4699      	mov	r9, r3
   34a14:	4c05      	ldr	r4, [pc, #20]	; (34a2c <__aeabi_dmul+0x1dc>)
   34a16:	e782      	b.n	3491e <__aeabi_dmul+0xce>
   34a18:	465c      	mov	r4, fp
   34a1a:	464b      	mov	r3, r9
   34a1c:	9802      	ldr	r0, [sp, #8]
   34a1e:	e76f      	b.n	34900 <__aeabi_dmul+0xb0>
   34a20:	465c      	mov	r4, fp
   34a22:	464b      	mov	r3, r9
   34a24:	9501      	str	r5, [sp, #4]
   34a26:	9802      	ldr	r0, [sp, #8]
   34a28:	e76a      	b.n	34900 <__aeabi_dmul+0xb0>
   34a2a:	46c0      	nop			; (mov r8, r8)
   34a2c:	000007ff 	.word	0x000007ff
   34a30:	fffffc01 	.word	0xfffffc01
   34a34:	0003acdc 	.word	0x0003acdc
   34a38:	800fffff 	.word	0x800fffff
   34a3c:	fffffc0d 	.word	0xfffffc0d
   34a40:	464a      	mov	r2, r9
   34a42:	4649      	mov	r1, r9
   34a44:	0c17      	lsrs	r7, r2, #16
   34a46:	0c1a      	lsrs	r2, r3, #16
   34a48:	041b      	lsls	r3, r3, #16
   34a4a:	0c1b      	lsrs	r3, r3, #16
   34a4c:	0408      	lsls	r0, r1, #16
   34a4e:	0019      	movs	r1, r3
   34a50:	0c00      	lsrs	r0, r0, #16
   34a52:	4341      	muls	r1, r0
   34a54:	0015      	movs	r5, r2
   34a56:	4688      	mov	r8, r1
   34a58:	0019      	movs	r1, r3
   34a5a:	437d      	muls	r5, r7
   34a5c:	4379      	muls	r1, r7
   34a5e:	9503      	str	r5, [sp, #12]
   34a60:	4689      	mov	r9, r1
   34a62:	0029      	movs	r1, r5
   34a64:	0015      	movs	r5, r2
   34a66:	4345      	muls	r5, r0
   34a68:	444d      	add	r5, r9
   34a6a:	9502      	str	r5, [sp, #8]
   34a6c:	4645      	mov	r5, r8
   34a6e:	0c2d      	lsrs	r5, r5, #16
   34a70:	46aa      	mov	sl, r5
   34a72:	9d02      	ldr	r5, [sp, #8]
   34a74:	4455      	add	r5, sl
   34a76:	45a9      	cmp	r9, r5
   34a78:	d906      	bls.n	34a88 <__aeabi_dmul+0x238>
   34a7a:	468a      	mov	sl, r1
   34a7c:	2180      	movs	r1, #128	; 0x80
   34a7e:	0249      	lsls	r1, r1, #9
   34a80:	4689      	mov	r9, r1
   34a82:	44ca      	add	sl, r9
   34a84:	4651      	mov	r1, sl
   34a86:	9103      	str	r1, [sp, #12]
   34a88:	0c29      	lsrs	r1, r5, #16
   34a8a:	9104      	str	r1, [sp, #16]
   34a8c:	4641      	mov	r1, r8
   34a8e:	0409      	lsls	r1, r1, #16
   34a90:	042d      	lsls	r5, r5, #16
   34a92:	0c09      	lsrs	r1, r1, #16
   34a94:	4688      	mov	r8, r1
   34a96:	0029      	movs	r1, r5
   34a98:	0c25      	lsrs	r5, r4, #16
   34a9a:	0424      	lsls	r4, r4, #16
   34a9c:	4441      	add	r1, r8
   34a9e:	0c24      	lsrs	r4, r4, #16
   34aa0:	9105      	str	r1, [sp, #20]
   34aa2:	0021      	movs	r1, r4
   34aa4:	4341      	muls	r1, r0
   34aa6:	4688      	mov	r8, r1
   34aa8:	0021      	movs	r1, r4
   34aaa:	4379      	muls	r1, r7
   34aac:	468a      	mov	sl, r1
   34aae:	4368      	muls	r0, r5
   34ab0:	4641      	mov	r1, r8
   34ab2:	4450      	add	r0, sl
   34ab4:	4681      	mov	r9, r0
   34ab6:	0c08      	lsrs	r0, r1, #16
   34ab8:	4448      	add	r0, r9
   34aba:	436f      	muls	r7, r5
   34abc:	4582      	cmp	sl, r0
   34abe:	d903      	bls.n	34ac8 <__aeabi_dmul+0x278>
   34ac0:	2180      	movs	r1, #128	; 0x80
   34ac2:	0249      	lsls	r1, r1, #9
   34ac4:	4689      	mov	r9, r1
   34ac6:	444f      	add	r7, r9
   34ac8:	0c01      	lsrs	r1, r0, #16
   34aca:	4689      	mov	r9, r1
   34acc:	0039      	movs	r1, r7
   34ace:	4449      	add	r1, r9
   34ad0:	9102      	str	r1, [sp, #8]
   34ad2:	4641      	mov	r1, r8
   34ad4:	040f      	lsls	r7, r1, #16
   34ad6:	9904      	ldr	r1, [sp, #16]
   34ad8:	0c3f      	lsrs	r7, r7, #16
   34ada:	4688      	mov	r8, r1
   34adc:	0400      	lsls	r0, r0, #16
   34ade:	19c0      	adds	r0, r0, r7
   34ae0:	4480      	add	r8, r0
   34ae2:	4641      	mov	r1, r8
   34ae4:	9104      	str	r1, [sp, #16]
   34ae6:	4659      	mov	r1, fp
   34ae8:	0c0f      	lsrs	r7, r1, #16
   34aea:	0409      	lsls	r1, r1, #16
   34aec:	0c09      	lsrs	r1, r1, #16
   34aee:	4688      	mov	r8, r1
   34af0:	4359      	muls	r1, r3
   34af2:	468a      	mov	sl, r1
   34af4:	0039      	movs	r1, r7
   34af6:	4351      	muls	r1, r2
   34af8:	4689      	mov	r9, r1
   34afa:	4641      	mov	r1, r8
   34afc:	434a      	muls	r2, r1
   34afe:	4651      	mov	r1, sl
   34b00:	0c09      	lsrs	r1, r1, #16
   34b02:	468b      	mov	fp, r1
   34b04:	437b      	muls	r3, r7
   34b06:	18d2      	adds	r2, r2, r3
   34b08:	445a      	add	r2, fp
   34b0a:	4293      	cmp	r3, r2
   34b0c:	d903      	bls.n	34b16 <__aeabi_dmul+0x2c6>
   34b0e:	2380      	movs	r3, #128	; 0x80
   34b10:	025b      	lsls	r3, r3, #9
   34b12:	469b      	mov	fp, r3
   34b14:	44d9      	add	r9, fp
   34b16:	4651      	mov	r1, sl
   34b18:	0409      	lsls	r1, r1, #16
   34b1a:	0c09      	lsrs	r1, r1, #16
   34b1c:	468a      	mov	sl, r1
   34b1e:	4641      	mov	r1, r8
   34b20:	4361      	muls	r1, r4
   34b22:	437c      	muls	r4, r7
   34b24:	0c13      	lsrs	r3, r2, #16
   34b26:	0412      	lsls	r2, r2, #16
   34b28:	444b      	add	r3, r9
   34b2a:	4452      	add	r2, sl
   34b2c:	46a1      	mov	r9, r4
   34b2e:	468a      	mov	sl, r1
   34b30:	003c      	movs	r4, r7
   34b32:	4641      	mov	r1, r8
   34b34:	436c      	muls	r4, r5
   34b36:	434d      	muls	r5, r1
   34b38:	4651      	mov	r1, sl
   34b3a:	444d      	add	r5, r9
   34b3c:	0c0f      	lsrs	r7, r1, #16
   34b3e:	197d      	adds	r5, r7, r5
   34b40:	45a9      	cmp	r9, r5
   34b42:	d903      	bls.n	34b4c <__aeabi_dmul+0x2fc>
   34b44:	2180      	movs	r1, #128	; 0x80
   34b46:	0249      	lsls	r1, r1, #9
   34b48:	4688      	mov	r8, r1
   34b4a:	4444      	add	r4, r8
   34b4c:	9f04      	ldr	r7, [sp, #16]
   34b4e:	9903      	ldr	r1, [sp, #12]
   34b50:	46b8      	mov	r8, r7
   34b52:	4441      	add	r1, r8
   34b54:	468b      	mov	fp, r1
   34b56:	4583      	cmp	fp, r0
   34b58:	4180      	sbcs	r0, r0
   34b5a:	4241      	negs	r1, r0
   34b5c:	4688      	mov	r8, r1
   34b5e:	4651      	mov	r1, sl
   34b60:	0408      	lsls	r0, r1, #16
   34b62:	042f      	lsls	r7, r5, #16
   34b64:	0c00      	lsrs	r0, r0, #16
   34b66:	183f      	adds	r7, r7, r0
   34b68:	4658      	mov	r0, fp
   34b6a:	9902      	ldr	r1, [sp, #8]
   34b6c:	1810      	adds	r0, r2, r0
   34b6e:	4689      	mov	r9, r1
   34b70:	4290      	cmp	r0, r2
   34b72:	4192      	sbcs	r2, r2
   34b74:	444f      	add	r7, r9
   34b76:	46ba      	mov	sl, r7
   34b78:	4252      	negs	r2, r2
   34b7a:	4699      	mov	r9, r3
   34b7c:	4693      	mov	fp, r2
   34b7e:	44c2      	add	sl, r8
   34b80:	44d1      	add	r9, sl
   34b82:	44cb      	add	fp, r9
   34b84:	428f      	cmp	r7, r1
   34b86:	41bf      	sbcs	r7, r7
   34b88:	45c2      	cmp	sl, r8
   34b8a:	4189      	sbcs	r1, r1
   34b8c:	4599      	cmp	r9, r3
   34b8e:	419b      	sbcs	r3, r3
   34b90:	4593      	cmp	fp, r2
   34b92:	4192      	sbcs	r2, r2
   34b94:	427f      	negs	r7, r7
   34b96:	4249      	negs	r1, r1
   34b98:	0c2d      	lsrs	r5, r5, #16
   34b9a:	4252      	negs	r2, r2
   34b9c:	430f      	orrs	r7, r1
   34b9e:	425b      	negs	r3, r3
   34ba0:	4313      	orrs	r3, r2
   34ba2:	197f      	adds	r7, r7, r5
   34ba4:	18ff      	adds	r7, r7, r3
   34ba6:	465b      	mov	r3, fp
   34ba8:	193c      	adds	r4, r7, r4
   34baa:	0ddb      	lsrs	r3, r3, #23
   34bac:	9a05      	ldr	r2, [sp, #20]
   34bae:	0264      	lsls	r4, r4, #9
   34bb0:	431c      	orrs	r4, r3
   34bb2:	0243      	lsls	r3, r0, #9
   34bb4:	4313      	orrs	r3, r2
   34bb6:	1e5d      	subs	r5, r3, #1
   34bb8:	41ab      	sbcs	r3, r5
   34bba:	465a      	mov	r2, fp
   34bbc:	0dc0      	lsrs	r0, r0, #23
   34bbe:	4303      	orrs	r3, r0
   34bc0:	0252      	lsls	r2, r2, #9
   34bc2:	4313      	orrs	r3, r2
   34bc4:	01e2      	lsls	r2, r4, #7
   34bc6:	d556      	bpl.n	34c76 <__aeabi_dmul+0x426>
   34bc8:	2001      	movs	r0, #1
   34bca:	085a      	lsrs	r2, r3, #1
   34bcc:	4003      	ands	r3, r0
   34bce:	4313      	orrs	r3, r2
   34bd0:	07e2      	lsls	r2, r4, #31
   34bd2:	4313      	orrs	r3, r2
   34bd4:	0864      	lsrs	r4, r4, #1
   34bd6:	485a      	ldr	r0, [pc, #360]	; (34d40 <__aeabi_dmul+0x4f0>)
   34bd8:	4460      	add	r0, ip
   34bda:	2800      	cmp	r0, #0
   34bdc:	dd4d      	ble.n	34c7a <__aeabi_dmul+0x42a>
   34bde:	075a      	lsls	r2, r3, #29
   34be0:	d009      	beq.n	34bf6 <__aeabi_dmul+0x3a6>
   34be2:	220f      	movs	r2, #15
   34be4:	401a      	ands	r2, r3
   34be6:	2a04      	cmp	r2, #4
   34be8:	d005      	beq.n	34bf6 <__aeabi_dmul+0x3a6>
   34bea:	1d1a      	adds	r2, r3, #4
   34bec:	429a      	cmp	r2, r3
   34bee:	419b      	sbcs	r3, r3
   34bf0:	425b      	negs	r3, r3
   34bf2:	18e4      	adds	r4, r4, r3
   34bf4:	0013      	movs	r3, r2
   34bf6:	01e2      	lsls	r2, r4, #7
   34bf8:	d504      	bpl.n	34c04 <__aeabi_dmul+0x3b4>
   34bfa:	2080      	movs	r0, #128	; 0x80
   34bfc:	4a51      	ldr	r2, [pc, #324]	; (34d44 <__aeabi_dmul+0x4f4>)
   34bfe:	00c0      	lsls	r0, r0, #3
   34c00:	4014      	ands	r4, r2
   34c02:	4460      	add	r0, ip
   34c04:	4a50      	ldr	r2, [pc, #320]	; (34d48 <__aeabi_dmul+0x4f8>)
   34c06:	4290      	cmp	r0, r2
   34c08:	dd00      	ble.n	34c0c <__aeabi_dmul+0x3bc>
   34c0a:	e6e3      	b.n	349d4 <__aeabi_dmul+0x184>
   34c0c:	2501      	movs	r5, #1
   34c0e:	08db      	lsrs	r3, r3, #3
   34c10:	0762      	lsls	r2, r4, #29
   34c12:	431a      	orrs	r2, r3
   34c14:	0264      	lsls	r4, r4, #9
   34c16:	9b01      	ldr	r3, [sp, #4]
   34c18:	4691      	mov	r9, r2
   34c1a:	0b22      	lsrs	r2, r4, #12
   34c1c:	0544      	lsls	r4, r0, #21
   34c1e:	0d64      	lsrs	r4, r4, #21
   34c20:	401d      	ands	r5, r3
   34c22:	e67c      	b.n	3491e <__aeabi_dmul+0xce>
   34c24:	2280      	movs	r2, #128	; 0x80
   34c26:	4659      	mov	r1, fp
   34c28:	0312      	lsls	r2, r2, #12
   34c2a:	4211      	tst	r1, r2
   34c2c:	d008      	beq.n	34c40 <__aeabi_dmul+0x3f0>
   34c2e:	4214      	tst	r4, r2
   34c30:	d106      	bne.n	34c40 <__aeabi_dmul+0x3f0>
   34c32:	4322      	orrs	r2, r4
   34c34:	0312      	lsls	r2, r2, #12
   34c36:	0b12      	lsrs	r2, r2, #12
   34c38:	4645      	mov	r5, r8
   34c3a:	4699      	mov	r9, r3
   34c3c:	4c43      	ldr	r4, [pc, #268]	; (34d4c <__aeabi_dmul+0x4fc>)
   34c3e:	e66e      	b.n	3491e <__aeabi_dmul+0xce>
   34c40:	465b      	mov	r3, fp
   34c42:	431a      	orrs	r2, r3
   34c44:	0312      	lsls	r2, r2, #12
   34c46:	0b12      	lsrs	r2, r2, #12
   34c48:	4c40      	ldr	r4, [pc, #256]	; (34d4c <__aeabi_dmul+0x4fc>)
   34c4a:	e668      	b.n	3491e <__aeabi_dmul+0xce>
   34c4c:	0003      	movs	r3, r0
   34c4e:	4654      	mov	r4, sl
   34c50:	3b28      	subs	r3, #40	; 0x28
   34c52:	409c      	lsls	r4, r3
   34c54:	2300      	movs	r3, #0
   34c56:	e6b9      	b.n	349cc <__aeabi_dmul+0x17c>
   34c58:	f000 fbfc 	bl	35454 <__clzsi2>
   34c5c:	3020      	adds	r0, #32
   34c5e:	e6a6      	b.n	349ae <__aeabi_dmul+0x15e>
   34c60:	0003      	movs	r3, r0
   34c62:	3b28      	subs	r3, #40	; 0x28
   34c64:	409f      	lsls	r7, r3
   34c66:	2300      	movs	r3, #0
   34c68:	46bb      	mov	fp, r7
   34c6a:	4699      	mov	r9, r3
   34c6c:	e68a      	b.n	34984 <__aeabi_dmul+0x134>
   34c6e:	f000 fbf1 	bl	35454 <__clzsi2>
   34c72:	3020      	adds	r0, #32
   34c74:	e674      	b.n	34960 <__aeabi_dmul+0x110>
   34c76:	46b4      	mov	ip, r6
   34c78:	e7ad      	b.n	34bd6 <__aeabi_dmul+0x386>
   34c7a:	2501      	movs	r5, #1
   34c7c:	1a2a      	subs	r2, r5, r0
   34c7e:	2a38      	cmp	r2, #56	; 0x38
   34c80:	dd06      	ble.n	34c90 <__aeabi_dmul+0x440>
   34c82:	9b01      	ldr	r3, [sp, #4]
   34c84:	2400      	movs	r4, #0
   34c86:	401d      	ands	r5, r3
   34c88:	2300      	movs	r3, #0
   34c8a:	2200      	movs	r2, #0
   34c8c:	4699      	mov	r9, r3
   34c8e:	e646      	b.n	3491e <__aeabi_dmul+0xce>
   34c90:	2a1f      	cmp	r2, #31
   34c92:	dc21      	bgt.n	34cd8 <__aeabi_dmul+0x488>
   34c94:	2520      	movs	r5, #32
   34c96:	0020      	movs	r0, r4
   34c98:	1aad      	subs	r5, r5, r2
   34c9a:	001e      	movs	r6, r3
   34c9c:	40ab      	lsls	r3, r5
   34c9e:	40a8      	lsls	r0, r5
   34ca0:	40d6      	lsrs	r6, r2
   34ca2:	1e5d      	subs	r5, r3, #1
   34ca4:	41ab      	sbcs	r3, r5
   34ca6:	4330      	orrs	r0, r6
   34ca8:	4318      	orrs	r0, r3
   34caa:	40d4      	lsrs	r4, r2
   34cac:	0743      	lsls	r3, r0, #29
   34cae:	d009      	beq.n	34cc4 <__aeabi_dmul+0x474>
   34cb0:	230f      	movs	r3, #15
   34cb2:	4003      	ands	r3, r0
   34cb4:	2b04      	cmp	r3, #4
   34cb6:	d005      	beq.n	34cc4 <__aeabi_dmul+0x474>
   34cb8:	0003      	movs	r3, r0
   34cba:	1d18      	adds	r0, r3, #4
   34cbc:	4298      	cmp	r0, r3
   34cbe:	419b      	sbcs	r3, r3
   34cc0:	425b      	negs	r3, r3
   34cc2:	18e4      	adds	r4, r4, r3
   34cc4:	0223      	lsls	r3, r4, #8
   34cc6:	d521      	bpl.n	34d0c <__aeabi_dmul+0x4bc>
   34cc8:	2501      	movs	r5, #1
   34cca:	9b01      	ldr	r3, [sp, #4]
   34ccc:	2401      	movs	r4, #1
   34cce:	401d      	ands	r5, r3
   34cd0:	2300      	movs	r3, #0
   34cd2:	2200      	movs	r2, #0
   34cd4:	4699      	mov	r9, r3
   34cd6:	e622      	b.n	3491e <__aeabi_dmul+0xce>
   34cd8:	251f      	movs	r5, #31
   34cda:	0021      	movs	r1, r4
   34cdc:	426d      	negs	r5, r5
   34cde:	1a28      	subs	r0, r5, r0
   34ce0:	40c1      	lsrs	r1, r0
   34ce2:	0008      	movs	r0, r1
   34ce4:	2a20      	cmp	r2, #32
   34ce6:	d01d      	beq.n	34d24 <__aeabi_dmul+0x4d4>
   34ce8:	355f      	adds	r5, #95	; 0x5f
   34cea:	1aaa      	subs	r2, r5, r2
   34cec:	4094      	lsls	r4, r2
   34cee:	4323      	orrs	r3, r4
   34cf0:	1e5c      	subs	r4, r3, #1
   34cf2:	41a3      	sbcs	r3, r4
   34cf4:	2507      	movs	r5, #7
   34cf6:	4303      	orrs	r3, r0
   34cf8:	401d      	ands	r5, r3
   34cfa:	2200      	movs	r2, #0
   34cfc:	2d00      	cmp	r5, #0
   34cfe:	d009      	beq.n	34d14 <__aeabi_dmul+0x4c4>
   34d00:	220f      	movs	r2, #15
   34d02:	2400      	movs	r4, #0
   34d04:	401a      	ands	r2, r3
   34d06:	0018      	movs	r0, r3
   34d08:	2a04      	cmp	r2, #4
   34d0a:	d1d6      	bne.n	34cba <__aeabi_dmul+0x46a>
   34d0c:	0003      	movs	r3, r0
   34d0e:	0765      	lsls	r5, r4, #29
   34d10:	0264      	lsls	r4, r4, #9
   34d12:	0b22      	lsrs	r2, r4, #12
   34d14:	08db      	lsrs	r3, r3, #3
   34d16:	432b      	orrs	r3, r5
   34d18:	2501      	movs	r5, #1
   34d1a:	4699      	mov	r9, r3
   34d1c:	9b01      	ldr	r3, [sp, #4]
   34d1e:	2400      	movs	r4, #0
   34d20:	401d      	ands	r5, r3
   34d22:	e5fc      	b.n	3491e <__aeabi_dmul+0xce>
   34d24:	2400      	movs	r4, #0
   34d26:	e7e2      	b.n	34cee <__aeabi_dmul+0x49e>
   34d28:	2280      	movs	r2, #128	; 0x80
   34d2a:	2501      	movs	r5, #1
   34d2c:	0312      	lsls	r2, r2, #12
   34d2e:	4322      	orrs	r2, r4
   34d30:	9901      	ldr	r1, [sp, #4]
   34d32:	0312      	lsls	r2, r2, #12
   34d34:	0b12      	lsrs	r2, r2, #12
   34d36:	400d      	ands	r5, r1
   34d38:	4699      	mov	r9, r3
   34d3a:	4c04      	ldr	r4, [pc, #16]	; (34d4c <__aeabi_dmul+0x4fc>)
   34d3c:	e5ef      	b.n	3491e <__aeabi_dmul+0xce>
   34d3e:	46c0      	nop			; (mov r8, r8)
   34d40:	000003ff 	.word	0x000003ff
   34d44:	feffffff 	.word	0xfeffffff
   34d48:	000007fe 	.word	0x000007fe
   34d4c:	000007ff 	.word	0x000007ff

00034d50 <__aeabi_dsub>:
   34d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   34d52:	4646      	mov	r6, r8
   34d54:	46d6      	mov	lr, sl
   34d56:	464f      	mov	r7, r9
   34d58:	030c      	lsls	r4, r1, #12
   34d5a:	b5c0      	push	{r6, r7, lr}
   34d5c:	0fcd      	lsrs	r5, r1, #31
   34d5e:	004e      	lsls	r6, r1, #1
   34d60:	0a61      	lsrs	r1, r4, #9
   34d62:	0f44      	lsrs	r4, r0, #29
   34d64:	430c      	orrs	r4, r1
   34d66:	00c1      	lsls	r1, r0, #3
   34d68:	0058      	lsls	r0, r3, #1
   34d6a:	0d40      	lsrs	r0, r0, #21
   34d6c:	4684      	mov	ip, r0
   34d6e:	468a      	mov	sl, r1
   34d70:	000f      	movs	r7, r1
   34d72:	0319      	lsls	r1, r3, #12
   34d74:	0f50      	lsrs	r0, r2, #29
   34d76:	0a49      	lsrs	r1, r1, #9
   34d78:	4301      	orrs	r1, r0
   34d7a:	48c6      	ldr	r0, [pc, #792]	; (35094 <__aeabi_dsub+0x344>)
   34d7c:	0d76      	lsrs	r6, r6, #21
   34d7e:	46a8      	mov	r8, r5
   34d80:	0fdb      	lsrs	r3, r3, #31
   34d82:	00d2      	lsls	r2, r2, #3
   34d84:	4584      	cmp	ip, r0
   34d86:	d100      	bne.n	34d8a <__aeabi_dsub+0x3a>
   34d88:	e0d8      	b.n	34f3c <__aeabi_dsub+0x1ec>
   34d8a:	2001      	movs	r0, #1
   34d8c:	4043      	eors	r3, r0
   34d8e:	42ab      	cmp	r3, r5
   34d90:	d100      	bne.n	34d94 <__aeabi_dsub+0x44>
   34d92:	e0a6      	b.n	34ee2 <__aeabi_dsub+0x192>
   34d94:	4660      	mov	r0, ip
   34d96:	1a35      	subs	r5, r6, r0
   34d98:	2d00      	cmp	r5, #0
   34d9a:	dc00      	bgt.n	34d9e <__aeabi_dsub+0x4e>
   34d9c:	e105      	b.n	34faa <__aeabi_dsub+0x25a>
   34d9e:	2800      	cmp	r0, #0
   34da0:	d110      	bne.n	34dc4 <__aeabi_dsub+0x74>
   34da2:	000b      	movs	r3, r1
   34da4:	4313      	orrs	r3, r2
   34da6:	d100      	bne.n	34daa <__aeabi_dsub+0x5a>
   34da8:	e0d7      	b.n	34f5a <__aeabi_dsub+0x20a>
   34daa:	1e6b      	subs	r3, r5, #1
   34dac:	2b00      	cmp	r3, #0
   34dae:	d000      	beq.n	34db2 <__aeabi_dsub+0x62>
   34db0:	e14b      	b.n	3504a <__aeabi_dsub+0x2fa>
   34db2:	4653      	mov	r3, sl
   34db4:	1a9f      	subs	r7, r3, r2
   34db6:	45ba      	cmp	sl, r7
   34db8:	4180      	sbcs	r0, r0
   34dba:	1a64      	subs	r4, r4, r1
   34dbc:	4240      	negs	r0, r0
   34dbe:	1a24      	subs	r4, r4, r0
   34dc0:	2601      	movs	r6, #1
   34dc2:	e01e      	b.n	34e02 <__aeabi_dsub+0xb2>
   34dc4:	4bb3      	ldr	r3, [pc, #716]	; (35094 <__aeabi_dsub+0x344>)
   34dc6:	429e      	cmp	r6, r3
   34dc8:	d048      	beq.n	34e5c <__aeabi_dsub+0x10c>
   34dca:	2380      	movs	r3, #128	; 0x80
   34dcc:	041b      	lsls	r3, r3, #16
   34dce:	4319      	orrs	r1, r3
   34dd0:	2d38      	cmp	r5, #56	; 0x38
   34dd2:	dd00      	ble.n	34dd6 <__aeabi_dsub+0x86>
   34dd4:	e119      	b.n	3500a <__aeabi_dsub+0x2ba>
   34dd6:	2d1f      	cmp	r5, #31
   34dd8:	dd00      	ble.n	34ddc <__aeabi_dsub+0x8c>
   34dda:	e14c      	b.n	35076 <__aeabi_dsub+0x326>
   34ddc:	2320      	movs	r3, #32
   34dde:	000f      	movs	r7, r1
   34de0:	1b5b      	subs	r3, r3, r5
   34de2:	0010      	movs	r0, r2
   34de4:	409a      	lsls	r2, r3
   34de6:	409f      	lsls	r7, r3
   34de8:	40e8      	lsrs	r0, r5
   34dea:	1e53      	subs	r3, r2, #1
   34dec:	419a      	sbcs	r2, r3
   34dee:	40e9      	lsrs	r1, r5
   34df0:	4307      	orrs	r7, r0
   34df2:	4317      	orrs	r7, r2
   34df4:	4653      	mov	r3, sl
   34df6:	1bdf      	subs	r7, r3, r7
   34df8:	1a61      	subs	r1, r4, r1
   34dfa:	45ba      	cmp	sl, r7
   34dfc:	41a4      	sbcs	r4, r4
   34dfe:	4264      	negs	r4, r4
   34e00:	1b0c      	subs	r4, r1, r4
   34e02:	0223      	lsls	r3, r4, #8
   34e04:	d400      	bmi.n	34e08 <__aeabi_dsub+0xb8>
   34e06:	e0c5      	b.n	34f94 <__aeabi_dsub+0x244>
   34e08:	0264      	lsls	r4, r4, #9
   34e0a:	0a65      	lsrs	r5, r4, #9
   34e0c:	2d00      	cmp	r5, #0
   34e0e:	d100      	bne.n	34e12 <__aeabi_dsub+0xc2>
   34e10:	e0f6      	b.n	35000 <__aeabi_dsub+0x2b0>
   34e12:	0028      	movs	r0, r5
   34e14:	f000 fb1e 	bl	35454 <__clzsi2>
   34e18:	0003      	movs	r3, r0
   34e1a:	3b08      	subs	r3, #8
   34e1c:	2b1f      	cmp	r3, #31
   34e1e:	dd00      	ble.n	34e22 <__aeabi_dsub+0xd2>
   34e20:	e0e9      	b.n	34ff6 <__aeabi_dsub+0x2a6>
   34e22:	2220      	movs	r2, #32
   34e24:	003c      	movs	r4, r7
   34e26:	1ad2      	subs	r2, r2, r3
   34e28:	409d      	lsls	r5, r3
   34e2a:	40d4      	lsrs	r4, r2
   34e2c:	409f      	lsls	r7, r3
   34e2e:	4325      	orrs	r5, r4
   34e30:	429e      	cmp	r6, r3
   34e32:	dd00      	ble.n	34e36 <__aeabi_dsub+0xe6>
   34e34:	e0db      	b.n	34fee <__aeabi_dsub+0x29e>
   34e36:	1b9e      	subs	r6, r3, r6
   34e38:	1c73      	adds	r3, r6, #1
   34e3a:	2b1f      	cmp	r3, #31
   34e3c:	dd00      	ble.n	34e40 <__aeabi_dsub+0xf0>
   34e3e:	e10a      	b.n	35056 <__aeabi_dsub+0x306>
   34e40:	2220      	movs	r2, #32
   34e42:	0038      	movs	r0, r7
   34e44:	1ad2      	subs	r2, r2, r3
   34e46:	0029      	movs	r1, r5
   34e48:	4097      	lsls	r7, r2
   34e4a:	002c      	movs	r4, r5
   34e4c:	4091      	lsls	r1, r2
   34e4e:	40d8      	lsrs	r0, r3
   34e50:	1e7a      	subs	r2, r7, #1
   34e52:	4197      	sbcs	r7, r2
   34e54:	40dc      	lsrs	r4, r3
   34e56:	2600      	movs	r6, #0
   34e58:	4301      	orrs	r1, r0
   34e5a:	430f      	orrs	r7, r1
   34e5c:	077b      	lsls	r3, r7, #29
   34e5e:	d009      	beq.n	34e74 <__aeabi_dsub+0x124>
   34e60:	230f      	movs	r3, #15
   34e62:	403b      	ands	r3, r7
   34e64:	2b04      	cmp	r3, #4
   34e66:	d005      	beq.n	34e74 <__aeabi_dsub+0x124>
   34e68:	1d3b      	adds	r3, r7, #4
   34e6a:	42bb      	cmp	r3, r7
   34e6c:	41bf      	sbcs	r7, r7
   34e6e:	427f      	negs	r7, r7
   34e70:	19e4      	adds	r4, r4, r7
   34e72:	001f      	movs	r7, r3
   34e74:	0223      	lsls	r3, r4, #8
   34e76:	d525      	bpl.n	34ec4 <__aeabi_dsub+0x174>
   34e78:	4b86      	ldr	r3, [pc, #536]	; (35094 <__aeabi_dsub+0x344>)
   34e7a:	3601      	adds	r6, #1
   34e7c:	429e      	cmp	r6, r3
   34e7e:	d100      	bne.n	34e82 <__aeabi_dsub+0x132>
   34e80:	e0af      	b.n	34fe2 <__aeabi_dsub+0x292>
   34e82:	4b85      	ldr	r3, [pc, #532]	; (35098 <__aeabi_dsub+0x348>)
   34e84:	2501      	movs	r5, #1
   34e86:	401c      	ands	r4, r3
   34e88:	4643      	mov	r3, r8
   34e8a:	0762      	lsls	r2, r4, #29
   34e8c:	08ff      	lsrs	r7, r7, #3
   34e8e:	0264      	lsls	r4, r4, #9
   34e90:	0576      	lsls	r6, r6, #21
   34e92:	4317      	orrs	r7, r2
   34e94:	0b24      	lsrs	r4, r4, #12
   34e96:	0d76      	lsrs	r6, r6, #21
   34e98:	401d      	ands	r5, r3
   34e9a:	2100      	movs	r1, #0
   34e9c:	0324      	lsls	r4, r4, #12
   34e9e:	0b23      	lsrs	r3, r4, #12
   34ea0:	0d0c      	lsrs	r4, r1, #20
   34ea2:	4a7e      	ldr	r2, [pc, #504]	; (3509c <__aeabi_dsub+0x34c>)
   34ea4:	0524      	lsls	r4, r4, #20
   34ea6:	431c      	orrs	r4, r3
   34ea8:	4014      	ands	r4, r2
   34eaa:	0533      	lsls	r3, r6, #20
   34eac:	4323      	orrs	r3, r4
   34eae:	005b      	lsls	r3, r3, #1
   34eb0:	07ed      	lsls	r5, r5, #31
   34eb2:	085b      	lsrs	r3, r3, #1
   34eb4:	432b      	orrs	r3, r5
   34eb6:	0038      	movs	r0, r7
   34eb8:	0019      	movs	r1, r3
   34eba:	bc1c      	pop	{r2, r3, r4}
   34ebc:	4690      	mov	r8, r2
   34ebe:	4699      	mov	r9, r3
   34ec0:	46a2      	mov	sl, r4
   34ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34ec4:	2501      	movs	r5, #1
   34ec6:	4643      	mov	r3, r8
   34ec8:	0762      	lsls	r2, r4, #29
   34eca:	08ff      	lsrs	r7, r7, #3
   34ecc:	4317      	orrs	r7, r2
   34ece:	08e4      	lsrs	r4, r4, #3
   34ed0:	401d      	ands	r5, r3
   34ed2:	4b70      	ldr	r3, [pc, #448]	; (35094 <__aeabi_dsub+0x344>)
   34ed4:	429e      	cmp	r6, r3
   34ed6:	d036      	beq.n	34f46 <__aeabi_dsub+0x1f6>
   34ed8:	0324      	lsls	r4, r4, #12
   34eda:	0576      	lsls	r6, r6, #21
   34edc:	0b24      	lsrs	r4, r4, #12
   34ede:	0d76      	lsrs	r6, r6, #21
   34ee0:	e7db      	b.n	34e9a <__aeabi_dsub+0x14a>
   34ee2:	4663      	mov	r3, ip
   34ee4:	1af3      	subs	r3, r6, r3
   34ee6:	2b00      	cmp	r3, #0
   34ee8:	dc00      	bgt.n	34eec <__aeabi_dsub+0x19c>
   34eea:	e094      	b.n	35016 <__aeabi_dsub+0x2c6>
   34eec:	4660      	mov	r0, ip
   34eee:	2800      	cmp	r0, #0
   34ef0:	d035      	beq.n	34f5e <__aeabi_dsub+0x20e>
   34ef2:	4868      	ldr	r0, [pc, #416]	; (35094 <__aeabi_dsub+0x344>)
   34ef4:	4286      	cmp	r6, r0
   34ef6:	d0b1      	beq.n	34e5c <__aeabi_dsub+0x10c>
   34ef8:	2780      	movs	r7, #128	; 0x80
   34efa:	043f      	lsls	r7, r7, #16
   34efc:	4339      	orrs	r1, r7
   34efe:	2b38      	cmp	r3, #56	; 0x38
   34f00:	dc00      	bgt.n	34f04 <__aeabi_dsub+0x1b4>
   34f02:	e0fd      	b.n	35100 <__aeabi_dsub+0x3b0>
   34f04:	430a      	orrs	r2, r1
   34f06:	0017      	movs	r7, r2
   34f08:	2100      	movs	r1, #0
   34f0a:	1e7a      	subs	r2, r7, #1
   34f0c:	4197      	sbcs	r7, r2
   34f0e:	4457      	add	r7, sl
   34f10:	4557      	cmp	r7, sl
   34f12:	4180      	sbcs	r0, r0
   34f14:	1909      	adds	r1, r1, r4
   34f16:	4244      	negs	r4, r0
   34f18:	190c      	adds	r4, r1, r4
   34f1a:	0223      	lsls	r3, r4, #8
   34f1c:	d53a      	bpl.n	34f94 <__aeabi_dsub+0x244>
   34f1e:	4b5d      	ldr	r3, [pc, #372]	; (35094 <__aeabi_dsub+0x344>)
   34f20:	3601      	adds	r6, #1
   34f22:	429e      	cmp	r6, r3
   34f24:	d100      	bne.n	34f28 <__aeabi_dsub+0x1d8>
   34f26:	e14b      	b.n	351c0 <__aeabi_dsub+0x470>
   34f28:	2201      	movs	r2, #1
   34f2a:	4b5b      	ldr	r3, [pc, #364]	; (35098 <__aeabi_dsub+0x348>)
   34f2c:	401c      	ands	r4, r3
   34f2e:	087b      	lsrs	r3, r7, #1
   34f30:	4017      	ands	r7, r2
   34f32:	431f      	orrs	r7, r3
   34f34:	07e2      	lsls	r2, r4, #31
   34f36:	4317      	orrs	r7, r2
   34f38:	0864      	lsrs	r4, r4, #1
   34f3a:	e78f      	b.n	34e5c <__aeabi_dsub+0x10c>
   34f3c:	0008      	movs	r0, r1
   34f3e:	4310      	orrs	r0, r2
   34f40:	d000      	beq.n	34f44 <__aeabi_dsub+0x1f4>
   34f42:	e724      	b.n	34d8e <__aeabi_dsub+0x3e>
   34f44:	e721      	b.n	34d8a <__aeabi_dsub+0x3a>
   34f46:	0023      	movs	r3, r4
   34f48:	433b      	orrs	r3, r7
   34f4a:	d100      	bne.n	34f4e <__aeabi_dsub+0x1fe>
   34f4c:	e1b9      	b.n	352c2 <__aeabi_dsub+0x572>
   34f4e:	2280      	movs	r2, #128	; 0x80
   34f50:	0312      	lsls	r2, r2, #12
   34f52:	4314      	orrs	r4, r2
   34f54:	0324      	lsls	r4, r4, #12
   34f56:	0b24      	lsrs	r4, r4, #12
   34f58:	e79f      	b.n	34e9a <__aeabi_dsub+0x14a>
   34f5a:	002e      	movs	r6, r5
   34f5c:	e77e      	b.n	34e5c <__aeabi_dsub+0x10c>
   34f5e:	0008      	movs	r0, r1
   34f60:	4310      	orrs	r0, r2
   34f62:	d100      	bne.n	34f66 <__aeabi_dsub+0x216>
   34f64:	e0ca      	b.n	350fc <__aeabi_dsub+0x3ac>
   34f66:	1e58      	subs	r0, r3, #1
   34f68:	4684      	mov	ip, r0
   34f6a:	2800      	cmp	r0, #0
   34f6c:	d000      	beq.n	34f70 <__aeabi_dsub+0x220>
   34f6e:	e0e7      	b.n	35140 <__aeabi_dsub+0x3f0>
   34f70:	4452      	add	r2, sl
   34f72:	4552      	cmp	r2, sl
   34f74:	4180      	sbcs	r0, r0
   34f76:	1864      	adds	r4, r4, r1
   34f78:	4240      	negs	r0, r0
   34f7a:	1824      	adds	r4, r4, r0
   34f7c:	0017      	movs	r7, r2
   34f7e:	2601      	movs	r6, #1
   34f80:	0223      	lsls	r3, r4, #8
   34f82:	d507      	bpl.n	34f94 <__aeabi_dsub+0x244>
   34f84:	2602      	movs	r6, #2
   34f86:	e7cf      	b.n	34f28 <__aeabi_dsub+0x1d8>
   34f88:	4664      	mov	r4, ip
   34f8a:	432c      	orrs	r4, r5
   34f8c:	d100      	bne.n	34f90 <__aeabi_dsub+0x240>
   34f8e:	e1b3      	b.n	352f8 <__aeabi_dsub+0x5a8>
   34f90:	002c      	movs	r4, r5
   34f92:	4667      	mov	r7, ip
   34f94:	077b      	lsls	r3, r7, #29
   34f96:	d000      	beq.n	34f9a <__aeabi_dsub+0x24a>
   34f98:	e762      	b.n	34e60 <__aeabi_dsub+0x110>
   34f9a:	0763      	lsls	r3, r4, #29
   34f9c:	08ff      	lsrs	r7, r7, #3
   34f9e:	431f      	orrs	r7, r3
   34fa0:	2501      	movs	r5, #1
   34fa2:	4643      	mov	r3, r8
   34fa4:	08e4      	lsrs	r4, r4, #3
   34fa6:	401d      	ands	r5, r3
   34fa8:	e793      	b.n	34ed2 <__aeabi_dsub+0x182>
   34faa:	2d00      	cmp	r5, #0
   34fac:	d178      	bne.n	350a0 <__aeabi_dsub+0x350>
   34fae:	1c75      	adds	r5, r6, #1
   34fb0:	056d      	lsls	r5, r5, #21
   34fb2:	0d6d      	lsrs	r5, r5, #21
   34fb4:	2d01      	cmp	r5, #1
   34fb6:	dc00      	bgt.n	34fba <__aeabi_dsub+0x26a>
   34fb8:	e0f2      	b.n	351a0 <__aeabi_dsub+0x450>
   34fba:	4650      	mov	r0, sl
   34fbc:	1a80      	subs	r0, r0, r2
   34fbe:	4582      	cmp	sl, r0
   34fc0:	41bf      	sbcs	r7, r7
   34fc2:	1a65      	subs	r5, r4, r1
   34fc4:	427f      	negs	r7, r7
   34fc6:	1bed      	subs	r5, r5, r7
   34fc8:	4684      	mov	ip, r0
   34fca:	0228      	lsls	r0, r5, #8
   34fcc:	d400      	bmi.n	34fd0 <__aeabi_dsub+0x280>
   34fce:	e08c      	b.n	350ea <__aeabi_dsub+0x39a>
   34fd0:	4650      	mov	r0, sl
   34fd2:	1a17      	subs	r7, r2, r0
   34fd4:	42ba      	cmp	r2, r7
   34fd6:	4192      	sbcs	r2, r2
   34fd8:	1b0c      	subs	r4, r1, r4
   34fda:	4255      	negs	r5, r2
   34fdc:	1b65      	subs	r5, r4, r5
   34fde:	4698      	mov	r8, r3
   34fe0:	e714      	b.n	34e0c <__aeabi_dsub+0xbc>
   34fe2:	2501      	movs	r5, #1
   34fe4:	4643      	mov	r3, r8
   34fe6:	2400      	movs	r4, #0
   34fe8:	401d      	ands	r5, r3
   34fea:	2700      	movs	r7, #0
   34fec:	e755      	b.n	34e9a <__aeabi_dsub+0x14a>
   34fee:	4c2a      	ldr	r4, [pc, #168]	; (35098 <__aeabi_dsub+0x348>)
   34ff0:	1af6      	subs	r6, r6, r3
   34ff2:	402c      	ands	r4, r5
   34ff4:	e732      	b.n	34e5c <__aeabi_dsub+0x10c>
   34ff6:	003d      	movs	r5, r7
   34ff8:	3828      	subs	r0, #40	; 0x28
   34ffa:	4085      	lsls	r5, r0
   34ffc:	2700      	movs	r7, #0
   34ffe:	e717      	b.n	34e30 <__aeabi_dsub+0xe0>
   35000:	0038      	movs	r0, r7
   35002:	f000 fa27 	bl	35454 <__clzsi2>
   35006:	3020      	adds	r0, #32
   35008:	e706      	b.n	34e18 <__aeabi_dsub+0xc8>
   3500a:	430a      	orrs	r2, r1
   3500c:	0017      	movs	r7, r2
   3500e:	2100      	movs	r1, #0
   35010:	1e7a      	subs	r2, r7, #1
   35012:	4197      	sbcs	r7, r2
   35014:	e6ee      	b.n	34df4 <__aeabi_dsub+0xa4>
   35016:	2b00      	cmp	r3, #0
   35018:	d000      	beq.n	3501c <__aeabi_dsub+0x2cc>
   3501a:	e0e5      	b.n	351e8 <__aeabi_dsub+0x498>
   3501c:	1c73      	adds	r3, r6, #1
   3501e:	469c      	mov	ip, r3
   35020:	055b      	lsls	r3, r3, #21
   35022:	0d5b      	lsrs	r3, r3, #21
   35024:	2b01      	cmp	r3, #1
   35026:	dc00      	bgt.n	3502a <__aeabi_dsub+0x2da>
   35028:	e09f      	b.n	3516a <__aeabi_dsub+0x41a>
   3502a:	4b1a      	ldr	r3, [pc, #104]	; (35094 <__aeabi_dsub+0x344>)
   3502c:	459c      	cmp	ip, r3
   3502e:	d100      	bne.n	35032 <__aeabi_dsub+0x2e2>
   35030:	e0c5      	b.n	351be <__aeabi_dsub+0x46e>
   35032:	4452      	add	r2, sl
   35034:	4552      	cmp	r2, sl
   35036:	4180      	sbcs	r0, r0
   35038:	1864      	adds	r4, r4, r1
   3503a:	4240      	negs	r0, r0
   3503c:	1824      	adds	r4, r4, r0
   3503e:	07e7      	lsls	r7, r4, #31
   35040:	0852      	lsrs	r2, r2, #1
   35042:	4317      	orrs	r7, r2
   35044:	0864      	lsrs	r4, r4, #1
   35046:	4666      	mov	r6, ip
   35048:	e708      	b.n	34e5c <__aeabi_dsub+0x10c>
   3504a:	4812      	ldr	r0, [pc, #72]	; (35094 <__aeabi_dsub+0x344>)
   3504c:	4285      	cmp	r5, r0
   3504e:	d100      	bne.n	35052 <__aeabi_dsub+0x302>
   35050:	e085      	b.n	3515e <__aeabi_dsub+0x40e>
   35052:	001d      	movs	r5, r3
   35054:	e6bc      	b.n	34dd0 <__aeabi_dsub+0x80>
   35056:	0029      	movs	r1, r5
   35058:	3e1f      	subs	r6, #31
   3505a:	40f1      	lsrs	r1, r6
   3505c:	2b20      	cmp	r3, #32
   3505e:	d100      	bne.n	35062 <__aeabi_dsub+0x312>
   35060:	e07f      	b.n	35162 <__aeabi_dsub+0x412>
   35062:	2240      	movs	r2, #64	; 0x40
   35064:	1ad3      	subs	r3, r2, r3
   35066:	409d      	lsls	r5, r3
   35068:	432f      	orrs	r7, r5
   3506a:	1e7d      	subs	r5, r7, #1
   3506c:	41af      	sbcs	r7, r5
   3506e:	2400      	movs	r4, #0
   35070:	430f      	orrs	r7, r1
   35072:	2600      	movs	r6, #0
   35074:	e78e      	b.n	34f94 <__aeabi_dsub+0x244>
   35076:	002b      	movs	r3, r5
   35078:	000f      	movs	r7, r1
   3507a:	3b20      	subs	r3, #32
   3507c:	40df      	lsrs	r7, r3
   3507e:	2d20      	cmp	r5, #32
   35080:	d071      	beq.n	35166 <__aeabi_dsub+0x416>
   35082:	2340      	movs	r3, #64	; 0x40
   35084:	1b5d      	subs	r5, r3, r5
   35086:	40a9      	lsls	r1, r5
   35088:	430a      	orrs	r2, r1
   3508a:	1e51      	subs	r1, r2, #1
   3508c:	418a      	sbcs	r2, r1
   3508e:	2100      	movs	r1, #0
   35090:	4317      	orrs	r7, r2
   35092:	e6af      	b.n	34df4 <__aeabi_dsub+0xa4>
   35094:	000007ff 	.word	0x000007ff
   35098:	ff7fffff 	.word	0xff7fffff
   3509c:	800fffff 	.word	0x800fffff
   350a0:	2e00      	cmp	r6, #0
   350a2:	d03e      	beq.n	35122 <__aeabi_dsub+0x3d2>
   350a4:	4eb3      	ldr	r6, [pc, #716]	; (35374 <__aeabi_dsub+0x624>)
   350a6:	45b4      	cmp	ip, r6
   350a8:	d045      	beq.n	35136 <__aeabi_dsub+0x3e6>
   350aa:	2680      	movs	r6, #128	; 0x80
   350ac:	0436      	lsls	r6, r6, #16
   350ae:	426d      	negs	r5, r5
   350b0:	4334      	orrs	r4, r6
   350b2:	2d38      	cmp	r5, #56	; 0x38
   350b4:	dd00      	ble.n	350b8 <__aeabi_dsub+0x368>
   350b6:	e0a8      	b.n	3520a <__aeabi_dsub+0x4ba>
   350b8:	2d1f      	cmp	r5, #31
   350ba:	dd00      	ble.n	350be <__aeabi_dsub+0x36e>
   350bc:	e11f      	b.n	352fe <__aeabi_dsub+0x5ae>
   350be:	2620      	movs	r6, #32
   350c0:	0027      	movs	r7, r4
   350c2:	4650      	mov	r0, sl
   350c4:	1b76      	subs	r6, r6, r5
   350c6:	40b7      	lsls	r7, r6
   350c8:	40e8      	lsrs	r0, r5
   350ca:	4307      	orrs	r7, r0
   350cc:	4650      	mov	r0, sl
   350ce:	40b0      	lsls	r0, r6
   350d0:	1e46      	subs	r6, r0, #1
   350d2:	41b0      	sbcs	r0, r6
   350d4:	40ec      	lsrs	r4, r5
   350d6:	4338      	orrs	r0, r7
   350d8:	1a17      	subs	r7, r2, r0
   350da:	42ba      	cmp	r2, r7
   350dc:	4192      	sbcs	r2, r2
   350de:	1b0c      	subs	r4, r1, r4
   350e0:	4252      	negs	r2, r2
   350e2:	1aa4      	subs	r4, r4, r2
   350e4:	4666      	mov	r6, ip
   350e6:	4698      	mov	r8, r3
   350e8:	e68b      	b.n	34e02 <__aeabi_dsub+0xb2>
   350ea:	4664      	mov	r4, ip
   350ec:	4667      	mov	r7, ip
   350ee:	432c      	orrs	r4, r5
   350f0:	d000      	beq.n	350f4 <__aeabi_dsub+0x3a4>
   350f2:	e68b      	b.n	34e0c <__aeabi_dsub+0xbc>
   350f4:	2500      	movs	r5, #0
   350f6:	2600      	movs	r6, #0
   350f8:	2700      	movs	r7, #0
   350fa:	e6ea      	b.n	34ed2 <__aeabi_dsub+0x182>
   350fc:	001e      	movs	r6, r3
   350fe:	e6ad      	b.n	34e5c <__aeabi_dsub+0x10c>
   35100:	2b1f      	cmp	r3, #31
   35102:	dc60      	bgt.n	351c6 <__aeabi_dsub+0x476>
   35104:	2720      	movs	r7, #32
   35106:	1af8      	subs	r0, r7, r3
   35108:	000f      	movs	r7, r1
   3510a:	4684      	mov	ip, r0
   3510c:	4087      	lsls	r7, r0
   3510e:	0010      	movs	r0, r2
   35110:	40d8      	lsrs	r0, r3
   35112:	4307      	orrs	r7, r0
   35114:	4660      	mov	r0, ip
   35116:	4082      	lsls	r2, r0
   35118:	1e50      	subs	r0, r2, #1
   3511a:	4182      	sbcs	r2, r0
   3511c:	40d9      	lsrs	r1, r3
   3511e:	4317      	orrs	r7, r2
   35120:	e6f5      	b.n	34f0e <__aeabi_dsub+0x1be>
   35122:	0026      	movs	r6, r4
   35124:	4650      	mov	r0, sl
   35126:	4306      	orrs	r6, r0
   35128:	d005      	beq.n	35136 <__aeabi_dsub+0x3e6>
   3512a:	43ed      	mvns	r5, r5
   3512c:	2d00      	cmp	r5, #0
   3512e:	d0d3      	beq.n	350d8 <__aeabi_dsub+0x388>
   35130:	4e90      	ldr	r6, [pc, #576]	; (35374 <__aeabi_dsub+0x624>)
   35132:	45b4      	cmp	ip, r6
   35134:	d1bd      	bne.n	350b2 <__aeabi_dsub+0x362>
   35136:	000c      	movs	r4, r1
   35138:	0017      	movs	r7, r2
   3513a:	4666      	mov	r6, ip
   3513c:	4698      	mov	r8, r3
   3513e:	e68d      	b.n	34e5c <__aeabi_dsub+0x10c>
   35140:	488c      	ldr	r0, [pc, #560]	; (35374 <__aeabi_dsub+0x624>)
   35142:	4283      	cmp	r3, r0
   35144:	d00b      	beq.n	3515e <__aeabi_dsub+0x40e>
   35146:	4663      	mov	r3, ip
   35148:	e6d9      	b.n	34efe <__aeabi_dsub+0x1ae>
   3514a:	2d00      	cmp	r5, #0
   3514c:	d000      	beq.n	35150 <__aeabi_dsub+0x400>
   3514e:	e096      	b.n	3527e <__aeabi_dsub+0x52e>
   35150:	0008      	movs	r0, r1
   35152:	4310      	orrs	r0, r2
   35154:	d100      	bne.n	35158 <__aeabi_dsub+0x408>
   35156:	e0e2      	b.n	3531e <__aeabi_dsub+0x5ce>
   35158:	000c      	movs	r4, r1
   3515a:	0017      	movs	r7, r2
   3515c:	4698      	mov	r8, r3
   3515e:	4e85      	ldr	r6, [pc, #532]	; (35374 <__aeabi_dsub+0x624>)
   35160:	e67c      	b.n	34e5c <__aeabi_dsub+0x10c>
   35162:	2500      	movs	r5, #0
   35164:	e780      	b.n	35068 <__aeabi_dsub+0x318>
   35166:	2100      	movs	r1, #0
   35168:	e78e      	b.n	35088 <__aeabi_dsub+0x338>
   3516a:	0023      	movs	r3, r4
   3516c:	4650      	mov	r0, sl
   3516e:	4303      	orrs	r3, r0
   35170:	2e00      	cmp	r6, #0
   35172:	d000      	beq.n	35176 <__aeabi_dsub+0x426>
   35174:	e0a8      	b.n	352c8 <__aeabi_dsub+0x578>
   35176:	2b00      	cmp	r3, #0
   35178:	d100      	bne.n	3517c <__aeabi_dsub+0x42c>
   3517a:	e0de      	b.n	3533a <__aeabi_dsub+0x5ea>
   3517c:	000b      	movs	r3, r1
   3517e:	4313      	orrs	r3, r2
   35180:	d100      	bne.n	35184 <__aeabi_dsub+0x434>
   35182:	e66b      	b.n	34e5c <__aeabi_dsub+0x10c>
   35184:	4452      	add	r2, sl
   35186:	4552      	cmp	r2, sl
   35188:	4180      	sbcs	r0, r0
   3518a:	1864      	adds	r4, r4, r1
   3518c:	4240      	negs	r0, r0
   3518e:	1824      	adds	r4, r4, r0
   35190:	0017      	movs	r7, r2
   35192:	0223      	lsls	r3, r4, #8
   35194:	d400      	bmi.n	35198 <__aeabi_dsub+0x448>
   35196:	e6fd      	b.n	34f94 <__aeabi_dsub+0x244>
   35198:	4b77      	ldr	r3, [pc, #476]	; (35378 <__aeabi_dsub+0x628>)
   3519a:	4666      	mov	r6, ip
   3519c:	401c      	ands	r4, r3
   3519e:	e65d      	b.n	34e5c <__aeabi_dsub+0x10c>
   351a0:	0025      	movs	r5, r4
   351a2:	4650      	mov	r0, sl
   351a4:	4305      	orrs	r5, r0
   351a6:	2e00      	cmp	r6, #0
   351a8:	d1cf      	bne.n	3514a <__aeabi_dsub+0x3fa>
   351aa:	2d00      	cmp	r5, #0
   351ac:	d14f      	bne.n	3524e <__aeabi_dsub+0x4fe>
   351ae:	000c      	movs	r4, r1
   351b0:	4314      	orrs	r4, r2
   351b2:	d100      	bne.n	351b6 <__aeabi_dsub+0x466>
   351b4:	e0a0      	b.n	352f8 <__aeabi_dsub+0x5a8>
   351b6:	000c      	movs	r4, r1
   351b8:	0017      	movs	r7, r2
   351ba:	4698      	mov	r8, r3
   351bc:	e64e      	b.n	34e5c <__aeabi_dsub+0x10c>
   351be:	4666      	mov	r6, ip
   351c0:	2400      	movs	r4, #0
   351c2:	2700      	movs	r7, #0
   351c4:	e685      	b.n	34ed2 <__aeabi_dsub+0x182>
   351c6:	001f      	movs	r7, r3
   351c8:	0008      	movs	r0, r1
   351ca:	3f20      	subs	r7, #32
   351cc:	40f8      	lsrs	r0, r7
   351ce:	0007      	movs	r7, r0
   351d0:	2b20      	cmp	r3, #32
   351d2:	d100      	bne.n	351d6 <__aeabi_dsub+0x486>
   351d4:	e08e      	b.n	352f4 <__aeabi_dsub+0x5a4>
   351d6:	2040      	movs	r0, #64	; 0x40
   351d8:	1ac3      	subs	r3, r0, r3
   351da:	4099      	lsls	r1, r3
   351dc:	430a      	orrs	r2, r1
   351de:	1e51      	subs	r1, r2, #1
   351e0:	418a      	sbcs	r2, r1
   351e2:	2100      	movs	r1, #0
   351e4:	4317      	orrs	r7, r2
   351e6:	e692      	b.n	34f0e <__aeabi_dsub+0x1be>
   351e8:	2e00      	cmp	r6, #0
   351ea:	d114      	bne.n	35216 <__aeabi_dsub+0x4c6>
   351ec:	0026      	movs	r6, r4
   351ee:	4650      	mov	r0, sl
   351f0:	4306      	orrs	r6, r0
   351f2:	d062      	beq.n	352ba <__aeabi_dsub+0x56a>
   351f4:	43db      	mvns	r3, r3
   351f6:	2b00      	cmp	r3, #0
   351f8:	d15c      	bne.n	352b4 <__aeabi_dsub+0x564>
   351fa:	1887      	adds	r7, r0, r2
   351fc:	4297      	cmp	r7, r2
   351fe:	4192      	sbcs	r2, r2
   35200:	1864      	adds	r4, r4, r1
   35202:	4252      	negs	r2, r2
   35204:	18a4      	adds	r4, r4, r2
   35206:	4666      	mov	r6, ip
   35208:	e687      	b.n	34f1a <__aeabi_dsub+0x1ca>
   3520a:	4650      	mov	r0, sl
   3520c:	4320      	orrs	r0, r4
   3520e:	1e44      	subs	r4, r0, #1
   35210:	41a0      	sbcs	r0, r4
   35212:	2400      	movs	r4, #0
   35214:	e760      	b.n	350d8 <__aeabi_dsub+0x388>
   35216:	4e57      	ldr	r6, [pc, #348]	; (35374 <__aeabi_dsub+0x624>)
   35218:	45b4      	cmp	ip, r6
   3521a:	d04e      	beq.n	352ba <__aeabi_dsub+0x56a>
   3521c:	2680      	movs	r6, #128	; 0x80
   3521e:	0436      	lsls	r6, r6, #16
   35220:	425b      	negs	r3, r3
   35222:	4334      	orrs	r4, r6
   35224:	2b38      	cmp	r3, #56	; 0x38
   35226:	dd00      	ble.n	3522a <__aeabi_dsub+0x4da>
   35228:	e07f      	b.n	3532a <__aeabi_dsub+0x5da>
   3522a:	2b1f      	cmp	r3, #31
   3522c:	dd00      	ble.n	35230 <__aeabi_dsub+0x4e0>
   3522e:	e08b      	b.n	35348 <__aeabi_dsub+0x5f8>
   35230:	2620      	movs	r6, #32
   35232:	0027      	movs	r7, r4
   35234:	4650      	mov	r0, sl
   35236:	1af6      	subs	r6, r6, r3
   35238:	40b7      	lsls	r7, r6
   3523a:	40d8      	lsrs	r0, r3
   3523c:	4307      	orrs	r7, r0
   3523e:	4650      	mov	r0, sl
   35240:	40b0      	lsls	r0, r6
   35242:	1e46      	subs	r6, r0, #1
   35244:	41b0      	sbcs	r0, r6
   35246:	4307      	orrs	r7, r0
   35248:	40dc      	lsrs	r4, r3
   3524a:	18bf      	adds	r7, r7, r2
   3524c:	e7d6      	b.n	351fc <__aeabi_dsub+0x4ac>
   3524e:	000d      	movs	r5, r1
   35250:	4315      	orrs	r5, r2
   35252:	d100      	bne.n	35256 <__aeabi_dsub+0x506>
   35254:	e602      	b.n	34e5c <__aeabi_dsub+0x10c>
   35256:	4650      	mov	r0, sl
   35258:	1a80      	subs	r0, r0, r2
   3525a:	4582      	cmp	sl, r0
   3525c:	41bf      	sbcs	r7, r7
   3525e:	1a65      	subs	r5, r4, r1
   35260:	427f      	negs	r7, r7
   35262:	1bed      	subs	r5, r5, r7
   35264:	4684      	mov	ip, r0
   35266:	0228      	lsls	r0, r5, #8
   35268:	d400      	bmi.n	3526c <__aeabi_dsub+0x51c>
   3526a:	e68d      	b.n	34f88 <__aeabi_dsub+0x238>
   3526c:	4650      	mov	r0, sl
   3526e:	1a17      	subs	r7, r2, r0
   35270:	42ba      	cmp	r2, r7
   35272:	4192      	sbcs	r2, r2
   35274:	1b0c      	subs	r4, r1, r4
   35276:	4252      	negs	r2, r2
   35278:	1aa4      	subs	r4, r4, r2
   3527a:	4698      	mov	r8, r3
   3527c:	e5ee      	b.n	34e5c <__aeabi_dsub+0x10c>
   3527e:	000d      	movs	r5, r1
   35280:	4315      	orrs	r5, r2
   35282:	d100      	bne.n	35286 <__aeabi_dsub+0x536>
   35284:	e76b      	b.n	3515e <__aeabi_dsub+0x40e>
   35286:	4650      	mov	r0, sl
   35288:	0767      	lsls	r7, r4, #29
   3528a:	08c0      	lsrs	r0, r0, #3
   3528c:	4307      	orrs	r7, r0
   3528e:	2080      	movs	r0, #128	; 0x80
   35290:	08e4      	lsrs	r4, r4, #3
   35292:	0300      	lsls	r0, r0, #12
   35294:	4204      	tst	r4, r0
   35296:	d007      	beq.n	352a8 <__aeabi_dsub+0x558>
   35298:	08cd      	lsrs	r5, r1, #3
   3529a:	4205      	tst	r5, r0
   3529c:	d104      	bne.n	352a8 <__aeabi_dsub+0x558>
   3529e:	002c      	movs	r4, r5
   352a0:	4698      	mov	r8, r3
   352a2:	08d7      	lsrs	r7, r2, #3
   352a4:	0749      	lsls	r1, r1, #29
   352a6:	430f      	orrs	r7, r1
   352a8:	0f7b      	lsrs	r3, r7, #29
   352aa:	00e4      	lsls	r4, r4, #3
   352ac:	431c      	orrs	r4, r3
   352ae:	00ff      	lsls	r7, r7, #3
   352b0:	4e30      	ldr	r6, [pc, #192]	; (35374 <__aeabi_dsub+0x624>)
   352b2:	e5d3      	b.n	34e5c <__aeabi_dsub+0x10c>
   352b4:	4e2f      	ldr	r6, [pc, #188]	; (35374 <__aeabi_dsub+0x624>)
   352b6:	45b4      	cmp	ip, r6
   352b8:	d1b4      	bne.n	35224 <__aeabi_dsub+0x4d4>
   352ba:	000c      	movs	r4, r1
   352bc:	0017      	movs	r7, r2
   352be:	4666      	mov	r6, ip
   352c0:	e5cc      	b.n	34e5c <__aeabi_dsub+0x10c>
   352c2:	2700      	movs	r7, #0
   352c4:	2400      	movs	r4, #0
   352c6:	e5e8      	b.n	34e9a <__aeabi_dsub+0x14a>
   352c8:	2b00      	cmp	r3, #0
   352ca:	d039      	beq.n	35340 <__aeabi_dsub+0x5f0>
   352cc:	000b      	movs	r3, r1
   352ce:	4313      	orrs	r3, r2
   352d0:	d100      	bne.n	352d4 <__aeabi_dsub+0x584>
   352d2:	e744      	b.n	3515e <__aeabi_dsub+0x40e>
   352d4:	08c0      	lsrs	r0, r0, #3
   352d6:	0767      	lsls	r7, r4, #29
   352d8:	4307      	orrs	r7, r0
   352da:	2080      	movs	r0, #128	; 0x80
   352dc:	08e4      	lsrs	r4, r4, #3
   352de:	0300      	lsls	r0, r0, #12
   352e0:	4204      	tst	r4, r0
   352e2:	d0e1      	beq.n	352a8 <__aeabi_dsub+0x558>
   352e4:	08cb      	lsrs	r3, r1, #3
   352e6:	4203      	tst	r3, r0
   352e8:	d1de      	bne.n	352a8 <__aeabi_dsub+0x558>
   352ea:	08d7      	lsrs	r7, r2, #3
   352ec:	0749      	lsls	r1, r1, #29
   352ee:	430f      	orrs	r7, r1
   352f0:	001c      	movs	r4, r3
   352f2:	e7d9      	b.n	352a8 <__aeabi_dsub+0x558>
   352f4:	2100      	movs	r1, #0
   352f6:	e771      	b.n	351dc <__aeabi_dsub+0x48c>
   352f8:	2500      	movs	r5, #0
   352fa:	2700      	movs	r7, #0
   352fc:	e5e9      	b.n	34ed2 <__aeabi_dsub+0x182>
   352fe:	002e      	movs	r6, r5
   35300:	0027      	movs	r7, r4
   35302:	3e20      	subs	r6, #32
   35304:	40f7      	lsrs	r7, r6
   35306:	2d20      	cmp	r5, #32
   35308:	d02f      	beq.n	3536a <__aeabi_dsub+0x61a>
   3530a:	2640      	movs	r6, #64	; 0x40
   3530c:	1b75      	subs	r5, r6, r5
   3530e:	40ac      	lsls	r4, r5
   35310:	4650      	mov	r0, sl
   35312:	4320      	orrs	r0, r4
   35314:	1e44      	subs	r4, r0, #1
   35316:	41a0      	sbcs	r0, r4
   35318:	2400      	movs	r4, #0
   3531a:	4338      	orrs	r0, r7
   3531c:	e6dc      	b.n	350d8 <__aeabi_dsub+0x388>
   3531e:	2480      	movs	r4, #128	; 0x80
   35320:	2500      	movs	r5, #0
   35322:	0324      	lsls	r4, r4, #12
   35324:	4e13      	ldr	r6, [pc, #76]	; (35374 <__aeabi_dsub+0x624>)
   35326:	2700      	movs	r7, #0
   35328:	e5d3      	b.n	34ed2 <__aeabi_dsub+0x182>
   3532a:	4650      	mov	r0, sl
   3532c:	4320      	orrs	r0, r4
   3532e:	0007      	movs	r7, r0
   35330:	1e78      	subs	r0, r7, #1
   35332:	4187      	sbcs	r7, r0
   35334:	2400      	movs	r4, #0
   35336:	18bf      	adds	r7, r7, r2
   35338:	e760      	b.n	351fc <__aeabi_dsub+0x4ac>
   3533a:	000c      	movs	r4, r1
   3533c:	0017      	movs	r7, r2
   3533e:	e58d      	b.n	34e5c <__aeabi_dsub+0x10c>
   35340:	000c      	movs	r4, r1
   35342:	0017      	movs	r7, r2
   35344:	4e0b      	ldr	r6, [pc, #44]	; (35374 <__aeabi_dsub+0x624>)
   35346:	e589      	b.n	34e5c <__aeabi_dsub+0x10c>
   35348:	001e      	movs	r6, r3
   3534a:	0027      	movs	r7, r4
   3534c:	3e20      	subs	r6, #32
   3534e:	40f7      	lsrs	r7, r6
   35350:	2b20      	cmp	r3, #32
   35352:	d00c      	beq.n	3536e <__aeabi_dsub+0x61e>
   35354:	2640      	movs	r6, #64	; 0x40
   35356:	1af3      	subs	r3, r6, r3
   35358:	409c      	lsls	r4, r3
   3535a:	4650      	mov	r0, sl
   3535c:	4320      	orrs	r0, r4
   3535e:	1e44      	subs	r4, r0, #1
   35360:	41a0      	sbcs	r0, r4
   35362:	4307      	orrs	r7, r0
   35364:	2400      	movs	r4, #0
   35366:	18bf      	adds	r7, r7, r2
   35368:	e748      	b.n	351fc <__aeabi_dsub+0x4ac>
   3536a:	2400      	movs	r4, #0
   3536c:	e7d0      	b.n	35310 <__aeabi_dsub+0x5c0>
   3536e:	2400      	movs	r4, #0
   35370:	e7f3      	b.n	3535a <__aeabi_dsub+0x60a>
   35372:	46c0      	nop			; (mov r8, r8)
   35374:	000007ff 	.word	0x000007ff
   35378:	ff7fffff 	.word	0xff7fffff

0003537c <__aeabi_d2iz>:
   3537c:	b530      	push	{r4, r5, lr}
   3537e:	4d13      	ldr	r5, [pc, #76]	; (353cc <__aeabi_d2iz+0x50>)
   35380:	030a      	lsls	r2, r1, #12
   35382:	004b      	lsls	r3, r1, #1
   35384:	0b12      	lsrs	r2, r2, #12
   35386:	0d5b      	lsrs	r3, r3, #21
   35388:	0fc9      	lsrs	r1, r1, #31
   3538a:	2400      	movs	r4, #0
   3538c:	42ab      	cmp	r3, r5
   3538e:	dd10      	ble.n	353b2 <__aeabi_d2iz+0x36>
   35390:	4c0f      	ldr	r4, [pc, #60]	; (353d0 <__aeabi_d2iz+0x54>)
   35392:	42a3      	cmp	r3, r4
   35394:	dc0f      	bgt.n	353b6 <__aeabi_d2iz+0x3a>
   35396:	2480      	movs	r4, #128	; 0x80
   35398:	4d0e      	ldr	r5, [pc, #56]	; (353d4 <__aeabi_d2iz+0x58>)
   3539a:	0364      	lsls	r4, r4, #13
   3539c:	4322      	orrs	r2, r4
   3539e:	1aed      	subs	r5, r5, r3
   353a0:	2d1f      	cmp	r5, #31
   353a2:	dd0b      	ble.n	353bc <__aeabi_d2iz+0x40>
   353a4:	480c      	ldr	r0, [pc, #48]	; (353d8 <__aeabi_d2iz+0x5c>)
   353a6:	1ac3      	subs	r3, r0, r3
   353a8:	40da      	lsrs	r2, r3
   353aa:	4254      	negs	r4, r2
   353ac:	2900      	cmp	r1, #0
   353ae:	d100      	bne.n	353b2 <__aeabi_d2iz+0x36>
   353b0:	0014      	movs	r4, r2
   353b2:	0020      	movs	r0, r4
   353b4:	bd30      	pop	{r4, r5, pc}
   353b6:	4b09      	ldr	r3, [pc, #36]	; (353dc <__aeabi_d2iz+0x60>)
   353b8:	18cc      	adds	r4, r1, r3
   353ba:	e7fa      	b.n	353b2 <__aeabi_d2iz+0x36>
   353bc:	4c08      	ldr	r4, [pc, #32]	; (353e0 <__aeabi_d2iz+0x64>)
   353be:	40e8      	lsrs	r0, r5
   353c0:	46a4      	mov	ip, r4
   353c2:	4463      	add	r3, ip
   353c4:	409a      	lsls	r2, r3
   353c6:	4302      	orrs	r2, r0
   353c8:	e7ef      	b.n	353aa <__aeabi_d2iz+0x2e>
   353ca:	46c0      	nop			; (mov r8, r8)
   353cc:	000003fe 	.word	0x000003fe
   353d0:	0000041d 	.word	0x0000041d
   353d4:	00000433 	.word	0x00000433
   353d8:	00000413 	.word	0x00000413
   353dc:	7fffffff 	.word	0x7fffffff
   353e0:	fffffbed 	.word	0xfffffbed

000353e4 <__aeabi_ui2d>:
   353e4:	b510      	push	{r4, lr}
   353e6:	1e04      	subs	r4, r0, #0
   353e8:	d028      	beq.n	3543c <__aeabi_ui2d+0x58>
   353ea:	f000 f833 	bl	35454 <__clzsi2>
   353ee:	4b15      	ldr	r3, [pc, #84]	; (35444 <__aeabi_ui2d+0x60>)
   353f0:	4a15      	ldr	r2, [pc, #84]	; (35448 <__aeabi_ui2d+0x64>)
   353f2:	1a1b      	subs	r3, r3, r0
   353f4:	1ad2      	subs	r2, r2, r3
   353f6:	2a1f      	cmp	r2, #31
   353f8:	dd15      	ble.n	35426 <__aeabi_ui2d+0x42>
   353fa:	4a14      	ldr	r2, [pc, #80]	; (3544c <__aeabi_ui2d+0x68>)
   353fc:	1ad2      	subs	r2, r2, r3
   353fe:	4094      	lsls	r4, r2
   35400:	2200      	movs	r2, #0
   35402:	0324      	lsls	r4, r4, #12
   35404:	055b      	lsls	r3, r3, #21
   35406:	0b24      	lsrs	r4, r4, #12
   35408:	0d5b      	lsrs	r3, r3, #21
   3540a:	2100      	movs	r1, #0
   3540c:	0010      	movs	r0, r2
   3540e:	0324      	lsls	r4, r4, #12
   35410:	0d0a      	lsrs	r2, r1, #20
   35412:	0b24      	lsrs	r4, r4, #12
   35414:	0512      	lsls	r2, r2, #20
   35416:	4322      	orrs	r2, r4
   35418:	4c0d      	ldr	r4, [pc, #52]	; (35450 <__aeabi_ui2d+0x6c>)
   3541a:	051b      	lsls	r3, r3, #20
   3541c:	4022      	ands	r2, r4
   3541e:	4313      	orrs	r3, r2
   35420:	005b      	lsls	r3, r3, #1
   35422:	0859      	lsrs	r1, r3, #1
   35424:	bd10      	pop	{r4, pc}
   35426:	0021      	movs	r1, r4
   35428:	4091      	lsls	r1, r2
   3542a:	000a      	movs	r2, r1
   3542c:	210b      	movs	r1, #11
   3542e:	1a08      	subs	r0, r1, r0
   35430:	40c4      	lsrs	r4, r0
   35432:	055b      	lsls	r3, r3, #21
   35434:	0324      	lsls	r4, r4, #12
   35436:	0b24      	lsrs	r4, r4, #12
   35438:	0d5b      	lsrs	r3, r3, #21
   3543a:	e7e6      	b.n	3540a <__aeabi_ui2d+0x26>
   3543c:	2300      	movs	r3, #0
   3543e:	2400      	movs	r4, #0
   35440:	2200      	movs	r2, #0
   35442:	e7e2      	b.n	3540a <__aeabi_ui2d+0x26>
   35444:	0000041e 	.word	0x0000041e
   35448:	00000433 	.word	0x00000433
   3544c:	00000413 	.word	0x00000413
   35450:	800fffff 	.word	0x800fffff

00035454 <__clzsi2>:
   35454:	211c      	movs	r1, #28
   35456:	2301      	movs	r3, #1
   35458:	041b      	lsls	r3, r3, #16
   3545a:	4298      	cmp	r0, r3
   3545c:	d301      	bcc.n	35462 <__clzsi2+0xe>
   3545e:	0c00      	lsrs	r0, r0, #16
   35460:	3910      	subs	r1, #16
   35462:	0a1b      	lsrs	r3, r3, #8
   35464:	4298      	cmp	r0, r3
   35466:	d301      	bcc.n	3546c <__clzsi2+0x18>
   35468:	0a00      	lsrs	r0, r0, #8
   3546a:	3908      	subs	r1, #8
   3546c:	091b      	lsrs	r3, r3, #4
   3546e:	4298      	cmp	r0, r3
   35470:	d301      	bcc.n	35476 <__clzsi2+0x22>
   35472:	0900      	lsrs	r0, r0, #4
   35474:	3904      	subs	r1, #4
   35476:	a202      	add	r2, pc, #8	; (adr r2, 35480 <__clzsi2+0x2c>)
   35478:	5c10      	ldrb	r0, [r2, r0]
   3547a:	1840      	adds	r0, r0, r1
   3547c:	4770      	bx	lr
   3547e:	46c0      	nop			; (mov r8, r8)
   35480:	02020304 	.word	0x02020304
   35484:	01010101 	.word	0x01010101
	...

00035490 <atoi>:
   35490:	b510      	push	{r4, lr}
   35492:	220a      	movs	r2, #10
   35494:	2100      	movs	r1, #0
   35496:	f000 fb0d 	bl	35ab4 <strtol>
   3549a:	bd10      	pop	{r4, pc}

0003549c <__libc_init_array>:
   3549c:	b570      	push	{r4, r5, r6, lr}
   3549e:	2600      	movs	r6, #0
   354a0:	4d0c      	ldr	r5, [pc, #48]	; (354d4 <__libc_init_array+0x38>)
   354a2:	4c0d      	ldr	r4, [pc, #52]	; (354d8 <__libc_init_array+0x3c>)
   354a4:	1b64      	subs	r4, r4, r5
   354a6:	10a4      	asrs	r4, r4, #2
   354a8:	42a6      	cmp	r6, r4
   354aa:	d109      	bne.n	354c0 <__libc_init_array+0x24>
   354ac:	2600      	movs	r6, #0
   354ae:	f005 fd07 	bl	3aec0 <_init>
   354b2:	4d0a      	ldr	r5, [pc, #40]	; (354dc <__libc_init_array+0x40>)
   354b4:	4c0a      	ldr	r4, [pc, #40]	; (354e0 <__libc_init_array+0x44>)
   354b6:	1b64      	subs	r4, r4, r5
   354b8:	10a4      	asrs	r4, r4, #2
   354ba:	42a6      	cmp	r6, r4
   354bc:	d105      	bne.n	354ca <__libc_init_array+0x2e>
   354be:	bd70      	pop	{r4, r5, r6, pc}
   354c0:	00b3      	lsls	r3, r6, #2
   354c2:	58eb      	ldr	r3, [r5, r3]
   354c4:	4798      	blx	r3
   354c6:	3601      	adds	r6, #1
   354c8:	e7ee      	b.n	354a8 <__libc_init_array+0xc>
   354ca:	00b3      	lsls	r3, r6, #2
   354cc:	58eb      	ldr	r3, [r5, r3]
   354ce:	4798      	blx	r3
   354d0:	3601      	adds	r6, #1
   354d2:	e7f2      	b.n	354ba <__libc_init_array+0x1e>
   354d4:	0003aecc 	.word	0x0003aecc
   354d8:	0003aecc 	.word	0x0003aecc
   354dc:	0003aecc 	.word	0x0003aecc
   354e0:	0003aed0 	.word	0x0003aed0

000354e4 <malloc>:
   354e4:	b510      	push	{r4, lr}
   354e6:	4b03      	ldr	r3, [pc, #12]	; (354f4 <malloc+0x10>)
   354e8:	0001      	movs	r1, r0
   354ea:	6818      	ldr	r0, [r3, #0]
   354ec:	f000 f87c 	bl	355e8 <_malloc_r>
   354f0:	bd10      	pop	{r4, pc}
   354f2:	46c0      	nop			; (mov r8, r8)
   354f4:	20000124 	.word	0x20000124

000354f8 <free>:
   354f8:	b510      	push	{r4, lr}
   354fa:	4b03      	ldr	r3, [pc, #12]	; (35508 <free+0x10>)
   354fc:	0001      	movs	r1, r0
   354fe:	6818      	ldr	r0, [r3, #0]
   35500:	f000 f828 	bl	35554 <_free_r>
   35504:	bd10      	pop	{r4, pc}
   35506:	46c0      	nop			; (mov r8, r8)
   35508:	20000124 	.word	0x20000124

0003550c <memcpy>:
   3550c:	2300      	movs	r3, #0
   3550e:	b510      	push	{r4, lr}
   35510:	429a      	cmp	r2, r3
   35512:	d100      	bne.n	35516 <memcpy+0xa>
   35514:	bd10      	pop	{r4, pc}
   35516:	5ccc      	ldrb	r4, [r1, r3]
   35518:	54c4      	strb	r4, [r0, r3]
   3551a:	3301      	adds	r3, #1
   3551c:	e7f8      	b.n	35510 <memcpy+0x4>

0003551e <memmove>:
   3551e:	b510      	push	{r4, lr}
   35520:	4288      	cmp	r0, r1
   35522:	d902      	bls.n	3552a <memmove+0xc>
   35524:	188b      	adds	r3, r1, r2
   35526:	4298      	cmp	r0, r3
   35528:	d308      	bcc.n	3553c <memmove+0x1e>
   3552a:	2300      	movs	r3, #0
   3552c:	429a      	cmp	r2, r3
   3552e:	d007      	beq.n	35540 <memmove+0x22>
   35530:	5ccc      	ldrb	r4, [r1, r3]
   35532:	54c4      	strb	r4, [r0, r3]
   35534:	3301      	adds	r3, #1
   35536:	e7f9      	b.n	3552c <memmove+0xe>
   35538:	5c8b      	ldrb	r3, [r1, r2]
   3553a:	5483      	strb	r3, [r0, r2]
   3553c:	3a01      	subs	r2, #1
   3553e:	d2fb      	bcs.n	35538 <memmove+0x1a>
   35540:	bd10      	pop	{r4, pc}

00035542 <memset>:
   35542:	0003      	movs	r3, r0
   35544:	1882      	adds	r2, r0, r2
   35546:	4293      	cmp	r3, r2
   35548:	d100      	bne.n	3554c <memset+0xa>
   3554a:	4770      	bx	lr
   3554c:	7019      	strb	r1, [r3, #0]
   3554e:	3301      	adds	r3, #1
   35550:	e7f9      	b.n	35546 <memset+0x4>
	...

00035554 <_free_r>:
   35554:	b570      	push	{r4, r5, r6, lr}
   35556:	0005      	movs	r5, r0
   35558:	2900      	cmp	r1, #0
   3555a:	d010      	beq.n	3557e <_free_r+0x2a>
   3555c:	1f0c      	subs	r4, r1, #4
   3555e:	6823      	ldr	r3, [r4, #0]
   35560:	2b00      	cmp	r3, #0
   35562:	da00      	bge.n	35566 <_free_r+0x12>
   35564:	18e4      	adds	r4, r4, r3
   35566:	0028      	movs	r0, r5
   35568:	f000 fdd8 	bl	3611c <__malloc_lock>
   3556c:	4a1d      	ldr	r2, [pc, #116]	; (355e4 <_free_r+0x90>)
   3556e:	6813      	ldr	r3, [r2, #0]
   35570:	2b00      	cmp	r3, #0
   35572:	d105      	bne.n	35580 <_free_r+0x2c>
   35574:	6063      	str	r3, [r4, #4]
   35576:	6014      	str	r4, [r2, #0]
   35578:	0028      	movs	r0, r5
   3557a:	f000 fdd0 	bl	3611e <__malloc_unlock>
   3557e:	bd70      	pop	{r4, r5, r6, pc}
   35580:	42a3      	cmp	r3, r4
   35582:	d909      	bls.n	35598 <_free_r+0x44>
   35584:	6821      	ldr	r1, [r4, #0]
   35586:	1860      	adds	r0, r4, r1
   35588:	4283      	cmp	r3, r0
   3558a:	d1f3      	bne.n	35574 <_free_r+0x20>
   3558c:	6818      	ldr	r0, [r3, #0]
   3558e:	685b      	ldr	r3, [r3, #4]
   35590:	1841      	adds	r1, r0, r1
   35592:	6021      	str	r1, [r4, #0]
   35594:	e7ee      	b.n	35574 <_free_r+0x20>
   35596:	0013      	movs	r3, r2
   35598:	685a      	ldr	r2, [r3, #4]
   3559a:	2a00      	cmp	r2, #0
   3559c:	d001      	beq.n	355a2 <_free_r+0x4e>
   3559e:	42a2      	cmp	r2, r4
   355a0:	d9f9      	bls.n	35596 <_free_r+0x42>
   355a2:	6819      	ldr	r1, [r3, #0]
   355a4:	1858      	adds	r0, r3, r1
   355a6:	42a0      	cmp	r0, r4
   355a8:	d10b      	bne.n	355c2 <_free_r+0x6e>
   355aa:	6820      	ldr	r0, [r4, #0]
   355ac:	1809      	adds	r1, r1, r0
   355ae:	1858      	adds	r0, r3, r1
   355b0:	6019      	str	r1, [r3, #0]
   355b2:	4282      	cmp	r2, r0
   355b4:	d1e0      	bne.n	35578 <_free_r+0x24>
   355b6:	6810      	ldr	r0, [r2, #0]
   355b8:	6852      	ldr	r2, [r2, #4]
   355ba:	1841      	adds	r1, r0, r1
   355bc:	6019      	str	r1, [r3, #0]
   355be:	605a      	str	r2, [r3, #4]
   355c0:	e7da      	b.n	35578 <_free_r+0x24>
   355c2:	42a0      	cmp	r0, r4
   355c4:	d902      	bls.n	355cc <_free_r+0x78>
   355c6:	230c      	movs	r3, #12
   355c8:	602b      	str	r3, [r5, #0]
   355ca:	e7d5      	b.n	35578 <_free_r+0x24>
   355cc:	6821      	ldr	r1, [r4, #0]
   355ce:	1860      	adds	r0, r4, r1
   355d0:	4282      	cmp	r2, r0
   355d2:	d103      	bne.n	355dc <_free_r+0x88>
   355d4:	6810      	ldr	r0, [r2, #0]
   355d6:	6852      	ldr	r2, [r2, #4]
   355d8:	1841      	adds	r1, r0, r1
   355da:	6021      	str	r1, [r4, #0]
   355dc:	6062      	str	r2, [r4, #4]
   355de:	605c      	str	r4, [r3, #4]
   355e0:	e7ca      	b.n	35578 <_free_r+0x24>
   355e2:	46c0      	nop			; (mov r8, r8)
   355e4:	20004360 	.word	0x20004360

000355e8 <_malloc_r>:
   355e8:	2303      	movs	r3, #3
   355ea:	b570      	push	{r4, r5, r6, lr}
   355ec:	1ccd      	adds	r5, r1, #3
   355ee:	439d      	bics	r5, r3
   355f0:	3508      	adds	r5, #8
   355f2:	0006      	movs	r6, r0
   355f4:	2d0c      	cmp	r5, #12
   355f6:	d21e      	bcs.n	35636 <_malloc_r+0x4e>
   355f8:	250c      	movs	r5, #12
   355fa:	42a9      	cmp	r1, r5
   355fc:	d81d      	bhi.n	3563a <_malloc_r+0x52>
   355fe:	0030      	movs	r0, r6
   35600:	f000 fd8c 	bl	3611c <__malloc_lock>
   35604:	4a25      	ldr	r2, [pc, #148]	; (3569c <_malloc_r+0xb4>)
   35606:	6814      	ldr	r4, [r2, #0]
   35608:	0021      	movs	r1, r4
   3560a:	2900      	cmp	r1, #0
   3560c:	d119      	bne.n	35642 <_malloc_r+0x5a>
   3560e:	4c24      	ldr	r4, [pc, #144]	; (356a0 <_malloc_r+0xb8>)
   35610:	6823      	ldr	r3, [r4, #0]
   35612:	2b00      	cmp	r3, #0
   35614:	d103      	bne.n	3561e <_malloc_r+0x36>
   35616:	0030      	movs	r0, r6
   35618:	f000 f8ae 	bl	35778 <_sbrk_r>
   3561c:	6020      	str	r0, [r4, #0]
   3561e:	0029      	movs	r1, r5
   35620:	0030      	movs	r0, r6
   35622:	f000 f8a9 	bl	35778 <_sbrk_r>
   35626:	1c43      	adds	r3, r0, #1
   35628:	d12c      	bne.n	35684 <_malloc_r+0x9c>
   3562a:	230c      	movs	r3, #12
   3562c:	0030      	movs	r0, r6
   3562e:	6033      	str	r3, [r6, #0]
   35630:	f000 fd75 	bl	3611e <__malloc_unlock>
   35634:	e003      	b.n	3563e <_malloc_r+0x56>
   35636:	2d00      	cmp	r5, #0
   35638:	dadf      	bge.n	355fa <_malloc_r+0x12>
   3563a:	230c      	movs	r3, #12
   3563c:	6033      	str	r3, [r6, #0]
   3563e:	2000      	movs	r0, #0
   35640:	bd70      	pop	{r4, r5, r6, pc}
   35642:	680b      	ldr	r3, [r1, #0]
   35644:	1b5b      	subs	r3, r3, r5
   35646:	d41a      	bmi.n	3567e <_malloc_r+0x96>
   35648:	2b0b      	cmp	r3, #11
   3564a:	d903      	bls.n	35654 <_malloc_r+0x6c>
   3564c:	600b      	str	r3, [r1, #0]
   3564e:	18cc      	adds	r4, r1, r3
   35650:	6025      	str	r5, [r4, #0]
   35652:	e003      	b.n	3565c <_malloc_r+0x74>
   35654:	428c      	cmp	r4, r1
   35656:	d10e      	bne.n	35676 <_malloc_r+0x8e>
   35658:	6863      	ldr	r3, [r4, #4]
   3565a:	6013      	str	r3, [r2, #0]
   3565c:	0030      	movs	r0, r6
   3565e:	f000 fd5e 	bl	3611e <__malloc_unlock>
   35662:	0020      	movs	r0, r4
   35664:	2207      	movs	r2, #7
   35666:	300b      	adds	r0, #11
   35668:	1d23      	adds	r3, r4, #4
   3566a:	4390      	bics	r0, r2
   3566c:	1ac3      	subs	r3, r0, r3
   3566e:	d0e7      	beq.n	35640 <_malloc_r+0x58>
   35670:	425a      	negs	r2, r3
   35672:	50e2      	str	r2, [r4, r3]
   35674:	e7e4      	b.n	35640 <_malloc_r+0x58>
   35676:	684b      	ldr	r3, [r1, #4]
   35678:	6063      	str	r3, [r4, #4]
   3567a:	000c      	movs	r4, r1
   3567c:	e7ee      	b.n	3565c <_malloc_r+0x74>
   3567e:	000c      	movs	r4, r1
   35680:	6849      	ldr	r1, [r1, #4]
   35682:	e7c2      	b.n	3560a <_malloc_r+0x22>
   35684:	2303      	movs	r3, #3
   35686:	1cc4      	adds	r4, r0, #3
   35688:	439c      	bics	r4, r3
   3568a:	42a0      	cmp	r0, r4
   3568c:	d0e0      	beq.n	35650 <_malloc_r+0x68>
   3568e:	1a21      	subs	r1, r4, r0
   35690:	0030      	movs	r0, r6
   35692:	f000 f871 	bl	35778 <_sbrk_r>
   35696:	1c43      	adds	r3, r0, #1
   35698:	d1da      	bne.n	35650 <_malloc_r+0x68>
   3569a:	e7c6      	b.n	3562a <_malloc_r+0x42>
   3569c:	20004360 	.word	0x20004360
   356a0:	20004364 	.word	0x20004364

000356a4 <_puts_r>:
   356a4:	b570      	push	{r4, r5, r6, lr}
   356a6:	0005      	movs	r5, r0
   356a8:	000e      	movs	r6, r1
   356aa:	2800      	cmp	r0, #0
   356ac:	d004      	beq.n	356b8 <_puts_r+0x14>
   356ae:	6983      	ldr	r3, [r0, #24]
   356b0:	2b00      	cmp	r3, #0
   356b2:	d101      	bne.n	356b8 <_puts_r+0x14>
   356b4:	f000 fc0e 	bl	35ed4 <__sinit>
   356b8:	69ab      	ldr	r3, [r5, #24]
   356ba:	68ac      	ldr	r4, [r5, #8]
   356bc:	2b00      	cmp	r3, #0
   356be:	d102      	bne.n	356c6 <_puts_r+0x22>
   356c0:	0028      	movs	r0, r5
   356c2:	f000 fc07 	bl	35ed4 <__sinit>
   356c6:	4b24      	ldr	r3, [pc, #144]	; (35758 <_puts_r+0xb4>)
   356c8:	429c      	cmp	r4, r3
   356ca:	d10f      	bne.n	356ec <_puts_r+0x48>
   356cc:	686c      	ldr	r4, [r5, #4]
   356ce:	89a3      	ldrh	r3, [r4, #12]
   356d0:	071b      	lsls	r3, r3, #28
   356d2:	d502      	bpl.n	356da <_puts_r+0x36>
   356d4:	6923      	ldr	r3, [r4, #16]
   356d6:	2b00      	cmp	r3, #0
   356d8:	d120      	bne.n	3571c <_puts_r+0x78>
   356da:	0021      	movs	r1, r4
   356dc:	0028      	movs	r0, r5
   356de:	f000 fa8b 	bl	35bf8 <__swsetup_r>
   356e2:	2800      	cmp	r0, #0
   356e4:	d01a      	beq.n	3571c <_puts_r+0x78>
   356e6:	2001      	movs	r0, #1
   356e8:	4240      	negs	r0, r0
   356ea:	bd70      	pop	{r4, r5, r6, pc}
   356ec:	4b1b      	ldr	r3, [pc, #108]	; (3575c <_puts_r+0xb8>)
   356ee:	429c      	cmp	r4, r3
   356f0:	d101      	bne.n	356f6 <_puts_r+0x52>
   356f2:	68ac      	ldr	r4, [r5, #8]
   356f4:	e7eb      	b.n	356ce <_puts_r+0x2a>
   356f6:	4b1a      	ldr	r3, [pc, #104]	; (35760 <_puts_r+0xbc>)
   356f8:	429c      	cmp	r4, r3
   356fa:	d1e8      	bne.n	356ce <_puts_r+0x2a>
   356fc:	68ec      	ldr	r4, [r5, #12]
   356fe:	e7e6      	b.n	356ce <_puts_r+0x2a>
   35700:	3b01      	subs	r3, #1
   35702:	3601      	adds	r6, #1
   35704:	60a3      	str	r3, [r4, #8]
   35706:	2b00      	cmp	r3, #0
   35708:	da04      	bge.n	35714 <_puts_r+0x70>
   3570a:	69a2      	ldr	r2, [r4, #24]
   3570c:	4293      	cmp	r3, r2
   3570e:	db16      	blt.n	3573e <_puts_r+0x9a>
   35710:	290a      	cmp	r1, #10
   35712:	d014      	beq.n	3573e <_puts_r+0x9a>
   35714:	6823      	ldr	r3, [r4, #0]
   35716:	1c5a      	adds	r2, r3, #1
   35718:	6022      	str	r2, [r4, #0]
   3571a:	7019      	strb	r1, [r3, #0]
   3571c:	7831      	ldrb	r1, [r6, #0]
   3571e:	68a3      	ldr	r3, [r4, #8]
   35720:	2900      	cmp	r1, #0
   35722:	d1ed      	bne.n	35700 <_puts_r+0x5c>
   35724:	3b01      	subs	r3, #1
   35726:	60a3      	str	r3, [r4, #8]
   35728:	2b00      	cmp	r3, #0
   3572a:	da0f      	bge.n	3574c <_puts_r+0xa8>
   3572c:	0022      	movs	r2, r4
   3572e:	310a      	adds	r1, #10
   35730:	0028      	movs	r0, r5
   35732:	f000 fa0b 	bl	35b4c <__swbuf_r>
   35736:	1c43      	adds	r3, r0, #1
   35738:	d0d5      	beq.n	356e6 <_puts_r+0x42>
   3573a:	200a      	movs	r0, #10
   3573c:	e7d5      	b.n	356ea <_puts_r+0x46>
   3573e:	0022      	movs	r2, r4
   35740:	0028      	movs	r0, r5
   35742:	f000 fa03 	bl	35b4c <__swbuf_r>
   35746:	1c43      	adds	r3, r0, #1
   35748:	d1e8      	bne.n	3571c <_puts_r+0x78>
   3574a:	e7cc      	b.n	356e6 <_puts_r+0x42>
   3574c:	200a      	movs	r0, #10
   3574e:	6823      	ldr	r3, [r4, #0]
   35750:	1c5a      	adds	r2, r3, #1
   35752:	6022      	str	r2, [r4, #0]
   35754:	7018      	strb	r0, [r3, #0]
   35756:	e7c8      	b.n	356ea <_puts_r+0x46>
   35758:	0003ad40 	.word	0x0003ad40
   3575c:	0003ad60 	.word	0x0003ad60
   35760:	0003ad20 	.word	0x0003ad20

00035764 <puts>:
   35764:	b510      	push	{r4, lr}
   35766:	4b03      	ldr	r3, [pc, #12]	; (35774 <puts+0x10>)
   35768:	0001      	movs	r1, r0
   3576a:	6818      	ldr	r0, [r3, #0]
   3576c:	f7ff ff9a 	bl	356a4 <_puts_r>
   35770:	bd10      	pop	{r4, pc}
   35772:	46c0      	nop			; (mov r8, r8)
   35774:	20000124 	.word	0x20000124

00035778 <_sbrk_r>:
   35778:	2300      	movs	r3, #0
   3577a:	b570      	push	{r4, r5, r6, lr}
   3577c:	4c06      	ldr	r4, [pc, #24]	; (35798 <_sbrk_r+0x20>)
   3577e:	0005      	movs	r5, r0
   35780:	0008      	movs	r0, r1
   35782:	6023      	str	r3, [r4, #0]
   35784:	f7f6 fa88 	bl	2bc98 <_sbrk>
   35788:	1c43      	adds	r3, r0, #1
   3578a:	d103      	bne.n	35794 <_sbrk_r+0x1c>
   3578c:	6823      	ldr	r3, [r4, #0]
   3578e:	2b00      	cmp	r3, #0
   35790:	d000      	beq.n	35794 <_sbrk_r+0x1c>
   35792:	602b      	str	r3, [r5, #0]
   35794:	bd70      	pop	{r4, r5, r6, pc}
   35796:	46c0      	nop			; (mov r8, r8)
   35798:	200058c0 	.word	0x200058c0

0003579c <sniprintf>:
   3579c:	b40c      	push	{r2, r3}
   3579e:	b530      	push	{r4, r5, lr}
   357a0:	4b16      	ldr	r3, [pc, #88]	; (357fc <sniprintf+0x60>)
   357a2:	b09d      	sub	sp, #116	; 0x74
   357a4:	1e0c      	subs	r4, r1, #0
   357a6:	681d      	ldr	r5, [r3, #0]
   357a8:	da08      	bge.n	357bc <sniprintf+0x20>
   357aa:	238b      	movs	r3, #139	; 0x8b
   357ac:	2001      	movs	r0, #1
   357ae:	602b      	str	r3, [r5, #0]
   357b0:	4240      	negs	r0, r0
   357b2:	b01d      	add	sp, #116	; 0x74
   357b4:	bc30      	pop	{r4, r5}
   357b6:	bc08      	pop	{r3}
   357b8:	b002      	add	sp, #8
   357ba:	4718      	bx	r3
   357bc:	2382      	movs	r3, #130	; 0x82
   357be:	a902      	add	r1, sp, #8
   357c0:	009b      	lsls	r3, r3, #2
   357c2:	818b      	strh	r3, [r1, #12]
   357c4:	2300      	movs	r3, #0
   357c6:	9002      	str	r0, [sp, #8]
   357c8:	6108      	str	r0, [r1, #16]
   357ca:	429c      	cmp	r4, r3
   357cc:	d000      	beq.n	357d0 <sniprintf+0x34>
   357ce:	1e63      	subs	r3, r4, #1
   357d0:	608b      	str	r3, [r1, #8]
   357d2:	614b      	str	r3, [r1, #20]
   357d4:	2301      	movs	r3, #1
   357d6:	425b      	negs	r3, r3
   357d8:	81cb      	strh	r3, [r1, #14]
   357da:	9a20      	ldr	r2, [sp, #128]	; 0x80
   357dc:	ab21      	add	r3, sp, #132	; 0x84
   357de:	0028      	movs	r0, r5
   357e0:	9301      	str	r3, [sp, #4]
   357e2:	f000 fcff 	bl	361e4 <_svfiprintf_r>
   357e6:	1c43      	adds	r3, r0, #1
   357e8:	da01      	bge.n	357ee <sniprintf+0x52>
   357ea:	238b      	movs	r3, #139	; 0x8b
   357ec:	602b      	str	r3, [r5, #0]
   357ee:	2c00      	cmp	r4, #0
   357f0:	d0df      	beq.n	357b2 <sniprintf+0x16>
   357f2:	2300      	movs	r3, #0
   357f4:	9a02      	ldr	r2, [sp, #8]
   357f6:	7013      	strb	r3, [r2, #0]
   357f8:	e7db      	b.n	357b2 <sniprintf+0x16>
   357fa:	46c0      	nop			; (mov r8, r8)
   357fc:	20000124 	.word	0x20000124

00035800 <siprintf>:
   35800:	b40e      	push	{r1, r2, r3}
   35802:	b510      	push	{r4, lr}
   35804:	b09d      	sub	sp, #116	; 0x74
   35806:	a902      	add	r1, sp, #8
   35808:	9002      	str	r0, [sp, #8]
   3580a:	6108      	str	r0, [r1, #16]
   3580c:	480b      	ldr	r0, [pc, #44]	; (3583c <siprintf+0x3c>)
   3580e:	2482      	movs	r4, #130	; 0x82
   35810:	6088      	str	r0, [r1, #8]
   35812:	6148      	str	r0, [r1, #20]
   35814:	2001      	movs	r0, #1
   35816:	4240      	negs	r0, r0
   35818:	ab1f      	add	r3, sp, #124	; 0x7c
   3581a:	81c8      	strh	r0, [r1, #14]
   3581c:	4808      	ldr	r0, [pc, #32]	; (35840 <siprintf+0x40>)
   3581e:	cb04      	ldmia	r3!, {r2}
   35820:	00a4      	lsls	r4, r4, #2
   35822:	6800      	ldr	r0, [r0, #0]
   35824:	9301      	str	r3, [sp, #4]
   35826:	818c      	strh	r4, [r1, #12]
   35828:	f000 fcdc 	bl	361e4 <_svfiprintf_r>
   3582c:	2300      	movs	r3, #0
   3582e:	9a02      	ldr	r2, [sp, #8]
   35830:	7013      	strb	r3, [r2, #0]
   35832:	b01d      	add	sp, #116	; 0x74
   35834:	bc10      	pop	{r4}
   35836:	bc08      	pop	{r3}
   35838:	b003      	add	sp, #12
   3583a:	4718      	bx	r3
   3583c:	7fffffff 	.word	0x7fffffff
   35840:	20000124 	.word	0x20000124

00035844 <strcasecmp>:
   35844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35846:	0007      	movs	r7, r0
   35848:	000e      	movs	r6, r1
   3584a:	783c      	ldrb	r4, [r7, #0]
   3584c:	f000 fbda 	bl	36004 <__locale_ctype_ptr>
   35850:	2203      	movs	r2, #3
   35852:	1900      	adds	r0, r0, r4
   35854:	7843      	ldrb	r3, [r0, #1]
   35856:	4013      	ands	r3, r2
   35858:	2b01      	cmp	r3, #1
   3585a:	d100      	bne.n	3585e <strcasecmp+0x1a>
   3585c:	3420      	adds	r4, #32
   3585e:	7835      	ldrb	r5, [r6, #0]
   35860:	f000 fbd0 	bl	36004 <__locale_ctype_ptr>
   35864:	2203      	movs	r2, #3
   35866:	1940      	adds	r0, r0, r5
   35868:	7843      	ldrb	r3, [r0, #1]
   3586a:	4013      	ands	r3, r2
   3586c:	2b01      	cmp	r3, #1
   3586e:	d100      	bne.n	35872 <strcasecmp+0x2e>
   35870:	3520      	adds	r5, #32
   35872:	1b60      	subs	r0, r4, r5
   35874:	d103      	bne.n	3587e <strcasecmp+0x3a>
   35876:	3701      	adds	r7, #1
   35878:	3601      	adds	r6, #1
   3587a:	2d00      	cmp	r5, #0
   3587c:	d1e5      	bne.n	3584a <strcasecmp+0x6>
   3587e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00035880 <strcat>:
   35880:	0002      	movs	r2, r0
   35882:	b510      	push	{r4, lr}
   35884:	7813      	ldrb	r3, [r2, #0]
   35886:	2b00      	cmp	r3, #0
   35888:	d105      	bne.n	35896 <strcat+0x16>
   3588a:	5ccc      	ldrb	r4, [r1, r3]
   3588c:	54d4      	strb	r4, [r2, r3]
   3588e:	3301      	adds	r3, #1
   35890:	2c00      	cmp	r4, #0
   35892:	d1fa      	bne.n	3588a <strcat+0xa>
   35894:	bd10      	pop	{r4, pc}
   35896:	3201      	adds	r2, #1
   35898:	e7f4      	b.n	35884 <strcat+0x4>

0003589a <strcmp>:
   3589a:	7802      	ldrb	r2, [r0, #0]
   3589c:	780b      	ldrb	r3, [r1, #0]
   3589e:	2a00      	cmp	r2, #0
   358a0:	d003      	beq.n	358aa <strcmp+0x10>
   358a2:	3001      	adds	r0, #1
   358a4:	3101      	adds	r1, #1
   358a6:	429a      	cmp	r2, r3
   358a8:	d0f7      	beq.n	3589a <strcmp>
   358aa:	1ad0      	subs	r0, r2, r3
   358ac:	4770      	bx	lr

000358ae <strcpy>:
   358ae:	1c03      	adds	r3, r0, #0
   358b0:	780a      	ldrb	r2, [r1, #0]
   358b2:	3101      	adds	r1, #1
   358b4:	701a      	strb	r2, [r3, #0]
   358b6:	3301      	adds	r3, #1
   358b8:	2a00      	cmp	r2, #0
   358ba:	d1f9      	bne.n	358b0 <strcpy+0x2>
   358bc:	4770      	bx	lr
	...

000358c0 <strdup>:
   358c0:	b510      	push	{r4, lr}
   358c2:	4b03      	ldr	r3, [pc, #12]	; (358d0 <strdup+0x10>)
   358c4:	0001      	movs	r1, r0
   358c6:	6818      	ldr	r0, [r3, #0]
   358c8:	f000 f804 	bl	358d4 <_strdup_r>
   358cc:	bd10      	pop	{r4, pc}
   358ce:	46c0      	nop			; (mov r8, r8)
   358d0:	20000124 	.word	0x20000124

000358d4 <_strdup_r>:
   358d4:	b570      	push	{r4, r5, r6, lr}
   358d6:	0005      	movs	r5, r0
   358d8:	0008      	movs	r0, r1
   358da:	000e      	movs	r6, r1
   358dc:	f000 f80d 	bl	358fa <strlen>
   358e0:	1c44      	adds	r4, r0, #1
   358e2:	0021      	movs	r1, r4
   358e4:	0028      	movs	r0, r5
   358e6:	f7ff fe7f 	bl	355e8 <_malloc_r>
   358ea:	1e05      	subs	r5, r0, #0
   358ec:	d003      	beq.n	358f6 <_strdup_r+0x22>
   358ee:	0022      	movs	r2, r4
   358f0:	0031      	movs	r1, r6
   358f2:	f7ff fe0b 	bl	3550c <memcpy>
   358f6:	0028      	movs	r0, r5
   358f8:	bd70      	pop	{r4, r5, r6, pc}

000358fa <strlen>:
   358fa:	2300      	movs	r3, #0
   358fc:	5cc2      	ldrb	r2, [r0, r3]
   358fe:	3301      	adds	r3, #1
   35900:	2a00      	cmp	r2, #0
   35902:	d1fb      	bne.n	358fc <strlen+0x2>
   35904:	1e58      	subs	r0, r3, #1
   35906:	4770      	bx	lr

00035908 <strncmp>:
   35908:	2300      	movs	r3, #0
   3590a:	b530      	push	{r4, r5, lr}
   3590c:	429a      	cmp	r2, r3
   3590e:	d00a      	beq.n	35926 <strncmp+0x1e>
   35910:	3a01      	subs	r2, #1
   35912:	5cc4      	ldrb	r4, [r0, r3]
   35914:	5ccd      	ldrb	r5, [r1, r3]
   35916:	42ac      	cmp	r4, r5
   35918:	d104      	bne.n	35924 <strncmp+0x1c>
   3591a:	429a      	cmp	r2, r3
   3591c:	d002      	beq.n	35924 <strncmp+0x1c>
   3591e:	3301      	adds	r3, #1
   35920:	2c00      	cmp	r4, #0
   35922:	d1f6      	bne.n	35912 <strncmp+0xa>
   35924:	1b63      	subs	r3, r4, r5
   35926:	0018      	movs	r0, r3
   35928:	bd30      	pop	{r4, r5, pc}

0003592a <strncpy>:
   3592a:	b570      	push	{r4, r5, r6, lr}
   3592c:	0004      	movs	r4, r0
   3592e:	2a00      	cmp	r2, #0
   35930:	d100      	bne.n	35934 <strncpy+0xa>
   35932:	bd70      	pop	{r4, r5, r6, pc}
   35934:	780d      	ldrb	r5, [r1, #0]
   35936:	1e56      	subs	r6, r2, #1
   35938:	1c63      	adds	r3, r4, #1
   3593a:	7025      	strb	r5, [r4, #0]
   3593c:	3101      	adds	r1, #1
   3593e:	2d00      	cmp	r5, #0
   35940:	d105      	bne.n	3594e <strncpy+0x24>
   35942:	18a4      	adds	r4, r4, r2
   35944:	429c      	cmp	r4, r3
   35946:	d0f4      	beq.n	35932 <strncpy+0x8>
   35948:	701d      	strb	r5, [r3, #0]
   3594a:	3301      	adds	r3, #1
   3594c:	e7fa      	b.n	35944 <strncpy+0x1a>
   3594e:	001c      	movs	r4, r3
   35950:	0032      	movs	r2, r6
   35952:	e7ec      	b.n	3592e <strncpy+0x4>

00035954 <strrchr>:
   35954:	b570      	push	{r4, r5, r6, lr}
   35956:	000d      	movs	r5, r1
   35958:	2400      	movs	r4, #0
   3595a:	2900      	cmp	r1, #0
   3595c:	d105      	bne.n	3596a <strrchr+0x16>
   3595e:	f000 ff19 	bl	36794 <strchr>
   35962:	0004      	movs	r4, r0
   35964:	e006      	b.n	35974 <strrchr+0x20>
   35966:	001c      	movs	r4, r3
   35968:	1c58      	adds	r0, r3, #1
   3596a:	0029      	movs	r1, r5
   3596c:	f000 ff12 	bl	36794 <strchr>
   35970:	1e03      	subs	r3, r0, #0
   35972:	d1f8      	bne.n	35966 <strrchr+0x12>
   35974:	0020      	movs	r0, r4
   35976:	bd70      	pop	{r4, r5, r6, pc}

00035978 <strstr>:
   35978:	b510      	push	{r4, lr}
   3597a:	0002      	movs	r2, r0
   3597c:	7800      	ldrb	r0, [r0, #0]
   3597e:	2800      	cmp	r0, #0
   35980:	d104      	bne.n	3598c <strstr+0x14>
   35982:	7809      	ldrb	r1, [r1, #0]
   35984:	2900      	cmp	r1, #0
   35986:	d00d      	beq.n	359a4 <strstr+0x2c>
   35988:	bd10      	pop	{r4, pc}
   3598a:	3201      	adds	r2, #1
   3598c:	7810      	ldrb	r0, [r2, #0]
   3598e:	2800      	cmp	r0, #0
   35990:	d0fa      	beq.n	35988 <strstr+0x10>
   35992:	2300      	movs	r3, #0
   35994:	5cc8      	ldrb	r0, [r1, r3]
   35996:	2800      	cmp	r0, #0
   35998:	d004      	beq.n	359a4 <strstr+0x2c>
   3599a:	5cd4      	ldrb	r4, [r2, r3]
   3599c:	4284      	cmp	r4, r0
   3599e:	d1f4      	bne.n	3598a <strstr+0x12>
   359a0:	3301      	adds	r3, #1
   359a2:	e7f7      	b.n	35994 <strstr+0x1c>
   359a4:	0010      	movs	r0, r2
   359a6:	e7ef      	b.n	35988 <strstr+0x10>

000359a8 <_strtol_l.isra.0>:
   359a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   359aa:	001f      	movs	r7, r3
   359ac:	000e      	movs	r6, r1
   359ae:	b087      	sub	sp, #28
   359b0:	9005      	str	r0, [sp, #20]
   359b2:	9103      	str	r1, [sp, #12]
   359b4:	9202      	str	r2, [sp, #8]
   359b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   359b8:	7834      	ldrb	r4, [r6, #0]
   359ba:	f000 fb20 	bl	35ffe <__locale_ctype_ptr_l>
   359be:	2208      	movs	r2, #8
   359c0:	1900      	adds	r0, r0, r4
   359c2:	7843      	ldrb	r3, [r0, #1]
   359c4:	1c75      	adds	r5, r6, #1
   359c6:	4013      	ands	r3, r2
   359c8:	d10c      	bne.n	359e4 <_strtol_l.isra.0+0x3c>
   359ca:	2c2d      	cmp	r4, #45	; 0x2d
   359cc:	d10c      	bne.n	359e8 <_strtol_l.isra.0+0x40>
   359ce:	3301      	adds	r3, #1
   359d0:	782c      	ldrb	r4, [r5, #0]
   359d2:	9301      	str	r3, [sp, #4]
   359d4:	1cb5      	adds	r5, r6, #2
   359d6:	2f00      	cmp	r7, #0
   359d8:	d00c      	beq.n	359f4 <_strtol_l.isra.0+0x4c>
   359da:	2f10      	cmp	r7, #16
   359dc:	d114      	bne.n	35a08 <_strtol_l.isra.0+0x60>
   359de:	2c30      	cmp	r4, #48	; 0x30
   359e0:	d00a      	beq.n	359f8 <_strtol_l.isra.0+0x50>
   359e2:	e011      	b.n	35a08 <_strtol_l.isra.0+0x60>
   359e4:	002e      	movs	r6, r5
   359e6:	e7e6      	b.n	359b6 <_strtol_l.isra.0+0xe>
   359e8:	9301      	str	r3, [sp, #4]
   359ea:	2c2b      	cmp	r4, #43	; 0x2b
   359ec:	d1f3      	bne.n	359d6 <_strtol_l.isra.0+0x2e>
   359ee:	782c      	ldrb	r4, [r5, #0]
   359f0:	1cb5      	adds	r5, r6, #2
   359f2:	e7f0      	b.n	359d6 <_strtol_l.isra.0+0x2e>
   359f4:	2c30      	cmp	r4, #48	; 0x30
   359f6:	d12f      	bne.n	35a58 <_strtol_l.isra.0+0xb0>
   359f8:	2220      	movs	r2, #32
   359fa:	782b      	ldrb	r3, [r5, #0]
   359fc:	4393      	bics	r3, r2
   359fe:	2b58      	cmp	r3, #88	; 0x58
   35a00:	d151      	bne.n	35aa6 <_strtol_l.isra.0+0xfe>
   35a02:	2710      	movs	r7, #16
   35a04:	786c      	ldrb	r4, [r5, #1]
   35a06:	3502      	adds	r5, #2
   35a08:	9b01      	ldr	r3, [sp, #4]
   35a0a:	4a29      	ldr	r2, [pc, #164]	; (35ab0 <_strtol_l.isra.0+0x108>)
   35a0c:	0039      	movs	r1, r7
   35a0e:	189e      	adds	r6, r3, r2
   35a10:	0030      	movs	r0, r6
   35a12:	f7fd fe2f 	bl	33674 <__aeabi_uidivmod>
   35a16:	0030      	movs	r0, r6
   35a18:	9104      	str	r1, [sp, #16]
   35a1a:	0039      	movs	r1, r7
   35a1c:	f7fd fda4 	bl	33568 <__udivsi3>
   35a20:	2101      	movs	r1, #1
   35a22:	2300      	movs	r3, #0
   35a24:	4249      	negs	r1, r1
   35a26:	0002      	movs	r2, r0
   35a28:	468c      	mov	ip, r1
   35a2a:	0018      	movs	r0, r3
   35a2c:	0021      	movs	r1, r4
   35a2e:	3930      	subs	r1, #48	; 0x30
   35a30:	2909      	cmp	r1, #9
   35a32:	d813      	bhi.n	35a5c <_strtol_l.isra.0+0xb4>
   35a34:	000c      	movs	r4, r1
   35a36:	42a7      	cmp	r7, r4
   35a38:	dd1c      	ble.n	35a74 <_strtol_l.isra.0+0xcc>
   35a3a:	1c59      	adds	r1, r3, #1
   35a3c:	d009      	beq.n	35a52 <_strtol_l.isra.0+0xaa>
   35a3e:	4663      	mov	r3, ip
   35a40:	4282      	cmp	r2, r0
   35a42:	d306      	bcc.n	35a52 <_strtol_l.isra.0+0xaa>
   35a44:	d102      	bne.n	35a4c <_strtol_l.isra.0+0xa4>
   35a46:	9904      	ldr	r1, [sp, #16]
   35a48:	42a1      	cmp	r1, r4
   35a4a:	db02      	blt.n	35a52 <_strtol_l.isra.0+0xaa>
   35a4c:	2301      	movs	r3, #1
   35a4e:	4378      	muls	r0, r7
   35a50:	1820      	adds	r0, r4, r0
   35a52:	782c      	ldrb	r4, [r5, #0]
   35a54:	3501      	adds	r5, #1
   35a56:	e7e9      	b.n	35a2c <_strtol_l.isra.0+0x84>
   35a58:	270a      	movs	r7, #10
   35a5a:	e7d5      	b.n	35a08 <_strtol_l.isra.0+0x60>
   35a5c:	0021      	movs	r1, r4
   35a5e:	3941      	subs	r1, #65	; 0x41
   35a60:	2919      	cmp	r1, #25
   35a62:	d801      	bhi.n	35a68 <_strtol_l.isra.0+0xc0>
   35a64:	3c37      	subs	r4, #55	; 0x37
   35a66:	e7e6      	b.n	35a36 <_strtol_l.isra.0+0x8e>
   35a68:	0021      	movs	r1, r4
   35a6a:	3961      	subs	r1, #97	; 0x61
   35a6c:	2919      	cmp	r1, #25
   35a6e:	d801      	bhi.n	35a74 <_strtol_l.isra.0+0xcc>
   35a70:	3c57      	subs	r4, #87	; 0x57
   35a72:	e7e0      	b.n	35a36 <_strtol_l.isra.0+0x8e>
   35a74:	1c5a      	adds	r2, r3, #1
   35a76:	d108      	bne.n	35a8a <_strtol_l.isra.0+0xe2>
   35a78:	9a05      	ldr	r2, [sp, #20]
   35a7a:	3323      	adds	r3, #35	; 0x23
   35a7c:	6013      	str	r3, [r2, #0]
   35a7e:	9b02      	ldr	r3, [sp, #8]
   35a80:	0030      	movs	r0, r6
   35a82:	2b00      	cmp	r3, #0
   35a84:	d10b      	bne.n	35a9e <_strtol_l.isra.0+0xf6>
   35a86:	b007      	add	sp, #28
   35a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35a8a:	9a01      	ldr	r2, [sp, #4]
   35a8c:	2a00      	cmp	r2, #0
   35a8e:	d000      	beq.n	35a92 <_strtol_l.isra.0+0xea>
   35a90:	4240      	negs	r0, r0
   35a92:	9a02      	ldr	r2, [sp, #8]
   35a94:	2a00      	cmp	r2, #0
   35a96:	d0f6      	beq.n	35a86 <_strtol_l.isra.0+0xde>
   35a98:	9a03      	ldr	r2, [sp, #12]
   35a9a:	2b00      	cmp	r3, #0
   35a9c:	d000      	beq.n	35aa0 <_strtol_l.isra.0+0xf8>
   35a9e:	1e6a      	subs	r2, r5, #1
   35aa0:	9b02      	ldr	r3, [sp, #8]
   35aa2:	601a      	str	r2, [r3, #0]
   35aa4:	e7ef      	b.n	35a86 <_strtol_l.isra.0+0xde>
   35aa6:	2430      	movs	r4, #48	; 0x30
   35aa8:	2f00      	cmp	r7, #0
   35aaa:	d1ad      	bne.n	35a08 <_strtol_l.isra.0+0x60>
   35aac:	3708      	adds	r7, #8
   35aae:	e7ab      	b.n	35a08 <_strtol_l.isra.0+0x60>
   35ab0:	7fffffff 	.word	0x7fffffff

00035ab4 <strtol>:
   35ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35ab6:	0013      	movs	r3, r2
   35ab8:	4a06      	ldr	r2, [pc, #24]	; (35ad4 <strtol+0x20>)
   35aba:	0005      	movs	r5, r0
   35abc:	6810      	ldr	r0, [r2, #0]
   35abe:	6a04      	ldr	r4, [r0, #32]
   35ac0:	2c00      	cmp	r4, #0
   35ac2:	d100      	bne.n	35ac6 <strtol+0x12>
   35ac4:	4c04      	ldr	r4, [pc, #16]	; (35ad8 <strtol+0x24>)
   35ac6:	000a      	movs	r2, r1
   35ac8:	9400      	str	r4, [sp, #0]
   35aca:	0029      	movs	r1, r5
   35acc:	f7ff ff6c 	bl	359a8 <_strtol_l.isra.0>
   35ad0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   35ad2:	46c0      	nop			; (mov r8, r8)
   35ad4:	20000124 	.word	0x20000124
   35ad8:	20000188 	.word	0x20000188

00035adc <_vsniprintf_r>:
   35adc:	b530      	push	{r4, r5, lr}
   35ade:	0014      	movs	r4, r2
   35ae0:	b09b      	sub	sp, #108	; 0x6c
   35ae2:	0005      	movs	r5, r0
   35ae4:	001a      	movs	r2, r3
   35ae6:	2c00      	cmp	r4, #0
   35ae8:	da05      	bge.n	35af6 <_vsniprintf_r+0x1a>
   35aea:	238b      	movs	r3, #139	; 0x8b
   35aec:	6003      	str	r3, [r0, #0]
   35aee:	2001      	movs	r0, #1
   35af0:	4240      	negs	r0, r0
   35af2:	b01b      	add	sp, #108	; 0x6c
   35af4:	bd30      	pop	{r4, r5, pc}
   35af6:	2382      	movs	r3, #130	; 0x82
   35af8:	4668      	mov	r0, sp
   35afa:	009b      	lsls	r3, r3, #2
   35afc:	8183      	strh	r3, [r0, #12]
   35afe:	2300      	movs	r3, #0
   35b00:	9100      	str	r1, [sp, #0]
   35b02:	9104      	str	r1, [sp, #16]
   35b04:	429c      	cmp	r4, r3
   35b06:	d000      	beq.n	35b0a <_vsniprintf_r+0x2e>
   35b08:	1e63      	subs	r3, r4, #1
   35b0a:	9302      	str	r3, [sp, #8]
   35b0c:	9305      	str	r3, [sp, #20]
   35b0e:	2301      	movs	r3, #1
   35b10:	4669      	mov	r1, sp
   35b12:	425b      	negs	r3, r3
   35b14:	81cb      	strh	r3, [r1, #14]
   35b16:	0028      	movs	r0, r5
   35b18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   35b1a:	f000 fb63 	bl	361e4 <_svfiprintf_r>
   35b1e:	1c43      	adds	r3, r0, #1
   35b20:	da01      	bge.n	35b26 <_vsniprintf_r+0x4a>
   35b22:	238b      	movs	r3, #139	; 0x8b
   35b24:	602b      	str	r3, [r5, #0]
   35b26:	2c00      	cmp	r4, #0
   35b28:	d0e3      	beq.n	35af2 <_vsniprintf_r+0x16>
   35b2a:	2300      	movs	r3, #0
   35b2c:	9a00      	ldr	r2, [sp, #0]
   35b2e:	7013      	strb	r3, [r2, #0]
   35b30:	e7df      	b.n	35af2 <_vsniprintf_r+0x16>
	...

00035b34 <vsniprintf>:
   35b34:	b507      	push	{r0, r1, r2, lr}
   35b36:	9300      	str	r3, [sp, #0]
   35b38:	0013      	movs	r3, r2
   35b3a:	000a      	movs	r2, r1
   35b3c:	0001      	movs	r1, r0
   35b3e:	4802      	ldr	r0, [pc, #8]	; (35b48 <vsniprintf+0x14>)
   35b40:	6800      	ldr	r0, [r0, #0]
   35b42:	f7ff ffcb 	bl	35adc <_vsniprintf_r>
   35b46:	bd0e      	pop	{r1, r2, r3, pc}
   35b48:	20000124 	.word	0x20000124

00035b4c <__swbuf_r>:
   35b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35b4e:	0005      	movs	r5, r0
   35b50:	000e      	movs	r6, r1
   35b52:	0014      	movs	r4, r2
   35b54:	2800      	cmp	r0, #0
   35b56:	d004      	beq.n	35b62 <__swbuf_r+0x16>
   35b58:	6983      	ldr	r3, [r0, #24]
   35b5a:	2b00      	cmp	r3, #0
   35b5c:	d101      	bne.n	35b62 <__swbuf_r+0x16>
   35b5e:	f000 f9b9 	bl	35ed4 <__sinit>
   35b62:	4b22      	ldr	r3, [pc, #136]	; (35bec <__swbuf_r+0xa0>)
   35b64:	429c      	cmp	r4, r3
   35b66:	d12d      	bne.n	35bc4 <__swbuf_r+0x78>
   35b68:	686c      	ldr	r4, [r5, #4]
   35b6a:	69a3      	ldr	r3, [r4, #24]
   35b6c:	60a3      	str	r3, [r4, #8]
   35b6e:	89a3      	ldrh	r3, [r4, #12]
   35b70:	071b      	lsls	r3, r3, #28
   35b72:	d531      	bpl.n	35bd8 <__swbuf_r+0x8c>
   35b74:	6923      	ldr	r3, [r4, #16]
   35b76:	2b00      	cmp	r3, #0
   35b78:	d02e      	beq.n	35bd8 <__swbuf_r+0x8c>
   35b7a:	6823      	ldr	r3, [r4, #0]
   35b7c:	6922      	ldr	r2, [r4, #16]
   35b7e:	b2f7      	uxtb	r7, r6
   35b80:	1a98      	subs	r0, r3, r2
   35b82:	6963      	ldr	r3, [r4, #20]
   35b84:	b2f6      	uxtb	r6, r6
   35b86:	4298      	cmp	r0, r3
   35b88:	db05      	blt.n	35b96 <__swbuf_r+0x4a>
   35b8a:	0021      	movs	r1, r4
   35b8c:	0028      	movs	r0, r5
   35b8e:	f000 f933 	bl	35df8 <_fflush_r>
   35b92:	2800      	cmp	r0, #0
   35b94:	d126      	bne.n	35be4 <__swbuf_r+0x98>
   35b96:	68a3      	ldr	r3, [r4, #8]
   35b98:	3001      	adds	r0, #1
   35b9a:	3b01      	subs	r3, #1
   35b9c:	60a3      	str	r3, [r4, #8]
   35b9e:	6823      	ldr	r3, [r4, #0]
   35ba0:	1c5a      	adds	r2, r3, #1
   35ba2:	6022      	str	r2, [r4, #0]
   35ba4:	701f      	strb	r7, [r3, #0]
   35ba6:	6963      	ldr	r3, [r4, #20]
   35ba8:	4298      	cmp	r0, r3
   35baa:	d004      	beq.n	35bb6 <__swbuf_r+0x6a>
   35bac:	89a3      	ldrh	r3, [r4, #12]
   35bae:	07db      	lsls	r3, r3, #31
   35bb0:	d51a      	bpl.n	35be8 <__swbuf_r+0x9c>
   35bb2:	2e0a      	cmp	r6, #10
   35bb4:	d118      	bne.n	35be8 <__swbuf_r+0x9c>
   35bb6:	0021      	movs	r1, r4
   35bb8:	0028      	movs	r0, r5
   35bba:	f000 f91d 	bl	35df8 <_fflush_r>
   35bbe:	2800      	cmp	r0, #0
   35bc0:	d012      	beq.n	35be8 <__swbuf_r+0x9c>
   35bc2:	e00f      	b.n	35be4 <__swbuf_r+0x98>
   35bc4:	4b0a      	ldr	r3, [pc, #40]	; (35bf0 <__swbuf_r+0xa4>)
   35bc6:	429c      	cmp	r4, r3
   35bc8:	d101      	bne.n	35bce <__swbuf_r+0x82>
   35bca:	68ac      	ldr	r4, [r5, #8]
   35bcc:	e7cd      	b.n	35b6a <__swbuf_r+0x1e>
   35bce:	4b09      	ldr	r3, [pc, #36]	; (35bf4 <__swbuf_r+0xa8>)
   35bd0:	429c      	cmp	r4, r3
   35bd2:	d1ca      	bne.n	35b6a <__swbuf_r+0x1e>
   35bd4:	68ec      	ldr	r4, [r5, #12]
   35bd6:	e7c8      	b.n	35b6a <__swbuf_r+0x1e>
   35bd8:	0021      	movs	r1, r4
   35bda:	0028      	movs	r0, r5
   35bdc:	f000 f80c 	bl	35bf8 <__swsetup_r>
   35be0:	2800      	cmp	r0, #0
   35be2:	d0ca      	beq.n	35b7a <__swbuf_r+0x2e>
   35be4:	2601      	movs	r6, #1
   35be6:	4276      	negs	r6, r6
   35be8:	0030      	movs	r0, r6
   35bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35bec:	0003ad40 	.word	0x0003ad40
   35bf0:	0003ad60 	.word	0x0003ad60
   35bf4:	0003ad20 	.word	0x0003ad20

00035bf8 <__swsetup_r>:
   35bf8:	4b36      	ldr	r3, [pc, #216]	; (35cd4 <__swsetup_r+0xdc>)
   35bfa:	b570      	push	{r4, r5, r6, lr}
   35bfc:	681d      	ldr	r5, [r3, #0]
   35bfe:	0006      	movs	r6, r0
   35c00:	000c      	movs	r4, r1
   35c02:	2d00      	cmp	r5, #0
   35c04:	d005      	beq.n	35c12 <__swsetup_r+0x1a>
   35c06:	69ab      	ldr	r3, [r5, #24]
   35c08:	2b00      	cmp	r3, #0
   35c0a:	d102      	bne.n	35c12 <__swsetup_r+0x1a>
   35c0c:	0028      	movs	r0, r5
   35c0e:	f000 f961 	bl	35ed4 <__sinit>
   35c12:	4b31      	ldr	r3, [pc, #196]	; (35cd8 <__swsetup_r+0xe0>)
   35c14:	429c      	cmp	r4, r3
   35c16:	d10f      	bne.n	35c38 <__swsetup_r+0x40>
   35c18:	686c      	ldr	r4, [r5, #4]
   35c1a:	230c      	movs	r3, #12
   35c1c:	5ee2      	ldrsh	r2, [r4, r3]
   35c1e:	b293      	uxth	r3, r2
   35c20:	0719      	lsls	r1, r3, #28
   35c22:	d42d      	bmi.n	35c80 <__swsetup_r+0x88>
   35c24:	06d9      	lsls	r1, r3, #27
   35c26:	d411      	bmi.n	35c4c <__swsetup_r+0x54>
   35c28:	2309      	movs	r3, #9
   35c2a:	2001      	movs	r0, #1
   35c2c:	6033      	str	r3, [r6, #0]
   35c2e:	3337      	adds	r3, #55	; 0x37
   35c30:	4313      	orrs	r3, r2
   35c32:	81a3      	strh	r3, [r4, #12]
   35c34:	4240      	negs	r0, r0
   35c36:	bd70      	pop	{r4, r5, r6, pc}
   35c38:	4b28      	ldr	r3, [pc, #160]	; (35cdc <__swsetup_r+0xe4>)
   35c3a:	429c      	cmp	r4, r3
   35c3c:	d101      	bne.n	35c42 <__swsetup_r+0x4a>
   35c3e:	68ac      	ldr	r4, [r5, #8]
   35c40:	e7eb      	b.n	35c1a <__swsetup_r+0x22>
   35c42:	4b27      	ldr	r3, [pc, #156]	; (35ce0 <__swsetup_r+0xe8>)
   35c44:	429c      	cmp	r4, r3
   35c46:	d1e8      	bne.n	35c1a <__swsetup_r+0x22>
   35c48:	68ec      	ldr	r4, [r5, #12]
   35c4a:	e7e6      	b.n	35c1a <__swsetup_r+0x22>
   35c4c:	075b      	lsls	r3, r3, #29
   35c4e:	d513      	bpl.n	35c78 <__swsetup_r+0x80>
   35c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35c52:	2900      	cmp	r1, #0
   35c54:	d008      	beq.n	35c68 <__swsetup_r+0x70>
   35c56:	0023      	movs	r3, r4
   35c58:	3344      	adds	r3, #68	; 0x44
   35c5a:	4299      	cmp	r1, r3
   35c5c:	d002      	beq.n	35c64 <__swsetup_r+0x6c>
   35c5e:	0030      	movs	r0, r6
   35c60:	f7ff fc78 	bl	35554 <_free_r>
   35c64:	2300      	movs	r3, #0
   35c66:	6363      	str	r3, [r4, #52]	; 0x34
   35c68:	2224      	movs	r2, #36	; 0x24
   35c6a:	89a3      	ldrh	r3, [r4, #12]
   35c6c:	4393      	bics	r3, r2
   35c6e:	81a3      	strh	r3, [r4, #12]
   35c70:	2300      	movs	r3, #0
   35c72:	6063      	str	r3, [r4, #4]
   35c74:	6923      	ldr	r3, [r4, #16]
   35c76:	6023      	str	r3, [r4, #0]
   35c78:	2308      	movs	r3, #8
   35c7a:	89a2      	ldrh	r2, [r4, #12]
   35c7c:	4313      	orrs	r3, r2
   35c7e:	81a3      	strh	r3, [r4, #12]
   35c80:	6923      	ldr	r3, [r4, #16]
   35c82:	2b00      	cmp	r3, #0
   35c84:	d10b      	bne.n	35c9e <__swsetup_r+0xa6>
   35c86:	21a0      	movs	r1, #160	; 0xa0
   35c88:	2280      	movs	r2, #128	; 0x80
   35c8a:	89a3      	ldrh	r3, [r4, #12]
   35c8c:	0089      	lsls	r1, r1, #2
   35c8e:	0092      	lsls	r2, r2, #2
   35c90:	400b      	ands	r3, r1
   35c92:	4293      	cmp	r3, r2
   35c94:	d003      	beq.n	35c9e <__swsetup_r+0xa6>
   35c96:	0021      	movs	r1, r4
   35c98:	0030      	movs	r0, r6
   35c9a:	f000 f9e9 	bl	36070 <__smakebuf_r>
   35c9e:	2301      	movs	r3, #1
   35ca0:	89a2      	ldrh	r2, [r4, #12]
   35ca2:	4013      	ands	r3, r2
   35ca4:	d011      	beq.n	35cca <__swsetup_r+0xd2>
   35ca6:	2300      	movs	r3, #0
   35ca8:	60a3      	str	r3, [r4, #8]
   35caa:	6963      	ldr	r3, [r4, #20]
   35cac:	425b      	negs	r3, r3
   35cae:	61a3      	str	r3, [r4, #24]
   35cb0:	2000      	movs	r0, #0
   35cb2:	6923      	ldr	r3, [r4, #16]
   35cb4:	4283      	cmp	r3, r0
   35cb6:	d1be      	bne.n	35c36 <__swsetup_r+0x3e>
   35cb8:	230c      	movs	r3, #12
   35cba:	5ee2      	ldrsh	r2, [r4, r3]
   35cbc:	0613      	lsls	r3, r2, #24
   35cbe:	d5ba      	bpl.n	35c36 <__swsetup_r+0x3e>
   35cc0:	2340      	movs	r3, #64	; 0x40
   35cc2:	4313      	orrs	r3, r2
   35cc4:	81a3      	strh	r3, [r4, #12]
   35cc6:	3801      	subs	r0, #1
   35cc8:	e7b5      	b.n	35c36 <__swsetup_r+0x3e>
   35cca:	0792      	lsls	r2, r2, #30
   35ccc:	d400      	bmi.n	35cd0 <__swsetup_r+0xd8>
   35cce:	6963      	ldr	r3, [r4, #20]
   35cd0:	60a3      	str	r3, [r4, #8]
   35cd2:	e7ed      	b.n	35cb0 <__swsetup_r+0xb8>
   35cd4:	20000124 	.word	0x20000124
   35cd8:	0003ad40 	.word	0x0003ad40
   35cdc:	0003ad60 	.word	0x0003ad60
   35ce0:	0003ad20 	.word	0x0003ad20

00035ce4 <__sflush_r>:
   35ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35ce6:	898a      	ldrh	r2, [r1, #12]
   35ce8:	0005      	movs	r5, r0
   35cea:	000c      	movs	r4, r1
   35cec:	0713      	lsls	r3, r2, #28
   35cee:	d460      	bmi.n	35db2 <__sflush_r+0xce>
   35cf0:	684b      	ldr	r3, [r1, #4]
   35cf2:	2b00      	cmp	r3, #0
   35cf4:	dc04      	bgt.n	35d00 <__sflush_r+0x1c>
   35cf6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   35cf8:	2b00      	cmp	r3, #0
   35cfa:	dc01      	bgt.n	35d00 <__sflush_r+0x1c>
   35cfc:	2000      	movs	r0, #0
   35cfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35d00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35d02:	2f00      	cmp	r7, #0
   35d04:	d0fa      	beq.n	35cfc <__sflush_r+0x18>
   35d06:	2300      	movs	r3, #0
   35d08:	682e      	ldr	r6, [r5, #0]
   35d0a:	602b      	str	r3, [r5, #0]
   35d0c:	2380      	movs	r3, #128	; 0x80
   35d0e:	015b      	lsls	r3, r3, #5
   35d10:	401a      	ands	r2, r3
   35d12:	d034      	beq.n	35d7e <__sflush_r+0x9a>
   35d14:	6d60      	ldr	r0, [r4, #84]	; 0x54
   35d16:	89a3      	ldrh	r3, [r4, #12]
   35d18:	075b      	lsls	r3, r3, #29
   35d1a:	d506      	bpl.n	35d2a <__sflush_r+0x46>
   35d1c:	6863      	ldr	r3, [r4, #4]
   35d1e:	1ac0      	subs	r0, r0, r3
   35d20:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35d22:	2b00      	cmp	r3, #0
   35d24:	d001      	beq.n	35d2a <__sflush_r+0x46>
   35d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35d28:	1ac0      	subs	r0, r0, r3
   35d2a:	0002      	movs	r2, r0
   35d2c:	6a21      	ldr	r1, [r4, #32]
   35d2e:	2300      	movs	r3, #0
   35d30:	0028      	movs	r0, r5
   35d32:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35d34:	47b8      	blx	r7
   35d36:	89a1      	ldrh	r1, [r4, #12]
   35d38:	1c43      	adds	r3, r0, #1
   35d3a:	d106      	bne.n	35d4a <__sflush_r+0x66>
   35d3c:	682b      	ldr	r3, [r5, #0]
   35d3e:	2b1d      	cmp	r3, #29
   35d40:	d831      	bhi.n	35da6 <__sflush_r+0xc2>
   35d42:	4a2c      	ldr	r2, [pc, #176]	; (35df4 <__sflush_r+0x110>)
   35d44:	40da      	lsrs	r2, r3
   35d46:	07d3      	lsls	r3, r2, #31
   35d48:	d52d      	bpl.n	35da6 <__sflush_r+0xc2>
   35d4a:	2300      	movs	r3, #0
   35d4c:	6063      	str	r3, [r4, #4]
   35d4e:	6923      	ldr	r3, [r4, #16]
   35d50:	6023      	str	r3, [r4, #0]
   35d52:	04cb      	lsls	r3, r1, #19
   35d54:	d505      	bpl.n	35d62 <__sflush_r+0x7e>
   35d56:	1c43      	adds	r3, r0, #1
   35d58:	d102      	bne.n	35d60 <__sflush_r+0x7c>
   35d5a:	682b      	ldr	r3, [r5, #0]
   35d5c:	2b00      	cmp	r3, #0
   35d5e:	d100      	bne.n	35d62 <__sflush_r+0x7e>
   35d60:	6560      	str	r0, [r4, #84]	; 0x54
   35d62:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35d64:	602e      	str	r6, [r5, #0]
   35d66:	2900      	cmp	r1, #0
   35d68:	d0c8      	beq.n	35cfc <__sflush_r+0x18>
   35d6a:	0023      	movs	r3, r4
   35d6c:	3344      	adds	r3, #68	; 0x44
   35d6e:	4299      	cmp	r1, r3
   35d70:	d002      	beq.n	35d78 <__sflush_r+0x94>
   35d72:	0028      	movs	r0, r5
   35d74:	f7ff fbee 	bl	35554 <_free_r>
   35d78:	2000      	movs	r0, #0
   35d7a:	6360      	str	r0, [r4, #52]	; 0x34
   35d7c:	e7bf      	b.n	35cfe <__sflush_r+0x1a>
   35d7e:	2301      	movs	r3, #1
   35d80:	6a21      	ldr	r1, [r4, #32]
   35d82:	0028      	movs	r0, r5
   35d84:	47b8      	blx	r7
   35d86:	1c43      	adds	r3, r0, #1
   35d88:	d1c5      	bne.n	35d16 <__sflush_r+0x32>
   35d8a:	682b      	ldr	r3, [r5, #0]
   35d8c:	2b00      	cmp	r3, #0
   35d8e:	d0c2      	beq.n	35d16 <__sflush_r+0x32>
   35d90:	2b1d      	cmp	r3, #29
   35d92:	d001      	beq.n	35d98 <__sflush_r+0xb4>
   35d94:	2b16      	cmp	r3, #22
   35d96:	d101      	bne.n	35d9c <__sflush_r+0xb8>
   35d98:	602e      	str	r6, [r5, #0]
   35d9a:	e7af      	b.n	35cfc <__sflush_r+0x18>
   35d9c:	2340      	movs	r3, #64	; 0x40
   35d9e:	89a2      	ldrh	r2, [r4, #12]
   35da0:	4313      	orrs	r3, r2
   35da2:	81a3      	strh	r3, [r4, #12]
   35da4:	e7ab      	b.n	35cfe <__sflush_r+0x1a>
   35da6:	2340      	movs	r3, #64	; 0x40
   35da8:	430b      	orrs	r3, r1
   35daa:	2001      	movs	r0, #1
   35dac:	81a3      	strh	r3, [r4, #12]
   35dae:	4240      	negs	r0, r0
   35db0:	e7a5      	b.n	35cfe <__sflush_r+0x1a>
   35db2:	690f      	ldr	r7, [r1, #16]
   35db4:	2f00      	cmp	r7, #0
   35db6:	d0a1      	beq.n	35cfc <__sflush_r+0x18>
   35db8:	680b      	ldr	r3, [r1, #0]
   35dba:	600f      	str	r7, [r1, #0]
   35dbc:	1bdb      	subs	r3, r3, r7
   35dbe:	9301      	str	r3, [sp, #4]
   35dc0:	2300      	movs	r3, #0
   35dc2:	0792      	lsls	r2, r2, #30
   35dc4:	d100      	bne.n	35dc8 <__sflush_r+0xe4>
   35dc6:	694b      	ldr	r3, [r1, #20]
   35dc8:	60a3      	str	r3, [r4, #8]
   35dca:	9b01      	ldr	r3, [sp, #4]
   35dcc:	2b00      	cmp	r3, #0
   35dce:	dc00      	bgt.n	35dd2 <__sflush_r+0xee>
   35dd0:	e794      	b.n	35cfc <__sflush_r+0x18>
   35dd2:	9b01      	ldr	r3, [sp, #4]
   35dd4:	003a      	movs	r2, r7
   35dd6:	6a21      	ldr	r1, [r4, #32]
   35dd8:	0028      	movs	r0, r5
   35dda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   35ddc:	47b0      	blx	r6
   35dde:	2800      	cmp	r0, #0
   35de0:	dc03      	bgt.n	35dea <__sflush_r+0x106>
   35de2:	2340      	movs	r3, #64	; 0x40
   35de4:	89a2      	ldrh	r2, [r4, #12]
   35de6:	4313      	orrs	r3, r2
   35de8:	e7df      	b.n	35daa <__sflush_r+0xc6>
   35dea:	9b01      	ldr	r3, [sp, #4]
   35dec:	183f      	adds	r7, r7, r0
   35dee:	1a1b      	subs	r3, r3, r0
   35df0:	9301      	str	r3, [sp, #4]
   35df2:	e7ea      	b.n	35dca <__sflush_r+0xe6>
   35df4:	20400001 	.word	0x20400001

00035df8 <_fflush_r>:
   35df8:	690b      	ldr	r3, [r1, #16]
   35dfa:	b570      	push	{r4, r5, r6, lr}
   35dfc:	0005      	movs	r5, r0
   35dfe:	000c      	movs	r4, r1
   35e00:	2b00      	cmp	r3, #0
   35e02:	d101      	bne.n	35e08 <_fflush_r+0x10>
   35e04:	2000      	movs	r0, #0
   35e06:	bd70      	pop	{r4, r5, r6, pc}
   35e08:	2800      	cmp	r0, #0
   35e0a:	d004      	beq.n	35e16 <_fflush_r+0x1e>
   35e0c:	6983      	ldr	r3, [r0, #24]
   35e0e:	2b00      	cmp	r3, #0
   35e10:	d101      	bne.n	35e16 <_fflush_r+0x1e>
   35e12:	f000 f85f 	bl	35ed4 <__sinit>
   35e16:	4b0b      	ldr	r3, [pc, #44]	; (35e44 <_fflush_r+0x4c>)
   35e18:	429c      	cmp	r4, r3
   35e1a:	d109      	bne.n	35e30 <_fflush_r+0x38>
   35e1c:	686c      	ldr	r4, [r5, #4]
   35e1e:	220c      	movs	r2, #12
   35e20:	5ea3      	ldrsh	r3, [r4, r2]
   35e22:	2b00      	cmp	r3, #0
   35e24:	d0ee      	beq.n	35e04 <_fflush_r+0xc>
   35e26:	0021      	movs	r1, r4
   35e28:	0028      	movs	r0, r5
   35e2a:	f7ff ff5b 	bl	35ce4 <__sflush_r>
   35e2e:	e7ea      	b.n	35e06 <_fflush_r+0xe>
   35e30:	4b05      	ldr	r3, [pc, #20]	; (35e48 <_fflush_r+0x50>)
   35e32:	429c      	cmp	r4, r3
   35e34:	d101      	bne.n	35e3a <_fflush_r+0x42>
   35e36:	68ac      	ldr	r4, [r5, #8]
   35e38:	e7f1      	b.n	35e1e <_fflush_r+0x26>
   35e3a:	4b04      	ldr	r3, [pc, #16]	; (35e4c <_fflush_r+0x54>)
   35e3c:	429c      	cmp	r4, r3
   35e3e:	d1ee      	bne.n	35e1e <_fflush_r+0x26>
   35e40:	68ec      	ldr	r4, [r5, #12]
   35e42:	e7ec      	b.n	35e1e <_fflush_r+0x26>
   35e44:	0003ad40 	.word	0x0003ad40
   35e48:	0003ad60 	.word	0x0003ad60
   35e4c:	0003ad20 	.word	0x0003ad20

00035e50 <_cleanup_r>:
   35e50:	b510      	push	{r4, lr}
   35e52:	4902      	ldr	r1, [pc, #8]	; (35e5c <_cleanup_r+0xc>)
   35e54:	f000 f8b2 	bl	35fbc <_fwalk_reent>
   35e58:	bd10      	pop	{r4, pc}
   35e5a:	46c0      	nop			; (mov r8, r8)
   35e5c:	00035df9 	.word	0x00035df9

00035e60 <std.isra.0>:
   35e60:	2300      	movs	r3, #0
   35e62:	b510      	push	{r4, lr}
   35e64:	0004      	movs	r4, r0
   35e66:	6003      	str	r3, [r0, #0]
   35e68:	6043      	str	r3, [r0, #4]
   35e6a:	6083      	str	r3, [r0, #8]
   35e6c:	8181      	strh	r1, [r0, #12]
   35e6e:	6643      	str	r3, [r0, #100]	; 0x64
   35e70:	81c2      	strh	r2, [r0, #14]
   35e72:	6103      	str	r3, [r0, #16]
   35e74:	6143      	str	r3, [r0, #20]
   35e76:	6183      	str	r3, [r0, #24]
   35e78:	0019      	movs	r1, r3
   35e7a:	2208      	movs	r2, #8
   35e7c:	305c      	adds	r0, #92	; 0x5c
   35e7e:	f7ff fb60 	bl	35542 <memset>
   35e82:	4b05      	ldr	r3, [pc, #20]	; (35e98 <std.isra.0+0x38>)
   35e84:	6224      	str	r4, [r4, #32]
   35e86:	6263      	str	r3, [r4, #36]	; 0x24
   35e88:	4b04      	ldr	r3, [pc, #16]	; (35e9c <std.isra.0+0x3c>)
   35e8a:	62a3      	str	r3, [r4, #40]	; 0x28
   35e8c:	4b04      	ldr	r3, [pc, #16]	; (35ea0 <std.isra.0+0x40>)
   35e8e:	62e3      	str	r3, [r4, #44]	; 0x2c
   35e90:	4b04      	ldr	r3, [pc, #16]	; (35ea4 <std.isra.0+0x44>)
   35e92:	6323      	str	r3, [r4, #48]	; 0x30
   35e94:	bd10      	pop	{r4, pc}
   35e96:	46c0      	nop			; (mov r8, r8)
   35e98:	000366fd 	.word	0x000366fd
   35e9c:	00036725 	.word	0x00036725
   35ea0:	0003675d 	.word	0x0003675d
   35ea4:	00036789 	.word	0x00036789

00035ea8 <__sfmoreglue>:
   35ea8:	b570      	push	{r4, r5, r6, lr}
   35eaa:	2568      	movs	r5, #104	; 0x68
   35eac:	1e4a      	subs	r2, r1, #1
   35eae:	4355      	muls	r5, r2
   35eb0:	000e      	movs	r6, r1
   35eb2:	0029      	movs	r1, r5
   35eb4:	3174      	adds	r1, #116	; 0x74
   35eb6:	f7ff fb97 	bl	355e8 <_malloc_r>
   35eba:	1e04      	subs	r4, r0, #0
   35ebc:	d008      	beq.n	35ed0 <__sfmoreglue+0x28>
   35ebe:	2100      	movs	r1, #0
   35ec0:	002a      	movs	r2, r5
   35ec2:	6001      	str	r1, [r0, #0]
   35ec4:	6046      	str	r6, [r0, #4]
   35ec6:	300c      	adds	r0, #12
   35ec8:	60a0      	str	r0, [r4, #8]
   35eca:	3268      	adds	r2, #104	; 0x68
   35ecc:	f7ff fb39 	bl	35542 <memset>
   35ed0:	0020      	movs	r0, r4
   35ed2:	bd70      	pop	{r4, r5, r6, pc}

00035ed4 <__sinit>:
   35ed4:	6983      	ldr	r3, [r0, #24]
   35ed6:	b513      	push	{r0, r1, r4, lr}
   35ed8:	0004      	movs	r4, r0
   35eda:	2b00      	cmp	r3, #0
   35edc:	d128      	bne.n	35f30 <__sinit+0x5c>
   35ede:	6483      	str	r3, [r0, #72]	; 0x48
   35ee0:	64c3      	str	r3, [r0, #76]	; 0x4c
   35ee2:	6503      	str	r3, [r0, #80]	; 0x50
   35ee4:	4b13      	ldr	r3, [pc, #76]	; (35f34 <__sinit+0x60>)
   35ee6:	4a14      	ldr	r2, [pc, #80]	; (35f38 <__sinit+0x64>)
   35ee8:	681b      	ldr	r3, [r3, #0]
   35eea:	6282      	str	r2, [r0, #40]	; 0x28
   35eec:	9301      	str	r3, [sp, #4]
   35eee:	4298      	cmp	r0, r3
   35ef0:	d101      	bne.n	35ef6 <__sinit+0x22>
   35ef2:	2301      	movs	r3, #1
   35ef4:	6183      	str	r3, [r0, #24]
   35ef6:	0020      	movs	r0, r4
   35ef8:	f000 f820 	bl	35f3c <__sfp>
   35efc:	6060      	str	r0, [r4, #4]
   35efe:	0020      	movs	r0, r4
   35f00:	f000 f81c 	bl	35f3c <__sfp>
   35f04:	60a0      	str	r0, [r4, #8]
   35f06:	0020      	movs	r0, r4
   35f08:	f000 f818 	bl	35f3c <__sfp>
   35f0c:	2200      	movs	r2, #0
   35f0e:	60e0      	str	r0, [r4, #12]
   35f10:	2104      	movs	r1, #4
   35f12:	6860      	ldr	r0, [r4, #4]
   35f14:	f7ff ffa4 	bl	35e60 <std.isra.0>
   35f18:	2201      	movs	r2, #1
   35f1a:	2109      	movs	r1, #9
   35f1c:	68a0      	ldr	r0, [r4, #8]
   35f1e:	f7ff ff9f 	bl	35e60 <std.isra.0>
   35f22:	2202      	movs	r2, #2
   35f24:	2112      	movs	r1, #18
   35f26:	68e0      	ldr	r0, [r4, #12]
   35f28:	f7ff ff9a 	bl	35e60 <std.isra.0>
   35f2c:	2301      	movs	r3, #1
   35f2e:	61a3      	str	r3, [r4, #24]
   35f30:	bd13      	pop	{r0, r1, r4, pc}
   35f32:	46c0      	nop			; (mov r8, r8)
   35f34:	0003ad1c 	.word	0x0003ad1c
   35f38:	00035e51 	.word	0x00035e51

00035f3c <__sfp>:
   35f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35f3e:	4b1e      	ldr	r3, [pc, #120]	; (35fb8 <__sfp+0x7c>)
   35f40:	0007      	movs	r7, r0
   35f42:	681e      	ldr	r6, [r3, #0]
   35f44:	69b3      	ldr	r3, [r6, #24]
   35f46:	2b00      	cmp	r3, #0
   35f48:	d102      	bne.n	35f50 <__sfp+0x14>
   35f4a:	0030      	movs	r0, r6
   35f4c:	f7ff ffc2 	bl	35ed4 <__sinit>
   35f50:	3648      	adds	r6, #72	; 0x48
   35f52:	68b4      	ldr	r4, [r6, #8]
   35f54:	6873      	ldr	r3, [r6, #4]
   35f56:	3b01      	subs	r3, #1
   35f58:	d504      	bpl.n	35f64 <__sfp+0x28>
   35f5a:	6833      	ldr	r3, [r6, #0]
   35f5c:	2b00      	cmp	r3, #0
   35f5e:	d007      	beq.n	35f70 <__sfp+0x34>
   35f60:	6836      	ldr	r6, [r6, #0]
   35f62:	e7f6      	b.n	35f52 <__sfp+0x16>
   35f64:	220c      	movs	r2, #12
   35f66:	5ea5      	ldrsh	r5, [r4, r2]
   35f68:	2d00      	cmp	r5, #0
   35f6a:	d00d      	beq.n	35f88 <__sfp+0x4c>
   35f6c:	3468      	adds	r4, #104	; 0x68
   35f6e:	e7f2      	b.n	35f56 <__sfp+0x1a>
   35f70:	2104      	movs	r1, #4
   35f72:	0038      	movs	r0, r7
   35f74:	f7ff ff98 	bl	35ea8 <__sfmoreglue>
   35f78:	6030      	str	r0, [r6, #0]
   35f7a:	2800      	cmp	r0, #0
   35f7c:	d1f0      	bne.n	35f60 <__sfp+0x24>
   35f7e:	230c      	movs	r3, #12
   35f80:	0004      	movs	r4, r0
   35f82:	603b      	str	r3, [r7, #0]
   35f84:	0020      	movs	r0, r4
   35f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35f88:	2301      	movs	r3, #1
   35f8a:	0020      	movs	r0, r4
   35f8c:	425b      	negs	r3, r3
   35f8e:	81e3      	strh	r3, [r4, #14]
   35f90:	3302      	adds	r3, #2
   35f92:	81a3      	strh	r3, [r4, #12]
   35f94:	6665      	str	r5, [r4, #100]	; 0x64
   35f96:	6025      	str	r5, [r4, #0]
   35f98:	60a5      	str	r5, [r4, #8]
   35f9a:	6065      	str	r5, [r4, #4]
   35f9c:	6125      	str	r5, [r4, #16]
   35f9e:	6165      	str	r5, [r4, #20]
   35fa0:	61a5      	str	r5, [r4, #24]
   35fa2:	2208      	movs	r2, #8
   35fa4:	0029      	movs	r1, r5
   35fa6:	305c      	adds	r0, #92	; 0x5c
   35fa8:	f7ff facb 	bl	35542 <memset>
   35fac:	6365      	str	r5, [r4, #52]	; 0x34
   35fae:	63a5      	str	r5, [r4, #56]	; 0x38
   35fb0:	64a5      	str	r5, [r4, #72]	; 0x48
   35fb2:	64e5      	str	r5, [r4, #76]	; 0x4c
   35fb4:	e7e6      	b.n	35f84 <__sfp+0x48>
   35fb6:	46c0      	nop			; (mov r8, r8)
   35fb8:	0003ad1c 	.word	0x0003ad1c

00035fbc <_fwalk_reent>:
   35fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35fbe:	0004      	movs	r4, r0
   35fc0:	0007      	movs	r7, r0
   35fc2:	2600      	movs	r6, #0
   35fc4:	9101      	str	r1, [sp, #4]
   35fc6:	3448      	adds	r4, #72	; 0x48
   35fc8:	2c00      	cmp	r4, #0
   35fca:	d101      	bne.n	35fd0 <_fwalk_reent+0x14>
   35fcc:	0030      	movs	r0, r6
   35fce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35fd0:	6863      	ldr	r3, [r4, #4]
   35fd2:	68a5      	ldr	r5, [r4, #8]
   35fd4:	9300      	str	r3, [sp, #0]
   35fd6:	9b00      	ldr	r3, [sp, #0]
   35fd8:	3b01      	subs	r3, #1
   35fda:	9300      	str	r3, [sp, #0]
   35fdc:	d501      	bpl.n	35fe2 <_fwalk_reent+0x26>
   35fde:	6824      	ldr	r4, [r4, #0]
   35fe0:	e7f2      	b.n	35fc8 <_fwalk_reent+0xc>
   35fe2:	89ab      	ldrh	r3, [r5, #12]
   35fe4:	2b01      	cmp	r3, #1
   35fe6:	d908      	bls.n	35ffa <_fwalk_reent+0x3e>
   35fe8:	220e      	movs	r2, #14
   35fea:	5eab      	ldrsh	r3, [r5, r2]
   35fec:	3301      	adds	r3, #1
   35fee:	d004      	beq.n	35ffa <_fwalk_reent+0x3e>
   35ff0:	0029      	movs	r1, r5
   35ff2:	0038      	movs	r0, r7
   35ff4:	9b01      	ldr	r3, [sp, #4]
   35ff6:	4798      	blx	r3
   35ff8:	4306      	orrs	r6, r0
   35ffa:	3568      	adds	r5, #104	; 0x68
   35ffc:	e7eb      	b.n	35fd6 <_fwalk_reent+0x1a>

00035ffe <__locale_ctype_ptr_l>:
   35ffe:	30ec      	adds	r0, #236	; 0xec
   36000:	6800      	ldr	r0, [r0, #0]
   36002:	4770      	bx	lr

00036004 <__locale_ctype_ptr>:
   36004:	4b04      	ldr	r3, [pc, #16]	; (36018 <__locale_ctype_ptr+0x14>)
   36006:	681b      	ldr	r3, [r3, #0]
   36008:	6a1b      	ldr	r3, [r3, #32]
   3600a:	2b00      	cmp	r3, #0
   3600c:	d100      	bne.n	36010 <__locale_ctype_ptr+0xc>
   3600e:	4b03      	ldr	r3, [pc, #12]	; (3601c <__locale_ctype_ptr+0x18>)
   36010:	33ec      	adds	r3, #236	; 0xec
   36012:	6818      	ldr	r0, [r3, #0]
   36014:	4770      	bx	lr
   36016:	46c0      	nop			; (mov r8, r8)
   36018:	20000124 	.word	0x20000124
   3601c:	20000188 	.word	0x20000188

00036020 <__swhatbuf_r>:
   36020:	b570      	push	{r4, r5, r6, lr}
   36022:	000e      	movs	r6, r1
   36024:	001d      	movs	r5, r3
   36026:	230e      	movs	r3, #14
   36028:	5ec9      	ldrsh	r1, [r1, r3]
   3602a:	b090      	sub	sp, #64	; 0x40
   3602c:	0014      	movs	r4, r2
   3602e:	2900      	cmp	r1, #0
   36030:	da07      	bge.n	36042 <__swhatbuf_r+0x22>
   36032:	2300      	movs	r3, #0
   36034:	602b      	str	r3, [r5, #0]
   36036:	89b3      	ldrh	r3, [r6, #12]
   36038:	061b      	lsls	r3, r3, #24
   3603a:	d411      	bmi.n	36060 <__swhatbuf_r+0x40>
   3603c:	2380      	movs	r3, #128	; 0x80
   3603e:	00db      	lsls	r3, r3, #3
   36040:	e00f      	b.n	36062 <__swhatbuf_r+0x42>
   36042:	aa01      	add	r2, sp, #4
   36044:	f000 fbe6 	bl	36814 <_fstat_r>
   36048:	2800      	cmp	r0, #0
   3604a:	dbf2      	blt.n	36032 <__swhatbuf_r+0x12>
   3604c:	22f0      	movs	r2, #240	; 0xf0
   3604e:	9b02      	ldr	r3, [sp, #8]
   36050:	0212      	lsls	r2, r2, #8
   36052:	4013      	ands	r3, r2
   36054:	4a05      	ldr	r2, [pc, #20]	; (3606c <__swhatbuf_r+0x4c>)
   36056:	189b      	adds	r3, r3, r2
   36058:	425a      	negs	r2, r3
   3605a:	4153      	adcs	r3, r2
   3605c:	602b      	str	r3, [r5, #0]
   3605e:	e7ed      	b.n	3603c <__swhatbuf_r+0x1c>
   36060:	2340      	movs	r3, #64	; 0x40
   36062:	2000      	movs	r0, #0
   36064:	6023      	str	r3, [r4, #0]
   36066:	b010      	add	sp, #64	; 0x40
   36068:	bd70      	pop	{r4, r5, r6, pc}
   3606a:	46c0      	nop			; (mov r8, r8)
   3606c:	ffffe000 	.word	0xffffe000

00036070 <__smakebuf_r>:
   36070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36072:	2602      	movs	r6, #2
   36074:	898b      	ldrh	r3, [r1, #12]
   36076:	0005      	movs	r5, r0
   36078:	000c      	movs	r4, r1
   3607a:	4233      	tst	r3, r6
   3607c:	d006      	beq.n	3608c <__smakebuf_r+0x1c>
   3607e:	0023      	movs	r3, r4
   36080:	3347      	adds	r3, #71	; 0x47
   36082:	6023      	str	r3, [r4, #0]
   36084:	6123      	str	r3, [r4, #16]
   36086:	2301      	movs	r3, #1
   36088:	6163      	str	r3, [r4, #20]
   3608a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   3608c:	ab01      	add	r3, sp, #4
   3608e:	466a      	mov	r2, sp
   36090:	f7ff ffc6 	bl	36020 <__swhatbuf_r>
   36094:	9900      	ldr	r1, [sp, #0]
   36096:	0007      	movs	r7, r0
   36098:	0028      	movs	r0, r5
   3609a:	f7ff faa5 	bl	355e8 <_malloc_r>
   3609e:	2800      	cmp	r0, #0
   360a0:	d108      	bne.n	360b4 <__smakebuf_r+0x44>
   360a2:	220c      	movs	r2, #12
   360a4:	5ea3      	ldrsh	r3, [r4, r2]
   360a6:	059a      	lsls	r2, r3, #22
   360a8:	d4ef      	bmi.n	3608a <__smakebuf_r+0x1a>
   360aa:	2203      	movs	r2, #3
   360ac:	4393      	bics	r3, r2
   360ae:	431e      	orrs	r6, r3
   360b0:	81a6      	strh	r6, [r4, #12]
   360b2:	e7e4      	b.n	3607e <__smakebuf_r+0xe>
   360b4:	4b0f      	ldr	r3, [pc, #60]	; (360f4 <__smakebuf_r+0x84>)
   360b6:	62ab      	str	r3, [r5, #40]	; 0x28
   360b8:	2380      	movs	r3, #128	; 0x80
   360ba:	89a2      	ldrh	r2, [r4, #12]
   360bc:	6020      	str	r0, [r4, #0]
   360be:	4313      	orrs	r3, r2
   360c0:	81a3      	strh	r3, [r4, #12]
   360c2:	9b00      	ldr	r3, [sp, #0]
   360c4:	6120      	str	r0, [r4, #16]
   360c6:	6163      	str	r3, [r4, #20]
   360c8:	9b01      	ldr	r3, [sp, #4]
   360ca:	2b00      	cmp	r3, #0
   360cc:	d00d      	beq.n	360ea <__smakebuf_r+0x7a>
   360ce:	230e      	movs	r3, #14
   360d0:	5ee1      	ldrsh	r1, [r4, r3]
   360d2:	0028      	movs	r0, r5
   360d4:	f000 fbb0 	bl	36838 <_isatty_r>
   360d8:	2800      	cmp	r0, #0
   360da:	d006      	beq.n	360ea <__smakebuf_r+0x7a>
   360dc:	2203      	movs	r2, #3
   360de:	89a3      	ldrh	r3, [r4, #12]
   360e0:	4393      	bics	r3, r2
   360e2:	001a      	movs	r2, r3
   360e4:	2301      	movs	r3, #1
   360e6:	4313      	orrs	r3, r2
   360e8:	81a3      	strh	r3, [r4, #12]
   360ea:	89a0      	ldrh	r0, [r4, #12]
   360ec:	4338      	orrs	r0, r7
   360ee:	81a0      	strh	r0, [r4, #12]
   360f0:	e7cb      	b.n	3608a <__smakebuf_r+0x1a>
   360f2:	46c0      	nop			; (mov r8, r8)
   360f4:	00035e51 	.word	0x00035e51

000360f8 <__ascii_mbtowc>:
   360f8:	b082      	sub	sp, #8
   360fa:	2900      	cmp	r1, #0
   360fc:	d100      	bne.n	36100 <__ascii_mbtowc+0x8>
   360fe:	a901      	add	r1, sp, #4
   36100:	1e10      	subs	r0, r2, #0
   36102:	d006      	beq.n	36112 <__ascii_mbtowc+0x1a>
   36104:	2b00      	cmp	r3, #0
   36106:	d006      	beq.n	36116 <__ascii_mbtowc+0x1e>
   36108:	7813      	ldrb	r3, [r2, #0]
   3610a:	600b      	str	r3, [r1, #0]
   3610c:	7810      	ldrb	r0, [r2, #0]
   3610e:	1e43      	subs	r3, r0, #1
   36110:	4198      	sbcs	r0, r3
   36112:	b002      	add	sp, #8
   36114:	4770      	bx	lr
   36116:	2002      	movs	r0, #2
   36118:	4240      	negs	r0, r0
   3611a:	e7fa      	b.n	36112 <__ascii_mbtowc+0x1a>

0003611c <__malloc_lock>:
   3611c:	4770      	bx	lr

0003611e <__malloc_unlock>:
   3611e:	4770      	bx	lr

00036120 <__ssputs_r>:
   36120:	b5f0      	push	{r4, r5, r6, r7, lr}
   36122:	688e      	ldr	r6, [r1, #8]
   36124:	b085      	sub	sp, #20
   36126:	0007      	movs	r7, r0
   36128:	000c      	movs	r4, r1
   3612a:	9203      	str	r2, [sp, #12]
   3612c:	9301      	str	r3, [sp, #4]
   3612e:	429e      	cmp	r6, r3
   36130:	d839      	bhi.n	361a6 <__ssputs_r+0x86>
   36132:	2390      	movs	r3, #144	; 0x90
   36134:	898a      	ldrh	r2, [r1, #12]
   36136:	00db      	lsls	r3, r3, #3
   36138:	421a      	tst	r2, r3
   3613a:	d034      	beq.n	361a6 <__ssputs_r+0x86>
   3613c:	2503      	movs	r5, #3
   3613e:	6909      	ldr	r1, [r1, #16]
   36140:	6823      	ldr	r3, [r4, #0]
   36142:	1a5b      	subs	r3, r3, r1
   36144:	9302      	str	r3, [sp, #8]
   36146:	6963      	ldr	r3, [r4, #20]
   36148:	9802      	ldr	r0, [sp, #8]
   3614a:	435d      	muls	r5, r3
   3614c:	0feb      	lsrs	r3, r5, #31
   3614e:	195d      	adds	r5, r3, r5
   36150:	9b01      	ldr	r3, [sp, #4]
   36152:	106d      	asrs	r5, r5, #1
   36154:	3301      	adds	r3, #1
   36156:	181b      	adds	r3, r3, r0
   36158:	42ab      	cmp	r3, r5
   3615a:	d900      	bls.n	3615e <__ssputs_r+0x3e>
   3615c:	001d      	movs	r5, r3
   3615e:	0553      	lsls	r3, r2, #21
   36160:	d532      	bpl.n	361c8 <__ssputs_r+0xa8>
   36162:	0029      	movs	r1, r5
   36164:	0038      	movs	r0, r7
   36166:	f7ff fa3f 	bl	355e8 <_malloc_r>
   3616a:	1e06      	subs	r6, r0, #0
   3616c:	d109      	bne.n	36182 <__ssputs_r+0x62>
   3616e:	230c      	movs	r3, #12
   36170:	603b      	str	r3, [r7, #0]
   36172:	2340      	movs	r3, #64	; 0x40
   36174:	2001      	movs	r0, #1
   36176:	89a2      	ldrh	r2, [r4, #12]
   36178:	4240      	negs	r0, r0
   3617a:	4313      	orrs	r3, r2
   3617c:	81a3      	strh	r3, [r4, #12]
   3617e:	b005      	add	sp, #20
   36180:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36182:	9a02      	ldr	r2, [sp, #8]
   36184:	6921      	ldr	r1, [r4, #16]
   36186:	f7ff f9c1 	bl	3550c <memcpy>
   3618a:	89a3      	ldrh	r3, [r4, #12]
   3618c:	4a14      	ldr	r2, [pc, #80]	; (361e0 <__ssputs_r+0xc0>)
   3618e:	401a      	ands	r2, r3
   36190:	2380      	movs	r3, #128	; 0x80
   36192:	4313      	orrs	r3, r2
   36194:	81a3      	strh	r3, [r4, #12]
   36196:	9b02      	ldr	r3, [sp, #8]
   36198:	6126      	str	r6, [r4, #16]
   3619a:	18f6      	adds	r6, r6, r3
   3619c:	6026      	str	r6, [r4, #0]
   3619e:	6165      	str	r5, [r4, #20]
   361a0:	9e01      	ldr	r6, [sp, #4]
   361a2:	1aed      	subs	r5, r5, r3
   361a4:	60a5      	str	r5, [r4, #8]
   361a6:	9b01      	ldr	r3, [sp, #4]
   361a8:	42b3      	cmp	r3, r6
   361aa:	d200      	bcs.n	361ae <__ssputs_r+0x8e>
   361ac:	001e      	movs	r6, r3
   361ae:	0032      	movs	r2, r6
   361b0:	9903      	ldr	r1, [sp, #12]
   361b2:	6820      	ldr	r0, [r4, #0]
   361b4:	f7ff f9b3 	bl	3551e <memmove>
   361b8:	68a3      	ldr	r3, [r4, #8]
   361ba:	2000      	movs	r0, #0
   361bc:	1b9b      	subs	r3, r3, r6
   361be:	60a3      	str	r3, [r4, #8]
   361c0:	6823      	ldr	r3, [r4, #0]
   361c2:	199e      	adds	r6, r3, r6
   361c4:	6026      	str	r6, [r4, #0]
   361c6:	e7da      	b.n	3617e <__ssputs_r+0x5e>
   361c8:	002a      	movs	r2, r5
   361ca:	0038      	movs	r0, r7
   361cc:	f000 fb65 	bl	3689a <_realloc_r>
   361d0:	1e06      	subs	r6, r0, #0
   361d2:	d1e0      	bne.n	36196 <__ssputs_r+0x76>
   361d4:	6921      	ldr	r1, [r4, #16]
   361d6:	0038      	movs	r0, r7
   361d8:	f7ff f9bc 	bl	35554 <_free_r>
   361dc:	e7c7      	b.n	3616e <__ssputs_r+0x4e>
   361de:	46c0      	nop			; (mov r8, r8)
   361e0:	fffffb7f 	.word	0xfffffb7f

000361e4 <_svfiprintf_r>:
   361e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   361e6:	b09f      	sub	sp, #124	; 0x7c
   361e8:	9002      	str	r0, [sp, #8]
   361ea:	9305      	str	r3, [sp, #20]
   361ec:	898b      	ldrh	r3, [r1, #12]
   361ee:	000f      	movs	r7, r1
   361f0:	0016      	movs	r6, r2
   361f2:	061b      	lsls	r3, r3, #24
   361f4:	d511      	bpl.n	3621a <_svfiprintf_r+0x36>
   361f6:	690b      	ldr	r3, [r1, #16]
   361f8:	2b00      	cmp	r3, #0
   361fa:	d10e      	bne.n	3621a <_svfiprintf_r+0x36>
   361fc:	2140      	movs	r1, #64	; 0x40
   361fe:	f7ff f9f3 	bl	355e8 <_malloc_r>
   36202:	6038      	str	r0, [r7, #0]
   36204:	6138      	str	r0, [r7, #16]
   36206:	2800      	cmp	r0, #0
   36208:	d105      	bne.n	36216 <_svfiprintf_r+0x32>
   3620a:	230c      	movs	r3, #12
   3620c:	9a02      	ldr	r2, [sp, #8]
   3620e:	3801      	subs	r0, #1
   36210:	6013      	str	r3, [r2, #0]
   36212:	b01f      	add	sp, #124	; 0x7c
   36214:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36216:	2340      	movs	r3, #64	; 0x40
   36218:	617b      	str	r3, [r7, #20]
   3621a:	2300      	movs	r3, #0
   3621c:	ad06      	add	r5, sp, #24
   3621e:	616b      	str	r3, [r5, #20]
   36220:	3320      	adds	r3, #32
   36222:	766b      	strb	r3, [r5, #25]
   36224:	3310      	adds	r3, #16
   36226:	76ab      	strb	r3, [r5, #26]
   36228:	0034      	movs	r4, r6
   3622a:	7823      	ldrb	r3, [r4, #0]
   3622c:	2b00      	cmp	r3, #0
   3622e:	d147      	bne.n	362c0 <_svfiprintf_r+0xdc>
   36230:	1ba3      	subs	r3, r4, r6
   36232:	9304      	str	r3, [sp, #16]
   36234:	d00d      	beq.n	36252 <_svfiprintf_r+0x6e>
   36236:	1ba3      	subs	r3, r4, r6
   36238:	0032      	movs	r2, r6
   3623a:	0039      	movs	r1, r7
   3623c:	9802      	ldr	r0, [sp, #8]
   3623e:	f7ff ff6f 	bl	36120 <__ssputs_r>
   36242:	1c43      	adds	r3, r0, #1
   36244:	d100      	bne.n	36248 <_svfiprintf_r+0x64>
   36246:	e0b5      	b.n	363b4 <_svfiprintf_r+0x1d0>
   36248:	696a      	ldr	r2, [r5, #20]
   3624a:	9b04      	ldr	r3, [sp, #16]
   3624c:	4694      	mov	ip, r2
   3624e:	4463      	add	r3, ip
   36250:	616b      	str	r3, [r5, #20]
   36252:	7823      	ldrb	r3, [r4, #0]
   36254:	2b00      	cmp	r3, #0
   36256:	d100      	bne.n	3625a <_svfiprintf_r+0x76>
   36258:	e0ac      	b.n	363b4 <_svfiprintf_r+0x1d0>
   3625a:	2201      	movs	r2, #1
   3625c:	2300      	movs	r3, #0
   3625e:	4252      	negs	r2, r2
   36260:	606a      	str	r2, [r5, #4]
   36262:	a902      	add	r1, sp, #8
   36264:	3254      	adds	r2, #84	; 0x54
   36266:	1852      	adds	r2, r2, r1
   36268:	3401      	adds	r4, #1
   3626a:	602b      	str	r3, [r5, #0]
   3626c:	60eb      	str	r3, [r5, #12]
   3626e:	60ab      	str	r3, [r5, #8]
   36270:	7013      	strb	r3, [r2, #0]
   36272:	65ab      	str	r3, [r5, #88]	; 0x58
   36274:	4e58      	ldr	r6, [pc, #352]	; (363d8 <_svfiprintf_r+0x1f4>)
   36276:	2205      	movs	r2, #5
   36278:	7821      	ldrb	r1, [r4, #0]
   3627a:	0030      	movs	r0, r6
   3627c:	f000 fb02 	bl	36884 <memchr>
   36280:	1c62      	adds	r2, r4, #1
   36282:	2800      	cmp	r0, #0
   36284:	d120      	bne.n	362c8 <_svfiprintf_r+0xe4>
   36286:	6829      	ldr	r1, [r5, #0]
   36288:	06cb      	lsls	r3, r1, #27
   3628a:	d504      	bpl.n	36296 <_svfiprintf_r+0xb2>
   3628c:	2353      	movs	r3, #83	; 0x53
   3628e:	ae02      	add	r6, sp, #8
   36290:	3020      	adds	r0, #32
   36292:	199b      	adds	r3, r3, r6
   36294:	7018      	strb	r0, [r3, #0]
   36296:	070b      	lsls	r3, r1, #28
   36298:	d504      	bpl.n	362a4 <_svfiprintf_r+0xc0>
   3629a:	2353      	movs	r3, #83	; 0x53
   3629c:	202b      	movs	r0, #43	; 0x2b
   3629e:	ae02      	add	r6, sp, #8
   362a0:	199b      	adds	r3, r3, r6
   362a2:	7018      	strb	r0, [r3, #0]
   362a4:	7823      	ldrb	r3, [r4, #0]
   362a6:	2b2a      	cmp	r3, #42	; 0x2a
   362a8:	d016      	beq.n	362d8 <_svfiprintf_r+0xf4>
   362aa:	2000      	movs	r0, #0
   362ac:	210a      	movs	r1, #10
   362ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   362b0:	7822      	ldrb	r2, [r4, #0]
   362b2:	3a30      	subs	r2, #48	; 0x30
   362b4:	2a09      	cmp	r2, #9
   362b6:	d955      	bls.n	36364 <_svfiprintf_r+0x180>
   362b8:	2800      	cmp	r0, #0
   362ba:	d015      	beq.n	362e8 <_svfiprintf_r+0x104>
   362bc:	9309      	str	r3, [sp, #36]	; 0x24
   362be:	e013      	b.n	362e8 <_svfiprintf_r+0x104>
   362c0:	2b25      	cmp	r3, #37	; 0x25
   362c2:	d0b5      	beq.n	36230 <_svfiprintf_r+0x4c>
   362c4:	3401      	adds	r4, #1
   362c6:	e7b0      	b.n	3622a <_svfiprintf_r+0x46>
   362c8:	2301      	movs	r3, #1
   362ca:	1b80      	subs	r0, r0, r6
   362cc:	4083      	lsls	r3, r0
   362ce:	6829      	ldr	r1, [r5, #0]
   362d0:	0014      	movs	r4, r2
   362d2:	430b      	orrs	r3, r1
   362d4:	602b      	str	r3, [r5, #0]
   362d6:	e7cd      	b.n	36274 <_svfiprintf_r+0x90>
   362d8:	9b05      	ldr	r3, [sp, #20]
   362da:	1d18      	adds	r0, r3, #4
   362dc:	681b      	ldr	r3, [r3, #0]
   362de:	9005      	str	r0, [sp, #20]
   362e0:	2b00      	cmp	r3, #0
   362e2:	db39      	blt.n	36358 <_svfiprintf_r+0x174>
   362e4:	9309      	str	r3, [sp, #36]	; 0x24
   362e6:	0014      	movs	r4, r2
   362e8:	7823      	ldrb	r3, [r4, #0]
   362ea:	2b2e      	cmp	r3, #46	; 0x2e
   362ec:	d10b      	bne.n	36306 <_svfiprintf_r+0x122>
   362ee:	7863      	ldrb	r3, [r4, #1]
   362f0:	1c62      	adds	r2, r4, #1
   362f2:	2b2a      	cmp	r3, #42	; 0x2a
   362f4:	d13e      	bne.n	36374 <_svfiprintf_r+0x190>
   362f6:	9b05      	ldr	r3, [sp, #20]
   362f8:	3402      	adds	r4, #2
   362fa:	1d1a      	adds	r2, r3, #4
   362fc:	681b      	ldr	r3, [r3, #0]
   362fe:	9205      	str	r2, [sp, #20]
   36300:	2b00      	cmp	r3, #0
   36302:	db34      	blt.n	3636e <_svfiprintf_r+0x18a>
   36304:	9307      	str	r3, [sp, #28]
   36306:	4e35      	ldr	r6, [pc, #212]	; (363dc <_svfiprintf_r+0x1f8>)
   36308:	7821      	ldrb	r1, [r4, #0]
   3630a:	2203      	movs	r2, #3
   3630c:	0030      	movs	r0, r6
   3630e:	f000 fab9 	bl	36884 <memchr>
   36312:	2800      	cmp	r0, #0
   36314:	d006      	beq.n	36324 <_svfiprintf_r+0x140>
   36316:	2340      	movs	r3, #64	; 0x40
   36318:	1b80      	subs	r0, r0, r6
   3631a:	4083      	lsls	r3, r0
   3631c:	682a      	ldr	r2, [r5, #0]
   3631e:	3401      	adds	r4, #1
   36320:	4313      	orrs	r3, r2
   36322:	602b      	str	r3, [r5, #0]
   36324:	7821      	ldrb	r1, [r4, #0]
   36326:	2206      	movs	r2, #6
   36328:	482d      	ldr	r0, [pc, #180]	; (363e0 <_svfiprintf_r+0x1fc>)
   3632a:	1c66      	adds	r6, r4, #1
   3632c:	7629      	strb	r1, [r5, #24]
   3632e:	f000 faa9 	bl	36884 <memchr>
   36332:	2800      	cmp	r0, #0
   36334:	d046      	beq.n	363c4 <_svfiprintf_r+0x1e0>
   36336:	4b2b      	ldr	r3, [pc, #172]	; (363e4 <_svfiprintf_r+0x200>)
   36338:	2b00      	cmp	r3, #0
   3633a:	d12f      	bne.n	3639c <_svfiprintf_r+0x1b8>
   3633c:	6829      	ldr	r1, [r5, #0]
   3633e:	9b05      	ldr	r3, [sp, #20]
   36340:	2207      	movs	r2, #7
   36342:	05c9      	lsls	r1, r1, #23
   36344:	d528      	bpl.n	36398 <_svfiprintf_r+0x1b4>
   36346:	189b      	adds	r3, r3, r2
   36348:	4393      	bics	r3, r2
   3634a:	3308      	adds	r3, #8
   3634c:	9305      	str	r3, [sp, #20]
   3634e:	696b      	ldr	r3, [r5, #20]
   36350:	9a03      	ldr	r2, [sp, #12]
   36352:	189b      	adds	r3, r3, r2
   36354:	616b      	str	r3, [r5, #20]
   36356:	e767      	b.n	36228 <_svfiprintf_r+0x44>
   36358:	425b      	negs	r3, r3
   3635a:	60eb      	str	r3, [r5, #12]
   3635c:	2302      	movs	r3, #2
   3635e:	430b      	orrs	r3, r1
   36360:	602b      	str	r3, [r5, #0]
   36362:	e7c0      	b.n	362e6 <_svfiprintf_r+0x102>
   36364:	434b      	muls	r3, r1
   36366:	3401      	adds	r4, #1
   36368:	189b      	adds	r3, r3, r2
   3636a:	2001      	movs	r0, #1
   3636c:	e7a0      	b.n	362b0 <_svfiprintf_r+0xcc>
   3636e:	2301      	movs	r3, #1
   36370:	425b      	negs	r3, r3
   36372:	e7c7      	b.n	36304 <_svfiprintf_r+0x120>
   36374:	2300      	movs	r3, #0
   36376:	0014      	movs	r4, r2
   36378:	200a      	movs	r0, #10
   3637a:	001a      	movs	r2, r3
   3637c:	606b      	str	r3, [r5, #4]
   3637e:	7821      	ldrb	r1, [r4, #0]
   36380:	3930      	subs	r1, #48	; 0x30
   36382:	2909      	cmp	r1, #9
   36384:	d903      	bls.n	3638e <_svfiprintf_r+0x1aa>
   36386:	2b00      	cmp	r3, #0
   36388:	d0bd      	beq.n	36306 <_svfiprintf_r+0x122>
   3638a:	9207      	str	r2, [sp, #28]
   3638c:	e7bb      	b.n	36306 <_svfiprintf_r+0x122>
   3638e:	4342      	muls	r2, r0
   36390:	3401      	adds	r4, #1
   36392:	1852      	adds	r2, r2, r1
   36394:	2301      	movs	r3, #1
   36396:	e7f2      	b.n	3637e <_svfiprintf_r+0x19a>
   36398:	3307      	adds	r3, #7
   3639a:	e7d5      	b.n	36348 <_svfiprintf_r+0x164>
   3639c:	ab05      	add	r3, sp, #20
   3639e:	9300      	str	r3, [sp, #0]
   363a0:	003a      	movs	r2, r7
   363a2:	4b11      	ldr	r3, [pc, #68]	; (363e8 <_svfiprintf_r+0x204>)
   363a4:	0029      	movs	r1, r5
   363a6:	9802      	ldr	r0, [sp, #8]
   363a8:	e000      	b.n	363ac <_svfiprintf_r+0x1c8>
   363aa:	bf00      	nop
   363ac:	9003      	str	r0, [sp, #12]
   363ae:	9b03      	ldr	r3, [sp, #12]
   363b0:	3301      	adds	r3, #1
   363b2:	d1cc      	bne.n	3634e <_svfiprintf_r+0x16a>
   363b4:	89bb      	ldrh	r3, [r7, #12]
   363b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   363b8:	065b      	lsls	r3, r3, #25
   363ba:	d400      	bmi.n	363be <_svfiprintf_r+0x1da>
   363bc:	e729      	b.n	36212 <_svfiprintf_r+0x2e>
   363be:	2001      	movs	r0, #1
   363c0:	4240      	negs	r0, r0
   363c2:	e726      	b.n	36212 <_svfiprintf_r+0x2e>
   363c4:	ab05      	add	r3, sp, #20
   363c6:	9300      	str	r3, [sp, #0]
   363c8:	003a      	movs	r2, r7
   363ca:	4b07      	ldr	r3, [pc, #28]	; (363e8 <_svfiprintf_r+0x204>)
   363cc:	0029      	movs	r1, r5
   363ce:	9802      	ldr	r0, [sp, #8]
   363d0:	f000 f87a 	bl	364c8 <_printf_i>
   363d4:	e7ea      	b.n	363ac <_svfiprintf_r+0x1c8>
   363d6:	46c0      	nop			; (mov r8, r8)
   363d8:	0003ad8a 	.word	0x0003ad8a
   363dc:	0003ad90 	.word	0x0003ad90
   363e0:	0003ad94 	.word	0x0003ad94
   363e4:	00000000 	.word	0x00000000
   363e8:	00036121 	.word	0x00036121

000363ec <_printf_common>:
   363ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   363ee:	0015      	movs	r5, r2
   363f0:	9301      	str	r3, [sp, #4]
   363f2:	688a      	ldr	r2, [r1, #8]
   363f4:	690b      	ldr	r3, [r1, #16]
   363f6:	9000      	str	r0, [sp, #0]
   363f8:	000c      	movs	r4, r1
   363fa:	4293      	cmp	r3, r2
   363fc:	da00      	bge.n	36400 <_printf_common+0x14>
   363fe:	0013      	movs	r3, r2
   36400:	0022      	movs	r2, r4
   36402:	602b      	str	r3, [r5, #0]
   36404:	3243      	adds	r2, #67	; 0x43
   36406:	7812      	ldrb	r2, [r2, #0]
   36408:	2a00      	cmp	r2, #0
   3640a:	d001      	beq.n	36410 <_printf_common+0x24>
   3640c:	3301      	adds	r3, #1
   3640e:	602b      	str	r3, [r5, #0]
   36410:	6823      	ldr	r3, [r4, #0]
   36412:	069b      	lsls	r3, r3, #26
   36414:	d502      	bpl.n	3641c <_printf_common+0x30>
   36416:	682b      	ldr	r3, [r5, #0]
   36418:	3302      	adds	r3, #2
   3641a:	602b      	str	r3, [r5, #0]
   3641c:	2706      	movs	r7, #6
   3641e:	6823      	ldr	r3, [r4, #0]
   36420:	401f      	ands	r7, r3
   36422:	d027      	beq.n	36474 <_printf_common+0x88>
   36424:	0023      	movs	r3, r4
   36426:	3343      	adds	r3, #67	; 0x43
   36428:	781b      	ldrb	r3, [r3, #0]
   3642a:	1e5a      	subs	r2, r3, #1
   3642c:	4193      	sbcs	r3, r2
   3642e:	6822      	ldr	r2, [r4, #0]
   36430:	0692      	lsls	r2, r2, #26
   36432:	d430      	bmi.n	36496 <_printf_common+0xaa>
   36434:	0022      	movs	r2, r4
   36436:	9901      	ldr	r1, [sp, #4]
   36438:	3243      	adds	r2, #67	; 0x43
   3643a:	9800      	ldr	r0, [sp, #0]
   3643c:	9e08      	ldr	r6, [sp, #32]
   3643e:	47b0      	blx	r6
   36440:	1c43      	adds	r3, r0, #1
   36442:	d025      	beq.n	36490 <_printf_common+0xa4>
   36444:	2306      	movs	r3, #6
   36446:	6820      	ldr	r0, [r4, #0]
   36448:	682a      	ldr	r2, [r5, #0]
   3644a:	68e1      	ldr	r1, [r4, #12]
   3644c:	4003      	ands	r3, r0
   3644e:	2500      	movs	r5, #0
   36450:	2b04      	cmp	r3, #4
   36452:	d103      	bne.n	3645c <_printf_common+0x70>
   36454:	1a8d      	subs	r5, r1, r2
   36456:	43eb      	mvns	r3, r5
   36458:	17db      	asrs	r3, r3, #31
   3645a:	401d      	ands	r5, r3
   3645c:	68a3      	ldr	r3, [r4, #8]
   3645e:	6922      	ldr	r2, [r4, #16]
   36460:	4293      	cmp	r3, r2
   36462:	dd01      	ble.n	36468 <_printf_common+0x7c>
   36464:	1a9b      	subs	r3, r3, r2
   36466:	18ed      	adds	r5, r5, r3
   36468:	2700      	movs	r7, #0
   3646a:	42bd      	cmp	r5, r7
   3646c:	d120      	bne.n	364b0 <_printf_common+0xc4>
   3646e:	2000      	movs	r0, #0
   36470:	e010      	b.n	36494 <_printf_common+0xa8>
   36472:	3701      	adds	r7, #1
   36474:	68e3      	ldr	r3, [r4, #12]
   36476:	682a      	ldr	r2, [r5, #0]
   36478:	1a9b      	subs	r3, r3, r2
   3647a:	429f      	cmp	r7, r3
   3647c:	dad2      	bge.n	36424 <_printf_common+0x38>
   3647e:	0022      	movs	r2, r4
   36480:	2301      	movs	r3, #1
   36482:	3219      	adds	r2, #25
   36484:	9901      	ldr	r1, [sp, #4]
   36486:	9800      	ldr	r0, [sp, #0]
   36488:	9e08      	ldr	r6, [sp, #32]
   3648a:	47b0      	blx	r6
   3648c:	1c43      	adds	r3, r0, #1
   3648e:	d1f0      	bne.n	36472 <_printf_common+0x86>
   36490:	2001      	movs	r0, #1
   36492:	4240      	negs	r0, r0
   36494:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   36496:	2030      	movs	r0, #48	; 0x30
   36498:	18e1      	adds	r1, r4, r3
   3649a:	3143      	adds	r1, #67	; 0x43
   3649c:	7008      	strb	r0, [r1, #0]
   3649e:	0021      	movs	r1, r4
   364a0:	1c5a      	adds	r2, r3, #1
   364a2:	3145      	adds	r1, #69	; 0x45
   364a4:	7809      	ldrb	r1, [r1, #0]
   364a6:	18a2      	adds	r2, r4, r2
   364a8:	3243      	adds	r2, #67	; 0x43
   364aa:	3302      	adds	r3, #2
   364ac:	7011      	strb	r1, [r2, #0]
   364ae:	e7c1      	b.n	36434 <_printf_common+0x48>
   364b0:	0022      	movs	r2, r4
   364b2:	2301      	movs	r3, #1
   364b4:	321a      	adds	r2, #26
   364b6:	9901      	ldr	r1, [sp, #4]
   364b8:	9800      	ldr	r0, [sp, #0]
   364ba:	9e08      	ldr	r6, [sp, #32]
   364bc:	47b0      	blx	r6
   364be:	1c43      	adds	r3, r0, #1
   364c0:	d0e6      	beq.n	36490 <_printf_common+0xa4>
   364c2:	3701      	adds	r7, #1
   364c4:	e7d1      	b.n	3646a <_printf_common+0x7e>
	...

000364c8 <_printf_i>:
   364c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   364ca:	b08b      	sub	sp, #44	; 0x2c
   364cc:	9206      	str	r2, [sp, #24]
   364ce:	000a      	movs	r2, r1
   364d0:	3243      	adds	r2, #67	; 0x43
   364d2:	9307      	str	r3, [sp, #28]
   364d4:	9005      	str	r0, [sp, #20]
   364d6:	9204      	str	r2, [sp, #16]
   364d8:	7e0a      	ldrb	r2, [r1, #24]
   364da:	000c      	movs	r4, r1
   364dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   364de:	2a6e      	cmp	r2, #110	; 0x6e
   364e0:	d100      	bne.n	364e4 <_printf_i+0x1c>
   364e2:	e08f      	b.n	36604 <_printf_i+0x13c>
   364e4:	d817      	bhi.n	36516 <_printf_i+0x4e>
   364e6:	2a63      	cmp	r2, #99	; 0x63
   364e8:	d02c      	beq.n	36544 <_printf_i+0x7c>
   364ea:	d808      	bhi.n	364fe <_printf_i+0x36>
   364ec:	2a00      	cmp	r2, #0
   364ee:	d100      	bne.n	364f2 <_printf_i+0x2a>
   364f0:	e099      	b.n	36626 <_printf_i+0x15e>
   364f2:	2a58      	cmp	r2, #88	; 0x58
   364f4:	d054      	beq.n	365a0 <_printf_i+0xd8>
   364f6:	0026      	movs	r6, r4
   364f8:	3642      	adds	r6, #66	; 0x42
   364fa:	7032      	strb	r2, [r6, #0]
   364fc:	e029      	b.n	36552 <_printf_i+0x8a>
   364fe:	2a64      	cmp	r2, #100	; 0x64
   36500:	d001      	beq.n	36506 <_printf_i+0x3e>
   36502:	2a69      	cmp	r2, #105	; 0x69
   36504:	d1f7      	bne.n	364f6 <_printf_i+0x2e>
   36506:	6821      	ldr	r1, [r4, #0]
   36508:	681a      	ldr	r2, [r3, #0]
   3650a:	0608      	lsls	r0, r1, #24
   3650c:	d523      	bpl.n	36556 <_printf_i+0x8e>
   3650e:	1d11      	adds	r1, r2, #4
   36510:	6019      	str	r1, [r3, #0]
   36512:	6815      	ldr	r5, [r2, #0]
   36514:	e025      	b.n	36562 <_printf_i+0x9a>
   36516:	2a73      	cmp	r2, #115	; 0x73
   36518:	d100      	bne.n	3651c <_printf_i+0x54>
   3651a:	e088      	b.n	3662e <_printf_i+0x166>
   3651c:	d808      	bhi.n	36530 <_printf_i+0x68>
   3651e:	2a6f      	cmp	r2, #111	; 0x6f
   36520:	d029      	beq.n	36576 <_printf_i+0xae>
   36522:	2a70      	cmp	r2, #112	; 0x70
   36524:	d1e7      	bne.n	364f6 <_printf_i+0x2e>
   36526:	2220      	movs	r2, #32
   36528:	6809      	ldr	r1, [r1, #0]
   3652a:	430a      	orrs	r2, r1
   3652c:	6022      	str	r2, [r4, #0]
   3652e:	e003      	b.n	36538 <_printf_i+0x70>
   36530:	2a75      	cmp	r2, #117	; 0x75
   36532:	d020      	beq.n	36576 <_printf_i+0xae>
   36534:	2a78      	cmp	r2, #120	; 0x78
   36536:	d1de      	bne.n	364f6 <_printf_i+0x2e>
   36538:	0022      	movs	r2, r4
   3653a:	2178      	movs	r1, #120	; 0x78
   3653c:	3245      	adds	r2, #69	; 0x45
   3653e:	7011      	strb	r1, [r2, #0]
   36540:	4a6c      	ldr	r2, [pc, #432]	; (366f4 <_printf_i+0x22c>)
   36542:	e030      	b.n	365a6 <_printf_i+0xde>
   36544:	000e      	movs	r6, r1
   36546:	681a      	ldr	r2, [r3, #0]
   36548:	3642      	adds	r6, #66	; 0x42
   3654a:	1d11      	adds	r1, r2, #4
   3654c:	6019      	str	r1, [r3, #0]
   3654e:	6813      	ldr	r3, [r2, #0]
   36550:	7033      	strb	r3, [r6, #0]
   36552:	2301      	movs	r3, #1
   36554:	e079      	b.n	3664a <_printf_i+0x182>
   36556:	0649      	lsls	r1, r1, #25
   36558:	d5d9      	bpl.n	3650e <_printf_i+0x46>
   3655a:	1d11      	adds	r1, r2, #4
   3655c:	6019      	str	r1, [r3, #0]
   3655e:	2300      	movs	r3, #0
   36560:	5ed5      	ldrsh	r5, [r2, r3]
   36562:	2d00      	cmp	r5, #0
   36564:	da03      	bge.n	3656e <_printf_i+0xa6>
   36566:	232d      	movs	r3, #45	; 0x2d
   36568:	9a04      	ldr	r2, [sp, #16]
   3656a:	426d      	negs	r5, r5
   3656c:	7013      	strb	r3, [r2, #0]
   3656e:	4b62      	ldr	r3, [pc, #392]	; (366f8 <_printf_i+0x230>)
   36570:	270a      	movs	r7, #10
   36572:	9303      	str	r3, [sp, #12]
   36574:	e02f      	b.n	365d6 <_printf_i+0x10e>
   36576:	6820      	ldr	r0, [r4, #0]
   36578:	6819      	ldr	r1, [r3, #0]
   3657a:	0605      	lsls	r5, r0, #24
   3657c:	d503      	bpl.n	36586 <_printf_i+0xbe>
   3657e:	1d08      	adds	r0, r1, #4
   36580:	6018      	str	r0, [r3, #0]
   36582:	680d      	ldr	r5, [r1, #0]
   36584:	e005      	b.n	36592 <_printf_i+0xca>
   36586:	0640      	lsls	r0, r0, #25
   36588:	d5f9      	bpl.n	3657e <_printf_i+0xb6>
   3658a:	680d      	ldr	r5, [r1, #0]
   3658c:	1d08      	adds	r0, r1, #4
   3658e:	6018      	str	r0, [r3, #0]
   36590:	b2ad      	uxth	r5, r5
   36592:	4b59      	ldr	r3, [pc, #356]	; (366f8 <_printf_i+0x230>)
   36594:	2708      	movs	r7, #8
   36596:	9303      	str	r3, [sp, #12]
   36598:	2a6f      	cmp	r2, #111	; 0x6f
   3659a:	d018      	beq.n	365ce <_printf_i+0x106>
   3659c:	270a      	movs	r7, #10
   3659e:	e016      	b.n	365ce <_printf_i+0x106>
   365a0:	3145      	adds	r1, #69	; 0x45
   365a2:	700a      	strb	r2, [r1, #0]
   365a4:	4a54      	ldr	r2, [pc, #336]	; (366f8 <_printf_i+0x230>)
   365a6:	9203      	str	r2, [sp, #12]
   365a8:	681a      	ldr	r2, [r3, #0]
   365aa:	6821      	ldr	r1, [r4, #0]
   365ac:	1d10      	adds	r0, r2, #4
   365ae:	6018      	str	r0, [r3, #0]
   365b0:	6815      	ldr	r5, [r2, #0]
   365b2:	0608      	lsls	r0, r1, #24
   365b4:	d522      	bpl.n	365fc <_printf_i+0x134>
   365b6:	07cb      	lsls	r3, r1, #31
   365b8:	d502      	bpl.n	365c0 <_printf_i+0xf8>
   365ba:	2320      	movs	r3, #32
   365bc:	4319      	orrs	r1, r3
   365be:	6021      	str	r1, [r4, #0]
   365c0:	2710      	movs	r7, #16
   365c2:	2d00      	cmp	r5, #0
   365c4:	d103      	bne.n	365ce <_printf_i+0x106>
   365c6:	2320      	movs	r3, #32
   365c8:	6822      	ldr	r2, [r4, #0]
   365ca:	439a      	bics	r2, r3
   365cc:	6022      	str	r2, [r4, #0]
   365ce:	0023      	movs	r3, r4
   365d0:	2200      	movs	r2, #0
   365d2:	3343      	adds	r3, #67	; 0x43
   365d4:	701a      	strb	r2, [r3, #0]
   365d6:	6863      	ldr	r3, [r4, #4]
   365d8:	60a3      	str	r3, [r4, #8]
   365da:	2b00      	cmp	r3, #0
   365dc:	db5c      	blt.n	36698 <_printf_i+0x1d0>
   365de:	2204      	movs	r2, #4
   365e0:	6821      	ldr	r1, [r4, #0]
   365e2:	4391      	bics	r1, r2
   365e4:	6021      	str	r1, [r4, #0]
   365e6:	2d00      	cmp	r5, #0
   365e8:	d158      	bne.n	3669c <_printf_i+0x1d4>
   365ea:	9e04      	ldr	r6, [sp, #16]
   365ec:	2b00      	cmp	r3, #0
   365ee:	d064      	beq.n	366ba <_printf_i+0x1f2>
   365f0:	0026      	movs	r6, r4
   365f2:	9b03      	ldr	r3, [sp, #12]
   365f4:	3642      	adds	r6, #66	; 0x42
   365f6:	781b      	ldrb	r3, [r3, #0]
   365f8:	7033      	strb	r3, [r6, #0]
   365fa:	e05e      	b.n	366ba <_printf_i+0x1f2>
   365fc:	0648      	lsls	r0, r1, #25
   365fe:	d5da      	bpl.n	365b6 <_printf_i+0xee>
   36600:	b2ad      	uxth	r5, r5
   36602:	e7d8      	b.n	365b6 <_printf_i+0xee>
   36604:	6809      	ldr	r1, [r1, #0]
   36606:	681a      	ldr	r2, [r3, #0]
   36608:	0608      	lsls	r0, r1, #24
   3660a:	d505      	bpl.n	36618 <_printf_i+0x150>
   3660c:	1d11      	adds	r1, r2, #4
   3660e:	6019      	str	r1, [r3, #0]
   36610:	6813      	ldr	r3, [r2, #0]
   36612:	6962      	ldr	r2, [r4, #20]
   36614:	601a      	str	r2, [r3, #0]
   36616:	e006      	b.n	36626 <_printf_i+0x15e>
   36618:	0649      	lsls	r1, r1, #25
   3661a:	d5f7      	bpl.n	3660c <_printf_i+0x144>
   3661c:	1d11      	adds	r1, r2, #4
   3661e:	6019      	str	r1, [r3, #0]
   36620:	6813      	ldr	r3, [r2, #0]
   36622:	8aa2      	ldrh	r2, [r4, #20]
   36624:	801a      	strh	r2, [r3, #0]
   36626:	2300      	movs	r3, #0
   36628:	9e04      	ldr	r6, [sp, #16]
   3662a:	6123      	str	r3, [r4, #16]
   3662c:	e054      	b.n	366d8 <_printf_i+0x210>
   3662e:	681a      	ldr	r2, [r3, #0]
   36630:	1d11      	adds	r1, r2, #4
   36632:	6019      	str	r1, [r3, #0]
   36634:	6816      	ldr	r6, [r2, #0]
   36636:	2100      	movs	r1, #0
   36638:	6862      	ldr	r2, [r4, #4]
   3663a:	0030      	movs	r0, r6
   3663c:	f000 f922 	bl	36884 <memchr>
   36640:	2800      	cmp	r0, #0
   36642:	d001      	beq.n	36648 <_printf_i+0x180>
   36644:	1b80      	subs	r0, r0, r6
   36646:	6060      	str	r0, [r4, #4]
   36648:	6863      	ldr	r3, [r4, #4]
   3664a:	6123      	str	r3, [r4, #16]
   3664c:	2300      	movs	r3, #0
   3664e:	9a04      	ldr	r2, [sp, #16]
   36650:	7013      	strb	r3, [r2, #0]
   36652:	e041      	b.n	366d8 <_printf_i+0x210>
   36654:	6923      	ldr	r3, [r4, #16]
   36656:	0032      	movs	r2, r6
   36658:	9906      	ldr	r1, [sp, #24]
   3665a:	9805      	ldr	r0, [sp, #20]
   3665c:	9d07      	ldr	r5, [sp, #28]
   3665e:	47a8      	blx	r5
   36660:	1c43      	adds	r3, r0, #1
   36662:	d043      	beq.n	366ec <_printf_i+0x224>
   36664:	6823      	ldr	r3, [r4, #0]
   36666:	2500      	movs	r5, #0
   36668:	079b      	lsls	r3, r3, #30
   3666a:	d40f      	bmi.n	3668c <_printf_i+0x1c4>
   3666c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3666e:	68e0      	ldr	r0, [r4, #12]
   36670:	4298      	cmp	r0, r3
   36672:	da3d      	bge.n	366f0 <_printf_i+0x228>
   36674:	0018      	movs	r0, r3
   36676:	e03b      	b.n	366f0 <_printf_i+0x228>
   36678:	0022      	movs	r2, r4
   3667a:	2301      	movs	r3, #1
   3667c:	3219      	adds	r2, #25
   3667e:	9906      	ldr	r1, [sp, #24]
   36680:	9805      	ldr	r0, [sp, #20]
   36682:	9e07      	ldr	r6, [sp, #28]
   36684:	47b0      	blx	r6
   36686:	1c43      	adds	r3, r0, #1
   36688:	d030      	beq.n	366ec <_printf_i+0x224>
   3668a:	3501      	adds	r5, #1
   3668c:	68e3      	ldr	r3, [r4, #12]
   3668e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   36690:	1a9b      	subs	r3, r3, r2
   36692:	429d      	cmp	r5, r3
   36694:	dbf0      	blt.n	36678 <_printf_i+0x1b0>
   36696:	e7e9      	b.n	3666c <_printf_i+0x1a4>
   36698:	2d00      	cmp	r5, #0
   3669a:	d0a9      	beq.n	365f0 <_printf_i+0x128>
   3669c:	9e04      	ldr	r6, [sp, #16]
   3669e:	0028      	movs	r0, r5
   366a0:	0039      	movs	r1, r7
   366a2:	f7fc ffe7 	bl	33674 <__aeabi_uidivmod>
   366a6:	9b03      	ldr	r3, [sp, #12]
   366a8:	3e01      	subs	r6, #1
   366aa:	5c5b      	ldrb	r3, [r3, r1]
   366ac:	0028      	movs	r0, r5
   366ae:	7033      	strb	r3, [r6, #0]
   366b0:	0039      	movs	r1, r7
   366b2:	f7fc ff59 	bl	33568 <__udivsi3>
   366b6:	1e05      	subs	r5, r0, #0
   366b8:	d1f1      	bne.n	3669e <_printf_i+0x1d6>
   366ba:	2f08      	cmp	r7, #8
   366bc:	d109      	bne.n	366d2 <_printf_i+0x20a>
   366be:	6823      	ldr	r3, [r4, #0]
   366c0:	07db      	lsls	r3, r3, #31
   366c2:	d506      	bpl.n	366d2 <_printf_i+0x20a>
   366c4:	6863      	ldr	r3, [r4, #4]
   366c6:	6922      	ldr	r2, [r4, #16]
   366c8:	4293      	cmp	r3, r2
   366ca:	dc02      	bgt.n	366d2 <_printf_i+0x20a>
   366cc:	2330      	movs	r3, #48	; 0x30
   366ce:	3e01      	subs	r6, #1
   366d0:	7033      	strb	r3, [r6, #0]
   366d2:	9b04      	ldr	r3, [sp, #16]
   366d4:	1b9b      	subs	r3, r3, r6
   366d6:	6123      	str	r3, [r4, #16]
   366d8:	9b07      	ldr	r3, [sp, #28]
   366da:	aa09      	add	r2, sp, #36	; 0x24
   366dc:	9300      	str	r3, [sp, #0]
   366de:	0021      	movs	r1, r4
   366e0:	9b06      	ldr	r3, [sp, #24]
   366e2:	9805      	ldr	r0, [sp, #20]
   366e4:	f7ff fe82 	bl	363ec <_printf_common>
   366e8:	1c43      	adds	r3, r0, #1
   366ea:	d1b3      	bne.n	36654 <_printf_i+0x18c>
   366ec:	2001      	movs	r0, #1
   366ee:	4240      	negs	r0, r0
   366f0:	b00b      	add	sp, #44	; 0x2c
   366f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   366f4:	0003adac 	.word	0x0003adac
   366f8:	0003ad9b 	.word	0x0003ad9b

000366fc <__sread>:
   366fc:	b570      	push	{r4, r5, r6, lr}
   366fe:	000c      	movs	r4, r1
   36700:	250e      	movs	r5, #14
   36702:	5f49      	ldrsh	r1, [r1, r5]
   36704:	f000 f8f0 	bl	368e8 <_read_r>
   36708:	2800      	cmp	r0, #0
   3670a:	db03      	blt.n	36714 <__sread+0x18>
   3670c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3670e:	181b      	adds	r3, r3, r0
   36710:	6563      	str	r3, [r4, #84]	; 0x54
   36712:	bd70      	pop	{r4, r5, r6, pc}
   36714:	89a3      	ldrh	r3, [r4, #12]
   36716:	4a02      	ldr	r2, [pc, #8]	; (36720 <__sread+0x24>)
   36718:	4013      	ands	r3, r2
   3671a:	81a3      	strh	r3, [r4, #12]
   3671c:	e7f9      	b.n	36712 <__sread+0x16>
   3671e:	46c0      	nop			; (mov r8, r8)
   36720:	ffffefff 	.word	0xffffefff

00036724 <__swrite>:
   36724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36726:	001f      	movs	r7, r3
   36728:	898b      	ldrh	r3, [r1, #12]
   3672a:	0005      	movs	r5, r0
   3672c:	000c      	movs	r4, r1
   3672e:	0016      	movs	r6, r2
   36730:	05db      	lsls	r3, r3, #23
   36732:	d505      	bpl.n	36740 <__swrite+0x1c>
   36734:	230e      	movs	r3, #14
   36736:	5ec9      	ldrsh	r1, [r1, r3]
   36738:	2200      	movs	r2, #0
   3673a:	2302      	movs	r3, #2
   3673c:	f000 f88e 	bl	3685c <_lseek_r>
   36740:	89a3      	ldrh	r3, [r4, #12]
   36742:	4a05      	ldr	r2, [pc, #20]	; (36758 <__swrite+0x34>)
   36744:	0028      	movs	r0, r5
   36746:	4013      	ands	r3, r2
   36748:	81a3      	strh	r3, [r4, #12]
   3674a:	0032      	movs	r2, r6
   3674c:	230e      	movs	r3, #14
   3674e:	5ee1      	ldrsh	r1, [r4, r3]
   36750:	003b      	movs	r3, r7
   36752:	f000 f839 	bl	367c8 <_write_r>
   36756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36758:	ffffefff 	.word	0xffffefff

0003675c <__sseek>:
   3675c:	b570      	push	{r4, r5, r6, lr}
   3675e:	000c      	movs	r4, r1
   36760:	250e      	movs	r5, #14
   36762:	5f49      	ldrsh	r1, [r1, r5]
   36764:	f000 f87a 	bl	3685c <_lseek_r>
   36768:	89a3      	ldrh	r3, [r4, #12]
   3676a:	1c42      	adds	r2, r0, #1
   3676c:	d103      	bne.n	36776 <__sseek+0x1a>
   3676e:	4a05      	ldr	r2, [pc, #20]	; (36784 <__sseek+0x28>)
   36770:	4013      	ands	r3, r2
   36772:	81a3      	strh	r3, [r4, #12]
   36774:	bd70      	pop	{r4, r5, r6, pc}
   36776:	2280      	movs	r2, #128	; 0x80
   36778:	0152      	lsls	r2, r2, #5
   3677a:	4313      	orrs	r3, r2
   3677c:	81a3      	strh	r3, [r4, #12]
   3677e:	6560      	str	r0, [r4, #84]	; 0x54
   36780:	e7f8      	b.n	36774 <__sseek+0x18>
   36782:	46c0      	nop			; (mov r8, r8)
   36784:	ffffefff 	.word	0xffffefff

00036788 <__sclose>:
   36788:	b510      	push	{r4, lr}
   3678a:	230e      	movs	r3, #14
   3678c:	5ec9      	ldrsh	r1, [r1, r3]
   3678e:	f000 f82f 	bl	367f0 <_close_r>
   36792:	bd10      	pop	{r4, pc}

00036794 <strchr>:
   36794:	b2c9      	uxtb	r1, r1
   36796:	7803      	ldrb	r3, [r0, #0]
   36798:	2b00      	cmp	r3, #0
   3679a:	d004      	beq.n	367a6 <strchr+0x12>
   3679c:	4299      	cmp	r1, r3
   3679e:	d100      	bne.n	367a2 <strchr+0xe>
   367a0:	4770      	bx	lr
   367a2:	3001      	adds	r0, #1
   367a4:	e7f7      	b.n	36796 <strchr+0x2>
   367a6:	424b      	negs	r3, r1
   367a8:	4159      	adcs	r1, r3
   367aa:	4249      	negs	r1, r1
   367ac:	4008      	ands	r0, r1
   367ae:	e7f7      	b.n	367a0 <strchr+0xc>

000367b0 <__ascii_wctomb>:
   367b0:	1e0b      	subs	r3, r1, #0
   367b2:	d004      	beq.n	367be <__ascii_wctomb+0xe>
   367b4:	2aff      	cmp	r2, #255	; 0xff
   367b6:	d904      	bls.n	367c2 <__ascii_wctomb+0x12>
   367b8:	238a      	movs	r3, #138	; 0x8a
   367ba:	6003      	str	r3, [r0, #0]
   367bc:	3b8b      	subs	r3, #139	; 0x8b
   367be:	0018      	movs	r0, r3
   367c0:	4770      	bx	lr
   367c2:	700a      	strb	r2, [r1, #0]
   367c4:	2301      	movs	r3, #1
   367c6:	e7fa      	b.n	367be <__ascii_wctomb+0xe>

000367c8 <_write_r>:
   367c8:	b570      	push	{r4, r5, r6, lr}
   367ca:	0005      	movs	r5, r0
   367cc:	0008      	movs	r0, r1
   367ce:	0011      	movs	r1, r2
   367d0:	2200      	movs	r2, #0
   367d2:	4c06      	ldr	r4, [pc, #24]	; (367ec <_write_r+0x24>)
   367d4:	6022      	str	r2, [r4, #0]
   367d6:	001a      	movs	r2, r3
   367d8:	f7f5 fa28 	bl	2bc2c <_write>
   367dc:	1c43      	adds	r3, r0, #1
   367de:	d103      	bne.n	367e8 <_write_r+0x20>
   367e0:	6823      	ldr	r3, [r4, #0]
   367e2:	2b00      	cmp	r3, #0
   367e4:	d000      	beq.n	367e8 <_write_r+0x20>
   367e6:	602b      	str	r3, [r5, #0]
   367e8:	bd70      	pop	{r4, r5, r6, pc}
   367ea:	46c0      	nop			; (mov r8, r8)
   367ec:	200058c0 	.word	0x200058c0

000367f0 <_close_r>:
   367f0:	2300      	movs	r3, #0
   367f2:	b570      	push	{r4, r5, r6, lr}
   367f4:	4c06      	ldr	r4, [pc, #24]	; (36810 <_close_r+0x20>)
   367f6:	0005      	movs	r5, r0
   367f8:	0008      	movs	r0, r1
   367fa:	6023      	str	r3, [r4, #0]
   367fc:	f7f5 fa6a 	bl	2bcd4 <_close>
   36800:	1c43      	adds	r3, r0, #1
   36802:	d103      	bne.n	3680c <_close_r+0x1c>
   36804:	6823      	ldr	r3, [r4, #0]
   36806:	2b00      	cmp	r3, #0
   36808:	d000      	beq.n	3680c <_close_r+0x1c>
   3680a:	602b      	str	r3, [r5, #0]
   3680c:	bd70      	pop	{r4, r5, r6, pc}
   3680e:	46c0      	nop			; (mov r8, r8)
   36810:	200058c0 	.word	0x200058c0

00036814 <_fstat_r>:
   36814:	2300      	movs	r3, #0
   36816:	b570      	push	{r4, r5, r6, lr}
   36818:	4c06      	ldr	r4, [pc, #24]	; (36834 <_fstat_r+0x20>)
   3681a:	0005      	movs	r5, r0
   3681c:	0008      	movs	r0, r1
   3681e:	0011      	movs	r1, r2
   36820:	6023      	str	r3, [r4, #0]
   36822:	f7f5 fa61 	bl	2bce8 <_fstat>
   36826:	1c43      	adds	r3, r0, #1
   36828:	d103      	bne.n	36832 <_fstat_r+0x1e>
   3682a:	6823      	ldr	r3, [r4, #0]
   3682c:	2b00      	cmp	r3, #0
   3682e:	d000      	beq.n	36832 <_fstat_r+0x1e>
   36830:	602b      	str	r3, [r5, #0]
   36832:	bd70      	pop	{r4, r5, r6, pc}
   36834:	200058c0 	.word	0x200058c0

00036838 <_isatty_r>:
   36838:	2300      	movs	r3, #0
   3683a:	b570      	push	{r4, r5, r6, lr}
   3683c:	4c06      	ldr	r4, [pc, #24]	; (36858 <_isatty_r+0x20>)
   3683e:	0005      	movs	r5, r0
   36840:	0008      	movs	r0, r1
   36842:	6023      	str	r3, [r4, #0]
   36844:	f7f5 fa5e 	bl	2bd04 <_isatty>
   36848:	1c43      	adds	r3, r0, #1
   3684a:	d103      	bne.n	36854 <_isatty_r+0x1c>
   3684c:	6823      	ldr	r3, [r4, #0]
   3684e:	2b00      	cmp	r3, #0
   36850:	d000      	beq.n	36854 <_isatty_r+0x1c>
   36852:	602b      	str	r3, [r5, #0]
   36854:	bd70      	pop	{r4, r5, r6, pc}
   36856:	46c0      	nop			; (mov r8, r8)
   36858:	200058c0 	.word	0x200058c0

0003685c <_lseek_r>:
   3685c:	b570      	push	{r4, r5, r6, lr}
   3685e:	0005      	movs	r5, r0
   36860:	0008      	movs	r0, r1
   36862:	0011      	movs	r1, r2
   36864:	2200      	movs	r2, #0
   36866:	4c06      	ldr	r4, [pc, #24]	; (36880 <_lseek_r+0x24>)
   36868:	6022      	str	r2, [r4, #0]
   3686a:	001a      	movs	r2, r3
   3686c:	f7f5 fa53 	bl	2bd16 <_lseek>
   36870:	1c43      	adds	r3, r0, #1
   36872:	d103      	bne.n	3687c <_lseek_r+0x20>
   36874:	6823      	ldr	r3, [r4, #0]
   36876:	2b00      	cmp	r3, #0
   36878:	d000      	beq.n	3687c <_lseek_r+0x20>
   3687a:	602b      	str	r3, [r5, #0]
   3687c:	bd70      	pop	{r4, r5, r6, pc}
   3687e:	46c0      	nop			; (mov r8, r8)
   36880:	200058c0 	.word	0x200058c0

00036884 <memchr>:
   36884:	b2c9      	uxtb	r1, r1
   36886:	1882      	adds	r2, r0, r2
   36888:	4290      	cmp	r0, r2
   3688a:	d101      	bne.n	36890 <memchr+0xc>
   3688c:	2000      	movs	r0, #0
   3688e:	4770      	bx	lr
   36890:	7803      	ldrb	r3, [r0, #0]
   36892:	428b      	cmp	r3, r1
   36894:	d0fb      	beq.n	3688e <memchr+0xa>
   36896:	3001      	adds	r0, #1
   36898:	e7f6      	b.n	36888 <memchr+0x4>

0003689a <_realloc_r>:
   3689a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3689c:	0007      	movs	r7, r0
   3689e:	000d      	movs	r5, r1
   368a0:	0016      	movs	r6, r2
   368a2:	2900      	cmp	r1, #0
   368a4:	d105      	bne.n	368b2 <_realloc_r+0x18>
   368a6:	0011      	movs	r1, r2
   368a8:	f7fe fe9e 	bl	355e8 <_malloc_r>
   368ac:	0004      	movs	r4, r0
   368ae:	0020      	movs	r0, r4
   368b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   368b2:	2a00      	cmp	r2, #0
   368b4:	d103      	bne.n	368be <_realloc_r+0x24>
   368b6:	f7fe fe4d 	bl	35554 <_free_r>
   368ba:	0034      	movs	r4, r6
   368bc:	e7f7      	b.n	368ae <_realloc_r+0x14>
   368be:	f000 f827 	bl	36910 <_malloc_usable_size_r>
   368c2:	002c      	movs	r4, r5
   368c4:	4286      	cmp	r6, r0
   368c6:	d9f2      	bls.n	368ae <_realloc_r+0x14>
   368c8:	0031      	movs	r1, r6
   368ca:	0038      	movs	r0, r7
   368cc:	f7fe fe8c 	bl	355e8 <_malloc_r>
   368d0:	1e04      	subs	r4, r0, #0
   368d2:	d0ec      	beq.n	368ae <_realloc_r+0x14>
   368d4:	0029      	movs	r1, r5
   368d6:	0032      	movs	r2, r6
   368d8:	f7fe fe18 	bl	3550c <memcpy>
   368dc:	0029      	movs	r1, r5
   368de:	0038      	movs	r0, r7
   368e0:	f7fe fe38 	bl	35554 <_free_r>
   368e4:	e7e3      	b.n	368ae <_realloc_r+0x14>
	...

000368e8 <_read_r>:
   368e8:	b570      	push	{r4, r5, r6, lr}
   368ea:	0005      	movs	r5, r0
   368ec:	0008      	movs	r0, r1
   368ee:	0011      	movs	r1, r2
   368f0:	2200      	movs	r2, #0
   368f2:	4c06      	ldr	r4, [pc, #24]	; (3690c <_read_r+0x24>)
   368f4:	6022      	str	r2, [r4, #0]
   368f6:	001a      	movs	r2, r3
   368f8:	f7f5 f96e 	bl	2bbd8 <_read>
   368fc:	1c43      	adds	r3, r0, #1
   368fe:	d103      	bne.n	36908 <_read_r+0x20>
   36900:	6823      	ldr	r3, [r4, #0]
   36902:	2b00      	cmp	r3, #0
   36904:	d000      	beq.n	36908 <_read_r+0x20>
   36906:	602b      	str	r3, [r5, #0]
   36908:	bd70      	pop	{r4, r5, r6, pc}
   3690a:	46c0      	nop			; (mov r8, r8)
   3690c:	200058c0 	.word	0x200058c0

00036910 <_malloc_usable_size_r>:
   36910:	1f0b      	subs	r3, r1, #4
   36912:	681b      	ldr	r3, [r3, #0]
   36914:	1f18      	subs	r0, r3, #4
   36916:	2b00      	cmp	r3, #0
   36918:	da01      	bge.n	3691e <_malloc_usable_size_r+0xe>
   3691a:	580b      	ldr	r3, [r1, r0]
   3691c:	18c0      	adds	r0, r0, r3
   3691e:	4770      	bx	lr

00036920 <pcWelcomeMessage>:
   36920:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   36930:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   36940:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   36950:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   36960:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   36970:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   36980:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   36990:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   369a0:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   369b0:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   369c0:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   369d0:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   369e0:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   369f0:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   36a00:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   36a10:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   36a20:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   36a30:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   36a40:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   36a50:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   36a60:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   36a70:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   36a80:	7761 0d2e 000a 0000 6567 6474 7369 6174     aw......getdista
   36a90:	636e 0065 6567 6474 7369 6174 636e 3a65     nce.getdistance:
   36aa0:	5220 7465 7275 736e 7420 6568 6420 7369      Returns the dis
   36ab0:	6174 636e 2065 7266 6d6f 7420 6568 5520     tance from the U
   36ac0:	2d53 3031 2030 6553 736e 726f 0d2e 000a     S-100 Sensor....
   36ad0:	6167 656d 0000 0000 6167 656d 203a 6553     game....game: Se
   36ae0:	646e 2073 7564 6d6d 2079 6167 656d 6420     nds dummy game d
   36af0:	7461 0d61 000a 0000 3269 0063 3269 3a63     ata.....i2c.i2c:
   36b00:	5320 6163 736e 4920 4332 6220 7375 0a0d      Scans I2C bus..
   36b10:	0000 0000 6c63 0073 6c63 3a73 4320 656c     ....cls.cls: Cle
   36b20:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   36b30:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   36b40:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   36b50:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   36b60:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   36b70:	6341 6563 656c 6172 6974 6e6f 5b20 676d     Acceleration [mg
   36b80:	3a5d 2058 6425 5909 2520 0964 205a 6425     ]:X %d.Y %d.Z %d
   36b90:	0a0d 0000 6f4e 6420 7461 2061 6572 6461     ....No data read
   36ba0:	2179 0d20 000a 0000 6325 325b 004a 0000     y! .....%c[2J...
   36bb0:	7453 6475 6e65 7374 7420 206f 6966 6c6c     Students to fill
   36bc0:	6f20 7475 0021 0000 7542 7474 6e6f 2320      out!...Button #
   36bd0:	6425 6920 2073 6572 656c 7361 6465 0a0d     %d is released..
   36be0:	0000 0000 7542 7474 6e6f 2320 6425 6920     ....Button #%d i
   36bf0:	2073 7270 7365 6573 0d64 000a 6553 736e     s pressed...Sens
   36c00:	726f 4520 7272 726f 2520 2164 0a0d 0000     or Error %d!....
   36c10:	6944 7473 6e61 6563 203a 6425 6d20 0d6d     Distance: %d mm.
   36c20:	000a 0000 6944 7473 6e61 6563 4420 7461     ....Distance Dat
   36c30:	2061 514d 5454 5020 736f 0d74 000a 0000     a MQTT Post.....
   36c40:	7544 6d6d 2079 6147 656d 4420 7461 2061     Dummy Game Data 
   36c50:	514d 5454 5020 736f 0d74 000a 2030 3120     MQTT Post...0  1
   36c60:	2020 2032 3320 2020 2034 3520 2020 2036       2  3  4  5  6 
   36c70:	3720 2020 2038 3920 2020 2061 6220 2020      7  8  9  a  b  
   36c80:	2063 6420 2020 2065 6620 0a0d 0000 0000     c  d  e  f......
   36c90:	3025 7832 203a 0000 2058 0000               %02x: ..X ..

00036c9c <xImuGetCommand>:
   36c9c:	6964 0003 6968 0003 3e61 0001 0000 0000     di..hi..a>......

00036cac <xOTAUCommand>:
   36cac:	698c 0003 6990 0003 3f9d 0001 0000 0000     .i...i...?......

00036cbc <xResetCommand>:
   36cbc:	69c0 0003 69c8 0003 3fbd 0001 0000 0000     .i...i...?......

00036ccc <xNeotrellisTurnLEDCommand>:
   36ccc:	69e4 0003 69e8 0003 3fdd 0001 0004 0000     .i...i...?......

00036cdc <xNeotrellisProcessButtonCommand>:
   36cdc:	6a30 0003 6a3c 0003 4009 0001 0000 0000     0j..<j...@......

00036cec <xDistanceSensorGetDistance>:
   36cec:	6a88 0003 6a94 0003 410d 0001 0000 0000     .j...j...A......

00036cfc <xSendDummyGameData>:
   36cfc:	6ad0 0003 6ad8 0003 41b1 0001 0000 0000     .j...j...A......

00036d0c <xI2cScan>:
   36d0c:	6af8 0003 6afc 0003 424d 0001 0000 0000     .j...j..MB......

00036d1c <xClearScreen>:
   36d1c:	6b14 0003 6b18 0003 3f55 0001 0000 0000     .k...k..U?......
   36d2c:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   36d3c:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   36d4c:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   36d5c:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   36d6c:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   36d7c:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   36d8c:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   36d9c:	0d21 000a 6f43 746e 6f72 206c 6854 6572     !...Control Thre
   36dac:	6461 203a 6f43 6c75 2064 6f6e 2074 6573     ad: Could not se
   36dbc:	646e 6720 6d61 2065 6170 6b63 7465 0d21     nd game packet!.
   36dcc:	000a 0000 6f43 6c75 2064 6f6e 2074 6e69     ....Could not in
   36ddc:	7469 6169 696c 657a 4420 7369 6174 636e     itialize Distanc
   36dec:	2065 6553 736e 726f 0021 0000               e Sensor!...

00036df8 <msgBaseGetHWID>:
   36df8:	0100 0000                                   ....

00036dfc <msgNeopixelPin>:
   36dfc:	010e 0003                                   ....

00036e00 <msgNeopixelSpeed>:
   36e00:	020e 0001                                   ....

00036e04 <msgNeopixelBufLength>:
   36e04:	030e 3000                                   ...0

00036e08 <msgKeypadEnableInt>:
   36e08:	0210 0001                                   ....

00036e0c <msgKeypadGetCount>:
   36e0c:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   36e1c:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   36e2c:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   36e3c:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   36e4c:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   36e5c:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   36e6c:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   36e7c:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   36e8c:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   36e9c:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   36eac:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   36ebc:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   36ecc:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   36edc:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   36eec:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   36efc:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   36f0c:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   36f1c:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   36f2c:	6574 2164 0000 0000                         ted!....

00036f34 <main_mqtt_broker>:
   36f34:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   36f44:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   36f54:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   36f64:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   36f74:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   36f84:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   36f94:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   36fa4:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   36fb4:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   36fc4:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   36fd4:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   36fe4:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   36ff4:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   37004:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   37014:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   37024:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   37034:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   37044:	7564 7e2f 6465 6167 6372 492f 546f 702e     du/~edgarc/IoT.p
   37054:	6664 0000 7473 726f 5f65 6966 656c 705f     df..store_file_p
   37064:	6361 656b 3a74 6520 706d 7974 6420 7461     acket: empty dat
   37074:	2e61 0a0d 0000 0000 7473 726f 5f65 6966     a.......store_fi
   37084:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   37094:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
   370a4:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
   370b4:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   370c4:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   370d4:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   370e4:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   370f4:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   37104:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   37114:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   37124:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   37134:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   37144:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   37154:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   37164:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   37174:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   37184:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   37194:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   371a4:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   371b4:	6c6c 2e79 0a0d 0000 7468 7074 635f 696c     lly.....http_cli
   371c4:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
   371d4:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
   371e4:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   371f4:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   37204:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
   37214:	706d 656c 6574 2e64 0a0d 0000 7468 7074     mpleted.....http
   37224:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   37234:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
   37244:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
   37254:	2520 0d75 000a 0000 7468 7074 635f 696c      %u.....http_cli
   37264:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
   37274:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
   37284:	6e6f 253a 0d64 000a 6572 6f73 766c 5f65     on:%d...resolve_
   37294:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   372a4:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   372b4:	0a0d 0a0d 0000 0000 6977 6966 635f 3a62     ........wifi_cb:
   372c4:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   372d4:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   372e4:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   372f4:	454e 5443 4445 0a0d 0000 0000 7241 696d     NECTED......Armi
   37304:	6174 6567 0000 0000 6445 6957 6966 0000     tage....EdWifi..
   37314:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   37324:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   37334:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   37344:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   37354:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   37364:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   37374:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   37384:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   37394:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   373a4:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   373b4:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   373c4:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   373d4:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   373e4:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   373f4:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   37404:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   37414:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   37424:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   37434:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   37444:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   37454:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   37464:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   37474:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   37484:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   37494:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   374a4:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   374b4:	0a0d 2520 2a2e 0073 6772 2862 0000 0000     .. %.*s.rgb(....
   374c4:	0a0d 4752 2042 6425 2520 2064 6425 0a0d     ..RGB %d %d %d..
   374d4:	0000 0000 227b 6167 656d 3a22 005b 0000     ....{"game":[...
   374e4:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   374f4:	6365 6965 6576 2164 0a0d 0000 2e25 732a     eceived!....%.*s
   37504:	0000 0000 0a0d 6150 7372 6465 4320 6d6f     ......Parsed Com
   37514:	616d 646e 203a 0000 6425 002c 0a0d 6553     mand: ..%d,...Se
   37524:	746e 7020 616c 2079 6f74 6320 6e6f 7274     nt play to contr
   37534:	6c6f 0d21 000a 0000 0a0d 6147 656d 6d20     ol!.......Game m
   37544:	7365 6173 6567 7220 6365 6965 6576 2064     essage received 
   37554:	7562 2074 6f6e 2074 6e75 6564 7372 6f74     but not understo
   37564:	646f 0d21 000a 0000 3e20 203e 0000 0000     od!..... >> ....
   37574:	3150 4c5f 4445 455f 4553 3135 5f36 3054     P1_LED_ESE516_T0
   37584:	0000 0000 6166 736c 0065 0000 7274 6575     ....false...true
   37594:	0000 0000 0a0d 6f43 6e6e 6365 6974 676e     ......Connecting
   375a4:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   375b4:	7242 4a73 4e42 6f56 4251 376c 0000 0000     BrsJBNVoQBl7....
   375c4:	7472 7974 626f 6a65 0000 0000 514d 5454     rttyobej....MQTT
   375d4:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   375e4:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   375f4:	0d72 000a 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   37604:	6465 7420 206f 7262 6b6f 7265 0a0d 0000     ed to broker....
   37614:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   37624:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   37634:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   37644:	796c 0d2e 000a 0000 3150 475f 4d41 5f45     ly......P1_GAME_
   37654:	5345 3545 3631 545f 0030 0000 514d 5454     ESE516_T0...MQTT
   37664:	4320 6e6f 656e 7463 6465 0a0d 0000 0000      Connected......
   37674:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   37684:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   37694:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   376a4:	0000 0000 514d 5454 6420 7369 6f63 6e6e     ....MQTT disconn
   376b4:	6365 6574 0d64 000a 514d 5454 6920 696e     ected...MQTT ini
   376c4:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   376d4:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
   376e4:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
   376f4:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
   37704:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
   37714:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
   37724:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   37734:	007d 0000 465b 4941 5d4c 7220 7365 2520     }...[FAIL] res %
   37744:	0d64 000a 6c46 6761 2e41 7874 2074 6461     d...FlagA.txt ad
   37754:	6564 2164 0a0d 0000 3a30 6c46 6761 2e41     ded!....0:FlagA.
   37764:	7874 0074 6f43 6e6e 6365 6574 2064 6f74     txt.Connected to
   37774:	4d20 5451 2054 7242 6b6f 7265 0d21 000a      MQTT Broker!...
   37784:	227b 6d69 7875 3a22 6425 202c 6922 756d     {"imux":%d, "imu
   37794:	2279 203a 6425 202c 6922 756d 227a 203a     y": %d, "imuz": 
   377a4:	6425 007d 3150 495f 554d 455f 4553 3135     %d}.P1_IMU_ESE51
   377b4:	5f36 3054 0000 0000 6425 0000 7d5d 0000     6_T0....%d..]}..
   377c4:	0a0d 0000 3250 475f 4d41 5f45 5345 3545     ....P2_GAME_ESE5
   377d4:	3631 545f 0030 0000 5245 4f52 2052 6e49     16_T0...ERROR In
   377e4:	7469 6169 696c 697a 676e 5720 6669 2069     itializing Wifi 
   377f4:	6144 6174 7120 6575 6575 2173 0a0d 0000     Data queues!....
   37804:	5345 3545 3631 2d20 5720 6669 2069 6e49     ESE516 - Wifi In
   37814:	7469 4320 646f 0d65 000a 0000 616d 6e69     it Code.....main
   37824:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   37834:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   37844:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   37854:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   37864:	4120 2050 7325 2e2e 0d2e 000a 3150 545f      AP %s......P1_T
   37874:	4d45 4550 4152 5554 4552 455f 4553 3135     EMPERATURE_ESE51
   37884:	5f36 3054 0000 0000 514d 5454 7320 6e65     6_T0....MQTT sen
   37894:	2064 7325 0a0d 0000 6ef8 0001 6f04 0001     d %s.....n...o..
   378a4:	6f16 0001 6f6c 0001 6f8c 0001 6568 706c     .o..lo...o..help
   378b4:	0000 0000 0a0d 6568 706c 0d3a 200a 694c     ......help:.. Li
   378c4:	7473 2073 6c61 206c 6874 2065 6572 6967     sts all the regi
   378d4:	7473 7265 6465 6320 6d6f 616d 646e 0d73     stered commands.
   378e4:	0d0a 000a 6e49 6f63 7272 6365 2074 6f63     ....Incorrect co
   378f4:	6d6d 6e61 2064 6170 6172 656d 6574 2872     mmand parameter(
   37904:	2973 202e 4520 746e 7265 2220 6568 706c     s).  Enter "help
   37914:	2022 6f74 7620 6569 2077 2061 696c 7473     " to view a list
   37924:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   37934:	6d6d 6e61 7364 0d2e 0d0a 000a 6f43 6d6d     mmands......Comm
   37944:	6e61 2064 6f6e 2074 6572 6f63 6e67 7369     and not recognis
   37954:	6465 202e 4520 746e 7265 2720 6568 706c     ed.  Enter 'help
   37964:	2027 6f74 7620 6569 2077 2061 696c 7473     ' to view a list
   37974:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   37984:	6d6d 6e61 7364 0d2e 0d0a 000a               mmands......

00037990 <xHelpCommand>:
   37990:	78b0 0003 78b8 0003 8b45 0001 0000 0000     .x...x..E.......
   379a0:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   379b0:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   379c0:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   379d0:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   379e0:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   379f0:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   37a00:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   37a10:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   37a20:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   37a30:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   37a40:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   37a50:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   37a60:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   37a70:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   37a80:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   37a90:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   37aa0:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37ab0:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   37ac0:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37ad0:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   37ae0:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   37af0:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   37b00:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   37b10:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37b20:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   37b30:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   37b40:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37b50:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   37b60:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   37b70:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   37b80:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   37b90:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   37ba0:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   37bb0:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   37bc0:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   37bd0:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   37be0:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   37bf0:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   37c00:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   37c10:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   37c20:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   37c30:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   37c40:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   37c50:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   37c60:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   37c70:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   37c80:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   37c90:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   37ca0:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   37cb0:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   37cc0:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   37cd0:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   37ce0:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   37cf0:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   37d00:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   37d10:	6365 6374 616c 7373 0021 0000 926a 0001     ectclass!...j...
   37d20:	9262 0001 9266 0001 925a 0001 925e 0001     b...f...Z...^...
   37d30:	926e 0001 9272 0001 9276 0001 927a 0001     n...r...v...z...
   37d40:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   37d50:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   37d60:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   37d70:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   37d80:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   37d90:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   37da0:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   37db0:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   37dc0:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   37dd0:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   37de0:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   37df0:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   37e00:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   37e10:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   37e20:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   37e30:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   37e40:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   37e50:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   37e60:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   37e70:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   37e80:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   37e90:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   37ea0:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   37eb0:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   37ec0:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   37ed0:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   37ee0:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   37ef0:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   37f00:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   37f10:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   37f20:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   37f30:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   37f40:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   37f50:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   37f60:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   37f70:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   37f80:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   37f90:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   37fa0:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   37fb0:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   37fc0:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   37fd0:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   37fe0:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   37ff0:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   38000:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   38010:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   38020:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   38030:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   38040:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   38050:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   38060:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   38070:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   38080:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   38090:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   380a0:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   380b0:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   380c0:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   380d0:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   380e0:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   380f0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38100:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   38110:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   38120:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   38130:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   38140:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   38150:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   38160:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38170:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   38180:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   38190:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   381a0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   381b0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   381c0:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   381d0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   381e0:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   381f0:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   38200:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   38210:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38220:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38230:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38240:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   38250:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   38260:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   38270:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   38280:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   38290:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   382a0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   382b0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   382c0:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   382d0:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   382e0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   382f0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38300:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   38310:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   38320:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   38330:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38340:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38350:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   38360:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   38370:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   38380:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   38390:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   383a0:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   383b0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   383c0:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   383d0:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   383e0:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   383f0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38400:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   38410:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   38420:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   38430:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   38440:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   38450:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   38460:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   38470:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   38480:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38490:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   384a0:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   384b0:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   384c0:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   384d0:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   384e0:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   384f0:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   38500:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38510:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38520:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38530:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   38540:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   38550:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38560:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   38570:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   38580:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   38590:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   385a0:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   385b0:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   385c0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   385d0:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   385e0:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   385f0:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   38600:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   38610:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   38620:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   38630:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   38640:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   38650:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   38660:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38670:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   38680:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   38690:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   386a0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   386b0:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   386c0:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   386d0:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   386e0:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   386f0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38700:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   38710:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   38720:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   38730:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38740:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   38750:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38760:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38770:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38780:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   38790:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   387a0:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   387b0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   387c0:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   387d0:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   387e0:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   387f0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38800:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   38810:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38820:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38830:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38840:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   38850:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   38860:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   38870:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   38880:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   38890:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   388a0:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   388b0:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   388c0:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   388d0:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   388e0:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   388f0:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38900:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38910:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38920:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   38930:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   38940:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   38950:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   38960:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   38970:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38980:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   38990:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   389a0:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   389b0:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   389c0:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   389d0:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   389e0:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   389f0:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   38a00:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38a10:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   38a20:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   38a30:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   38a40:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   38a50:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   38a60:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   38a70:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38a80:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   38a90:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   38aa0:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   38ab0:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   38ac0:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   38ad0:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   38ae0:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   38af0:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   38b00:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   38b10:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   38b20:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   38b30:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38b40:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   38b50:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   38b60:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   38b70:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   38b80:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   38b90:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38ba0:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   38bb0:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   38bc0:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   38bd0:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   38be0:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   38bf0:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   38c00:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   38c10:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   38c20:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   38c30:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38c40:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   38c50:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   38c60:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   38c70:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   38c80:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   38c90:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   38ca0:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   38cb0:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   38cc0:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   38cd0:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   38ce0:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   38cf0:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   38d00:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   38d10:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   38d20:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38d30:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   38d40:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   38d50:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   38d60:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   38d70:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   38d80:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   38d90:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   38da0:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   38db0:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   38dc0:	0000 0000 6d54 2072 7653 0063 e30c 0001     ....Tmr Svc.....
   38dd0:	e30c 0001 e30c 0001 e39a 0001 e364 0001     ............d...
   38de0:	e38e 0001 e30c 0001 e30c 0001 e39a 0001     ................
   38df0:	e364 0001                                   d...

00038df4 <sd_mmc_trans_units>:
   38df4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00038e10 <sd_trans_multipliers>:
   38e10:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38e20:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   38e30:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   38e40:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00038e50 <mmc_trans_multipliers>:
   38e50:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38e60:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   38e70:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   38e80:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   38e90:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38ea0:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   38eb0:	746c 6320 646d 000a 000d 0000               lt cmd......

00038ebc <__FUNCTION__.17099>:
   38ebc:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   38ecc:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   38edc:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   38eec:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   38efc:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   38f0c:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   38f1c:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   38f2c:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   38f3c:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   38f4c:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   38f5c:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   38f6c:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   38f7c:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   38f8c:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   38f9c:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   38fac:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   38fbc:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   38fcc:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   38fdc:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   38fec:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   38ffc:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   3900c:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   3901c:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   3902c:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   3903c:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   3904c:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   3905c:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   3906c:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   3907c:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   3908c:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   3909c:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   390ac:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   390bc:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   390cc:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   390dc:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   390ec:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   390fc:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   3910c:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   3911c:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   3912c:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   3913c:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   3914c:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   3915c:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   3916c:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   3917c:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   3918c:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   3919c:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   391ac:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   391bc:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   391cc:	203f 6425 000a 0000 24ac 0002 247c 0002     ? %d.....$..|$..
   391dc:	2474 0002 248c 0002 2484 0002 24a4 0002     t$...$...$...$..
   391ec:	2494 0002 249c 0002                         .$...$..

000391f4 <__FUNCTION__.17967>:
   391f4:	6968 5f66 6573 646e 0000 0000               hif_send....

00039200 <__FUNCTION__.17977>:
   39200:	6968 5f66 7369 0072                         hif_isr.

00039208 <__FUNCTION__.17986>:
   39208:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00039218 <__FUNCTION__.17998>:
   39218:	6968 5f66 6572 6563 7669 0065               hif_receive.

00039224 <__FUNCTION__.18014>:
   39224:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   39234:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   39244:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   39254:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   39264:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   39274:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   39284:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   39294:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   392a4:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   392b4:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   392c4:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   392d4:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   392e4:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   392f4:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   39304:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   39314:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   39324:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   39334:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   39344:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   39354:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   39364:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   39374:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   39384:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   39394:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   393a4:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   393b4:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   393c4:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   393d4:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   393e4:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   393f4:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   39404:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   39414:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   39424:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   39434:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   39444:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   39454:	000a 0000 3431 343a 3a35 3034 0000 0000     ....14:45:40....
   39464:	7041 2072 3431 3220 3230 0032 7244 7669     Apr 14 2022.Driv
   39474:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   39484:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   39494:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   394a4:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   394b4:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   394c4:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   394d4:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   394e4:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   394f4:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   39504:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   39514:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   39524:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   39534:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   39544:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   39554:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   39564:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   39574:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   39584:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   39594:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   395a4:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   395b4:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   395c4:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   395d4:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   395e4:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   395f4:	4220 6675 6566 0a72 0000 0000                Buffer.....

00039600 <__FUNCTION__.17949>:
   39600:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0003960c <__FUNCTION__.17978>:
   3960c:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0003961c <__FUNCTION__.18009>:
   3961c:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   3962c:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   3963c:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   3964c:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   3965c:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   3966c:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   3967c:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   3968c:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   3969c:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   396ac:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

000396bc <__FUNCTION__.17806>:
   396bc:	6863 7069 775f 6b61 0065 0000               chip_wake...

000396c8 <__FUNCTION__.17855>:
   396c8:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   396d8:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   396e8:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   396f8:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   39708:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   39718:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   39728:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   39738:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   39748:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   39758:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   39768:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   39778:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   39788:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   39798:	6920 696e 2074 7562 0a73 0000                init bus...

000397a4 <__FUNCTION__.17853>:
   397a4:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

000397b0 <__FUNCTION__.17860>:
   397b0:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

000397c0 <crc7_syndrome_table>:
   397c0:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   397d0:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   397e0:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   397f0:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   39800:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   39810:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   39820:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   39830:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   39840:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   39850:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   39860:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   39870:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   39880:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   39890:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   398a0:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   398b0:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   398c0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   398d0:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   398e0:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   398f0:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   39900:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39910:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   39920:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39930:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39940:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   39950:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   39960:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   39970:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   39980:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   39990:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   399a0:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   399b0:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   399c0:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   399d0:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   399e0:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   399f0:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39a00:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   39a10:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   39a20:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39a30:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   39a40:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   39a50:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   39a60:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39a70:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   39a80:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   39a90:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39aa0:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   39ab0:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   39ac0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39ad0:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   39ae0:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   39af0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   39b00:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   39b10:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   39b20:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39b30:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39b40:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   39b50:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   39b60:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   39b70:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   39b80:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39b90:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39ba0:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   39bb0:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   39bc0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   39bd0:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   39be0:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   39bf0:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39c00:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   39c10:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   39c20:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   39c30:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   39c40:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   39c50:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   39c60:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   39c70:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   39c80:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   39c90:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   39ca0:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39cb0:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   39cc0:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   39cd0:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   39ce0:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   39cf0:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   39d00:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   39d10:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   39d20:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   39d30:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   39d40:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   39d50:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   39d60:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39d70:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   39d80:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   39d90:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   39da0:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   39db0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39dc0:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   39dd0:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   39de0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39df0:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   39e00:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   39e10:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   39e20:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   39e30:	2e2e 0a2e 0000 0000 40d4 0002 40d4 0002     .........@...@..
   39e40:	4164 0002 4028 0002 406e 0002 4090 0002     dA..(@..n@...@..
   39e50:	4116 0002 4116 0002 41d0 0002 3ffc 0002     .A...A...A...?..
   39e60:	422a 0002 422a 0002 422a 0002 422a 0002     *B..*B..*B..*B..
   39e70:	40b2 0002 4634 0002 4634 0002 46bc 0002     .@..4F..4F...F..
   39e80:	4598 0002 45da 0002 45f8 0002 4672 0002     .E...E...E..rF..
   39e90:	4672 0002 471e 0002 4570 0002 476e 0002     rF...G..pE..nG..
   39ea0:	476e 0002 476e 0002 476e 0002 4616 0002     nG..nG..nG...F..

00039eb0 <__FUNCTION__.17128>:
   39eb0:	7073 5f69 6d63 0064                         spi_cmd.

00039eb8 <__FUNCTION__.17135>:
   39eb8:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00039ec8 <__FUNCTION__.17144>:
   39ec8:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00039ed4 <__FUNCTION__.17177>:
   39ed4:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   39ee4:	0000 0000                                   ....

00039ee8 <__FUNCTION__.17223>:
   39ee8:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00039ef8 <__FUNCTION__.17235>:
   39ef8:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00039f08 <__FUNCTION__.17246>:
   39f08:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00039f18 <__FUNCTION__.17258>:
   39f18:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00039f28 <__FUNCTION__.17269>:
   39f28:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00039f34 <__FUNCTION__.17290>:
   39f34:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   39f44:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   39f54:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   39f64:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   39f74:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   39f84:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   39f94:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   39fa4:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   39fb4:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   39fc4:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   39fd4:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   39fe4:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   39ff4:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   3a004:	2074 2230 0000 0000                         t 0"....

0003a00c <lun_desc>:
   3a00c:	fd31 0001 fd89 0001 fdd5 0001 fe21 0001     1...........!...
   3a01c:	fe51 0001 fed5 0001 ff65 0001 9ff4 0003     Q.......e.......
   3a02c:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   3a03c:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   3a04c:	a052 0002 a0cc 0002 a0cc 0002 a070 0002     R...........p...
   3a05c:	a06a 0002 a076 0002 a058 0002 a07c 0002     j...v...X...|...
   3a06c:	a0b2 0002 a2b4 0002 a304 0002 a304 0002     ................
   3a07c:	a300 0002 a2a6 0002 a2c6 0002 a296 0002     ................
   3a08c:	a2d8 0002 a2ea 0002 a352 0002 a380 0002     ........R.......
   3a09c:	a380 0002 a37c 0002 a34c 0002 a358 0002     ....|...L...X...
   3a0ac:	a346 0002 a35e 0002 a364 0002               F...^...d...

0003a0b8 <tcc_modules>:
   3a0b8:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0003a0c4 <_tcc_gclk_ids>:
   3a0c4:	1a1a 001b                                   ....

0003a0c8 <_tcc_apbcmasks>:
   3a0c8:	0100 0000 0200 0000 0400 0000               ............

0003a0d4 <_tcc_maxs>:
   3a0d4:	ffff 00ff ffff 00ff ffff 0000               ............

0003a0e0 <_tcc_cc_nums>:
   3a0e0:	0204 0002                                   ....

0003a0e4 <_tcc_ow_nums>:
   3a0e4:	0408 0002                                   ....

0003a0e8 <_tcc_intflag>:
   3a0e8:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   3a0f8:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   3a108:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0003a118 <LfnOfs>:
   3a118:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3a128:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3a138:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3a148:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3a158:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3a168:	5441 2020 2020 0020                         AT     .

0003a170 <excvt.4558>:
   3a170:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   3a180:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   3a190:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   3a1a0:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   3a1b0:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   3a1c0:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   3a1d0:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   3a1e0:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0003a1f0 <Tbl>:
   3a1f0:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   3a200:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   3a210:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   3a220:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   3a230:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   3a240:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   3a250:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   3a260:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   3a270:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   3a280:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   3a290:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   3a2a0:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   3a2b0:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   3a2c0:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   3a2d0:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   3a2e0:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0003a2f0 <tbl_lower.4308>:
   3a2f0:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   3a300:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   3a310:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   3a320:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   3a330:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   3a340:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   3a350:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   3a360:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   3a370:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   3a380:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   3a390:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   3a3a0:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   3a3b0:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   3a3c0:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   3a3d0:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   3a3e0:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   3a3f0:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   3a400:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   3a410:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   3a420:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   3a430:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   3a440:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   3a450:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   3a460:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   3a470:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   3a480:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   3a490:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   3a4a0:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   3a4b0:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   3a4c0:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0003a4d0 <tbl_upper.4309>:
   3a4d0:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   3a4e0:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   3a4f0:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   3a500:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   3a510:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   3a520:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   3a530:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   3a540:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   3a550:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   3a560:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   3a570:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   3a580:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   3a590:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   3a5a0:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   3a5b0:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   3a5c0:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   3a5d0:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   3a5e0:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   3a5f0:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   3a600:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   3a610:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   3a620:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   3a630:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   3a640:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   3a650:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   3a660:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   3a670:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   3a680:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3a690:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3a6a0:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3a6b0:	f6be 0002 f6be 0002 f6be 0002 f54c 0002     ............L...
   3a6c0:	f6be 0002 f636 0002 f6be 0002 f6be 0002     ....6...........
   3a6d0:	f6be 0002 f6be 0002 f6be 0002 f6be 0002     ................
   3a6e0:	f6be 0002 f6b0 0002 514d 4354 0000 0000     ........MQTC....
   3a6f0:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3a700:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3a740:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3a758:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3a798:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3a7a8:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3a7b8:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3a7c8:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3a7d8:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   3a7e8:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3a7f8:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3a808:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3a818:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3a828:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3a838:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3a848:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3a858:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3a868:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3a878:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3a888:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3a898:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3a8a8:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3a8b8:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3a8c8:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3a8d8:	5448 5054 002f 0000 0d31 0000 17b2 0003     HTTP/...1.......
   3a8e8:	17ac 0003 17a6 0003 17a0 0003 17b8 0003     ................
   3a8f8:	179a 0003 17b8 0003 1794 0003 178e 0003     ................
   3a908:	17b8 0003 1788 0003 1788 0003 1782 0003     ................
   3a918:	177c 0003 1776 0003 2000 4200 2400 4200     |...v.... .B.$.B
   3a928:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   3a938:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   3a948:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   3a958:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   3a968:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3a978:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3a988:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3a998:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3a9a8:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3a9b8:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   3a9c8:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   3a9d8:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   3a9e8:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   3a9f8:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   3aa08:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3aa18:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   3aa28:	696c 657a 4920 554d 0a0d 0000 6e49 7469     lize IMU....Init
   3aa38:	6169 696c 697a 676e 6420 7369 6174 636e     ializing distanc
   3aa48:	2065 6573 736e 726f 0a0d 0000 6944 7473     e sensor....Dist
   3aa58:	6e61 6563 7320 6e65 6f73 2072 6e69 7469     ance sensor init
   3aa68:	6169 696c 657a 0d64 000a 0000 6548 7061     ialized.....Heap
   3aa78:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   3aa88:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   3aa98:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   3aaa8:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   3aab8:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3aac8:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3aad8:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   3aae8:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   3aaf8:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   3ab08:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   3ab18:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3ab28:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3ab38:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   3ab48:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   3ab58:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   3ab68:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   3ab78:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   3ab88:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   3ab98:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   3aba8:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   3abb8:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   3abc8:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3abd8:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3abe8:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   3abf8:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   3ac08:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   3ac18:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   3ac28:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   3ac38:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   3ac48:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   3ac58:	0a0d 0000 39d4 0003 3924 0003 3924 0003     .....9..$9..$9..
   3ac68:	3922 0003 39c6 0003 39c6 0003 39bc 0003     "9...9...9...9..
   3ac78:	3922 0003 39c6 0003 39bc 0003 39c6 0003     "9...9...9...9..
   3ac88:	3922 0003 39cc 0003 39cc 0003 39cc 0003     "9...9...9...9..
   3ac98:	3a5c 0003 43e0 0003 43c2 0003 437c 0003     \:...C...C..|C..
   3aca8:	429a 0003 437c 0003 43b4 0003 437c 0003     .B..|C...C..|C..
   3acb8:	429a 0003 43c2 0003 43c2 0003 43b4 0003     .B...C...C...C..
   3acc8:	429a 0003 4292 0003 4292 0003 4292 0003     .B...B...B...B..
   3acd8:	45f8 0003 4a40 0003 4900 0003 4900 0003     .E..@J...I...I..
   3ace8:	48fc 0003 4a18 0003 4a18 0003 4a0a 0003     .H...J...J...J..
   3acf8:	48fc 0003 4a18 0003 4a0a 0003 4a18 0003     .H...J...J...J..
   3ad08:	48fc 0003 4a20 0003 4a20 0003 4a20 0003     .H.. J.. J.. J..
   3ad18:	4c24 0003                                   $L..

0003ad1c <_global_impure_ptr>:
   3ad1c:	0128 2000                                   (.. 

0003ad20 <__sf_fake_stderr>:
	...

0003ad40 <__sf_fake_stdin>:
	...

0003ad60 <__sf_fake_stdout>:
	...
   3ad80:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3ad90:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3ada0:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3adb0:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003adbd <_ctype_>:
   3adbd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3adcd:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3addd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3aded:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3adfd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3ae0d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3ae1d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3ae2d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3ae3d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003aec0 <_init>:
   3aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3aec2:	46c0      	nop			; (mov r8, r8)
   3aec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3aec6:	bc08      	pop	{r3}
   3aec8:	469e      	mov	lr, r3
   3aeca:	4770      	bx	lr

0003aecc <__init_array_start>:
   3aecc:	000120dd 	.word	0x000120dd

0003aed0 <_fini>:
   3aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3aed2:	46c0      	nop			; (mov r8, r8)
   3aed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3aed6:	bc08      	pop	{r3}
   3aed8:	469e      	mov	lr, r3
   3aeda:	4770      	bx	lr

0003aedc <__fini_array_start>:
   3aedc:	000120b5 	.word	0x000120b5
