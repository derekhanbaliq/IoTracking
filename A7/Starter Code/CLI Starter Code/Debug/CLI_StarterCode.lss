
CLI_StarterCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000632c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e4  20000000  0000632c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000036f4  200001e4  00006510  000201e4  2**2
                  ALLOC
  3 .stack        00002000  200038d8  00009c04  000201e4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002b632  00000000  00000000  00020265  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000041a5  00000000  00000000  0004b897  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003f14  00000000  00000000  0004fa3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bb0  00000000  00000000  00053950  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a30  00000000  00000000  00054500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d031  00000000  00000000  00054f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010fd1  00000000  00000000  00071f61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093519  00000000  00000000  00082f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c18  00000000  00000000  0011644c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 58 00 20 01 0b 00 00 f9 0b 00 00 f9 0b 00 00     .X. ............
	...
      2c:	81 10 00 00 00 00 00 00 00 00 00 00 b1 11 00 00     ................
      3c:	f9 11 00 00 f9 0b 00 00 f9 0b 00 00 f9 0b 00 00     ................
      4c:	f9 0b 00 00 f9 0b 00 00 f9 0b 00 00 f9 0b 00 00     ................
      5c:	f9 0b 00 00 f9 0b 00 00 b1 46 00 00 c9 46 00 00     .........F...F..
      6c:	e1 46 00 00 f9 46 00 00 11 47 00 00 29 47 00 00     .F...F...G..)G..
      7c:	f9 0b 00 00 f9 0b 00 00 f9 0b 00 00 f9 0b 00 00     ................
      8c:	f9 0b 00 00 f9 0b 00 00 00 00 00 00 00 00 00 00     ................
      9c:	f9 0b 00 00 f9 0b 00 00 f9 0b 00 00 f9 0b 00 00     ................
      ac:	f9 0b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001e4 	.word	0x200001e4
      d4:	00000000 	.word	0x00000000
      d8:	0000632c 	.word	0x0000632c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e8 	.word	0x200001e8
     108:	0000632c 	.word	0x0000632c
     10c:	0000632c 	.word	0x0000632c
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     11a:	4b10      	ldr	r3, [pc, #64]	; (15c <cpu_irq_enter_critical+0x48>)
     11c:	681b      	ldr	r3, [r3, #0]
     11e:	2b00      	cmp	r3, #0
     120:	d112      	bne.n	148 <cpu_irq_enter_critical+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     122:	f3ef 8310 	mrs	r3, PRIMASK
     126:	607b      	str	r3, [r7, #4]
  return(result);
     128:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     12a:	2b00      	cmp	r3, #0
     12c:	d109      	bne.n	142 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     12e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     130:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     134:	4b0a      	ldr	r3, [pc, #40]	; (160 <cpu_irq_enter_critical+0x4c>)
     136:	2200      	movs	r2, #0
     138:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <cpu_irq_enter_critical+0x50>)
     13c:	2201      	movs	r2, #1
     13e:	701a      	strb	r2, [r3, #0]
     140:	e002      	b.n	148 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     142:	4b08      	ldr	r3, [pc, #32]	; (164 <cpu_irq_enter_critical+0x50>)
     144:	2200      	movs	r2, #0
     146:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     148:	4b04      	ldr	r3, [pc, #16]	; (15c <cpu_irq_enter_critical+0x48>)
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	1c5a      	adds	r2, r3, #1
     14e:	4b03      	ldr	r3, [pc, #12]	; (15c <cpu_irq_enter_critical+0x48>)
     150:	601a      	str	r2, [r3, #0]
}
     152:	46c0      	nop			; (mov r8, r8)
     154:	46bd      	mov	sp, r7
     156:	b002      	add	sp, #8
     158:	bd80      	pop	{r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	20000200 	.word	0x20000200
     160:	20000000 	.word	0x20000000
     164:	20000204 	.word	0x20000204

00000168 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     168:	b580      	push	{r7, lr}
     16a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     16c:	4b0b      	ldr	r3, [pc, #44]	; (19c <cpu_irq_leave_critical+0x34>)
     16e:	681b      	ldr	r3, [r3, #0]
     170:	1e5a      	subs	r2, r3, #1
     172:	4b0a      	ldr	r3, [pc, #40]	; (19c <cpu_irq_leave_critical+0x34>)
     174:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     176:	4b09      	ldr	r3, [pc, #36]	; (19c <cpu_irq_leave_critical+0x34>)
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b00      	cmp	r3, #0
     17c:	d10a      	bne.n	194 <cpu_irq_leave_critical+0x2c>
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <cpu_irq_leave_critical+0x38>)
     180:	781b      	ldrb	r3, [r3, #0]
     182:	b2db      	uxtb	r3, r3
     184:	2b00      	cmp	r3, #0
     186:	d005      	beq.n	194 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     188:	4b06      	ldr	r3, [pc, #24]	; (1a4 <cpu_irq_leave_critical+0x3c>)
     18a:	2201      	movs	r2, #1
     18c:	701a      	strb	r2, [r3, #0]
     18e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     192:	b662      	cpsie	i
	}
}
     194:	46c0      	nop			; (mov r8, r8)
     196:	46bd      	mov	sp, r7
     198:	bd80      	pop	{r7, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	20000200 	.word	0x20000200
     1a0:	20000204 	.word	0x20000204
     1a4:	20000000 	.word	0x20000000

000001a8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b084      	sub	sp, #16
     1ac:	af00      	add	r7, sp, #0
     1ae:	0002      	movs	r2, r0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     1b4:	230f      	movs	r3, #15
     1b6:	18fb      	adds	r3, r7, r3
     1b8:	1dfa      	adds	r2, r7, #7
     1ba:	7812      	ldrb	r2, [r2, #0]
     1bc:	09d2      	lsrs	r2, r2, #7
     1be:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     1c0:	230e      	movs	r3, #14
     1c2:	18fb      	adds	r3, r7, r3
     1c4:	1dfa      	adds	r2, r7, #7
     1c6:	7812      	ldrb	r2, [r2, #0]
     1c8:	0952      	lsrs	r2, r2, #5
     1ca:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     1cc:	4b0d      	ldr	r3, [pc, #52]	; (204 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     1ce:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1d0:	230f      	movs	r3, #15
     1d2:	18fb      	adds	r3, r7, r3
     1d4:	781b      	ldrb	r3, [r3, #0]
     1d6:	2b00      	cmp	r3, #0
     1d8:	d10f      	bne.n	1fa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     1da:	230f      	movs	r3, #15
     1dc:	18fb      	adds	r3, r7, r3
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	009b      	lsls	r3, r3, #2
     1e2:	2210      	movs	r2, #16
     1e4:	4694      	mov	ip, r2
     1e6:	44bc      	add	ip, r7
     1e8:	4463      	add	r3, ip
     1ea:	3b08      	subs	r3, #8
     1ec:	681a      	ldr	r2, [r3, #0]
     1ee:	230e      	movs	r3, #14
     1f0:	18fb      	adds	r3, r7, r3
     1f2:	781b      	ldrb	r3, [r3, #0]
     1f4:	01db      	lsls	r3, r3, #7
     1f6:	18d3      	adds	r3, r2, r3
     1f8:	e000      	b.n	1fc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     1fa:	2300      	movs	r3, #0
	}
}
     1fc:	0018      	movs	r0, r3
     1fe:	46bd      	mov	sp, r7
     200:	b004      	add	sp, #16
     202:	bd80      	pop	{r7, pc}
     204:	41004400 	.word	0x41004400

00000208 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     208:	b580      	push	{r7, lr}
     20a:	b082      	sub	sp, #8
     20c:	af00      	add	r7, sp, #0
     20e:	0002      	movs	r2, r0
     210:	1dfb      	adds	r3, r7, #7
     212:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     214:	1dfb      	adds	r3, r7, #7
     216:	781b      	ldrb	r3, [r3, #0]
     218:	0018      	movs	r0, r3
     21a:	4b03      	ldr	r3, [pc, #12]	; (228 <port_get_group_from_gpio_pin+0x20>)
     21c:	4798      	blx	r3
     21e:	0003      	movs	r3, r0
}
     220:	0018      	movs	r0, r3
     222:	46bd      	mov	sp, r7
     224:	b002      	add	sp, #8
     226:	bd80      	pop	{r7, pc}
     228:	000001a9 	.word	0x000001a9

0000022c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     22c:	b580      	push	{r7, lr}
     22e:	b082      	sub	sp, #8
     230:	af00      	add	r7, sp, #0
     232:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     234:	687b      	ldr	r3, [r7, #4]
     236:	2200      	movs	r2, #0
     238:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     23a:	687b      	ldr	r3, [r7, #4]
     23c:	2201      	movs	r2, #1
     23e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     240:	687b      	ldr	r3, [r7, #4]
     242:	2200      	movs	r2, #0
     244:	709a      	strb	r2, [r3, #2]
}
     246:	46c0      	nop			; (mov r8, r8)
     248:	46bd      	mov	sp, r7
     24a:	b002      	add	sp, #8
     24c:	bd80      	pop	{r7, pc}
	...

00000250 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     250:	b580      	push	{r7, lr}
     252:	b084      	sub	sp, #16
     254:	af00      	add	r7, sp, #0
     256:	0002      	movs	r2, r0
     258:	1dfb      	adds	r3, r7, #7
     25a:	701a      	strb	r2, [r3, #0]
     25c:	1dbb      	adds	r3, r7, #6
     25e:	1c0a      	adds	r2, r1, #0
     260:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     262:	1dfb      	adds	r3, r7, #7
     264:	781b      	ldrb	r3, [r3, #0]
     266:	0018      	movs	r0, r3
     268:	4b0d      	ldr	r3, [pc, #52]	; (2a0 <port_pin_set_output_level+0x50>)
     26a:	4798      	blx	r3
     26c:	0003      	movs	r3, r0
     26e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     270:	1dfb      	adds	r3, r7, #7
     272:	781b      	ldrb	r3, [r3, #0]
     274:	221f      	movs	r2, #31
     276:	4013      	ands	r3, r2
     278:	2201      	movs	r2, #1
     27a:	409a      	lsls	r2, r3
     27c:	0013      	movs	r3, r2
     27e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     280:	1dbb      	adds	r3, r7, #6
     282:	781b      	ldrb	r3, [r3, #0]
     284:	2b00      	cmp	r3, #0
     286:	d003      	beq.n	290 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     288:	68fb      	ldr	r3, [r7, #12]
     28a:	68ba      	ldr	r2, [r7, #8]
     28c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     28e:	e002      	b.n	296 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     290:	68fb      	ldr	r3, [r7, #12]
     292:	68ba      	ldr	r2, [r7, #8]
     294:	615a      	str	r2, [r3, #20]
}
     296:	46c0      	nop			; (mov r8, r8)
     298:	46bd      	mov	sp, r7
     29a:	b004      	add	sp, #16
     29c:	bd80      	pop	{r7, pc}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	00000209 	.word	0x00000209

000002a4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b082      	sub	sp, #8
     2a8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2aa:	1d3b      	adds	r3, r7, #4
     2ac:	0018      	movs	r0, r3
     2ae:	4b0e      	ldr	r3, [pc, #56]	; (2e8 <system_board_init+0x44>)
     2b0:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     2b2:	1d3b      	adds	r3, r7, #4
     2b4:	2201      	movs	r2, #1
     2b6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2b8:	1d3b      	adds	r3, r7, #4
     2ba:	0019      	movs	r1, r3
     2bc:	2017      	movs	r0, #23
     2be:	4b0b      	ldr	r3, [pc, #44]	; (2ec <system_board_init+0x48>)
     2c0:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     2c2:	2101      	movs	r1, #1
     2c4:	2017      	movs	r0, #23
     2c6:	4b0a      	ldr	r3, [pc, #40]	; (2f0 <system_board_init+0x4c>)
     2c8:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     2ca:	1d3b      	adds	r3, r7, #4
     2cc:	2200      	movs	r2, #0
     2ce:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     2d0:	1d3b      	adds	r3, r7, #4
     2d2:	2201      	movs	r2, #1
     2d4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2d6:	1d3b      	adds	r3, r7, #4
     2d8:	0019      	movs	r1, r3
     2da:	2037      	movs	r0, #55	; 0x37
     2dc:	4b03      	ldr	r3, [pc, #12]	; (2ec <system_board_init+0x48>)
     2de:	4798      	blx	r3
}
     2e0:	46c0      	nop			; (mov r8, r8)
     2e2:	46bd      	mov	sp, r7
     2e4:	b002      	add	sp, #8
     2e6:	bd80      	pop	{r7, pc}
     2e8:	0000022d 	.word	0x0000022d
     2ec:	0000031d 	.word	0x0000031d
     2f0:	00000251 	.word	0x00000251

000002f4 <system_pinmux_get_config_defaults>:
{
     2f4:	b580      	push	{r7, lr}
     2f6:	b082      	sub	sp, #8
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	2280      	movs	r2, #128	; 0x80
     300:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     302:	687b      	ldr	r3, [r7, #4]
     304:	2200      	movs	r2, #0
     306:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     308:	687b      	ldr	r3, [r7, #4]
     30a:	2201      	movs	r2, #1
     30c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     30e:	687b      	ldr	r3, [r7, #4]
     310:	2200      	movs	r2, #0
     312:	70da      	strb	r2, [r3, #3]
}
     314:	46c0      	nop			; (mov r8, r8)
     316:	46bd      	mov	sp, r7
     318:	b002      	add	sp, #8
     31a:	bd80      	pop	{r7, pc}

0000031c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     31c:	b580      	push	{r7, lr}
     31e:	b084      	sub	sp, #16
     320:	af00      	add	r7, sp, #0
     322:	0002      	movs	r2, r0
     324:	6039      	str	r1, [r7, #0]
     326:	1dfb      	adds	r3, r7, #7
     328:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     32a:	230c      	movs	r3, #12
     32c:	18fb      	adds	r3, r7, r3
     32e:	0018      	movs	r0, r3
     330:	4b10      	ldr	r3, [pc, #64]	; (374 <port_pin_set_config+0x58>)
     332:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     334:	230c      	movs	r3, #12
     336:	18fb      	adds	r3, r7, r3
     338:	2280      	movs	r2, #128	; 0x80
     33a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     33c:	683b      	ldr	r3, [r7, #0]
     33e:	781a      	ldrb	r2, [r3, #0]
     340:	230c      	movs	r3, #12
     342:	18fb      	adds	r3, r7, r3
     344:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     346:	683b      	ldr	r3, [r7, #0]
     348:	785a      	ldrb	r2, [r3, #1]
     34a:	230c      	movs	r3, #12
     34c:	18fb      	adds	r3, r7, r3
     34e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     350:	683b      	ldr	r3, [r7, #0]
     352:	789a      	ldrb	r2, [r3, #2]
     354:	230c      	movs	r3, #12
     356:	18fb      	adds	r3, r7, r3
     358:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     35a:	230c      	movs	r3, #12
     35c:	18fa      	adds	r2, r7, r3
     35e:	1dfb      	adds	r3, r7, #7
     360:	781b      	ldrb	r3, [r3, #0]
     362:	0011      	movs	r1, r2
     364:	0018      	movs	r0, r3
     366:	4b04      	ldr	r3, [pc, #16]	; (378 <port_pin_set_config+0x5c>)
     368:	4798      	blx	r3
}
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	46bd      	mov	sp, r7
     36e:	b004      	add	sp, #16
     370:	bd80      	pop	{r7, pc}
     372:	46c0      	nop			; (mov r8, r8)
     374:	000002f5 	.word	0x000002f5
     378:	00000ab9 	.word	0x00000ab9

0000037c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     37c:	b580      	push	{r7, lr}
     37e:	b082      	sub	sp, #8
     380:	af00      	add	r7, sp, #0
     382:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     384:	687b      	ldr	r3, [r7, #4]
     386:	2200      	movs	r2, #0
     388:	701a      	strb	r2, [r3, #0]
}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	46bd      	mov	sp, r7
     38e:	b002      	add	sp, #8
     390:	bd80      	pop	{r7, pc}

00000392 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     392:	b5f0      	push	{r4, r5, r6, r7, lr}
     394:	b08d      	sub	sp, #52	; 0x34
     396:	af00      	add	r7, sp, #0
     398:	60b8      	str	r0, [r7, #8]
     39a:	60f9      	str	r1, [r7, #12]
     39c:	603a      	str	r2, [r7, #0]
     39e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     3a0:	2300      	movs	r3, #0
     3a2:	2400      	movs	r4, #0
     3a4:	623b      	str	r3, [r7, #32]
     3a6:	627c      	str	r4, [r7, #36]	; 0x24
     3a8:	2300      	movs	r3, #0
     3aa:	2400      	movs	r4, #0
     3ac:	61bb      	str	r3, [r7, #24]
     3ae:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     3b0:	233f      	movs	r3, #63	; 0x3f
     3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
     3b4:	e053      	b.n	45e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3b8:	3b20      	subs	r3, #32
     3ba:	2b00      	cmp	r3, #0
     3bc:	db04      	blt.n	3c8 <long_division+0x36>
     3be:	2201      	movs	r2, #1
     3c0:	409a      	lsls	r2, r3
     3c2:	0013      	movs	r3, r2
     3c4:	617b      	str	r3, [r7, #20]
     3c6:	e00b      	b.n	3e0 <long_division+0x4e>
     3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3ca:	2220      	movs	r2, #32
     3cc:	1ad3      	subs	r3, r2, r3
     3ce:	2201      	movs	r2, #1
     3d0:	40da      	lsrs	r2, r3
     3d2:	0013      	movs	r3, r2
     3d4:	2100      	movs	r1, #0
     3d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     3d8:	4091      	lsls	r1, r2
     3da:	000a      	movs	r2, r1
     3dc:	4313      	orrs	r3, r2
     3de:	617b      	str	r3, [r7, #20]
     3e0:	2201      	movs	r2, #1
     3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3e4:	409a      	lsls	r2, r3
     3e6:	0013      	movs	r3, r2
     3e8:	613b      	str	r3, [r7, #16]

		r = r << 1;
     3ea:	69bb      	ldr	r3, [r7, #24]
     3ec:	69fc      	ldr	r4, [r7, #28]
     3ee:	18db      	adds	r3, r3, r3
     3f0:	4164      	adcs	r4, r4
     3f2:	61bb      	str	r3, [r7, #24]
     3f4:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     3f6:	68bb      	ldr	r3, [r7, #8]
     3f8:	693a      	ldr	r2, [r7, #16]
     3fa:	401a      	ands	r2, r3
     3fc:	0015      	movs	r5, r2
     3fe:	68fb      	ldr	r3, [r7, #12]
     400:	697a      	ldr	r2, [r7, #20]
     402:	401a      	ands	r2, r3
     404:	0016      	movs	r6, r2
     406:	002b      	movs	r3, r5
     408:	4333      	orrs	r3, r6
     40a:	d007      	beq.n	41c <long_division+0x8a>
			r |= 0x01;
     40c:	69bb      	ldr	r3, [r7, #24]
     40e:	2201      	movs	r2, #1
     410:	4313      	orrs	r3, r2
     412:	61bb      	str	r3, [r7, #24]
     414:	69fb      	ldr	r3, [r7, #28]
     416:	2200      	movs	r2, #0
     418:	4313      	orrs	r3, r2
     41a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     41c:	687a      	ldr	r2, [r7, #4]
     41e:	69fb      	ldr	r3, [r7, #28]
     420:	429a      	cmp	r2, r3
     422:	d819      	bhi.n	458 <long_division+0xc6>
     424:	687a      	ldr	r2, [r7, #4]
     426:	69fb      	ldr	r3, [r7, #28]
     428:	429a      	cmp	r2, r3
     42a:	d103      	bne.n	434 <long_division+0xa2>
     42c:	683a      	ldr	r2, [r7, #0]
     42e:	69bb      	ldr	r3, [r7, #24]
     430:	429a      	cmp	r2, r3
     432:	d811      	bhi.n	458 <long_division+0xc6>
			r = r - d;
     434:	69b9      	ldr	r1, [r7, #24]
     436:	69fa      	ldr	r2, [r7, #28]
     438:	683b      	ldr	r3, [r7, #0]
     43a:	687c      	ldr	r4, [r7, #4]
     43c:	1ac9      	subs	r1, r1, r3
     43e:	41a2      	sbcs	r2, r4
     440:	000b      	movs	r3, r1
     442:	0014      	movs	r4, r2
     444:	61bb      	str	r3, [r7, #24]
     446:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     448:	6a3a      	ldr	r2, [r7, #32]
     44a:	693b      	ldr	r3, [r7, #16]
     44c:	4313      	orrs	r3, r2
     44e:	623b      	str	r3, [r7, #32]
     450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     452:	697b      	ldr	r3, [r7, #20]
     454:	4313      	orrs	r3, r2
     456:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
     458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     45a:	3b01      	subs	r3, #1
     45c:	62fb      	str	r3, [r7, #44]	; 0x2c
     45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     460:	2b00      	cmp	r3, #0
     462:	daa8      	bge.n	3b6 <long_division+0x24>
		}
	}

	return q;
     464:	6a3b      	ldr	r3, [r7, #32]
     466:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     468:	0018      	movs	r0, r3
     46a:	0021      	movs	r1, r4
     46c:	46bd      	mov	sp, r7
     46e:	b00d      	add	sp, #52	; 0x34
     470:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000472 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     472:	b580      	push	{r7, lr}
     474:	b086      	sub	sp, #24
     476:	af00      	add	r7, sp, #0
     478:	60f8      	str	r0, [r7, #12]
     47a:	60b9      	str	r1, [r7, #8]
     47c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     47e:	2316      	movs	r3, #22
     480:	18fb      	adds	r3, r7, r3
     482:	2200      	movs	r2, #0
     484:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     486:	68bb      	ldr	r3, [r7, #8]
     488:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     48a:	68bb      	ldr	r3, [r7, #8]
     48c:	085a      	lsrs	r2, r3, #1
     48e:	68fb      	ldr	r3, [r7, #12]
     490:	429a      	cmp	r2, r3
     492:	d201      	bcs.n	498 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     494:	2340      	movs	r3, #64	; 0x40
     496:	e026      	b.n	4e6 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     498:	68bb      	ldr	r3, [r7, #8]
     49a:	085b      	lsrs	r3, r3, #1
     49c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     49e:	e00a      	b.n	4b6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     4a0:	693a      	ldr	r2, [r7, #16]
     4a2:	68fb      	ldr	r3, [r7, #12]
     4a4:	1ad3      	subs	r3, r2, r3
     4a6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     4a8:	2316      	movs	r3, #22
     4aa:	18fb      	adds	r3, r7, r3
     4ac:	881a      	ldrh	r2, [r3, #0]
     4ae:	2316      	movs	r3, #22
     4b0:	18fb      	adds	r3, r7, r3
     4b2:	3201      	adds	r2, #1
     4b4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     4b6:	693a      	ldr	r2, [r7, #16]
     4b8:	68fb      	ldr	r3, [r7, #12]
     4ba:	429a      	cmp	r2, r3
     4bc:	d2f0      	bcs.n	4a0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     4be:	2316      	movs	r3, #22
     4c0:	18fb      	adds	r3, r7, r3
     4c2:	2216      	movs	r2, #22
     4c4:	18ba      	adds	r2, r7, r2
     4c6:	8812      	ldrh	r2, [r2, #0]
     4c8:	3a01      	subs	r2, #1
     4ca:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     4cc:	2316      	movs	r3, #22
     4ce:	18fb      	adds	r3, r7, r3
     4d0:	881b      	ldrh	r3, [r3, #0]
     4d2:	2bff      	cmp	r3, #255	; 0xff
     4d4:	d901      	bls.n	4da <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4d6:	2340      	movs	r3, #64	; 0x40
     4d8:	e005      	b.n	4e6 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	2216      	movs	r2, #22
     4de:	18ba      	adds	r2, r7, r2
     4e0:	8812      	ldrh	r2, [r2, #0]
     4e2:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     4e4:	2300      	movs	r3, #0
	}
}
     4e6:	0018      	movs	r0, r3
     4e8:	46bd      	mov	sp, r7
     4ea:	b006      	add	sp, #24
     4ec:	bd80      	pop	{r7, pc}
	...

000004f0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f2:	b0a1      	sub	sp, #132	; 0x84
     4f4:	af00      	add	r7, sp, #0
     4f6:	64f8      	str	r0, [r7, #76]	; 0x4c
     4f8:	64b9      	str	r1, [r7, #72]	; 0x48
     4fa:	647a      	str	r2, [r7, #68]	; 0x44
     4fc:	2243      	movs	r2, #67	; 0x43
     4fe:	18ba      	adds	r2, r7, r2
     500:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     502:	2300      	movs	r3, #0
     504:	2400      	movs	r4, #0
     506:	673b      	str	r3, [r7, #112]	; 0x70
     508:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     50a:	2300      	movs	r3, #0
     50c:	2400      	movs	r4, #0
     50e:	66bb      	str	r3, [r7, #104]	; 0x68
     510:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     512:	2300      	movs	r3, #0
     514:	2400      	movs	r4, #0
     516:	67bb      	str	r3, [r7, #120]	; 0x78
     518:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     51a:	2300      	movs	r3, #0
     51c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     51e:	2358      	movs	r3, #88	; 0x58
     520:	2240      	movs	r2, #64	; 0x40
     522:	4694      	mov	ip, r2
     524:	44bc      	add	ip, r7
     526:	4463      	add	r3, ip
     528:	781a      	ldrb	r2, [r3, #0]
     52a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     52c:	435a      	muls	r2, r3
     52e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     530:	429a      	cmp	r2, r3
     532:	d901      	bls.n	538 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     534:	2340      	movs	r3, #64	; 0x40
     536:	e0b3      	b.n	6a0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     538:	2343      	movs	r3, #67	; 0x43
     53a:	18fb      	adds	r3, r7, r3
     53c:	781b      	ldrb	r3, [r3, #0]
     53e:	2b00      	cmp	r3, #0
     540:	d13d      	bne.n	5be <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     542:	2358      	movs	r3, #88	; 0x58
     544:	2240      	movs	r2, #64	; 0x40
     546:	4694      	mov	ip, r2
     548:	44bc      	add	ip, r7
     54a:	4463      	add	r3, ip
     54c:	781b      	ldrb	r3, [r3, #0]
     54e:	b2db      	uxtb	r3, r3
     550:	613b      	str	r3, [r7, #16]
     552:	2300      	movs	r3, #0
     554:	617b      	str	r3, [r7, #20]
     556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     558:	60bb      	str	r3, [r7, #8]
     55a:	2300      	movs	r3, #0
     55c:	60fb      	str	r3, [r7, #12]
     55e:	4c52      	ldr	r4, [pc, #328]	; (6a8 <_sercom_get_async_baud_val+0x1b8>)
     560:	68ba      	ldr	r2, [r7, #8]
     562:	68fb      	ldr	r3, [r7, #12]
     564:	6938      	ldr	r0, [r7, #16]
     566:	6979      	ldr	r1, [r7, #20]
     568:	47a0      	blx	r4
     56a:	0003      	movs	r3, r0
     56c:	000c      	movs	r4, r1
     56e:	001b      	movs	r3, r3
     570:	65fb      	str	r3, [r7, #92]	; 0x5c
     572:	2300      	movs	r3, #0
     574:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     578:	603b      	str	r3, [r7, #0]
     57a:	2300      	movs	r3, #0
     57c:	607b      	str	r3, [r7, #4]
     57e:	6db8      	ldr	r0, [r7, #88]	; 0x58
     580:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     582:	683a      	ldr	r2, [r7, #0]
     584:	687b      	ldr	r3, [r7, #4]
     586:	4c49      	ldr	r4, [pc, #292]	; (6ac <_sercom_get_async_baud_val+0x1bc>)
     588:	47a0      	blx	r4
     58a:	0003      	movs	r3, r0
     58c:	000c      	movs	r4, r1
     58e:	673b      	str	r3, [r7, #112]	; 0x70
     590:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     592:	2100      	movs	r1, #0
     594:	2201      	movs	r2, #1
     596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     598:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     59a:	1ac9      	subs	r1, r1, r3
     59c:	41a2      	sbcs	r2, r4
     59e:	000b      	movs	r3, r1
     5a0:	0014      	movs	r4, r2
     5a2:	66bb      	str	r3, [r7, #104]	; 0x68
     5a4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     5a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     5a8:	0c1b      	lsrs	r3, r3, #16
     5aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     5ac:	0416      	lsls	r6, r2, #16
     5ae:	431e      	orrs	r6, r3
     5b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     5b2:	041d      	lsls	r5, r3, #16
     5b4:	0033      	movs	r3, r6
     5b6:	67bb      	str	r3, [r7, #120]	; 0x78
     5b8:	2300      	movs	r3, #0
     5ba:	67fb      	str	r3, [r7, #124]	; 0x7c
     5bc:	e06a      	b.n	694 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     5be:	2343      	movs	r3, #67	; 0x43
     5c0:	18fb      	adds	r3, r7, r3
     5c2:	781b      	ldrb	r3, [r3, #0]
     5c4:	2b01      	cmp	r3, #1
     5c6:	d165      	bne.n	694 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     5c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     5ca:	633b      	str	r3, [r7, #48]	; 0x30
     5cc:	2300      	movs	r3, #0
     5ce:	637b      	str	r3, [r7, #52]	; 0x34
     5d0:	2358      	movs	r3, #88	; 0x58
     5d2:	2240      	movs	r2, #64	; 0x40
     5d4:	4694      	mov	ip, r2
     5d6:	44bc      	add	ip, r7
     5d8:	4463      	add	r3, ip
     5da:	781b      	ldrb	r3, [r3, #0]
     5dc:	b2db      	uxtb	r3, r3
     5de:	62bb      	str	r3, [r7, #40]	; 0x28
     5e0:	2300      	movs	r3, #0
     5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
     5e4:	4c30      	ldr	r4, [pc, #192]	; (6a8 <_sercom_get_async_baud_val+0x1b8>)
     5e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     5ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
     5ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
     5ee:	47a0      	blx	r4
     5f0:	0003      	movs	r3, r0
     5f2:	000c      	movs	r4, r1
     5f4:	65bb      	str	r3, [r7, #88]	; 0x58
     5f6:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     5f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     5fa:	623b      	str	r3, [r7, #32]
     5fc:	2300      	movs	r3, #0
     5fe:	627b      	str	r3, [r7, #36]	; 0x24
     600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     602:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     604:	001a      	movs	r2, r3
     606:	0023      	movs	r3, r4
     608:	6a38      	ldr	r0, [r7, #32]
     60a:	6a79      	ldr	r1, [r7, #36]	; 0x24
     60c:	4c27      	ldr	r4, [pc, #156]	; (6ac <_sercom_get_async_baud_val+0x1bc>)
     60e:	47a0      	blx	r4
     610:	0003      	movs	r3, r0
     612:	000c      	movs	r4, r1
     614:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     616:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     618:	2380      	movs	r3, #128	; 0x80
     61a:	019b      	lsls	r3, r3, #6
     61c:	429a      	cmp	r2, r3
     61e:	d901      	bls.n	624 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     620:	2340      	movs	r3, #64	; 0x40
     622:	e03d      	b.n	6a0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     626:	61bb      	str	r3, [r7, #24]
     628:	2300      	movs	r3, #0
     62a:	61fb      	str	r3, [r7, #28]
     62c:	69b9      	ldr	r1, [r7, #24]
     62e:	69fa      	ldr	r2, [r7, #28]
     630:	000b      	movs	r3, r1
     632:	0f5b      	lsrs	r3, r3, #29
     634:	0010      	movs	r0, r2
     636:	00c0      	lsls	r0, r0, #3
     638:	63f8      	str	r0, [r7, #60]	; 0x3c
     63a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     63c:	4318      	orrs	r0, r3
     63e:	63f8      	str	r0, [r7, #60]	; 0x3c
     640:	000b      	movs	r3, r1
     642:	00db      	lsls	r3, r3, #3
     644:	63bb      	str	r3, [r7, #56]	; 0x38
     646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     648:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     64a:	001a      	movs	r2, r3
     64c:	0023      	movs	r3, r4
     64e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     652:	4c16      	ldr	r4, [pc, #88]	; (6ac <_sercom_get_async_baud_val+0x1bc>)
     654:	47a0      	blx	r4
     656:	0003      	movs	r3, r0
     658:	000c      	movs	r4, r1
     65a:	65bb      	str	r3, [r7, #88]	; 0x58
     65c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     65e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     660:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     662:	b2d9      	uxtb	r1, r3
     664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     666:	b2db      	uxtb	r3, r3
     668:	00db      	lsls	r3, r3, #3
     66a:	b2da      	uxtb	r2, r3
     66c:	2317      	movs	r3, #23
     66e:	2040      	movs	r0, #64	; 0x40
     670:	4684      	mov	ip, r0
     672:	44bc      	add	ip, r7
     674:	4463      	add	r3, ip
     676:	1a8a      	subs	r2, r1, r2
     678:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     67a:	2317      	movs	r3, #23
     67c:	2240      	movs	r2, #64	; 0x40
     67e:	4694      	mov	ip, r2
     680:	44bc      	add	ip, r7
     682:	4463      	add	r3, ip
     684:	781b      	ldrb	r3, [r3, #0]
     686:	035b      	lsls	r3, r3, #13
     688:	001a      	movs	r2, r3
     68a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     68c:	4313      	orrs	r3, r2
     68e:	67bb      	str	r3, [r7, #120]	; 0x78
     690:	2300      	movs	r3, #0
     692:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     696:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     698:	b29a      	uxth	r2, r3
     69a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     69c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     69e:	2300      	movs	r3, #0
}
     6a0:	0018      	movs	r0, r3
     6a2:	46bd      	mov	sp, r7
     6a4:	b021      	add	sp, #132	; 0x84
     6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a8:	00005329 	.word	0x00005329
     6ac:	00000393 	.word	0x00000393

000006b0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6b0:	b580      	push	{r7, lr}
     6b2:	b084      	sub	sp, #16
     6b4:	af00      	add	r7, sp, #0
     6b6:	0002      	movs	r2, r0
     6b8:	1dfb      	adds	r3, r7, #7
     6ba:	701a      	strb	r2, [r3, #0]
     6bc:	1dbb      	adds	r3, r7, #6
     6be:	1c0a      	adds	r2, r1, #0
     6c0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     6c2:	4b1a      	ldr	r3, [pc, #104]	; (72c <sercom_set_gclk_generator+0x7c>)
     6c4:	781b      	ldrb	r3, [r3, #0]
     6c6:	2201      	movs	r2, #1
     6c8:	4053      	eors	r3, r2
     6ca:	b2db      	uxtb	r3, r3
     6cc:	2b00      	cmp	r3, #0
     6ce:	d103      	bne.n	6d8 <sercom_set_gclk_generator+0x28>
     6d0:	1dbb      	adds	r3, r7, #6
     6d2:	781b      	ldrb	r3, [r3, #0]
     6d4:	2b00      	cmp	r3, #0
     6d6:	d01b      	beq.n	710 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     6d8:	230c      	movs	r3, #12
     6da:	18fb      	adds	r3, r7, r3
     6dc:	0018      	movs	r0, r3
     6de:	4b14      	ldr	r3, [pc, #80]	; (730 <sercom_set_gclk_generator+0x80>)
     6e0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     6e2:	230c      	movs	r3, #12
     6e4:	18fb      	adds	r3, r7, r3
     6e6:	1dfa      	adds	r2, r7, #7
     6e8:	7812      	ldrb	r2, [r2, #0]
     6ea:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6ec:	230c      	movs	r3, #12
     6ee:	18fb      	adds	r3, r7, r3
     6f0:	0019      	movs	r1, r3
     6f2:	2013      	movs	r0, #19
     6f4:	4b0f      	ldr	r3, [pc, #60]	; (734 <sercom_set_gclk_generator+0x84>)
     6f6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6f8:	2013      	movs	r0, #19
     6fa:	4b0f      	ldr	r3, [pc, #60]	; (738 <sercom_set_gclk_generator+0x88>)
     6fc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     6fe:	4b0b      	ldr	r3, [pc, #44]	; (72c <sercom_set_gclk_generator+0x7c>)
     700:	1dfa      	adds	r2, r7, #7
     702:	7812      	ldrb	r2, [r2, #0]
     704:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     706:	4b09      	ldr	r3, [pc, #36]	; (72c <sercom_set_gclk_generator+0x7c>)
     708:	2201      	movs	r2, #1
     70a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     70c:	2300      	movs	r3, #0
     70e:	e008      	b.n	722 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     710:	4b06      	ldr	r3, [pc, #24]	; (72c <sercom_set_gclk_generator+0x7c>)
     712:	785b      	ldrb	r3, [r3, #1]
     714:	1dfa      	adds	r2, r7, #7
     716:	7812      	ldrb	r2, [r2, #0]
     718:	429a      	cmp	r2, r3
     71a:	d101      	bne.n	720 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     71c:	2300      	movs	r3, #0
     71e:	e000      	b.n	722 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     720:	231d      	movs	r3, #29
}
     722:	0018      	movs	r0, r3
     724:	46bd      	mov	sp, r7
     726:	b004      	add	sp, #16
     728:	bd80      	pop	{r7, pc}
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	20000208 	.word	0x20000208
     730:	0000037d 	.word	0x0000037d
     734:	00004eb5 	.word	0x00004eb5
     738:	00004ef9 	.word	0x00004ef9

0000073c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     73c:	b580      	push	{r7, lr}
     73e:	b082      	sub	sp, #8
     740:	af00      	add	r7, sp, #0
     742:	6078      	str	r0, [r7, #4]
     744:	000a      	movs	r2, r1
     746:	1cfb      	adds	r3, r7, #3
     748:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	4a4d      	ldr	r2, [pc, #308]	; (884 <_sercom_get_default_pad+0x148>)
     74e:	4293      	cmp	r3, r2
     750:	d03f      	beq.n	7d2 <_sercom_get_default_pad+0x96>
     752:	4a4c      	ldr	r2, [pc, #304]	; (884 <_sercom_get_default_pad+0x148>)
     754:	4293      	cmp	r3, r2
     756:	d806      	bhi.n	766 <_sercom_get_default_pad+0x2a>
     758:	4a4b      	ldr	r2, [pc, #300]	; (888 <_sercom_get_default_pad+0x14c>)
     75a:	4293      	cmp	r3, r2
     75c:	d00f      	beq.n	77e <_sercom_get_default_pad+0x42>
     75e:	4a4b      	ldr	r2, [pc, #300]	; (88c <_sercom_get_default_pad+0x150>)
     760:	4293      	cmp	r3, r2
     762:	d021      	beq.n	7a8 <_sercom_get_default_pad+0x6c>
     764:	e089      	b.n	87a <_sercom_get_default_pad+0x13e>
     766:	4a4a      	ldr	r2, [pc, #296]	; (890 <_sercom_get_default_pad+0x154>)
     768:	4293      	cmp	r3, r2
     76a:	d100      	bne.n	76e <_sercom_get_default_pad+0x32>
     76c:	e05b      	b.n	826 <_sercom_get_default_pad+0xea>
     76e:	4a49      	ldr	r2, [pc, #292]	; (894 <_sercom_get_default_pad+0x158>)
     770:	4293      	cmp	r3, r2
     772:	d100      	bne.n	776 <_sercom_get_default_pad+0x3a>
     774:	e06c      	b.n	850 <_sercom_get_default_pad+0x114>
     776:	4a48      	ldr	r2, [pc, #288]	; (898 <_sercom_get_default_pad+0x15c>)
     778:	4293      	cmp	r3, r2
     77a:	d03f      	beq.n	7fc <_sercom_get_default_pad+0xc0>
     77c:	e07d      	b.n	87a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     77e:	1cfb      	adds	r3, r7, #3
     780:	781b      	ldrb	r3, [r3, #0]
     782:	2b01      	cmp	r3, #1
     784:	d00a      	beq.n	79c <_sercom_get_default_pad+0x60>
     786:	dc02      	bgt.n	78e <_sercom_get_default_pad+0x52>
     788:	2b00      	cmp	r3, #0
     78a:	d005      	beq.n	798 <_sercom_get_default_pad+0x5c>
     78c:	e075      	b.n	87a <_sercom_get_default_pad+0x13e>
     78e:	2b02      	cmp	r3, #2
     790:	d006      	beq.n	7a0 <_sercom_get_default_pad+0x64>
     792:	2b03      	cmp	r3, #3
     794:	d006      	beq.n	7a4 <_sercom_get_default_pad+0x68>
     796:	e070      	b.n	87a <_sercom_get_default_pad+0x13e>
     798:	4b40      	ldr	r3, [pc, #256]	; (89c <_sercom_get_default_pad+0x160>)
     79a:	e06f      	b.n	87c <_sercom_get_default_pad+0x140>
     79c:	4b40      	ldr	r3, [pc, #256]	; (8a0 <_sercom_get_default_pad+0x164>)
     79e:	e06d      	b.n	87c <_sercom_get_default_pad+0x140>
     7a0:	4b40      	ldr	r3, [pc, #256]	; (8a4 <_sercom_get_default_pad+0x168>)
     7a2:	e06b      	b.n	87c <_sercom_get_default_pad+0x140>
     7a4:	4b40      	ldr	r3, [pc, #256]	; (8a8 <_sercom_get_default_pad+0x16c>)
     7a6:	e069      	b.n	87c <_sercom_get_default_pad+0x140>
     7a8:	1cfb      	adds	r3, r7, #3
     7aa:	781b      	ldrb	r3, [r3, #0]
     7ac:	2b01      	cmp	r3, #1
     7ae:	d00a      	beq.n	7c6 <_sercom_get_default_pad+0x8a>
     7b0:	dc02      	bgt.n	7b8 <_sercom_get_default_pad+0x7c>
     7b2:	2b00      	cmp	r3, #0
     7b4:	d005      	beq.n	7c2 <_sercom_get_default_pad+0x86>
     7b6:	e060      	b.n	87a <_sercom_get_default_pad+0x13e>
     7b8:	2b02      	cmp	r3, #2
     7ba:	d006      	beq.n	7ca <_sercom_get_default_pad+0x8e>
     7bc:	2b03      	cmp	r3, #3
     7be:	d006      	beq.n	7ce <_sercom_get_default_pad+0x92>
     7c0:	e05b      	b.n	87a <_sercom_get_default_pad+0x13e>
     7c2:	2303      	movs	r3, #3
     7c4:	e05a      	b.n	87c <_sercom_get_default_pad+0x140>
     7c6:	4b39      	ldr	r3, [pc, #228]	; (8ac <_sercom_get_default_pad+0x170>)
     7c8:	e058      	b.n	87c <_sercom_get_default_pad+0x140>
     7ca:	4b39      	ldr	r3, [pc, #228]	; (8b0 <_sercom_get_default_pad+0x174>)
     7cc:	e056      	b.n	87c <_sercom_get_default_pad+0x140>
     7ce:	4b39      	ldr	r3, [pc, #228]	; (8b4 <_sercom_get_default_pad+0x178>)
     7d0:	e054      	b.n	87c <_sercom_get_default_pad+0x140>
     7d2:	1cfb      	adds	r3, r7, #3
     7d4:	781b      	ldrb	r3, [r3, #0]
     7d6:	2b01      	cmp	r3, #1
     7d8:	d00a      	beq.n	7f0 <_sercom_get_default_pad+0xb4>
     7da:	dc02      	bgt.n	7e2 <_sercom_get_default_pad+0xa6>
     7dc:	2b00      	cmp	r3, #0
     7de:	d005      	beq.n	7ec <_sercom_get_default_pad+0xb0>
     7e0:	e04b      	b.n	87a <_sercom_get_default_pad+0x13e>
     7e2:	2b02      	cmp	r3, #2
     7e4:	d006      	beq.n	7f4 <_sercom_get_default_pad+0xb8>
     7e6:	2b03      	cmp	r3, #3
     7e8:	d006      	beq.n	7f8 <_sercom_get_default_pad+0xbc>
     7ea:	e046      	b.n	87a <_sercom_get_default_pad+0x13e>
     7ec:	4b32      	ldr	r3, [pc, #200]	; (8b8 <_sercom_get_default_pad+0x17c>)
     7ee:	e045      	b.n	87c <_sercom_get_default_pad+0x140>
     7f0:	4b32      	ldr	r3, [pc, #200]	; (8bc <_sercom_get_default_pad+0x180>)
     7f2:	e043      	b.n	87c <_sercom_get_default_pad+0x140>
     7f4:	4b32      	ldr	r3, [pc, #200]	; (8c0 <_sercom_get_default_pad+0x184>)
     7f6:	e041      	b.n	87c <_sercom_get_default_pad+0x140>
     7f8:	4b32      	ldr	r3, [pc, #200]	; (8c4 <_sercom_get_default_pad+0x188>)
     7fa:	e03f      	b.n	87c <_sercom_get_default_pad+0x140>
     7fc:	1cfb      	adds	r3, r7, #3
     7fe:	781b      	ldrb	r3, [r3, #0]
     800:	2b01      	cmp	r3, #1
     802:	d00a      	beq.n	81a <_sercom_get_default_pad+0xde>
     804:	dc02      	bgt.n	80c <_sercom_get_default_pad+0xd0>
     806:	2b00      	cmp	r3, #0
     808:	d005      	beq.n	816 <_sercom_get_default_pad+0xda>
     80a:	e036      	b.n	87a <_sercom_get_default_pad+0x13e>
     80c:	2b02      	cmp	r3, #2
     80e:	d006      	beq.n	81e <_sercom_get_default_pad+0xe2>
     810:	2b03      	cmp	r3, #3
     812:	d006      	beq.n	822 <_sercom_get_default_pad+0xe6>
     814:	e031      	b.n	87a <_sercom_get_default_pad+0x13e>
     816:	4b2c      	ldr	r3, [pc, #176]	; (8c8 <_sercom_get_default_pad+0x18c>)
     818:	e030      	b.n	87c <_sercom_get_default_pad+0x140>
     81a:	4b2c      	ldr	r3, [pc, #176]	; (8cc <_sercom_get_default_pad+0x190>)
     81c:	e02e      	b.n	87c <_sercom_get_default_pad+0x140>
     81e:	4b2c      	ldr	r3, [pc, #176]	; (8d0 <_sercom_get_default_pad+0x194>)
     820:	e02c      	b.n	87c <_sercom_get_default_pad+0x140>
     822:	4b2c      	ldr	r3, [pc, #176]	; (8d4 <_sercom_get_default_pad+0x198>)
     824:	e02a      	b.n	87c <_sercom_get_default_pad+0x140>
     826:	1cfb      	adds	r3, r7, #3
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	2b01      	cmp	r3, #1
     82c:	d00a      	beq.n	844 <_sercom_get_default_pad+0x108>
     82e:	dc02      	bgt.n	836 <_sercom_get_default_pad+0xfa>
     830:	2b00      	cmp	r3, #0
     832:	d005      	beq.n	840 <_sercom_get_default_pad+0x104>
     834:	e021      	b.n	87a <_sercom_get_default_pad+0x13e>
     836:	2b02      	cmp	r3, #2
     838:	d006      	beq.n	848 <_sercom_get_default_pad+0x10c>
     83a:	2b03      	cmp	r3, #3
     83c:	d006      	beq.n	84c <_sercom_get_default_pad+0x110>
     83e:	e01c      	b.n	87a <_sercom_get_default_pad+0x13e>
     840:	4b25      	ldr	r3, [pc, #148]	; (8d8 <_sercom_get_default_pad+0x19c>)
     842:	e01b      	b.n	87c <_sercom_get_default_pad+0x140>
     844:	4b25      	ldr	r3, [pc, #148]	; (8dc <_sercom_get_default_pad+0x1a0>)
     846:	e019      	b.n	87c <_sercom_get_default_pad+0x140>
     848:	4b25      	ldr	r3, [pc, #148]	; (8e0 <_sercom_get_default_pad+0x1a4>)
     84a:	e017      	b.n	87c <_sercom_get_default_pad+0x140>
     84c:	4b25      	ldr	r3, [pc, #148]	; (8e4 <_sercom_get_default_pad+0x1a8>)
     84e:	e015      	b.n	87c <_sercom_get_default_pad+0x140>
     850:	1cfb      	adds	r3, r7, #3
     852:	781b      	ldrb	r3, [r3, #0]
     854:	2b01      	cmp	r3, #1
     856:	d00a      	beq.n	86e <_sercom_get_default_pad+0x132>
     858:	dc02      	bgt.n	860 <_sercom_get_default_pad+0x124>
     85a:	2b00      	cmp	r3, #0
     85c:	d005      	beq.n	86a <_sercom_get_default_pad+0x12e>
     85e:	e00c      	b.n	87a <_sercom_get_default_pad+0x13e>
     860:	2b02      	cmp	r3, #2
     862:	d006      	beq.n	872 <_sercom_get_default_pad+0x136>
     864:	2b03      	cmp	r3, #3
     866:	d006      	beq.n	876 <_sercom_get_default_pad+0x13a>
     868:	e007      	b.n	87a <_sercom_get_default_pad+0x13e>
     86a:	4b1f      	ldr	r3, [pc, #124]	; (8e8 <_sercom_get_default_pad+0x1ac>)
     86c:	e006      	b.n	87c <_sercom_get_default_pad+0x140>
     86e:	4b1f      	ldr	r3, [pc, #124]	; (8ec <_sercom_get_default_pad+0x1b0>)
     870:	e004      	b.n	87c <_sercom_get_default_pad+0x140>
     872:	4b1f      	ldr	r3, [pc, #124]	; (8f0 <_sercom_get_default_pad+0x1b4>)
     874:	e002      	b.n	87c <_sercom_get_default_pad+0x140>
     876:	4b1f      	ldr	r3, [pc, #124]	; (8f4 <_sercom_get_default_pad+0x1b8>)
     878:	e000      	b.n	87c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     87a:	2300      	movs	r3, #0
}
     87c:	0018      	movs	r0, r3
     87e:	46bd      	mov	sp, r7
     880:	b002      	add	sp, #8
     882:	bd80      	pop	{r7, pc}
     884:	42001000 	.word	0x42001000
     888:	42000800 	.word	0x42000800
     88c:	42000c00 	.word	0x42000c00
     890:	42001800 	.word	0x42001800
     894:	42001c00 	.word	0x42001c00
     898:	42001400 	.word	0x42001400
     89c:	00040003 	.word	0x00040003
     8a0:	00050003 	.word	0x00050003
     8a4:	00060003 	.word	0x00060003
     8a8:	00070003 	.word	0x00070003
     8ac:	00010003 	.word	0x00010003
     8b0:	001e0003 	.word	0x001e0003
     8b4:	001f0003 	.word	0x001f0003
     8b8:	00080003 	.word	0x00080003
     8bc:	00090003 	.word	0x00090003
     8c0:	000a0003 	.word	0x000a0003
     8c4:	000b0003 	.word	0x000b0003
     8c8:	00100003 	.word	0x00100003
     8cc:	00110003 	.word	0x00110003
     8d0:	00120003 	.word	0x00120003
     8d4:	00130003 	.word	0x00130003
     8d8:	000c0003 	.word	0x000c0003
     8dc:	000d0003 	.word	0x000d0003
     8e0:	000e0003 	.word	0x000e0003
     8e4:	000f0003 	.word	0x000f0003
     8e8:	00160003 	.word	0x00160003
     8ec:	00170003 	.word	0x00170003
     8f0:	00180003 	.word	0x00180003
     8f4:	00190003 	.word	0x00190003

000008f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     8f8:	b590      	push	{r4, r7, lr}
     8fa:	b08b      	sub	sp, #44	; 0x2c
     8fc:	af00      	add	r7, sp, #0
     8fe:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     900:	230c      	movs	r3, #12
     902:	18fb      	adds	r3, r7, r3
     904:	4a0f      	ldr	r2, [pc, #60]	; (944 <_sercom_get_sercom_inst_index+0x4c>)
     906:	ca13      	ldmia	r2!, {r0, r1, r4}
     908:	c313      	stmia	r3!, {r0, r1, r4}
     90a:	ca13      	ldmia	r2!, {r0, r1, r4}
     90c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     90e:	2300      	movs	r3, #0
     910:	627b      	str	r3, [r7, #36]	; 0x24
     912:	e00e      	b.n	932 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     914:	230c      	movs	r3, #12
     916:	18fb      	adds	r3, r7, r3
     918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     91a:	0092      	lsls	r2, r2, #2
     91c:	58d3      	ldr	r3, [r2, r3]
     91e:	001a      	movs	r2, r3
     920:	687b      	ldr	r3, [r7, #4]
     922:	429a      	cmp	r2, r3
     924:	d102      	bne.n	92c <_sercom_get_sercom_inst_index+0x34>
			return i;
     926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     928:	b2db      	uxtb	r3, r3
     92a:	e006      	b.n	93a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     92e:	3301      	adds	r3, #1
     930:	627b      	str	r3, [r7, #36]	; 0x24
     932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     934:	2b05      	cmp	r3, #5
     936:	d9ed      	bls.n	914 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     938:	2300      	movs	r3, #0
}
     93a:	0018      	movs	r0, r3
     93c:	46bd      	mov	sp, r7
     93e:	b00b      	add	sp, #44	; 0x2c
     940:	bd90      	pop	{r4, r7, pc}
     942:	46c0      	nop			; (mov r8, r8)
     944:	00005dc8 	.word	0x00005dc8

00000948 <system_pinmux_get_group_from_gpio_pin>:
{
     948:	b580      	push	{r7, lr}
     94a:	b084      	sub	sp, #16
     94c:	af00      	add	r7, sp, #0
     94e:	0002      	movs	r2, r0
     950:	1dfb      	adds	r3, r7, #7
     952:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     954:	230f      	movs	r3, #15
     956:	18fb      	adds	r3, r7, r3
     958:	1dfa      	adds	r2, r7, #7
     95a:	7812      	ldrb	r2, [r2, #0]
     95c:	09d2      	lsrs	r2, r2, #7
     95e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     960:	230e      	movs	r3, #14
     962:	18fb      	adds	r3, r7, r3
     964:	1dfa      	adds	r2, r7, #7
     966:	7812      	ldrb	r2, [r2, #0]
     968:	0952      	lsrs	r2, r2, #5
     96a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     96c:	4b0d      	ldr	r3, [pc, #52]	; (9a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     96e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     970:	230f      	movs	r3, #15
     972:	18fb      	adds	r3, r7, r3
     974:	781b      	ldrb	r3, [r3, #0]
     976:	2b00      	cmp	r3, #0
     978:	d10f      	bne.n	99a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     97a:	230f      	movs	r3, #15
     97c:	18fb      	adds	r3, r7, r3
     97e:	781b      	ldrb	r3, [r3, #0]
     980:	009b      	lsls	r3, r3, #2
     982:	2210      	movs	r2, #16
     984:	4694      	mov	ip, r2
     986:	44bc      	add	ip, r7
     988:	4463      	add	r3, ip
     98a:	3b08      	subs	r3, #8
     98c:	681a      	ldr	r2, [r3, #0]
     98e:	230e      	movs	r3, #14
     990:	18fb      	adds	r3, r7, r3
     992:	781b      	ldrb	r3, [r3, #0]
     994:	01db      	lsls	r3, r3, #7
     996:	18d3      	adds	r3, r2, r3
     998:	e000      	b.n	99c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     99a:	2300      	movs	r3, #0
}
     99c:	0018      	movs	r0, r3
     99e:	46bd      	mov	sp, r7
     9a0:	b004      	add	sp, #16
     9a2:	bd80      	pop	{r7, pc}
     9a4:	41004400 	.word	0x41004400

000009a8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     9a8:	b580      	push	{r7, lr}
     9aa:	b088      	sub	sp, #32
     9ac:	af00      	add	r7, sp, #0
     9ae:	60f8      	str	r0, [r7, #12]
     9b0:	60b9      	str	r1, [r7, #8]
     9b2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     9b4:	2300      	movs	r3, #0
     9b6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     9b8:	687b      	ldr	r3, [r7, #4]
     9ba:	78db      	ldrb	r3, [r3, #3]
     9bc:	2201      	movs	r2, #1
     9be:	4053      	eors	r3, r2
     9c0:	b2db      	uxtb	r3, r3
     9c2:	2b00      	cmp	r3, #0
     9c4:	d035      	beq.n	a32 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	781b      	ldrb	r3, [r3, #0]
     9ca:	2b80      	cmp	r3, #128	; 0x80
     9cc:	d00b      	beq.n	9e6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
     9ce:	69fb      	ldr	r3, [r7, #28]
     9d0:	2280      	movs	r2, #128	; 0x80
     9d2:	0252      	lsls	r2, r2, #9
     9d4:	4313      	orrs	r3, r2
     9d6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     9d8:	687b      	ldr	r3, [r7, #4]
     9da:	781b      	ldrb	r3, [r3, #0]
     9dc:	061b      	lsls	r3, r3, #24
     9de:	001a      	movs	r2, r3
     9e0:	69fb      	ldr	r3, [r7, #28]
     9e2:	4313      	orrs	r3, r2
     9e4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	785b      	ldrb	r3, [r3, #1]
     9ea:	2b00      	cmp	r3, #0
     9ec:	d003      	beq.n	9f6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     9f2:	2b02      	cmp	r3, #2
     9f4:	d110      	bne.n	a18 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     9f6:	69fb      	ldr	r3, [r7, #28]
     9f8:	2280      	movs	r2, #128	; 0x80
     9fa:	0292      	lsls	r2, r2, #10
     9fc:	4313      	orrs	r3, r2
     9fe:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	789b      	ldrb	r3, [r3, #2]
     a04:	2b00      	cmp	r3, #0
     a06:	d004      	beq.n	a12 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     a08:	69fb      	ldr	r3, [r7, #28]
     a0a:	2280      	movs	r2, #128	; 0x80
     a0c:	02d2      	lsls	r2, r2, #11
     a0e:	4313      	orrs	r3, r2
     a10:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     a12:	68fb      	ldr	r3, [r7, #12]
     a14:	68ba      	ldr	r2, [r7, #8]
     a16:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     a18:	687b      	ldr	r3, [r7, #4]
     a1a:	785b      	ldrb	r3, [r3, #1]
     a1c:	2b01      	cmp	r3, #1
     a1e:	d003      	beq.n	a28 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     a20:	687b      	ldr	r3, [r7, #4]
     a22:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     a24:	2b02      	cmp	r3, #2
     a26:	d107      	bne.n	a38 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     a28:	69fb      	ldr	r3, [r7, #28]
     a2a:	4a22      	ldr	r2, [pc, #136]	; (ab4 <_system_pinmux_config+0x10c>)
     a2c:	4013      	ands	r3, r2
     a2e:	61fb      	str	r3, [r7, #28]
     a30:	e002      	b.n	a38 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     a32:	68fb      	ldr	r3, [r7, #12]
     a34:	68ba      	ldr	r2, [r7, #8]
     a36:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     a38:	68bb      	ldr	r3, [r7, #8]
     a3a:	041b      	lsls	r3, r3, #16
     a3c:	0c1b      	lsrs	r3, r3, #16
     a3e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
     a40:	68bb      	ldr	r3, [r7, #8]
     a42:	0c1b      	lsrs	r3, r3, #16
     a44:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     a46:	69ba      	ldr	r2, [r7, #24]
     a48:	69fb      	ldr	r3, [r7, #28]
     a4a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     a4c:	22a0      	movs	r2, #160	; 0xa0
     a4e:	05d2      	lsls	r2, r2, #23
     a50:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     a52:	68fb      	ldr	r3, [r7, #12]
     a54:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     a56:	697a      	ldr	r2, [r7, #20]
     a58:	69fb      	ldr	r3, [r7, #28]
     a5a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     a5c:	22d0      	movs	r2, #208	; 0xd0
     a5e:	0612      	lsls	r2, r2, #24
     a60:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     a62:	68fb      	ldr	r3, [r7, #12]
     a64:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	78db      	ldrb	r3, [r3, #3]
     a6a:	2201      	movs	r2, #1
     a6c:	4053      	eors	r3, r2
     a6e:	b2db      	uxtb	r3, r3
     a70:	2b00      	cmp	r3, #0
     a72:	d01a      	beq.n	aaa <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     a74:	69fa      	ldr	r2, [r7, #28]
     a76:	2380      	movs	r3, #128	; 0x80
     a78:	02db      	lsls	r3, r3, #11
     a7a:	4013      	ands	r3, r2
     a7c:	d00a      	beq.n	a94 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	789b      	ldrb	r3, [r3, #2]
     a82:	2b01      	cmp	r3, #1
     a84:	d103      	bne.n	a8e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
     a86:	68fb      	ldr	r3, [r7, #12]
     a88:	68ba      	ldr	r2, [r7, #8]
     a8a:	619a      	str	r2, [r3, #24]
     a8c:	e002      	b.n	a94 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
     a8e:	68fb      	ldr	r3, [r7, #12]
     a90:	68ba      	ldr	r2, [r7, #8]
     a92:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	785b      	ldrb	r3, [r3, #1]
     a98:	2b01      	cmp	r3, #1
     a9a:	d003      	beq.n	aa4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     aa0:	2b02      	cmp	r3, #2
     aa2:	d102      	bne.n	aaa <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     aa4:	68fb      	ldr	r3, [r7, #12]
     aa6:	68ba      	ldr	r2, [r7, #8]
     aa8:	609a      	str	r2, [r3, #8]
		}
	}
}
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	46bd      	mov	sp, r7
     aae:	b008      	add	sp, #32
     ab0:	bd80      	pop	{r7, pc}
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	fffbffff 	.word	0xfffbffff

00000ab8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     ab8:	b580      	push	{r7, lr}
     aba:	b084      	sub	sp, #16
     abc:	af00      	add	r7, sp, #0
     abe:	0002      	movs	r2, r0
     ac0:	6039      	str	r1, [r7, #0]
     ac2:	1dfb      	adds	r3, r7, #7
     ac4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     ac6:	1dfb      	adds	r3, r7, #7
     ac8:	781b      	ldrb	r3, [r3, #0]
     aca:	0018      	movs	r0, r3
     acc:	4b0a      	ldr	r3, [pc, #40]	; (af8 <system_pinmux_pin_set_config+0x40>)
     ace:	4798      	blx	r3
     ad0:	0003      	movs	r3, r0
     ad2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     ad4:	1dfb      	adds	r3, r7, #7
     ad6:	781b      	ldrb	r3, [r3, #0]
     ad8:	221f      	movs	r2, #31
     ada:	4013      	ands	r3, r2
     adc:	2201      	movs	r2, #1
     ade:	409a      	lsls	r2, r3
     ae0:	0013      	movs	r3, r2
     ae2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
     ae4:	683a      	ldr	r2, [r7, #0]
     ae6:	68b9      	ldr	r1, [r7, #8]
     ae8:	68fb      	ldr	r3, [r7, #12]
     aea:	0018      	movs	r0, r3
     aec:	4b03      	ldr	r3, [pc, #12]	; (afc <system_pinmux_pin_set_config+0x44>)
     aee:	4798      	blx	r3
}
     af0:	46c0      	nop			; (mov r8, r8)
     af2:	46bd      	mov	sp, r7
     af4:	b004      	add	sp, #16
     af6:	bd80      	pop	{r7, pc}
     af8:	00000949 	.word	0x00000949
     afc:	000009a9 	.word	0x000009a9

00000b00 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     b00:	b580      	push	{r7, lr}
     b02:	b082      	sub	sp, #8
     b04:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     b06:	4b2f      	ldr	r3, [pc, #188]	; (bc4 <Reset_Handler+0xc4>)
     b08:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     b0a:	4b2f      	ldr	r3, [pc, #188]	; (bc8 <Reset_Handler+0xc8>)
     b0c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     b0e:	687a      	ldr	r2, [r7, #4]
     b10:	683b      	ldr	r3, [r7, #0]
     b12:	429a      	cmp	r2, r3
     b14:	d00c      	beq.n	b30 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     b16:	e007      	b.n	b28 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     b18:	683b      	ldr	r3, [r7, #0]
     b1a:	1d1a      	adds	r2, r3, #4
     b1c:	603a      	str	r2, [r7, #0]
     b1e:	687a      	ldr	r2, [r7, #4]
     b20:	1d11      	adds	r1, r2, #4
     b22:	6079      	str	r1, [r7, #4]
     b24:	6812      	ldr	r2, [r2, #0]
     b26:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     b28:	683a      	ldr	r2, [r7, #0]
     b2a:	4b28      	ldr	r3, [pc, #160]	; (bcc <Reset_Handler+0xcc>)
     b2c:	429a      	cmp	r2, r3
     b2e:	d3f3      	bcc.n	b18 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     b30:	4b27      	ldr	r3, [pc, #156]	; (bd0 <Reset_Handler+0xd0>)
     b32:	603b      	str	r3, [r7, #0]
     b34:	e004      	b.n	b40 <Reset_Handler+0x40>
                *pDest++ = 0;
     b36:	683b      	ldr	r3, [r7, #0]
     b38:	1d1a      	adds	r2, r3, #4
     b3a:	603a      	str	r2, [r7, #0]
     b3c:	2200      	movs	r2, #0
     b3e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     b40:	683a      	ldr	r2, [r7, #0]
     b42:	4b24      	ldr	r3, [pc, #144]	; (bd4 <Reset_Handler+0xd4>)
     b44:	429a      	cmp	r2, r3
     b46:	d3f6      	bcc.n	b36 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     b48:	4b23      	ldr	r3, [pc, #140]	; (bd8 <Reset_Handler+0xd8>)
     b4a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     b4c:	4b23      	ldr	r3, [pc, #140]	; (bdc <Reset_Handler+0xdc>)
     b4e:	687a      	ldr	r2, [r7, #4]
     b50:	21ff      	movs	r1, #255	; 0xff
     b52:	438a      	bics	r2, r1
     b54:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     b56:	4a22      	ldr	r2, [pc, #136]	; (be0 <Reset_Handler+0xe0>)
     b58:	2390      	movs	r3, #144	; 0x90
     b5a:	005b      	lsls	r3, r3, #1
     b5c:	2102      	movs	r1, #2
     b5e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     b60:	4a20      	ldr	r2, [pc, #128]	; (be4 <Reset_Handler+0xe4>)
     b62:	78d3      	ldrb	r3, [r2, #3]
     b64:	2103      	movs	r1, #3
     b66:	438b      	bics	r3, r1
     b68:	1c19      	adds	r1, r3, #0
     b6a:	2302      	movs	r3, #2
     b6c:	430b      	orrs	r3, r1
     b6e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     b70:	4a1c      	ldr	r2, [pc, #112]	; (be4 <Reset_Handler+0xe4>)
     b72:	78d3      	ldrb	r3, [r2, #3]
     b74:	210c      	movs	r1, #12
     b76:	438b      	bics	r3, r1
     b78:	1c19      	adds	r1, r3, #0
     b7a:	2308      	movs	r3, #8
     b7c:	430b      	orrs	r3, r1
     b7e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     b80:	4a19      	ldr	r2, [pc, #100]	; (be8 <Reset_Handler+0xe8>)
     b82:	7b93      	ldrb	r3, [r2, #14]
     b84:	2130      	movs	r1, #48	; 0x30
     b86:	438b      	bics	r3, r1
     b88:	1c19      	adds	r1, r3, #0
     b8a:	2320      	movs	r3, #32
     b8c:	430b      	orrs	r3, r1
     b8e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     b90:	4a15      	ldr	r2, [pc, #84]	; (be8 <Reset_Handler+0xe8>)
     b92:	7b93      	ldrb	r3, [r2, #14]
     b94:	210c      	movs	r1, #12
     b96:	438b      	bics	r3, r1
     b98:	1c19      	adds	r1, r3, #0
     b9a:	2308      	movs	r3, #8
     b9c:	430b      	orrs	r3, r1
     b9e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     ba0:	4a11      	ldr	r2, [pc, #68]	; (be8 <Reset_Handler+0xe8>)
     ba2:	7b93      	ldrb	r3, [r2, #14]
     ba4:	2103      	movs	r1, #3
     ba6:	438b      	bics	r3, r1
     ba8:	1c19      	adds	r1, r3, #0
     baa:	2302      	movs	r3, #2
     bac:	430b      	orrs	r3, r1
     bae:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     bb0:	4a0e      	ldr	r2, [pc, #56]	; (bec <Reset_Handler+0xec>)
     bb2:	6853      	ldr	r3, [r2, #4]
     bb4:	2180      	movs	r1, #128	; 0x80
     bb6:	430b      	orrs	r3, r1
     bb8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     bba:	4b0d      	ldr	r3, [pc, #52]	; (bf0 <Reset_Handler+0xf0>)
     bbc:	4798      	blx	r3

        /* Branch to main function */
        main();
     bbe:	4b0d      	ldr	r3, [pc, #52]	; (bf4 <Reset_Handler+0xf4>)
     bc0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     bc2:	e7fe      	b.n	bc2 <Reset_Handler+0xc2>
     bc4:	0000632c 	.word	0x0000632c
     bc8:	20000000 	.word	0x20000000
     bcc:	200001e4 	.word	0x200001e4
     bd0:	200001e4 	.word	0x200001e4
     bd4:	200038d8 	.word	0x200038d8
     bd8:	00000000 	.word	0x00000000
     bdc:	e000ed00 	.word	0xe000ed00
     be0:	41007000 	.word	0x41007000
     be4:	41005000 	.word	0x41005000
     be8:	41004800 	.word	0x41004800
     bec:	41004000 	.word	0x41004000
     bf0:	0000537d 	.word	0x0000537d
     bf4:	0000508d 	.word	0x0000508d

00000bf8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     bf8:	b580      	push	{r7, lr}
     bfa:	af00      	add	r7, sp, #0
        while (1) {
     bfc:	e7fe      	b.n	bfc <Dummy_Handler+0x4>
	...

00000c00 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
     c00:	b580      	push	{r7, lr}
     c02:	b084      	sub	sp, #16
     c04:	af00      	add	r7, sp, #0
     c06:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
     c08:	4b0a      	ldr	r3, [pc, #40]	; (c34 <_sbrk+0x34>)
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	2b00      	cmp	r3, #0
     c0e:	d102      	bne.n	c16 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
     c10:	4b08      	ldr	r3, [pc, #32]	; (c34 <_sbrk+0x34>)
     c12:	4a09      	ldr	r2, [pc, #36]	; (c38 <_sbrk+0x38>)
     c14:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
     c16:	4b07      	ldr	r3, [pc, #28]	; (c34 <_sbrk+0x34>)
     c18:	681b      	ldr	r3, [r3, #0]
     c1a:	60fb      	str	r3, [r7, #12]

	heap += incr;
     c1c:	4b05      	ldr	r3, [pc, #20]	; (c34 <_sbrk+0x34>)
     c1e:	681a      	ldr	r2, [r3, #0]
     c20:	687b      	ldr	r3, [r7, #4]
     c22:	18d2      	adds	r2, r2, r3
     c24:	4b03      	ldr	r3, [pc, #12]	; (c34 <_sbrk+0x34>)
     c26:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
     c28:	68fb      	ldr	r3, [r7, #12]
}
     c2a:	0018      	movs	r0, r3
     c2c:	46bd      	mov	sp, r7
     c2e:	b004      	add	sp, #16
     c30:	bd80      	pop	{r7, pc}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	2000020c 	.word	0x2000020c
     c38:	200058d8 	.word	0x200058d8

00000c3c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
     c3c:	b580      	push	{r7, lr}
     c3e:	b084      	sub	sp, #16
     c40:	af00      	add	r7, sp, #0
     c42:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
     c44:	2300      	movs	r3, #0
     c46:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
     c48:	687b      	ldr	r3, [r7, #4]
     c4a:	2b00      	cmp	r3, #0
     c4c:	d101      	bne.n	c52 <FreeRTOS_CLIRegisterCommand+0x16>
     c4e:	b672      	cpsid	i
     c50:	e7fe      	b.n	c50 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
     c52:	2008      	movs	r0, #8
     c54:	4b11      	ldr	r3, [pc, #68]	; (c9c <FreeRTOS_CLIRegisterCommand+0x60>)
     c56:	4798      	blx	r3
     c58:	0003      	movs	r3, r0
     c5a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
     c5c:	68bb      	ldr	r3, [r7, #8]
     c5e:	2b00      	cmp	r3, #0
     c60:	d101      	bne.n	c66 <FreeRTOS_CLIRegisterCommand+0x2a>
     c62:	b672      	cpsid	i
     c64:	e7fe      	b.n	c64 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
     c66:	68bb      	ldr	r3, [r7, #8]
     c68:	2b00      	cmp	r3, #0
     c6a:	d012      	beq.n	c92 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
     c6c:	4b0c      	ldr	r3, [pc, #48]	; (ca0 <FreeRTOS_CLIRegisterCommand+0x64>)
     c6e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
     c70:	68bb      	ldr	r3, [r7, #8]
     c72:	687a      	ldr	r2, [r7, #4]
     c74:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
     c76:	68bb      	ldr	r3, [r7, #8]
     c78:	2200      	movs	r2, #0
     c7a:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
     c7c:	4b09      	ldr	r3, [pc, #36]	; (ca4 <FreeRTOS_CLIRegisterCommand+0x68>)
     c7e:	681b      	ldr	r3, [r3, #0]
     c80:	68ba      	ldr	r2, [r7, #8]
     c82:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
     c84:	4b07      	ldr	r3, [pc, #28]	; (ca4 <FreeRTOS_CLIRegisterCommand+0x68>)
     c86:	68ba      	ldr	r2, [r7, #8]
     c88:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
     c8a:	4b07      	ldr	r3, [pc, #28]	; (ca8 <FreeRTOS_CLIRegisterCommand+0x6c>)
     c8c:	4798      	blx	r3

		xReturn = pdPASS;
     c8e:	2301      	movs	r3, #1
     c90:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
     c92:	68fb      	ldr	r3, [r7, #12]
}
     c94:	0018      	movs	r0, r3
     c96:	46bd      	mov	sp, r7
     c98:	b004      	add	sp, #16
     c9a:	bd80      	pop	{r7, pc}
     c9c:	00001281 	.word	0x00001281
     ca0:	00001141 	.word	0x00001141
     ca4:	2000000c 	.word	0x2000000c
     ca8:	00001165 	.word	0x00001165

00000cac <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
     cac:	b580      	push	{r7, lr}
     cae:	b088      	sub	sp, #32
     cb0:	af00      	add	r7, sp, #0
     cb2:	60f8      	str	r0, [r7, #12]
     cb4:	60b9      	str	r1, [r7, #8]
     cb6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
     cb8:	2301      	movs	r3, #1
     cba:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
     cbc:	4b3d      	ldr	r3, [pc, #244]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     cbe:	681b      	ldr	r3, [r3, #0]
     cc0:	2b00      	cmp	r3, #0
     cc2:	d144      	bne.n	d4e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
     cc4:	4b3b      	ldr	r3, [pc, #236]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     cc6:	4a3c      	ldr	r2, [pc, #240]	; (db8 <FreeRTOS_CLIProcessCommand+0x10c>)
     cc8:	601a      	str	r2, [r3, #0]
     cca:	e03a      	b.n	d42 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
     ccc:	4b39      	ldr	r3, [pc, #228]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     cce:	681b      	ldr	r3, [r3, #0]
     cd0:	681b      	ldr	r3, [r3, #0]
     cd2:	681b      	ldr	r3, [r3, #0]
     cd4:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
     cd6:	69bb      	ldr	r3, [r7, #24]
     cd8:	0018      	movs	r0, r3
     cda:	4b38      	ldr	r3, [pc, #224]	; (dbc <FreeRTOS_CLIProcessCommand+0x110>)
     cdc:	4798      	blx	r3
     cde:	0003      	movs	r3, r0
     ce0:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
     ce2:	68fa      	ldr	r2, [r7, #12]
     ce4:	697b      	ldr	r3, [r7, #20]
     ce6:	18d3      	adds	r3, r2, r3
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	2b20      	cmp	r3, #32
     cec:	d005      	beq.n	cfa <FreeRTOS_CLIProcessCommand+0x4e>
     cee:	68fa      	ldr	r2, [r7, #12]
     cf0:	697b      	ldr	r3, [r7, #20]
     cf2:	18d3      	adds	r3, r2, r3
     cf4:	781b      	ldrb	r3, [r3, #0]
     cf6:	2b00      	cmp	r3, #0
     cf8:	d11e      	bne.n	d38 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
     cfa:	697a      	ldr	r2, [r7, #20]
     cfc:	69b9      	ldr	r1, [r7, #24]
     cfe:	68fb      	ldr	r3, [r7, #12]
     d00:	0018      	movs	r0, r3
     d02:	4b2f      	ldr	r3, [pc, #188]	; (dc0 <FreeRTOS_CLIProcessCommand+0x114>)
     d04:	4798      	blx	r3
     d06:	1e03      	subs	r3, r0, #0
     d08:	d116      	bne.n	d38 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
     d0a:	4b2a      	ldr	r3, [pc, #168]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d0c:	681b      	ldr	r3, [r3, #0]
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	7b1b      	ldrb	r3, [r3, #12]
     d12:	b25b      	sxtb	r3, r3
     d14:	2b00      	cmp	r3, #0
     d16:	db19      	blt.n	d4c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
     d18:	68fb      	ldr	r3, [r7, #12]
     d1a:	0018      	movs	r0, r3
     d1c:	4b29      	ldr	r3, [pc, #164]	; (dc4 <FreeRTOS_CLIProcessCommand+0x118>)
     d1e:	4798      	blx	r3
     d20:	0003      	movs	r3, r0
     d22:	001a      	movs	r2, r3
     d24:	4b23      	ldr	r3, [pc, #140]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	681b      	ldr	r3, [r3, #0]
     d2a:	7b1b      	ldrb	r3, [r3, #12]
     d2c:	b25b      	sxtb	r3, r3
     d2e:	429a      	cmp	r2, r3
     d30:	d00c      	beq.n	d4c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
     d32:	2300      	movs	r3, #0
     d34:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
     d36:	e009      	b.n	d4c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
     d38:	4b1e      	ldr	r3, [pc, #120]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d3a:	681b      	ldr	r3, [r3, #0]
     d3c:	685a      	ldr	r2, [r3, #4]
     d3e:	4b1d      	ldr	r3, [pc, #116]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d40:	601a      	str	r2, [r3, #0]
     d42:	4b1c      	ldr	r3, [pc, #112]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d44:	681b      	ldr	r3, [r3, #0]
     d46:	2b00      	cmp	r3, #0
     d48:	d1c0      	bne.n	ccc <FreeRTOS_CLIProcessCommand+0x20>
     d4a:	e000      	b.n	d4e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
     d4c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
     d4e:	4b19      	ldr	r3, [pc, #100]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d50:	681b      	ldr	r3, [r3, #0]
     d52:	2b00      	cmp	r3, #0
     d54:	d00c      	beq.n	d70 <FreeRTOS_CLIProcessCommand+0xc4>
     d56:	69fb      	ldr	r3, [r7, #28]
     d58:	2b00      	cmp	r3, #0
     d5a:	d109      	bne.n	d70 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
     d5c:	687a      	ldr	r2, [r7, #4]
     d5e:	491a      	ldr	r1, [pc, #104]	; (dc8 <FreeRTOS_CLIProcessCommand+0x11c>)
     d60:	68bb      	ldr	r3, [r7, #8]
     d62:	0018      	movs	r0, r3
     d64:	4b19      	ldr	r3, [pc, #100]	; (dcc <FreeRTOS_CLIProcessCommand+0x120>)
     d66:	4798      	blx	r3
		pxCommand = NULL;
     d68:	4b12      	ldr	r3, [pc, #72]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d6a:	2200      	movs	r2, #0
     d6c:	601a      	str	r2, [r3, #0]
     d6e:	e01c      	b.n	daa <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
     d70:	4b10      	ldr	r3, [pc, #64]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d72:	681b      	ldr	r3, [r3, #0]
     d74:	2b00      	cmp	r3, #0
     d76:	d010      	beq.n	d9a <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
     d78:	4b0e      	ldr	r3, [pc, #56]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d7a:	681b      	ldr	r3, [r3, #0]
     d7c:	681b      	ldr	r3, [r3, #0]
     d7e:	689b      	ldr	r3, [r3, #8]
     d80:	68fa      	ldr	r2, [r7, #12]
     d82:	6879      	ldr	r1, [r7, #4]
     d84:	68b8      	ldr	r0, [r7, #8]
     d86:	4798      	blx	r3
     d88:	0003      	movs	r3, r0
     d8a:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
     d8c:	69fb      	ldr	r3, [r7, #28]
     d8e:	2b00      	cmp	r3, #0
     d90:	d10b      	bne.n	daa <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
     d92:	4b08      	ldr	r3, [pc, #32]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d94:	2200      	movs	r2, #0
     d96:	601a      	str	r2, [r3, #0]
     d98:	e007      	b.n	daa <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
     d9a:	687a      	ldr	r2, [r7, #4]
     d9c:	490c      	ldr	r1, [pc, #48]	; (dd0 <FreeRTOS_CLIProcessCommand+0x124>)
     d9e:	68bb      	ldr	r3, [r7, #8]
     da0:	0018      	movs	r0, r3
     da2:	4b0a      	ldr	r3, [pc, #40]	; (dcc <FreeRTOS_CLIProcessCommand+0x120>)
     da4:	4798      	blx	r3
		xReturn = pdFALSE;
     da6:	2300      	movs	r3, #0
     da8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
     daa:	69fb      	ldr	r3, [r7, #28]
}
     dac:	0018      	movs	r0, r3
     dae:	46bd      	mov	sp, r7
     db0:	b008      	add	sp, #32
     db2:	bd80      	pop	{r7, pc}
     db4:	20000210 	.word	0x20000210
     db8:	20000004 	.word	0x20000004
     dbc:	00005655 	.word	0x00005655
     dc0:	00005663 	.word	0x00005663
     dc4:	00000e35 	.word	0x00000e35
     dc8:	00005e18 	.word	0x00005e18
     dcc:	00005685 	.word	0x00005685
     dd0:	00005e70 	.word	0x00005e70

00000dd4 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
     dd4:	b580      	push	{r7, lr}
     dd6:	b086      	sub	sp, #24
     dd8:	af00      	add	r7, sp, #0
     dda:	60f8      	str	r0, [r7, #12]
     ddc:	60b9      	str	r1, [r7, #8]
     dde:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
     de0:	4b11      	ldr	r3, [pc, #68]	; (e28 <prvHelpCommand+0x54>)
     de2:	681b      	ldr	r3, [r3, #0]
     de4:	2b00      	cmp	r3, #0
     de6:	d102      	bne.n	dee <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
     de8:	4b0f      	ldr	r3, [pc, #60]	; (e28 <prvHelpCommand+0x54>)
     dea:	4a10      	ldr	r2, [pc, #64]	; (e2c <prvHelpCommand+0x58>)
     dec:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
     dee:	4b0e      	ldr	r3, [pc, #56]	; (e28 <prvHelpCommand+0x54>)
     df0:	681b      	ldr	r3, [r3, #0]
     df2:	681b      	ldr	r3, [r3, #0]
     df4:	6859      	ldr	r1, [r3, #4]
     df6:	68ba      	ldr	r2, [r7, #8]
     df8:	68fb      	ldr	r3, [r7, #12]
     dfa:	0018      	movs	r0, r3
     dfc:	4b0c      	ldr	r3, [pc, #48]	; (e30 <prvHelpCommand+0x5c>)
     dfe:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
     e00:	4b09      	ldr	r3, [pc, #36]	; (e28 <prvHelpCommand+0x54>)
     e02:	681b      	ldr	r3, [r3, #0]
     e04:	685a      	ldr	r2, [r3, #4]
     e06:	4b08      	ldr	r3, [pc, #32]	; (e28 <prvHelpCommand+0x54>)
     e08:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
     e0a:	4b07      	ldr	r3, [pc, #28]	; (e28 <prvHelpCommand+0x54>)
     e0c:	681b      	ldr	r3, [r3, #0]
     e0e:	2b00      	cmp	r3, #0
     e10:	d102      	bne.n	e18 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
     e12:	2300      	movs	r3, #0
     e14:	617b      	str	r3, [r7, #20]
     e16:	e001      	b.n	e1c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
     e18:	2301      	movs	r3, #1
     e1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
     e1c:	697b      	ldr	r3, [r7, #20]
}
     e1e:	0018      	movs	r0, r3
     e20:	46bd      	mov	sp, r7
     e22:	b006      	add	sp, #24
     e24:	bd80      	pop	{r7, pc}
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	20000214 	.word	0x20000214
     e2c:	20000004 	.word	0x20000004
     e30:	00005685 	.word	0x00005685

00000e34 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
     e34:	b580      	push	{r7, lr}
     e36:	b084      	sub	sp, #16
     e38:	af00      	add	r7, sp, #0
     e3a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
     e3c:	230f      	movs	r3, #15
     e3e:	18fb      	adds	r3, r7, r3
     e40:	2200      	movs	r2, #0
     e42:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
     e44:	2300      	movs	r3, #0
     e46:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
     e48:	e018      	b.n	e7c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	781b      	ldrb	r3, [r3, #0]
     e4e:	2b20      	cmp	r3, #32
     e50:	d10f      	bne.n	e72 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
     e52:	68bb      	ldr	r3, [r7, #8]
     e54:	2b01      	cmp	r3, #1
     e56:	d00e      	beq.n	e76 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
     e58:	230f      	movs	r3, #15
     e5a:	18fb      	adds	r3, r7, r3
     e5c:	781b      	ldrb	r3, [r3, #0]
     e5e:	b25b      	sxtb	r3, r3
     e60:	b2db      	uxtb	r3, r3
     e62:	3301      	adds	r3, #1
     e64:	b2da      	uxtb	r2, r3
     e66:	230f      	movs	r3, #15
     e68:	18fb      	adds	r3, r7, r3
     e6a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
     e6c:	2301      	movs	r3, #1
     e6e:	60bb      	str	r3, [r7, #8]
     e70:	e001      	b.n	e76 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
     e72:	2300      	movs	r3, #0
     e74:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	3301      	adds	r3, #1
     e7a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	781b      	ldrb	r3, [r3, #0]
     e80:	2b00      	cmp	r3, #0
     e82:	d1e2      	bne.n	e4a <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
     e84:	68bb      	ldr	r3, [r7, #8]
     e86:	2b01      	cmp	r3, #1
     e88:	d109      	bne.n	e9e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
     e8a:	230f      	movs	r3, #15
     e8c:	18fb      	adds	r3, r7, r3
     e8e:	781b      	ldrb	r3, [r3, #0]
     e90:	b25b      	sxtb	r3, r3
     e92:	b2db      	uxtb	r3, r3
     e94:	3b01      	subs	r3, #1
     e96:	b2da      	uxtb	r2, r3
     e98:	230f      	movs	r3, #15
     e9a:	18fb      	adds	r3, r7, r3
     e9c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
     e9e:	230f      	movs	r3, #15
     ea0:	18fb      	adds	r3, r7, r3
     ea2:	781b      	ldrb	r3, [r3, #0]
     ea4:	b25b      	sxtb	r3, r3
}
     ea6:	0018      	movs	r0, r3
     ea8:	46bd      	mov	sp, r7
     eaa:	b004      	add	sp, #16
     eac:	bd80      	pop	{r7, pc}

00000eae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     eae:	b580      	push	{r7, lr}
     eb0:	b082      	sub	sp, #8
     eb2:	af00      	add	r7, sp, #0
     eb4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	3308      	adds	r3, #8
     eba:	001a      	movs	r2, r3
     ebc:	687b      	ldr	r3, [r7, #4]
     ebe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     ec0:	687b      	ldr	r3, [r7, #4]
     ec2:	2201      	movs	r2, #1
     ec4:	4252      	negs	r2, r2
     ec6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ec8:	687b      	ldr	r3, [r7, #4]
     eca:	3308      	adds	r3, #8
     ecc:	001a      	movs	r2, r3
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ed2:	687b      	ldr	r3, [r7, #4]
     ed4:	3308      	adds	r3, #8
     ed6:	001a      	movs	r2, r3
     ed8:	687b      	ldr	r3, [r7, #4]
     eda:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     edc:	687b      	ldr	r3, [r7, #4]
     ede:	2200      	movs	r2, #0
     ee0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	46bd      	mov	sp, r7
     ee6:	b002      	add	sp, #8
     ee8:	bd80      	pop	{r7, pc}

00000eea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     eea:	b580      	push	{r7, lr}
     eec:	b082      	sub	sp, #8
     eee:	af00      	add	r7, sp, #0
     ef0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     ef2:	687b      	ldr	r3, [r7, #4]
     ef4:	2200      	movs	r2, #0
     ef6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     ef8:	46c0      	nop			; (mov r8, r8)
     efa:	46bd      	mov	sp, r7
     efc:	b002      	add	sp, #8
     efe:	bd80      	pop	{r7, pc}

00000f00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     f00:	b580      	push	{r7, lr}
     f02:	b084      	sub	sp, #16
     f04:	af00      	add	r7, sp, #0
     f06:	6078      	str	r0, [r7, #4]
     f08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
     f0a:	687b      	ldr	r3, [r7, #4]
     f0c:	685b      	ldr	r3, [r3, #4]
     f0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     f10:	683b      	ldr	r3, [r7, #0]
     f12:	68fa      	ldr	r2, [r7, #12]
     f14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     f16:	68fb      	ldr	r3, [r7, #12]
     f18:	689a      	ldr	r2, [r3, #8]
     f1a:	683b      	ldr	r3, [r7, #0]
     f1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     f1e:	68fb      	ldr	r3, [r7, #12]
     f20:	689b      	ldr	r3, [r3, #8]
     f22:	683a      	ldr	r2, [r7, #0]
     f24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
     f26:	68fb      	ldr	r3, [r7, #12]
     f28:	683a      	ldr	r2, [r7, #0]
     f2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     f2c:	683b      	ldr	r3, [r7, #0]
     f2e:	687a      	ldr	r2, [r7, #4]
     f30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     f32:	687b      	ldr	r3, [r7, #4]
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	1c5a      	adds	r2, r3, #1
     f38:	687b      	ldr	r3, [r7, #4]
     f3a:	601a      	str	r2, [r3, #0]
}
     f3c:	46c0      	nop			; (mov r8, r8)
     f3e:	46bd      	mov	sp, r7
     f40:	b004      	add	sp, #16
     f42:	bd80      	pop	{r7, pc}

00000f44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     f44:	b580      	push	{r7, lr}
     f46:	b084      	sub	sp, #16
     f48:	af00      	add	r7, sp, #0
     f4a:	6078      	str	r0, [r7, #4]
     f4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     f4e:	683b      	ldr	r3, [r7, #0]
     f50:	681b      	ldr	r3, [r3, #0]
     f52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     f54:	68bb      	ldr	r3, [r7, #8]
     f56:	3301      	adds	r3, #1
     f58:	d103      	bne.n	f62 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     f5a:	687b      	ldr	r3, [r7, #4]
     f5c:	691b      	ldr	r3, [r3, #16]
     f5e:	60fb      	str	r3, [r7, #12]
     f60:	e00c      	b.n	f7c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f62:	687b      	ldr	r3, [r7, #4]
     f64:	3308      	adds	r3, #8
     f66:	60fb      	str	r3, [r7, #12]
     f68:	e002      	b.n	f70 <vListInsert+0x2c>
     f6a:	68fb      	ldr	r3, [r7, #12]
     f6c:	685b      	ldr	r3, [r3, #4]
     f6e:	60fb      	str	r3, [r7, #12]
     f70:	68fb      	ldr	r3, [r7, #12]
     f72:	685b      	ldr	r3, [r3, #4]
     f74:	681a      	ldr	r2, [r3, #0]
     f76:	68bb      	ldr	r3, [r7, #8]
     f78:	429a      	cmp	r2, r3
     f7a:	d9f6      	bls.n	f6a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     f7c:	68fb      	ldr	r3, [r7, #12]
     f7e:	685a      	ldr	r2, [r3, #4]
     f80:	683b      	ldr	r3, [r7, #0]
     f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     f84:	683b      	ldr	r3, [r7, #0]
     f86:	685b      	ldr	r3, [r3, #4]
     f88:	683a      	ldr	r2, [r7, #0]
     f8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     f8c:	683b      	ldr	r3, [r7, #0]
     f8e:	68fa      	ldr	r2, [r7, #12]
     f90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	683a      	ldr	r2, [r7, #0]
     f96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     f98:	683b      	ldr	r3, [r7, #0]
     f9a:	687a      	ldr	r2, [r7, #4]
     f9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	681b      	ldr	r3, [r3, #0]
     fa2:	1c5a      	adds	r2, r3, #1
     fa4:	687b      	ldr	r3, [r7, #4]
     fa6:	601a      	str	r2, [r3, #0]
}
     fa8:	46c0      	nop			; (mov r8, r8)
     faa:	46bd      	mov	sp, r7
     fac:	b004      	add	sp, #16
     fae:	bd80      	pop	{r7, pc}

00000fb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     fb0:	b580      	push	{r7, lr}
     fb2:	b084      	sub	sp, #16
     fb4:	af00      	add	r7, sp, #0
     fb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     fb8:	687b      	ldr	r3, [r7, #4]
     fba:	691b      	ldr	r3, [r3, #16]
     fbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	685b      	ldr	r3, [r3, #4]
     fc2:	687a      	ldr	r2, [r7, #4]
     fc4:	6892      	ldr	r2, [r2, #8]
     fc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     fc8:	687b      	ldr	r3, [r7, #4]
     fca:	689b      	ldr	r3, [r3, #8]
     fcc:	687a      	ldr	r2, [r7, #4]
     fce:	6852      	ldr	r2, [r2, #4]
     fd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     fd2:	68fb      	ldr	r3, [r7, #12]
     fd4:	685a      	ldr	r2, [r3, #4]
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	429a      	cmp	r2, r3
     fda:	d103      	bne.n	fe4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     fdc:	687b      	ldr	r3, [r7, #4]
     fde:	689a      	ldr	r2, [r3, #8]
     fe0:	68fb      	ldr	r3, [r7, #12]
     fe2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     fe4:	687b      	ldr	r3, [r7, #4]
     fe6:	2200      	movs	r2, #0
     fe8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     fea:	68fb      	ldr	r3, [r7, #12]
     fec:	681b      	ldr	r3, [r3, #0]
     fee:	1e5a      	subs	r2, r3, #1
     ff0:	68fb      	ldr	r3, [r7, #12]
     ff2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     ff4:	68fb      	ldr	r3, [r7, #12]
     ff6:	681b      	ldr	r3, [r3, #0]
}
     ff8:	0018      	movs	r0, r3
     ffa:	46bd      	mov	sp, r7
     ffc:	b004      	add	sp, #16
     ffe:	bd80      	pop	{r7, pc}

00001000 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1000:	b580      	push	{r7, lr}
    1002:	b084      	sub	sp, #16
    1004:	af00      	add	r7, sp, #0
    1006:	60f8      	str	r0, [r7, #12]
    1008:	60b9      	str	r1, [r7, #8]
    100a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    100c:	68fb      	ldr	r3, [r7, #12]
    100e:	3b04      	subs	r3, #4
    1010:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1012:	68fb      	ldr	r3, [r7, #12]
    1014:	2280      	movs	r2, #128	; 0x80
    1016:	0452      	lsls	r2, r2, #17
    1018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    101a:	68fb      	ldr	r3, [r7, #12]
    101c:	3b04      	subs	r3, #4
    101e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    1020:	68ba      	ldr	r2, [r7, #8]
    1022:	68fb      	ldr	r3, [r7, #12]
    1024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    1026:	68fb      	ldr	r3, [r7, #12]
    1028:	3b04      	subs	r3, #4
    102a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    102c:	4a08      	ldr	r2, [pc, #32]	; (1050 <pxPortInitialiseStack+0x50>)
    102e:	68fb      	ldr	r3, [r7, #12]
    1030:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    1032:	68fb      	ldr	r3, [r7, #12]
    1034:	3b14      	subs	r3, #20
    1036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1038:	687a      	ldr	r2, [r7, #4]
    103a:	68fb      	ldr	r3, [r7, #12]
    103c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    103e:	68fb      	ldr	r3, [r7, #12]
    1040:	3b20      	subs	r3, #32
    1042:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    1044:	68fb      	ldr	r3, [r7, #12]
}
    1046:	0018      	movs	r0, r3
    1048:	46bd      	mov	sp, r7
    104a:	b004      	add	sp, #16
    104c:	bd80      	pop	{r7, pc}
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	00001055 	.word	0x00001055

00001054 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    1054:	b580      	push	{r7, lr}
    1056:	b082      	sub	sp, #8
    1058:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    105a:	2300      	movs	r3, #0
    105c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    105e:	4b07      	ldr	r3, [pc, #28]	; (107c <prvTaskExitError+0x28>)
    1060:	681b      	ldr	r3, [r3, #0]
    1062:	3301      	adds	r3, #1
    1064:	d001      	beq.n	106a <prvTaskExitError+0x16>
    1066:	b672      	cpsid	i
    1068:	e7fe      	b.n	1068 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    106a:	b672      	cpsid	i
	while( ulDummy == 0 )
    106c:	46c0      	nop			; (mov r8, r8)
    106e:	687b      	ldr	r3, [r7, #4]
    1070:	2b00      	cmp	r3, #0
    1072:	d0fc      	beq.n	106e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    1074:	46c0      	nop			; (mov r8, r8)
    1076:	46bd      	mov	sp, r7
    1078:	b002      	add	sp, #8
    107a:	bd80      	pop	{r7, pc}
    107c:	20000010 	.word	0x20000010

00001080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    1080:	b580      	push	{r7, lr}
    1082:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    1084:	46c0      	nop			; (mov r8, r8)
    1086:	46bd      	mov	sp, r7
    1088:	bd80      	pop	{r7, pc}
    108a:	0000      	movs	r0, r0
    108c:	0000      	movs	r0, r0
	...

00001090 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1090:	4a0b      	ldr	r2, [pc, #44]	; (10c0 <pxCurrentTCBConst2>)
    1092:	6813      	ldr	r3, [r2, #0]
    1094:	6818      	ldr	r0, [r3, #0]
    1096:	3020      	adds	r0, #32
    1098:	f380 8809 	msr	PSP, r0
    109c:	2002      	movs	r0, #2
    109e:	f380 8814 	msr	CONTROL, r0
    10a2:	f3bf 8f6f 	isb	sy
    10a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    10a8:	46ae      	mov	lr, r5
    10aa:	bc08      	pop	{r3}
    10ac:	bc04      	pop	{r2}
    10ae:	b662      	cpsie	i
    10b0:	4718      	bx	r3
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	46c0      	nop			; (mov r8, r8)
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	46c0      	nop			; (mov r8, r8)
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	46c0      	nop			; (mov r8, r8)
    10be:	46c0      	nop			; (mov r8, r8)

000010c0 <pxCurrentTCBConst2>:
    10c0:	20003100 	.word	0x20003100
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    10c4:	46c0      	nop			; (mov r8, r8)
    10c6:	46c0      	nop			; (mov r8, r8)

000010c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    10c8:	b580      	push	{r7, lr}
    10ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <xPortStartScheduler+0x40>)
    10ce:	4a0e      	ldr	r2, [pc, #56]	; (1108 <xPortStartScheduler+0x40>)
    10d0:	6812      	ldr	r2, [r2, #0]
    10d2:	21ff      	movs	r1, #255	; 0xff
    10d4:	0409      	lsls	r1, r1, #16
    10d6:	430a      	orrs	r2, r1
    10d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    10da:	4b0b      	ldr	r3, [pc, #44]	; (1108 <xPortStartScheduler+0x40>)
    10dc:	4a0a      	ldr	r2, [pc, #40]	; (1108 <xPortStartScheduler+0x40>)
    10de:	6812      	ldr	r2, [r2, #0]
    10e0:	21ff      	movs	r1, #255	; 0xff
    10e2:	0609      	lsls	r1, r1, #24
    10e4:	430a      	orrs	r2, r1
    10e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    10e8:	4b08      	ldr	r3, [pc, #32]	; (110c <xPortStartScheduler+0x44>)
    10ea:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    10ec:	4b08      	ldr	r3, [pc, #32]	; (1110 <xPortStartScheduler+0x48>)
    10ee:	2200      	movs	r2, #0
    10f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    10f2:	4b08      	ldr	r3, [pc, #32]	; (1114 <xPortStartScheduler+0x4c>)
    10f4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    10f6:	4b08      	ldr	r3, [pc, #32]	; (1118 <xPortStartScheduler+0x50>)
    10f8:	4798      	blx	r3
	prvTaskExitError();
    10fa:	4b08      	ldr	r3, [pc, #32]	; (111c <xPortStartScheduler+0x54>)
    10fc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    10fe:	2300      	movs	r3, #0
}
    1100:	0018      	movs	r0, r3
    1102:	46bd      	mov	sp, r7
    1104:	bd80      	pop	{r7, pc}
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	e000ed20 	.word	0xe000ed20
    110c:	00001239 	.word	0x00001239
    1110:	20000010 	.word	0x20000010
    1114:	00001091 	.word	0x00001091
    1118:	0000238d 	.word	0x0000238d
    111c:	00001055 	.word	0x00001055

00001120 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    1120:	b580      	push	{r7, lr}
    1122:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1124:	4b05      	ldr	r3, [pc, #20]	; (113c <vPortYield+0x1c>)
    1126:	2280      	movs	r2, #128	; 0x80
    1128:	0552      	lsls	r2, r2, #21
    112a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
    112c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1130:	f3bf 8f6f 	isb	sy
}
    1134:	46c0      	nop			; (mov r8, r8)
    1136:	46bd      	mov	sp, r7
    1138:	bd80      	pop	{r7, pc}
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	e000ed04 	.word	0xe000ed04

00001140 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    1140:	b580      	push	{r7, lr}
    1142:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    1144:	b672      	cpsid	i
    uxCriticalNesting++;
    1146:	4b06      	ldr	r3, [pc, #24]	; (1160 <vPortEnterCritical+0x20>)
    1148:	681b      	ldr	r3, [r3, #0]
    114a:	1c5a      	adds	r2, r3, #1
    114c:	4b04      	ldr	r3, [pc, #16]	; (1160 <vPortEnterCritical+0x20>)
    114e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    1150:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1154:	f3bf 8f6f 	isb	sy
}
    1158:	46c0      	nop			; (mov r8, r8)
    115a:	46bd      	mov	sp, r7
    115c:	bd80      	pop	{r7, pc}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	20000010 	.word	0x20000010

00001164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    1164:	b580      	push	{r7, lr}
    1166:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    1168:	4b09      	ldr	r3, [pc, #36]	; (1190 <vPortExitCritical+0x2c>)
    116a:	681b      	ldr	r3, [r3, #0]
    116c:	2b00      	cmp	r3, #0
    116e:	d101      	bne.n	1174 <vPortExitCritical+0x10>
    1170:	b672      	cpsid	i
    1172:	e7fe      	b.n	1172 <vPortExitCritical+0xe>
    uxCriticalNesting--;
    1174:	4b06      	ldr	r3, [pc, #24]	; (1190 <vPortExitCritical+0x2c>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	1e5a      	subs	r2, r3, #1
    117a:	4b05      	ldr	r3, [pc, #20]	; (1190 <vPortExitCritical+0x2c>)
    117c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    117e:	4b04      	ldr	r3, [pc, #16]	; (1190 <vPortExitCritical+0x2c>)
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	2b00      	cmp	r3, #0
    1184:	d100      	bne.n	1188 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    1186:	b662      	cpsie	i
    }
}
    1188:	46c0      	nop			; (mov r8, r8)
    118a:	46bd      	mov	sp, r7
    118c:	bd80      	pop	{r7, pc}
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	20000010 	.word	0x20000010

00001194 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    1194:	f3ef 8010 	mrs	r0, PRIMASK
    1198:	b672      	cpsid	i
    119a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    119c:	46c0      	nop			; (mov r8, r8)
    119e:	0018      	movs	r0, r3

000011a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    11a0:	f380 8810 	msr	PRIMASK, r0
    11a4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    11a6:	46c0      	nop			; (mov r8, r8)
	...

000011b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    11b0:	f3ef 8009 	mrs	r0, PSP
    11b4:	4b0e      	ldr	r3, [pc, #56]	; (11f0 <pxCurrentTCBConst>)
    11b6:	681a      	ldr	r2, [r3, #0]
    11b8:	3820      	subs	r0, #32
    11ba:	6010      	str	r0, [r2, #0]
    11bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    11be:	4644      	mov	r4, r8
    11c0:	464d      	mov	r5, r9
    11c2:	4656      	mov	r6, sl
    11c4:	465f      	mov	r7, fp
    11c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    11c8:	b508      	push	{r3, lr}
    11ca:	b672      	cpsid	i
    11cc:	f001 f8de 	bl	238c <vTaskSwitchContext>
    11d0:	b662      	cpsie	i
    11d2:	bc0c      	pop	{r2, r3}
    11d4:	6811      	ldr	r1, [r2, #0]
    11d6:	6808      	ldr	r0, [r1, #0]
    11d8:	3010      	adds	r0, #16
    11da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    11dc:	46a0      	mov	r8, r4
    11de:	46a9      	mov	r9, r5
    11e0:	46b2      	mov	sl, r6
    11e2:	46bb      	mov	fp, r7
    11e4:	f380 8809 	msr	PSP, r0
    11e8:	3820      	subs	r0, #32
    11ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    11ec:	4718      	bx	r3
    11ee:	46c0      	nop			; (mov r8, r8)

000011f0 <pxCurrentTCBConst>:
    11f0:	20003100 	.word	0x20003100
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    11f4:	46c0      	nop			; (mov r8, r8)
    11f6:	46c0      	nop			; (mov r8, r8)

000011f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    11f8:	b580      	push	{r7, lr}
    11fa:	b082      	sub	sp, #8
    11fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    11fe:	4b0a      	ldr	r3, [pc, #40]	; (1228 <SysTick_Handler+0x30>)
    1200:	4798      	blx	r3
    1202:	0003      	movs	r3, r0
    1204:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    1206:	4b09      	ldr	r3, [pc, #36]	; (122c <SysTick_Handler+0x34>)
    1208:	4798      	blx	r3
    120a:	1e03      	subs	r3, r0, #0
    120c:	d003      	beq.n	1216 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    120e:	4b08      	ldr	r3, [pc, #32]	; (1230 <SysTick_Handler+0x38>)
    1210:	2280      	movs	r2, #128	; 0x80
    1212:	0552      	lsls	r2, r2, #21
    1214:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	0018      	movs	r0, r3
    121a:	4b06      	ldr	r3, [pc, #24]	; (1234 <SysTick_Handler+0x3c>)
    121c:	4798      	blx	r3
}
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	46bd      	mov	sp, r7
    1222:	b002      	add	sp, #8
    1224:	bd80      	pop	{r7, pc}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	00001195 	.word	0x00001195
    122c:	00002219 	.word	0x00002219
    1230:	e000ed04 	.word	0xe000ed04
    1234:	000011a1 	.word	0x000011a1

00001238 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    1238:	b5b0      	push	{r4, r5, r7, lr}
    123a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    123c:	4b0b      	ldr	r3, [pc, #44]	; (126c <prvSetupTimerInterrupt+0x34>)
    123e:	2200      	movs	r2, #0
    1240:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    1242:	4b0b      	ldr	r3, [pc, #44]	; (1270 <prvSetupTimerInterrupt+0x38>)
    1244:	2200      	movs	r2, #0
    1246:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    1248:	4c0a      	ldr	r4, [pc, #40]	; (1274 <prvSetupTimerInterrupt+0x3c>)
    124a:	2000      	movs	r0, #0
    124c:	4b0a      	ldr	r3, [pc, #40]	; (1278 <prvSetupTimerInterrupt+0x40>)
    124e:	4798      	blx	r3
    1250:	4b0a      	ldr	r3, [pc, #40]	; (127c <prvSetupTimerInterrupt+0x44>)
    1252:	22fa      	movs	r2, #250	; 0xfa
    1254:	0091      	lsls	r1, r2, #2
    1256:	4798      	blx	r3
    1258:	0003      	movs	r3, r0
    125a:	3b01      	subs	r3, #1
    125c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    125e:	4b03      	ldr	r3, [pc, #12]	; (126c <prvSetupTimerInterrupt+0x34>)
    1260:	2207      	movs	r2, #7
    1262:	601a      	str	r2, [r3, #0]
}
    1264:	46c0      	nop			; (mov r8, r8)
    1266:	46bd      	mov	sp, r7
    1268:	bdb0      	pop	{r4, r5, r7, pc}
    126a:	46c0      	nop			; (mov r8, r8)
    126c:	e000e010 	.word	0xe000e010
    1270:	e000e018 	.word	0xe000e018
    1274:	e000e014 	.word	0xe000e014
    1278:	00004ddd 	.word	0x00004ddd
    127c:	00005211 	.word	0x00005211

00001280 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1280:	b580      	push	{r7, lr}
    1282:	b084      	sub	sp, #16
    1284:	af00      	add	r7, sp, #0
    1286:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    1288:	2300      	movs	r3, #0
    128a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	2207      	movs	r2, #7
    1290:	4013      	ands	r3, r2
    1292:	d004      	beq.n	129e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	2207      	movs	r2, #7
    1298:	4393      	bics	r3, r2
    129a:	3308      	adds	r3, #8
    129c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    129e:	4b19      	ldr	r3, [pc, #100]	; (1304 <pvPortMalloc+0x84>)
    12a0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    12a2:	4b19      	ldr	r3, [pc, #100]	; (1308 <pvPortMalloc+0x88>)
    12a4:	681b      	ldr	r3, [r3, #0]
    12a6:	2b00      	cmp	r3, #0
    12a8:	d105      	bne.n	12b6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    12aa:	4b18      	ldr	r3, [pc, #96]	; (130c <pvPortMalloc+0x8c>)
    12ac:	2207      	movs	r2, #7
    12ae:	4393      	bics	r3, r2
    12b0:	001a      	movs	r2, r3
    12b2:	4b15      	ldr	r3, [pc, #84]	; (1308 <pvPortMalloc+0x88>)
    12b4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    12b6:	4b16      	ldr	r3, [pc, #88]	; (1310 <pvPortMalloc+0x90>)
    12b8:	681a      	ldr	r2, [r3, #0]
    12ba:	687b      	ldr	r3, [r7, #4]
    12bc:	18d3      	adds	r3, r2, r3
    12be:	4a15      	ldr	r2, [pc, #84]	; (1314 <pvPortMalloc+0x94>)
    12c0:	4293      	cmp	r3, r2
    12c2:	d813      	bhi.n	12ec <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    12c4:	4b12      	ldr	r3, [pc, #72]	; (1310 <pvPortMalloc+0x90>)
    12c6:	681a      	ldr	r2, [r3, #0]
    12c8:	687b      	ldr	r3, [r7, #4]
    12ca:	18d2      	adds	r2, r2, r3
    12cc:	4b10      	ldr	r3, [pc, #64]	; (1310 <pvPortMalloc+0x90>)
    12ce:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    12d0:	429a      	cmp	r2, r3
    12d2:	d90b      	bls.n	12ec <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    12d4:	4b0c      	ldr	r3, [pc, #48]	; (1308 <pvPortMalloc+0x88>)
    12d6:	681a      	ldr	r2, [r3, #0]
    12d8:	4b0d      	ldr	r3, [pc, #52]	; (1310 <pvPortMalloc+0x90>)
    12da:	681b      	ldr	r3, [r3, #0]
    12dc:	18d3      	adds	r3, r2, r3
    12de:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    12e0:	4b0b      	ldr	r3, [pc, #44]	; (1310 <pvPortMalloc+0x90>)
    12e2:	681a      	ldr	r2, [r3, #0]
    12e4:	687b      	ldr	r3, [r7, #4]
    12e6:	18d2      	adds	r2, r2, r3
    12e8:	4b09      	ldr	r3, [pc, #36]	; (1310 <pvPortMalloc+0x90>)
    12ea:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    12ec:	4b0a      	ldr	r3, [pc, #40]	; (1318 <pvPortMalloc+0x98>)
    12ee:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    12f0:	68fb      	ldr	r3, [r7, #12]
    12f2:	2b00      	cmp	r3, #0
    12f4:	d101      	bne.n	12fa <pvPortMalloc+0x7a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    12f6:	4b09      	ldr	r3, [pc, #36]	; (131c <pvPortMalloc+0x9c>)
    12f8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    12fa:	68fb      	ldr	r3, [r7, #12]
}
    12fc:	0018      	movs	r0, r3
    12fe:	46bd      	mov	sp, r7
    1300:	b004      	add	sp, #16
    1302:	bd80      	pop	{r7, pc}
    1304:	000020b1 	.word	0x000020b1
    1308:	200030fc 	.word	0x200030fc
    130c:	20000220 	.word	0x20000220
    1310:	200030f8 	.word	0x200030f8
    1314:	00002ed7 	.word	0x00002ed7
    1318:	000020c9 	.word	0x000020c9
    131c:	000051e1 	.word	0x000051e1

00001320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1320:	b580      	push	{r7, lr}
    1322:	b082      	sub	sp, #8
    1324:	af00      	add	r7, sp, #0
    1326:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    1328:	687b      	ldr	r3, [r7, #4]
    132a:	2b00      	cmp	r3, #0
    132c:	d001      	beq.n	1332 <vPortFree+0x12>
    132e:	b672      	cpsid	i
    1330:	e7fe      	b.n	1330 <vPortFree+0x10>
}
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	46bd      	mov	sp, r7
    1336:	b002      	add	sp, #8
    1338:	bd80      	pop	{r7, pc}
	...

0000133c <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    133c:	b580      	push	{r7, lr}
    133e:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    1340:	4b03      	ldr	r3, [pc, #12]	; (1350 <xPortGetFreeHeapSize+0x14>)
    1342:	681b      	ldr	r3, [r3, #0]
    1344:	4a03      	ldr	r2, [pc, #12]	; (1354 <xPortGetFreeHeapSize+0x18>)
    1346:	1ad3      	subs	r3, r2, r3
}
    1348:	0018      	movs	r0, r3
    134a:	46bd      	mov	sp, r7
    134c:	bd80      	pop	{r7, pc}
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	200030f8 	.word	0x200030f8
    1354:	00002ed8 	.word	0x00002ed8

00001358 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1358:	b580      	push	{r7, lr}
    135a:	b084      	sub	sp, #16
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1362:	687b      	ldr	r3, [r7, #4]
    1364:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    1366:	68fb      	ldr	r3, [r7, #12]
    1368:	2b00      	cmp	r3, #0
    136a:	d101      	bne.n	1370 <xQueueGenericReset+0x18>
    136c:	b672      	cpsid	i
    136e:	e7fe      	b.n	136e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    1370:	4b23      	ldr	r3, [pc, #140]	; (1400 <xQueueGenericReset+0xa8>)
    1372:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1374:	68fb      	ldr	r3, [r7, #12]
    1376:	681a      	ldr	r2, [r3, #0]
    1378:	68fb      	ldr	r3, [r7, #12]
    137a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    137c:	68fb      	ldr	r3, [r7, #12]
    137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1380:	434b      	muls	r3, r1
    1382:	18d2      	adds	r2, r2, r3
    1384:	68fb      	ldr	r3, [r7, #12]
    1386:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1388:	68fb      	ldr	r3, [r7, #12]
    138a:	2200      	movs	r2, #0
    138c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    138e:	68fb      	ldr	r3, [r7, #12]
    1390:	681a      	ldr	r2, [r3, #0]
    1392:	68fb      	ldr	r3, [r7, #12]
    1394:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1396:	68fb      	ldr	r3, [r7, #12]
    1398:	681a      	ldr	r2, [r3, #0]
    139a:	68fb      	ldr	r3, [r7, #12]
    139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    139e:	1e59      	subs	r1, r3, #1
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    13a4:	434b      	muls	r3, r1
    13a6:	18d2      	adds	r2, r2, r3
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    13ac:	68fb      	ldr	r3, [r7, #12]
    13ae:	2244      	movs	r2, #68	; 0x44
    13b0:	21ff      	movs	r1, #255	; 0xff
    13b2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    13b4:	68fb      	ldr	r3, [r7, #12]
    13b6:	2245      	movs	r2, #69	; 0x45
    13b8:	21ff      	movs	r1, #255	; 0xff
    13ba:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    13bc:	683b      	ldr	r3, [r7, #0]
    13be:	2b00      	cmp	r3, #0
    13c0:	d10d      	bne.n	13de <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    13c2:	68fb      	ldr	r3, [r7, #12]
    13c4:	691b      	ldr	r3, [r3, #16]
    13c6:	2b00      	cmp	r3, #0
    13c8:	d013      	beq.n	13f2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    13ca:	68fb      	ldr	r3, [r7, #12]
    13cc:	3310      	adds	r3, #16
    13ce:	0018      	movs	r0, r3
    13d0:	4b0c      	ldr	r3, [pc, #48]	; (1404 <xQueueGenericReset+0xac>)
    13d2:	4798      	blx	r3
    13d4:	1e03      	subs	r3, r0, #0
    13d6:	d00c      	beq.n	13f2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    13d8:	4b0b      	ldr	r3, [pc, #44]	; (1408 <xQueueGenericReset+0xb0>)
    13da:	4798      	blx	r3
    13dc:	e009      	b.n	13f2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    13de:	68fb      	ldr	r3, [r7, #12]
    13e0:	3310      	adds	r3, #16
    13e2:	0018      	movs	r0, r3
    13e4:	4b09      	ldr	r3, [pc, #36]	; (140c <xQueueGenericReset+0xb4>)
    13e6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    13e8:	68fb      	ldr	r3, [r7, #12]
    13ea:	3324      	adds	r3, #36	; 0x24
    13ec:	0018      	movs	r0, r3
    13ee:	4b07      	ldr	r3, [pc, #28]	; (140c <xQueueGenericReset+0xb4>)
    13f0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    13f2:	4b07      	ldr	r3, [pc, #28]	; (1410 <xQueueGenericReset+0xb8>)
    13f4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    13f6:	2301      	movs	r3, #1
}
    13f8:	0018      	movs	r0, r3
    13fa:	46bd      	mov	sp, r7
    13fc:	b004      	add	sp, #16
    13fe:	bd80      	pop	{r7, pc}
    1400:	00001141 	.word	0x00001141
    1404:	000024ed 	.word	0x000024ed
    1408:	00001121 	.word	0x00001121
    140c:	00000eaf 	.word	0x00000eaf
    1410:	00001165 	.word	0x00001165

00001414 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    1414:	b590      	push	{r4, r7, lr}
    1416:	b08b      	sub	sp, #44	; 0x2c
    1418:	af02      	add	r7, sp, #8
    141a:	60f8      	str	r0, [r7, #12]
    141c:	60b9      	str	r1, [r7, #8]
    141e:	1dfb      	adds	r3, r7, #7
    1420:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    1422:	68fb      	ldr	r3, [r7, #12]
    1424:	2b00      	cmp	r3, #0
    1426:	d101      	bne.n	142c <xQueueGenericCreate+0x18>
    1428:	b672      	cpsid	i
    142a:	e7fe      	b.n	142a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    142c:	68bb      	ldr	r3, [r7, #8]
    142e:	2b00      	cmp	r3, #0
    1430:	d102      	bne.n	1438 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    1432:	2300      	movs	r3, #0
    1434:	61fb      	str	r3, [r7, #28]
    1436:	e003      	b.n	1440 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	68ba      	ldr	r2, [r7, #8]
    143c:	4353      	muls	r3, r2
    143e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1440:	69fb      	ldr	r3, [r7, #28]
    1442:	3354      	adds	r3, #84	; 0x54
    1444:	0018      	movs	r0, r3
    1446:	4b0c      	ldr	r3, [pc, #48]	; (1478 <xQueueGenericCreate+0x64>)
    1448:	4798      	blx	r3
    144a:	0003      	movs	r3, r0
    144c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    144e:	69bb      	ldr	r3, [r7, #24]
    1450:	2b00      	cmp	r3, #0
    1452:	d00c      	beq.n	146e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    1454:	69bb      	ldr	r3, [r7, #24]
    1456:	3354      	adds	r3, #84	; 0x54
    1458:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    145a:	1dfb      	adds	r3, r7, #7
    145c:	781c      	ldrb	r4, [r3, #0]
    145e:	697a      	ldr	r2, [r7, #20]
    1460:	68b9      	ldr	r1, [r7, #8]
    1462:	68f8      	ldr	r0, [r7, #12]
    1464:	69bb      	ldr	r3, [r7, #24]
    1466:	9300      	str	r3, [sp, #0]
    1468:	0023      	movs	r3, r4
    146a:	4c04      	ldr	r4, [pc, #16]	; (147c <xQueueGenericCreate+0x68>)
    146c:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    146e:	69bb      	ldr	r3, [r7, #24]
	}
    1470:	0018      	movs	r0, r3
    1472:	46bd      	mov	sp, r7
    1474:	b009      	add	sp, #36	; 0x24
    1476:	bd90      	pop	{r4, r7, pc}
    1478:	00001281 	.word	0x00001281
    147c:	00001481 	.word	0x00001481

00001480 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    1480:	b580      	push	{r7, lr}
    1482:	b084      	sub	sp, #16
    1484:	af00      	add	r7, sp, #0
    1486:	60f8      	str	r0, [r7, #12]
    1488:	60b9      	str	r1, [r7, #8]
    148a:	607a      	str	r2, [r7, #4]
    148c:	001a      	movs	r2, r3
    148e:	1cfb      	adds	r3, r7, #3
    1490:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    1492:	68bb      	ldr	r3, [r7, #8]
    1494:	2b00      	cmp	r3, #0
    1496:	d103      	bne.n	14a0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1498:	69bb      	ldr	r3, [r7, #24]
    149a:	69ba      	ldr	r2, [r7, #24]
    149c:	601a      	str	r2, [r3, #0]
    149e:	e002      	b.n	14a6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    14a0:	69bb      	ldr	r3, [r7, #24]
    14a2:	687a      	ldr	r2, [r7, #4]
    14a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    14a6:	69bb      	ldr	r3, [r7, #24]
    14a8:	68fa      	ldr	r2, [r7, #12]
    14aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    14ac:	69bb      	ldr	r3, [r7, #24]
    14ae:	68ba      	ldr	r2, [r7, #8]
    14b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    14b2:	69bb      	ldr	r3, [r7, #24]
    14b4:	2101      	movs	r1, #1
    14b6:	0018      	movs	r0, r3
    14b8:	4b06      	ldr	r3, [pc, #24]	; (14d4 <prvInitialiseNewQueue+0x54>)
    14ba:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    14bc:	69bb      	ldr	r3, [r7, #24]
    14be:	1cfa      	adds	r2, r7, #3
    14c0:	2150      	movs	r1, #80	; 0x50
    14c2:	7812      	ldrb	r2, [r2, #0]
    14c4:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    14c6:	69bb      	ldr	r3, [r7, #24]
    14c8:	2200      	movs	r2, #0
    14ca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    14cc:	46c0      	nop			; (mov r8, r8)
    14ce:	46bd      	mov	sp, r7
    14d0:	b004      	add	sp, #16
    14d2:	bd80      	pop	{r7, pc}
    14d4:	00001359 	.word	0x00001359

000014d8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    14d8:	b590      	push	{r4, r7, lr}
    14da:	b083      	sub	sp, #12
    14dc:	af00      	add	r7, sp, #0
    14de:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    14e0:	687b      	ldr	r3, [r7, #4]
    14e2:	2b00      	cmp	r3, #0
    14e4:	d00e      	beq.n	1504 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    14e6:	687b      	ldr	r3, [r7, #4]
    14e8:	2200      	movs	r2, #0
    14ea:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    14ec:	687b      	ldr	r3, [r7, #4]
    14ee:	2200      	movs	r2, #0
    14f0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    14f2:	687b      	ldr	r3, [r7, #4]
    14f4:	2200      	movs	r2, #0
    14f6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    14f8:	6878      	ldr	r0, [r7, #4]
    14fa:	2300      	movs	r3, #0
    14fc:	2200      	movs	r2, #0
    14fe:	2100      	movs	r1, #0
    1500:	4c02      	ldr	r4, [pc, #8]	; (150c <prvInitialiseMutex+0x34>)
    1502:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    1504:	46c0      	nop			; (mov r8, r8)
    1506:	46bd      	mov	sp, r7
    1508:	b003      	add	sp, #12
    150a:	bd90      	pop	{r4, r7, pc}
    150c:	00001551 	.word	0x00001551

00001510 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1510:	b580      	push	{r7, lr}
    1512:	b086      	sub	sp, #24
    1514:	af00      	add	r7, sp, #0
    1516:	0002      	movs	r2, r0
    1518:	1dfb      	adds	r3, r7, #7
    151a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    151c:	2301      	movs	r3, #1
    151e:	617b      	str	r3, [r7, #20]
    1520:	2300      	movs	r3, #0
    1522:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    1524:	1dfb      	adds	r3, r7, #7
    1526:	781a      	ldrb	r2, [r3, #0]
    1528:	6939      	ldr	r1, [r7, #16]
    152a:	697b      	ldr	r3, [r7, #20]
    152c:	0018      	movs	r0, r3
    152e:	4b06      	ldr	r3, [pc, #24]	; (1548 <xQueueCreateMutex+0x38>)
    1530:	4798      	blx	r3
    1532:	0003      	movs	r3, r0
    1534:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	0018      	movs	r0, r3
    153a:	4b04      	ldr	r3, [pc, #16]	; (154c <xQueueCreateMutex+0x3c>)
    153c:	4798      	blx	r3

		return pxNewQueue;
    153e:	68fb      	ldr	r3, [r7, #12]
	}
    1540:	0018      	movs	r0, r3
    1542:	46bd      	mov	sp, r7
    1544:	b006      	add	sp, #24
    1546:	bd80      	pop	{r7, pc}
    1548:	00001415 	.word	0x00001415
    154c:	000014d9 	.word	0x000014d9

00001550 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1550:	b580      	push	{r7, lr}
    1552:	b08a      	sub	sp, #40	; 0x28
    1554:	af00      	add	r7, sp, #0
    1556:	60f8      	str	r0, [r7, #12]
    1558:	60b9      	str	r1, [r7, #8]
    155a:	607a      	str	r2, [r7, #4]
    155c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    155e:	2300      	movs	r3, #0
    1560:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    1566:	6a3b      	ldr	r3, [r7, #32]
    1568:	2b00      	cmp	r3, #0
    156a:	d101      	bne.n	1570 <xQueueGenericSend+0x20>
    156c:	b672      	cpsid	i
    156e:	e7fe      	b.n	156e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1570:	68bb      	ldr	r3, [r7, #8]
    1572:	2b00      	cmp	r3, #0
    1574:	d103      	bne.n	157e <xQueueGenericSend+0x2e>
    1576:	6a3b      	ldr	r3, [r7, #32]
    1578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    157a:	2b00      	cmp	r3, #0
    157c:	d101      	bne.n	1582 <xQueueGenericSend+0x32>
    157e:	2301      	movs	r3, #1
    1580:	e000      	b.n	1584 <xQueueGenericSend+0x34>
    1582:	2300      	movs	r3, #0
    1584:	2b00      	cmp	r3, #0
    1586:	d101      	bne.n	158c <xQueueGenericSend+0x3c>
    1588:	b672      	cpsid	i
    158a:	e7fe      	b.n	158a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    158c:	683b      	ldr	r3, [r7, #0]
    158e:	2b02      	cmp	r3, #2
    1590:	d103      	bne.n	159a <xQueueGenericSend+0x4a>
    1592:	6a3b      	ldr	r3, [r7, #32]
    1594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1596:	2b01      	cmp	r3, #1
    1598:	d101      	bne.n	159e <xQueueGenericSend+0x4e>
    159a:	2301      	movs	r3, #1
    159c:	e000      	b.n	15a0 <xQueueGenericSend+0x50>
    159e:	2300      	movs	r3, #0
    15a0:	2b00      	cmp	r3, #0
    15a2:	d101      	bne.n	15a8 <xQueueGenericSend+0x58>
    15a4:	b672      	cpsid	i
    15a6:	e7fe      	b.n	15a6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    15a8:	4b53      	ldr	r3, [pc, #332]	; (16f8 <xQueueGenericSend+0x1a8>)
    15aa:	4798      	blx	r3
    15ac:	1e03      	subs	r3, r0, #0
    15ae:	d102      	bne.n	15b6 <xQueueGenericSend+0x66>
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d101      	bne.n	15ba <xQueueGenericSend+0x6a>
    15b6:	2301      	movs	r3, #1
    15b8:	e000      	b.n	15bc <xQueueGenericSend+0x6c>
    15ba:	2300      	movs	r3, #0
    15bc:	2b00      	cmp	r3, #0
    15be:	d101      	bne.n	15c4 <xQueueGenericSend+0x74>
    15c0:	b672      	cpsid	i
    15c2:	e7fe      	b.n	15c2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    15c4:	4b4d      	ldr	r3, [pc, #308]	; (16fc <xQueueGenericSend+0x1ac>)
    15c6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    15c8:	6a3b      	ldr	r3, [r7, #32]
    15ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    15cc:	6a3b      	ldr	r3, [r7, #32]
    15ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    15d0:	429a      	cmp	r2, r3
    15d2:	d302      	bcc.n	15da <xQueueGenericSend+0x8a>
    15d4:	683b      	ldr	r3, [r7, #0]
    15d6:	2b02      	cmp	r3, #2
    15d8:	d12d      	bne.n	1636 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    15da:	683a      	ldr	r2, [r7, #0]
    15dc:	68b9      	ldr	r1, [r7, #8]
    15de:	6a3b      	ldr	r3, [r7, #32]
    15e0:	0018      	movs	r0, r3
    15e2:	4b47      	ldr	r3, [pc, #284]	; (1700 <xQueueGenericSend+0x1b0>)
    15e4:	4798      	blx	r3
    15e6:	0003      	movs	r3, r0
    15e8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    15ea:	6a3b      	ldr	r3, [r7, #32]
    15ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    15ee:	2b00      	cmp	r3, #0
    15f0:	d00a      	beq.n	1608 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    15f2:	683a      	ldr	r2, [r7, #0]
    15f4:	6a3b      	ldr	r3, [r7, #32]
    15f6:	0011      	movs	r1, r2
    15f8:	0018      	movs	r0, r3
    15fa:	4b42      	ldr	r3, [pc, #264]	; (1704 <xQueueGenericSend+0x1b4>)
    15fc:	4798      	blx	r3
    15fe:	1e03      	subs	r3, r0, #0
    1600:	d015      	beq.n	162e <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    1602:	4b41      	ldr	r3, [pc, #260]	; (1708 <xQueueGenericSend+0x1b8>)
    1604:	4798      	blx	r3
    1606:	e012      	b.n	162e <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1608:	6a3b      	ldr	r3, [r7, #32]
    160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    160c:	2b00      	cmp	r3, #0
    160e:	d009      	beq.n	1624 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1610:	6a3b      	ldr	r3, [r7, #32]
    1612:	3324      	adds	r3, #36	; 0x24
    1614:	0018      	movs	r0, r3
    1616:	4b3d      	ldr	r3, [pc, #244]	; (170c <xQueueGenericSend+0x1bc>)
    1618:	4798      	blx	r3
    161a:	1e03      	subs	r3, r0, #0
    161c:	d007      	beq.n	162e <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    161e:	4b3a      	ldr	r3, [pc, #232]	; (1708 <xQueueGenericSend+0x1b8>)
    1620:	4798      	blx	r3
    1622:	e004      	b.n	162e <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    1624:	69fb      	ldr	r3, [r7, #28]
    1626:	2b00      	cmp	r3, #0
    1628:	d001      	beq.n	162e <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    162a:	4b37      	ldr	r3, [pc, #220]	; (1708 <xQueueGenericSend+0x1b8>)
    162c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    162e:	4b38      	ldr	r3, [pc, #224]	; (1710 <xQueueGenericSend+0x1c0>)
    1630:	4798      	blx	r3
				return pdPASS;
    1632:	2301      	movs	r3, #1
    1634:	e05c      	b.n	16f0 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	2b00      	cmp	r3, #0
    163a:	d103      	bne.n	1644 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    163c:	4b34      	ldr	r3, [pc, #208]	; (1710 <xQueueGenericSend+0x1c0>)
    163e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1640:	2300      	movs	r3, #0
    1642:	e055      	b.n	16f0 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    1644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1646:	2b00      	cmp	r3, #0
    1648:	d106      	bne.n	1658 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    164a:	2314      	movs	r3, #20
    164c:	18fb      	adds	r3, r7, r3
    164e:	0018      	movs	r0, r3
    1650:	4b30      	ldr	r3, [pc, #192]	; (1714 <xQueueGenericSend+0x1c4>)
    1652:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    1654:	2301      	movs	r3, #1
    1656:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1658:	4b2d      	ldr	r3, [pc, #180]	; (1710 <xQueueGenericSend+0x1c0>)
    165a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    165c:	4b2e      	ldr	r3, [pc, #184]	; (1718 <xQueueGenericSend+0x1c8>)
    165e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1660:	4b26      	ldr	r3, [pc, #152]	; (16fc <xQueueGenericSend+0x1ac>)
    1662:	4798      	blx	r3
    1664:	6a3b      	ldr	r3, [r7, #32]
    1666:	2244      	movs	r2, #68	; 0x44
    1668:	5c9b      	ldrb	r3, [r3, r2]
    166a:	b25b      	sxtb	r3, r3
    166c:	3301      	adds	r3, #1
    166e:	d103      	bne.n	1678 <xQueueGenericSend+0x128>
    1670:	6a3b      	ldr	r3, [r7, #32]
    1672:	2244      	movs	r2, #68	; 0x44
    1674:	2100      	movs	r1, #0
    1676:	5499      	strb	r1, [r3, r2]
    1678:	6a3b      	ldr	r3, [r7, #32]
    167a:	2245      	movs	r2, #69	; 0x45
    167c:	5c9b      	ldrb	r3, [r3, r2]
    167e:	b25b      	sxtb	r3, r3
    1680:	3301      	adds	r3, #1
    1682:	d103      	bne.n	168c <xQueueGenericSend+0x13c>
    1684:	6a3b      	ldr	r3, [r7, #32]
    1686:	2245      	movs	r2, #69	; 0x45
    1688:	2100      	movs	r1, #0
    168a:	5499      	strb	r1, [r3, r2]
    168c:	4b20      	ldr	r3, [pc, #128]	; (1710 <xQueueGenericSend+0x1c0>)
    168e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1690:	1d3a      	adds	r2, r7, #4
    1692:	2314      	movs	r3, #20
    1694:	18fb      	adds	r3, r7, r3
    1696:	0011      	movs	r1, r2
    1698:	0018      	movs	r0, r3
    169a:	4b20      	ldr	r3, [pc, #128]	; (171c <xQueueGenericSend+0x1cc>)
    169c:	4798      	blx	r3
    169e:	1e03      	subs	r3, r0, #0
    16a0:	d11f      	bne.n	16e2 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    16a2:	6a3b      	ldr	r3, [r7, #32]
    16a4:	0018      	movs	r0, r3
    16a6:	4b1e      	ldr	r3, [pc, #120]	; (1720 <xQueueGenericSend+0x1d0>)
    16a8:	4798      	blx	r3
    16aa:	1e03      	subs	r3, r0, #0
    16ac:	d012      	beq.n	16d4 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    16ae:	6a3b      	ldr	r3, [r7, #32]
    16b0:	3310      	adds	r3, #16
    16b2:	687a      	ldr	r2, [r7, #4]
    16b4:	0011      	movs	r1, r2
    16b6:	0018      	movs	r0, r3
    16b8:	4b1a      	ldr	r3, [pc, #104]	; (1724 <xQueueGenericSend+0x1d4>)
    16ba:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    16bc:	6a3b      	ldr	r3, [r7, #32]
    16be:	0018      	movs	r0, r3
    16c0:	4b19      	ldr	r3, [pc, #100]	; (1728 <xQueueGenericSend+0x1d8>)
    16c2:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    16c4:	4b19      	ldr	r3, [pc, #100]	; (172c <xQueueGenericSend+0x1dc>)
    16c6:	4798      	blx	r3
    16c8:	1e03      	subs	r3, r0, #0
    16ca:	d000      	beq.n	16ce <xQueueGenericSend+0x17e>
    16cc:	e77a      	b.n	15c4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    16ce:	4b0e      	ldr	r3, [pc, #56]	; (1708 <xQueueGenericSend+0x1b8>)
    16d0:	4798      	blx	r3
    16d2:	e777      	b.n	15c4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    16d4:	6a3b      	ldr	r3, [r7, #32]
    16d6:	0018      	movs	r0, r3
    16d8:	4b13      	ldr	r3, [pc, #76]	; (1728 <xQueueGenericSend+0x1d8>)
    16da:	4798      	blx	r3
				( void ) xTaskResumeAll();
    16dc:	4b13      	ldr	r3, [pc, #76]	; (172c <xQueueGenericSend+0x1dc>)
    16de:	4798      	blx	r3
    16e0:	e770      	b.n	15c4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    16e2:	6a3b      	ldr	r3, [r7, #32]
    16e4:	0018      	movs	r0, r3
    16e6:	4b10      	ldr	r3, [pc, #64]	; (1728 <xQueueGenericSend+0x1d8>)
    16e8:	4798      	blx	r3
			( void ) xTaskResumeAll();
    16ea:	4b10      	ldr	r3, [pc, #64]	; (172c <xQueueGenericSend+0x1dc>)
    16ec:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    16ee:	2300      	movs	r3, #0
		}
	}
}
    16f0:	0018      	movs	r0, r3
    16f2:	46bd      	mov	sp, r7
    16f4:	b00a      	add	sp, #40	; 0x28
    16f6:	bd80      	pop	{r7, pc}
    16f8:	00002825 	.word	0x00002825
    16fc:	00001141 	.word	0x00001141
    1700:	000019f1 	.word	0x000019f1
    1704:	00001cf5 	.word	0x00001cf5
    1708:	00001121 	.word	0x00001121
    170c:	000024ed 	.word	0x000024ed
    1710:	00001165 	.word	0x00001165
    1714:	000025ad 	.word	0x000025ad
    1718:	000020b1 	.word	0x000020b1
    171c:	000025d5 	.word	0x000025d5
    1720:	00001c45 	.word	0x00001c45
    1724:	00002455 	.word	0x00002455
    1728:	00001b21 	.word	0x00001b21
    172c:	000020c9 	.word	0x000020c9

00001730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1730:	b580      	push	{r7, lr}
    1732:	b088      	sub	sp, #32
    1734:	af00      	add	r7, sp, #0
    1736:	60f8      	str	r0, [r7, #12]
    1738:	60b9      	str	r1, [r7, #8]
    173a:	607a      	str	r2, [r7, #4]
    173c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    173e:	68fb      	ldr	r3, [r7, #12]
    1740:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    1742:	69bb      	ldr	r3, [r7, #24]
    1744:	2b00      	cmp	r3, #0
    1746:	d101      	bne.n	174c <xQueueGenericSendFromISR+0x1c>
    1748:	b672      	cpsid	i
    174a:	e7fe      	b.n	174a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    174c:	68bb      	ldr	r3, [r7, #8]
    174e:	2b00      	cmp	r3, #0
    1750:	d103      	bne.n	175a <xQueueGenericSendFromISR+0x2a>
    1752:	69bb      	ldr	r3, [r7, #24]
    1754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1756:	2b00      	cmp	r3, #0
    1758:	d101      	bne.n	175e <xQueueGenericSendFromISR+0x2e>
    175a:	2301      	movs	r3, #1
    175c:	e000      	b.n	1760 <xQueueGenericSendFromISR+0x30>
    175e:	2300      	movs	r3, #0
    1760:	2b00      	cmp	r3, #0
    1762:	d101      	bne.n	1768 <xQueueGenericSendFromISR+0x38>
    1764:	b672      	cpsid	i
    1766:	e7fe      	b.n	1766 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1768:	683b      	ldr	r3, [r7, #0]
    176a:	2b02      	cmp	r3, #2
    176c:	d103      	bne.n	1776 <xQueueGenericSendFromISR+0x46>
    176e:	69bb      	ldr	r3, [r7, #24]
    1770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1772:	2b01      	cmp	r3, #1
    1774:	d101      	bne.n	177a <xQueueGenericSendFromISR+0x4a>
    1776:	2301      	movs	r3, #1
    1778:	e000      	b.n	177c <xQueueGenericSendFromISR+0x4c>
    177a:	2300      	movs	r3, #0
    177c:	2b00      	cmp	r3, #0
    177e:	d101      	bne.n	1784 <xQueueGenericSendFromISR+0x54>
    1780:	b672      	cpsid	i
    1782:	e7fe      	b.n	1782 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1784:	4b2d      	ldr	r3, [pc, #180]	; (183c <xQueueGenericSendFromISR+0x10c>)
    1786:	4798      	blx	r3
    1788:	0003      	movs	r3, r0
    178a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    178c:	69bb      	ldr	r3, [r7, #24]
    178e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1790:	69bb      	ldr	r3, [r7, #24]
    1792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1794:	429a      	cmp	r2, r3
    1796:	d302      	bcc.n	179e <xQueueGenericSendFromISR+0x6e>
    1798:	683b      	ldr	r3, [r7, #0]
    179a:	2b02      	cmp	r3, #2
    179c:	d142      	bne.n	1824 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    179e:	2313      	movs	r3, #19
    17a0:	18fb      	adds	r3, r7, r3
    17a2:	69ba      	ldr	r2, [r7, #24]
    17a4:	2145      	movs	r1, #69	; 0x45
    17a6:	5c52      	ldrb	r2, [r2, r1]
    17a8:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    17aa:	683a      	ldr	r2, [r7, #0]
    17ac:	68b9      	ldr	r1, [r7, #8]
    17ae:	69bb      	ldr	r3, [r7, #24]
    17b0:	0018      	movs	r0, r3
    17b2:	4b23      	ldr	r3, [pc, #140]	; (1840 <xQueueGenericSendFromISR+0x110>)
    17b4:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    17b6:	2313      	movs	r3, #19
    17b8:	18fb      	adds	r3, r7, r3
    17ba:	781b      	ldrb	r3, [r3, #0]
    17bc:	b25b      	sxtb	r3, r3
    17be:	3301      	adds	r3, #1
    17c0:	d124      	bne.n	180c <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    17c2:	69bb      	ldr	r3, [r7, #24]
    17c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    17c6:	2b00      	cmp	r3, #0
    17c8:	d00e      	beq.n	17e8 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    17ca:	683a      	ldr	r2, [r7, #0]
    17cc:	69bb      	ldr	r3, [r7, #24]
    17ce:	0011      	movs	r1, r2
    17d0:	0018      	movs	r0, r3
    17d2:	4b1c      	ldr	r3, [pc, #112]	; (1844 <xQueueGenericSendFromISR+0x114>)
    17d4:	4798      	blx	r3
    17d6:	1e03      	subs	r3, r0, #0
    17d8:	d021      	beq.n	181e <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    17da:	687b      	ldr	r3, [r7, #4]
    17dc:	2b00      	cmp	r3, #0
    17de:	d01e      	beq.n	181e <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    17e0:	687b      	ldr	r3, [r7, #4]
    17e2:	2201      	movs	r2, #1
    17e4:	601a      	str	r2, [r3, #0]
    17e6:	e01a      	b.n	181e <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    17e8:	69bb      	ldr	r3, [r7, #24]
    17ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    17ec:	2b00      	cmp	r3, #0
    17ee:	d016      	beq.n	181e <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17f0:	69bb      	ldr	r3, [r7, #24]
    17f2:	3324      	adds	r3, #36	; 0x24
    17f4:	0018      	movs	r0, r3
    17f6:	4b14      	ldr	r3, [pc, #80]	; (1848 <xQueueGenericSendFromISR+0x118>)
    17f8:	4798      	blx	r3
    17fa:	1e03      	subs	r3, r0, #0
    17fc:	d00f      	beq.n	181e <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    17fe:	687b      	ldr	r3, [r7, #4]
    1800:	2b00      	cmp	r3, #0
    1802:	d00c      	beq.n	181e <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    1804:	687b      	ldr	r3, [r7, #4]
    1806:	2201      	movs	r2, #1
    1808:	601a      	str	r2, [r3, #0]
    180a:	e008      	b.n	181e <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    180c:	2313      	movs	r3, #19
    180e:	18fb      	adds	r3, r7, r3
    1810:	781b      	ldrb	r3, [r3, #0]
    1812:	3301      	adds	r3, #1
    1814:	b2db      	uxtb	r3, r3
    1816:	b259      	sxtb	r1, r3
    1818:	69bb      	ldr	r3, [r7, #24]
    181a:	2245      	movs	r2, #69	; 0x45
    181c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    181e:	2301      	movs	r3, #1
    1820:	61fb      	str	r3, [r7, #28]
		{
    1822:	e001      	b.n	1828 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1824:	2300      	movs	r3, #0
    1826:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1828:	697b      	ldr	r3, [r7, #20]
    182a:	0018      	movs	r0, r3
    182c:	4b07      	ldr	r3, [pc, #28]	; (184c <xQueueGenericSendFromISR+0x11c>)
    182e:	4798      	blx	r3

	return xReturn;
    1830:	69fb      	ldr	r3, [r7, #28]
}
    1832:	0018      	movs	r0, r3
    1834:	46bd      	mov	sp, r7
    1836:	b008      	add	sp, #32
    1838:	bd80      	pop	{r7, pc}
    183a:	46c0      	nop			; (mov r8, r8)
    183c:	00001195 	.word	0x00001195
    1840:	000019f1 	.word	0x000019f1
    1844:	00001cf5 	.word	0x00001cf5
    1848:	000024ed 	.word	0x000024ed
    184c:	000011a1 	.word	0x000011a1

00001850 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    1850:	b580      	push	{r7, lr}
    1852:	b08a      	sub	sp, #40	; 0x28
    1854:	af00      	add	r7, sp, #0
    1856:	60f8      	str	r0, [r7, #12]
    1858:	60b9      	str	r1, [r7, #8]
    185a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    185c:	2300      	movs	r3, #0
    185e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1860:	68fb      	ldr	r3, [r7, #12]
    1862:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    1864:	6a3b      	ldr	r3, [r7, #32]
    1866:	2b00      	cmp	r3, #0
    1868:	d101      	bne.n	186e <xQueueReceive+0x1e>
    186a:	b672      	cpsid	i
    186c:	e7fe      	b.n	186c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    186e:	68bb      	ldr	r3, [r7, #8]
    1870:	2b00      	cmp	r3, #0
    1872:	d103      	bne.n	187c <xQueueReceive+0x2c>
    1874:	6a3b      	ldr	r3, [r7, #32]
    1876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1878:	2b00      	cmp	r3, #0
    187a:	d101      	bne.n	1880 <xQueueReceive+0x30>
    187c:	2301      	movs	r3, #1
    187e:	e000      	b.n	1882 <xQueueReceive+0x32>
    1880:	2300      	movs	r3, #0
    1882:	2b00      	cmp	r3, #0
    1884:	d101      	bne.n	188a <xQueueReceive+0x3a>
    1886:	b672      	cpsid	i
    1888:	e7fe      	b.n	1888 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    188a:	4b4c      	ldr	r3, [pc, #304]	; (19bc <xQueueReceive+0x16c>)
    188c:	4798      	blx	r3
    188e:	1e03      	subs	r3, r0, #0
    1890:	d102      	bne.n	1898 <xQueueReceive+0x48>
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	2b00      	cmp	r3, #0
    1896:	d101      	bne.n	189c <xQueueReceive+0x4c>
    1898:	2301      	movs	r3, #1
    189a:	e000      	b.n	189e <xQueueReceive+0x4e>
    189c:	2300      	movs	r3, #0
    189e:	2b00      	cmp	r3, #0
    18a0:	d101      	bne.n	18a6 <xQueueReceive+0x56>
    18a2:	b672      	cpsid	i
    18a4:	e7fe      	b.n	18a4 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    18a6:	4b46      	ldr	r3, [pc, #280]	; (19c0 <xQueueReceive+0x170>)
    18a8:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    18aa:	6a3b      	ldr	r3, [r7, #32]
    18ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    18ae:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    18b0:	69fb      	ldr	r3, [r7, #28]
    18b2:	2b00      	cmp	r3, #0
    18b4:	d01a      	beq.n	18ec <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    18b6:	68ba      	ldr	r2, [r7, #8]
    18b8:	6a3b      	ldr	r3, [r7, #32]
    18ba:	0011      	movs	r1, r2
    18bc:	0018      	movs	r0, r3
    18be:	4b41      	ldr	r3, [pc, #260]	; (19c4 <xQueueReceive+0x174>)
    18c0:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    18c2:	69fb      	ldr	r3, [r7, #28]
    18c4:	1e5a      	subs	r2, r3, #1
    18c6:	6a3b      	ldr	r3, [r7, #32]
    18c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    18ca:	6a3b      	ldr	r3, [r7, #32]
    18cc:	691b      	ldr	r3, [r3, #16]
    18ce:	2b00      	cmp	r3, #0
    18d0:	d008      	beq.n	18e4 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    18d2:	6a3b      	ldr	r3, [r7, #32]
    18d4:	3310      	adds	r3, #16
    18d6:	0018      	movs	r0, r3
    18d8:	4b3b      	ldr	r3, [pc, #236]	; (19c8 <xQueueReceive+0x178>)
    18da:	4798      	blx	r3
    18dc:	1e03      	subs	r3, r0, #0
    18de:	d001      	beq.n	18e4 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
    18e0:	4b3a      	ldr	r3, [pc, #232]	; (19cc <xQueueReceive+0x17c>)
    18e2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    18e4:	4b3a      	ldr	r3, [pc, #232]	; (19d0 <xQueueReceive+0x180>)
    18e6:	4798      	blx	r3
				return pdPASS;
    18e8:	2301      	movs	r3, #1
    18ea:	e062      	b.n	19b2 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    18ec:	687b      	ldr	r3, [r7, #4]
    18ee:	2b00      	cmp	r3, #0
    18f0:	d103      	bne.n	18fa <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    18f2:	4b37      	ldr	r3, [pc, #220]	; (19d0 <xQueueReceive+0x180>)
    18f4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    18f6:	2300      	movs	r3, #0
    18f8:	e05b      	b.n	19b2 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
    18fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18fc:	2b00      	cmp	r3, #0
    18fe:	d106      	bne.n	190e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    1900:	2314      	movs	r3, #20
    1902:	18fb      	adds	r3, r7, r3
    1904:	0018      	movs	r0, r3
    1906:	4b33      	ldr	r3, [pc, #204]	; (19d4 <xQueueReceive+0x184>)
    1908:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    190a:	2301      	movs	r3, #1
    190c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    190e:	4b30      	ldr	r3, [pc, #192]	; (19d0 <xQueueReceive+0x180>)
    1910:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1912:	4b31      	ldr	r3, [pc, #196]	; (19d8 <xQueueReceive+0x188>)
    1914:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1916:	4b2a      	ldr	r3, [pc, #168]	; (19c0 <xQueueReceive+0x170>)
    1918:	4798      	blx	r3
    191a:	6a3b      	ldr	r3, [r7, #32]
    191c:	2244      	movs	r2, #68	; 0x44
    191e:	5c9b      	ldrb	r3, [r3, r2]
    1920:	b25b      	sxtb	r3, r3
    1922:	3301      	adds	r3, #1
    1924:	d103      	bne.n	192e <xQueueReceive+0xde>
    1926:	6a3b      	ldr	r3, [r7, #32]
    1928:	2244      	movs	r2, #68	; 0x44
    192a:	2100      	movs	r1, #0
    192c:	5499      	strb	r1, [r3, r2]
    192e:	6a3b      	ldr	r3, [r7, #32]
    1930:	2245      	movs	r2, #69	; 0x45
    1932:	5c9b      	ldrb	r3, [r3, r2]
    1934:	b25b      	sxtb	r3, r3
    1936:	3301      	adds	r3, #1
    1938:	d103      	bne.n	1942 <xQueueReceive+0xf2>
    193a:	6a3b      	ldr	r3, [r7, #32]
    193c:	2245      	movs	r2, #69	; 0x45
    193e:	2100      	movs	r1, #0
    1940:	5499      	strb	r1, [r3, r2]
    1942:	4b23      	ldr	r3, [pc, #140]	; (19d0 <xQueueReceive+0x180>)
    1944:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1946:	1d3a      	adds	r2, r7, #4
    1948:	2314      	movs	r3, #20
    194a:	18fb      	adds	r3, r7, r3
    194c:	0011      	movs	r1, r2
    194e:	0018      	movs	r0, r3
    1950:	4b22      	ldr	r3, [pc, #136]	; (19dc <xQueueReceive+0x18c>)
    1952:	4798      	blx	r3
    1954:	1e03      	subs	r3, r0, #0
    1956:	d11e      	bne.n	1996 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1958:	6a3b      	ldr	r3, [r7, #32]
    195a:	0018      	movs	r0, r3
    195c:	4b20      	ldr	r3, [pc, #128]	; (19e0 <xQueueReceive+0x190>)
    195e:	4798      	blx	r3
    1960:	1e03      	subs	r3, r0, #0
    1962:	d011      	beq.n	1988 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1964:	6a3b      	ldr	r3, [r7, #32]
    1966:	3324      	adds	r3, #36	; 0x24
    1968:	687a      	ldr	r2, [r7, #4]
    196a:	0011      	movs	r1, r2
    196c:	0018      	movs	r0, r3
    196e:	4b1d      	ldr	r3, [pc, #116]	; (19e4 <xQueueReceive+0x194>)
    1970:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1972:	6a3b      	ldr	r3, [r7, #32]
    1974:	0018      	movs	r0, r3
    1976:	4b1c      	ldr	r3, [pc, #112]	; (19e8 <xQueueReceive+0x198>)
    1978:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    197a:	4b1c      	ldr	r3, [pc, #112]	; (19ec <xQueueReceive+0x19c>)
    197c:	4798      	blx	r3
    197e:	1e03      	subs	r3, r0, #0
    1980:	d191      	bne.n	18a6 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    1982:	4b12      	ldr	r3, [pc, #72]	; (19cc <xQueueReceive+0x17c>)
    1984:	4798      	blx	r3
    1986:	e78e      	b.n	18a6 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    1988:	6a3b      	ldr	r3, [r7, #32]
    198a:	0018      	movs	r0, r3
    198c:	4b16      	ldr	r3, [pc, #88]	; (19e8 <xQueueReceive+0x198>)
    198e:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1990:	4b16      	ldr	r3, [pc, #88]	; (19ec <xQueueReceive+0x19c>)
    1992:	4798      	blx	r3
    1994:	e787      	b.n	18a6 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    1996:	6a3b      	ldr	r3, [r7, #32]
    1998:	0018      	movs	r0, r3
    199a:	4b13      	ldr	r3, [pc, #76]	; (19e8 <xQueueReceive+0x198>)
    199c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    199e:	4b13      	ldr	r3, [pc, #76]	; (19ec <xQueueReceive+0x19c>)
    19a0:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    19a2:	6a3b      	ldr	r3, [r7, #32]
    19a4:	0018      	movs	r0, r3
    19a6:	4b0e      	ldr	r3, [pc, #56]	; (19e0 <xQueueReceive+0x190>)
    19a8:	4798      	blx	r3
    19aa:	1e03      	subs	r3, r0, #0
    19ac:	d100      	bne.n	19b0 <xQueueReceive+0x160>
    19ae:	e77a      	b.n	18a6 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    19b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    19b2:	0018      	movs	r0, r3
    19b4:	46bd      	mov	sp, r7
    19b6:	b00a      	add	sp, #40	; 0x28
    19b8:	bd80      	pop	{r7, pc}
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	00002825 	.word	0x00002825
    19c0:	00001141 	.word	0x00001141
    19c4:	00001ad1 	.word	0x00001ad1
    19c8:	000024ed 	.word	0x000024ed
    19cc:	00001121 	.word	0x00001121
    19d0:	00001165 	.word	0x00001165
    19d4:	000025ad 	.word	0x000025ad
    19d8:	000020b1 	.word	0x000020b1
    19dc:	000025d5 	.word	0x000025d5
    19e0:	00001c11 	.word	0x00001c11
    19e4:	00002455 	.word	0x00002455
    19e8:	00001b21 	.word	0x00001b21
    19ec:	000020c9 	.word	0x000020c9

000019f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    19f0:	b580      	push	{r7, lr}
    19f2:	b086      	sub	sp, #24
    19f4:	af00      	add	r7, sp, #0
    19f6:	60f8      	str	r0, [r7, #12]
    19f8:	60b9      	str	r1, [r7, #8]
    19fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    19fc:	2300      	movs	r3, #0
    19fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1a04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1a06:	68fb      	ldr	r3, [r7, #12]
    1a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d10e      	bne.n	1a2c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1a0e:	68fb      	ldr	r3, [r7, #12]
    1a10:	681b      	ldr	r3, [r3, #0]
    1a12:	2b00      	cmp	r3, #0
    1a14:	d14e      	bne.n	1ab4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1a16:	68fb      	ldr	r3, [r7, #12]
    1a18:	685b      	ldr	r3, [r3, #4]
    1a1a:	0018      	movs	r0, r3
    1a1c:	4b2a      	ldr	r3, [pc, #168]	; (1ac8 <prvCopyDataToQueue+0xd8>)
    1a1e:	4798      	blx	r3
    1a20:	0003      	movs	r3, r0
    1a22:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    1a24:	68fb      	ldr	r3, [r7, #12]
    1a26:	2200      	movs	r2, #0
    1a28:	605a      	str	r2, [r3, #4]
    1a2a:	e043      	b.n	1ab4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	2b00      	cmp	r3, #0
    1a30:	d119      	bne.n	1a66 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1a32:	68fb      	ldr	r3, [r7, #12]
    1a34:	6898      	ldr	r0, [r3, #8]
    1a36:	68fb      	ldr	r3, [r7, #12]
    1a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1a3a:	68bb      	ldr	r3, [r7, #8]
    1a3c:	0019      	movs	r1, r3
    1a3e:	4b23      	ldr	r3, [pc, #140]	; (1acc <prvCopyDataToQueue+0xdc>)
    1a40:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1a42:	68fb      	ldr	r3, [r7, #12]
    1a44:	689a      	ldr	r2, [r3, #8]
    1a46:	68fb      	ldr	r3, [r7, #12]
    1a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a4a:	18d2      	adds	r2, r2, r3
    1a4c:	68fb      	ldr	r3, [r7, #12]
    1a4e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1a50:	68fb      	ldr	r3, [r7, #12]
    1a52:	689a      	ldr	r2, [r3, #8]
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	685b      	ldr	r3, [r3, #4]
    1a58:	429a      	cmp	r2, r3
    1a5a:	d32b      	bcc.n	1ab4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1a5c:	68fb      	ldr	r3, [r7, #12]
    1a5e:	681a      	ldr	r2, [r3, #0]
    1a60:	68fb      	ldr	r3, [r7, #12]
    1a62:	609a      	str	r2, [r3, #8]
    1a64:	e026      	b.n	1ab4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1a66:	68fb      	ldr	r3, [r7, #12]
    1a68:	68d8      	ldr	r0, [r3, #12]
    1a6a:	68fb      	ldr	r3, [r7, #12]
    1a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1a6e:	68bb      	ldr	r3, [r7, #8]
    1a70:	0019      	movs	r1, r3
    1a72:	4b16      	ldr	r3, [pc, #88]	; (1acc <prvCopyDataToQueue+0xdc>)
    1a74:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1a76:	68fb      	ldr	r3, [r7, #12]
    1a78:	68da      	ldr	r2, [r3, #12]
    1a7a:	68fb      	ldr	r3, [r7, #12]
    1a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a7e:	425b      	negs	r3, r3
    1a80:	18d2      	adds	r2, r2, r3
    1a82:	68fb      	ldr	r3, [r7, #12]
    1a84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1a86:	68fb      	ldr	r3, [r7, #12]
    1a88:	68da      	ldr	r2, [r3, #12]
    1a8a:	68fb      	ldr	r3, [r7, #12]
    1a8c:	681b      	ldr	r3, [r3, #0]
    1a8e:	429a      	cmp	r2, r3
    1a90:	d207      	bcs.n	1aa2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1a92:	68fb      	ldr	r3, [r7, #12]
    1a94:	685a      	ldr	r2, [r3, #4]
    1a96:	68fb      	ldr	r3, [r7, #12]
    1a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a9a:	425b      	negs	r3, r3
    1a9c:	18d2      	adds	r2, r2, r3
    1a9e:	68fb      	ldr	r3, [r7, #12]
    1aa0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1aa2:	687b      	ldr	r3, [r7, #4]
    1aa4:	2b02      	cmp	r3, #2
    1aa6:	d105      	bne.n	1ab4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1aa8:	693b      	ldr	r3, [r7, #16]
    1aaa:	2b00      	cmp	r3, #0
    1aac:	d002      	beq.n	1ab4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    1aae:	693b      	ldr	r3, [r7, #16]
    1ab0:	3b01      	subs	r3, #1
    1ab2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    1ab4:	693b      	ldr	r3, [r7, #16]
    1ab6:	1c5a      	adds	r2, r3, #1
    1ab8:	68fb      	ldr	r3, [r7, #12]
    1aba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    1abc:	697b      	ldr	r3, [r7, #20]
}
    1abe:	0018      	movs	r0, r3
    1ac0:	46bd      	mov	sp, r7
    1ac2:	b006      	add	sp, #24
    1ac4:	bd80      	pop	{r7, pc}
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	0000285d 	.word	0x0000285d
    1acc:	000053d9 	.word	0x000053d9

00001ad0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    1ad0:	b580      	push	{r7, lr}
    1ad2:	b082      	sub	sp, #8
    1ad4:	af00      	add	r7, sp, #0
    1ad6:	6078      	str	r0, [r7, #4]
    1ad8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1ada:	687b      	ldr	r3, [r7, #4]
    1adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d018      	beq.n	1b14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1ae2:	687b      	ldr	r3, [r7, #4]
    1ae4:	68da      	ldr	r2, [r3, #12]
    1ae6:	687b      	ldr	r3, [r7, #4]
    1ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1aea:	18d2      	adds	r2, r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	68da      	ldr	r2, [r3, #12]
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	685b      	ldr	r3, [r3, #4]
    1af8:	429a      	cmp	r2, r3
    1afa:	d303      	bcc.n	1b04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	681a      	ldr	r2, [r3, #0]
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1b04:	687b      	ldr	r3, [r7, #4]
    1b06:	68d9      	ldr	r1, [r3, #12]
    1b08:	687b      	ldr	r3, [r7, #4]
    1b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1b0c:	683b      	ldr	r3, [r7, #0]
    1b0e:	0018      	movs	r0, r3
    1b10:	4b02      	ldr	r3, [pc, #8]	; (1b1c <prvCopyDataFromQueue+0x4c>)
    1b12:	4798      	blx	r3
	}
}
    1b14:	46c0      	nop			; (mov r8, r8)
    1b16:	46bd      	mov	sp, r7
    1b18:	b002      	add	sp, #8
    1b1a:	bd80      	pop	{r7, pc}
    1b1c:	000053d9 	.word	0x000053d9

00001b20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b084      	sub	sp, #16
    1b24:	af00      	add	r7, sp, #0
    1b26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1b28:	4b34      	ldr	r3, [pc, #208]	; (1bfc <prvUnlockQueue+0xdc>)
    1b2a:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    1b2c:	230f      	movs	r3, #15
    1b2e:	18fb      	adds	r3, r7, r3
    1b30:	687a      	ldr	r2, [r7, #4]
    1b32:	2145      	movs	r1, #69	; 0x45
    1b34:	5c52      	ldrb	r2, [r2, r1]
    1b36:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1b38:	e022      	b.n	1b80 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d009      	beq.n	1b56 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	2100      	movs	r1, #0
    1b46:	0018      	movs	r0, r3
    1b48:	4b2d      	ldr	r3, [pc, #180]	; (1c00 <prvUnlockQueue+0xe0>)
    1b4a:	4798      	blx	r3
    1b4c:	1e03      	subs	r3, r0, #0
    1b4e:	d00f      	beq.n	1b70 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    1b50:	4b2c      	ldr	r3, [pc, #176]	; (1c04 <prvUnlockQueue+0xe4>)
    1b52:	4798      	blx	r3
    1b54:	e00c      	b.n	1b70 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1b56:	687b      	ldr	r3, [r7, #4]
    1b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d017      	beq.n	1b8e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1b5e:	687b      	ldr	r3, [r7, #4]
    1b60:	3324      	adds	r3, #36	; 0x24
    1b62:	0018      	movs	r0, r3
    1b64:	4b28      	ldr	r3, [pc, #160]	; (1c08 <prvUnlockQueue+0xe8>)
    1b66:	4798      	blx	r3
    1b68:	1e03      	subs	r3, r0, #0
    1b6a:	d001      	beq.n	1b70 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    1b6c:	4b25      	ldr	r3, [pc, #148]	; (1c04 <prvUnlockQueue+0xe4>)
    1b6e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    1b70:	230f      	movs	r3, #15
    1b72:	18fb      	adds	r3, r7, r3
    1b74:	781b      	ldrb	r3, [r3, #0]
    1b76:	3b01      	subs	r3, #1
    1b78:	b2da      	uxtb	r2, r3
    1b7a:	230f      	movs	r3, #15
    1b7c:	18fb      	adds	r3, r7, r3
    1b7e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1b80:	230f      	movs	r3, #15
    1b82:	18fb      	adds	r3, r7, r3
    1b84:	781b      	ldrb	r3, [r3, #0]
    1b86:	b25b      	sxtb	r3, r3
    1b88:	2b00      	cmp	r3, #0
    1b8a:	dcd6      	bgt.n	1b3a <prvUnlockQueue+0x1a>
    1b8c:	e000      	b.n	1b90 <prvUnlockQueue+0x70>
						break;
    1b8e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    1b90:	687b      	ldr	r3, [r7, #4]
    1b92:	2245      	movs	r2, #69	; 0x45
    1b94:	21ff      	movs	r1, #255	; 0xff
    1b96:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    1b98:	4b1c      	ldr	r3, [pc, #112]	; (1c0c <prvUnlockQueue+0xec>)
    1b9a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1b9c:	4b17      	ldr	r3, [pc, #92]	; (1bfc <prvUnlockQueue+0xdc>)
    1b9e:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    1ba0:	230e      	movs	r3, #14
    1ba2:	18fb      	adds	r3, r7, r3
    1ba4:	687a      	ldr	r2, [r7, #4]
    1ba6:	2144      	movs	r1, #68	; 0x44
    1ba8:	5c52      	ldrb	r2, [r2, r1]
    1baa:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    1bac:	e014      	b.n	1bd8 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	691b      	ldr	r3, [r3, #16]
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	d017      	beq.n	1be6 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1bb6:	687b      	ldr	r3, [r7, #4]
    1bb8:	3310      	adds	r3, #16
    1bba:	0018      	movs	r0, r3
    1bbc:	4b12      	ldr	r3, [pc, #72]	; (1c08 <prvUnlockQueue+0xe8>)
    1bbe:	4798      	blx	r3
    1bc0:	1e03      	subs	r3, r0, #0
    1bc2:	d001      	beq.n	1bc8 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    1bc4:	4b0f      	ldr	r3, [pc, #60]	; (1c04 <prvUnlockQueue+0xe4>)
    1bc6:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    1bc8:	230e      	movs	r3, #14
    1bca:	18fb      	adds	r3, r7, r3
    1bcc:	781b      	ldrb	r3, [r3, #0]
    1bce:	3b01      	subs	r3, #1
    1bd0:	b2da      	uxtb	r2, r3
    1bd2:	230e      	movs	r3, #14
    1bd4:	18fb      	adds	r3, r7, r3
    1bd6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    1bd8:	230e      	movs	r3, #14
    1bda:	18fb      	adds	r3, r7, r3
    1bdc:	781b      	ldrb	r3, [r3, #0]
    1bde:	b25b      	sxtb	r3, r3
    1be0:	2b00      	cmp	r3, #0
    1be2:	dce4      	bgt.n	1bae <prvUnlockQueue+0x8e>
    1be4:	e000      	b.n	1be8 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    1be6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    1be8:	687b      	ldr	r3, [r7, #4]
    1bea:	2244      	movs	r2, #68	; 0x44
    1bec:	21ff      	movs	r1, #255	; 0xff
    1bee:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    1bf0:	4b06      	ldr	r3, [pc, #24]	; (1c0c <prvUnlockQueue+0xec>)
    1bf2:	4798      	blx	r3
}
    1bf4:	46c0      	nop			; (mov r8, r8)
    1bf6:	46bd      	mov	sp, r7
    1bf8:	b004      	add	sp, #16
    1bfa:	bd80      	pop	{r7, pc}
    1bfc:	00001141 	.word	0x00001141
    1c00:	00001cf5 	.word	0x00001cf5
    1c04:	00002681 	.word	0x00002681
    1c08:	000024ed 	.word	0x000024ed
    1c0c:	00001165 	.word	0x00001165

00001c10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    1c10:	b580      	push	{r7, lr}
    1c12:	b084      	sub	sp, #16
    1c14:	af00      	add	r7, sp, #0
    1c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1c18:	4b08      	ldr	r3, [pc, #32]	; (1c3c <prvIsQueueEmpty+0x2c>)
    1c1a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1c1c:	687b      	ldr	r3, [r7, #4]
    1c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1c20:	2b00      	cmp	r3, #0
    1c22:	d102      	bne.n	1c2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    1c24:	2301      	movs	r3, #1
    1c26:	60fb      	str	r3, [r7, #12]
    1c28:	e001      	b.n	1c2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    1c2a:	2300      	movs	r3, #0
    1c2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    1c2e:	4b04      	ldr	r3, [pc, #16]	; (1c40 <prvIsQueueEmpty+0x30>)
    1c30:	4798      	blx	r3

	return xReturn;
    1c32:	68fb      	ldr	r3, [r7, #12]
}
    1c34:	0018      	movs	r0, r3
    1c36:	46bd      	mov	sp, r7
    1c38:	b004      	add	sp, #16
    1c3a:	bd80      	pop	{r7, pc}
    1c3c:	00001141 	.word	0x00001141
    1c40:	00001165 	.word	0x00001165

00001c44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    1c44:	b580      	push	{r7, lr}
    1c46:	b084      	sub	sp, #16
    1c48:	af00      	add	r7, sp, #0
    1c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1c4c:	4b09      	ldr	r3, [pc, #36]	; (1c74 <prvIsQueueFull+0x30>)
    1c4e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1c50:	687b      	ldr	r3, [r7, #4]
    1c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1c54:	687b      	ldr	r3, [r7, #4]
    1c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1c58:	429a      	cmp	r2, r3
    1c5a:	d102      	bne.n	1c62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    1c5c:	2301      	movs	r3, #1
    1c5e:	60fb      	str	r3, [r7, #12]
    1c60:	e001      	b.n	1c66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    1c62:	2300      	movs	r3, #0
    1c64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    1c66:	4b04      	ldr	r3, [pc, #16]	; (1c78 <prvIsQueueFull+0x34>)
    1c68:	4798      	blx	r3

	return xReturn;
    1c6a:	68fb      	ldr	r3, [r7, #12]
}
    1c6c:	0018      	movs	r0, r3
    1c6e:	46bd      	mov	sp, r7
    1c70:	b004      	add	sp, #16
    1c72:	bd80      	pop	{r7, pc}
    1c74:	00001141 	.word	0x00001141
    1c78:	00001165 	.word	0x00001165

00001c7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1c7c:	b580      	push	{r7, lr}
    1c7e:	b086      	sub	sp, #24
    1c80:	af00      	add	r7, sp, #0
    1c82:	60f8      	str	r0, [r7, #12]
    1c84:	60b9      	str	r1, [r7, #8]
    1c86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1c88:	68fb      	ldr	r3, [r7, #12]
    1c8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1c8c:	4b15      	ldr	r3, [pc, #84]	; (1ce4 <vQueueWaitForMessageRestricted+0x68>)
    1c8e:	4798      	blx	r3
    1c90:	697b      	ldr	r3, [r7, #20]
    1c92:	2244      	movs	r2, #68	; 0x44
    1c94:	5c9b      	ldrb	r3, [r3, r2]
    1c96:	b25b      	sxtb	r3, r3
    1c98:	3301      	adds	r3, #1
    1c9a:	d103      	bne.n	1ca4 <vQueueWaitForMessageRestricted+0x28>
    1c9c:	697b      	ldr	r3, [r7, #20]
    1c9e:	2244      	movs	r2, #68	; 0x44
    1ca0:	2100      	movs	r1, #0
    1ca2:	5499      	strb	r1, [r3, r2]
    1ca4:	697b      	ldr	r3, [r7, #20]
    1ca6:	2245      	movs	r2, #69	; 0x45
    1ca8:	5c9b      	ldrb	r3, [r3, r2]
    1caa:	b25b      	sxtb	r3, r3
    1cac:	3301      	adds	r3, #1
    1cae:	d103      	bne.n	1cb8 <vQueueWaitForMessageRestricted+0x3c>
    1cb0:	697b      	ldr	r3, [r7, #20]
    1cb2:	2245      	movs	r2, #69	; 0x45
    1cb4:	2100      	movs	r1, #0
    1cb6:	5499      	strb	r1, [r3, r2]
    1cb8:	4b0b      	ldr	r3, [pc, #44]	; (1ce8 <vQueueWaitForMessageRestricted+0x6c>)
    1cba:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1cbc:	697b      	ldr	r3, [r7, #20]
    1cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	d106      	bne.n	1cd2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1cc4:	697b      	ldr	r3, [r7, #20]
    1cc6:	3324      	adds	r3, #36	; 0x24
    1cc8:	687a      	ldr	r2, [r7, #4]
    1cca:	68b9      	ldr	r1, [r7, #8]
    1ccc:	0018      	movs	r0, r3
    1cce:	4b07      	ldr	r3, [pc, #28]	; (1cec <vQueueWaitForMessageRestricted+0x70>)
    1cd0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1cd2:	697b      	ldr	r3, [r7, #20]
    1cd4:	0018      	movs	r0, r3
    1cd6:	4b06      	ldr	r3, [pc, #24]	; (1cf0 <vQueueWaitForMessageRestricted+0x74>)
    1cd8:	4798      	blx	r3
	}
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	46bd      	mov	sp, r7
    1cde:	b006      	add	sp, #24
    1ce0:	bd80      	pop	{r7, pc}
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	00001141 	.word	0x00001141
    1ce8:	00001165 	.word	0x00001165
    1cec:	00002499 	.word	0x00002499
    1cf0:	00001b21 	.word	0x00001b21

00001cf4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    1cf4:	b580      	push	{r7, lr}
    1cf6:	b086      	sub	sp, #24
    1cf8:	af00      	add	r7, sp, #0
    1cfa:	6078      	str	r0, [r7, #4]
    1cfc:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1d02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    1d04:	2300      	movs	r3, #0
    1d06:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    1d08:	693b      	ldr	r3, [r7, #16]
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d101      	bne.n	1d12 <prvNotifyQueueSetContainer+0x1e>
    1d0e:	b672      	cpsid	i
    1d10:	e7fe      	b.n	1d10 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    1d12:	693b      	ldr	r3, [r7, #16]
    1d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1d16:	693b      	ldr	r3, [r7, #16]
    1d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1d1a:	429a      	cmp	r2, r3
    1d1c:	d301      	bcc.n	1d22 <prvNotifyQueueSetContainer+0x2e>
    1d1e:	b672      	cpsid	i
    1d20:	e7fe      	b.n	1d20 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1d22:	693b      	ldr	r3, [r7, #16]
    1d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1d26:	693b      	ldr	r3, [r7, #16]
    1d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1d2a:	429a      	cmp	r2, r3
    1d2c:	d22a      	bcs.n	1d84 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    1d2e:	230f      	movs	r3, #15
    1d30:	18fb      	adds	r3, r7, r3
    1d32:	693a      	ldr	r2, [r7, #16]
    1d34:	2145      	movs	r1, #69	; 0x45
    1d36:	5c52      	ldrb	r2, [r2, r1]
    1d38:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    1d3a:	683a      	ldr	r2, [r7, #0]
    1d3c:	1d39      	adds	r1, r7, #4
    1d3e:	693b      	ldr	r3, [r7, #16]
    1d40:	0018      	movs	r0, r3
    1d42:	4b13      	ldr	r3, [pc, #76]	; (1d90 <prvNotifyQueueSetContainer+0x9c>)
    1d44:	4798      	blx	r3
    1d46:	0003      	movs	r3, r0
    1d48:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    1d4a:	230f      	movs	r3, #15
    1d4c:	18fb      	adds	r3, r7, r3
    1d4e:	781b      	ldrb	r3, [r3, #0]
    1d50:	b25b      	sxtb	r3, r3
    1d52:	3301      	adds	r3, #1
    1d54:	d10d      	bne.n	1d72 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    1d56:	693b      	ldr	r3, [r7, #16]
    1d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d012      	beq.n	1d84 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    1d5e:	693b      	ldr	r3, [r7, #16]
    1d60:	3324      	adds	r3, #36	; 0x24
    1d62:	0018      	movs	r0, r3
    1d64:	4b0b      	ldr	r3, [pc, #44]	; (1d94 <prvNotifyQueueSetContainer+0xa0>)
    1d66:	4798      	blx	r3
    1d68:	1e03      	subs	r3, r0, #0
    1d6a:	d00b      	beq.n	1d84 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    1d6c:	2301      	movs	r3, #1
    1d6e:	617b      	str	r3, [r7, #20]
    1d70:	e008      	b.n	1d84 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1d72:	230f      	movs	r3, #15
    1d74:	18fb      	adds	r3, r7, r3
    1d76:	781b      	ldrb	r3, [r3, #0]
    1d78:	3301      	adds	r3, #1
    1d7a:	b2db      	uxtb	r3, r3
    1d7c:	b259      	sxtb	r1, r3
    1d7e:	693b      	ldr	r3, [r7, #16]
    1d80:	2245      	movs	r2, #69	; 0x45
    1d82:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    1d84:	697b      	ldr	r3, [r7, #20]
	}
    1d86:	0018      	movs	r0, r3
    1d88:	46bd      	mov	sp, r7
    1d8a:	b006      	add	sp, #24
    1d8c:	bd80      	pop	{r7, pc}
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	000019f1 	.word	0x000019f1
    1d94:	000024ed 	.word	0x000024ed

00001d98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    1d98:	b590      	push	{r4, r7, lr}
    1d9a:	b08d      	sub	sp, #52	; 0x34
    1d9c:	af04      	add	r7, sp, #16
    1d9e:	60f8      	str	r0, [r7, #12]
    1da0:	60b9      	str	r1, [r7, #8]
    1da2:	603b      	str	r3, [r7, #0]
    1da4:	1dbb      	adds	r3, r7, #6
    1da6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1da8:	1dbb      	adds	r3, r7, #6
    1daa:	881b      	ldrh	r3, [r3, #0]
    1dac:	009b      	lsls	r3, r3, #2
    1dae:	0018      	movs	r0, r3
    1db0:	4b1d      	ldr	r3, [pc, #116]	; (1e28 <xTaskCreate+0x90>)
    1db2:	4798      	blx	r3
    1db4:	0003      	movs	r3, r0
    1db6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    1db8:	697b      	ldr	r3, [r7, #20]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d010      	beq.n	1de0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    1dbe:	2054      	movs	r0, #84	; 0x54
    1dc0:	4b19      	ldr	r3, [pc, #100]	; (1e28 <xTaskCreate+0x90>)
    1dc2:	4798      	blx	r3
    1dc4:	0003      	movs	r3, r0
    1dc6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    1dc8:	69fb      	ldr	r3, [r7, #28]
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d003      	beq.n	1dd6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    1dce:	69fb      	ldr	r3, [r7, #28]
    1dd0:	697a      	ldr	r2, [r7, #20]
    1dd2:	631a      	str	r2, [r3, #48]	; 0x30
    1dd4:	e006      	b.n	1de4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    1dd6:	697b      	ldr	r3, [r7, #20]
    1dd8:	0018      	movs	r0, r3
    1dda:	4b14      	ldr	r3, [pc, #80]	; (1e2c <xTaskCreate+0x94>)
    1ddc:	4798      	blx	r3
    1dde:	e001      	b.n	1de4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    1de0:	2300      	movs	r3, #0
    1de2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    1de4:	69fb      	ldr	r3, [r7, #28]
    1de6:	2b00      	cmp	r3, #0
    1de8:	d016      	beq.n	1e18 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    1dea:	1dbb      	adds	r3, r7, #6
    1dec:	881a      	ldrh	r2, [r3, #0]
    1dee:	683c      	ldr	r4, [r7, #0]
    1df0:	68b9      	ldr	r1, [r7, #8]
    1df2:	68f8      	ldr	r0, [r7, #12]
    1df4:	2300      	movs	r3, #0
    1df6:	9303      	str	r3, [sp, #12]
    1df8:	69fb      	ldr	r3, [r7, #28]
    1dfa:	9302      	str	r3, [sp, #8]
    1dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1dfe:	9301      	str	r3, [sp, #4]
    1e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1e02:	9300      	str	r3, [sp, #0]
    1e04:	0023      	movs	r3, r4
    1e06:	4c0a      	ldr	r4, [pc, #40]	; (1e30 <xTaskCreate+0x98>)
    1e08:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    1e0a:	69fb      	ldr	r3, [r7, #28]
    1e0c:	0018      	movs	r0, r3
    1e0e:	4b09      	ldr	r3, [pc, #36]	; (1e34 <xTaskCreate+0x9c>)
    1e10:	4798      	blx	r3
			xReturn = pdPASS;
    1e12:	2301      	movs	r3, #1
    1e14:	61bb      	str	r3, [r7, #24]
    1e16:	e002      	b.n	1e1e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1e18:	2301      	movs	r3, #1
    1e1a:	425b      	negs	r3, r3
    1e1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    1e1e:	69bb      	ldr	r3, [r7, #24]
	}
    1e20:	0018      	movs	r0, r3
    1e22:	46bd      	mov	sp, r7
    1e24:	b009      	add	sp, #36	; 0x24
    1e26:	bd90      	pop	{r4, r7, pc}
    1e28:	00001281 	.word	0x00001281
    1e2c:	00001321 	.word	0x00001321
    1e30:	00001e39 	.word	0x00001e39
    1e34:	00001f49 	.word	0x00001f49

00001e38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    1e38:	b580      	push	{r7, lr}
    1e3a:	b086      	sub	sp, #24
    1e3c:	af00      	add	r7, sp, #0
    1e3e:	60f8      	str	r0, [r7, #12]
    1e40:	60b9      	str	r1, [r7, #8]
    1e42:	607a      	str	r2, [r7, #4]
    1e44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    1e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e48:	6b18      	ldr	r0, [r3, #48]	; 0x30
    1e4a:	687b      	ldr	r3, [r7, #4]
    1e4c:	009b      	lsls	r3, r3, #2
    1e4e:	001a      	movs	r2, r3
    1e50:	21a5      	movs	r1, #165	; 0xa5
    1e52:	4b39      	ldr	r3, [pc, #228]	; (1f38 <prvInitialiseNewTask+0x100>)
    1e54:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	4937      	ldr	r1, [pc, #220]	; (1f3c <prvInitialiseNewTask+0x104>)
    1e5e:	468c      	mov	ip, r1
    1e60:	4463      	add	r3, ip
    1e62:	009b      	lsls	r3, r3, #2
    1e64:	18d3      	adds	r3, r2, r3
    1e66:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    1e68:	693b      	ldr	r3, [r7, #16]
    1e6a:	2207      	movs	r2, #7
    1e6c:	4393      	bics	r3, r2
    1e6e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    1e70:	693b      	ldr	r3, [r7, #16]
    1e72:	2207      	movs	r2, #7
    1e74:	4013      	ands	r3, r2
    1e76:	d001      	beq.n	1e7c <prvInitialiseNewTask+0x44>
    1e78:	b672      	cpsid	i
    1e7a:	e7fe      	b.n	1e7a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1e7c:	2300      	movs	r3, #0
    1e7e:	617b      	str	r3, [r7, #20]
    1e80:	e013      	b.n	1eaa <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1e82:	68ba      	ldr	r2, [r7, #8]
    1e84:	697b      	ldr	r3, [r7, #20]
    1e86:	18d3      	adds	r3, r2, r3
    1e88:	7818      	ldrb	r0, [r3, #0]
    1e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1e8c:	2134      	movs	r1, #52	; 0x34
    1e8e:	697b      	ldr	r3, [r7, #20]
    1e90:	18d3      	adds	r3, r2, r3
    1e92:	185b      	adds	r3, r3, r1
    1e94:	1c02      	adds	r2, r0, #0
    1e96:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1e98:	68ba      	ldr	r2, [r7, #8]
    1e9a:	697b      	ldr	r3, [r7, #20]
    1e9c:	18d3      	adds	r3, r2, r3
    1e9e:	781b      	ldrb	r3, [r3, #0]
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d006      	beq.n	1eb2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1ea4:	697b      	ldr	r3, [r7, #20]
    1ea6:	3301      	adds	r3, #1
    1ea8:	617b      	str	r3, [r7, #20]
    1eaa:	697b      	ldr	r3, [r7, #20]
    1eac:	2b07      	cmp	r3, #7
    1eae:	d9e8      	bls.n	1e82 <prvInitialiseNewTask+0x4a>
    1eb0:	e000      	b.n	1eb4 <prvInitialiseNewTask+0x7c>
		{
			break;
    1eb2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1eb6:	223b      	movs	r2, #59	; 0x3b
    1eb8:	2100      	movs	r1, #0
    1eba:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    1ebc:	6a3b      	ldr	r3, [r7, #32]
    1ebe:	2b04      	cmp	r3, #4
    1ec0:	d901      	bls.n	1ec6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    1ec2:	2304      	movs	r3, #4
    1ec4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    1ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1ec8:	6a3a      	ldr	r2, [r7, #32]
    1eca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    1ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1ece:	6a3a      	ldr	r2, [r7, #32]
    1ed0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    1ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1ed4:	2200      	movs	r2, #0
    1ed6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    1ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1eda:	3304      	adds	r3, #4
    1edc:	0018      	movs	r0, r3
    1ede:	4b18      	ldr	r3, [pc, #96]	; (1f40 <prvInitialiseNewTask+0x108>)
    1ee0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    1ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1ee4:	3318      	adds	r3, #24
    1ee6:	0018      	movs	r0, r3
    1ee8:	4b15      	ldr	r3, [pc, #84]	; (1f40 <prvInitialiseNewTask+0x108>)
    1eea:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    1eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1ef0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1ef2:	6a3b      	ldr	r3, [r7, #32]
    1ef4:	2205      	movs	r2, #5
    1ef6:	1ad2      	subs	r2, r2, r3
    1ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1efa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    1efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1f00:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    1f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1f04:	2200      	movs	r2, #0
    1f06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1f0a:	2250      	movs	r2, #80	; 0x50
    1f0c:	2100      	movs	r1, #0
    1f0e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1f10:	683a      	ldr	r2, [r7, #0]
    1f12:	68f9      	ldr	r1, [r7, #12]
    1f14:	693b      	ldr	r3, [r7, #16]
    1f16:	0018      	movs	r0, r3
    1f18:	4b0a      	ldr	r3, [pc, #40]	; (1f44 <prvInitialiseNewTask+0x10c>)
    1f1a:	4798      	blx	r3
    1f1c:	0002      	movs	r2, r0
    1f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1f20:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    1f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f24:	2b00      	cmp	r3, #0
    1f26:	d002      	beq.n	1f2e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1f2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	46bd      	mov	sp, r7
    1f32:	b006      	add	sp, #24
    1f34:	bd80      	pop	{r7, pc}
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	000053eb 	.word	0x000053eb
    1f3c:	3fffffff 	.word	0x3fffffff
    1f40:	00000eeb 	.word	0x00000eeb
    1f44:	00001001 	.word	0x00001001

00001f48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	b082      	sub	sp, #8
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    1f50:	4b2b      	ldr	r3, [pc, #172]	; (2000 <STACK_SIZE>)
    1f52:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    1f54:	4b2b      	ldr	r3, [pc, #172]	; (2004 <STACK_SIZE+0x4>)
    1f56:	681b      	ldr	r3, [r3, #0]
    1f58:	1c5a      	adds	r2, r3, #1
    1f5a:	4b2a      	ldr	r3, [pc, #168]	; (2004 <STACK_SIZE+0x4>)
    1f5c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    1f5e:	4b2a      	ldr	r3, [pc, #168]	; (2008 <STACK_SIZE+0x8>)
    1f60:	681b      	ldr	r3, [r3, #0]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d109      	bne.n	1f7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    1f66:	4b28      	ldr	r3, [pc, #160]	; (2008 <STACK_SIZE+0x8>)
    1f68:	687a      	ldr	r2, [r7, #4]
    1f6a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1f6c:	4b25      	ldr	r3, [pc, #148]	; (2004 <STACK_SIZE+0x4>)
    1f6e:	681b      	ldr	r3, [r3, #0]
    1f70:	2b01      	cmp	r3, #1
    1f72:	d110      	bne.n	1f96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    1f74:	4b25      	ldr	r3, [pc, #148]	; (200c <STACK_SIZE+0xc>)
    1f76:	4798      	blx	r3
    1f78:	e00d      	b.n	1f96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    1f7a:	4b25      	ldr	r3, [pc, #148]	; (2010 <STACK_SIZE+0x10>)
    1f7c:	681b      	ldr	r3, [r3, #0]
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d109      	bne.n	1f96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    1f82:	4b21      	ldr	r3, [pc, #132]	; (2008 <STACK_SIZE+0x8>)
    1f84:	681b      	ldr	r3, [r3, #0]
    1f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1f88:	687b      	ldr	r3, [r7, #4]
    1f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f8c:	429a      	cmp	r2, r3
    1f8e:	d802      	bhi.n	1f96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    1f90:	4b1d      	ldr	r3, [pc, #116]	; (2008 <STACK_SIZE+0x8>)
    1f92:	687a      	ldr	r2, [r7, #4]
    1f94:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    1f96:	4b1f      	ldr	r3, [pc, #124]	; (2014 <STACK_SIZE+0x14>)
    1f98:	681b      	ldr	r3, [r3, #0]
    1f9a:	1c5a      	adds	r2, r3, #1
    1f9c:	4b1d      	ldr	r3, [pc, #116]	; (2014 <STACK_SIZE+0x14>)
    1f9e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    1fa0:	4b1c      	ldr	r3, [pc, #112]	; (2014 <STACK_SIZE+0x14>)
    1fa2:	681a      	ldr	r2, [r3, #0]
    1fa4:	687b      	ldr	r3, [r7, #4]
    1fa6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    1fa8:	687b      	ldr	r3, [r7, #4]
    1faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1fac:	4b1a      	ldr	r3, [pc, #104]	; (2018 <STACK_SIZE+0x18>)
    1fae:	681b      	ldr	r3, [r3, #0]
    1fb0:	429a      	cmp	r2, r3
    1fb2:	d903      	bls.n	1fbc <prvAddNewTaskToReadyList+0x74>
    1fb4:	687b      	ldr	r3, [r7, #4]
    1fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1fb8:	4b17      	ldr	r3, [pc, #92]	; (2018 <STACK_SIZE+0x18>)
    1fba:	601a      	str	r2, [r3, #0]
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1fc0:	0013      	movs	r3, r2
    1fc2:	009b      	lsls	r3, r3, #2
    1fc4:	189b      	adds	r3, r3, r2
    1fc6:	009b      	lsls	r3, r3, #2
    1fc8:	4a14      	ldr	r2, [pc, #80]	; (201c <STACK_SIZE+0x1c>)
    1fca:	189a      	adds	r2, r3, r2
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	3304      	adds	r3, #4
    1fd0:	0019      	movs	r1, r3
    1fd2:	0010      	movs	r0, r2
    1fd4:	4b12      	ldr	r3, [pc, #72]	; (2020 <STACK_SIZE+0x20>)
    1fd6:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    1fd8:	4b12      	ldr	r3, [pc, #72]	; (2024 <STACK_SIZE+0x24>)
    1fda:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    1fdc:	4b0c      	ldr	r3, [pc, #48]	; (2010 <STACK_SIZE+0x10>)
    1fde:	681b      	ldr	r3, [r3, #0]
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d008      	beq.n	1ff6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1fe4:	4b08      	ldr	r3, [pc, #32]	; (2008 <STACK_SIZE+0x8>)
    1fe6:	681b      	ldr	r3, [r3, #0]
    1fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1fea:	687b      	ldr	r3, [r7, #4]
    1fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1fee:	429a      	cmp	r2, r3
    1ff0:	d201      	bcs.n	1ff6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
    1ff2:	4b0d      	ldr	r3, [pc, #52]	; (2028 <STACK_SIZE+0x28>)
    1ff4:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	46bd      	mov	sp, r7
    1ffa:	b002      	add	sp, #8
    1ffc:	bd80      	pop	{r7, pc}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	00001141 	.word	0x00001141
    2004:	200031d8 	.word	0x200031d8
    2008:	20003100 	.word	0x20003100
    200c:	000026bd 	.word	0x000026bd
    2010:	200031e4 	.word	0x200031e4
    2014:	200031f4 	.word	0x200031f4
    2018:	200031e0 	.word	0x200031e0
    201c:	20003104 	.word	0x20003104
    2020:	00000f01 	.word	0x00000f01
    2024:	00001165 	.word	0x00001165
    2028:	00001121 	.word	0x00001121

0000202c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    202c:	b590      	push	{r4, r7, lr}
    202e:	b085      	sub	sp, #20
    2030:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    2032:	4916      	ldr	r1, [pc, #88]	; (208c <vTaskStartScheduler+0x60>)
    2034:	4816      	ldr	r0, [pc, #88]	; (2090 <vTaskStartScheduler+0x64>)
    2036:	4b17      	ldr	r3, [pc, #92]	; (2094 <vTaskStartScheduler+0x68>)
    2038:	9301      	str	r3, [sp, #4]
    203a:	2300      	movs	r3, #0
    203c:	9300      	str	r3, [sp, #0]
    203e:	2300      	movs	r3, #0
    2040:	2264      	movs	r2, #100	; 0x64
    2042:	4c15      	ldr	r4, [pc, #84]	; (2098 <vTaskStartScheduler+0x6c>)
    2044:	47a0      	blx	r4
    2046:	0003      	movs	r3, r0
    2048:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    204a:	687b      	ldr	r3, [r7, #4]
    204c:	2b01      	cmp	r3, #1
    204e:	d103      	bne.n	2058 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    2050:	4b12      	ldr	r3, [pc, #72]	; (209c <vTaskStartScheduler+0x70>)
    2052:	4798      	blx	r3
    2054:	0003      	movs	r3, r0
    2056:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2058:	687b      	ldr	r3, [r7, #4]
    205a:	2b01      	cmp	r3, #1
    205c:	d10d      	bne.n	207a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    205e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    2060:	4b0f      	ldr	r3, [pc, #60]	; (20a0 <vTaskStartScheduler+0x74>)
    2062:	2201      	movs	r2, #1
    2064:	4252      	negs	r2, r2
    2066:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    2068:	4b0e      	ldr	r3, [pc, #56]	; (20a4 <vTaskStartScheduler+0x78>)
    206a:	2201      	movs	r2, #1
    206c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    206e:	4b0e      	ldr	r3, [pc, #56]	; (20a8 <vTaskStartScheduler+0x7c>)
    2070:	2200      	movs	r2, #0
    2072:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2074:	4b0d      	ldr	r3, [pc, #52]	; (20ac <vTaskStartScheduler+0x80>)
    2076:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    2078:	e004      	b.n	2084 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    207a:	687b      	ldr	r3, [r7, #4]
    207c:	3301      	adds	r3, #1
    207e:	d101      	bne.n	2084 <vTaskStartScheduler+0x58>
    2080:	b672      	cpsid	i
    2082:	e7fe      	b.n	2082 <vTaskStartScheduler+0x56>
}
    2084:	46c0      	nop			; (mov r8, r8)
    2086:	46bd      	mov	sp, r7
    2088:	b003      	add	sp, #12
    208a:	bd90      	pop	{r4, r7, pc}
    208c:	00005ed0 	.word	0x00005ed0
    2090:	00002695 	.word	0x00002695
    2094:	200031fc 	.word	0x200031fc
    2098:	00001d99 	.word	0x00001d99
    209c:	000029d1 	.word	0x000029d1
    20a0:	200031f8 	.word	0x200031f8
    20a4:	200031e4 	.word	0x200031e4
    20a8:	200031dc 	.word	0x200031dc
    20ac:	000010c9 	.word	0x000010c9

000020b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    20b0:	b580      	push	{r7, lr}
    20b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    20b4:	4b03      	ldr	r3, [pc, #12]	; (20c4 <vTaskSuspendAll+0x14>)
    20b6:	681b      	ldr	r3, [r3, #0]
    20b8:	1c5a      	adds	r2, r3, #1
    20ba:	4b02      	ldr	r3, [pc, #8]	; (20c4 <vTaskSuspendAll+0x14>)
    20bc:	601a      	str	r2, [r3, #0]
}
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	46bd      	mov	sp, r7
    20c2:	bd80      	pop	{r7, pc}
    20c4:	20003200 	.word	0x20003200

000020c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    20c8:	b580      	push	{r7, lr}
    20ca:	b084      	sub	sp, #16
    20cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    20ce:	2300      	movs	r3, #0
    20d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    20d2:	2300      	movs	r3, #0
    20d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    20d6:	4b3a      	ldr	r3, [pc, #232]	; (21c0 <xTaskResumeAll+0xf8>)
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	2b00      	cmp	r3, #0
    20dc:	d101      	bne.n	20e2 <xTaskResumeAll+0x1a>
    20de:	b672      	cpsid	i
    20e0:	e7fe      	b.n	20e0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    20e2:	4b38      	ldr	r3, [pc, #224]	; (21c4 <xTaskResumeAll+0xfc>)
    20e4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    20e6:	4b36      	ldr	r3, [pc, #216]	; (21c0 <xTaskResumeAll+0xf8>)
    20e8:	681b      	ldr	r3, [r3, #0]
    20ea:	1e5a      	subs	r2, r3, #1
    20ec:	4b34      	ldr	r3, [pc, #208]	; (21c0 <xTaskResumeAll+0xf8>)
    20ee:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    20f0:	4b33      	ldr	r3, [pc, #204]	; (21c0 <xTaskResumeAll+0xf8>)
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	2b00      	cmp	r3, #0
    20f6:	d15b      	bne.n	21b0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    20f8:	4b33      	ldr	r3, [pc, #204]	; (21c8 <xTaskResumeAll+0x100>)
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	2b00      	cmp	r3, #0
    20fe:	d057      	beq.n	21b0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2100:	e02f      	b.n	2162 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2102:	4b32      	ldr	r3, [pc, #200]	; (21cc <xTaskResumeAll+0x104>)
    2104:	68db      	ldr	r3, [r3, #12]
    2106:	68db      	ldr	r3, [r3, #12]
    2108:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    210a:	68fb      	ldr	r3, [r7, #12]
    210c:	3318      	adds	r3, #24
    210e:	0018      	movs	r0, r3
    2110:	4b2f      	ldr	r3, [pc, #188]	; (21d0 <xTaskResumeAll+0x108>)
    2112:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2114:	68fb      	ldr	r3, [r7, #12]
    2116:	3304      	adds	r3, #4
    2118:	0018      	movs	r0, r3
    211a:	4b2d      	ldr	r3, [pc, #180]	; (21d0 <xTaskResumeAll+0x108>)
    211c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    211e:	68fb      	ldr	r3, [r7, #12]
    2120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2122:	4b2c      	ldr	r3, [pc, #176]	; (21d4 <xTaskResumeAll+0x10c>)
    2124:	681b      	ldr	r3, [r3, #0]
    2126:	429a      	cmp	r2, r3
    2128:	d903      	bls.n	2132 <xTaskResumeAll+0x6a>
    212a:	68fb      	ldr	r3, [r7, #12]
    212c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    212e:	4b29      	ldr	r3, [pc, #164]	; (21d4 <xTaskResumeAll+0x10c>)
    2130:	601a      	str	r2, [r3, #0]
    2132:	68fb      	ldr	r3, [r7, #12]
    2134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2136:	0013      	movs	r3, r2
    2138:	009b      	lsls	r3, r3, #2
    213a:	189b      	adds	r3, r3, r2
    213c:	009b      	lsls	r3, r3, #2
    213e:	4a26      	ldr	r2, [pc, #152]	; (21d8 <xTaskResumeAll+0x110>)
    2140:	189a      	adds	r2, r3, r2
    2142:	68fb      	ldr	r3, [r7, #12]
    2144:	3304      	adds	r3, #4
    2146:	0019      	movs	r1, r3
    2148:	0010      	movs	r0, r2
    214a:	4b24      	ldr	r3, [pc, #144]	; (21dc <xTaskResumeAll+0x114>)
    214c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    214e:	68fb      	ldr	r3, [r7, #12]
    2150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2152:	4b23      	ldr	r3, [pc, #140]	; (21e0 <xTaskResumeAll+0x118>)
    2154:	681b      	ldr	r3, [r3, #0]
    2156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2158:	429a      	cmp	r2, r3
    215a:	d302      	bcc.n	2162 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    215c:	4b21      	ldr	r3, [pc, #132]	; (21e4 <xTaskResumeAll+0x11c>)
    215e:	2201      	movs	r2, #1
    2160:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2162:	4b1a      	ldr	r3, [pc, #104]	; (21cc <xTaskResumeAll+0x104>)
    2164:	681b      	ldr	r3, [r3, #0]
    2166:	2b00      	cmp	r3, #0
    2168:	d1cb      	bne.n	2102 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    216a:	68fb      	ldr	r3, [r7, #12]
    216c:	2b00      	cmp	r3, #0
    216e:	d001      	beq.n	2174 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    2170:	4b1d      	ldr	r3, [pc, #116]	; (21e8 <xTaskResumeAll+0x120>)
    2172:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    2174:	4b1d      	ldr	r3, [pc, #116]	; (21ec <xTaskResumeAll+0x124>)
    2176:	681b      	ldr	r3, [r3, #0]
    2178:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	2b00      	cmp	r3, #0
    217e:	d00f      	beq.n	21a0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    2180:	4b1b      	ldr	r3, [pc, #108]	; (21f0 <xTaskResumeAll+0x128>)
    2182:	4798      	blx	r3
    2184:	1e03      	subs	r3, r0, #0
    2186:	d002      	beq.n	218e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    2188:	4b16      	ldr	r3, [pc, #88]	; (21e4 <xTaskResumeAll+0x11c>)
    218a:	2201      	movs	r2, #1
    218c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    218e:	687b      	ldr	r3, [r7, #4]
    2190:	3b01      	subs	r3, #1
    2192:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    2194:	687b      	ldr	r3, [r7, #4]
    2196:	2b00      	cmp	r3, #0
    2198:	d1f2      	bne.n	2180 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    219a:	4b14      	ldr	r3, [pc, #80]	; (21ec <xTaskResumeAll+0x124>)
    219c:	2200      	movs	r2, #0
    219e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    21a0:	4b10      	ldr	r3, [pc, #64]	; (21e4 <xTaskResumeAll+0x11c>)
    21a2:	681b      	ldr	r3, [r3, #0]
    21a4:	2b00      	cmp	r3, #0
    21a6:	d003      	beq.n	21b0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    21a8:	2301      	movs	r3, #1
    21aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    21ac:	4b11      	ldr	r3, [pc, #68]	; (21f4 <xTaskResumeAll+0x12c>)
    21ae:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    21b0:	4b11      	ldr	r3, [pc, #68]	; (21f8 <xTaskResumeAll+0x130>)
    21b2:	4798      	blx	r3

	return xAlreadyYielded;
    21b4:	68bb      	ldr	r3, [r7, #8]
}
    21b6:	0018      	movs	r0, r3
    21b8:	46bd      	mov	sp, r7
    21ba:	b004      	add	sp, #16
    21bc:	bd80      	pop	{r7, pc}
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	20003200 	.word	0x20003200
    21c4:	00001141 	.word	0x00001141
    21c8:	200031d8 	.word	0x200031d8
    21cc:	20003198 	.word	0x20003198
    21d0:	00000fb1 	.word	0x00000fb1
    21d4:	200031e0 	.word	0x200031e0
    21d8:	20003104 	.word	0x20003104
    21dc:	00000f01 	.word	0x00000f01
    21e0:	20003100 	.word	0x20003100
    21e4:	200031ec 	.word	0x200031ec
    21e8:	000027dd 	.word	0x000027dd
    21ec:	200031e8 	.word	0x200031e8
    21f0:	00002219 	.word	0x00002219
    21f4:	00001121 	.word	0x00001121
    21f8:	00001165 	.word	0x00001165

000021fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    21fc:	b580      	push	{r7, lr}
    21fe:	b082      	sub	sp, #8
    2200:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    2202:	4b04      	ldr	r3, [pc, #16]	; (2214 <xTaskGetTickCount+0x18>)
    2204:	681b      	ldr	r3, [r3, #0]
    2206:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    2208:	687b      	ldr	r3, [r7, #4]
}
    220a:	0018      	movs	r0, r3
    220c:	46bd      	mov	sp, r7
    220e:	b002      	add	sp, #8
    2210:	bd80      	pop	{r7, pc}
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	200031dc 	.word	0x200031dc

00002218 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    2218:	b580      	push	{r7, lr}
    221a:	b086      	sub	sp, #24
    221c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    221e:	2300      	movs	r3, #0
    2220:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2222:	4b4c      	ldr	r3, [pc, #304]	; (2354 <xTaskIncrementTick+0x13c>)
    2224:	681b      	ldr	r3, [r3, #0]
    2226:	2b00      	cmp	r3, #0
    2228:	d000      	beq.n	222c <xTaskIncrementTick+0x14>
    222a:	e083      	b.n	2334 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    222c:	4b4a      	ldr	r3, [pc, #296]	; (2358 <xTaskIncrementTick+0x140>)
    222e:	681b      	ldr	r3, [r3, #0]
    2230:	3301      	adds	r3, #1
    2232:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    2234:	4b48      	ldr	r3, [pc, #288]	; (2358 <xTaskIncrementTick+0x140>)
    2236:	693a      	ldr	r2, [r7, #16]
    2238:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    223a:	693b      	ldr	r3, [r7, #16]
    223c:	2b00      	cmp	r3, #0
    223e:	d117      	bne.n	2270 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    2240:	4b46      	ldr	r3, [pc, #280]	; (235c <xTaskIncrementTick+0x144>)
    2242:	681b      	ldr	r3, [r3, #0]
    2244:	681b      	ldr	r3, [r3, #0]
    2246:	2b00      	cmp	r3, #0
    2248:	d001      	beq.n	224e <xTaskIncrementTick+0x36>
    224a:	b672      	cpsid	i
    224c:	e7fe      	b.n	224c <xTaskIncrementTick+0x34>
    224e:	4b43      	ldr	r3, [pc, #268]	; (235c <xTaskIncrementTick+0x144>)
    2250:	681b      	ldr	r3, [r3, #0]
    2252:	60fb      	str	r3, [r7, #12]
    2254:	4b42      	ldr	r3, [pc, #264]	; (2360 <xTaskIncrementTick+0x148>)
    2256:	681a      	ldr	r2, [r3, #0]
    2258:	4b40      	ldr	r3, [pc, #256]	; (235c <xTaskIncrementTick+0x144>)
    225a:	601a      	str	r2, [r3, #0]
    225c:	4b40      	ldr	r3, [pc, #256]	; (2360 <xTaskIncrementTick+0x148>)
    225e:	68fa      	ldr	r2, [r7, #12]
    2260:	601a      	str	r2, [r3, #0]
    2262:	4b40      	ldr	r3, [pc, #256]	; (2364 <xTaskIncrementTick+0x14c>)
    2264:	681b      	ldr	r3, [r3, #0]
    2266:	1c5a      	adds	r2, r3, #1
    2268:	4b3e      	ldr	r3, [pc, #248]	; (2364 <xTaskIncrementTick+0x14c>)
    226a:	601a      	str	r2, [r3, #0]
    226c:	4b3e      	ldr	r3, [pc, #248]	; (2368 <xTaskIncrementTick+0x150>)
    226e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    2270:	4b3e      	ldr	r3, [pc, #248]	; (236c <xTaskIncrementTick+0x154>)
    2272:	681b      	ldr	r3, [r3, #0]
    2274:	693a      	ldr	r2, [r7, #16]
    2276:	429a      	cmp	r2, r3
    2278:	d34e      	bcc.n	2318 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    227a:	4b38      	ldr	r3, [pc, #224]	; (235c <xTaskIncrementTick+0x144>)
    227c:	681b      	ldr	r3, [r3, #0]
    227e:	681b      	ldr	r3, [r3, #0]
    2280:	2b00      	cmp	r3, #0
    2282:	d101      	bne.n	2288 <xTaskIncrementTick+0x70>
    2284:	2301      	movs	r3, #1
    2286:	e000      	b.n	228a <xTaskIncrementTick+0x72>
    2288:	2300      	movs	r3, #0
    228a:	2b00      	cmp	r3, #0
    228c:	d004      	beq.n	2298 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    228e:	4b37      	ldr	r3, [pc, #220]	; (236c <xTaskIncrementTick+0x154>)
    2290:	2201      	movs	r2, #1
    2292:	4252      	negs	r2, r2
    2294:	601a      	str	r2, [r3, #0]
					break;
    2296:	e03f      	b.n	2318 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2298:	4b30      	ldr	r3, [pc, #192]	; (235c <xTaskIncrementTick+0x144>)
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	68db      	ldr	r3, [r3, #12]
    229e:	68db      	ldr	r3, [r3, #12]
    22a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    22a2:	68bb      	ldr	r3, [r7, #8]
    22a4:	685b      	ldr	r3, [r3, #4]
    22a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    22a8:	693a      	ldr	r2, [r7, #16]
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	429a      	cmp	r2, r3
    22ae:	d203      	bcs.n	22b8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    22b0:	4b2e      	ldr	r3, [pc, #184]	; (236c <xTaskIncrementTick+0x154>)
    22b2:	687a      	ldr	r2, [r7, #4]
    22b4:	601a      	str	r2, [r3, #0]
						break;
    22b6:	e02f      	b.n	2318 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    22b8:	68bb      	ldr	r3, [r7, #8]
    22ba:	3304      	adds	r3, #4
    22bc:	0018      	movs	r0, r3
    22be:	4b2c      	ldr	r3, [pc, #176]	; (2370 <xTaskIncrementTick+0x158>)
    22c0:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    22c2:	68bb      	ldr	r3, [r7, #8]
    22c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22c6:	2b00      	cmp	r3, #0
    22c8:	d004      	beq.n	22d4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    22ca:	68bb      	ldr	r3, [r7, #8]
    22cc:	3318      	adds	r3, #24
    22ce:	0018      	movs	r0, r3
    22d0:	4b27      	ldr	r3, [pc, #156]	; (2370 <xTaskIncrementTick+0x158>)
    22d2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    22d4:	68bb      	ldr	r3, [r7, #8]
    22d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    22d8:	4b26      	ldr	r3, [pc, #152]	; (2374 <xTaskIncrementTick+0x15c>)
    22da:	681b      	ldr	r3, [r3, #0]
    22dc:	429a      	cmp	r2, r3
    22de:	d903      	bls.n	22e8 <xTaskIncrementTick+0xd0>
    22e0:	68bb      	ldr	r3, [r7, #8]
    22e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    22e4:	4b23      	ldr	r3, [pc, #140]	; (2374 <xTaskIncrementTick+0x15c>)
    22e6:	601a      	str	r2, [r3, #0]
    22e8:	68bb      	ldr	r3, [r7, #8]
    22ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    22ec:	0013      	movs	r3, r2
    22ee:	009b      	lsls	r3, r3, #2
    22f0:	189b      	adds	r3, r3, r2
    22f2:	009b      	lsls	r3, r3, #2
    22f4:	4a20      	ldr	r2, [pc, #128]	; (2378 <xTaskIncrementTick+0x160>)
    22f6:	189a      	adds	r2, r3, r2
    22f8:	68bb      	ldr	r3, [r7, #8]
    22fa:	3304      	adds	r3, #4
    22fc:	0019      	movs	r1, r3
    22fe:	0010      	movs	r0, r2
    2300:	4b1e      	ldr	r3, [pc, #120]	; (237c <xTaskIncrementTick+0x164>)
    2302:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2304:	68bb      	ldr	r3, [r7, #8]
    2306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2308:	4b1d      	ldr	r3, [pc, #116]	; (2380 <xTaskIncrementTick+0x168>)
    230a:	681b      	ldr	r3, [r3, #0]
    230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    230e:	429a      	cmp	r2, r3
    2310:	d3b3      	bcc.n	227a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    2312:	2301      	movs	r3, #1
    2314:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2316:	e7b0      	b.n	227a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    2318:	4b19      	ldr	r3, [pc, #100]	; (2380 <xTaskIncrementTick+0x168>)
    231a:	681b      	ldr	r3, [r3, #0]
    231c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    231e:	4916      	ldr	r1, [pc, #88]	; (2378 <xTaskIncrementTick+0x160>)
    2320:	0013      	movs	r3, r2
    2322:	009b      	lsls	r3, r3, #2
    2324:	189b      	adds	r3, r3, r2
    2326:	009b      	lsls	r3, r3, #2
    2328:	585b      	ldr	r3, [r3, r1]
    232a:	2b01      	cmp	r3, #1
    232c:	d907      	bls.n	233e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
    232e:	2301      	movs	r3, #1
    2330:	617b      	str	r3, [r7, #20]
    2332:	e004      	b.n	233e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    2334:	4b13      	ldr	r3, [pc, #76]	; (2384 <xTaskIncrementTick+0x16c>)
    2336:	681b      	ldr	r3, [r3, #0]
    2338:	1c5a      	adds	r2, r3, #1
    233a:	4b12      	ldr	r3, [pc, #72]	; (2384 <xTaskIncrementTick+0x16c>)
    233c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    233e:	4b12      	ldr	r3, [pc, #72]	; (2388 <xTaskIncrementTick+0x170>)
    2340:	681b      	ldr	r3, [r3, #0]
    2342:	2b00      	cmp	r3, #0
    2344:	d001      	beq.n	234a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
    2346:	2301      	movs	r3, #1
    2348:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    234a:	697b      	ldr	r3, [r7, #20]
}
    234c:	0018      	movs	r0, r3
    234e:	46bd      	mov	sp, r7
    2350:	b006      	add	sp, #24
    2352:	bd80      	pop	{r7, pc}
    2354:	20003200 	.word	0x20003200
    2358:	200031dc 	.word	0x200031dc
    235c:	20003190 	.word	0x20003190
    2360:	20003194 	.word	0x20003194
    2364:	200031f0 	.word	0x200031f0
    2368:	000027dd 	.word	0x000027dd
    236c:	200031f8 	.word	0x200031f8
    2370:	00000fb1 	.word	0x00000fb1
    2374:	200031e0 	.word	0x200031e0
    2378:	20003104 	.word	0x20003104
    237c:	00000f01 	.word	0x00000f01
    2380:	20003100 	.word	0x20003100
    2384:	200031e8 	.word	0x200031e8
    2388:	200031ec 	.word	0x200031ec

0000238c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    238c:	b580      	push	{r7, lr}
    238e:	b082      	sub	sp, #8
    2390:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2392:	4b2a      	ldr	r3, [pc, #168]	; (243c <vTaskSwitchContext+0xb0>)
    2394:	681b      	ldr	r3, [r3, #0]
    2396:	2b00      	cmp	r3, #0
    2398:	d003      	beq.n	23a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    239a:	4b29      	ldr	r3, [pc, #164]	; (2440 <vTaskSwitchContext+0xb4>)
    239c:	2201      	movs	r2, #1
    239e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    23a0:	e048      	b.n	2434 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
    23a2:	4b27      	ldr	r3, [pc, #156]	; (2440 <vTaskSwitchContext+0xb4>)
    23a4:	2200      	movs	r2, #0
    23a6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    23a8:	4b26      	ldr	r3, [pc, #152]	; (2444 <vTaskSwitchContext+0xb8>)
    23aa:	681b      	ldr	r3, [r3, #0]
    23ac:	681a      	ldr	r2, [r3, #0]
    23ae:	4b25      	ldr	r3, [pc, #148]	; (2444 <vTaskSwitchContext+0xb8>)
    23b0:	681b      	ldr	r3, [r3, #0]
    23b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    23b4:	429a      	cmp	r2, r3
    23b6:	d808      	bhi.n	23ca <vTaskSwitchContext+0x3e>
    23b8:	4b22      	ldr	r3, [pc, #136]	; (2444 <vTaskSwitchContext+0xb8>)
    23ba:	681a      	ldr	r2, [r3, #0]
    23bc:	4b21      	ldr	r3, [pc, #132]	; (2444 <vTaskSwitchContext+0xb8>)
    23be:	681b      	ldr	r3, [r3, #0]
    23c0:	3334      	adds	r3, #52	; 0x34
    23c2:	0019      	movs	r1, r3
    23c4:	0010      	movs	r0, r2
    23c6:	4b20      	ldr	r3, [pc, #128]	; (2448 <vTaskSwitchContext+0xbc>)
    23c8:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    23ca:	4b20      	ldr	r3, [pc, #128]	; (244c <vTaskSwitchContext+0xc0>)
    23cc:	681b      	ldr	r3, [r3, #0]
    23ce:	607b      	str	r3, [r7, #4]
    23d0:	e007      	b.n	23e2 <vTaskSwitchContext+0x56>
    23d2:	687b      	ldr	r3, [r7, #4]
    23d4:	2b00      	cmp	r3, #0
    23d6:	d101      	bne.n	23dc <vTaskSwitchContext+0x50>
    23d8:	b672      	cpsid	i
    23da:	e7fe      	b.n	23da <vTaskSwitchContext+0x4e>
    23dc:	687b      	ldr	r3, [r7, #4]
    23de:	3b01      	subs	r3, #1
    23e0:	607b      	str	r3, [r7, #4]
    23e2:	491b      	ldr	r1, [pc, #108]	; (2450 <vTaskSwitchContext+0xc4>)
    23e4:	687a      	ldr	r2, [r7, #4]
    23e6:	0013      	movs	r3, r2
    23e8:	009b      	lsls	r3, r3, #2
    23ea:	189b      	adds	r3, r3, r2
    23ec:	009b      	lsls	r3, r3, #2
    23ee:	585b      	ldr	r3, [r3, r1]
    23f0:	2b00      	cmp	r3, #0
    23f2:	d0ee      	beq.n	23d2 <vTaskSwitchContext+0x46>
    23f4:	687a      	ldr	r2, [r7, #4]
    23f6:	0013      	movs	r3, r2
    23f8:	009b      	lsls	r3, r3, #2
    23fa:	189b      	adds	r3, r3, r2
    23fc:	009b      	lsls	r3, r3, #2
    23fe:	4a14      	ldr	r2, [pc, #80]	; (2450 <vTaskSwitchContext+0xc4>)
    2400:	189b      	adds	r3, r3, r2
    2402:	603b      	str	r3, [r7, #0]
    2404:	683b      	ldr	r3, [r7, #0]
    2406:	685b      	ldr	r3, [r3, #4]
    2408:	685a      	ldr	r2, [r3, #4]
    240a:	683b      	ldr	r3, [r7, #0]
    240c:	605a      	str	r2, [r3, #4]
    240e:	683b      	ldr	r3, [r7, #0]
    2410:	685a      	ldr	r2, [r3, #4]
    2412:	683b      	ldr	r3, [r7, #0]
    2414:	3308      	adds	r3, #8
    2416:	429a      	cmp	r2, r3
    2418:	d104      	bne.n	2424 <vTaskSwitchContext+0x98>
    241a:	683b      	ldr	r3, [r7, #0]
    241c:	685b      	ldr	r3, [r3, #4]
    241e:	685a      	ldr	r2, [r3, #4]
    2420:	683b      	ldr	r3, [r7, #0]
    2422:	605a      	str	r2, [r3, #4]
    2424:	683b      	ldr	r3, [r7, #0]
    2426:	685b      	ldr	r3, [r3, #4]
    2428:	68da      	ldr	r2, [r3, #12]
    242a:	4b06      	ldr	r3, [pc, #24]	; (2444 <vTaskSwitchContext+0xb8>)
    242c:	601a      	str	r2, [r3, #0]
    242e:	4b07      	ldr	r3, [pc, #28]	; (244c <vTaskSwitchContext+0xc0>)
    2430:	687a      	ldr	r2, [r7, #4]
    2432:	601a      	str	r2, [r3, #0]
}
    2434:	46c0      	nop			; (mov r8, r8)
    2436:	46bd      	mov	sp, r7
    2438:	b002      	add	sp, #8
    243a:	bd80      	pop	{r7, pc}
    243c:	20003200 	.word	0x20003200
    2440:	200031ec 	.word	0x200031ec
    2444:	20003100 	.word	0x20003100
    2448:	000051f9 	.word	0x000051f9
    244c:	200031e0 	.word	0x200031e0
    2450:	20003104 	.word	0x20003104

00002454 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    2454:	b580      	push	{r7, lr}
    2456:	b082      	sub	sp, #8
    2458:	af00      	add	r7, sp, #0
    245a:	6078      	str	r0, [r7, #4]
    245c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	2b00      	cmp	r3, #0
    2462:	d101      	bne.n	2468 <vTaskPlaceOnEventList+0x14>
    2464:	b672      	cpsid	i
    2466:	e7fe      	b.n	2466 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2468:	4b08      	ldr	r3, [pc, #32]	; (248c <vTaskPlaceOnEventList+0x38>)
    246a:	681b      	ldr	r3, [r3, #0]
    246c:	3318      	adds	r3, #24
    246e:	001a      	movs	r2, r3
    2470:	687b      	ldr	r3, [r7, #4]
    2472:	0011      	movs	r1, r2
    2474:	0018      	movs	r0, r3
    2476:	4b06      	ldr	r3, [pc, #24]	; (2490 <vTaskPlaceOnEventList+0x3c>)
    2478:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    247a:	683b      	ldr	r3, [r7, #0]
    247c:	2101      	movs	r1, #1
    247e:	0018      	movs	r0, r3
    2480:	4b04      	ldr	r3, [pc, #16]	; (2494 <vTaskPlaceOnEventList+0x40>)
    2482:	4798      	blx	r3
}
    2484:	46c0      	nop			; (mov r8, r8)
    2486:	46bd      	mov	sp, r7
    2488:	b002      	add	sp, #8
    248a:	bd80      	pop	{r7, pc}
    248c:	20003100 	.word	0x20003100
    2490:	00000f45 	.word	0x00000f45
    2494:	0000291d 	.word	0x0000291d

00002498 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    2498:	b580      	push	{r7, lr}
    249a:	b084      	sub	sp, #16
    249c:	af00      	add	r7, sp, #0
    249e:	60f8      	str	r0, [r7, #12]
    24a0:	60b9      	str	r1, [r7, #8]
    24a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    24a4:	68fb      	ldr	r3, [r7, #12]
    24a6:	2b00      	cmp	r3, #0
    24a8:	d101      	bne.n	24ae <vTaskPlaceOnEventListRestricted+0x16>
    24aa:	b672      	cpsid	i
    24ac:	e7fe      	b.n	24ac <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    24ae:	4b0c      	ldr	r3, [pc, #48]	; (24e0 <vTaskPlaceOnEventListRestricted+0x48>)
    24b0:	681b      	ldr	r3, [r3, #0]
    24b2:	3318      	adds	r3, #24
    24b4:	001a      	movs	r2, r3
    24b6:	68fb      	ldr	r3, [r7, #12]
    24b8:	0011      	movs	r1, r2
    24ba:	0018      	movs	r0, r3
    24bc:	4b09      	ldr	r3, [pc, #36]	; (24e4 <vTaskPlaceOnEventListRestricted+0x4c>)
    24be:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	2b00      	cmp	r3, #0
    24c4:	d002      	beq.n	24cc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    24c6:	2301      	movs	r3, #1
    24c8:	425b      	negs	r3, r3
    24ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    24cc:	687a      	ldr	r2, [r7, #4]
    24ce:	68bb      	ldr	r3, [r7, #8]
    24d0:	0011      	movs	r1, r2
    24d2:	0018      	movs	r0, r3
    24d4:	4b04      	ldr	r3, [pc, #16]	; (24e8 <vTaskPlaceOnEventListRestricted+0x50>)
    24d6:	4798      	blx	r3
	}
    24d8:	46c0      	nop			; (mov r8, r8)
    24da:	46bd      	mov	sp, r7
    24dc:	b004      	add	sp, #16
    24de:	bd80      	pop	{r7, pc}
    24e0:	20003100 	.word	0x20003100
    24e4:	00000f01 	.word	0x00000f01
    24e8:	0000291d 	.word	0x0000291d

000024ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    24ec:	b580      	push	{r7, lr}
    24ee:	b084      	sub	sp, #16
    24f0:	af00      	add	r7, sp, #0
    24f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    24f4:	687b      	ldr	r3, [r7, #4]
    24f6:	68db      	ldr	r3, [r3, #12]
    24f8:	68db      	ldr	r3, [r3, #12]
    24fa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    24fc:	68bb      	ldr	r3, [r7, #8]
    24fe:	2b00      	cmp	r3, #0
    2500:	d101      	bne.n	2506 <xTaskRemoveFromEventList+0x1a>
    2502:	b672      	cpsid	i
    2504:	e7fe      	b.n	2504 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2506:	68bb      	ldr	r3, [r7, #8]
    2508:	3318      	adds	r3, #24
    250a:	0018      	movs	r0, r3
    250c:	4b1f      	ldr	r3, [pc, #124]	; (258c <xTaskRemoveFromEventList+0xa0>)
    250e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2510:	4b1f      	ldr	r3, [pc, #124]	; (2590 <xTaskRemoveFromEventList+0xa4>)
    2512:	681b      	ldr	r3, [r3, #0]
    2514:	2b00      	cmp	r3, #0
    2516:	d11d      	bne.n	2554 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    2518:	68bb      	ldr	r3, [r7, #8]
    251a:	3304      	adds	r3, #4
    251c:	0018      	movs	r0, r3
    251e:	4b1b      	ldr	r3, [pc, #108]	; (258c <xTaskRemoveFromEventList+0xa0>)
    2520:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    2522:	68bb      	ldr	r3, [r7, #8]
    2524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2526:	4b1b      	ldr	r3, [pc, #108]	; (2594 <xTaskRemoveFromEventList+0xa8>)
    2528:	681b      	ldr	r3, [r3, #0]
    252a:	429a      	cmp	r2, r3
    252c:	d903      	bls.n	2536 <xTaskRemoveFromEventList+0x4a>
    252e:	68bb      	ldr	r3, [r7, #8]
    2530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2532:	4b18      	ldr	r3, [pc, #96]	; (2594 <xTaskRemoveFromEventList+0xa8>)
    2534:	601a      	str	r2, [r3, #0]
    2536:	68bb      	ldr	r3, [r7, #8]
    2538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    253a:	0013      	movs	r3, r2
    253c:	009b      	lsls	r3, r3, #2
    253e:	189b      	adds	r3, r3, r2
    2540:	009b      	lsls	r3, r3, #2
    2542:	4a15      	ldr	r2, [pc, #84]	; (2598 <xTaskRemoveFromEventList+0xac>)
    2544:	189a      	adds	r2, r3, r2
    2546:	68bb      	ldr	r3, [r7, #8]
    2548:	3304      	adds	r3, #4
    254a:	0019      	movs	r1, r3
    254c:	0010      	movs	r0, r2
    254e:	4b13      	ldr	r3, [pc, #76]	; (259c <xTaskRemoveFromEventList+0xb0>)
    2550:	4798      	blx	r3
    2552:	e007      	b.n	2564 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2554:	68bb      	ldr	r3, [r7, #8]
    2556:	3318      	adds	r3, #24
    2558:	001a      	movs	r2, r3
    255a:	4b11      	ldr	r3, [pc, #68]	; (25a0 <xTaskRemoveFromEventList+0xb4>)
    255c:	0011      	movs	r1, r2
    255e:	0018      	movs	r0, r3
    2560:	4b0e      	ldr	r3, [pc, #56]	; (259c <xTaskRemoveFromEventList+0xb0>)
    2562:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2564:	68bb      	ldr	r3, [r7, #8]
    2566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2568:	4b0e      	ldr	r3, [pc, #56]	; (25a4 <xTaskRemoveFromEventList+0xb8>)
    256a:	681b      	ldr	r3, [r3, #0]
    256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    256e:	429a      	cmp	r2, r3
    2570:	d905      	bls.n	257e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    2572:	2301      	movs	r3, #1
    2574:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    2576:	4b0c      	ldr	r3, [pc, #48]	; (25a8 <xTaskRemoveFromEventList+0xbc>)
    2578:	2201      	movs	r2, #1
    257a:	601a      	str	r2, [r3, #0]
    257c:	e001      	b.n	2582 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    257e:	2300      	movs	r3, #0
    2580:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    2582:	68fb      	ldr	r3, [r7, #12]
}
    2584:	0018      	movs	r0, r3
    2586:	46bd      	mov	sp, r7
    2588:	b004      	add	sp, #16
    258a:	bd80      	pop	{r7, pc}
    258c:	00000fb1 	.word	0x00000fb1
    2590:	20003200 	.word	0x20003200
    2594:	200031e0 	.word	0x200031e0
    2598:	20003104 	.word	0x20003104
    259c:	00000f01 	.word	0x00000f01
    25a0:	20003198 	.word	0x20003198
    25a4:	20003100 	.word	0x20003100
    25a8:	200031ec 	.word	0x200031ec

000025ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    25ac:	b580      	push	{r7, lr}
    25ae:	b082      	sub	sp, #8
    25b0:	af00      	add	r7, sp, #0
    25b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    25b4:	4b05      	ldr	r3, [pc, #20]	; (25cc <vTaskInternalSetTimeOutState+0x20>)
    25b6:	681a      	ldr	r2, [r3, #0]
    25b8:	687b      	ldr	r3, [r7, #4]
    25ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    25bc:	4b04      	ldr	r3, [pc, #16]	; (25d0 <vTaskInternalSetTimeOutState+0x24>)
    25be:	681a      	ldr	r2, [r3, #0]
    25c0:	687b      	ldr	r3, [r7, #4]
    25c2:	605a      	str	r2, [r3, #4]
}
    25c4:	46c0      	nop			; (mov r8, r8)
    25c6:	46bd      	mov	sp, r7
    25c8:	b002      	add	sp, #8
    25ca:	bd80      	pop	{r7, pc}
    25cc:	200031f0 	.word	0x200031f0
    25d0:	200031dc 	.word	0x200031dc

000025d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    25d4:	b580      	push	{r7, lr}
    25d6:	b086      	sub	sp, #24
    25d8:	af00      	add	r7, sp, #0
    25da:	6078      	str	r0, [r7, #4]
    25dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    25de:	687b      	ldr	r3, [r7, #4]
    25e0:	2b00      	cmp	r3, #0
    25e2:	d101      	bne.n	25e8 <xTaskCheckForTimeOut+0x14>
    25e4:	b672      	cpsid	i
    25e6:	e7fe      	b.n	25e6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    25e8:	683b      	ldr	r3, [r7, #0]
    25ea:	2b00      	cmp	r3, #0
    25ec:	d101      	bne.n	25f2 <xTaskCheckForTimeOut+0x1e>
    25ee:	b672      	cpsid	i
    25f0:	e7fe      	b.n	25f0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    25f2:	4b1e      	ldr	r3, [pc, #120]	; (266c <xTaskCheckForTimeOut+0x98>)
    25f4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    25f6:	4b1e      	ldr	r3, [pc, #120]	; (2670 <xTaskCheckForTimeOut+0x9c>)
    25f8:	681b      	ldr	r3, [r3, #0]
    25fa:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	685b      	ldr	r3, [r3, #4]
    2600:	693a      	ldr	r2, [r7, #16]
    2602:	1ad3      	subs	r3, r2, r3
    2604:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    2606:	683b      	ldr	r3, [r7, #0]
    2608:	681b      	ldr	r3, [r3, #0]
    260a:	3301      	adds	r3, #1
    260c:	d102      	bne.n	2614 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    260e:	2300      	movs	r3, #0
    2610:	617b      	str	r3, [r7, #20]
    2612:	e024      	b.n	265e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2614:	687b      	ldr	r3, [r7, #4]
    2616:	681a      	ldr	r2, [r3, #0]
    2618:	4b16      	ldr	r3, [pc, #88]	; (2674 <xTaskCheckForTimeOut+0xa0>)
    261a:	681b      	ldr	r3, [r3, #0]
    261c:	429a      	cmp	r2, r3
    261e:	d007      	beq.n	2630 <xTaskCheckForTimeOut+0x5c>
    2620:	687b      	ldr	r3, [r7, #4]
    2622:	685a      	ldr	r2, [r3, #4]
    2624:	693b      	ldr	r3, [r7, #16]
    2626:	429a      	cmp	r2, r3
    2628:	d802      	bhi.n	2630 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    262a:	2301      	movs	r3, #1
    262c:	617b      	str	r3, [r7, #20]
    262e:	e016      	b.n	265e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2630:	683b      	ldr	r3, [r7, #0]
    2632:	681a      	ldr	r2, [r3, #0]
    2634:	68fb      	ldr	r3, [r7, #12]
    2636:	429a      	cmp	r2, r3
    2638:	d90c      	bls.n	2654 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    263a:	683b      	ldr	r3, [r7, #0]
    263c:	681a      	ldr	r2, [r3, #0]
    263e:	68fb      	ldr	r3, [r7, #12]
    2640:	1ad2      	subs	r2, r2, r3
    2642:	683b      	ldr	r3, [r7, #0]
    2644:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    2646:	687b      	ldr	r3, [r7, #4]
    2648:	0018      	movs	r0, r3
    264a:	4b0b      	ldr	r3, [pc, #44]	; (2678 <xTaskCheckForTimeOut+0xa4>)
    264c:	4798      	blx	r3
			xReturn = pdFALSE;
    264e:	2300      	movs	r3, #0
    2650:	617b      	str	r3, [r7, #20]
    2652:	e004      	b.n	265e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    2654:	683b      	ldr	r3, [r7, #0]
    2656:	2200      	movs	r2, #0
    2658:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    265a:	2301      	movs	r3, #1
    265c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    265e:	4b07      	ldr	r3, [pc, #28]	; (267c <xTaskCheckForTimeOut+0xa8>)
    2660:	4798      	blx	r3

	return xReturn;
    2662:	697b      	ldr	r3, [r7, #20]
}
    2664:	0018      	movs	r0, r3
    2666:	46bd      	mov	sp, r7
    2668:	b006      	add	sp, #24
    266a:	bd80      	pop	{r7, pc}
    266c:	00001141 	.word	0x00001141
    2670:	200031dc 	.word	0x200031dc
    2674:	200031f0 	.word	0x200031f0
    2678:	000025ad 	.word	0x000025ad
    267c:	00001165 	.word	0x00001165

00002680 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    2680:	b580      	push	{r7, lr}
    2682:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    2684:	4b02      	ldr	r3, [pc, #8]	; (2690 <vTaskMissedYield+0x10>)
    2686:	2201      	movs	r2, #1
    2688:	601a      	str	r2, [r3, #0]
}
    268a:	46c0      	nop			; (mov r8, r8)
    268c:	46bd      	mov	sp, r7
    268e:	bd80      	pop	{r7, pc}
    2690:	200031ec 	.word	0x200031ec

00002694 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2694:	b580      	push	{r7, lr}
    2696:	b082      	sub	sp, #8
    2698:	af00      	add	r7, sp, #0
    269a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    269c:	4b04      	ldr	r3, [pc, #16]	; (26b0 <prvIdleTask+0x1c>)
    269e:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    26a0:	4b04      	ldr	r3, [pc, #16]	; (26b4 <prvIdleTask+0x20>)
    26a2:	681b      	ldr	r3, [r3, #0]
    26a4:	2b01      	cmp	r3, #1
    26a6:	d9f9      	bls.n	269c <prvIdleTask+0x8>
			{
				taskYIELD();
    26a8:	4b03      	ldr	r3, [pc, #12]	; (26b8 <prvIdleTask+0x24>)
    26aa:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    26ac:	e7f6      	b.n	269c <prvIdleTask+0x8>
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	00002749 	.word	0x00002749
    26b4:	20003104 	.word	0x20003104
    26b8:	00001121 	.word	0x00001121

000026bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    26bc:	b580      	push	{r7, lr}
    26be:	b082      	sub	sp, #8
    26c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    26c2:	2300      	movs	r3, #0
    26c4:	607b      	str	r3, [r7, #4]
    26c6:	e00c      	b.n	26e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    26c8:	687a      	ldr	r2, [r7, #4]
    26ca:	0013      	movs	r3, r2
    26cc:	009b      	lsls	r3, r3, #2
    26ce:	189b      	adds	r3, r3, r2
    26d0:	009b      	lsls	r3, r3, #2
    26d2:	4a14      	ldr	r2, [pc, #80]	; (2724 <prvInitialiseTaskLists+0x68>)
    26d4:	189b      	adds	r3, r3, r2
    26d6:	0018      	movs	r0, r3
    26d8:	4b13      	ldr	r3, [pc, #76]	; (2728 <prvInitialiseTaskLists+0x6c>)
    26da:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	3301      	adds	r3, #1
    26e0:	607b      	str	r3, [r7, #4]
    26e2:	687b      	ldr	r3, [r7, #4]
    26e4:	2b04      	cmp	r3, #4
    26e6:	d9ef      	bls.n	26c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    26e8:	4b10      	ldr	r3, [pc, #64]	; (272c <prvInitialiseTaskLists+0x70>)
    26ea:	0018      	movs	r0, r3
    26ec:	4b0e      	ldr	r3, [pc, #56]	; (2728 <prvInitialiseTaskLists+0x6c>)
    26ee:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    26f0:	4b0f      	ldr	r3, [pc, #60]	; (2730 <prvInitialiseTaskLists+0x74>)
    26f2:	0018      	movs	r0, r3
    26f4:	4b0c      	ldr	r3, [pc, #48]	; (2728 <prvInitialiseTaskLists+0x6c>)
    26f6:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    26f8:	4b0e      	ldr	r3, [pc, #56]	; (2734 <prvInitialiseTaskLists+0x78>)
    26fa:	0018      	movs	r0, r3
    26fc:	4b0a      	ldr	r3, [pc, #40]	; (2728 <prvInitialiseTaskLists+0x6c>)
    26fe:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    2700:	4b0d      	ldr	r3, [pc, #52]	; (2738 <prvInitialiseTaskLists+0x7c>)
    2702:	0018      	movs	r0, r3
    2704:	4b08      	ldr	r3, [pc, #32]	; (2728 <prvInitialiseTaskLists+0x6c>)
    2706:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    2708:	4b0c      	ldr	r3, [pc, #48]	; (273c <prvInitialiseTaskLists+0x80>)
    270a:	0018      	movs	r0, r3
    270c:	4b06      	ldr	r3, [pc, #24]	; (2728 <prvInitialiseTaskLists+0x6c>)
    270e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2710:	4b0b      	ldr	r3, [pc, #44]	; (2740 <prvInitialiseTaskLists+0x84>)
    2712:	4a06      	ldr	r2, [pc, #24]	; (272c <prvInitialiseTaskLists+0x70>)
    2714:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2716:	4b0b      	ldr	r3, [pc, #44]	; (2744 <prvInitialiseTaskLists+0x88>)
    2718:	4a05      	ldr	r2, [pc, #20]	; (2730 <prvInitialiseTaskLists+0x74>)
    271a:	601a      	str	r2, [r3, #0]
}
    271c:	46c0      	nop			; (mov r8, r8)
    271e:	46bd      	mov	sp, r7
    2720:	b002      	add	sp, #8
    2722:	bd80      	pop	{r7, pc}
    2724:	20003104 	.word	0x20003104
    2728:	00000eaf 	.word	0x00000eaf
    272c:	20003168 	.word	0x20003168
    2730:	2000317c 	.word	0x2000317c
    2734:	20003198 	.word	0x20003198
    2738:	200031ac 	.word	0x200031ac
    273c:	200031c4 	.word	0x200031c4
    2740:	20003190 	.word	0x20003190
    2744:	20003194 	.word	0x20003194

00002748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2748:	b580      	push	{r7, lr}
    274a:	b082      	sub	sp, #8
    274c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    274e:	e01a      	b.n	2786 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    2750:	4b11      	ldr	r3, [pc, #68]	; (2798 <prvCheckTasksWaitingTermination+0x50>)
    2752:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2754:	4b11      	ldr	r3, [pc, #68]	; (279c <prvCheckTasksWaitingTermination+0x54>)
    2756:	68db      	ldr	r3, [r3, #12]
    2758:	68db      	ldr	r3, [r3, #12]
    275a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    275c:	687b      	ldr	r3, [r7, #4]
    275e:	3304      	adds	r3, #4
    2760:	0018      	movs	r0, r3
    2762:	4b0f      	ldr	r3, [pc, #60]	; (27a0 <prvCheckTasksWaitingTermination+0x58>)
    2764:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    2766:	4b0f      	ldr	r3, [pc, #60]	; (27a4 <prvCheckTasksWaitingTermination+0x5c>)
    2768:	681b      	ldr	r3, [r3, #0]
    276a:	1e5a      	subs	r2, r3, #1
    276c:	4b0d      	ldr	r3, [pc, #52]	; (27a4 <prvCheckTasksWaitingTermination+0x5c>)
    276e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    2770:	4b0d      	ldr	r3, [pc, #52]	; (27a8 <prvCheckTasksWaitingTermination+0x60>)
    2772:	681b      	ldr	r3, [r3, #0]
    2774:	1e5a      	subs	r2, r3, #1
    2776:	4b0c      	ldr	r3, [pc, #48]	; (27a8 <prvCheckTasksWaitingTermination+0x60>)
    2778:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    277a:	4b0c      	ldr	r3, [pc, #48]	; (27ac <prvCheckTasksWaitingTermination+0x64>)
    277c:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    277e:	687b      	ldr	r3, [r7, #4]
    2780:	0018      	movs	r0, r3
    2782:	4b0b      	ldr	r3, [pc, #44]	; (27b0 <prvCheckTasksWaitingTermination+0x68>)
    2784:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2786:	4b08      	ldr	r3, [pc, #32]	; (27a8 <prvCheckTasksWaitingTermination+0x60>)
    2788:	681b      	ldr	r3, [r3, #0]
    278a:	2b00      	cmp	r3, #0
    278c:	d1e0      	bne.n	2750 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	46bd      	mov	sp, r7
    2792:	b002      	add	sp, #8
    2794:	bd80      	pop	{r7, pc}
    2796:	46c0      	nop			; (mov r8, r8)
    2798:	00001141 	.word	0x00001141
    279c:	200031ac 	.word	0x200031ac
    27a0:	00000fb1 	.word	0x00000fb1
    27a4:	200031d8 	.word	0x200031d8
    27a8:	200031c0 	.word	0x200031c0
    27ac:	00001165 	.word	0x00001165
    27b0:	000027b5 	.word	0x000027b5

000027b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    27b4:	b580      	push	{r7, lr}
    27b6:	b082      	sub	sp, #8
    27b8:	af00      	add	r7, sp, #0
    27ba:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    27bc:	687b      	ldr	r3, [r7, #4]
    27be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    27c0:	0018      	movs	r0, r3
    27c2:	4b05      	ldr	r3, [pc, #20]	; (27d8 <prvDeleteTCB+0x24>)
    27c4:	4798      	blx	r3
			vPortFree( pxTCB );
    27c6:	687b      	ldr	r3, [r7, #4]
    27c8:	0018      	movs	r0, r3
    27ca:	4b03      	ldr	r3, [pc, #12]	; (27d8 <prvDeleteTCB+0x24>)
    27cc:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    27ce:	46c0      	nop			; (mov r8, r8)
    27d0:	46bd      	mov	sp, r7
    27d2:	b002      	add	sp, #8
    27d4:	bd80      	pop	{r7, pc}
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	00001321 	.word	0x00001321

000027dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    27dc:	b580      	push	{r7, lr}
    27de:	b082      	sub	sp, #8
    27e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    27e2:	4b0e      	ldr	r3, [pc, #56]	; (281c <prvResetNextTaskUnblockTime+0x40>)
    27e4:	681b      	ldr	r3, [r3, #0]
    27e6:	681b      	ldr	r3, [r3, #0]
    27e8:	2b00      	cmp	r3, #0
    27ea:	d101      	bne.n	27f0 <prvResetNextTaskUnblockTime+0x14>
    27ec:	2301      	movs	r3, #1
    27ee:	e000      	b.n	27f2 <prvResetNextTaskUnblockTime+0x16>
    27f0:	2300      	movs	r3, #0
    27f2:	2b00      	cmp	r3, #0
    27f4:	d004      	beq.n	2800 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    27f6:	4b0a      	ldr	r3, [pc, #40]	; (2820 <prvResetNextTaskUnblockTime+0x44>)
    27f8:	2201      	movs	r2, #1
    27fa:	4252      	negs	r2, r2
    27fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    27fe:	e008      	b.n	2812 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2800:	4b06      	ldr	r3, [pc, #24]	; (281c <prvResetNextTaskUnblockTime+0x40>)
    2802:	681b      	ldr	r3, [r3, #0]
    2804:	68db      	ldr	r3, [r3, #12]
    2806:	68db      	ldr	r3, [r3, #12]
    2808:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	685a      	ldr	r2, [r3, #4]
    280e:	4b04      	ldr	r3, [pc, #16]	; (2820 <prvResetNextTaskUnblockTime+0x44>)
    2810:	601a      	str	r2, [r3, #0]
}
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	46bd      	mov	sp, r7
    2816:	b002      	add	sp, #8
    2818:	bd80      	pop	{r7, pc}
    281a:	46c0      	nop			; (mov r8, r8)
    281c:	20003190 	.word	0x20003190
    2820:	200031f8 	.word	0x200031f8

00002824 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    2824:	b580      	push	{r7, lr}
    2826:	b082      	sub	sp, #8
    2828:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    282a:	4b0a      	ldr	r3, [pc, #40]	; (2854 <xTaskGetSchedulerState+0x30>)
    282c:	681b      	ldr	r3, [r3, #0]
    282e:	2b00      	cmp	r3, #0
    2830:	d102      	bne.n	2838 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    2832:	2301      	movs	r3, #1
    2834:	607b      	str	r3, [r7, #4]
    2836:	e008      	b.n	284a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2838:	4b07      	ldr	r3, [pc, #28]	; (2858 <xTaskGetSchedulerState+0x34>)
    283a:	681b      	ldr	r3, [r3, #0]
    283c:	2b00      	cmp	r3, #0
    283e:	d102      	bne.n	2846 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    2840:	2302      	movs	r3, #2
    2842:	607b      	str	r3, [r7, #4]
    2844:	e001      	b.n	284a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    2846:	2300      	movs	r3, #0
    2848:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    284a:	687b      	ldr	r3, [r7, #4]
	}
    284c:	0018      	movs	r0, r3
    284e:	46bd      	mov	sp, r7
    2850:	b002      	add	sp, #8
    2852:	bd80      	pop	{r7, pc}
    2854:	200031e4 	.word	0x200031e4
    2858:	20003200 	.word	0x20003200

0000285c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    285c:	b580      	push	{r7, lr}
    285e:	b084      	sub	sp, #16
    2860:	af00      	add	r7, sp, #0
    2862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    2864:	687b      	ldr	r3, [r7, #4]
    2866:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    2868:	2300      	movs	r3, #0
    286a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    286c:	687b      	ldr	r3, [r7, #4]
    286e:	2b00      	cmp	r3, #0
    2870:	d044      	beq.n	28fc <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    2872:	4b25      	ldr	r3, [pc, #148]	; (2908 <xTaskPriorityDisinherit+0xac>)
    2874:	681b      	ldr	r3, [r3, #0]
    2876:	68ba      	ldr	r2, [r7, #8]
    2878:	429a      	cmp	r2, r3
    287a:	d001      	beq.n	2880 <xTaskPriorityDisinherit+0x24>
    287c:	b672      	cpsid	i
    287e:	e7fe      	b.n	287e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    2880:	68bb      	ldr	r3, [r7, #8]
    2882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2884:	2b00      	cmp	r3, #0
    2886:	d101      	bne.n	288c <xTaskPriorityDisinherit+0x30>
    2888:	b672      	cpsid	i
    288a:	e7fe      	b.n	288a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    288c:	68bb      	ldr	r3, [r7, #8]
    288e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2890:	1e5a      	subs	r2, r3, #1
    2892:	68bb      	ldr	r3, [r7, #8]
    2894:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2896:	68bb      	ldr	r3, [r7, #8]
    2898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    289a:	68bb      	ldr	r3, [r7, #8]
    289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    289e:	429a      	cmp	r2, r3
    28a0:	d02c      	beq.n	28fc <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    28a2:	68bb      	ldr	r3, [r7, #8]
    28a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    28a6:	2b00      	cmp	r3, #0
    28a8:	d128      	bne.n	28fc <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    28aa:	68bb      	ldr	r3, [r7, #8]
    28ac:	3304      	adds	r3, #4
    28ae:	0018      	movs	r0, r3
    28b0:	4b16      	ldr	r3, [pc, #88]	; (290c <xTaskPriorityDisinherit+0xb0>)
    28b2:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    28b4:	68bb      	ldr	r3, [r7, #8]
    28b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    28b8:	68bb      	ldr	r3, [r7, #8]
    28ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    28bc:	68bb      	ldr	r3, [r7, #8]
    28be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28c0:	2205      	movs	r2, #5
    28c2:	1ad2      	subs	r2, r2, r3
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    28c8:	68bb      	ldr	r3, [r7, #8]
    28ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28cc:	4b10      	ldr	r3, [pc, #64]	; (2910 <xTaskPriorityDisinherit+0xb4>)
    28ce:	681b      	ldr	r3, [r3, #0]
    28d0:	429a      	cmp	r2, r3
    28d2:	d903      	bls.n	28dc <xTaskPriorityDisinherit+0x80>
    28d4:	68bb      	ldr	r3, [r7, #8]
    28d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28d8:	4b0d      	ldr	r3, [pc, #52]	; (2910 <xTaskPriorityDisinherit+0xb4>)
    28da:	601a      	str	r2, [r3, #0]
    28dc:	68bb      	ldr	r3, [r7, #8]
    28de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e0:	0013      	movs	r3, r2
    28e2:	009b      	lsls	r3, r3, #2
    28e4:	189b      	adds	r3, r3, r2
    28e6:	009b      	lsls	r3, r3, #2
    28e8:	4a0a      	ldr	r2, [pc, #40]	; (2914 <xTaskPriorityDisinherit+0xb8>)
    28ea:	189a      	adds	r2, r3, r2
    28ec:	68bb      	ldr	r3, [r7, #8]
    28ee:	3304      	adds	r3, #4
    28f0:	0019      	movs	r1, r3
    28f2:	0010      	movs	r0, r2
    28f4:	4b08      	ldr	r3, [pc, #32]	; (2918 <xTaskPriorityDisinherit+0xbc>)
    28f6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    28f8:	2301      	movs	r3, #1
    28fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    28fc:	68fb      	ldr	r3, [r7, #12]
	}
    28fe:	0018      	movs	r0, r3
    2900:	46bd      	mov	sp, r7
    2902:	b004      	add	sp, #16
    2904:	bd80      	pop	{r7, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	20003100 	.word	0x20003100
    290c:	00000fb1 	.word	0x00000fb1
    2910:	200031e0 	.word	0x200031e0
    2914:	20003104 	.word	0x20003104
    2918:	00000f01 	.word	0x00000f01

0000291c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    291c:	b580      	push	{r7, lr}
    291e:	b084      	sub	sp, #16
    2920:	af00      	add	r7, sp, #0
    2922:	6078      	str	r0, [r7, #4]
    2924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2926:	4b21      	ldr	r3, [pc, #132]	; (29ac <prvAddCurrentTaskToDelayedList+0x90>)
    2928:	681b      	ldr	r3, [r3, #0]
    292a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    292c:	4b20      	ldr	r3, [pc, #128]	; (29b0 <prvAddCurrentTaskToDelayedList+0x94>)
    292e:	681b      	ldr	r3, [r3, #0]
    2930:	3304      	adds	r3, #4
    2932:	0018      	movs	r0, r3
    2934:	4b1f      	ldr	r3, [pc, #124]	; (29b4 <prvAddCurrentTaskToDelayedList+0x98>)
    2936:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2938:	687b      	ldr	r3, [r7, #4]
    293a:	3301      	adds	r3, #1
    293c:	d10b      	bne.n	2956 <prvAddCurrentTaskToDelayedList+0x3a>
    293e:	683b      	ldr	r3, [r7, #0]
    2940:	2b00      	cmp	r3, #0
    2942:	d008      	beq.n	2956 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2944:	4b1a      	ldr	r3, [pc, #104]	; (29b0 <prvAddCurrentTaskToDelayedList+0x94>)
    2946:	681b      	ldr	r3, [r3, #0]
    2948:	1d1a      	adds	r2, r3, #4
    294a:	4b1b      	ldr	r3, [pc, #108]	; (29b8 <prvAddCurrentTaskToDelayedList+0x9c>)
    294c:	0011      	movs	r1, r2
    294e:	0018      	movs	r0, r3
    2950:	4b1a      	ldr	r3, [pc, #104]	; (29bc <prvAddCurrentTaskToDelayedList+0xa0>)
    2952:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2954:	e026      	b.n	29a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    2956:	68fa      	ldr	r2, [r7, #12]
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	18d3      	adds	r3, r2, r3
    295c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    295e:	4b14      	ldr	r3, [pc, #80]	; (29b0 <prvAddCurrentTaskToDelayedList+0x94>)
    2960:	681b      	ldr	r3, [r3, #0]
    2962:	68ba      	ldr	r2, [r7, #8]
    2964:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    2966:	68ba      	ldr	r2, [r7, #8]
    2968:	68fb      	ldr	r3, [r7, #12]
    296a:	429a      	cmp	r2, r3
    296c:	d209      	bcs.n	2982 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    296e:	4b14      	ldr	r3, [pc, #80]	; (29c0 <prvAddCurrentTaskToDelayedList+0xa4>)
    2970:	681a      	ldr	r2, [r3, #0]
    2972:	4b0f      	ldr	r3, [pc, #60]	; (29b0 <prvAddCurrentTaskToDelayedList+0x94>)
    2974:	681b      	ldr	r3, [r3, #0]
    2976:	3304      	adds	r3, #4
    2978:	0019      	movs	r1, r3
    297a:	0010      	movs	r0, r2
    297c:	4b11      	ldr	r3, [pc, #68]	; (29c4 <prvAddCurrentTaskToDelayedList+0xa8>)
    297e:	4798      	blx	r3
}
    2980:	e010      	b.n	29a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2982:	4b11      	ldr	r3, [pc, #68]	; (29c8 <prvAddCurrentTaskToDelayedList+0xac>)
    2984:	681a      	ldr	r2, [r3, #0]
    2986:	4b0a      	ldr	r3, [pc, #40]	; (29b0 <prvAddCurrentTaskToDelayedList+0x94>)
    2988:	681b      	ldr	r3, [r3, #0]
    298a:	3304      	adds	r3, #4
    298c:	0019      	movs	r1, r3
    298e:	0010      	movs	r0, r2
    2990:	4b0c      	ldr	r3, [pc, #48]	; (29c4 <prvAddCurrentTaskToDelayedList+0xa8>)
    2992:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    2994:	4b0d      	ldr	r3, [pc, #52]	; (29cc <prvAddCurrentTaskToDelayedList+0xb0>)
    2996:	681b      	ldr	r3, [r3, #0]
    2998:	68ba      	ldr	r2, [r7, #8]
    299a:	429a      	cmp	r2, r3
    299c:	d202      	bcs.n	29a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    299e:	4b0b      	ldr	r3, [pc, #44]	; (29cc <prvAddCurrentTaskToDelayedList+0xb0>)
    29a0:	68ba      	ldr	r2, [r7, #8]
    29a2:	601a      	str	r2, [r3, #0]
}
    29a4:	46c0      	nop			; (mov r8, r8)
    29a6:	46bd      	mov	sp, r7
    29a8:	b004      	add	sp, #16
    29aa:	bd80      	pop	{r7, pc}
    29ac:	200031dc 	.word	0x200031dc
    29b0:	20003100 	.word	0x20003100
    29b4:	00000fb1 	.word	0x00000fb1
    29b8:	200031c4 	.word	0x200031c4
    29bc:	00000f01 	.word	0x00000f01
    29c0:	20003194 	.word	0x20003194
    29c4:	00000f45 	.word	0x00000f45
    29c8:	20003190 	.word	0x20003190
    29cc:	200031f8 	.word	0x200031f8

000029d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    29d0:	b590      	push	{r4, r7, lr}
    29d2:	b085      	sub	sp, #20
    29d4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    29d6:	2300      	movs	r3, #0
    29d8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    29da:	4b0e      	ldr	r3, [pc, #56]	; (2a14 <xTimerCreateTimerTask+0x44>)
    29dc:	4798      	blx	r3

	if( xTimerQueue != NULL )
    29de:	4b0e      	ldr	r3, [pc, #56]	; (2a18 <xTimerCreateTimerTask+0x48>)
    29e0:	681b      	ldr	r3, [r3, #0]
    29e2:	2b00      	cmp	r3, #0
    29e4:	d00b      	beq.n	29fe <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    29e6:	490d      	ldr	r1, [pc, #52]	; (2a1c <xTimerCreateTimerTask+0x4c>)
    29e8:	480d      	ldr	r0, [pc, #52]	; (2a20 <xTimerCreateTimerTask+0x50>)
    29ea:	4b0e      	ldr	r3, [pc, #56]	; (2a24 <xTimerCreateTimerTask+0x54>)
    29ec:	9301      	str	r3, [sp, #4]
    29ee:	2302      	movs	r3, #2
    29f0:	9300      	str	r3, [sp, #0]
    29f2:	2300      	movs	r3, #0
    29f4:	2280      	movs	r2, #128	; 0x80
    29f6:	4c0c      	ldr	r4, [pc, #48]	; (2a28 <xTimerCreateTimerTask+0x58>)
    29f8:	47a0      	blx	r4
    29fa:	0003      	movs	r3, r0
    29fc:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	2b00      	cmp	r3, #0
    2a02:	d101      	bne.n	2a08 <xTimerCreateTimerTask+0x38>
    2a04:	b672      	cpsid	i
    2a06:	e7fe      	b.n	2a06 <xTimerCreateTimerTask+0x36>
	return xReturn;
    2a08:	687b      	ldr	r3, [r7, #4]
}
    2a0a:	0018      	movs	r0, r3
    2a0c:	46bd      	mov	sp, r7
    2a0e:	b003      	add	sp, #12
    2a10:	bd90      	pop	{r4, r7, pc}
    2a12:	46c0      	nop			; (mov r8, r8)
    2a14:	00002f19 	.word	0x00002f19
    2a18:	20003234 	.word	0x20003234
    2a1c:	00005ed8 	.word	0x00005ed8
    2a20:	00002b51 	.word	0x00002b51
    2a24:	20003238 	.word	0x20003238
    2a28:	00001d99 	.word	0x00001d99

00002a2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2a2c:	b590      	push	{r4, r7, lr}
    2a2e:	b089      	sub	sp, #36	; 0x24
    2a30:	af00      	add	r7, sp, #0
    2a32:	60f8      	str	r0, [r7, #12]
    2a34:	60b9      	str	r1, [r7, #8]
    2a36:	607a      	str	r2, [r7, #4]
    2a38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    2a3a:	2300      	movs	r3, #0
    2a3c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    2a3e:	68fb      	ldr	r3, [r7, #12]
    2a40:	2b00      	cmp	r3, #0
    2a42:	d101      	bne.n	2a48 <xTimerGenericCommand+0x1c>
    2a44:	b672      	cpsid	i
    2a46:	e7fe      	b.n	2a46 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    2a48:	4b1e      	ldr	r3, [pc, #120]	; (2ac4 <xTimerGenericCommand+0x98>)
    2a4a:	681b      	ldr	r3, [r3, #0]
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	d033      	beq.n	2ab8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2a50:	2310      	movs	r3, #16
    2a52:	18fb      	adds	r3, r7, r3
    2a54:	68ba      	ldr	r2, [r7, #8]
    2a56:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a58:	2310      	movs	r3, #16
    2a5a:	18fb      	adds	r3, r7, r3
    2a5c:	687a      	ldr	r2, [r7, #4]
    2a5e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2a60:	2310      	movs	r3, #16
    2a62:	18fb      	adds	r3, r7, r3
    2a64:	68fa      	ldr	r2, [r7, #12]
    2a66:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a68:	68bb      	ldr	r3, [r7, #8]
    2a6a:	2b05      	cmp	r3, #5
    2a6c:	dc1a      	bgt.n	2aa4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2a6e:	4b16      	ldr	r3, [pc, #88]	; (2ac8 <xTimerGenericCommand+0x9c>)
    2a70:	4798      	blx	r3
    2a72:	0003      	movs	r3, r0
    2a74:	2b02      	cmp	r3, #2
    2a76:	d10a      	bne.n	2a8e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2a78:	4b12      	ldr	r3, [pc, #72]	; (2ac4 <xTimerGenericCommand+0x98>)
    2a7a:	6818      	ldr	r0, [r3, #0]
    2a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2a7e:	2310      	movs	r3, #16
    2a80:	18f9      	adds	r1, r7, r3
    2a82:	2300      	movs	r3, #0
    2a84:	4c11      	ldr	r4, [pc, #68]	; (2acc <xTimerGenericCommand+0xa0>)
    2a86:	47a0      	blx	r4
    2a88:	0003      	movs	r3, r0
    2a8a:	61fb      	str	r3, [r7, #28]
    2a8c:	e014      	b.n	2ab8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2a8e:	4b0d      	ldr	r3, [pc, #52]	; (2ac4 <xTimerGenericCommand+0x98>)
    2a90:	6818      	ldr	r0, [r3, #0]
    2a92:	2310      	movs	r3, #16
    2a94:	18f9      	adds	r1, r7, r3
    2a96:	2300      	movs	r3, #0
    2a98:	2200      	movs	r2, #0
    2a9a:	4c0c      	ldr	r4, [pc, #48]	; (2acc <xTimerGenericCommand+0xa0>)
    2a9c:	47a0      	blx	r4
    2a9e:	0003      	movs	r3, r0
    2aa0:	61fb      	str	r3, [r7, #28]
    2aa2:	e009      	b.n	2ab8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2aa4:	4b07      	ldr	r3, [pc, #28]	; (2ac4 <xTimerGenericCommand+0x98>)
    2aa6:	6818      	ldr	r0, [r3, #0]
    2aa8:	683a      	ldr	r2, [r7, #0]
    2aaa:	2310      	movs	r3, #16
    2aac:	18f9      	adds	r1, r7, r3
    2aae:	2300      	movs	r3, #0
    2ab0:	4c07      	ldr	r4, [pc, #28]	; (2ad0 <xTimerGenericCommand+0xa4>)
    2ab2:	47a0      	blx	r4
    2ab4:	0003      	movs	r3, r0
    2ab6:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    2ab8:	69fb      	ldr	r3, [r7, #28]
}
    2aba:	0018      	movs	r0, r3
    2abc:	46bd      	mov	sp, r7
    2abe:	b009      	add	sp, #36	; 0x24
    2ac0:	bd90      	pop	{r4, r7, pc}
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	20003234 	.word	0x20003234
    2ac8:	00002825 	.word	0x00002825
    2acc:	00001551 	.word	0x00001551
    2ad0:	00001731 	.word	0x00001731

00002ad4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    2ad4:	b590      	push	{r4, r7, lr}
    2ad6:	b087      	sub	sp, #28
    2ad8:	af02      	add	r7, sp, #8
    2ada:	6078      	str	r0, [r7, #4]
    2adc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2ade:	4b18      	ldr	r3, [pc, #96]	; (2b40 <prvProcessExpiredTimer+0x6c>)
    2ae0:	681b      	ldr	r3, [r3, #0]
    2ae2:	68db      	ldr	r3, [r3, #12]
    2ae4:	68db      	ldr	r3, [r3, #12]
    2ae6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2ae8:	68fb      	ldr	r3, [r7, #12]
    2aea:	3304      	adds	r3, #4
    2aec:	0018      	movs	r0, r3
    2aee:	4b15      	ldr	r3, [pc, #84]	; (2b44 <prvProcessExpiredTimer+0x70>)
    2af0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2af2:	68fb      	ldr	r3, [r7, #12]
    2af4:	69db      	ldr	r3, [r3, #28]
    2af6:	2b01      	cmp	r3, #1
    2af8:	d119      	bne.n	2b2e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2afa:	68fb      	ldr	r3, [r7, #12]
    2afc:	699a      	ldr	r2, [r3, #24]
    2afe:	687b      	ldr	r3, [r7, #4]
    2b00:	18d1      	adds	r1, r2, r3
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	683a      	ldr	r2, [r7, #0]
    2b06:	68f8      	ldr	r0, [r7, #12]
    2b08:	4c0f      	ldr	r4, [pc, #60]	; (2b48 <prvProcessExpiredTimer+0x74>)
    2b0a:	47a0      	blx	r4
    2b0c:	1e03      	subs	r3, r0, #0
    2b0e:	d00e      	beq.n	2b2e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2b10:	687a      	ldr	r2, [r7, #4]
    2b12:	68f8      	ldr	r0, [r7, #12]
    2b14:	2300      	movs	r3, #0
    2b16:	9300      	str	r3, [sp, #0]
    2b18:	2300      	movs	r3, #0
    2b1a:	2100      	movs	r1, #0
    2b1c:	4c0b      	ldr	r4, [pc, #44]	; (2b4c <prvProcessExpiredTimer+0x78>)
    2b1e:	47a0      	blx	r4
    2b20:	0003      	movs	r3, r0
    2b22:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    2b24:	68bb      	ldr	r3, [r7, #8]
    2b26:	2b00      	cmp	r3, #0
    2b28:	d101      	bne.n	2b2e <prvProcessExpiredTimer+0x5a>
    2b2a:	b672      	cpsid	i
    2b2c:	e7fe      	b.n	2b2c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b2e:	68fb      	ldr	r3, [r7, #12]
    2b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b32:	68fa      	ldr	r2, [r7, #12]
    2b34:	0010      	movs	r0, r2
    2b36:	4798      	blx	r3
}
    2b38:	46c0      	nop			; (mov r8, r8)
    2b3a:	46bd      	mov	sp, r7
    2b3c:	b005      	add	sp, #20
    2b3e:	bd90      	pop	{r4, r7, pc}
    2b40:	2000322c 	.word	0x2000322c
    2b44:	00000fb1 	.word	0x00000fb1
    2b48:	00002cb9 	.word	0x00002cb9
    2b4c:	00002a2d 	.word	0x00002a2d

00002b50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    2b50:	b580      	push	{r7, lr}
    2b52:	b084      	sub	sp, #16
    2b54:	af00      	add	r7, sp, #0
    2b56:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
    2b58:	4b08      	ldr	r3, [pc, #32]	; (2b7c <prvTimerTask+0x2c>)
    2b5a:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    2b5c:	2308      	movs	r3, #8
    2b5e:	18fb      	adds	r3, r7, r3
    2b60:	0018      	movs	r0, r3
    2b62:	4b07      	ldr	r3, [pc, #28]	; (2b80 <prvTimerTask+0x30>)
    2b64:	4798      	blx	r3
    2b66:	0003      	movs	r3, r0
    2b68:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    2b6a:	68ba      	ldr	r2, [r7, #8]
    2b6c:	68fb      	ldr	r3, [r7, #12]
    2b6e:	0011      	movs	r1, r2
    2b70:	0018      	movs	r0, r3
    2b72:	4b04      	ldr	r3, [pc, #16]	; (2b84 <prvTimerTask+0x34>)
    2b74:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    2b76:	4b04      	ldr	r3, [pc, #16]	; (2b88 <prvTimerTask+0x38>)
    2b78:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    2b7a:	e7ef      	b.n	2b5c <prvTimerTask+0xc>
    2b7c:	000051c9 	.word	0x000051c9
    2b80:	00002c31 	.word	0x00002c31
    2b84:	00002b8d 	.word	0x00002b8d
    2b88:	00002d41 	.word	0x00002d41

00002b8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    2b8c:	b580      	push	{r7, lr}
    2b8e:	b084      	sub	sp, #16
    2b90:	af00      	add	r7, sp, #0
    2b92:	6078      	str	r0, [r7, #4]
    2b94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2b96:	4b1e      	ldr	r3, [pc, #120]	; (2c10 <prvProcessTimerOrBlockTask+0x84>)
    2b98:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2b9a:	2308      	movs	r3, #8
    2b9c:	18fb      	adds	r3, r7, r3
    2b9e:	0018      	movs	r0, r3
    2ba0:	4b1c      	ldr	r3, [pc, #112]	; (2c14 <prvProcessTimerOrBlockTask+0x88>)
    2ba2:	4798      	blx	r3
    2ba4:	0003      	movs	r3, r0
    2ba6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    2ba8:	68bb      	ldr	r3, [r7, #8]
    2baa:	2b00      	cmp	r3, #0
    2bac:	d129      	bne.n	2c02 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2bae:	683b      	ldr	r3, [r7, #0]
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d10c      	bne.n	2bce <prvProcessTimerOrBlockTask+0x42>
    2bb4:	687a      	ldr	r2, [r7, #4]
    2bb6:	68fb      	ldr	r3, [r7, #12]
    2bb8:	429a      	cmp	r2, r3
    2bba:	d808      	bhi.n	2bce <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    2bbc:	4b16      	ldr	r3, [pc, #88]	; (2c18 <prvProcessTimerOrBlockTask+0x8c>)
    2bbe:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2bc0:	68fa      	ldr	r2, [r7, #12]
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	0011      	movs	r1, r2
    2bc6:	0018      	movs	r0, r3
    2bc8:	4b14      	ldr	r3, [pc, #80]	; (2c1c <prvProcessTimerOrBlockTask+0x90>)
    2bca:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    2bcc:	e01b      	b.n	2c06 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    2bce:	683b      	ldr	r3, [r7, #0]
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d006      	beq.n	2be2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2bd4:	4b12      	ldr	r3, [pc, #72]	; (2c20 <prvProcessTimerOrBlockTask+0x94>)
    2bd6:	681b      	ldr	r3, [r3, #0]
    2bd8:	681b      	ldr	r3, [r3, #0]
    2bda:	425a      	negs	r2, r3
    2bdc:	4153      	adcs	r3, r2
    2bde:	b2db      	uxtb	r3, r3
    2be0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2be2:	4b10      	ldr	r3, [pc, #64]	; (2c24 <prvProcessTimerOrBlockTask+0x98>)
    2be4:	6818      	ldr	r0, [r3, #0]
    2be6:	687a      	ldr	r2, [r7, #4]
    2be8:	68fb      	ldr	r3, [r7, #12]
    2bea:	1ad3      	subs	r3, r2, r3
    2bec:	683a      	ldr	r2, [r7, #0]
    2bee:	0019      	movs	r1, r3
    2bf0:	4b0d      	ldr	r3, [pc, #52]	; (2c28 <prvProcessTimerOrBlockTask+0x9c>)
    2bf2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2bf4:	4b08      	ldr	r3, [pc, #32]	; (2c18 <prvProcessTimerOrBlockTask+0x8c>)
    2bf6:	4798      	blx	r3
    2bf8:	1e03      	subs	r3, r0, #0
    2bfa:	d104      	bne.n	2c06 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    2bfc:	4b0b      	ldr	r3, [pc, #44]	; (2c2c <prvProcessTimerOrBlockTask+0xa0>)
    2bfe:	4798      	blx	r3
}
    2c00:	e001      	b.n	2c06 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    2c02:	4b05      	ldr	r3, [pc, #20]	; (2c18 <prvProcessTimerOrBlockTask+0x8c>)
    2c04:	4798      	blx	r3
}
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	46bd      	mov	sp, r7
    2c0a:	b004      	add	sp, #16
    2c0c:	bd80      	pop	{r7, pc}
    2c0e:	46c0      	nop			; (mov r8, r8)
    2c10:	000020b1 	.word	0x000020b1
    2c14:	00002c71 	.word	0x00002c71
    2c18:	000020c9 	.word	0x000020c9
    2c1c:	00002ad5 	.word	0x00002ad5
    2c20:	20003230 	.word	0x20003230
    2c24:	20003234 	.word	0x20003234
    2c28:	00001c7d 	.word	0x00001c7d
    2c2c:	00001121 	.word	0x00001121

00002c30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    2c30:	b580      	push	{r7, lr}
    2c32:	b084      	sub	sp, #16
    2c34:	af00      	add	r7, sp, #0
    2c36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2c38:	4b0c      	ldr	r3, [pc, #48]	; (2c6c <prvGetNextExpireTime+0x3c>)
    2c3a:	681b      	ldr	r3, [r3, #0]
    2c3c:	681b      	ldr	r3, [r3, #0]
    2c3e:	425a      	negs	r2, r3
    2c40:	4153      	adcs	r3, r2
    2c42:	b2db      	uxtb	r3, r3
    2c44:	001a      	movs	r2, r3
    2c46:	687b      	ldr	r3, [r7, #4]
    2c48:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	681b      	ldr	r3, [r3, #0]
    2c4e:	2b00      	cmp	r3, #0
    2c50:	d105      	bne.n	2c5e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2c52:	4b06      	ldr	r3, [pc, #24]	; (2c6c <prvGetNextExpireTime+0x3c>)
    2c54:	681b      	ldr	r3, [r3, #0]
    2c56:	68db      	ldr	r3, [r3, #12]
    2c58:	681b      	ldr	r3, [r3, #0]
    2c5a:	60fb      	str	r3, [r7, #12]
    2c5c:	e001      	b.n	2c62 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    2c5e:	2300      	movs	r3, #0
    2c60:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    2c62:	68fb      	ldr	r3, [r7, #12]
}
    2c64:	0018      	movs	r0, r3
    2c66:	46bd      	mov	sp, r7
    2c68:	b004      	add	sp, #16
    2c6a:	bd80      	pop	{r7, pc}
    2c6c:	2000322c 	.word	0x2000322c

00002c70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2c70:	b580      	push	{r7, lr}
    2c72:	b084      	sub	sp, #16
    2c74:	af00      	add	r7, sp, #0
    2c76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    2c78:	4b0c      	ldr	r3, [pc, #48]	; (2cac <prvSampleTimeNow+0x3c>)
    2c7a:	4798      	blx	r3
    2c7c:	0003      	movs	r3, r0
    2c7e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    2c80:	4b0b      	ldr	r3, [pc, #44]	; (2cb0 <prvSampleTimeNow+0x40>)
    2c82:	681b      	ldr	r3, [r3, #0]
    2c84:	68fa      	ldr	r2, [r7, #12]
    2c86:	429a      	cmp	r2, r3
    2c88:	d205      	bcs.n	2c96 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    2c8a:	4b0a      	ldr	r3, [pc, #40]	; (2cb4 <prvSampleTimeNow+0x44>)
    2c8c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    2c8e:	687b      	ldr	r3, [r7, #4]
    2c90:	2201      	movs	r2, #1
    2c92:	601a      	str	r2, [r3, #0]
    2c94:	e002      	b.n	2c9c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    2c96:	687b      	ldr	r3, [r7, #4]
    2c98:	2200      	movs	r2, #0
    2c9a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    2c9c:	4b04      	ldr	r3, [pc, #16]	; (2cb0 <prvSampleTimeNow+0x40>)
    2c9e:	68fa      	ldr	r2, [r7, #12]
    2ca0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    2ca2:	68fb      	ldr	r3, [r7, #12]
}
    2ca4:	0018      	movs	r0, r3
    2ca6:	46bd      	mov	sp, r7
    2ca8:	b004      	add	sp, #16
    2caa:	bd80      	pop	{r7, pc}
    2cac:	000021fd 	.word	0x000021fd
    2cb0:	2000323c 	.word	0x2000323c
    2cb4:	00002e59 	.word	0x00002e59

00002cb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2cb8:	b580      	push	{r7, lr}
    2cba:	b086      	sub	sp, #24
    2cbc:	af00      	add	r7, sp, #0
    2cbe:	60f8      	str	r0, [r7, #12]
    2cc0:	60b9      	str	r1, [r7, #8]
    2cc2:	607a      	str	r2, [r7, #4]
    2cc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    2cc6:	2300      	movs	r3, #0
    2cc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2cca:	68fb      	ldr	r3, [r7, #12]
    2ccc:	68ba      	ldr	r2, [r7, #8]
    2cce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2cd0:	68fb      	ldr	r3, [r7, #12]
    2cd2:	68fa      	ldr	r2, [r7, #12]
    2cd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    2cd6:	68ba      	ldr	r2, [r7, #8]
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	429a      	cmp	r2, r3
    2cdc:	d812      	bhi.n	2d04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2cde:	687a      	ldr	r2, [r7, #4]
    2ce0:	683b      	ldr	r3, [r7, #0]
    2ce2:	1ad2      	subs	r2, r2, r3
    2ce4:	68fb      	ldr	r3, [r7, #12]
    2ce6:	699b      	ldr	r3, [r3, #24]
    2ce8:	429a      	cmp	r2, r3
    2cea:	d302      	bcc.n	2cf2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    2cec:	2301      	movs	r3, #1
    2cee:	617b      	str	r3, [r7, #20]
    2cf0:	e01b      	b.n	2d2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2cf2:	4b10      	ldr	r3, [pc, #64]	; (2d34 <prvInsertTimerInActiveList+0x7c>)
    2cf4:	681a      	ldr	r2, [r3, #0]
    2cf6:	68fb      	ldr	r3, [r7, #12]
    2cf8:	3304      	adds	r3, #4
    2cfa:	0019      	movs	r1, r3
    2cfc:	0010      	movs	r0, r2
    2cfe:	4b0e      	ldr	r3, [pc, #56]	; (2d38 <prvInsertTimerInActiveList+0x80>)
    2d00:	4798      	blx	r3
    2d02:	e012      	b.n	2d2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2d04:	687a      	ldr	r2, [r7, #4]
    2d06:	683b      	ldr	r3, [r7, #0]
    2d08:	429a      	cmp	r2, r3
    2d0a:	d206      	bcs.n	2d1a <prvInsertTimerInActiveList+0x62>
    2d0c:	68ba      	ldr	r2, [r7, #8]
    2d0e:	683b      	ldr	r3, [r7, #0]
    2d10:	429a      	cmp	r2, r3
    2d12:	d302      	bcc.n	2d1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    2d14:	2301      	movs	r3, #1
    2d16:	617b      	str	r3, [r7, #20]
    2d18:	e007      	b.n	2d2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2d1a:	4b08      	ldr	r3, [pc, #32]	; (2d3c <prvInsertTimerInActiveList+0x84>)
    2d1c:	681a      	ldr	r2, [r3, #0]
    2d1e:	68fb      	ldr	r3, [r7, #12]
    2d20:	3304      	adds	r3, #4
    2d22:	0019      	movs	r1, r3
    2d24:	0010      	movs	r0, r2
    2d26:	4b04      	ldr	r3, [pc, #16]	; (2d38 <prvInsertTimerInActiveList+0x80>)
    2d28:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    2d2a:	697b      	ldr	r3, [r7, #20]
}
    2d2c:	0018      	movs	r0, r3
    2d2e:	46bd      	mov	sp, r7
    2d30:	b006      	add	sp, #24
    2d32:	bd80      	pop	{r7, pc}
    2d34:	20003230 	.word	0x20003230
    2d38:	00000f45 	.word	0x00000f45
    2d3c:	2000322c 	.word	0x2000322c

00002d40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    2d40:	b590      	push	{r4, r7, lr}
    2d42:	b08b      	sub	sp, #44	; 0x2c
    2d44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2d46:	e068      	b.n	2e1a <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2d48:	2308      	movs	r3, #8
    2d4a:	18fb      	adds	r3, r7, r3
    2d4c:	681b      	ldr	r3, [r3, #0]
    2d4e:	2b00      	cmp	r3, #0
    2d50:	db63      	blt.n	2e1a <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2d52:	2308      	movs	r3, #8
    2d54:	18fb      	adds	r3, r7, r3
    2d56:	689b      	ldr	r3, [r3, #8]
    2d58:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2d5a:	69fb      	ldr	r3, [r7, #28]
    2d5c:	695b      	ldr	r3, [r3, #20]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d004      	beq.n	2d6c <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d62:	69fb      	ldr	r3, [r7, #28]
    2d64:	3304      	adds	r3, #4
    2d66:	0018      	movs	r0, r3
    2d68:	4b33      	ldr	r3, [pc, #204]	; (2e38 <prvProcessReceivedCommands+0xf8>)
    2d6a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d6c:	1d3b      	adds	r3, r7, #4
    2d6e:	0018      	movs	r0, r3
    2d70:	4b32      	ldr	r3, [pc, #200]	; (2e3c <prvProcessReceivedCommands+0xfc>)
    2d72:	4798      	blx	r3
    2d74:	0003      	movs	r3, r0
    2d76:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    2d78:	2308      	movs	r3, #8
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	681b      	ldr	r3, [r3, #0]
    2d7e:	2b09      	cmp	r3, #9
    2d80:	d84a      	bhi.n	2e18 <prvProcessReceivedCommands+0xd8>
    2d82:	009a      	lsls	r2, r3, #2
    2d84:	4b2e      	ldr	r3, [pc, #184]	; (2e40 <prvProcessReceivedCommands+0x100>)
    2d86:	18d3      	adds	r3, r2, r3
    2d88:	681b      	ldr	r3, [r3, #0]
    2d8a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2d8c:	2308      	movs	r3, #8
    2d8e:	18fb      	adds	r3, r7, r3
    2d90:	685a      	ldr	r2, [r3, #4]
    2d92:	69fb      	ldr	r3, [r7, #28]
    2d94:	699b      	ldr	r3, [r3, #24]
    2d96:	18d1      	adds	r1, r2, r3
    2d98:	2308      	movs	r3, #8
    2d9a:	18fb      	adds	r3, r7, r3
    2d9c:	685b      	ldr	r3, [r3, #4]
    2d9e:	69ba      	ldr	r2, [r7, #24]
    2da0:	69f8      	ldr	r0, [r7, #28]
    2da2:	4c28      	ldr	r4, [pc, #160]	; (2e44 <prvProcessReceivedCommands+0x104>)
    2da4:	47a0      	blx	r4
    2da6:	1e03      	subs	r3, r0, #0
    2da8:	d037      	beq.n	2e1a <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2daa:	69fb      	ldr	r3, [r7, #28]
    2dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2dae:	69fa      	ldr	r2, [r7, #28]
    2db0:	0010      	movs	r0, r2
    2db2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2db4:	69fb      	ldr	r3, [r7, #28]
    2db6:	69db      	ldr	r3, [r3, #28]
    2db8:	2b01      	cmp	r3, #1
    2dba:	d12e      	bne.n	2e1a <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2dbc:	2308      	movs	r3, #8
    2dbe:	18fb      	adds	r3, r7, r3
    2dc0:	685a      	ldr	r2, [r3, #4]
    2dc2:	69fb      	ldr	r3, [r7, #28]
    2dc4:	699b      	ldr	r3, [r3, #24]
    2dc6:	18d2      	adds	r2, r2, r3
    2dc8:	69f8      	ldr	r0, [r7, #28]
    2dca:	2300      	movs	r3, #0
    2dcc:	9300      	str	r3, [sp, #0]
    2dce:	2300      	movs	r3, #0
    2dd0:	2100      	movs	r1, #0
    2dd2:	4c1d      	ldr	r4, [pc, #116]	; (2e48 <prvProcessReceivedCommands+0x108>)
    2dd4:	47a0      	blx	r4
    2dd6:	0003      	movs	r3, r0
    2dd8:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    2dda:	697b      	ldr	r3, [r7, #20]
    2ddc:	2b00      	cmp	r3, #0
    2dde:	d11c      	bne.n	2e1a <prvProcessReceivedCommands+0xda>
    2de0:	b672      	cpsid	i
    2de2:	e7fe      	b.n	2de2 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2de4:	2308      	movs	r3, #8
    2de6:	18fb      	adds	r3, r7, r3
    2de8:	685a      	ldr	r2, [r3, #4]
    2dea:	69fb      	ldr	r3, [r7, #28]
    2dec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2dee:	69fb      	ldr	r3, [r7, #28]
    2df0:	699b      	ldr	r3, [r3, #24]
    2df2:	2b00      	cmp	r3, #0
    2df4:	d101      	bne.n	2dfa <prvProcessReceivedCommands+0xba>
    2df6:	b672      	cpsid	i
    2df8:	e7fe      	b.n	2df8 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2dfa:	69fb      	ldr	r3, [r7, #28]
    2dfc:	699a      	ldr	r2, [r3, #24]
    2dfe:	69bb      	ldr	r3, [r7, #24]
    2e00:	18d1      	adds	r1, r2, r3
    2e02:	69bb      	ldr	r3, [r7, #24]
    2e04:	69ba      	ldr	r2, [r7, #24]
    2e06:	69f8      	ldr	r0, [r7, #28]
    2e08:	4c0e      	ldr	r4, [pc, #56]	; (2e44 <prvProcessReceivedCommands+0x104>)
    2e0a:	47a0      	blx	r4
					break;
    2e0c:	e005      	b.n	2e1a <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    2e0e:	69fb      	ldr	r3, [r7, #28]
    2e10:	0018      	movs	r0, r3
    2e12:	4b0e      	ldr	r3, [pc, #56]	; (2e4c <prvProcessReceivedCommands+0x10c>)
    2e14:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    2e16:	e000      	b.n	2e1a <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    2e18:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2e1a:	4b0d      	ldr	r3, [pc, #52]	; (2e50 <prvProcessReceivedCommands+0x110>)
    2e1c:	681b      	ldr	r3, [r3, #0]
    2e1e:	2208      	movs	r2, #8
    2e20:	18b9      	adds	r1, r7, r2
    2e22:	2200      	movs	r2, #0
    2e24:	0018      	movs	r0, r3
    2e26:	4b0b      	ldr	r3, [pc, #44]	; (2e54 <prvProcessReceivedCommands+0x114>)
    2e28:	4798      	blx	r3
    2e2a:	1e03      	subs	r3, r0, #0
    2e2c:	d18c      	bne.n	2d48 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	46bd      	mov	sp, r7
    2e32:	b009      	add	sp, #36	; 0x24
    2e34:	bd90      	pop	{r4, r7, pc}
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	00000fb1 	.word	0x00000fb1
    2e3c:	00002c71 	.word	0x00002c71
    2e40:	00005ee0 	.word	0x00005ee0
    2e44:	00002cb9 	.word	0x00002cb9
    2e48:	00002a2d 	.word	0x00002a2d
    2e4c:	00001321 	.word	0x00001321
    2e50:	20003234 	.word	0x20003234
    2e54:	00001851 	.word	0x00001851

00002e58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    2e58:	b590      	push	{r4, r7, lr}
    2e5a:	b089      	sub	sp, #36	; 0x24
    2e5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2e5e:	e03e      	b.n	2ede <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2e60:	4b28      	ldr	r3, [pc, #160]	; (2f04 <prvSwitchTimerLists+0xac>)
    2e62:	681b      	ldr	r3, [r3, #0]
    2e64:	68db      	ldr	r3, [r3, #12]
    2e66:	681b      	ldr	r3, [r3, #0]
    2e68:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2e6a:	4b26      	ldr	r3, [pc, #152]	; (2f04 <prvSwitchTimerLists+0xac>)
    2e6c:	681b      	ldr	r3, [r3, #0]
    2e6e:	68db      	ldr	r3, [r3, #12]
    2e70:	68db      	ldr	r3, [r3, #12]
    2e72:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e74:	693b      	ldr	r3, [r7, #16]
    2e76:	3304      	adds	r3, #4
    2e78:	0018      	movs	r0, r3
    2e7a:	4b23      	ldr	r3, [pc, #140]	; (2f08 <prvSwitchTimerLists+0xb0>)
    2e7c:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e7e:	693b      	ldr	r3, [r7, #16]
    2e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e82:	693a      	ldr	r2, [r7, #16]
    2e84:	0010      	movs	r0, r2
    2e86:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2e88:	693b      	ldr	r3, [r7, #16]
    2e8a:	69db      	ldr	r3, [r3, #28]
    2e8c:	2b01      	cmp	r3, #1
    2e8e:	d126      	bne.n	2ede <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2e90:	693b      	ldr	r3, [r7, #16]
    2e92:	699a      	ldr	r2, [r3, #24]
    2e94:	697b      	ldr	r3, [r7, #20]
    2e96:	18d3      	adds	r3, r2, r3
    2e98:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    2e9a:	68fa      	ldr	r2, [r7, #12]
    2e9c:	697b      	ldr	r3, [r7, #20]
    2e9e:	429a      	cmp	r2, r3
    2ea0:	d90e      	bls.n	2ec0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2ea2:	693b      	ldr	r3, [r7, #16]
    2ea4:	68fa      	ldr	r2, [r7, #12]
    2ea6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2ea8:	693b      	ldr	r3, [r7, #16]
    2eaa:	693a      	ldr	r2, [r7, #16]
    2eac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2eae:	4b15      	ldr	r3, [pc, #84]	; (2f04 <prvSwitchTimerLists+0xac>)
    2eb0:	681a      	ldr	r2, [r3, #0]
    2eb2:	693b      	ldr	r3, [r7, #16]
    2eb4:	3304      	adds	r3, #4
    2eb6:	0019      	movs	r1, r3
    2eb8:	0010      	movs	r0, r2
    2eba:	4b14      	ldr	r3, [pc, #80]	; (2f0c <prvSwitchTimerLists+0xb4>)
    2ebc:	4798      	blx	r3
    2ebe:	e00e      	b.n	2ede <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ec0:	697a      	ldr	r2, [r7, #20]
    2ec2:	6938      	ldr	r0, [r7, #16]
    2ec4:	2300      	movs	r3, #0
    2ec6:	9300      	str	r3, [sp, #0]
    2ec8:	2300      	movs	r3, #0
    2eca:	2100      	movs	r1, #0
    2ecc:	4c10      	ldr	r4, [pc, #64]	; (2f10 <prvSwitchTimerLists+0xb8>)
    2ece:	47a0      	blx	r4
    2ed0:	0003      	movs	r3, r0
    2ed2:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    2ed4:	68bb      	ldr	r3, [r7, #8]
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	d101      	bne.n	2ede <prvSwitchTimerLists+0x86>
    2eda:	b672      	cpsid	i
    2edc:	e7fe      	b.n	2edc <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2ede:	4b09      	ldr	r3, [pc, #36]	; (2f04 <prvSwitchTimerLists+0xac>)
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	681b      	ldr	r3, [r3, #0]
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	d1bb      	bne.n	2e60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    2ee8:	4b06      	ldr	r3, [pc, #24]	; (2f04 <prvSwitchTimerLists+0xac>)
    2eea:	681b      	ldr	r3, [r3, #0]
    2eec:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    2eee:	4b09      	ldr	r3, [pc, #36]	; (2f14 <prvSwitchTimerLists+0xbc>)
    2ef0:	681a      	ldr	r2, [r3, #0]
    2ef2:	4b04      	ldr	r3, [pc, #16]	; (2f04 <prvSwitchTimerLists+0xac>)
    2ef4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    2ef6:	4b07      	ldr	r3, [pc, #28]	; (2f14 <prvSwitchTimerLists+0xbc>)
    2ef8:	687a      	ldr	r2, [r7, #4]
    2efa:	601a      	str	r2, [r3, #0]
}
    2efc:	46c0      	nop			; (mov r8, r8)
    2efe:	46bd      	mov	sp, r7
    2f00:	b007      	add	sp, #28
    2f02:	bd90      	pop	{r4, r7, pc}
    2f04:	2000322c 	.word	0x2000322c
    2f08:	00000fb1 	.word	0x00000fb1
    2f0c:	00000f45 	.word	0x00000f45
    2f10:	00002a2d 	.word	0x00002a2d
    2f14:	20003230 	.word	0x20003230

00002f18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    2f18:	b580      	push	{r7, lr}
    2f1a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    2f1c:	4b10      	ldr	r3, [pc, #64]	; (2f60 <prvCheckForValidListAndQueue+0x48>)
    2f1e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    2f20:	4b10      	ldr	r3, [pc, #64]	; (2f64 <prvCheckForValidListAndQueue+0x4c>)
    2f22:	681b      	ldr	r3, [r3, #0]
    2f24:	2b00      	cmp	r3, #0
    2f26:	d115      	bne.n	2f54 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    2f28:	4b0f      	ldr	r3, [pc, #60]	; (2f68 <prvCheckForValidListAndQueue+0x50>)
    2f2a:	0018      	movs	r0, r3
    2f2c:	4b0f      	ldr	r3, [pc, #60]	; (2f6c <prvCheckForValidListAndQueue+0x54>)
    2f2e:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    2f30:	4b0f      	ldr	r3, [pc, #60]	; (2f70 <prvCheckForValidListAndQueue+0x58>)
    2f32:	0018      	movs	r0, r3
    2f34:	4b0d      	ldr	r3, [pc, #52]	; (2f6c <prvCheckForValidListAndQueue+0x54>)
    2f36:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    2f38:	4b0e      	ldr	r3, [pc, #56]	; (2f74 <prvCheckForValidListAndQueue+0x5c>)
    2f3a:	4a0b      	ldr	r2, [pc, #44]	; (2f68 <prvCheckForValidListAndQueue+0x50>)
    2f3c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    2f3e:	4b0e      	ldr	r3, [pc, #56]	; (2f78 <prvCheckForValidListAndQueue+0x60>)
    2f40:	4a0b      	ldr	r2, [pc, #44]	; (2f70 <prvCheckForValidListAndQueue+0x58>)
    2f42:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2f44:	2200      	movs	r2, #0
    2f46:	210c      	movs	r1, #12
    2f48:	2005      	movs	r0, #5
    2f4a:	4b0c      	ldr	r3, [pc, #48]	; (2f7c <prvCheckForValidListAndQueue+0x64>)
    2f4c:	4798      	blx	r3
    2f4e:	0002      	movs	r2, r0
    2f50:	4b04      	ldr	r3, [pc, #16]	; (2f64 <prvCheckForValidListAndQueue+0x4c>)
    2f52:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2f54:	4b0a      	ldr	r3, [pc, #40]	; (2f80 <prvCheckForValidListAndQueue+0x68>)
    2f56:	4798      	blx	r3
}
    2f58:	46c0      	nop			; (mov r8, r8)
    2f5a:	46bd      	mov	sp, r7
    2f5c:	bd80      	pop	{r7, pc}
    2f5e:	46c0      	nop			; (mov r8, r8)
    2f60:	00001141 	.word	0x00001141
    2f64:	20003234 	.word	0x20003234
    2f68:	20003204 	.word	0x20003204
    2f6c:	00000eaf 	.word	0x00000eaf
    2f70:	20003218 	.word	0x20003218
    2f74:	2000322c 	.word	0x2000322c
    2f78:	20003230 	.word	0x20003230
    2f7c:	00001415 	.word	0x00001415
    2f80:	00001165 	.word	0x00001165

00002f84 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
    2f84:	b580      	push	{r7, lr}
    2f86:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
    2f88:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    2f8c:	4b03      	ldr	r3, [pc, #12]	; (2f9c <__NVIC_SystemReset+0x18>)
    2f8e:	4a04      	ldr	r2, [pc, #16]	; (2fa0 <__NVIC_SystemReset+0x1c>)
    2f90:	60da      	str	r2, [r3, #12]
    2f92:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2f96:	46c0      	nop			; (mov r8, r8)
    2f98:	e7fd      	b.n	2f96 <__NVIC_SystemReset+0x12>
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	e000ed00 	.word	0xe000ed00
    2fa0:	05fa0004 	.word	0x05fa0004

00002fa4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    2fa4:	b580      	push	{r7, lr}
    2fa6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    2fa8:	4b00      	ldr	r3, [pc, #0]	; (2fac <system_reset+0x8>)
    2faa:	4798      	blx	r3
    2fac:	00002f85 	.word	0x00002f85

00002fb0 <vCommandConsoleTask>:
/******************************************************************************
* CLI Thread
******************************************************************************/
SemaphoreHandle_t xSemaphoreREAD; //initializing the semaphore	
void vCommandConsoleTask( void *pvParameters )
{
    2fb0:	b580      	push	{r7, lr}
    2fb2:	b086      	sub	sp, #24
    2fb4:	af00      	add	r7, sp, #0
    2fb6:	6078      	str	r0, [r7, #4]
xSemaphoreREAD = xSemaphoreCreateMutex();
    2fb8:	2001      	movs	r0, #1
    2fba:	4b86      	ldr	r3, [pc, #536]	; (31d4 <vCommandConsoleTask+0x224>)
    2fbc:	4798      	blx	r3
    2fbe:	0002      	movs	r2, r0
    2fc0:	4b85      	ldr	r3, [pc, #532]	; (31d8 <vCommandConsoleTask+0x228>)
    2fc2:	601a      	str	r2, [r3, #0]
}


//REGISTER COMMANDS HERE

FreeRTOS_CLIRegisterCommand( &xClearScreen );
    2fc4:	4b85      	ldr	r3, [pc, #532]	; (31dc <vCommandConsoleTask+0x22c>)
    2fc6:	0018      	movs	r0, r3
    2fc8:	4b85      	ldr	r3, [pc, #532]	; (31e0 <vCommandConsoleTask+0x230>)
    2fca:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xResetCommand );
    2fcc:	4b85      	ldr	r3, [pc, #532]	; (31e4 <vCommandConsoleTask+0x234>)
    2fce:	0018      	movs	r0, r3
    2fd0:	4b83      	ldr	r3, [pc, #524]	; (31e0 <vCommandConsoleTask+0x230>)
    2fd2:	4798      	blx	r3

uint8_t cRxedChar[2], cInputIndex = 0;
    2fd4:	2317      	movs	r3, #23
    2fd6:	18fb      	adds	r3, r7, r3
    2fd8:	2200      	movs	r2, #0
    2fda:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString( pcWelcomeMessage);
    2fdc:	4b82      	ldr	r3, [pc, #520]	; (31e8 <vCommandConsoleTask+0x238>)
    2fde:	0018      	movs	r0, r3
    2fe0:	4b82      	ldr	r3, [pc, #520]	; (31ec <vCommandConsoleTask+0x23c>)
    2fe2:	4798      	blx	r3
    for( ;; )
    {
        /* This implementation reads a single character at a time.  Wait in the
        Blocked state until a character is received. */
		
		FreeRTOS_read(&cRxedChar);
    2fe4:	230c      	movs	r3, #12
    2fe6:	18fb      	adds	r3, r7, r3
    2fe8:	0018      	movs	r0, r3
    2fea:	4b81      	ldr	r3, [pc, #516]	; (31f0 <vCommandConsoleTask+0x240>)
    2fec:	4798      	blx	r3
		
        if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
    2fee:	230c      	movs	r3, #12
    2ff0:	18fb      	adds	r3, r7, r3
    2ff2:	781b      	ldrb	r3, [r3, #0]
    2ff4:	2b0a      	cmp	r3, #10
    2ff6:	d004      	beq.n	3002 <vCommandConsoleTask+0x52>
    2ff8:	230c      	movs	r3, #12
    2ffa:	18fb      	adds	r3, r7, r3
    2ffc:	781b      	ldrb	r3, [r3, #0]
    2ffe:	2b0d      	cmp	r3, #13
    3000:	d131      	bne.n	3066 <vCommandConsoleTask+0xb6>
        {
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString("\r\n");
    3002:	4b7c      	ldr	r3, [pc, #496]	; (31f4 <vCommandConsoleTask+0x244>)
    3004:	0018      	movs	r0, r3
    3006:	4b79      	ldr	r3, [pc, #484]	; (31ec <vCommandConsoleTask+0x23c>)
    3008:	4798      	blx	r3
			//Copy for last command
			isEscapeCode = false; pcEscapeCodePos = 0;
    300a:	4b7b      	ldr	r3, [pc, #492]	; (31f8 <vCommandConsoleTask+0x248>)
    300c:	2200      	movs	r2, #0
    300e:	701a      	strb	r2, [r3, #0]
    3010:	4b7a      	ldr	r3, [pc, #488]	; (31fc <vCommandConsoleTask+0x24c>)
    3012:	2200      	movs	r2, #0
    3014:	701a      	strb	r2, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
    3016:	497a      	ldr	r1, [pc, #488]	; (3200 <vCommandConsoleTask+0x250>)
    3018:	4b7a      	ldr	r3, [pc, #488]	; (3204 <vCommandConsoleTask+0x254>)
    301a:	2263      	movs	r2, #99	; 0x63
    301c:	0018      	movs	r0, r3
    301e:	4b7a      	ldr	r3, [pc, #488]	; (3208 <vCommandConsoleTask+0x258>)
    3020:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
    3022:	4b78      	ldr	r3, [pc, #480]	; (3204 <vCommandConsoleTask+0x254>)
    3024:	2263      	movs	r2, #99	; 0x63
    3026:	2100      	movs	r1, #0
    3028:	5499      	strb	r1, [r3, r2]
            do
            {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
    302a:	4978      	ldr	r1, [pc, #480]	; (320c <vCommandConsoleTask+0x25c>)
    302c:	4b74      	ldr	r3, [pc, #464]	; (3200 <vCommandConsoleTask+0x250>)
    302e:	2282      	movs	r2, #130	; 0x82
    3030:	0018      	movs	r0, r3
    3032:	4b77      	ldr	r3, [pc, #476]	; (3210 <vCommandConsoleTask+0x260>)
    3034:	4798      	blx	r3
    3036:	0003      	movs	r3, r0
    3038:	613b      	str	r3, [r7, #16]
                              );

                /* Write the output generated by the command interpreter to the
                console. */
				//Ensure it is null terminated
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
    303a:	4b74      	ldr	r3, [pc, #464]	; (320c <vCommandConsoleTask+0x25c>)
    303c:	2281      	movs	r2, #129	; 0x81
    303e:	2100      	movs	r1, #0
    3040:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
    3042:	4b72      	ldr	r3, [pc, #456]	; (320c <vCommandConsoleTask+0x25c>)
    3044:	0018      	movs	r0, r3
    3046:	4b69      	ldr	r3, [pc, #420]	; (31ec <vCommandConsoleTask+0x23c>)
    3048:	4798      	blx	r3

            } while( xMoreDataToFollow != pdFALSE );
    304a:	693b      	ldr	r3, [r7, #16]
    304c:	2b00      	cmp	r3, #0
    304e:	d1ec      	bne.n	302a <vCommandConsoleTask+0x7a>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
    3050:	2317      	movs	r3, #23
    3052:	18fb      	adds	r3, r7, r3
    3054:	2200      	movs	r2, #0
    3056:	701a      	strb	r2, [r3, #0]
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
    3058:	4b69      	ldr	r3, [pc, #420]	; (3200 <vCommandConsoleTask+0x250>)
    305a:	2264      	movs	r2, #100	; 0x64
    305c:	2100      	movs	r1, #0
    305e:	0018      	movs	r0, r3
    3060:	4b6c      	ldr	r3, [pc, #432]	; (3214 <vCommandConsoleTask+0x264>)
    3062:	4798      	blx	r3
    3064:	e0b5      	b.n	31d2 <vCommandConsoleTask+0x222>
        {
		            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */
		
			if (true == isEscapeCode) {
    3066:	4b64      	ldr	r3, [pc, #400]	; (31f8 <vCommandConsoleTask+0x248>)
    3068:	781b      	ldrb	r3, [r3, #0]
    306a:	2b00      	cmp	r3, #0
    306c:	d059      	beq.n	3122 <vCommandConsoleTask+0x172>

				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
    306e:	4b63      	ldr	r3, [pc, #396]	; (31fc <vCommandConsoleTask+0x24c>)
    3070:	781b      	ldrb	r3, [r3, #0]
    3072:	2b03      	cmp	r3, #3
    3074:	d80c      	bhi.n	3090 <vCommandConsoleTask+0xe0>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
    3076:	4b61      	ldr	r3, [pc, #388]	; (31fc <vCommandConsoleTask+0x24c>)
    3078:	781b      	ldrb	r3, [r3, #0]
    307a:	1c5a      	adds	r2, r3, #1
    307c:	b2d1      	uxtb	r1, r2
    307e:	4a5f      	ldr	r2, [pc, #380]	; (31fc <vCommandConsoleTask+0x24c>)
    3080:	7011      	strb	r1, [r2, #0]
    3082:	001a      	movs	r2, r3
    3084:	230c      	movs	r3, #12
    3086:	18fb      	adds	r3, r7, r3
    3088:	7819      	ldrb	r1, [r3, #0]
    308a:	4b63      	ldr	r3, [pc, #396]	; (3218 <vCommandConsoleTask+0x268>)
    308c:	5499      	strb	r1, [r3, r2]
    308e:	e005      	b.n	309c <vCommandConsoleTask+0xec>
				}
				else {
					isEscapeCode = false; pcEscapeCodePos = 0;
    3090:	4b59      	ldr	r3, [pc, #356]	; (31f8 <vCommandConsoleTask+0x248>)
    3092:	2200      	movs	r2, #0
    3094:	701a      	strb	r2, [r3, #0]
    3096:	4b59      	ldr	r3, [pc, #356]	; (31fc <vCommandConsoleTask+0x24c>)
    3098:	2200      	movs	r2, #0
    309a:	701a      	strb	r2, [r3, #0]
				}
			
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
    309c:	4b57      	ldr	r3, [pc, #348]	; (31fc <vCommandConsoleTask+0x24c>)
    309e:	781b      	ldrb	r3, [r3, #0]
    30a0:	2b01      	cmp	r3, #1
    30a2:	d99f      	bls.n	2fe4 <vCommandConsoleTask+0x34>
				
					// UP ARROW SHOW LAST COMMAND
					if(strcasecmp(pcEscapeCodes, "oa"))	{
    30a4:	4a5d      	ldr	r2, [pc, #372]	; (321c <vCommandConsoleTask+0x26c>)
    30a6:	4b5c      	ldr	r3, [pc, #368]	; (3218 <vCommandConsoleTask+0x268>)
    30a8:	0011      	movs	r1, r2
    30aa:	0018      	movs	r0, r3
    30ac:	4b5c      	ldr	r3, [pc, #368]	; (3220 <vCommandConsoleTask+0x270>)
    30ae:	4798      	blx	r3
    30b0:	1e03      	subs	r3, r0, #0
    30b2:	d02f      	beq.n	3114 <vCommandConsoleTask+0x164>
                            /// Delete current line and add prompt (">")
                            sprintf(pcInputString, "%c[2K\r>", 27);
    30b4:	495b      	ldr	r1, [pc, #364]	; (3224 <vCommandConsoleTask+0x274>)
    30b6:	4b52      	ldr	r3, [pc, #328]	; (3200 <vCommandConsoleTask+0x250>)
    30b8:	221b      	movs	r2, #27
    30ba:	0018      	movs	r0, r3
    30bc:	4b5a      	ldr	r3, [pc, #360]	; (3228 <vCommandConsoleTask+0x278>)
    30be:	4798      	blx	r3
				            SerialConsoleWriteString(pcInputString);
    30c0:	4b4f      	ldr	r3, [pc, #316]	; (3200 <vCommandConsoleTask+0x250>)
    30c2:	0018      	movs	r0, r3
    30c4:	4b49      	ldr	r3, [pc, #292]	; (31ec <vCommandConsoleTask+0x23c>)
    30c6:	4798      	blx	r3
                            /// Clear input buffer
                            cInputIndex = 0;
    30c8:	2317      	movs	r3, #23
    30ca:	18fb      	adds	r3, r7, r3
    30cc:	2200      	movs	r2, #0
    30ce:	701a      	strb	r2, [r3, #0]
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
    30d0:	4b4b      	ldr	r3, [pc, #300]	; (3200 <vCommandConsoleTask+0x250>)
    30d2:	2264      	movs	r2, #100	; 0x64
    30d4:	2100      	movs	r1, #0
    30d6:	0018      	movs	r0, r3
    30d8:	4b4e      	ldr	r3, [pc, #312]	; (3214 <vCommandConsoleTask+0x264>)
    30da:	4798      	blx	r3
                        /// Send last command
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
    30dc:	4949      	ldr	r1, [pc, #292]	; (3204 <vCommandConsoleTask+0x254>)
    30de:	4b48      	ldr	r3, [pc, #288]	; (3200 <vCommandConsoleTask+0x250>)
    30e0:	2263      	movs	r2, #99	; 0x63
    30e2:	0018      	movs	r0, r3
    30e4:	4b48      	ldr	r3, [pc, #288]	; (3208 <vCommandConsoleTask+0x258>)
    30e6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
    30e8:	4b45      	ldr	r3, [pc, #276]	; (3200 <vCommandConsoleTask+0x250>)
    30ea:	0018      	movs	r0, r3
    30ec:	4b4f      	ldr	r3, [pc, #316]	; (322c <vCommandConsoleTask+0x27c>)
    30ee:	4798      	blx	r3
    30f0:	0003      	movs	r3, r0
    30f2:	2b62      	cmp	r3, #98	; 0x62
    30f4:	d806      	bhi.n	3104 <vCommandConsoleTask+0x154>
    30f6:	4b43      	ldr	r3, [pc, #268]	; (3204 <vCommandConsoleTask+0x254>)
    30f8:	0018      	movs	r0, r3
    30fa:	4b4c      	ldr	r3, [pc, #304]	; (322c <vCommandConsoleTask+0x27c>)
    30fc:	4798      	blx	r3
    30fe:	0003      	movs	r3, r0
    3100:	b2da      	uxtb	r2, r3
    3102:	e000      	b.n	3106 <vCommandConsoleTask+0x156>
    3104:	2263      	movs	r2, #99	; 0x63
    3106:	2317      	movs	r3, #23
    3108:	18fb      	adds	r3, r7, r3
    310a:	701a      	strb	r2, [r3, #0]
						SerialConsoleWriteString(pcInputString);
    310c:	4b3c      	ldr	r3, [pc, #240]	; (3200 <vCommandConsoleTask+0x250>)
    310e:	0018      	movs	r0, r3
    3110:	4b36      	ldr	r3, [pc, #216]	; (31ec <vCommandConsoleTask+0x23c>)
    3112:	4798      	blx	r3
					}
				
					isEscapeCode = false; pcEscapeCodePos = 0;
    3114:	4b38      	ldr	r3, [pc, #224]	; (31f8 <vCommandConsoleTask+0x248>)
    3116:	2200      	movs	r2, #0
    3118:	701a      	strb	r2, [r3, #0]
    311a:	4b38      	ldr	r3, [pc, #224]	; (31fc <vCommandConsoleTask+0x24c>)
    311c:	2200      	movs	r2, #0
    311e:	701a      	strb	r2, [r3, #0]
    3120:	e760      	b.n	2fe4 <vCommandConsoleTask+0x34>
			}
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if( cRxedChar[0] == '\r' )
    3122:	230c      	movs	r3, #12
    3124:	18fb      	adds	r3, r7, r3
    3126:	781b      	ldrb	r3, [r3, #0]
    3128:	2b0d      	cmp	r3, #13
    312a:	d100      	bne.n	312e <vCommandConsoleTask+0x17e>
    312c:	e75a      	b.n	2fe4 <vCommandConsoleTask+0x34>
            {
                /* Ignore carriage returns. */
            }
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
    312e:	230c      	movs	r3, #12
    3130:	18fb      	adds	r3, r7, r3
    3132:	781b      	ldrb	r3, [r3, #0]
    3134:	2b08      	cmp	r3, #8
    3136:	d004      	beq.n	3142 <vCommandConsoleTask+0x192>
    3138:	230c      	movs	r3, #12
    313a:	18fb      	adds	r3, r7, r3
    313c:	781b      	ldrb	r3, [r3, #0]
    313e:	2b7f      	cmp	r3, #127	; 0x7f
    3140:	d11c      	bne.n	317c <vCommandConsoleTask+0x1cc>
            {
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
    3142:	2308      	movs	r3, #8
    3144:	18fb      	adds	r3, r7, r3
    3146:	4a3a      	ldr	r2, [pc, #232]	; (3230 <vCommandConsoleTask+0x280>)
    3148:	6812      	ldr	r2, [r2, #0]
    314a:	601a      	str	r2, [r3, #0]
				SerialConsoleWriteString(erase);
    314c:	2308      	movs	r3, #8
    314e:	18fb      	adds	r3, r7, r3
    3150:	0018      	movs	r0, r3
    3152:	4b26      	ldr	r3, [pc, #152]	; (31ec <vCommandConsoleTask+0x23c>)
    3154:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if( cInputIndex > 0 )
    3156:	2317      	movs	r3, #23
    3158:	18fb      	adds	r3, r7, r3
    315a:	781b      	ldrb	r3, [r3, #0]
    315c:	2b00      	cmp	r3, #0
    315e:	d037      	beq.n	31d0 <vCommandConsoleTask+0x220>
                {
                    cInputIndex--;
    3160:	2317      	movs	r3, #23
    3162:	18fb      	adds	r3, r7, r3
    3164:	781a      	ldrb	r2, [r3, #0]
    3166:	2317      	movs	r3, #23
    3168:	18fb      	adds	r3, r7, r3
    316a:	3a01      	subs	r2, #1
    316c:	701a      	strb	r2, [r3, #0]
                    pcInputString[ cInputIndex ] = 0;
    316e:	2317      	movs	r3, #23
    3170:	18fb      	adds	r3, r7, r3
    3172:	781b      	ldrb	r3, [r3, #0]
    3174:	4a22      	ldr	r2, [pc, #136]	; (3200 <vCommandConsoleTask+0x250>)
    3176:	2100      	movs	r1, #0
    3178:	54d1      	strb	r1, [r2, r3]
            {
    317a:	e029      	b.n	31d0 <vCommandConsoleTask+0x220>
                }
            }
			// ESC
			else if( cRxedChar[0] == ASCII_ESC) {
    317c:	230c      	movs	r3, #12
    317e:	18fb      	adds	r3, r7, r3
    3180:	781b      	ldrb	r3, [r3, #0]
    3182:	2b1b      	cmp	r3, #27
    3184:	d106      	bne.n	3194 <vCommandConsoleTask+0x1e4>
				isEscapeCode = true; //Next characters will be code arguments
    3186:	4b1c      	ldr	r3, [pc, #112]	; (31f8 <vCommandConsoleTask+0x248>)
    3188:	2201      	movs	r2, #1
    318a:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
    318c:	4b1b      	ldr	r3, [pc, #108]	; (31fc <vCommandConsoleTask+0x24c>)
    318e:	2200      	movs	r2, #0
    3190:	701a      	strb	r2, [r3, #0]
    3192:	e727      	b.n	2fe4 <vCommandConsoleTask+0x34>
            {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
    3194:	2317      	movs	r3, #23
    3196:	18fb      	adds	r3, r7, r3
    3198:	781b      	ldrb	r3, [r3, #0]
    319a:	2b63      	cmp	r3, #99	; 0x63
    319c:	d80e      	bhi.n	31bc <vCommandConsoleTask+0x20c>
                {
                    pcInputString[ cInputIndex ] = cRxedChar[0];
    319e:	2317      	movs	r3, #23
    31a0:	18fb      	adds	r3, r7, r3
    31a2:	781b      	ldrb	r3, [r3, #0]
    31a4:	220c      	movs	r2, #12
    31a6:	18ba      	adds	r2, r7, r2
    31a8:	7811      	ldrb	r1, [r2, #0]
    31aa:	4a15      	ldr	r2, [pc, #84]	; (3200 <vCommandConsoleTask+0x250>)
    31ac:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
    31ae:	2317      	movs	r3, #23
    31b0:	18fb      	adds	r3, r7, r3
    31b2:	781a      	ldrb	r2, [r3, #0]
    31b4:	2317      	movs	r3, #23
    31b6:	18fb      	adds	r3, r7, r3
    31b8:	3201      	adds	r2, #1
    31ba:	701a      	strb	r2, [r3, #0]
                }

					//Order Echo
					cRxedChar[1] = 0;
    31bc:	230c      	movs	r3, #12
    31be:	18fb      	adds	r3, r7, r3
    31c0:	2200      	movs	r2, #0
    31c2:	705a      	strb	r2, [r3, #1]
					SerialConsoleWriteString(&cRxedChar[0]);
    31c4:	230c      	movs	r3, #12
    31c6:	18fb      	adds	r3, r7, r3
    31c8:	0018      	movs	r0, r3
    31ca:	4b08      	ldr	r3, [pc, #32]	; (31ec <vCommandConsoleTask+0x23c>)
    31cc:	4798      	blx	r3
    31ce:	e709      	b.n	2fe4 <vCommandConsoleTask+0x34>
            {
    31d0:	46c0      	nop			; (mov r8, r8)
		FreeRTOS_read(&cRxedChar);
    31d2:	e707      	b.n	2fe4 <vCommandConsoleTask+0x34>
    31d4:	00001511 	.word	0x00001511
    31d8:	20003424 	.word	0x20003424
    31dc:	00005fb4 	.word	0x00005fb4
    31e0:	00000c3d 	.word	0x00000c3d
    31e4:	00005fc4 	.word	0x00005fc4
    31e8:	00005f08 	.word	0x00005f08
    31ec:	00003781 	.word	0x00003781
    31f0:	00003235 	.word	0x00003235
    31f4:	00005f98 	.word	0x00005f98
    31f8:	20003250 	.word	0x20003250
    31fc:	20003251 	.word	0x20003251
    3200:	200032b8 	.word	0x200032b8
    3204:	20003254 	.word	0x20003254
    3208:	00005685 	.word	0x00005685
    320c:	2000331c 	.word	0x2000331c
    3210:	00000cad 	.word	0x00000cad
    3214:	000053eb 	.word	0x000053eb
    3218:	200033a0 	.word	0x200033a0
    321c:	00005f9c 	.word	0x00005f9c
    3220:	00005619 	.word	0x00005619
    3224:	00005fa0 	.word	0x00005fa0
    3228:	000055d5 	.word	0x000055d5
    322c:	00005655 	.word	0x00005655
    3230:	00005fa8 	.word	0x00005fa8

00003234 <FreeRTOS_read>:
* @details		STUDENTS TO COMPLETE.
* @note
*****************************************************************************/

static void FreeRTOS_read(char* character)
{
    3234:	b590      	push	{r4, r7, lr}
    3236:	b083      	sub	sp, #12
    3238:	af00      	add	r7, sp, #0
    323a:	6078      	str	r0, [r7, #4]
		//{
			//SerialConsoleWriteString("333");
			//SerialConsoleWriteString(*character); //wtf??
		//}
		
		xSemaphoreGive(xSemaphoreREAD);
    323c:	4b05      	ldr	r3, [pc, #20]	; (3254 <FreeRTOS_read+0x20>)
    323e:	6818      	ldr	r0, [r3, #0]
    3240:	2300      	movs	r3, #0
    3242:	2200      	movs	r2, #0
    3244:	2100      	movs	r1, #0
    3246:	4c04      	ldr	r4, [pc, #16]	; (3258 <FreeRTOS_read+0x24>)
    3248:	47a0      	blx	r4
}
    324a:	46c0      	nop			; (mov r8, r8)
    324c:	46bd      	mov	sp, r7
    324e:	b003      	add	sp, #12
    3250:	bd90      	pop	{r4, r7, pc}
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	20003424 	.word	0x20003424
    3258:	00001551 	.word	0x00001551

0000325c <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    325c:	b590      	push	{r4, r7, lr}
    325e:	b087      	sub	sp, #28
    3260:	af00      	add	r7, sp, #0
    3262:	60f8      	str	r0, [r7, #12]
    3264:	60b9      	str	r1, [r7, #8]
    3266:	607a      	str	r2, [r7, #4]
	char clearScreen = ASCII_ESC;
    3268:	2317      	movs	r3, #23
    326a:	18fb      	adds	r3, r7, r3
    326c:	221b      	movs	r2, #27
    326e:	701a      	strb	r2, [r3, #0]
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
    3270:	2317      	movs	r3, #23
    3272:	18fb      	adds	r3, r7, r3
    3274:	781b      	ldrb	r3, [r3, #0]
    3276:	4a08      	ldr	r2, [pc, #32]	; (3298 <xCliClearTerminalScreen+0x3c>)
    3278:	4808      	ldr	r0, [pc, #32]	; (329c <xCliClearTerminalScreen+0x40>)
    327a:	210f      	movs	r1, #15
    327c:	4c08      	ldr	r4, [pc, #32]	; (32a0 <xCliClearTerminalScreen+0x44>)
    327e:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
    3280:	4a06      	ldr	r2, [pc, #24]	; (329c <xCliClearTerminalScreen+0x40>)
    3282:	68b9      	ldr	r1, [r7, #8]
    3284:	68fb      	ldr	r3, [r7, #12]
    3286:	0018      	movs	r0, r3
    3288:	4b05      	ldr	r3, [pc, #20]	; (32a0 <xCliClearTerminalScreen+0x44>)
    328a:	4798      	blx	r3
	return pdFALSE;
    328c:	2300      	movs	r3, #0
}
    328e:	0018      	movs	r0, r3
    3290:	46bd      	mov	sp, r7
    3292:	b007      	add	sp, #28
    3294:	bd90      	pop	{r4, r7, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	00005fac 	.word	0x00005fac
    329c:	20003240 	.word	0x20003240
    32a0:	00005571 	.word	0x00005571

000032a4 <CLI_ResetDevice>:

//Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    32a4:	b580      	push	{r7, lr}
    32a6:	b084      	sub	sp, #16
    32a8:	af00      	add	r7, sp, #0
    32aa:	60f8      	str	r0, [r7, #12]
    32ac:	60b9      	str	r1, [r7, #8]
    32ae:	607a      	str	r2, [r7, #4]
	system_reset();
    32b0:	4b03      	ldr	r3, [pc, #12]	; (32c0 <CLI_ResetDevice+0x1c>)
    32b2:	4798      	blx	r3
	return pdFALSE;
    32b4:	2300      	movs	r3, #0
}
    32b6:	0018      	movs	r0, r3
    32b8:	46bd      	mov	sp, r7
    32ba:	b004      	add	sp, #16
    32bc:	bd80      	pop	{r7, pc}
    32be:	46c0      	nop			; (mov r8, r8)
    32c0:	00002fa5 	.word	0x00002fa5

000032c4 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    32c4:	b580      	push	{r7, lr}
    32c6:	b082      	sub	sp, #8
    32c8:	af00      	add	r7, sp, #0
    32ca:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	7c1b      	ldrb	r3, [r3, #16]
    32d0:	2b00      	cmp	r3, #0
    32d2:	d00b      	beq.n	32ec <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    32d4:	687b      	ldr	r3, [r7, #4]
    32d6:	689b      	ldr	r3, [r3, #8]
    32d8:	1c5a      	adds	r2, r3, #1
    32da:	687b      	ldr	r3, [r7, #4]
    32dc:	68d9      	ldr	r1, [r3, #12]
    32de:	4b10      	ldr	r3, [pc, #64]	; (3320 <advance_pointer+0x5c>)
    32e0:	0010      	movs	r0, r2
    32e2:	4798      	blx	r3
    32e4:	000b      	movs	r3, r1
    32e6:	001a      	movs	r2, r3
    32e8:	687b      	ldr	r3, [r7, #4]
    32ea:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    32ec:	687b      	ldr	r3, [r7, #4]
    32ee:	685b      	ldr	r3, [r3, #4]
    32f0:	1c5a      	adds	r2, r3, #1
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	68d9      	ldr	r1, [r3, #12]
    32f6:	4b0a      	ldr	r3, [pc, #40]	; (3320 <advance_pointer+0x5c>)
    32f8:	0010      	movs	r0, r2
    32fa:	4798      	blx	r3
    32fc:	000b      	movs	r3, r1
    32fe:	001a      	movs	r2, r3
    3300:	687b      	ldr	r3, [r7, #4]
    3302:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    3304:	687b      	ldr	r3, [r7, #4]
    3306:	685a      	ldr	r2, [r3, #4]
    3308:	687b      	ldr	r3, [r7, #4]
    330a:	689b      	ldr	r3, [r3, #8]
    330c:	1ad3      	subs	r3, r2, r3
    330e:	425a      	negs	r2, r3
    3310:	4153      	adcs	r3, r2
    3312:	b2da      	uxtb	r2, r3
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	741a      	strb	r2, [r3, #16]
 }
    3318:	46c0      	nop			; (mov r8, r8)
    331a:	46bd      	mov	sp, r7
    331c:	b002      	add	sp, #8
    331e:	bd80      	pop	{r7, pc}
    3320:	0000531d 	.word	0x0000531d

00003324 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
    3324:	b580      	push	{r7, lr}
    3326:	b082      	sub	sp, #8
    3328:	af00      	add	r7, sp, #0
    332a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
    332c:	687b      	ldr	r3, [r7, #4]
    332e:	2200      	movs	r2, #0
    3330:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    3332:	687b      	ldr	r3, [r7, #4]
    3334:	689b      	ldr	r3, [r3, #8]
    3336:	1c5a      	adds	r2, r3, #1
    3338:	687b      	ldr	r3, [r7, #4]
    333a:	68d9      	ldr	r1, [r3, #12]
    333c:	4b05      	ldr	r3, [pc, #20]	; (3354 <retreat_pointer+0x30>)
    333e:	0010      	movs	r0, r2
    3340:	4798      	blx	r3
    3342:	000b      	movs	r3, r1
    3344:	001a      	movs	r2, r3
    3346:	687b      	ldr	r3, [r7, #4]
    3348:	609a      	str	r2, [r3, #8]
 }
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	46bd      	mov	sp, r7
    334e:	b002      	add	sp, #8
    3350:	bd80      	pop	{r7, pc}
    3352:	46c0      	nop			; (mov r8, r8)
    3354:	0000531d 	.word	0x0000531d

00003358 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    3358:	b580      	push	{r7, lr}
    335a:	b084      	sub	sp, #16
    335c:	af00      	add	r7, sp, #0
    335e:	6078      	str	r0, [r7, #4]
    3360:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    3362:	2014      	movs	r0, #20
    3364:	4b09      	ldr	r3, [pc, #36]	; (338c <circular_buf_init+0x34>)
    3366:	4798      	blx	r3
    3368:	0003      	movs	r3, r0
    336a:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    336c:	68fb      	ldr	r3, [r7, #12]
    336e:	687a      	ldr	r2, [r7, #4]
    3370:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
    3372:	68fb      	ldr	r3, [r7, #12]
    3374:	683a      	ldr	r2, [r7, #0]
    3376:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
    3378:	68fb      	ldr	r3, [r7, #12]
    337a:	0018      	movs	r0, r3
    337c:	4b04      	ldr	r3, [pc, #16]	; (3390 <circular_buf_init+0x38>)
    337e:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
    3380:	68fb      	ldr	r3, [r7, #12]
 }
    3382:	0018      	movs	r0, r3
    3384:	46bd      	mov	sp, r7
    3386:	b004      	add	sp, #16
    3388:	bd80      	pop	{r7, pc}
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	000053c5 	.word	0x000053c5
    3390:	00003395 	.word	0x00003395

00003394 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
    3394:	b580      	push	{r7, lr}
    3396:	b082      	sub	sp, #8
    3398:	af00      	add	r7, sp, #0
    339a:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
    339c:	687b      	ldr	r3, [r7, #4]
    339e:	2200      	movs	r2, #0
    33a0:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	2200      	movs	r2, #0
    33a6:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	2200      	movs	r2, #0
    33ac:	741a      	strb	r2, [r3, #16]
 }
    33ae:	46c0      	nop			; (mov r8, r8)
    33b0:	46bd      	mov	sp, r7
    33b2:	b002      	add	sp, #8
    33b4:	bd80      	pop	{r7, pc}
	...

000033b8 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    33b8:	b580      	push	{r7, lr}
    33ba:	b082      	sub	sp, #8
    33bc:	af00      	add	r7, sp, #0
    33be:	6078      	str	r0, [r7, #4]
    33c0:	000a      	movs	r2, r1
    33c2:	1cfb      	adds	r3, r7, #3
    33c4:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    33c6:	687b      	ldr	r3, [r7, #4]
    33c8:	681a      	ldr	r2, [r3, #0]
    33ca:	687b      	ldr	r3, [r7, #4]
    33cc:	685b      	ldr	r3, [r3, #4]
    33ce:	18d3      	adds	r3, r2, r3
    33d0:	1cfa      	adds	r2, r7, #3
    33d2:	7812      	ldrb	r2, [r2, #0]
    33d4:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
    33d6:	687b      	ldr	r3, [r7, #4]
    33d8:	0018      	movs	r0, r3
    33da:	4b03      	ldr	r3, [pc, #12]	; (33e8 <circular_buf_put+0x30>)
    33dc:	4798      	blx	r3
 }
    33de:	46c0      	nop			; (mov r8, r8)
    33e0:	46bd      	mov	sp, r7
    33e2:	b002      	add	sp, #8
    33e4:	bd80      	pop	{r7, pc}
    33e6:	46c0      	nop			; (mov r8, r8)
    33e8:	000032c5 	.word	0x000032c5

000033ec <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
    33ec:	b580      	push	{r7, lr}
    33ee:	b084      	sub	sp, #16
    33f0:	af00      	add	r7, sp, #0
    33f2:	6078      	str	r0, [r7, #4]
    33f4:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
    33f6:	2301      	movs	r3, #1
    33f8:	425b      	negs	r3, r3
    33fa:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
    33fc:	687b      	ldr	r3, [r7, #4]
    33fe:	0018      	movs	r0, r3
    3400:	4b0d      	ldr	r3, [pc, #52]	; (3438 <circular_buf_get+0x4c>)
    3402:	4798      	blx	r3
    3404:	0003      	movs	r3, r0
    3406:	001a      	movs	r2, r3
    3408:	2301      	movs	r3, #1
    340a:	4053      	eors	r3, r2
    340c:	b2db      	uxtb	r3, r3
    340e:	2b00      	cmp	r3, #0
    3410:	d00d      	beq.n	342e <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
    3412:	687b      	ldr	r3, [r7, #4]
    3414:	681a      	ldr	r2, [r3, #0]
    3416:	687b      	ldr	r3, [r7, #4]
    3418:	689b      	ldr	r3, [r3, #8]
    341a:	18d3      	adds	r3, r2, r3
    341c:	781a      	ldrb	r2, [r3, #0]
    341e:	683b      	ldr	r3, [r7, #0]
    3420:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
    3422:	687b      	ldr	r3, [r7, #4]
    3424:	0018      	movs	r0, r3
    3426:	4b05      	ldr	r3, [pc, #20]	; (343c <circular_buf_get+0x50>)
    3428:	4798      	blx	r3

		 r = 0;
    342a:	2300      	movs	r3, #0
    342c:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
    342e:	68fb      	ldr	r3, [r7, #12]
 }
    3430:	0018      	movs	r0, r3
    3432:	46bd      	mov	sp, r7
    3434:	b004      	add	sp, #16
    3436:	bd80      	pop	{r7, pc}
    3438:	00003441 	.word	0x00003441
    343c:	00003325 	.word	0x00003325

00003440 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
    3440:	b580      	push	{r7, lr}
    3442:	b082      	sub	sp, #8
    3444:	af00      	add	r7, sp, #0
    3446:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	7c1b      	ldrb	r3, [r3, #16]
    344c:	2201      	movs	r2, #1
    344e:	4053      	eors	r3, r2
    3450:	b2db      	uxtb	r3, r3
    3452:	2b00      	cmp	r3, #0
    3454:	d007      	beq.n	3466 <circular_buf_empty+0x26>
    3456:	687b      	ldr	r3, [r7, #4]
    3458:	685a      	ldr	r2, [r3, #4]
    345a:	687b      	ldr	r3, [r7, #4]
    345c:	689b      	ldr	r3, [r3, #8]
    345e:	429a      	cmp	r2, r3
    3460:	d101      	bne.n	3466 <circular_buf_empty+0x26>
    3462:	2301      	movs	r3, #1
    3464:	e000      	b.n	3468 <circular_buf_empty+0x28>
    3466:	2300      	movs	r3, #0
    3468:	1c1a      	adds	r2, r3, #0
    346a:	2301      	movs	r3, #1
    346c:	4013      	ands	r3, r2
    346e:	b2db      	uxtb	r3, r3
 }
    3470:	0018      	movs	r0, r3
    3472:	46bd      	mov	sp, r7
    3474:	b002      	add	sp, #8
    3476:	bd80      	pop	{r7, pc}

00003478 <__NVIC_SetPriority>:
{
    3478:	b5b0      	push	{r4, r5, r7, lr}
    347a:	b082      	sub	sp, #8
    347c:	af00      	add	r7, sp, #0
    347e:	0002      	movs	r2, r0
    3480:	6039      	str	r1, [r7, #0]
    3482:	1dfb      	adds	r3, r7, #7
    3484:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3486:	1dfb      	adds	r3, r7, #7
    3488:	781b      	ldrb	r3, [r3, #0]
    348a:	2b7f      	cmp	r3, #127	; 0x7f
    348c:	d828      	bhi.n	34e0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    348e:	4c2f      	ldr	r4, [pc, #188]	; (354c <__NVIC_SetPriority+0xd4>)
    3490:	1dfb      	adds	r3, r7, #7
    3492:	781b      	ldrb	r3, [r3, #0]
    3494:	b25b      	sxtb	r3, r3
    3496:	089b      	lsrs	r3, r3, #2
    3498:	492c      	ldr	r1, [pc, #176]	; (354c <__NVIC_SetPriority+0xd4>)
    349a:	1dfa      	adds	r2, r7, #7
    349c:	7812      	ldrb	r2, [r2, #0]
    349e:	b252      	sxtb	r2, r2
    34a0:	0892      	lsrs	r2, r2, #2
    34a2:	32c0      	adds	r2, #192	; 0xc0
    34a4:	0092      	lsls	r2, r2, #2
    34a6:	5852      	ldr	r2, [r2, r1]
    34a8:	1df9      	adds	r1, r7, #7
    34aa:	7809      	ldrb	r1, [r1, #0]
    34ac:	0008      	movs	r0, r1
    34ae:	2103      	movs	r1, #3
    34b0:	4001      	ands	r1, r0
    34b2:	00c9      	lsls	r1, r1, #3
    34b4:	20ff      	movs	r0, #255	; 0xff
    34b6:	4088      	lsls	r0, r1
    34b8:	0001      	movs	r1, r0
    34ba:	43c9      	mvns	r1, r1
    34bc:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    34be:	683a      	ldr	r2, [r7, #0]
    34c0:	0192      	lsls	r2, r2, #6
    34c2:	20ff      	movs	r0, #255	; 0xff
    34c4:	4010      	ands	r0, r2
    34c6:	1dfa      	adds	r2, r7, #7
    34c8:	7812      	ldrb	r2, [r2, #0]
    34ca:	0015      	movs	r5, r2
    34cc:	2203      	movs	r2, #3
    34ce:	402a      	ands	r2, r5
    34d0:	00d2      	lsls	r2, r2, #3
    34d2:	4090      	lsls	r0, r2
    34d4:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    34d6:	430a      	orrs	r2, r1
    34d8:	33c0      	adds	r3, #192	; 0xc0
    34da:	009b      	lsls	r3, r3, #2
    34dc:	511a      	str	r2, [r3, r4]
}
    34de:	e031      	b.n	3544 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    34e0:	4c1b      	ldr	r4, [pc, #108]	; (3550 <__NVIC_SetPriority+0xd8>)
    34e2:	1dfb      	adds	r3, r7, #7
    34e4:	781b      	ldrb	r3, [r3, #0]
    34e6:	001a      	movs	r2, r3
    34e8:	230f      	movs	r3, #15
    34ea:	4013      	ands	r3, r2
    34ec:	3b08      	subs	r3, #8
    34ee:	0899      	lsrs	r1, r3, #2
    34f0:	4a17      	ldr	r2, [pc, #92]	; (3550 <__NVIC_SetPriority+0xd8>)
    34f2:	1dfb      	adds	r3, r7, #7
    34f4:	781b      	ldrb	r3, [r3, #0]
    34f6:	0018      	movs	r0, r3
    34f8:	230f      	movs	r3, #15
    34fa:	4003      	ands	r3, r0
    34fc:	3b08      	subs	r3, #8
    34fe:	089b      	lsrs	r3, r3, #2
    3500:	3306      	adds	r3, #6
    3502:	009b      	lsls	r3, r3, #2
    3504:	18d3      	adds	r3, r2, r3
    3506:	3304      	adds	r3, #4
    3508:	681b      	ldr	r3, [r3, #0]
    350a:	1dfa      	adds	r2, r7, #7
    350c:	7812      	ldrb	r2, [r2, #0]
    350e:	0010      	movs	r0, r2
    3510:	2203      	movs	r2, #3
    3512:	4002      	ands	r2, r0
    3514:	00d2      	lsls	r2, r2, #3
    3516:	20ff      	movs	r0, #255	; 0xff
    3518:	4090      	lsls	r0, r2
    351a:	0002      	movs	r2, r0
    351c:	43d2      	mvns	r2, r2
    351e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    3520:	683b      	ldr	r3, [r7, #0]
    3522:	019b      	lsls	r3, r3, #6
    3524:	20ff      	movs	r0, #255	; 0xff
    3526:	4018      	ands	r0, r3
    3528:	1dfb      	adds	r3, r7, #7
    352a:	781b      	ldrb	r3, [r3, #0]
    352c:	001d      	movs	r5, r3
    352e:	2303      	movs	r3, #3
    3530:	402b      	ands	r3, r5
    3532:	00db      	lsls	r3, r3, #3
    3534:	4098      	lsls	r0, r3
    3536:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3538:	431a      	orrs	r2, r3
    353a:	1d8b      	adds	r3, r1, #6
    353c:	009b      	lsls	r3, r3, #2
    353e:	18e3      	adds	r3, r4, r3
    3540:	3304      	adds	r3, #4
    3542:	601a      	str	r2, [r3, #0]
}
    3544:	46c0      	nop			; (mov r8, r8)
    3546:	46bd      	mov	sp, r7
    3548:	b002      	add	sp, #8
    354a:	bdb0      	pop	{r4, r5, r7, pc}
    354c:	e000e100 	.word	0xe000e100
    3550:	e000ed00 	.word	0xe000ed00

00003554 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3554:	b580      	push	{r7, lr}
    3556:	b082      	sub	sp, #8
    3558:	af00      	add	r7, sp, #0
    355a:	0002      	movs	r2, r0
    355c:	1dfb      	adds	r3, r7, #7
    355e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3560:	4b06      	ldr	r3, [pc, #24]	; (357c <system_interrupt_enable+0x28>)
    3562:	1dfa      	adds	r2, r7, #7
    3564:	7812      	ldrb	r2, [r2, #0]
    3566:	0011      	movs	r1, r2
    3568:	221f      	movs	r2, #31
    356a:	400a      	ands	r2, r1
    356c:	2101      	movs	r1, #1
    356e:	4091      	lsls	r1, r2
    3570:	000a      	movs	r2, r1
    3572:	601a      	str	r2, [r3, #0]
}
    3574:	46c0      	nop			; (mov r8, r8)
    3576:	46bd      	mov	sp, r7
    3578:	b002      	add	sp, #8
    357a:	bd80      	pop	{r7, pc}
    357c:	e000e100 	.word	0xe000e100

00003580 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    3580:	b580      	push	{r7, lr}
    3582:	b084      	sub	sp, #16
    3584:	af00      	add	r7, sp, #0
    3586:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3588:	687b      	ldr	r3, [r7, #4]
    358a:	681b      	ldr	r3, [r3, #0]
    358c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    358e:	68fb      	ldr	r3, [r7, #12]
    3590:	69db      	ldr	r3, [r3, #28]
    3592:	1e5a      	subs	r2, r3, #1
    3594:	4193      	sbcs	r3, r2
    3596:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    3598:	0018      	movs	r0, r3
    359a:	46bd      	mov	sp, r7
    359c:	b004      	add	sp, #16
    359e:	bd80      	pop	{r7, pc}

000035a0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    35a0:	b580      	push	{r7, lr}
    35a2:	b082      	sub	sp, #8
    35a4:	af00      	add	r7, sp, #0
    35a6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    35a8:	46c0      	nop			; (mov r8, r8)
    35aa:	687b      	ldr	r3, [r7, #4]
    35ac:	0018      	movs	r0, r3
    35ae:	4b04      	ldr	r3, [pc, #16]	; (35c0 <_usart_wait_for_sync+0x20>)
    35b0:	4798      	blx	r3
    35b2:	1e03      	subs	r3, r0, #0
    35b4:	d1f9      	bne.n	35aa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	46bd      	mov	sp, r7
    35ba:	b002      	add	sp, #8
    35bc:	bd80      	pop	{r7, pc}
    35be:	46c0      	nop			; (mov r8, r8)
    35c0:	00003581 	.word	0x00003581

000035c4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    35c4:	b580      	push	{r7, lr}
    35c6:	b082      	sub	sp, #8
    35c8:	af00      	add	r7, sp, #0
    35ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    35cc:	687b      	ldr	r3, [r7, #4]
    35ce:	2280      	movs	r2, #128	; 0x80
    35d0:	05d2      	lsls	r2, r2, #23
    35d2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    35d4:	687b      	ldr	r3, [r7, #4]
    35d6:	2200      	movs	r2, #0
    35d8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    35da:	687b      	ldr	r3, [r7, #4]
    35dc:	22ff      	movs	r2, #255	; 0xff
    35de:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    35e0:	687b      	ldr	r3, [r7, #4]
    35e2:	2200      	movs	r2, #0
    35e4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    35e6:	687b      	ldr	r3, [r7, #4]
    35e8:	2200      	movs	r2, #0
    35ea:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    35ec:	687b      	ldr	r3, [r7, #4]
    35ee:	2296      	movs	r2, #150	; 0x96
    35f0:	0192      	lsls	r2, r2, #6
    35f2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    35f4:	687b      	ldr	r3, [r7, #4]
    35f6:	2224      	movs	r2, #36	; 0x24
    35f8:	2101      	movs	r1, #1
    35fa:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    35fc:	687b      	ldr	r3, [r7, #4]
    35fe:	2225      	movs	r2, #37	; 0x25
    3600:	2101      	movs	r1, #1
    3602:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    3604:	687b      	ldr	r3, [r7, #4]
    3606:	2226      	movs	r2, #38	; 0x26
    3608:	2100      	movs	r1, #0
    360a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    360c:	687b      	ldr	r3, [r7, #4]
    360e:	2227      	movs	r2, #39	; 0x27
    3610:	2100      	movs	r1, #0
    3612:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	2200      	movs	r2, #0
    3618:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	2288      	movs	r2, #136	; 0x88
    361e:	0352      	lsls	r2, r2, #13
    3620:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    3622:	687b      	ldr	r3, [r7, #4]
    3624:	222c      	movs	r2, #44	; 0x2c
    3626:	2100      	movs	r1, #0
    3628:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    362a:	687b      	ldr	r3, [r7, #4]
    362c:	222d      	movs	r2, #45	; 0x2d
    362e:	2100      	movs	r1, #0
    3630:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    3632:	687b      	ldr	r3, [r7, #4]
    3634:	2200      	movs	r2, #0
    3636:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3638:	687b      	ldr	r3, [r7, #4]
    363a:	2200      	movs	r2, #0
    363c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	2200      	movs	r2, #0
    3642:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    3644:	687b      	ldr	r3, [r7, #4]
    3646:	2200      	movs	r2, #0
    3648:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	2200      	movs	r2, #0
    364e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3650:	687b      	ldr	r3, [r7, #4]
    3652:	2200      	movs	r2, #0
    3654:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3656:	687b      	ldr	r3, [r7, #4]
    3658:	2200      	movs	r2, #0
    365a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    365c:	687b      	ldr	r3, [r7, #4]
    365e:	2200      	movs	r2, #0
    3660:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3662:	687b      	ldr	r3, [r7, #4]
    3664:	2200      	movs	r2, #0
    3666:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3668:	687b      	ldr	r3, [r7, #4]
    366a:	2200      	movs	r2, #0
    366c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    366e:	687b      	ldr	r3, [r7, #4]
    3670:	2213      	movs	r2, #19
    3672:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	2200      	movs	r2, #0
    3678:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    367a:	46c0      	nop			; (mov r8, r8)
    367c:	46bd      	mov	sp, r7
    367e:	b002      	add	sp, #8
    3680:	bd80      	pop	{r7, pc}
	...

00003684 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    3684:	b580      	push	{r7, lr}
    3686:	b084      	sub	sp, #16
    3688:	af00      	add	r7, sp, #0
    368a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	681b      	ldr	r3, [r3, #0]
    3690:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3692:	687b      	ldr	r3, [r7, #4]
    3694:	681b      	ldr	r3, [r3, #0]
    3696:	0018      	movs	r0, r3
    3698:	4b09      	ldr	r3, [pc, #36]	; (36c0 <usart_enable+0x3c>)
    369a:	4798      	blx	r3
    369c:	0003      	movs	r3, r0
    369e:	0018      	movs	r0, r3
    36a0:	4b08      	ldr	r3, [pc, #32]	; (36c4 <usart_enable+0x40>)
    36a2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    36a4:	687b      	ldr	r3, [r7, #4]
    36a6:	0018      	movs	r0, r3
    36a8:	4b07      	ldr	r3, [pc, #28]	; (36c8 <usart_enable+0x44>)
    36aa:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    36ac:	68fb      	ldr	r3, [r7, #12]
    36ae:	681b      	ldr	r3, [r3, #0]
    36b0:	2202      	movs	r2, #2
    36b2:	431a      	orrs	r2, r3
    36b4:	68fb      	ldr	r3, [r7, #12]
    36b6:	601a      	str	r2, [r3, #0]
}
    36b8:	46c0      	nop			; (mov r8, r8)
    36ba:	46bd      	mov	sp, r7
    36bc:	b004      	add	sp, #16
    36be:	bd80      	pop	{r7, pc}
    36c0:	0000466d 	.word	0x0000466d
    36c4:	00003555 	.word	0x00003555
    36c8:	000035a1 	.word	0x000035a1

000036cc <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    36cc:	b580      	push	{r7, lr}
    36ce:	b082      	sub	sp, #8
    36d0:	af00      	add	r7, sp, #0
    36d2:	6078      	str	r0, [r7, #4]
    36d4:	000a      	movs	r2, r1
    36d6:	1cfb      	adds	r3, r7, #3
    36d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    36da:	687b      	ldr	r3, [r7, #4]
    36dc:	2231      	movs	r2, #49	; 0x31
    36de:	5c9b      	ldrb	r3, [r3, r2]
    36e0:	b25a      	sxtb	r2, r3
    36e2:	1cfb      	adds	r3, r7, #3
    36e4:	781b      	ldrb	r3, [r3, #0]
    36e6:	2101      	movs	r1, #1
    36e8:	4099      	lsls	r1, r3
    36ea:	000b      	movs	r3, r1
    36ec:	b25b      	sxtb	r3, r3
    36ee:	4313      	orrs	r3, r2
    36f0:	b25b      	sxtb	r3, r3
    36f2:	b2d9      	uxtb	r1, r3
    36f4:	687b      	ldr	r3, [r7, #4]
    36f6:	2231      	movs	r2, #49	; 0x31
    36f8:	5499      	strb	r1, [r3, r2]

}
    36fa:	46c0      	nop			; (mov r8, r8)
    36fc:	46bd      	mov	sp, r7
    36fe:	b002      	add	sp, #8
    3700:	bd80      	pop	{r7, pc}
	...

00003704 <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole(void)
{
    3704:	b580      	push	{r7, lr}
    3706:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    3708:	2380      	movs	r3, #128	; 0x80
    370a:	009a      	lsls	r2, r3, #2
    370c:	4b11      	ldr	r3, [pc, #68]	; (3754 <InitializeSerialConsole+0x50>)
    370e:	0011      	movs	r1, r2
    3710:	0018      	movs	r0, r3
    3712:	4b11      	ldr	r3, [pc, #68]	; (3758 <InitializeSerialConsole+0x54>)
    3714:	4798      	blx	r3
    3716:	0002      	movs	r2, r0
    3718:	4b10      	ldr	r3, [pc, #64]	; (375c <InitializeSerialConsole+0x58>)
    371a:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    371c:	2380      	movs	r3, #128	; 0x80
    371e:	009a      	lsls	r2, r3, #2
    3720:	4b0f      	ldr	r3, [pc, #60]	; (3760 <InitializeSerialConsole+0x5c>)
    3722:	0011      	movs	r1, r2
    3724:	0018      	movs	r0, r3
    3726:	4b0c      	ldr	r3, [pc, #48]	; (3758 <InitializeSerialConsole+0x54>)
    3728:	4798      	blx	r3
    372a:	0002      	movs	r2, r0
    372c:	4b0d      	ldr	r3, [pc, #52]	; (3764 <InitializeSerialConsole+0x60>)
    372e:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
    3730:	4b0d      	ldr	r3, [pc, #52]	; (3768 <InitializeSerialConsole+0x64>)
    3732:	4798      	blx	r3
	configure_usart_callbacks();
    3734:	4b0d      	ldr	r3, [pc, #52]	; (376c <InitializeSerialConsole+0x68>)
    3736:	4798      	blx	r3
	NVIC_SetPriority(SERCOM4_IRQn, 10);
    3738:	210a      	movs	r1, #10
    373a:	200d      	movs	r0, #13
    373c:	4b0c      	ldr	r3, [pc, #48]	; (3770 <InitializeSerialConsole+0x6c>)
    373e:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    3740:	490c      	ldr	r1, [pc, #48]	; (3774 <InitializeSerialConsole+0x70>)
    3742:	4b0d      	ldr	r3, [pc, #52]	; (3778 <InitializeSerialConsole+0x74>)
    3744:	2201      	movs	r2, #1
    3746:	0018      	movs	r0, r3
    3748:	4b0c      	ldr	r3, [pc, #48]	; (377c <InitializeSerialConsole+0x78>)
    374a:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
    374c:	46c0      	nop			; (mov r8, r8)
    374e:	46bd      	mov	sp, r7
    3750:	bd80      	pop	{r7, pc}
    3752:	46c0      	nop			; (mov r8, r8)
    3754:	200036b4 	.word	0x200036b4
    3758:	00003359 	.word	0x00003359
    375c:	200034ac 	.word	0x200034ac
    3760:	200034b4 	.word	0x200034b4
    3764:	200038b8 	.word	0x200038b8
    3768:	00003889 	.word	0x00003889
    376c:	00003901 	.word	0x00003901
    3770:	00003479 	.word	0x00003479
    3774:	200034b0 	.word	0x200034b0
    3778:	20003428 	.word	0x20003428
    377c:	00004215 	.word	0x00004215

00003780 <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(char * string)
{
    3780:	b580      	push	{r7, lr}
    3782:	b084      	sub	sp, #16
    3784:	af00      	add	r7, sp, #0
    3786:	6078      	str	r0, [r7, #4]
	if(string != NULL)
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	2b00      	cmp	r3, #0
    378c:	d02a      	beq.n	37e4 <SerialConsoleWriteString+0x64>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
    378e:	2300      	movs	r3, #0
    3790:	60fb      	str	r3, [r7, #12]
    3792:	e00b      	b.n	37ac <SerialConsoleWriteString+0x2c>
		{
			circular_buf_put(cbufTx, string[iter]);
    3794:	4b15      	ldr	r3, [pc, #84]	; (37ec <SerialConsoleWriteString+0x6c>)
    3796:	6818      	ldr	r0, [r3, #0]
    3798:	687a      	ldr	r2, [r7, #4]
    379a:	68fb      	ldr	r3, [r7, #12]
    379c:	18d3      	adds	r3, r2, r3
    379e:	781b      	ldrb	r3, [r3, #0]
    37a0:	0019      	movs	r1, r3
    37a2:	4b13      	ldr	r3, [pc, #76]	; (37f0 <SerialConsoleWriteString+0x70>)
    37a4:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
    37a6:	68fb      	ldr	r3, [r7, #12]
    37a8:	3301      	adds	r3, #1
    37aa:	60fb      	str	r3, [r7, #12]
    37ac:	687b      	ldr	r3, [r7, #4]
    37ae:	0018      	movs	r0, r3
    37b0:	4b10      	ldr	r3, [pc, #64]	; (37f4 <SerialConsoleWriteString+0x74>)
    37b2:	4798      	blx	r3
    37b4:	0002      	movs	r2, r0
    37b6:	68fb      	ldr	r3, [r7, #12]
    37b8:	429a      	cmp	r2, r3
    37ba:	d8eb      	bhi.n	3794 <SerialConsoleWriteString+0x14>
		}

		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    37bc:	4b0e      	ldr	r3, [pc, #56]	; (37f8 <SerialConsoleWriteString+0x78>)
    37be:	2101      	movs	r1, #1
    37c0:	0018      	movs	r0, r3
    37c2:	4b0e      	ldr	r3, [pc, #56]	; (37fc <SerialConsoleWriteString+0x7c>)
    37c4:	4798      	blx	r3
    37c6:	1e03      	subs	r3, r0, #0
    37c8:	d10c      	bne.n	37e4 <SerialConsoleWriteString+0x64>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    37ca:	4b08      	ldr	r3, [pc, #32]	; (37ec <SerialConsoleWriteString+0x6c>)
    37cc:	681b      	ldr	r3, [r3, #0]
    37ce:	4a0c      	ldr	r2, [pc, #48]	; (3800 <SerialConsoleWriteString+0x80>)
    37d0:	0011      	movs	r1, r2
    37d2:	0018      	movs	r0, r3
    37d4:	4b0b      	ldr	r3, [pc, #44]	; (3804 <SerialConsoleWriteString+0x84>)
    37d6:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    37d8:	4909      	ldr	r1, [pc, #36]	; (3800 <SerialConsoleWriteString+0x80>)
    37da:	4b07      	ldr	r3, [pc, #28]	; (37f8 <SerialConsoleWriteString+0x78>)
    37dc:	2201      	movs	r2, #1
    37de:	0018      	movs	r0, r3
    37e0:	4b09      	ldr	r3, [pc, #36]	; (3808 <SerialConsoleWriteString+0x88>)
    37e2:	4798      	blx	r3
		}
	}
}
    37e4:	46c0      	nop			; (mov r8, r8)
    37e6:	46bd      	mov	sp, r7
    37e8:	b004      	add	sp, #16
    37ea:	bd80      	pop	{r7, pc}
    37ec:	200038b8 	.word	0x200038b8
    37f0:	000033b9 	.word	0x000033b9
    37f4:	00005655 	.word	0x00005655
    37f8:	20003428 	.word	0x20003428
    37fc:	0000425d 	.word	0x0000425d
    3800:	200038b5 	.word	0x200038b5
    3804:	000033ed 	.word	0x000033ed
    3808:	000041cd 	.word	0x000041cd

0000380c <setLogLevel>:
* @param[in]    debugLevel The debug level to be set for the debug logger
* @note
*****************************************************************************/

void setLogLevel(enum eDebugLogLevels debugLevel)
{
    380c:	b580      	push	{r7, lr}
    380e:	b082      	sub	sp, #8
    3810:	af00      	add	r7, sp, #0
    3812:	0002      	movs	r2, r0
    3814:	1dfb      	adds	r3, r7, #7
    3816:	701a      	strb	r2, [r3, #0]
currentDebugLevel = debugLevel;
    3818:	4b03      	ldr	r3, [pc, #12]	; (3828 <setLogLevel+0x1c>)
    381a:	1dfa      	adds	r2, r7, #7
    381c:	7812      	ldrb	r2, [r2, #0]
    381e:	701a      	strb	r2, [r3, #0]

}
    3820:	46c0      	nop			; (mov r8, r8)
    3822:	46bd      	mov	sp, r7
    3824:	b002      	add	sp, #8
    3826:	bd80      	pop	{r7, pc}
    3828:	200038b4 	.word	0x200038b4

0000382c <LogMessage>:
* @brief
* @note
*****************************************************************************/	
char bufferMsg[80];
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
    382c:	b40e      	push	{r1, r2, r3}
    382e:	b580      	push	{r7, lr}
    3830:	b085      	sub	sp, #20
    3832:	af00      	add	r7, sp, #0
    3834:	0002      	movs	r2, r0
    3836:	1dfb      	adds	r3, r7, #7
    3838:	701a      	strb	r2, [r3, #0]
	if (level >= currentDebugLevel) {
    383a:	4b0f      	ldr	r3, [pc, #60]	; (3878 <LogMessage+0x4c>)
    383c:	781b      	ldrb	r3, [r3, #0]
    383e:	1dfa      	adds	r2, r7, #7
    3840:	7812      	ldrb	r2, [r2, #0]
    3842:	429a      	cmp	r2, r3
    3844:	d310      	bcc.n	3868 <LogMessage+0x3c>
	va_list aptr;
	uint8_t ret;
	va_start(aptr, format);
    3846:	2320      	movs	r3, #32
    3848:	18fb      	adds	r3, r7, r3
    384a:	60bb      	str	r3, [r7, #8]
	ret = vsprintf(bufferMsg, format, aptr);
    384c:	68ba      	ldr	r2, [r7, #8]
    384e:	69f9      	ldr	r1, [r7, #28]
    3850:	4b0a      	ldr	r3, [pc, #40]	; (387c <LogMessage+0x50>)
    3852:	0018      	movs	r0, r3
    3854:	4b0a      	ldr	r3, [pc, #40]	; (3880 <LogMessage+0x54>)
    3856:	4798      	blx	r3
    3858:	0002      	movs	r2, r0
    385a:	230f      	movs	r3, #15
    385c:	18fb      	adds	r3, r7, r3
    385e:	701a      	strb	r2, [r3, #0]
	va_end(aptr);
	
	SerialConsoleWriteString(bufferMsg);
    3860:	4b06      	ldr	r3, [pc, #24]	; (387c <LogMessage+0x50>)
    3862:	0018      	movs	r0, r3
    3864:	4b07      	ldr	r3, [pc, #28]	; (3884 <LogMessage+0x58>)
    3866:	4798      	blx	r3
	}
};
    3868:	46c0      	nop			; (mov r8, r8)
    386a:	46bd      	mov	sp, r7
    386c:	b005      	add	sp, #20
    386e:	bc80      	pop	{r7}
    3870:	bc08      	pop	{r3}
    3872:	b003      	add	sp, #12
    3874:	4718      	bx	r3
    3876:	46c0      	nop			; (mov r8, r8)
    3878:	200038b4 	.word	0x200038b4
    387c:	2000345c 	.word	0x2000345c
    3880:	000056e1 	.word	0x000056e1
    3884:	00003781 	.word	0x00003781

00003888 <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
    3888:	b580      	push	{r7, lr}
    388a:	b090      	sub	sp, #64	; 0x40
    388c:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    388e:	003b      	movs	r3, r7
    3890:	0018      	movs	r0, r3
    3892:	4b14      	ldr	r3, [pc, #80]	; (38e4 <configure_usart+0x5c>)
    3894:	4798      	blx	r3

	config_usart.baudrate    = 115200;
    3896:	003b      	movs	r3, r7
    3898:	22e1      	movs	r2, #225	; 0xe1
    389a:	0252      	lsls	r2, r2, #9
    389c:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    389e:	003b      	movs	r3, r7
    38a0:	22c4      	movs	r2, #196	; 0xc4
    38a2:	0392      	lsls	r2, r2, #14
    38a4:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    38a6:	003b      	movs	r3, r7
    38a8:	2201      	movs	r2, #1
    38aa:	4252      	negs	r2, r2
    38ac:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    38ae:	003b      	movs	r3, r7
    38b0:	2201      	movs	r2, #1
    38b2:	4252      	negs	r2, r2
    38b4:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    38b6:	003b      	movs	r3, r7
    38b8:	4a0b      	ldr	r2, [pc, #44]	; (38e8 <configure_usart+0x60>)
    38ba:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    38bc:	003b      	movs	r3, r7
    38be:	4a0b      	ldr	r2, [pc, #44]	; (38ec <configure_usart+0x64>)
    38c0:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
    38c2:	46c0      	nop			; (mov r8, r8)
    38c4:	003a      	movs	r2, r7
    38c6:	490a      	ldr	r1, [pc, #40]	; (38f0 <configure_usart+0x68>)
    38c8:	4b0a      	ldr	r3, [pc, #40]	; (38f4 <configure_usart+0x6c>)
    38ca:	0018      	movs	r0, r3
    38cc:	4b0a      	ldr	r3, [pc, #40]	; (38f8 <configure_usart+0x70>)
    38ce:	4798      	blx	r3
    38d0:	1e03      	subs	r3, r0, #0
    38d2:	d1f7      	bne.n	38c4 <configure_usart+0x3c>
					  &config_usart) != STATUS_OK) 
	{

	}
	
	usart_enable(&usart_instance);
    38d4:	4b07      	ldr	r3, [pc, #28]	; (38f4 <configure_usart+0x6c>)
    38d6:	0018      	movs	r0, r3
    38d8:	4b08      	ldr	r3, [pc, #32]	; (38fc <configure_usart+0x74>)
    38da:	4798      	blx	r3
}
    38dc:	46c0      	nop			; (mov r8, r8)
    38de:	46bd      	mov	sp, r7
    38e0:	b010      	add	sp, #64	; 0x40
    38e2:	bd80      	pop	{r7, pc}
    38e4:	000035c5 	.word	0x000035c5
    38e8:	002a0003 	.word	0x002a0003
    38ec:	002b0003 	.word	0x002b0003
    38f0:	42001800 	.word	0x42001800
    38f4:	20003428 	.word	0x20003428
    38f8:	00003dd1 	.word	0x00003dd1
    38fc:	00003685 	.word	0x00003685

00003900 <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
    3900:	b580      	push	{r7, lr}
    3902:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
    3904:	490c      	ldr	r1, [pc, #48]	; (3938 <configure_usart_callbacks+0x38>)
    3906:	4b0d      	ldr	r3, [pc, #52]	; (393c <configure_usart_callbacks+0x3c>)
    3908:	2200      	movs	r2, #0
    390a:	0018      	movs	r0, r3
    390c:	4b0c      	ldr	r3, [pc, #48]	; (3940 <configure_usart_callbacks+0x40>)
    390e:	4798      	blx	r3
							usart_write_callback, 
							USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    3910:	490c      	ldr	r1, [pc, #48]	; (3944 <configure_usart_callbacks+0x44>)
    3912:	4b0a      	ldr	r3, [pc, #40]	; (393c <configure_usart_callbacks+0x3c>)
    3914:	2201      	movs	r2, #1
    3916:	0018      	movs	r0, r3
    3918:	4b09      	ldr	r3, [pc, #36]	; (3940 <configure_usart_callbacks+0x40>)
    391a:	4798      	blx	r3
							usart_read_callback, 
							USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    391c:	4b07      	ldr	r3, [pc, #28]	; (393c <configure_usart_callbacks+0x3c>)
    391e:	2100      	movs	r1, #0
    3920:	0018      	movs	r0, r3
    3922:	4b09      	ldr	r3, [pc, #36]	; (3948 <configure_usart_callbacks+0x48>)
    3924:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    3926:	4b05      	ldr	r3, [pc, #20]	; (393c <configure_usart_callbacks+0x3c>)
    3928:	2101      	movs	r1, #1
    392a:	0018      	movs	r0, r3
    392c:	4b06      	ldr	r3, [pc, #24]	; (3948 <configure_usart_callbacks+0x48>)
    392e:	4798      	blx	r3
}
    3930:	46c0      	nop			; (mov r8, r8)
    3932:	46bd      	mov	sp, r7
    3934:	bd80      	pop	{r7, pc}
    3936:	46c0      	nop			; (mov r8, r8)
    3938:	000039b9 	.word	0x000039b9
    393c:	20003428 	.word	0x20003428
    3940:	00004185 	.word	0x00004185
    3944:	0000394d 	.word	0x0000394d
    3948:	000036cd 	.word	0x000036cd

0000394c <usart_read_callback>:
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
		Students to fill out. Please note that the code here is dummy code. It is only used to show you how some functions work.
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
    394c:	b580      	push	{r7, lr}
    394e:	b082      	sub	sp, #8
    3950:	af00      	add	r7, sp, #0
    3952:	6078      	str	r0, [r7, #4]
//
	//Try method 2
	//char rx2;
	//SerialConsoleReadCharacter(&rx2);
	
	if( latestRx != NULL) //Only continue if there are more characters to receive
    3954:	4b10      	ldr	r3, [pc, #64]	; (3998 <usart_read_callback+0x4c>)
    3956:	781b      	ldrb	r3, [r3, #0]
    3958:	2b00      	cmp	r3, #0
    395a:	d015      	beq.n	3988 <usart_read_callback+0x3c>
	{
		usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);
    395c:	490e      	ldr	r1, [pc, #56]	; (3998 <usart_read_callback+0x4c>)
    395e:	4b0f      	ldr	r3, [pc, #60]	; (399c <usart_read_callback+0x50>)
    3960:	2201      	movs	r2, #1
    3962:	0018      	movs	r0, r3
    3964:	4b0e      	ldr	r3, [pc, #56]	; (39a0 <usart_read_callback+0x54>)
    3966:	4798      	blx	r3
		SerialConsoleWriteString(&latestRx);
    3968:	4b0b      	ldr	r3, [pc, #44]	; (3998 <usart_read_callback+0x4c>)
    396a:	0018      	movs	r0, r3
    396c:	4b0d      	ldr	r3, [pc, #52]	; (39a4 <usart_read_callback+0x58>)
    396e:	4798      	blx	r3
		circular_buf_put(cbufRx, (uint8_t) latestRx);
    3970:	4b0d      	ldr	r3, [pc, #52]	; (39a8 <usart_read_callback+0x5c>)
    3972:	681a      	ldr	r2, [r3, #0]
    3974:	4b08      	ldr	r3, [pc, #32]	; (3998 <usart_read_callback+0x4c>)
    3976:	781b      	ldrb	r3, [r3, #0]
    3978:	0019      	movs	r1, r3
    397a:	0010      	movs	r0, r2
    397c:	4b0b      	ldr	r3, [pc, #44]	; (39ac <usart_read_callback+0x60>)
    397e:	4798      	blx	r3
		SerialConsoleWriteString("ffffff you!");
    3980:	4b0b      	ldr	r3, [pc, #44]	; (39b0 <usart_read_callback+0x64>)
    3982:	0018      	movs	r0, r3
    3984:	4b07      	ldr	r3, [pc, #28]	; (39a4 <usart_read_callback+0x58>)
    3986:	4798      	blx	r3
	}

	SerialConsoleWriteString("got you!");
    3988:	4b0a      	ldr	r3, [pc, #40]	; (39b4 <usart_read_callback+0x68>)
    398a:	0018      	movs	r0, r3
    398c:	4b05      	ldr	r3, [pc, #20]	; (39a4 <usart_read_callback+0x58>)
    398e:	4798      	blx	r3
}
    3990:	46c0      	nop			; (mov r8, r8)
    3992:	46bd      	mov	sp, r7
    3994:	b002      	add	sp, #8
    3996:	bd80      	pop	{r7, pc}
    3998:	200034b0 	.word	0x200034b0
    399c:	20003428 	.word	0x20003428
    39a0:	00004215 	.word	0x00004215
    39a4:	00003781 	.word	0x00003781
    39a8:	200034ac 	.word	0x200034ac
    39ac:	000033b9 	.word	0x000033b9
    39b0:	00005fd4 	.word	0x00005fd4
    39b4:	00005fe0 	.word	0x00005fe0

000039b8 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    39b8:	b580      	push	{r7, lr}
    39ba:	b082      	sub	sp, #8
    39bc:	af00      	add	r7, sp, #0
    39be:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    39c0:	4b09      	ldr	r3, [pc, #36]	; (39e8 <usart_write_callback+0x30>)
    39c2:	681b      	ldr	r3, [r3, #0]
    39c4:	4a09      	ldr	r2, [pc, #36]	; (39ec <usart_write_callback+0x34>)
    39c6:	0011      	movs	r1, r2
    39c8:	0018      	movs	r0, r3
    39ca:	4b09      	ldr	r3, [pc, #36]	; (39f0 <usart_write_callback+0x38>)
    39cc:	4798      	blx	r3
    39ce:	0003      	movs	r3, r0
    39d0:	3301      	adds	r3, #1
    39d2:	d005      	beq.n	39e0 <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    39d4:	4905      	ldr	r1, [pc, #20]	; (39ec <usart_write_callback+0x34>)
    39d6:	4b07      	ldr	r3, [pc, #28]	; (39f4 <usart_write_callback+0x3c>)
    39d8:	2201      	movs	r2, #1
    39da:	0018      	movs	r0, r3
    39dc:	4b06      	ldr	r3, [pc, #24]	; (39f8 <usart_write_callback+0x40>)
    39de:	4798      	blx	r3
	}
	
}
    39e0:	46c0      	nop			; (mov r8, r8)
    39e2:	46bd      	mov	sp, r7
    39e4:	b002      	add	sp, #8
    39e6:	bd80      	pop	{r7, pc}
    39e8:	200038b8 	.word	0x200038b8
    39ec:	200038b5 	.word	0x200038b5
    39f0:	000033ed 	.word	0x000033ed
    39f4:	20003428 	.word	0x20003428
    39f8:	000041cd 	.word	0x000041cd

000039fc <system_gclk_chan_get_config_defaults>:
{
    39fc:	b580      	push	{r7, lr}
    39fe:	b082      	sub	sp, #8
    3a00:	af00      	add	r7, sp, #0
    3a02:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3a04:	687b      	ldr	r3, [r7, #4]
    3a06:	2200      	movs	r2, #0
    3a08:	701a      	strb	r2, [r3, #0]
}
    3a0a:	46c0      	nop			; (mov r8, r8)
    3a0c:	46bd      	mov	sp, r7
    3a0e:	b002      	add	sp, #8
    3a10:	bd80      	pop	{r7, pc}
	...

00003a14 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3a14:	b580      	push	{r7, lr}
    3a16:	b082      	sub	sp, #8
    3a18:	af00      	add	r7, sp, #0
    3a1a:	0002      	movs	r2, r0
    3a1c:	6039      	str	r1, [r7, #0]
    3a1e:	1dfb      	adds	r3, r7, #7
    3a20:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3a22:	1dfb      	adds	r3, r7, #7
    3a24:	781b      	ldrb	r3, [r3, #0]
    3a26:	2b01      	cmp	r3, #1
    3a28:	d00a      	beq.n	3a40 <system_apb_clock_set_mask+0x2c>
    3a2a:	2b02      	cmp	r3, #2
    3a2c:	d00f      	beq.n	3a4e <system_apb_clock_set_mask+0x3a>
    3a2e:	2b00      	cmp	r3, #0
    3a30:	d114      	bne.n	3a5c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3a32:	4b0e      	ldr	r3, [pc, #56]	; (3a6c <system_apb_clock_set_mask+0x58>)
    3a34:	4a0d      	ldr	r2, [pc, #52]	; (3a6c <system_apb_clock_set_mask+0x58>)
    3a36:	6991      	ldr	r1, [r2, #24]
    3a38:	683a      	ldr	r2, [r7, #0]
    3a3a:	430a      	orrs	r2, r1
    3a3c:	619a      	str	r2, [r3, #24]
			break;
    3a3e:	e00f      	b.n	3a60 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3a40:	4b0a      	ldr	r3, [pc, #40]	; (3a6c <system_apb_clock_set_mask+0x58>)
    3a42:	4a0a      	ldr	r2, [pc, #40]	; (3a6c <system_apb_clock_set_mask+0x58>)
    3a44:	69d1      	ldr	r1, [r2, #28]
    3a46:	683a      	ldr	r2, [r7, #0]
    3a48:	430a      	orrs	r2, r1
    3a4a:	61da      	str	r2, [r3, #28]
			break;
    3a4c:	e008      	b.n	3a60 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3a4e:	4b07      	ldr	r3, [pc, #28]	; (3a6c <system_apb_clock_set_mask+0x58>)
    3a50:	4a06      	ldr	r2, [pc, #24]	; (3a6c <system_apb_clock_set_mask+0x58>)
    3a52:	6a11      	ldr	r1, [r2, #32]
    3a54:	683a      	ldr	r2, [r7, #0]
    3a56:	430a      	orrs	r2, r1
    3a58:	621a      	str	r2, [r3, #32]
			break;
    3a5a:	e001      	b.n	3a60 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3a5c:	2317      	movs	r3, #23
    3a5e:	e000      	b.n	3a62 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3a60:	2300      	movs	r3, #0
}
    3a62:	0018      	movs	r0, r3
    3a64:	46bd      	mov	sp, r7
    3a66:	b002      	add	sp, #8
    3a68:	bd80      	pop	{r7, pc}
    3a6a:	46c0      	nop			; (mov r8, r8)
    3a6c:	40000400 	.word	0x40000400

00003a70 <system_pinmux_get_config_defaults>:
{
    3a70:	b580      	push	{r7, lr}
    3a72:	b082      	sub	sp, #8
    3a74:	af00      	add	r7, sp, #0
    3a76:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3a78:	687b      	ldr	r3, [r7, #4]
    3a7a:	2280      	movs	r2, #128	; 0x80
    3a7c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3a7e:	687b      	ldr	r3, [r7, #4]
    3a80:	2200      	movs	r2, #0
    3a82:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3a84:	687b      	ldr	r3, [r7, #4]
    3a86:	2201      	movs	r2, #1
    3a88:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	2200      	movs	r2, #0
    3a8e:	70da      	strb	r2, [r3, #3]
}
    3a90:	46c0      	nop			; (mov r8, r8)
    3a92:	46bd      	mov	sp, r7
    3a94:	b002      	add	sp, #8
    3a96:	bd80      	pop	{r7, pc}

00003a98 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3a98:	b580      	push	{r7, lr}
    3a9a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3a9c:	4b05      	ldr	r3, [pc, #20]	; (3ab4 <system_is_debugger_present+0x1c>)
    3a9e:	789b      	ldrb	r3, [r3, #2]
    3aa0:	b2db      	uxtb	r3, r3
    3aa2:	001a      	movs	r2, r3
    3aa4:	2302      	movs	r3, #2
    3aa6:	4013      	ands	r3, r2
    3aa8:	1e5a      	subs	r2, r3, #1
    3aaa:	4193      	sbcs	r3, r2
    3aac:	b2db      	uxtb	r3, r3
}
    3aae:	0018      	movs	r0, r3
    3ab0:	46bd      	mov	sp, r7
    3ab2:	bd80      	pop	{r7, pc}
    3ab4:	41002000 	.word	0x41002000

00003ab8 <usart_is_syncing>:
{
    3ab8:	b580      	push	{r7, lr}
    3aba:	b084      	sub	sp, #16
    3abc:	af00      	add	r7, sp, #0
    3abe:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ac0:	687b      	ldr	r3, [r7, #4]
    3ac2:	681b      	ldr	r3, [r3, #0]
    3ac4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    3ac6:	68fb      	ldr	r3, [r7, #12]
    3ac8:	69db      	ldr	r3, [r3, #28]
    3aca:	1e5a      	subs	r2, r3, #1
    3acc:	4193      	sbcs	r3, r2
    3ace:	b2db      	uxtb	r3, r3
}
    3ad0:	0018      	movs	r0, r3
    3ad2:	46bd      	mov	sp, r7
    3ad4:	b004      	add	sp, #16
    3ad6:	bd80      	pop	{r7, pc}

00003ad8 <_usart_wait_for_sync>:
{
    3ad8:	b580      	push	{r7, lr}
    3ada:	b082      	sub	sp, #8
    3adc:	af00      	add	r7, sp, #0
    3ade:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    3ae0:	46c0      	nop			; (mov r8, r8)
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	0018      	movs	r0, r3
    3ae6:	4b04      	ldr	r3, [pc, #16]	; (3af8 <_usart_wait_for_sync+0x20>)
    3ae8:	4798      	blx	r3
    3aea:	1e03      	subs	r3, r0, #0
    3aec:	d1f9      	bne.n	3ae2 <_usart_wait_for_sync+0xa>
}
    3aee:	46c0      	nop			; (mov r8, r8)
    3af0:	46bd      	mov	sp, r7
    3af2:	b002      	add	sp, #8
    3af4:	bd80      	pop	{r7, pc}
    3af6:	46c0      	nop			; (mov r8, r8)
    3af8:	00003ab9 	.word	0x00003ab9

00003afc <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    3afc:	b5b0      	push	{r4, r5, r7, lr}
    3afe:	b08c      	sub	sp, #48	; 0x30
    3b00:	af02      	add	r7, sp, #8
    3b02:	6078      	str	r0, [r7, #4]
    3b04:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b06:	687b      	ldr	r3, [r7, #4]
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3b0c:	687b      	ldr	r3, [r7, #4]
    3b0e:	681b      	ldr	r3, [r3, #0]
    3b10:	0018      	movs	r0, r3
    3b12:	4ba9      	ldr	r3, [pc, #676]	; (3db8 <_usart_set_config+0x2bc>)
    3b14:	4798      	blx	r3
    3b16:	0003      	movs	r3, r0
    3b18:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3b1a:	697b      	ldr	r3, [r7, #20]
    3b1c:	3314      	adds	r3, #20
    3b1e:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    3b20:	2300      	movs	r3, #0
    3b22:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    3b24:	2300      	movs	r3, #0
    3b26:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    3b28:	230a      	movs	r3, #10
    3b2a:	18fb      	adds	r3, r7, r3
    3b2c:	2200      	movs	r2, #0
    3b2e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3b30:	231f      	movs	r3, #31
    3b32:	18fb      	adds	r3, r7, r3
    3b34:	2200      	movs	r2, #0
    3b36:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3b38:	231e      	movs	r3, #30
    3b3a:	18fb      	adds	r3, r7, r3
    3b3c:	2210      	movs	r2, #16
    3b3e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    3b40:	683b      	ldr	r3, [r7, #0]
    3b42:	8a1b      	ldrh	r3, [r3, #16]
    3b44:	2280      	movs	r2, #128	; 0x80
    3b46:	01d2      	lsls	r2, r2, #7
    3b48:	4293      	cmp	r3, r2
    3b4a:	d01c      	beq.n	3b86 <_usart_set_config+0x8a>
    3b4c:	2280      	movs	r2, #128	; 0x80
    3b4e:	01d2      	lsls	r2, r2, #7
    3b50:	4293      	cmp	r3, r2
    3b52:	dc06      	bgt.n	3b62 <_usart_set_config+0x66>
    3b54:	2b00      	cmp	r3, #0
    3b56:	d00d      	beq.n	3b74 <_usart_set_config+0x78>
    3b58:	2280      	movs	r2, #128	; 0x80
    3b5a:	0192      	lsls	r2, r2, #6
    3b5c:	4293      	cmp	r3, r2
    3b5e:	d024      	beq.n	3baa <_usart_set_config+0xae>
    3b60:	e035      	b.n	3bce <_usart_set_config+0xd2>
    3b62:	22c0      	movs	r2, #192	; 0xc0
    3b64:	01d2      	lsls	r2, r2, #7
    3b66:	4293      	cmp	r3, r2
    3b68:	d028      	beq.n	3bbc <_usart_set_config+0xc0>
    3b6a:	2280      	movs	r2, #128	; 0x80
    3b6c:	0212      	lsls	r2, r2, #8
    3b6e:	4293      	cmp	r3, r2
    3b70:	d012      	beq.n	3b98 <_usart_set_config+0x9c>
    3b72:	e02c      	b.n	3bce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3b74:	231f      	movs	r3, #31
    3b76:	18fb      	adds	r3, r7, r3
    3b78:	2200      	movs	r2, #0
    3b7a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3b7c:	231e      	movs	r3, #30
    3b7e:	18fb      	adds	r3, r7, r3
    3b80:	2210      	movs	r2, #16
    3b82:	701a      	strb	r2, [r3, #0]
			break;
    3b84:	e023      	b.n	3bce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3b86:	231f      	movs	r3, #31
    3b88:	18fb      	adds	r3, r7, r3
    3b8a:	2200      	movs	r2, #0
    3b8c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3b8e:	231e      	movs	r3, #30
    3b90:	18fb      	adds	r3, r7, r3
    3b92:	2208      	movs	r2, #8
    3b94:	701a      	strb	r2, [r3, #0]
			break;
    3b96:	e01a      	b.n	3bce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3b98:	231f      	movs	r3, #31
    3b9a:	18fb      	adds	r3, r7, r3
    3b9c:	2200      	movs	r2, #0
    3b9e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3ba0:	231e      	movs	r3, #30
    3ba2:	18fb      	adds	r3, r7, r3
    3ba4:	2203      	movs	r2, #3
    3ba6:	701a      	strb	r2, [r3, #0]
			break;
    3ba8:	e011      	b.n	3bce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3baa:	231f      	movs	r3, #31
    3bac:	18fb      	adds	r3, r7, r3
    3bae:	2201      	movs	r2, #1
    3bb0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3bb2:	231e      	movs	r3, #30
    3bb4:	18fb      	adds	r3, r7, r3
    3bb6:	2210      	movs	r2, #16
    3bb8:	701a      	strb	r2, [r3, #0]
			break;
    3bba:	e008      	b.n	3bce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3bbc:	231f      	movs	r3, #31
    3bbe:	18fb      	adds	r3, r7, r3
    3bc0:	2201      	movs	r2, #1
    3bc2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3bc4:	231e      	movs	r3, #30
    3bc6:	18fb      	adds	r3, r7, r3
    3bc8:	2208      	movs	r2, #8
    3bca:	701a      	strb	r2, [r3, #0]
			break;
    3bcc:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3bce:	683b      	ldr	r3, [r7, #0]
    3bd0:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    3bd2:	683b      	ldr	r3, [r7, #0]
    3bd4:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    3bd6:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3bd8:	683b      	ldr	r3, [r7, #0]
    3bda:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    3bdc:	4313      	orrs	r3, r2
		config->sample_rate |
    3bde:	683a      	ldr	r2, [r7, #0]
    3be0:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    3be2:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3be4:	683a      	ldr	r2, [r7, #0]
    3be6:	7e12      	ldrb	r2, [r2, #24]
    3be8:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    3bea:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3bec:	683a      	ldr	r2, [r7, #0]
    3bee:	2126      	movs	r1, #38	; 0x26
    3bf0:	5c52      	ldrb	r2, [r2, r1]
    3bf2:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    3bf4:	4313      	orrs	r3, r2
    3bf6:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    3bf8:	231d      	movs	r3, #29
    3bfa:	18fb      	adds	r3, r7, r3
    3bfc:	2200      	movs	r2, #0
    3bfe:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    3c00:	683b      	ldr	r3, [r7, #0]
    3c02:	685b      	ldr	r3, [r3, #4]
    3c04:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    3c06:	68fb      	ldr	r3, [r7, #12]
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d01e      	beq.n	3c4a <_usart_set_config+0x14e>
    3c0c:	2280      	movs	r2, #128	; 0x80
    3c0e:	0552      	lsls	r2, r2, #21
    3c10:	4293      	cmp	r3, r2
    3c12:	d14f      	bne.n	3cb4 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    3c14:	683b      	ldr	r3, [r7, #0]
    3c16:	2227      	movs	r2, #39	; 0x27
    3c18:	5c9b      	ldrb	r3, [r3, r2]
    3c1a:	2201      	movs	r2, #1
    3c1c:	4053      	eors	r3, r2
    3c1e:	b2db      	uxtb	r3, r3
    3c20:	2b00      	cmp	r3, #0
    3c22:	d046      	beq.n	3cb2 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3c24:	683b      	ldr	r3, [r7, #0]
    3c26:	6a1d      	ldr	r5, [r3, #32]
    3c28:	693b      	ldr	r3, [r7, #16]
    3c2a:	b2db      	uxtb	r3, r3
    3c2c:	0018      	movs	r0, r3
    3c2e:	4b63      	ldr	r3, [pc, #396]	; (3dbc <_usart_set_config+0x2c0>)
    3c30:	4798      	blx	r3
    3c32:	0001      	movs	r1, r0
    3c34:	231d      	movs	r3, #29
    3c36:	18fc      	adds	r4, r7, r3
    3c38:	230a      	movs	r3, #10
    3c3a:	18fb      	adds	r3, r7, r3
    3c3c:	001a      	movs	r2, r3
    3c3e:	0028      	movs	r0, r5
    3c40:	4b5f      	ldr	r3, [pc, #380]	; (3dc0 <_usart_set_config+0x2c4>)
    3c42:	4798      	blx	r3
    3c44:	0003      	movs	r3, r0
    3c46:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    3c48:	e033      	b.n	3cb2 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3c4a:	683b      	ldr	r3, [r7, #0]
    3c4c:	2227      	movs	r2, #39	; 0x27
    3c4e:	5c9b      	ldrb	r3, [r3, r2]
    3c50:	2b00      	cmp	r3, #0
    3c52:	d014      	beq.n	3c7e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    3c54:	683b      	ldr	r3, [r7, #0]
    3c56:	6a18      	ldr	r0, [r3, #32]
    3c58:	683b      	ldr	r3, [r7, #0]
    3c5a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    3c5c:	231d      	movs	r3, #29
    3c5e:	18fc      	adds	r4, r7, r3
    3c60:	231f      	movs	r3, #31
    3c62:	18fb      	adds	r3, r7, r3
    3c64:	781d      	ldrb	r5, [r3, #0]
    3c66:	230a      	movs	r3, #10
    3c68:	18fa      	adds	r2, r7, r3
    3c6a:	231e      	movs	r3, #30
    3c6c:	18fb      	adds	r3, r7, r3
    3c6e:	781b      	ldrb	r3, [r3, #0]
    3c70:	9300      	str	r3, [sp, #0]
    3c72:	002b      	movs	r3, r5
    3c74:	4d53      	ldr	r5, [pc, #332]	; (3dc4 <_usart_set_config+0x2c8>)
    3c76:	47a8      	blx	r5
    3c78:	0003      	movs	r3, r0
    3c7a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    3c7c:	e01a      	b.n	3cb4 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    3c7e:	683b      	ldr	r3, [r7, #0]
    3c80:	6a1d      	ldr	r5, [r3, #32]
    3c82:	693b      	ldr	r3, [r7, #16]
    3c84:	b2db      	uxtb	r3, r3
    3c86:	0018      	movs	r0, r3
    3c88:	4b4c      	ldr	r3, [pc, #304]	; (3dbc <_usart_set_config+0x2c0>)
    3c8a:	4798      	blx	r3
				status_code =
    3c8c:	231d      	movs	r3, #29
    3c8e:	18fc      	adds	r4, r7, r3
    3c90:	231f      	movs	r3, #31
    3c92:	18fb      	adds	r3, r7, r3
    3c94:	7819      	ldrb	r1, [r3, #0]
    3c96:	230a      	movs	r3, #10
    3c98:	18fa      	adds	r2, r7, r3
    3c9a:	231e      	movs	r3, #30
    3c9c:	18fb      	adds	r3, r7, r3
    3c9e:	781b      	ldrb	r3, [r3, #0]
    3ca0:	9300      	str	r3, [sp, #0]
    3ca2:	000b      	movs	r3, r1
    3ca4:	0001      	movs	r1, r0
    3ca6:	0028      	movs	r0, r5
    3ca8:	4d46      	ldr	r5, [pc, #280]	; (3dc4 <_usart_set_config+0x2c8>)
    3caa:	47a8      	blx	r5
    3cac:	0003      	movs	r3, r0
    3cae:	7023      	strb	r3, [r4, #0]
			break;
    3cb0:	e000      	b.n	3cb4 <_usart_set_config+0x1b8>
			break;
    3cb2:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    3cb4:	231d      	movs	r3, #29
    3cb6:	18fb      	adds	r3, r7, r3
    3cb8:	781b      	ldrb	r3, [r3, #0]
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d003      	beq.n	3cc6 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    3cbe:	231d      	movs	r3, #29
    3cc0:	18fb      	adds	r3, r7, r3
    3cc2:	781b      	ldrb	r3, [r3, #0]
    3cc4:	e073      	b.n	3dae <_usart_set_config+0x2b2>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    3cc6:	683b      	ldr	r3, [r7, #0]
    3cc8:	7e5b      	ldrb	r3, [r3, #25]
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d003      	beq.n	3cd6 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3cce:	683b      	ldr	r3, [r7, #0]
    3cd0:	7e9a      	ldrb	r2, [r3, #26]
    3cd2:	69bb      	ldr	r3, [r7, #24]
    3cd4:	739a      	strb	r2, [r3, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    3cd6:	230a      	movs	r3, #10
    3cd8:	18fb      	adds	r3, r7, r3
    3cda:	881a      	ldrh	r2, [r3, #0]
    3cdc:	69bb      	ldr	r3, [r7, #24]
    3cde:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    3ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3ce2:	68fb      	ldr	r3, [r7, #12]
    3ce4:	4313      	orrs	r3, r2
    3ce6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    3ce8:	683b      	ldr	r3, [r7, #0]
    3cea:	2227      	movs	r2, #39	; 0x27
    3cec:	5c9b      	ldrb	r3, [r3, r2]
    3cee:	2201      	movs	r2, #1
    3cf0:	4053      	eors	r3, r2
    3cf2:	b2db      	uxtb	r3, r3
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	d003      	beq.n	3d00 <_usart_set_config+0x204>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3cfa:	2204      	movs	r2, #4
    3cfc:	4313      	orrs	r3, r2
    3cfe:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3d00:	683b      	ldr	r3, [r7, #0]
    3d02:	7e5b      	ldrb	r3, [r3, #25]
    3d04:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3d06:	683b      	ldr	r3, [r7, #0]
    3d08:	7f1b      	ldrb	r3, [r3, #28]
    3d0a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3d0c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3d0e:	683b      	ldr	r3, [r7, #0]
    3d10:	7f5b      	ldrb	r3, [r3, #29]
    3d12:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3d14:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3d16:	683b      	ldr	r3, [r7, #0]
    3d18:	2124      	movs	r1, #36	; 0x24
    3d1a:	5c5b      	ldrb	r3, [r3, r1]
    3d1c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3d1e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3d20:	683b      	ldr	r3, [r7, #0]
    3d22:	2125      	movs	r1, #37	; 0x25
    3d24:	5c5b      	ldrb	r3, [r3, r1]
    3d26:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3d28:	4313      	orrs	r3, r2
	ctrlb =  
    3d2a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    3d2c:	683b      	ldr	r3, [r7, #0]
    3d2e:	7a9b      	ldrb	r3, [r3, #10]
    3d30:	001a      	movs	r2, r3
    3d32:	6a3b      	ldr	r3, [r7, #32]
    3d34:	4313      	orrs	r3, r2
    3d36:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    3d38:	683b      	ldr	r3, [r7, #0]
    3d3a:	7adb      	ldrb	r3, [r3, #11]
    3d3c:	001a      	movs	r2, r3
    3d3e:	6a3b      	ldr	r3, [r7, #32]
    3d40:	4313      	orrs	r3, r2
    3d42:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    3d44:	683b      	ldr	r3, [r7, #0]
    3d46:	891b      	ldrh	r3, [r3, #8]
    3d48:	2bff      	cmp	r3, #255	; 0xff
    3d4a:	d00b      	beq.n	3d64 <_usart_set_config+0x268>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d4e:	2280      	movs	r2, #128	; 0x80
    3d50:	0452      	lsls	r2, r2, #17
    3d52:	4313      	orrs	r3, r2
    3d54:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    3d56:	683b      	ldr	r3, [r7, #0]
    3d58:	891b      	ldrh	r3, [r3, #8]
    3d5a:	001a      	movs	r2, r3
    3d5c:	6a3b      	ldr	r3, [r7, #32]
    3d5e:	4313      	orrs	r3, r2
    3d60:	623b      	str	r3, [r7, #32]
    3d62:	e008      	b.n	3d76 <_usart_set_config+0x27a>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    3d64:	683b      	ldr	r3, [r7, #0]
    3d66:	7edb      	ldrb	r3, [r3, #27]
    3d68:	2b00      	cmp	r3, #0
    3d6a:	d004      	beq.n	3d76 <_usart_set_config+0x27a>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    3d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d6e:	2280      	movs	r2, #128	; 0x80
    3d70:	04d2      	lsls	r2, r2, #19
    3d72:	4313      	orrs	r3, r2
    3d74:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3d76:	683b      	ldr	r3, [r7, #0]
    3d78:	222c      	movs	r2, #44	; 0x2c
    3d7a:	5c9b      	ldrb	r3, [r3, r2]
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	d103      	bne.n	3d88 <_usart_set_config+0x28c>
    3d80:	4b11      	ldr	r3, [pc, #68]	; (3dc8 <_usart_set_config+0x2cc>)
    3d82:	4798      	blx	r3
    3d84:	1e03      	subs	r3, r0, #0
    3d86:	d003      	beq.n	3d90 <_usart_set_config+0x294>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d8a:	2280      	movs	r2, #128	; 0x80
    3d8c:	4313      	orrs	r3, r2
    3d8e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    3d90:	687b      	ldr	r3, [r7, #4]
    3d92:	0018      	movs	r0, r3
    3d94:	4b0d      	ldr	r3, [pc, #52]	; (3dcc <_usart_set_config+0x2d0>)
    3d96:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    3d98:	69bb      	ldr	r3, [r7, #24]
    3d9a:	6a3a      	ldr	r2, [r7, #32]
    3d9c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	0018      	movs	r0, r3
    3da2:	4b0a      	ldr	r3, [pc, #40]	; (3dcc <_usart_set_config+0x2d0>)
    3da4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    3da6:	69bb      	ldr	r3, [r7, #24]
    3da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3daa:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    3dac:	2300      	movs	r3, #0
}
    3dae:	0018      	movs	r0, r3
    3db0:	46bd      	mov	sp, r7
    3db2:	b00a      	add	sp, #40	; 0x28
    3db4:	bdb0      	pop	{r4, r5, r7, pc}
    3db6:	46c0      	nop			; (mov r8, r8)
    3db8:	000008f9 	.word	0x000008f9
    3dbc:	00004fd9 	.word	0x00004fd9
    3dc0:	00000473 	.word	0x00000473
    3dc4:	000004f1 	.word	0x000004f1
    3dc8:	00003a99 	.word	0x00003a99
    3dcc:	00003ad9 	.word	0x00003ad9

00003dd0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3dd0:	b590      	push	{r4, r7, lr}
    3dd2:	b093      	sub	sp, #76	; 0x4c
    3dd4:	af00      	add	r7, sp, #0
    3dd6:	60f8      	str	r0, [r7, #12]
    3dd8:	60b9      	str	r1, [r7, #8]
    3dda:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    3ddc:	233b      	movs	r3, #59	; 0x3b
    3dde:	18fb      	adds	r3, r7, r3
    3de0:	2200      	movs	r2, #0
    3de2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3de4:	68fb      	ldr	r3, [r7, #12]
    3de6:	68ba      	ldr	r2, [r7, #8]
    3de8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3dea:	68fb      	ldr	r3, [r7, #12]
    3dec:	681b      	ldr	r3, [r3, #0]
    3dee:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3df0:	68fb      	ldr	r3, [r7, #12]
    3df2:	681b      	ldr	r3, [r3, #0]
    3df4:	0018      	movs	r0, r3
    3df6:	4b86      	ldr	r3, [pc, #536]	; (4010 <usart_init+0x240>)
    3df8:	4798      	blx	r3
    3dfa:	0003      	movs	r3, r0
    3dfc:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3e00:	3302      	adds	r3, #2
    3e02:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3e06:	3314      	adds	r3, #20
    3e08:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3e0c:	681b      	ldr	r3, [r3, #0]
    3e0e:	2201      	movs	r2, #1
    3e10:	4013      	ands	r3, r2
    3e12:	d001      	beq.n	3e18 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3e14:	2305      	movs	r3, #5
    3e16:	e0f6      	b.n	4006 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3e1a:	681b      	ldr	r3, [r3, #0]
    3e1c:	2202      	movs	r2, #2
    3e1e:	4013      	ands	r3, r2
    3e20:	d001      	beq.n	3e26 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    3e22:	231c      	movs	r3, #28
    3e24:	e0ef      	b.n	4006 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3e26:	2201      	movs	r2, #1
    3e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3e2a:	409a      	lsls	r2, r3
    3e2c:	0013      	movs	r3, r2
    3e2e:	0019      	movs	r1, r3
    3e30:	2002      	movs	r0, #2
    3e32:	4b78      	ldr	r3, [pc, #480]	; (4014 <usart_init+0x244>)
    3e34:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3e36:	2324      	movs	r3, #36	; 0x24
    3e38:	18fb      	adds	r3, r7, r3
    3e3a:	0018      	movs	r0, r3
    3e3c:	4b76      	ldr	r3, [pc, #472]	; (4018 <usart_init+0x248>)
    3e3e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    3e40:	687b      	ldr	r3, [r7, #4]
    3e42:	222d      	movs	r2, #45	; 0x2d
    3e44:	5c9a      	ldrb	r2, [r3, r2]
    3e46:	2324      	movs	r3, #36	; 0x24
    3e48:	18fb      	adds	r3, r7, r3
    3e4a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e4e:	b2db      	uxtb	r3, r3
    3e50:	2224      	movs	r2, #36	; 0x24
    3e52:	18ba      	adds	r2, r7, r2
    3e54:	0011      	movs	r1, r2
    3e56:	0018      	movs	r0, r3
    3e58:	4b70      	ldr	r3, [pc, #448]	; (401c <usart_init+0x24c>)
    3e5a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e5e:	b2db      	uxtb	r3, r3
    3e60:	0018      	movs	r0, r3
    3e62:	4b6f      	ldr	r3, [pc, #444]	; (4020 <usart_init+0x250>)
    3e64:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3e66:	687b      	ldr	r3, [r7, #4]
    3e68:	222d      	movs	r2, #45	; 0x2d
    3e6a:	5c9b      	ldrb	r3, [r3, r2]
    3e6c:	2100      	movs	r1, #0
    3e6e:	0018      	movs	r0, r3
    3e70:	4b6c      	ldr	r3, [pc, #432]	; (4024 <usart_init+0x254>)
    3e72:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	7ada      	ldrb	r2, [r3, #11]
    3e78:	68fb      	ldr	r3, [r7, #12]
    3e7a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	2224      	movs	r2, #36	; 0x24
    3e80:	5c9a      	ldrb	r2, [r3, r2]
    3e82:	68fb      	ldr	r3, [r7, #12]
    3e84:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3e86:	687b      	ldr	r3, [r7, #4]
    3e88:	2225      	movs	r2, #37	; 0x25
    3e8a:	5c9a      	ldrb	r2, [r3, r2]
    3e8c:	68fb      	ldr	r3, [r7, #12]
    3e8e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    3e90:	687b      	ldr	r3, [r7, #4]
    3e92:	7eda      	ldrb	r2, [r3, #27]
    3e94:	68fb      	ldr	r3, [r7, #12]
    3e96:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	7f1a      	ldrb	r2, [r3, #28]
    3e9c:	68fb      	ldr	r3, [r7, #12]
    3e9e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    3ea0:	233b      	movs	r3, #59	; 0x3b
    3ea2:	18fc      	adds	r4, r7, r3
    3ea4:	687a      	ldr	r2, [r7, #4]
    3ea6:	68fb      	ldr	r3, [r7, #12]
    3ea8:	0011      	movs	r1, r2
    3eaa:	0018      	movs	r0, r3
    3eac:	4b5e      	ldr	r3, [pc, #376]	; (4028 <usart_init+0x258>)
    3eae:	4798      	blx	r3
    3eb0:	0003      	movs	r3, r0
    3eb2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    3eb4:	233b      	movs	r3, #59	; 0x3b
    3eb6:	18fb      	adds	r3, r7, r3
    3eb8:	781b      	ldrb	r3, [r3, #0]
    3eba:	2b00      	cmp	r3, #0
    3ebc:	d003      	beq.n	3ec6 <usart_init+0xf6>
		return status_code;
    3ebe:	233b      	movs	r3, #59	; 0x3b
    3ec0:	18fb      	adds	r3, r7, r3
    3ec2:	781b      	ldrb	r3, [r3, #0]
    3ec4:	e09f      	b.n	4006 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3ec6:	2320      	movs	r3, #32
    3ec8:	18fb      	adds	r3, r7, r3
    3eca:	0018      	movs	r0, r3
    3ecc:	4b57      	ldr	r3, [pc, #348]	; (402c <usart_init+0x25c>)
    3ece:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3ed0:	2320      	movs	r3, #32
    3ed2:	18fb      	adds	r3, r7, r3
    3ed4:	2200      	movs	r2, #0
    3ed6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3ed8:	2320      	movs	r3, #32
    3eda:	18fb      	adds	r3, r7, r3
    3edc:	2200      	movs	r2, #0
    3ede:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    3ee0:	687b      	ldr	r3, [r7, #4]
    3ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    3ee4:	2310      	movs	r3, #16
    3ee6:	18fb      	adds	r3, r7, r3
    3ee8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    3eee:	2310      	movs	r3, #16
    3ef0:	18fb      	adds	r3, r7, r3
    3ef2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    3ef4:	687b      	ldr	r3, [r7, #4]
    3ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    3ef8:	2310      	movs	r3, #16
    3efa:	18fb      	adds	r3, r7, r3
    3efc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    3f02:	2310      	movs	r3, #16
    3f04:	18fb      	adds	r3, r7, r3
    3f06:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3f08:	2347      	movs	r3, #71	; 0x47
    3f0a:	18fb      	adds	r3, r7, r3
    3f0c:	2200      	movs	r2, #0
    3f0e:	701a      	strb	r2, [r3, #0]
    3f10:	e02c      	b.n	3f6c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3f12:	2347      	movs	r3, #71	; 0x47
    3f14:	18fb      	adds	r3, r7, r3
    3f16:	781a      	ldrb	r2, [r3, #0]
    3f18:	2310      	movs	r3, #16
    3f1a:	18fb      	adds	r3, r7, r3
    3f1c:	0092      	lsls	r2, r2, #2
    3f1e:	58d3      	ldr	r3, [r2, r3]
    3f20:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    3f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3f24:	2b00      	cmp	r3, #0
    3f26:	d109      	bne.n	3f3c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3f28:	2347      	movs	r3, #71	; 0x47
    3f2a:	18fb      	adds	r3, r7, r3
    3f2c:	781a      	ldrb	r2, [r3, #0]
    3f2e:	68bb      	ldr	r3, [r7, #8]
    3f30:	0011      	movs	r1, r2
    3f32:	0018      	movs	r0, r3
    3f34:	4b3e      	ldr	r3, [pc, #248]	; (4030 <usart_init+0x260>)
    3f36:	4798      	blx	r3
    3f38:	0003      	movs	r3, r0
    3f3a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3f3e:	3301      	adds	r3, #1
    3f40:	d00d      	beq.n	3f5e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3f44:	b2da      	uxtb	r2, r3
    3f46:	2320      	movs	r3, #32
    3f48:	18fb      	adds	r3, r7, r3
    3f4a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3f4e:	0c1b      	lsrs	r3, r3, #16
    3f50:	b2db      	uxtb	r3, r3
    3f52:	2220      	movs	r2, #32
    3f54:	18ba      	adds	r2, r7, r2
    3f56:	0011      	movs	r1, r2
    3f58:	0018      	movs	r0, r3
    3f5a:	4b36      	ldr	r3, [pc, #216]	; (4034 <usart_init+0x264>)
    3f5c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    3f5e:	2347      	movs	r3, #71	; 0x47
    3f60:	18fb      	adds	r3, r7, r3
    3f62:	781a      	ldrb	r2, [r3, #0]
    3f64:	2347      	movs	r3, #71	; 0x47
    3f66:	18fb      	adds	r3, r7, r3
    3f68:	3201      	adds	r2, #1
    3f6a:	701a      	strb	r2, [r3, #0]
    3f6c:	2347      	movs	r3, #71	; 0x47
    3f6e:	18fb      	adds	r3, r7, r3
    3f70:	781b      	ldrb	r3, [r3, #0]
    3f72:	2b03      	cmp	r3, #3
    3f74:	d9cd      	bls.n	3f12 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    3f76:	2300      	movs	r3, #0
    3f78:	63fb      	str	r3, [r7, #60]	; 0x3c
    3f7a:	e00a      	b.n	3f92 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    3f7c:	68fa      	ldr	r2, [r7, #12]
    3f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f80:	3302      	adds	r3, #2
    3f82:	009b      	lsls	r3, r3, #2
    3f84:	18d3      	adds	r3, r2, r3
    3f86:	3304      	adds	r3, #4
    3f88:	2200      	movs	r2, #0
    3f8a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    3f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f8e:	3301      	adds	r3, #1
    3f90:	63fb      	str	r3, [r7, #60]	; 0x3c
    3f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f94:	2b05      	cmp	r3, #5
    3f96:	d9f1      	bls.n	3f7c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    3f98:	68fb      	ldr	r3, [r7, #12]
    3f9a:	2200      	movs	r2, #0
    3f9c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    3f9e:	68fb      	ldr	r3, [r7, #12]
    3fa0:	2200      	movs	r2, #0
    3fa2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    3fa4:	68fb      	ldr	r3, [r7, #12]
    3fa6:	2200      	movs	r2, #0
    3fa8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    3faa:	68fb      	ldr	r3, [r7, #12]
    3fac:	2200      	movs	r2, #0
    3fae:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    3fb0:	68fb      	ldr	r3, [r7, #12]
    3fb2:	2230      	movs	r2, #48	; 0x30
    3fb4:	2100      	movs	r1, #0
    3fb6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    3fb8:	68fb      	ldr	r3, [r7, #12]
    3fba:	2231      	movs	r2, #49	; 0x31
    3fbc:	2100      	movs	r1, #0
    3fbe:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    3fc0:	68fb      	ldr	r3, [r7, #12]
    3fc2:	2232      	movs	r2, #50	; 0x32
    3fc4:	2100      	movs	r1, #0
    3fc6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    3fc8:	68fb      	ldr	r3, [r7, #12]
    3fca:	2233      	movs	r2, #51	; 0x33
    3fcc:	2100      	movs	r1, #0
    3fce:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3fd0:	68fb      	ldr	r3, [r7, #12]
    3fd2:	681b      	ldr	r3, [r3, #0]
    3fd4:	2227      	movs	r2, #39	; 0x27
    3fd6:	18bc      	adds	r4, r7, r2
    3fd8:	0018      	movs	r0, r3
    3fda:	4b0d      	ldr	r3, [pc, #52]	; (4010 <usart_init+0x240>)
    3fdc:	4798      	blx	r3
    3fde:	0003      	movs	r3, r0
    3fe0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    3fe2:	4a15      	ldr	r2, [pc, #84]	; (4038 <usart_init+0x268>)
    3fe4:	2327      	movs	r3, #39	; 0x27
    3fe6:	18fb      	adds	r3, r7, r3
    3fe8:	781b      	ldrb	r3, [r3, #0]
    3fea:	0011      	movs	r1, r2
    3fec:	0018      	movs	r0, r3
    3fee:	4b13      	ldr	r3, [pc, #76]	; (403c <usart_init+0x26c>)
    3ff0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3ff2:	2327      	movs	r3, #39	; 0x27
    3ff4:	18fb      	adds	r3, r7, r3
    3ff6:	781a      	ldrb	r2, [r3, #0]
    3ff8:	4b11      	ldr	r3, [pc, #68]	; (4040 <usart_init+0x270>)
    3ffa:	0092      	lsls	r2, r2, #2
    3ffc:	68f9      	ldr	r1, [r7, #12]
    3ffe:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    4000:	233b      	movs	r3, #59	; 0x3b
    4002:	18fb      	adds	r3, r7, r3
    4004:	781b      	ldrb	r3, [r3, #0]
}
    4006:	0018      	movs	r0, r3
    4008:	46bd      	mov	sp, r7
    400a:	b013      	add	sp, #76	; 0x4c
    400c:	bd90      	pop	{r4, r7, pc}
    400e:	46c0      	nop			; (mov r8, r8)
    4010:	000008f9 	.word	0x000008f9
    4014:	00003a15 	.word	0x00003a15
    4018:	000039fd 	.word	0x000039fd
    401c:	00004eb5 	.word	0x00004eb5
    4020:	00004ef9 	.word	0x00004ef9
    4024:	000006b1 	.word	0x000006b1
    4028:	00003afd 	.word	0x00003afd
    402c:	00003a71 	.word	0x00003a71
    4030:	0000073d 	.word	0x0000073d
    4034:	00000ab9 	.word	0x00000ab9
    4038:	000042ad 	.word	0x000042ad
    403c:	00004601 	.word	0x00004601
    4040:	200038bc 	.word	0x200038bc

00004044 <system_interrupt_enter_critical_section>:
{
    4044:	b580      	push	{r7, lr}
    4046:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    4048:	4b02      	ldr	r3, [pc, #8]	; (4054 <system_interrupt_enter_critical_section+0x10>)
    404a:	4798      	blx	r3
}
    404c:	46c0      	nop			; (mov r8, r8)
    404e:	46bd      	mov	sp, r7
    4050:	bd80      	pop	{r7, pc}
    4052:	46c0      	nop			; (mov r8, r8)
    4054:	00000115 	.word	0x00000115

00004058 <system_interrupt_leave_critical_section>:
{
    4058:	b580      	push	{r7, lr}
    405a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    405c:	4b02      	ldr	r3, [pc, #8]	; (4068 <system_interrupt_leave_critical_section+0x10>)
    405e:	4798      	blx	r3
}
    4060:	46c0      	nop			; (mov r8, r8)
    4062:	46bd      	mov	sp, r7
    4064:	bd80      	pop	{r7, pc}
    4066:	46c0      	nop			; (mov r8, r8)
    4068:	00000169 	.word	0x00000169

0000406c <usart_is_syncing>:
{
    406c:	b580      	push	{r7, lr}
    406e:	b084      	sub	sp, #16
    4070:	af00      	add	r7, sp, #0
    4072:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	681b      	ldr	r3, [r3, #0]
    4078:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    407a:	68fb      	ldr	r3, [r7, #12]
    407c:	69db      	ldr	r3, [r3, #28]
    407e:	1e5a      	subs	r2, r3, #1
    4080:	4193      	sbcs	r3, r2
    4082:	b2db      	uxtb	r3, r3
}
    4084:	0018      	movs	r0, r3
    4086:	46bd      	mov	sp, r7
    4088:	b004      	add	sp, #16
    408a:	bd80      	pop	{r7, pc}

0000408c <_usart_wait_for_sync>:
{
    408c:	b580      	push	{r7, lr}
    408e:	b082      	sub	sp, #8
    4090:	af00      	add	r7, sp, #0
    4092:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    4094:	46c0      	nop			; (mov r8, r8)
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	0018      	movs	r0, r3
    409a:	4b04      	ldr	r3, [pc, #16]	; (40ac <_usart_wait_for_sync+0x20>)
    409c:	4798      	blx	r3
    409e:	1e03      	subs	r3, r0, #0
    40a0:	d1f9      	bne.n	4096 <_usart_wait_for_sync+0xa>
}
    40a2:	46c0      	nop			; (mov r8, r8)
    40a4:	46bd      	mov	sp, r7
    40a6:	b002      	add	sp, #8
    40a8:	bd80      	pop	{r7, pc}
    40aa:	46c0      	nop			; (mov r8, r8)
    40ac:	0000406d 	.word	0x0000406d

000040b0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    40b0:	b580      	push	{r7, lr}
    40b2:	b086      	sub	sp, #24
    40b4:	af00      	add	r7, sp, #0
    40b6:	60f8      	str	r0, [r7, #12]
    40b8:	60b9      	str	r1, [r7, #8]
    40ba:	1dbb      	adds	r3, r7, #6
    40bc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    40be:	68fb      	ldr	r3, [r7, #12]
    40c0:	681b      	ldr	r3, [r3, #0]
    40c2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    40c4:	4b0f      	ldr	r3, [pc, #60]	; (4104 <_usart_write_buffer+0x54>)
    40c6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    40c8:	68fb      	ldr	r3, [r7, #12]
    40ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    40cc:	b29b      	uxth	r3, r3
    40ce:	2b00      	cmp	r3, #0
    40d0:	d003      	beq.n	40da <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    40d2:	4b0d      	ldr	r3, [pc, #52]	; (4108 <_usart_write_buffer+0x58>)
    40d4:	4798      	blx	r3
		return STATUS_BUSY;
    40d6:	2305      	movs	r3, #5
    40d8:	e010      	b.n	40fc <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    40da:	68fb      	ldr	r3, [r7, #12]
    40dc:	1dba      	adds	r2, r7, #6
    40de:	8812      	ldrh	r2, [r2, #0]
    40e0:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    40e2:	4b09      	ldr	r3, [pc, #36]	; (4108 <_usart_write_buffer+0x58>)
    40e4:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    40e6:	68fb      	ldr	r3, [r7, #12]
    40e8:	68ba      	ldr	r2, [r7, #8]
    40ea:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    40ec:	68fb      	ldr	r3, [r7, #12]
    40ee:	2233      	movs	r2, #51	; 0x33
    40f0:	2105      	movs	r1, #5
    40f2:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    40f4:	697b      	ldr	r3, [r7, #20]
    40f6:	2201      	movs	r2, #1
    40f8:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    40fa:	2300      	movs	r3, #0
}
    40fc:	0018      	movs	r0, r3
    40fe:	46bd      	mov	sp, r7
    4100:	b006      	add	sp, #24
    4102:	bd80      	pop	{r7, pc}
    4104:	00004045 	.word	0x00004045
    4108:	00004059 	.word	0x00004059

0000410c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    410c:	b580      	push	{r7, lr}
    410e:	b086      	sub	sp, #24
    4110:	af00      	add	r7, sp, #0
    4112:	60f8      	str	r0, [r7, #12]
    4114:	60b9      	str	r1, [r7, #8]
    4116:	1dbb      	adds	r3, r7, #6
    4118:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    411a:	68fb      	ldr	r3, [r7, #12]
    411c:	681b      	ldr	r3, [r3, #0]
    411e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    4120:	4b16      	ldr	r3, [pc, #88]	; (417c <_usart_read_buffer+0x70>)
    4122:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    4124:	68fb      	ldr	r3, [r7, #12]
    4126:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    4128:	b29b      	uxth	r3, r3
    412a:	2b00      	cmp	r3, #0
    412c:	d003      	beq.n	4136 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    412e:	4b14      	ldr	r3, [pc, #80]	; (4180 <_usart_read_buffer+0x74>)
    4130:	4798      	blx	r3
		return STATUS_BUSY;
    4132:	2305      	movs	r3, #5
    4134:	e01e      	b.n	4174 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    4136:	68fb      	ldr	r3, [r7, #12]
    4138:	1dba      	adds	r2, r7, #6
    413a:	8812      	ldrh	r2, [r2, #0]
    413c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    413e:	4b10      	ldr	r3, [pc, #64]	; (4180 <_usart_read_buffer+0x74>)
    4140:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    4142:	68fb      	ldr	r3, [r7, #12]
    4144:	68ba      	ldr	r2, [r7, #8]
    4146:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    4148:	68fb      	ldr	r3, [r7, #12]
    414a:	2232      	movs	r2, #50	; 0x32
    414c:	2105      	movs	r1, #5
    414e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    4150:	697b      	ldr	r3, [r7, #20]
    4152:	2204      	movs	r2, #4
    4154:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    4156:	68fb      	ldr	r3, [r7, #12]
    4158:	7a1b      	ldrb	r3, [r3, #8]
    415a:	2b00      	cmp	r3, #0
    415c:	d002      	beq.n	4164 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    415e:	697b      	ldr	r3, [r7, #20]
    4160:	2220      	movs	r2, #32
    4162:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    4164:	68fb      	ldr	r3, [r7, #12]
    4166:	7a5b      	ldrb	r3, [r3, #9]
    4168:	2b00      	cmp	r3, #0
    416a:	d002      	beq.n	4172 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    416c:	697b      	ldr	r3, [r7, #20]
    416e:	2208      	movs	r2, #8
    4170:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    4172:	2300      	movs	r3, #0
}
    4174:	0018      	movs	r0, r3
    4176:	46bd      	mov	sp, r7
    4178:	b006      	add	sp, #24
    417a:	bd80      	pop	{r7, pc}
    417c:	00004045 	.word	0x00004045
    4180:	00004059 	.word	0x00004059

00004184 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    4184:	b580      	push	{r7, lr}
    4186:	b084      	sub	sp, #16
    4188:	af00      	add	r7, sp, #0
    418a:	60f8      	str	r0, [r7, #12]
    418c:	60b9      	str	r1, [r7, #8]
    418e:	1dfb      	adds	r3, r7, #7
    4190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4192:	1dfb      	adds	r3, r7, #7
    4194:	781b      	ldrb	r3, [r3, #0]
    4196:	68fa      	ldr	r2, [r7, #12]
    4198:	3302      	adds	r3, #2
    419a:	009b      	lsls	r3, r3, #2
    419c:	18d3      	adds	r3, r2, r3
    419e:	3304      	adds	r3, #4
    41a0:	68ba      	ldr	r2, [r7, #8]
    41a2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    41a4:	68fb      	ldr	r3, [r7, #12]
    41a6:	2230      	movs	r2, #48	; 0x30
    41a8:	5c9b      	ldrb	r3, [r3, r2]
    41aa:	b25a      	sxtb	r2, r3
    41ac:	1dfb      	adds	r3, r7, #7
    41ae:	781b      	ldrb	r3, [r3, #0]
    41b0:	2101      	movs	r1, #1
    41b2:	4099      	lsls	r1, r3
    41b4:	000b      	movs	r3, r1
    41b6:	b25b      	sxtb	r3, r3
    41b8:	4313      	orrs	r3, r2
    41ba:	b25b      	sxtb	r3, r3
    41bc:	b2d9      	uxtb	r1, r3
    41be:	68fb      	ldr	r3, [r7, #12]
    41c0:	2230      	movs	r2, #48	; 0x30
    41c2:	5499      	strb	r1, [r3, r2]
}
    41c4:	46c0      	nop			; (mov r8, r8)
    41c6:	46bd      	mov	sp, r7
    41c8:	b004      	add	sp, #16
    41ca:	bd80      	pop	{r7, pc}

000041cc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    41cc:	b580      	push	{r7, lr}
    41ce:	b084      	sub	sp, #16
    41d0:	af00      	add	r7, sp, #0
    41d2:	60f8      	str	r0, [r7, #12]
    41d4:	60b9      	str	r1, [r7, #8]
    41d6:	1dbb      	adds	r3, r7, #6
    41d8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    41da:	1dbb      	adds	r3, r7, #6
    41dc:	881b      	ldrh	r3, [r3, #0]
    41de:	2b00      	cmp	r3, #0
    41e0:	d101      	bne.n	41e6 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    41e2:	2317      	movs	r3, #23
    41e4:	e010      	b.n	4208 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    41e6:	68fb      	ldr	r3, [r7, #12]
    41e8:	79db      	ldrb	r3, [r3, #7]
    41ea:	2201      	movs	r2, #1
    41ec:	4053      	eors	r3, r2
    41ee:	b2db      	uxtb	r3, r3
    41f0:	2b00      	cmp	r3, #0
    41f2:	d001      	beq.n	41f8 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    41f4:	231c      	movs	r3, #28
    41f6:	e007      	b.n	4208 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    41f8:	1dbb      	adds	r3, r7, #6
    41fa:	881a      	ldrh	r2, [r3, #0]
    41fc:	68b9      	ldr	r1, [r7, #8]
    41fe:	68fb      	ldr	r3, [r7, #12]
    4200:	0018      	movs	r0, r3
    4202:	4b03      	ldr	r3, [pc, #12]	; (4210 <usart_write_buffer_job+0x44>)
    4204:	4798      	blx	r3
    4206:	0003      	movs	r3, r0
}
    4208:	0018      	movs	r0, r3
    420a:	46bd      	mov	sp, r7
    420c:	b004      	add	sp, #16
    420e:	bd80      	pop	{r7, pc}
    4210:	000040b1 	.word	0x000040b1

00004214 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4214:	b580      	push	{r7, lr}
    4216:	b084      	sub	sp, #16
    4218:	af00      	add	r7, sp, #0
    421a:	60f8      	str	r0, [r7, #12]
    421c:	60b9      	str	r1, [r7, #8]
    421e:	1dbb      	adds	r3, r7, #6
    4220:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    4222:	1dbb      	adds	r3, r7, #6
    4224:	881b      	ldrh	r3, [r3, #0]
    4226:	2b00      	cmp	r3, #0
    4228:	d101      	bne.n	422e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    422a:	2317      	movs	r3, #23
    422c:	e010      	b.n	4250 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    422e:	68fb      	ldr	r3, [r7, #12]
    4230:	799b      	ldrb	r3, [r3, #6]
    4232:	2201      	movs	r2, #1
    4234:	4053      	eors	r3, r2
    4236:	b2db      	uxtb	r3, r3
    4238:	2b00      	cmp	r3, #0
    423a:	d001      	beq.n	4240 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    423c:	231c      	movs	r3, #28
    423e:	e007      	b.n	4250 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    4240:	1dbb      	adds	r3, r7, #6
    4242:	881a      	ldrh	r2, [r3, #0]
    4244:	68b9      	ldr	r1, [r7, #8]
    4246:	68fb      	ldr	r3, [r7, #12]
    4248:	0018      	movs	r0, r3
    424a:	4b03      	ldr	r3, [pc, #12]	; (4258 <usart_read_buffer_job+0x44>)
    424c:	4798      	blx	r3
    424e:	0003      	movs	r3, r0
}
    4250:	0018      	movs	r0, r3
    4252:	46bd      	mov	sp, r7
    4254:	b004      	add	sp, #16
    4256:	bd80      	pop	{r7, pc}
    4258:	0000410d 	.word	0x0000410d

0000425c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    425c:	b580      	push	{r7, lr}
    425e:	b084      	sub	sp, #16
    4260:	af00      	add	r7, sp, #0
    4262:	6078      	str	r0, [r7, #4]
    4264:	000a      	movs	r2, r1
    4266:	1cfb      	adds	r3, r7, #3
    4268:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    426a:	1cfb      	adds	r3, r7, #3
    426c:	781b      	ldrb	r3, [r3, #0]
    426e:	2b00      	cmp	r3, #0
    4270:	d002      	beq.n	4278 <usart_get_job_status+0x1c>
    4272:	2b01      	cmp	r3, #1
    4274:	d007      	beq.n	4286 <usart_get_job_status+0x2a>
    4276:	e00d      	b.n	4294 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    4278:	230f      	movs	r3, #15
    427a:	18fb      	adds	r3, r7, r3
    427c:	687a      	ldr	r2, [r7, #4]
    427e:	2132      	movs	r1, #50	; 0x32
    4280:	5c52      	ldrb	r2, [r2, r1]
    4282:	701a      	strb	r2, [r3, #0]
			break;
    4284:	e00b      	b.n	429e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    4286:	230f      	movs	r3, #15
    4288:	18fb      	adds	r3, r7, r3
    428a:	687a      	ldr	r2, [r7, #4]
    428c:	2133      	movs	r1, #51	; 0x33
    428e:	5c52      	ldrb	r2, [r2, r1]
    4290:	701a      	strb	r2, [r3, #0]
			break;
    4292:	e004      	b.n	429e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    4294:	230f      	movs	r3, #15
    4296:	18fb      	adds	r3, r7, r3
    4298:	2217      	movs	r2, #23
    429a:	701a      	strb	r2, [r3, #0]
			break;
    429c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    429e:	230f      	movs	r3, #15
    42a0:	18fb      	adds	r3, r7, r3
    42a2:	781b      	ldrb	r3, [r3, #0]
}
    42a4:	0018      	movs	r0, r3
    42a6:	46bd      	mov	sp, r7
    42a8:	b004      	add	sp, #16
    42aa:	bd80      	pop	{r7, pc}

000042ac <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    42ac:	b580      	push	{r7, lr}
    42ae:	b088      	sub	sp, #32
    42b0:	af00      	add	r7, sp, #0
    42b2:	0002      	movs	r2, r0
    42b4:	1dfb      	adds	r3, r7, #7
    42b6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    42b8:	1dfb      	adds	r3, r7, #7
    42ba:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    42bc:	4ba3      	ldr	r3, [pc, #652]	; (454c <_usart_interrupt_handler+0x2a0>)
    42be:	0092      	lsls	r2, r2, #2
    42c0:	58d3      	ldr	r3, [r2, r3]
    42c2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    42c4:	69bb      	ldr	r3, [r7, #24]
    42c6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    42c8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    42ca:	69bb      	ldr	r3, [r7, #24]
    42cc:	0018      	movs	r0, r3
    42ce:	4ba0      	ldr	r3, [pc, #640]	; (4550 <_usart_interrupt_handler+0x2a4>)
    42d0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    42d2:	697b      	ldr	r3, [r7, #20]
    42d4:	7e1b      	ldrb	r3, [r3, #24]
    42d6:	b2da      	uxtb	r2, r3
    42d8:	2312      	movs	r3, #18
    42da:	18fb      	adds	r3, r7, r3
    42dc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    42de:	697b      	ldr	r3, [r7, #20]
    42e0:	7d9b      	ldrb	r3, [r3, #22]
    42e2:	b2db      	uxtb	r3, r3
    42e4:	b29a      	uxth	r2, r3
    42e6:	2312      	movs	r3, #18
    42e8:	18fb      	adds	r3, r7, r3
    42ea:	2112      	movs	r1, #18
    42ec:	1879      	adds	r1, r7, r1
    42ee:	8809      	ldrh	r1, [r1, #0]
    42f0:	400a      	ands	r2, r1
    42f2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    42f4:	69bb      	ldr	r3, [r7, #24]
    42f6:	2230      	movs	r2, #48	; 0x30
    42f8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    42fa:	69ba      	ldr	r2, [r7, #24]
    42fc:	2131      	movs	r1, #49	; 0x31
    42fe:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    4300:	4013      	ands	r3, r2
    4302:	b2da      	uxtb	r2, r3
    4304:	2310      	movs	r3, #16
    4306:	18fb      	adds	r3, r7, r3
    4308:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    430a:	2312      	movs	r3, #18
    430c:	18fb      	adds	r3, r7, r3
    430e:	881b      	ldrh	r3, [r3, #0]
    4310:	2201      	movs	r2, #1
    4312:	4013      	ands	r3, r2
    4314:	d044      	beq.n	43a0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    4316:	69bb      	ldr	r3, [r7, #24]
    4318:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    431a:	b29b      	uxth	r3, r3
    431c:	2b00      	cmp	r3, #0
    431e:	d03c      	beq.n	439a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4320:	69bb      	ldr	r3, [r7, #24]
    4322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4324:	781b      	ldrb	r3, [r3, #0]
    4326:	b2da      	uxtb	r2, r3
    4328:	231c      	movs	r3, #28
    432a:	18fb      	adds	r3, r7, r3
    432c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    432e:	69bb      	ldr	r3, [r7, #24]
    4330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4332:	1c5a      	adds	r2, r3, #1
    4334:	69bb      	ldr	r3, [r7, #24]
    4336:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4338:	69bb      	ldr	r3, [r7, #24]
    433a:	795b      	ldrb	r3, [r3, #5]
    433c:	2b01      	cmp	r3, #1
    433e:	d113      	bne.n	4368 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4340:	69bb      	ldr	r3, [r7, #24]
    4342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	b2db      	uxtb	r3, r3
    4348:	021b      	lsls	r3, r3, #8
    434a:	b21a      	sxth	r2, r3
    434c:	231c      	movs	r3, #28
    434e:	18fb      	adds	r3, r7, r3
    4350:	2100      	movs	r1, #0
    4352:	5e5b      	ldrsh	r3, [r3, r1]
    4354:	4313      	orrs	r3, r2
    4356:	b21a      	sxth	r2, r3
    4358:	231c      	movs	r3, #28
    435a:	18fb      	adds	r3, r7, r3
    435c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    435e:	69bb      	ldr	r3, [r7, #24]
    4360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4362:	1c5a      	adds	r2, r3, #1
    4364:	69bb      	ldr	r3, [r7, #24]
    4366:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4368:	231c      	movs	r3, #28
    436a:	18fb      	adds	r3, r7, r3
    436c:	881b      	ldrh	r3, [r3, #0]
    436e:	05db      	lsls	r3, r3, #23
    4370:	0ddb      	lsrs	r3, r3, #23
    4372:	b29a      	uxth	r2, r3
    4374:	697b      	ldr	r3, [r7, #20]
    4376:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4378:	69bb      	ldr	r3, [r7, #24]
    437a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    437c:	b29b      	uxth	r3, r3
    437e:	3b01      	subs	r3, #1
    4380:	b29b      	uxth	r3, r3
    4382:	69ba      	ldr	r2, [r7, #24]
    4384:	1c19      	adds	r1, r3, #0
    4386:	85d1      	strh	r1, [r2, #46]	; 0x2e
    4388:	2b00      	cmp	r3, #0
    438a:	d109      	bne.n	43a0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    438c:	697b      	ldr	r3, [r7, #20]
    438e:	2201      	movs	r2, #1
    4390:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4392:	697b      	ldr	r3, [r7, #20]
    4394:	2202      	movs	r2, #2
    4396:	759a      	strb	r2, [r3, #22]
    4398:	e002      	b.n	43a0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    439a:	697b      	ldr	r3, [r7, #20]
    439c:	2201      	movs	r2, #1
    439e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    43a0:	2312      	movs	r3, #18
    43a2:	18fb      	adds	r3, r7, r3
    43a4:	881b      	ldrh	r3, [r3, #0]
    43a6:	2202      	movs	r2, #2
    43a8:	4013      	ands	r3, r2
    43aa:	d011      	beq.n	43d0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    43ac:	697b      	ldr	r3, [r7, #20]
    43ae:	2202      	movs	r2, #2
    43b0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    43b2:	69bb      	ldr	r3, [r7, #24]
    43b4:	2233      	movs	r2, #51	; 0x33
    43b6:	2100      	movs	r1, #0
    43b8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    43ba:	2310      	movs	r3, #16
    43bc:	18fb      	adds	r3, r7, r3
    43be:	881b      	ldrh	r3, [r3, #0]
    43c0:	2201      	movs	r2, #1
    43c2:	4013      	ands	r3, r2
    43c4:	d004      	beq.n	43d0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    43c6:	69bb      	ldr	r3, [r7, #24]
    43c8:	68db      	ldr	r3, [r3, #12]
    43ca:	69ba      	ldr	r2, [r7, #24]
    43cc:	0010      	movs	r0, r2
    43ce:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    43d0:	2312      	movs	r3, #18
    43d2:	18fb      	adds	r3, r7, r3
    43d4:	881b      	ldrh	r3, [r3, #0]
    43d6:	2204      	movs	r2, #4
    43d8:	4013      	ands	r3, r2
    43da:	d100      	bne.n	43de <_usart_interrupt_handler+0x132>
    43dc:	e0bd      	b.n	455a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    43de:	69bb      	ldr	r3, [r7, #24]
    43e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    43e2:	b29b      	uxth	r3, r3
    43e4:	2b00      	cmp	r3, #0
    43e6:	d100      	bne.n	43ea <_usart_interrupt_handler+0x13e>
    43e8:	e0b4      	b.n	4554 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    43ea:	697b      	ldr	r3, [r7, #20]
    43ec:	8b5b      	ldrh	r3, [r3, #26]
    43ee:	b29b      	uxth	r3, r3
    43f0:	b2da      	uxtb	r2, r3
    43f2:	231f      	movs	r3, #31
    43f4:	18fb      	adds	r3, r7, r3
    43f6:	213f      	movs	r1, #63	; 0x3f
    43f8:	400a      	ands	r2, r1
    43fa:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    43fc:	231f      	movs	r3, #31
    43fe:	18fb      	adds	r3, r7, r3
    4400:	781b      	ldrb	r3, [r3, #0]
    4402:	2208      	movs	r2, #8
    4404:	4013      	ands	r3, r2
    4406:	d007      	beq.n	4418 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4408:	231f      	movs	r3, #31
    440a:	18fb      	adds	r3, r7, r3
    440c:	221f      	movs	r2, #31
    440e:	18ba      	adds	r2, r7, r2
    4410:	7812      	ldrb	r2, [r2, #0]
    4412:	2108      	movs	r1, #8
    4414:	438a      	bics	r2, r1
    4416:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4418:	231f      	movs	r3, #31
    441a:	18fb      	adds	r3, r7, r3
    441c:	781b      	ldrb	r3, [r3, #0]
    441e:	2b00      	cmp	r3, #0
    4420:	d050      	beq.n	44c4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4422:	231f      	movs	r3, #31
    4424:	18fb      	adds	r3, r7, r3
    4426:	781b      	ldrb	r3, [r3, #0]
    4428:	2202      	movs	r2, #2
    442a:	4013      	ands	r3, r2
    442c:	d007      	beq.n	443e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    442e:	69bb      	ldr	r3, [r7, #24]
    4430:	2232      	movs	r2, #50	; 0x32
    4432:	211a      	movs	r1, #26
    4434:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4436:	697b      	ldr	r3, [r7, #20]
    4438:	2202      	movs	r2, #2
    443a:	835a      	strh	r2, [r3, #26]
    443c:	e036      	b.n	44ac <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    443e:	231f      	movs	r3, #31
    4440:	18fb      	adds	r3, r7, r3
    4442:	781b      	ldrb	r3, [r3, #0]
    4444:	2204      	movs	r2, #4
    4446:	4013      	ands	r3, r2
    4448:	d007      	beq.n	445a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    444a:	69bb      	ldr	r3, [r7, #24]
    444c:	2232      	movs	r2, #50	; 0x32
    444e:	211e      	movs	r1, #30
    4450:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4452:	697b      	ldr	r3, [r7, #20]
    4454:	2204      	movs	r2, #4
    4456:	835a      	strh	r2, [r3, #26]
    4458:	e028      	b.n	44ac <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    445a:	231f      	movs	r3, #31
    445c:	18fb      	adds	r3, r7, r3
    445e:	781b      	ldrb	r3, [r3, #0]
    4460:	2201      	movs	r2, #1
    4462:	4013      	ands	r3, r2
    4464:	d007      	beq.n	4476 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    4466:	69bb      	ldr	r3, [r7, #24]
    4468:	2232      	movs	r2, #50	; 0x32
    446a:	2113      	movs	r1, #19
    446c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    446e:	697b      	ldr	r3, [r7, #20]
    4470:	2201      	movs	r2, #1
    4472:	835a      	strh	r2, [r3, #26]
    4474:	e01a      	b.n	44ac <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4476:	231f      	movs	r3, #31
    4478:	18fb      	adds	r3, r7, r3
    447a:	781b      	ldrb	r3, [r3, #0]
    447c:	2210      	movs	r2, #16
    447e:	4013      	ands	r3, r2
    4480:	d007      	beq.n	4492 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    4482:	69bb      	ldr	r3, [r7, #24]
    4484:	2232      	movs	r2, #50	; 0x32
    4486:	2142      	movs	r1, #66	; 0x42
    4488:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    448a:	697b      	ldr	r3, [r7, #20]
    448c:	2210      	movs	r2, #16
    448e:	835a      	strh	r2, [r3, #26]
    4490:	e00c      	b.n	44ac <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4492:	231f      	movs	r3, #31
    4494:	18fb      	adds	r3, r7, r3
    4496:	781b      	ldrb	r3, [r3, #0]
    4498:	2220      	movs	r2, #32
    449a:	4013      	ands	r3, r2
    449c:	d006      	beq.n	44ac <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    449e:	69bb      	ldr	r3, [r7, #24]
    44a0:	2232      	movs	r2, #50	; 0x32
    44a2:	2141      	movs	r1, #65	; 0x41
    44a4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    44a6:	697b      	ldr	r3, [r7, #20]
    44a8:	2220      	movs	r2, #32
    44aa:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    44ac:	2310      	movs	r3, #16
    44ae:	18fb      	adds	r3, r7, r3
    44b0:	881b      	ldrh	r3, [r3, #0]
    44b2:	2204      	movs	r2, #4
    44b4:	4013      	ands	r3, r2
				if (callback_status
    44b6:	d050      	beq.n	455a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    44b8:	69bb      	ldr	r3, [r7, #24]
    44ba:	695b      	ldr	r3, [r3, #20]
    44bc:	69ba      	ldr	r2, [r7, #24]
    44be:	0010      	movs	r0, r2
    44c0:	4798      	blx	r3
    44c2:	e04a      	b.n	455a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    44c4:	697b      	ldr	r3, [r7, #20]
    44c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    44c8:	b29a      	uxth	r2, r3
    44ca:	230e      	movs	r3, #14
    44cc:	18fb      	adds	r3, r7, r3
    44ce:	05d2      	lsls	r2, r2, #23
    44d0:	0dd2      	lsrs	r2, r2, #23
    44d2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    44d4:	69bb      	ldr	r3, [r7, #24]
    44d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44d8:	220e      	movs	r2, #14
    44da:	18ba      	adds	r2, r7, r2
    44dc:	8812      	ldrh	r2, [r2, #0]
    44de:	b2d2      	uxtb	r2, r2
    44e0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    44e2:	69bb      	ldr	r3, [r7, #24]
    44e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44e6:	1c5a      	adds	r2, r3, #1
    44e8:	69bb      	ldr	r3, [r7, #24]
    44ea:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    44ec:	69bb      	ldr	r3, [r7, #24]
    44ee:	795b      	ldrb	r3, [r3, #5]
    44f0:	2b01      	cmp	r3, #1
    44f2:	d10d      	bne.n	4510 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    44f4:	69bb      	ldr	r3, [r7, #24]
    44f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44f8:	220e      	movs	r2, #14
    44fa:	18ba      	adds	r2, r7, r2
    44fc:	8812      	ldrh	r2, [r2, #0]
    44fe:	0a12      	lsrs	r2, r2, #8
    4500:	b292      	uxth	r2, r2
    4502:	b2d2      	uxtb	r2, r2
    4504:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    4506:	69bb      	ldr	r3, [r7, #24]
    4508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    450a:	1c5a      	adds	r2, r3, #1
    450c:	69bb      	ldr	r3, [r7, #24]
    450e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4510:	69bb      	ldr	r3, [r7, #24]
    4512:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    4514:	b29b      	uxth	r3, r3
    4516:	3b01      	subs	r3, #1
    4518:	b29b      	uxth	r3, r3
    451a:	69ba      	ldr	r2, [r7, #24]
    451c:	1c19      	adds	r1, r3, #0
    451e:	8591      	strh	r1, [r2, #44]	; 0x2c
    4520:	2b00      	cmp	r3, #0
    4522:	d11a      	bne.n	455a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4524:	697b      	ldr	r3, [r7, #20]
    4526:	2204      	movs	r2, #4
    4528:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    452a:	69bb      	ldr	r3, [r7, #24]
    452c:	2232      	movs	r2, #50	; 0x32
    452e:	2100      	movs	r1, #0
    4530:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    4532:	2310      	movs	r3, #16
    4534:	18fb      	adds	r3, r7, r3
    4536:	881b      	ldrh	r3, [r3, #0]
    4538:	2202      	movs	r2, #2
    453a:	4013      	ands	r3, r2
					if (callback_status
    453c:	d00d      	beq.n	455a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    453e:	69bb      	ldr	r3, [r7, #24]
    4540:	691b      	ldr	r3, [r3, #16]
    4542:	69ba      	ldr	r2, [r7, #24]
    4544:	0010      	movs	r0, r2
    4546:	4798      	blx	r3
    4548:	e007      	b.n	455a <_usart_interrupt_handler+0x2ae>
    454a:	46c0      	nop			; (mov r8, r8)
    454c:	200038bc 	.word	0x200038bc
    4550:	0000408d 	.word	0x0000408d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4554:	697b      	ldr	r3, [r7, #20]
    4556:	2204      	movs	r2, #4
    4558:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    455a:	2312      	movs	r3, #18
    455c:	18fb      	adds	r3, r7, r3
    455e:	881b      	ldrh	r3, [r3, #0]
    4560:	2210      	movs	r2, #16
    4562:	4013      	ands	r3, r2
    4564:	d010      	beq.n	4588 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4566:	697b      	ldr	r3, [r7, #20]
    4568:	2210      	movs	r2, #16
    456a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    456c:	697b      	ldr	r3, [r7, #20]
    456e:	2210      	movs	r2, #16
    4570:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4572:	2310      	movs	r3, #16
    4574:	18fb      	adds	r3, r7, r3
    4576:	881b      	ldrh	r3, [r3, #0]
    4578:	2210      	movs	r2, #16
    457a:	4013      	ands	r3, r2
    457c:	d004      	beq.n	4588 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    457e:	69bb      	ldr	r3, [r7, #24]
    4580:	69db      	ldr	r3, [r3, #28]
    4582:	69ba      	ldr	r2, [r7, #24]
    4584:	0010      	movs	r0, r2
    4586:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4588:	2312      	movs	r3, #18
    458a:	18fb      	adds	r3, r7, r3
    458c:	881b      	ldrh	r3, [r3, #0]
    458e:	2220      	movs	r2, #32
    4590:	4013      	ands	r3, r2
    4592:	d010      	beq.n	45b6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4594:	697b      	ldr	r3, [r7, #20]
    4596:	2220      	movs	r2, #32
    4598:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    459a:	697b      	ldr	r3, [r7, #20]
    459c:	2220      	movs	r2, #32
    459e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    45a0:	2310      	movs	r3, #16
    45a2:	18fb      	adds	r3, r7, r3
    45a4:	881b      	ldrh	r3, [r3, #0]
    45a6:	2208      	movs	r2, #8
    45a8:	4013      	ands	r3, r2
    45aa:	d004      	beq.n	45b6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    45ac:	69bb      	ldr	r3, [r7, #24]
    45ae:	699b      	ldr	r3, [r3, #24]
    45b0:	69ba      	ldr	r2, [r7, #24]
    45b2:	0010      	movs	r0, r2
    45b4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    45b6:	2312      	movs	r3, #18
    45b8:	18fb      	adds	r3, r7, r3
    45ba:	881b      	ldrh	r3, [r3, #0]
    45bc:	2208      	movs	r2, #8
    45be:	4013      	ands	r3, r2
    45c0:	d010      	beq.n	45e4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    45c2:	697b      	ldr	r3, [r7, #20]
    45c4:	2208      	movs	r2, #8
    45c6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    45c8:	697b      	ldr	r3, [r7, #20]
    45ca:	2208      	movs	r2, #8
    45cc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    45ce:	2310      	movs	r3, #16
    45d0:	18fb      	adds	r3, r7, r3
    45d2:	881b      	ldrh	r3, [r3, #0]
    45d4:	2220      	movs	r2, #32
    45d6:	4013      	ands	r3, r2
    45d8:	d004      	beq.n	45e4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    45da:	69bb      	ldr	r3, [r7, #24]
    45dc:	6a1b      	ldr	r3, [r3, #32]
    45de:	69ba      	ldr	r2, [r7, #24]
    45e0:	0010      	movs	r0, r2
    45e2:	4798      	blx	r3
		}
	}
#endif
}
    45e4:	46c0      	nop			; (mov r8, r8)
    45e6:	46bd      	mov	sp, r7
    45e8:	b008      	add	sp, #32
    45ea:	bd80      	pop	{r7, pc}

000045ec <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    45ec:	b580      	push	{r7, lr}
    45ee:	b082      	sub	sp, #8
    45f0:	af00      	add	r7, sp, #0
    45f2:	0002      	movs	r2, r0
    45f4:	1dfb      	adds	r3, r7, #7
    45f6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    45f8:	46c0      	nop			; (mov r8, r8)
    45fa:	46bd      	mov	sp, r7
    45fc:	b002      	add	sp, #8
    45fe:	bd80      	pop	{r7, pc}

00004600 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4600:	b580      	push	{r7, lr}
    4602:	b084      	sub	sp, #16
    4604:	af00      	add	r7, sp, #0
    4606:	0002      	movs	r2, r0
    4608:	6039      	str	r1, [r7, #0]
    460a:	1dfb      	adds	r3, r7, #7
    460c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    460e:	4b13      	ldr	r3, [pc, #76]	; (465c <_sercom_set_handler+0x5c>)
    4610:	781b      	ldrb	r3, [r3, #0]
    4612:	2201      	movs	r2, #1
    4614:	4053      	eors	r3, r2
    4616:	b2db      	uxtb	r3, r3
    4618:	2b00      	cmp	r3, #0
    461a:	d015      	beq.n	4648 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    461c:	2300      	movs	r3, #0
    461e:	60fb      	str	r3, [r7, #12]
    4620:	e00c      	b.n	463c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4622:	4b0f      	ldr	r3, [pc, #60]	; (4660 <_sercom_set_handler+0x60>)
    4624:	68fa      	ldr	r2, [r7, #12]
    4626:	0092      	lsls	r2, r2, #2
    4628:	490e      	ldr	r1, [pc, #56]	; (4664 <_sercom_set_handler+0x64>)
    462a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    462c:	4b0e      	ldr	r3, [pc, #56]	; (4668 <_sercom_set_handler+0x68>)
    462e:	68fa      	ldr	r2, [r7, #12]
    4630:	0092      	lsls	r2, r2, #2
    4632:	2100      	movs	r1, #0
    4634:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4636:	68fb      	ldr	r3, [r7, #12]
    4638:	3301      	adds	r3, #1
    463a:	60fb      	str	r3, [r7, #12]
    463c:	68fb      	ldr	r3, [r7, #12]
    463e:	2b05      	cmp	r3, #5
    4640:	d9ef      	bls.n	4622 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    4642:	4b06      	ldr	r3, [pc, #24]	; (465c <_sercom_set_handler+0x5c>)
    4644:	2201      	movs	r2, #1
    4646:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4648:	1dfb      	adds	r3, r7, #7
    464a:	781a      	ldrb	r2, [r3, #0]
    464c:	4b04      	ldr	r3, [pc, #16]	; (4660 <_sercom_set_handler+0x60>)
    464e:	0092      	lsls	r2, r2, #2
    4650:	6839      	ldr	r1, [r7, #0]
    4652:	50d1      	str	r1, [r2, r3]
}
    4654:	46c0      	nop			; (mov r8, r8)
    4656:	46bd      	mov	sp, r7
    4658:	b004      	add	sp, #16
    465a:	bd80      	pop	{r7, pc}
    465c:	200033a4 	.word	0x200033a4
    4660:	200033a8 	.word	0x200033a8
    4664:	000045ed 	.word	0x000045ed
    4668:	200038bc 	.word	0x200038bc

0000466c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    466c:	b590      	push	{r4, r7, lr}
    466e:	b085      	sub	sp, #20
    4670:	af00      	add	r7, sp, #0
    4672:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4674:	2308      	movs	r3, #8
    4676:	18fb      	adds	r3, r7, r3
    4678:	4a0b      	ldr	r2, [pc, #44]	; (46a8 <_sercom_get_interrupt_vector+0x3c>)
    467a:	6811      	ldr	r1, [r2, #0]
    467c:	6019      	str	r1, [r3, #0]
    467e:	8892      	ldrh	r2, [r2, #4]
    4680:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4682:	230f      	movs	r3, #15
    4684:	18fc      	adds	r4, r7, r3
    4686:	687b      	ldr	r3, [r7, #4]
    4688:	0018      	movs	r0, r3
    468a:	4b08      	ldr	r3, [pc, #32]	; (46ac <_sercom_get_interrupt_vector+0x40>)
    468c:	4798      	blx	r3
    468e:	0003      	movs	r3, r0
    4690:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4692:	230f      	movs	r3, #15
    4694:	18fb      	adds	r3, r7, r3
    4696:	781b      	ldrb	r3, [r3, #0]
    4698:	2208      	movs	r2, #8
    469a:	18ba      	adds	r2, r7, r2
    469c:	5cd3      	ldrb	r3, [r2, r3]
    469e:	b25b      	sxtb	r3, r3
}
    46a0:	0018      	movs	r0, r3
    46a2:	46bd      	mov	sp, r7
    46a4:	b005      	add	sp, #20
    46a6:	bd90      	pop	{r4, r7, pc}
    46a8:	00005fec 	.word	0x00005fec
    46ac:	000008f9 	.word	0x000008f9

000046b0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    46b0:	b580      	push	{r7, lr}
    46b2:	af00      	add	r7, sp, #0
    46b4:	4b03      	ldr	r3, [pc, #12]	; (46c4 <SERCOM0_Handler+0x14>)
    46b6:	681b      	ldr	r3, [r3, #0]
    46b8:	2000      	movs	r0, #0
    46ba:	4798      	blx	r3
    46bc:	46c0      	nop			; (mov r8, r8)
    46be:	46bd      	mov	sp, r7
    46c0:	bd80      	pop	{r7, pc}
    46c2:	46c0      	nop			; (mov r8, r8)
    46c4:	200033a8 	.word	0x200033a8

000046c8 <SERCOM1_Handler>:
    46c8:	b580      	push	{r7, lr}
    46ca:	af00      	add	r7, sp, #0
    46cc:	4b03      	ldr	r3, [pc, #12]	; (46dc <SERCOM1_Handler+0x14>)
    46ce:	685b      	ldr	r3, [r3, #4]
    46d0:	2001      	movs	r0, #1
    46d2:	4798      	blx	r3
    46d4:	46c0      	nop			; (mov r8, r8)
    46d6:	46bd      	mov	sp, r7
    46d8:	bd80      	pop	{r7, pc}
    46da:	46c0      	nop			; (mov r8, r8)
    46dc:	200033a8 	.word	0x200033a8

000046e0 <SERCOM2_Handler>:
    46e0:	b580      	push	{r7, lr}
    46e2:	af00      	add	r7, sp, #0
    46e4:	4b03      	ldr	r3, [pc, #12]	; (46f4 <SERCOM2_Handler+0x14>)
    46e6:	689b      	ldr	r3, [r3, #8]
    46e8:	2002      	movs	r0, #2
    46ea:	4798      	blx	r3
    46ec:	46c0      	nop			; (mov r8, r8)
    46ee:	46bd      	mov	sp, r7
    46f0:	bd80      	pop	{r7, pc}
    46f2:	46c0      	nop			; (mov r8, r8)
    46f4:	200033a8 	.word	0x200033a8

000046f8 <SERCOM3_Handler>:
    46f8:	b580      	push	{r7, lr}
    46fa:	af00      	add	r7, sp, #0
    46fc:	4b03      	ldr	r3, [pc, #12]	; (470c <SERCOM3_Handler+0x14>)
    46fe:	68db      	ldr	r3, [r3, #12]
    4700:	2003      	movs	r0, #3
    4702:	4798      	blx	r3
    4704:	46c0      	nop			; (mov r8, r8)
    4706:	46bd      	mov	sp, r7
    4708:	bd80      	pop	{r7, pc}
    470a:	46c0      	nop			; (mov r8, r8)
    470c:	200033a8 	.word	0x200033a8

00004710 <SERCOM4_Handler>:
    4710:	b580      	push	{r7, lr}
    4712:	af00      	add	r7, sp, #0
    4714:	4b03      	ldr	r3, [pc, #12]	; (4724 <SERCOM4_Handler+0x14>)
    4716:	691b      	ldr	r3, [r3, #16]
    4718:	2004      	movs	r0, #4
    471a:	4798      	blx	r3
    471c:	46c0      	nop			; (mov r8, r8)
    471e:	46bd      	mov	sp, r7
    4720:	bd80      	pop	{r7, pc}
    4722:	46c0      	nop			; (mov r8, r8)
    4724:	200033a8 	.word	0x200033a8

00004728 <SERCOM5_Handler>:
    4728:	b580      	push	{r7, lr}
    472a:	af00      	add	r7, sp, #0
    472c:	4b03      	ldr	r3, [pc, #12]	; (473c <SERCOM5_Handler+0x14>)
    472e:	695b      	ldr	r3, [r3, #20]
    4730:	2005      	movs	r0, #5
    4732:	4798      	blx	r3
    4734:	46c0      	nop			; (mov r8, r8)
    4736:	46bd      	mov	sp, r7
    4738:	bd80      	pop	{r7, pc}
    473a:	46c0      	nop			; (mov r8, r8)
    473c:	200033a8 	.word	0x200033a8

00004740 <system_gclk_gen_get_config_defaults>:
{
    4740:	b580      	push	{r7, lr}
    4742:	b082      	sub	sp, #8
    4744:	af00      	add	r7, sp, #0
    4746:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    4748:	687b      	ldr	r3, [r7, #4]
    474a:	2201      	movs	r2, #1
    474c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    474e:	687b      	ldr	r3, [r7, #4]
    4750:	2200      	movs	r2, #0
    4752:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	2206      	movs	r2, #6
    4758:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    475a:	687b      	ldr	r3, [r7, #4]
    475c:	2200      	movs	r2, #0
    475e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4760:	687b      	ldr	r3, [r7, #4]
    4762:	2200      	movs	r2, #0
    4764:	725a      	strb	r2, [r3, #9]
}
    4766:	46c0      	nop			; (mov r8, r8)
    4768:	46bd      	mov	sp, r7
    476a:	b002      	add	sp, #8
    476c:	bd80      	pop	{r7, pc}

0000476e <system_clock_source_osc8m_get_config_defaults>:
{
    476e:	b580      	push	{r7, lr}
    4770:	b082      	sub	sp, #8
    4772:	af00      	add	r7, sp, #0
    4774:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    4776:	687b      	ldr	r3, [r7, #4]
    4778:	2203      	movs	r2, #3
    477a:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    477c:	687b      	ldr	r3, [r7, #4]
    477e:	2200      	movs	r2, #0
    4780:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4782:	687b      	ldr	r3, [r7, #4]
    4784:	2201      	movs	r2, #1
    4786:	709a      	strb	r2, [r3, #2]
}
    4788:	46c0      	nop			; (mov r8, r8)
    478a:	46bd      	mov	sp, r7
    478c:	b002      	add	sp, #8
    478e:	bd80      	pop	{r7, pc}

00004790 <system_cpu_clock_set_divider>:
{
    4790:	b580      	push	{r7, lr}
    4792:	b082      	sub	sp, #8
    4794:	af00      	add	r7, sp, #0
    4796:	0002      	movs	r2, r0
    4798:	1dfb      	adds	r3, r7, #7
    479a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    479c:	4a03      	ldr	r2, [pc, #12]	; (47ac <system_cpu_clock_set_divider+0x1c>)
    479e:	1dfb      	adds	r3, r7, #7
    47a0:	781b      	ldrb	r3, [r3, #0]
    47a2:	7213      	strb	r3, [r2, #8]
}
    47a4:	46c0      	nop			; (mov r8, r8)
    47a6:	46bd      	mov	sp, r7
    47a8:	b002      	add	sp, #8
    47aa:	bd80      	pop	{r7, pc}
    47ac:	40000400 	.word	0x40000400

000047b0 <system_apb_clock_set_divider>:
{
    47b0:	b580      	push	{r7, lr}
    47b2:	b082      	sub	sp, #8
    47b4:	af00      	add	r7, sp, #0
    47b6:	0002      	movs	r2, r0
    47b8:	1dfb      	adds	r3, r7, #7
    47ba:	701a      	strb	r2, [r3, #0]
    47bc:	1dbb      	adds	r3, r7, #6
    47be:	1c0a      	adds	r2, r1, #0
    47c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    47c2:	1dfb      	adds	r3, r7, #7
    47c4:	781b      	ldrb	r3, [r3, #0]
    47c6:	2b01      	cmp	r3, #1
    47c8:	d008      	beq.n	47dc <system_apb_clock_set_divider+0x2c>
    47ca:	2b02      	cmp	r3, #2
    47cc:	d00b      	beq.n	47e6 <system_apb_clock_set_divider+0x36>
    47ce:	2b00      	cmp	r3, #0
    47d0:	d10e      	bne.n	47f0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    47d2:	4a0b      	ldr	r2, [pc, #44]	; (4800 <system_apb_clock_set_divider+0x50>)
    47d4:	1dbb      	adds	r3, r7, #6
    47d6:	781b      	ldrb	r3, [r3, #0]
    47d8:	7253      	strb	r3, [r2, #9]
			break;
    47da:	e00b      	b.n	47f4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    47dc:	4a08      	ldr	r2, [pc, #32]	; (4800 <system_apb_clock_set_divider+0x50>)
    47de:	1dbb      	adds	r3, r7, #6
    47e0:	781b      	ldrb	r3, [r3, #0]
    47e2:	7293      	strb	r3, [r2, #10]
			break;
    47e4:	e006      	b.n	47f4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    47e6:	4a06      	ldr	r2, [pc, #24]	; (4800 <system_apb_clock_set_divider+0x50>)
    47e8:	1dbb      	adds	r3, r7, #6
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	72d3      	strb	r3, [r2, #11]
			break;
    47ee:	e001      	b.n	47f4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    47f0:	2317      	movs	r3, #23
    47f2:	e000      	b.n	47f6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    47f4:	2300      	movs	r3, #0
}
    47f6:	0018      	movs	r0, r3
    47f8:	46bd      	mov	sp, r7
    47fa:	b002      	add	sp, #8
    47fc:	bd80      	pop	{r7, pc}
    47fe:	46c0      	nop			; (mov r8, r8)
    4800:	40000400 	.word	0x40000400

00004804 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4804:	b580      	push	{r7, lr}
    4806:	b082      	sub	sp, #8
    4808:	af00      	add	r7, sp, #0
    480a:	0002      	movs	r2, r0
    480c:	1dfb      	adds	r3, r7, #7
    480e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4810:	4a08      	ldr	r2, [pc, #32]	; (4834 <system_flash_set_waitstates+0x30>)
    4812:	1dfb      	adds	r3, r7, #7
    4814:	781b      	ldrb	r3, [r3, #0]
    4816:	210f      	movs	r1, #15
    4818:	400b      	ands	r3, r1
    481a:	b2d9      	uxtb	r1, r3
    481c:	6853      	ldr	r3, [r2, #4]
    481e:	200f      	movs	r0, #15
    4820:	4001      	ands	r1, r0
    4822:	0049      	lsls	r1, r1, #1
    4824:	201e      	movs	r0, #30
    4826:	4383      	bics	r3, r0
    4828:	430b      	orrs	r3, r1
    482a:	6053      	str	r3, [r2, #4]
}
    482c:	46c0      	nop			; (mov r8, r8)
    482e:	46bd      	mov	sp, r7
    4830:	b002      	add	sp, #8
    4832:	bd80      	pop	{r7, pc}
    4834:	41004000 	.word	0x41004000

00004838 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4838:	b580      	push	{r7, lr}
    483a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    483c:	46c0      	nop			; (mov r8, r8)
    483e:	4b04      	ldr	r3, [pc, #16]	; (4850 <_system_dfll_wait_for_sync+0x18>)
    4840:	68db      	ldr	r3, [r3, #12]
    4842:	2210      	movs	r2, #16
    4844:	4013      	ands	r3, r2
    4846:	d0fa      	beq.n	483e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4848:	46c0      	nop			; (mov r8, r8)
    484a:	46bd      	mov	sp, r7
    484c:	bd80      	pop	{r7, pc}
    484e:	46c0      	nop			; (mov r8, r8)
    4850:	40000800 	.word	0x40000800

00004854 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4854:	b580      	push	{r7, lr}
    4856:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4858:	4b0c      	ldr	r3, [pc, #48]	; (488c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    485a:	2202      	movs	r2, #2
    485c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    485e:	4b0c      	ldr	r3, [pc, #48]	; (4890 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4860:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4862:	4a0a      	ldr	r2, [pc, #40]	; (488c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4864:	4b0b      	ldr	r3, [pc, #44]	; (4894 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4866:	689b      	ldr	r3, [r3, #8]
    4868:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    486a:	4a08      	ldr	r2, [pc, #32]	; (488c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    486c:	4b09      	ldr	r3, [pc, #36]	; (4894 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    486e:	685b      	ldr	r3, [r3, #4]
    4870:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    4872:	4b06      	ldr	r3, [pc, #24]	; (488c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4874:	2200      	movs	r2, #0
    4876:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4878:	4b05      	ldr	r3, [pc, #20]	; (4890 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    487a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    487c:	4a03      	ldr	r2, [pc, #12]	; (488c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    487e:	4b05      	ldr	r3, [pc, #20]	; (4894 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4880:	681b      	ldr	r3, [r3, #0]
    4882:	b29b      	uxth	r3, r3
    4884:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4886:	46c0      	nop			; (mov r8, r8)
    4888:	46bd      	mov	sp, r7
    488a:	bd80      	pop	{r7, pc}
    488c:	40000800 	.word	0x40000800
    4890:	00004839 	.word	0x00004839
    4894:	200033c0 	.word	0x200033c0

00004898 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4898:	b580      	push	{r7, lr}
    489a:	b082      	sub	sp, #8
    489c:	af00      	add	r7, sp, #0
    489e:	0002      	movs	r2, r0
    48a0:	1dfb      	adds	r3, r7, #7
    48a2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    48a4:	1dfb      	adds	r3, r7, #7
    48a6:	781b      	ldrb	r3, [r3, #0]
    48a8:	2b08      	cmp	r3, #8
    48aa:	d841      	bhi.n	4930 <system_clock_source_get_hz+0x98>
    48ac:	009a      	lsls	r2, r3, #2
    48ae:	4b23      	ldr	r3, [pc, #140]	; (493c <system_clock_source_get_hz+0xa4>)
    48b0:	18d3      	adds	r3, r2, r3
    48b2:	681b      	ldr	r3, [r3, #0]
    48b4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    48b6:	4b22      	ldr	r3, [pc, #136]	; (4940 <system_clock_source_get_hz+0xa8>)
    48b8:	691b      	ldr	r3, [r3, #16]
    48ba:	e03a      	b.n	4932 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    48bc:	4b21      	ldr	r3, [pc, #132]	; (4944 <system_clock_source_get_hz+0xac>)
    48be:	6a1b      	ldr	r3, [r3, #32]
    48c0:	059b      	lsls	r3, r3, #22
    48c2:	0f9b      	lsrs	r3, r3, #30
    48c4:	b2db      	uxtb	r3, r3
    48c6:	001a      	movs	r2, r3
    48c8:	4b1f      	ldr	r3, [pc, #124]	; (4948 <system_clock_source_get_hz+0xb0>)
    48ca:	40d3      	lsrs	r3, r2
    48cc:	e031      	b.n	4932 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    48ce:	2380      	movs	r3, #128	; 0x80
    48d0:	021b      	lsls	r3, r3, #8
    48d2:	e02e      	b.n	4932 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    48d4:	2380      	movs	r3, #128	; 0x80
    48d6:	021b      	lsls	r3, r3, #8
    48d8:	e02b      	b.n	4932 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    48da:	4b19      	ldr	r3, [pc, #100]	; (4940 <system_clock_source_get_hz+0xa8>)
    48dc:	695b      	ldr	r3, [r3, #20]
    48de:	e028      	b.n	4932 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    48e0:	4b17      	ldr	r3, [pc, #92]	; (4940 <system_clock_source_get_hz+0xa8>)
    48e2:	681b      	ldr	r3, [r3, #0]
    48e4:	2202      	movs	r2, #2
    48e6:	4013      	ands	r3, r2
    48e8:	d101      	bne.n	48ee <system_clock_source_get_hz+0x56>
			return 0;
    48ea:	2300      	movs	r3, #0
    48ec:	e021      	b.n	4932 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    48ee:	4b17      	ldr	r3, [pc, #92]	; (494c <system_clock_source_get_hz+0xb4>)
    48f0:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    48f2:	4b13      	ldr	r3, [pc, #76]	; (4940 <system_clock_source_get_hz+0xa8>)
    48f4:	681b      	ldr	r3, [r3, #0]
    48f6:	2224      	movs	r2, #36	; 0x24
    48f8:	4013      	ands	r3, r2
    48fa:	2b04      	cmp	r3, #4
    48fc:	d109      	bne.n	4912 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    48fe:	2000      	movs	r0, #0
    4900:	4b13      	ldr	r3, [pc, #76]	; (4950 <system_clock_source_get_hz+0xb8>)
    4902:	4798      	blx	r3
    4904:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    4906:	4b0e      	ldr	r3, [pc, #56]	; (4940 <system_clock_source_get_hz+0xa8>)
    4908:	689b      	ldr	r3, [r3, #8]
    490a:	041b      	lsls	r3, r3, #16
    490c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    490e:	4353      	muls	r3, r2
    4910:	e00f      	b.n	4932 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    4912:	4b10      	ldr	r3, [pc, #64]	; (4954 <system_clock_source_get_hz+0xbc>)
    4914:	e00d      	b.n	4932 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4916:	4a0b      	ldr	r2, [pc, #44]	; (4944 <system_clock_source_get_hz+0xac>)
    4918:	2350      	movs	r3, #80	; 0x50
    491a:	5cd3      	ldrb	r3, [r2, r3]
    491c:	b2db      	uxtb	r3, r3
    491e:	001a      	movs	r2, r3
    4920:	2304      	movs	r3, #4
    4922:	4013      	ands	r3, r2
    4924:	d101      	bne.n	492a <system_clock_source_get_hz+0x92>
			return 0;
    4926:	2300      	movs	r3, #0
    4928:	e003      	b.n	4932 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    492a:	4b05      	ldr	r3, [pc, #20]	; (4940 <system_clock_source_get_hz+0xa8>)
    492c:	68db      	ldr	r3, [r3, #12]
    492e:	e000      	b.n	4932 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    4930:	2300      	movs	r3, #0
	}
}
    4932:	0018      	movs	r0, r3
    4934:	46bd      	mov	sp, r7
    4936:	b002      	add	sp, #8
    4938:	bd80      	pop	{r7, pc}
    493a:	46c0      	nop			; (mov r8, r8)
    493c:	00005ff4 	.word	0x00005ff4
    4940:	200033c0 	.word	0x200033c0
    4944:	40000800 	.word	0x40000800
    4948:	007a1200 	.word	0x007a1200
    494c:	00004839 	.word	0x00004839
    4950:	00004fd9 	.word	0x00004fd9
    4954:	02dc6c00 	.word	0x02dc6c00

00004958 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4958:	b580      	push	{r7, lr}
    495a:	b084      	sub	sp, #16
    495c:	af00      	add	r7, sp, #0
    495e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4960:	4b1a      	ldr	r3, [pc, #104]	; (49cc <system_clock_source_osc8m_set_config+0x74>)
    4962:	6a1b      	ldr	r3, [r3, #32]
    4964:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4966:	687b      	ldr	r3, [r7, #4]
    4968:	781b      	ldrb	r3, [r3, #0]
    496a:	1c1a      	adds	r2, r3, #0
    496c:	2303      	movs	r3, #3
    496e:	4013      	ands	r3, r2
    4970:	b2da      	uxtb	r2, r3
    4972:	230d      	movs	r3, #13
    4974:	18fb      	adds	r3, r7, r3
    4976:	2103      	movs	r1, #3
    4978:	400a      	ands	r2, r1
    497a:	0010      	movs	r0, r2
    497c:	781a      	ldrb	r2, [r3, #0]
    497e:	2103      	movs	r1, #3
    4980:	438a      	bics	r2, r1
    4982:	1c11      	adds	r1, r2, #0
    4984:	1c02      	adds	r2, r0, #0
    4986:	430a      	orrs	r2, r1
    4988:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    498a:	687b      	ldr	r3, [r7, #4]
    498c:	789a      	ldrb	r2, [r3, #2]
    498e:	230c      	movs	r3, #12
    4990:	18fb      	adds	r3, r7, r3
    4992:	01d0      	lsls	r0, r2, #7
    4994:	781a      	ldrb	r2, [r3, #0]
    4996:	217f      	movs	r1, #127	; 0x7f
    4998:	400a      	ands	r2, r1
    499a:	1c11      	adds	r1, r2, #0
    499c:	1c02      	adds	r2, r0, #0
    499e:	430a      	orrs	r2, r1
    49a0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	785a      	ldrb	r2, [r3, #1]
    49a6:	230c      	movs	r3, #12
    49a8:	18fb      	adds	r3, r7, r3
    49aa:	2101      	movs	r1, #1
    49ac:	400a      	ands	r2, r1
    49ae:	0190      	lsls	r0, r2, #6
    49b0:	781a      	ldrb	r2, [r3, #0]
    49b2:	2140      	movs	r1, #64	; 0x40
    49b4:	438a      	bics	r2, r1
    49b6:	1c11      	adds	r1, r2, #0
    49b8:	1c02      	adds	r2, r0, #0
    49ba:	430a      	orrs	r2, r1
    49bc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    49be:	4b03      	ldr	r3, [pc, #12]	; (49cc <system_clock_source_osc8m_set_config+0x74>)
    49c0:	68fa      	ldr	r2, [r7, #12]
    49c2:	621a      	str	r2, [r3, #32]
}
    49c4:	46c0      	nop			; (mov r8, r8)
    49c6:	46bd      	mov	sp, r7
    49c8:	b004      	add	sp, #16
    49ca:	bd80      	pop	{r7, pc}
    49cc:	40000800 	.word	0x40000800

000049d0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    49d0:	b580      	push	{r7, lr}
    49d2:	b082      	sub	sp, #8
    49d4:	af00      	add	r7, sp, #0
    49d6:	0002      	movs	r2, r0
    49d8:	1dfb      	adds	r3, r7, #7
    49da:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    49dc:	1dfb      	adds	r3, r7, #7
    49de:	781b      	ldrb	r3, [r3, #0]
    49e0:	2b08      	cmp	r3, #8
    49e2:	d83b      	bhi.n	4a5c <system_clock_source_enable+0x8c>
    49e4:	009a      	lsls	r2, r3, #2
    49e6:	4b21      	ldr	r3, [pc, #132]	; (4a6c <system_clock_source_enable+0x9c>)
    49e8:	18d3      	adds	r3, r2, r3
    49ea:	681b      	ldr	r3, [r3, #0]
    49ec:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    49ee:	4b20      	ldr	r3, [pc, #128]	; (4a70 <system_clock_source_enable+0xa0>)
    49f0:	4a1f      	ldr	r2, [pc, #124]	; (4a70 <system_clock_source_enable+0xa0>)
    49f2:	6a12      	ldr	r2, [r2, #32]
    49f4:	2102      	movs	r1, #2
    49f6:	430a      	orrs	r2, r1
    49f8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    49fa:	2300      	movs	r3, #0
    49fc:	e031      	b.n	4a62 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    49fe:	4b1c      	ldr	r3, [pc, #112]	; (4a70 <system_clock_source_enable+0xa0>)
    4a00:	4a1b      	ldr	r2, [pc, #108]	; (4a70 <system_clock_source_enable+0xa0>)
    4a02:	6992      	ldr	r2, [r2, #24]
    4a04:	2102      	movs	r1, #2
    4a06:	430a      	orrs	r2, r1
    4a08:	619a      	str	r2, [r3, #24]
		break;
    4a0a:	e029      	b.n	4a60 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4a0c:	4a18      	ldr	r2, [pc, #96]	; (4a70 <system_clock_source_enable+0xa0>)
    4a0e:	4b18      	ldr	r3, [pc, #96]	; (4a70 <system_clock_source_enable+0xa0>)
    4a10:	8a1b      	ldrh	r3, [r3, #16]
    4a12:	b29b      	uxth	r3, r3
    4a14:	2102      	movs	r1, #2
    4a16:	430b      	orrs	r3, r1
    4a18:	b29b      	uxth	r3, r3
    4a1a:	8213      	strh	r3, [r2, #16]
		break;
    4a1c:	e020      	b.n	4a60 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4a1e:	4a14      	ldr	r2, [pc, #80]	; (4a70 <system_clock_source_enable+0xa0>)
    4a20:	4b13      	ldr	r3, [pc, #76]	; (4a70 <system_clock_source_enable+0xa0>)
    4a22:	8a9b      	ldrh	r3, [r3, #20]
    4a24:	b29b      	uxth	r3, r3
    4a26:	2102      	movs	r1, #2
    4a28:	430b      	orrs	r3, r1
    4a2a:	b29b      	uxth	r3, r3
    4a2c:	8293      	strh	r3, [r2, #20]
		break;
    4a2e:	e017      	b.n	4a60 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4a30:	4b10      	ldr	r3, [pc, #64]	; (4a74 <system_clock_source_enable+0xa4>)
    4a32:	681b      	ldr	r3, [r3, #0]
    4a34:	2202      	movs	r2, #2
    4a36:	431a      	orrs	r2, r3
    4a38:	4b0e      	ldr	r3, [pc, #56]	; (4a74 <system_clock_source_enable+0xa4>)
    4a3a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    4a3c:	4b0e      	ldr	r3, [pc, #56]	; (4a78 <system_clock_source_enable+0xa8>)
    4a3e:	4798      	blx	r3
		break;
    4a40:	e00e      	b.n	4a60 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4a42:	4a0b      	ldr	r2, [pc, #44]	; (4a70 <system_clock_source_enable+0xa0>)
    4a44:	490a      	ldr	r1, [pc, #40]	; (4a70 <system_clock_source_enable+0xa0>)
    4a46:	2344      	movs	r3, #68	; 0x44
    4a48:	5ccb      	ldrb	r3, [r1, r3]
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	2102      	movs	r1, #2
    4a4e:	430b      	orrs	r3, r1
    4a50:	b2d9      	uxtb	r1, r3
    4a52:	2344      	movs	r3, #68	; 0x44
    4a54:	54d1      	strb	r1, [r2, r3]
		break;
    4a56:	e003      	b.n	4a60 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4a58:	2300      	movs	r3, #0
    4a5a:	e002      	b.n	4a62 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4a5c:	2317      	movs	r3, #23
    4a5e:	e000      	b.n	4a62 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    4a60:	2300      	movs	r3, #0
}
    4a62:	0018      	movs	r0, r3
    4a64:	46bd      	mov	sp, r7
    4a66:	b002      	add	sp, #8
    4a68:	bd80      	pop	{r7, pc}
    4a6a:	46c0      	nop			; (mov r8, r8)
    4a6c:	00006018 	.word	0x00006018
    4a70:	40000800 	.word	0x40000800
    4a74:	200033c0 	.word	0x200033c0
    4a78:	00004855 	.word	0x00004855

00004a7c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b082      	sub	sp, #8
    4a80:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    4a82:	003b      	movs	r3, r7
    4a84:	2201      	movs	r2, #1
    4a86:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4a88:	2300      	movs	r3, #0
    4a8a:	607b      	str	r3, [r7, #4]
    4a8c:	e009      	b.n	4aa2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4a8e:	687b      	ldr	r3, [r7, #4]
    4a90:	b2db      	uxtb	r3, r3
    4a92:	003a      	movs	r2, r7
    4a94:	0011      	movs	r1, r2
    4a96:	0018      	movs	r0, r3
    4a98:	4b05      	ldr	r3, [pc, #20]	; (4ab0 <_switch_peripheral_gclk+0x34>)
    4a9a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	3301      	adds	r3, #1
    4aa0:	607b      	str	r3, [r7, #4]
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	2b24      	cmp	r3, #36	; 0x24
    4aa6:	d9f2      	bls.n	4a8e <_switch_peripheral_gclk+0x12>
	}
}
    4aa8:	46c0      	nop			; (mov r8, r8)
    4aaa:	46bd      	mov	sp, r7
    4aac:	b002      	add	sp, #8
    4aae:	bd80      	pop	{r7, pc}
    4ab0:	00004eb5 	.word	0x00004eb5

00004ab4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4ab4:	b580      	push	{r7, lr}
    4ab6:	b0a0      	sub	sp, #128	; 0x80
    4ab8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4aba:	4b27      	ldr	r3, [pc, #156]	; (4b58 <system_clock_init+0xa4>)
    4abc:	22c2      	movs	r2, #194	; 0xc2
    4abe:	00d2      	lsls	r2, r2, #3
    4ac0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4ac2:	2000      	movs	r0, #0
    4ac4:	4b25      	ldr	r3, [pc, #148]	; (4b5c <system_clock_init+0xa8>)
    4ac6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    4ac8:	4b25      	ldr	r3, [pc, #148]	; (4b60 <system_clock_init+0xac>)
    4aca:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    4acc:	237c      	movs	r3, #124	; 0x7c
    4ace:	18fb      	adds	r3, r7, r3
    4ad0:	0018      	movs	r0, r3
    4ad2:	4b24      	ldr	r3, [pc, #144]	; (4b64 <system_clock_init+0xb0>)
    4ad4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4ad6:	237c      	movs	r3, #124	; 0x7c
    4ad8:	18fb      	adds	r3, r7, r3
    4ada:	2200      	movs	r2, #0
    4adc:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    4ade:	237c      	movs	r3, #124	; 0x7c
    4ae0:	18fb      	adds	r3, r7, r3
    4ae2:	2201      	movs	r2, #1
    4ae4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4ae6:	237c      	movs	r3, #124	; 0x7c
    4ae8:	18fb      	adds	r3, r7, r3
    4aea:	2200      	movs	r2, #0
    4aec:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4aee:	237c      	movs	r3, #124	; 0x7c
    4af0:	18fb      	adds	r3, r7, r3
    4af2:	0018      	movs	r0, r3
    4af4:	4b1c      	ldr	r3, [pc, #112]	; (4b68 <system_clock_init+0xb4>)
    4af6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4af8:	2006      	movs	r0, #6
    4afa:	4b1c      	ldr	r3, [pc, #112]	; (4b6c <system_clock_init+0xb8>)
    4afc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4afe:	4b1c      	ldr	r3, [pc, #112]	; (4b70 <system_clock_init+0xbc>)
    4b00:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    4b02:	2000      	movs	r0, #0
    4b04:	4b1b      	ldr	r3, [pc, #108]	; (4b74 <system_clock_init+0xc0>)
    4b06:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4b08:	2100      	movs	r1, #0
    4b0a:	2000      	movs	r0, #0
    4b0c:	4b1a      	ldr	r3, [pc, #104]	; (4b78 <system_clock_init+0xc4>)
    4b0e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    4b10:	2100      	movs	r1, #0
    4b12:	2001      	movs	r0, #1
    4b14:	4b18      	ldr	r3, [pc, #96]	; (4b78 <system_clock_init+0xc4>)
    4b16:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    4b18:	2100      	movs	r1, #0
    4b1a:	2002      	movs	r0, #2
    4b1c:	4b16      	ldr	r3, [pc, #88]	; (4b78 <system_clock_init+0xc4>)
    4b1e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4b20:	1d3b      	adds	r3, r7, #4
    4b22:	0018      	movs	r0, r3
    4b24:	4b15      	ldr	r3, [pc, #84]	; (4b7c <system_clock_init+0xc8>)
    4b26:	4798      	blx	r3
    4b28:	1d3b      	adds	r3, r7, #4
    4b2a:	2206      	movs	r2, #6
    4b2c:	701a      	strb	r2, [r3, #0]
    4b2e:	1d3b      	adds	r3, r7, #4
    4b30:	2201      	movs	r2, #1
    4b32:	605a      	str	r2, [r3, #4]
    4b34:	1d3b      	adds	r3, r7, #4
    4b36:	2200      	movs	r2, #0
    4b38:	721a      	strb	r2, [r3, #8]
    4b3a:	1d3b      	adds	r3, r7, #4
    4b3c:	2200      	movs	r2, #0
    4b3e:	725a      	strb	r2, [r3, #9]
    4b40:	1d3b      	adds	r3, r7, #4
    4b42:	0019      	movs	r1, r3
    4b44:	2000      	movs	r0, #0
    4b46:	4b0e      	ldr	r3, [pc, #56]	; (4b80 <system_clock_init+0xcc>)
    4b48:	4798      	blx	r3
    4b4a:	2000      	movs	r0, #0
    4b4c:	4b0d      	ldr	r3, [pc, #52]	; (4b84 <system_clock_init+0xd0>)
    4b4e:	4798      	blx	r3
#endif
}
    4b50:	46c0      	nop			; (mov r8, r8)
    4b52:	46bd      	mov	sp, r7
    4b54:	b020      	add	sp, #128	; 0x80
    4b56:	bd80      	pop	{r7, pc}
    4b58:	40000800 	.word	0x40000800
    4b5c:	00004805 	.word	0x00004805
    4b60:	00004a7d 	.word	0x00004a7d
    4b64:	0000476f 	.word	0x0000476f
    4b68:	00004959 	.word	0x00004959
    4b6c:	000049d1 	.word	0x000049d1
    4b70:	00004c2d 	.word	0x00004c2d
    4b74:	00004791 	.word	0x00004791
    4b78:	000047b1 	.word	0x000047b1
    4b7c:	00004741 	.word	0x00004741
    4b80:	00004c5d 	.word	0x00004c5d
    4b84:	00004d81 	.word	0x00004d81

00004b88 <system_apb_clock_set_mask>:
{
    4b88:	b580      	push	{r7, lr}
    4b8a:	b082      	sub	sp, #8
    4b8c:	af00      	add	r7, sp, #0
    4b8e:	0002      	movs	r2, r0
    4b90:	6039      	str	r1, [r7, #0]
    4b92:	1dfb      	adds	r3, r7, #7
    4b94:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4b96:	1dfb      	adds	r3, r7, #7
    4b98:	781b      	ldrb	r3, [r3, #0]
    4b9a:	2b01      	cmp	r3, #1
    4b9c:	d00a      	beq.n	4bb4 <system_apb_clock_set_mask+0x2c>
    4b9e:	2b02      	cmp	r3, #2
    4ba0:	d00f      	beq.n	4bc2 <system_apb_clock_set_mask+0x3a>
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d114      	bne.n	4bd0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4ba6:	4b0e      	ldr	r3, [pc, #56]	; (4be0 <system_apb_clock_set_mask+0x58>)
    4ba8:	4a0d      	ldr	r2, [pc, #52]	; (4be0 <system_apb_clock_set_mask+0x58>)
    4baa:	6991      	ldr	r1, [r2, #24]
    4bac:	683a      	ldr	r2, [r7, #0]
    4bae:	430a      	orrs	r2, r1
    4bb0:	619a      	str	r2, [r3, #24]
			break;
    4bb2:	e00f      	b.n	4bd4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4bb4:	4b0a      	ldr	r3, [pc, #40]	; (4be0 <system_apb_clock_set_mask+0x58>)
    4bb6:	4a0a      	ldr	r2, [pc, #40]	; (4be0 <system_apb_clock_set_mask+0x58>)
    4bb8:	69d1      	ldr	r1, [r2, #28]
    4bba:	683a      	ldr	r2, [r7, #0]
    4bbc:	430a      	orrs	r2, r1
    4bbe:	61da      	str	r2, [r3, #28]
			break;
    4bc0:	e008      	b.n	4bd4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4bc2:	4b07      	ldr	r3, [pc, #28]	; (4be0 <system_apb_clock_set_mask+0x58>)
    4bc4:	4a06      	ldr	r2, [pc, #24]	; (4be0 <system_apb_clock_set_mask+0x58>)
    4bc6:	6a11      	ldr	r1, [r2, #32]
    4bc8:	683a      	ldr	r2, [r7, #0]
    4bca:	430a      	orrs	r2, r1
    4bcc:	621a      	str	r2, [r3, #32]
			break;
    4bce:	e001      	b.n	4bd4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4bd0:	2317      	movs	r3, #23
    4bd2:	e000      	b.n	4bd6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4bd4:	2300      	movs	r3, #0
}
    4bd6:	0018      	movs	r0, r3
    4bd8:	46bd      	mov	sp, r7
    4bda:	b002      	add	sp, #8
    4bdc:	bd80      	pop	{r7, pc}
    4bde:	46c0      	nop			; (mov r8, r8)
    4be0:	40000400 	.word	0x40000400

00004be4 <system_interrupt_enter_critical_section>:
{
    4be4:	b580      	push	{r7, lr}
    4be6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    4be8:	4b02      	ldr	r3, [pc, #8]	; (4bf4 <system_interrupt_enter_critical_section+0x10>)
    4bea:	4798      	blx	r3
}
    4bec:	46c0      	nop			; (mov r8, r8)
    4bee:	46bd      	mov	sp, r7
    4bf0:	bd80      	pop	{r7, pc}
    4bf2:	46c0      	nop			; (mov r8, r8)
    4bf4:	00000115 	.word	0x00000115

00004bf8 <system_interrupt_leave_critical_section>:
{
    4bf8:	b580      	push	{r7, lr}
    4bfa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    4bfc:	4b02      	ldr	r3, [pc, #8]	; (4c08 <system_interrupt_leave_critical_section+0x10>)
    4bfe:	4798      	blx	r3
}
    4c00:	46c0      	nop			; (mov r8, r8)
    4c02:	46bd      	mov	sp, r7
    4c04:	bd80      	pop	{r7, pc}
    4c06:	46c0      	nop			; (mov r8, r8)
    4c08:	00000169 	.word	0x00000169

00004c0c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    4c0c:	b580      	push	{r7, lr}
    4c0e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4c10:	4b05      	ldr	r3, [pc, #20]	; (4c28 <system_gclk_is_syncing+0x1c>)
    4c12:	785b      	ldrb	r3, [r3, #1]
    4c14:	b2db      	uxtb	r3, r3
    4c16:	b25b      	sxtb	r3, r3
    4c18:	2b00      	cmp	r3, #0
    4c1a:	da01      	bge.n	4c20 <system_gclk_is_syncing+0x14>
		return true;
    4c1c:	2301      	movs	r3, #1
    4c1e:	e000      	b.n	4c22 <system_gclk_is_syncing+0x16>
	}

	return false;
    4c20:	2300      	movs	r3, #0
}
    4c22:	0018      	movs	r0, r3
    4c24:	46bd      	mov	sp, r7
    4c26:	bd80      	pop	{r7, pc}
    4c28:	40000c00 	.word	0x40000c00

00004c2c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    4c2c:	b580      	push	{r7, lr}
    4c2e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    4c30:	2108      	movs	r1, #8
    4c32:	2000      	movs	r0, #0
    4c34:	4b07      	ldr	r3, [pc, #28]	; (4c54 <system_gclk_init+0x28>)
    4c36:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4c38:	4b07      	ldr	r3, [pc, #28]	; (4c58 <system_gclk_init+0x2c>)
    4c3a:	2201      	movs	r2, #1
    4c3c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4c3e:	46c0      	nop			; (mov r8, r8)
    4c40:	4b05      	ldr	r3, [pc, #20]	; (4c58 <system_gclk_init+0x2c>)
    4c42:	781b      	ldrb	r3, [r3, #0]
    4c44:	b2db      	uxtb	r3, r3
    4c46:	001a      	movs	r2, r3
    4c48:	2301      	movs	r3, #1
    4c4a:	4013      	ands	r3, r2
    4c4c:	d1f8      	bne.n	4c40 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    4c4e:	46c0      	nop			; (mov r8, r8)
    4c50:	46bd      	mov	sp, r7
    4c52:	bd80      	pop	{r7, pc}
    4c54:	00004b89 	.word	0x00004b89
    4c58:	40000c00 	.word	0x40000c00

00004c5c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4c5c:	b580      	push	{r7, lr}
    4c5e:	b086      	sub	sp, #24
    4c60:	af00      	add	r7, sp, #0
    4c62:	0002      	movs	r2, r0
    4c64:	6039      	str	r1, [r7, #0]
    4c66:	1dfb      	adds	r3, r7, #7
    4c68:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4c6a:	1dfb      	adds	r3, r7, #7
    4c6c:	781b      	ldrb	r3, [r3, #0]
    4c6e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    4c70:	1dfb      	adds	r3, r7, #7
    4c72:	781b      	ldrb	r3, [r3, #0]
    4c74:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4c76:	683b      	ldr	r3, [r7, #0]
    4c78:	781b      	ldrb	r3, [r3, #0]
    4c7a:	021b      	lsls	r3, r3, #8
    4c7c:	001a      	movs	r2, r3
    4c7e:	697b      	ldr	r3, [r7, #20]
    4c80:	4313      	orrs	r3, r2
    4c82:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4c84:	683b      	ldr	r3, [r7, #0]
    4c86:	785b      	ldrb	r3, [r3, #1]
    4c88:	2b00      	cmp	r3, #0
    4c8a:	d004      	beq.n	4c96 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4c8c:	697b      	ldr	r3, [r7, #20]
    4c8e:	2280      	movs	r2, #128	; 0x80
    4c90:	02d2      	lsls	r2, r2, #11
    4c92:	4313      	orrs	r3, r2
    4c94:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4c96:	683b      	ldr	r3, [r7, #0]
    4c98:	7a5b      	ldrb	r3, [r3, #9]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d004      	beq.n	4ca8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4c9e:	697b      	ldr	r3, [r7, #20]
    4ca0:	2280      	movs	r2, #128	; 0x80
    4ca2:	0312      	lsls	r2, r2, #12
    4ca4:	4313      	orrs	r3, r2
    4ca6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4ca8:	683b      	ldr	r3, [r7, #0]
    4caa:	685b      	ldr	r3, [r3, #4]
    4cac:	2b01      	cmp	r3, #1
    4cae:	d92c      	bls.n	4d0a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4cb0:	683b      	ldr	r3, [r7, #0]
    4cb2:	685a      	ldr	r2, [r3, #4]
    4cb4:	683b      	ldr	r3, [r7, #0]
    4cb6:	685b      	ldr	r3, [r3, #4]
    4cb8:	3b01      	subs	r3, #1
    4cba:	4013      	ands	r3, r2
    4cbc:	d11a      	bne.n	4cf4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    4cbe:	2300      	movs	r3, #0
    4cc0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4cc2:	2302      	movs	r3, #2
    4cc4:	60bb      	str	r3, [r7, #8]
    4cc6:	e005      	b.n	4cd4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    4cc8:	68fb      	ldr	r3, [r7, #12]
    4cca:	3301      	adds	r3, #1
    4ccc:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    4cce:	68bb      	ldr	r3, [r7, #8]
    4cd0:	005b      	lsls	r3, r3, #1
    4cd2:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    4cd4:	683b      	ldr	r3, [r7, #0]
    4cd6:	685a      	ldr	r2, [r3, #4]
    4cd8:	68bb      	ldr	r3, [r7, #8]
    4cda:	429a      	cmp	r2, r3
    4cdc:	d8f4      	bhi.n	4cc8 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4cde:	68fb      	ldr	r3, [r7, #12]
    4ce0:	021b      	lsls	r3, r3, #8
    4ce2:	693a      	ldr	r2, [r7, #16]
    4ce4:	4313      	orrs	r3, r2
    4ce6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4ce8:	697b      	ldr	r3, [r7, #20]
    4cea:	2280      	movs	r2, #128	; 0x80
    4cec:	0352      	lsls	r2, r2, #13
    4cee:	4313      	orrs	r3, r2
    4cf0:	617b      	str	r3, [r7, #20]
    4cf2:	e00a      	b.n	4d0a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4cf4:	683b      	ldr	r3, [r7, #0]
    4cf6:	685b      	ldr	r3, [r3, #4]
    4cf8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    4cfa:	693a      	ldr	r2, [r7, #16]
    4cfc:	4313      	orrs	r3, r2
    4cfe:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4d00:	697b      	ldr	r3, [r7, #20]
    4d02:	2280      	movs	r2, #128	; 0x80
    4d04:	0292      	lsls	r2, r2, #10
    4d06:	4313      	orrs	r3, r2
    4d08:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4d0a:	683b      	ldr	r3, [r7, #0]
    4d0c:	7a1b      	ldrb	r3, [r3, #8]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d004      	beq.n	4d1c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4d12:	697b      	ldr	r3, [r7, #20]
    4d14:	2280      	movs	r2, #128	; 0x80
    4d16:	0392      	lsls	r2, r2, #14
    4d18:	4313      	orrs	r3, r2
    4d1a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    4d1c:	46c0      	nop			; (mov r8, r8)
    4d1e:	4b13      	ldr	r3, [pc, #76]	; (4d6c <system_gclk_gen_set_config+0x110>)
    4d20:	4798      	blx	r3
    4d22:	1e03      	subs	r3, r0, #0
    4d24:	d1fb      	bne.n	4d1e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4d26:	4b12      	ldr	r3, [pc, #72]	; (4d70 <system_gclk_gen_set_config+0x114>)
    4d28:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4d2a:	4a12      	ldr	r2, [pc, #72]	; (4d74 <system_gclk_gen_set_config+0x118>)
    4d2c:	1dfb      	adds	r3, r7, #7
    4d2e:	781b      	ldrb	r3, [r3, #0]
    4d30:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	4b0d      	ldr	r3, [pc, #52]	; (4d6c <system_gclk_gen_set_config+0x110>)
    4d36:	4798      	blx	r3
    4d38:	1e03      	subs	r3, r0, #0
    4d3a:	d1fb      	bne.n	4d34 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4d3c:	4b0e      	ldr	r3, [pc, #56]	; (4d78 <system_gclk_gen_set_config+0x11c>)
    4d3e:	693a      	ldr	r2, [r7, #16]
    4d40:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    4d42:	46c0      	nop			; (mov r8, r8)
    4d44:	4b09      	ldr	r3, [pc, #36]	; (4d6c <system_gclk_gen_set_config+0x110>)
    4d46:	4798      	blx	r3
    4d48:	1e03      	subs	r3, r0, #0
    4d4a:	d1fb      	bne.n	4d44 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4d4c:	4b0a      	ldr	r3, [pc, #40]	; (4d78 <system_gclk_gen_set_config+0x11c>)
    4d4e:	4a0a      	ldr	r2, [pc, #40]	; (4d78 <system_gclk_gen_set_config+0x11c>)
    4d50:	6851      	ldr	r1, [r2, #4]
    4d52:	2280      	movs	r2, #128	; 0x80
    4d54:	0252      	lsls	r2, r2, #9
    4d56:	4011      	ands	r1, r2
    4d58:	697a      	ldr	r2, [r7, #20]
    4d5a:	430a      	orrs	r2, r1
    4d5c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4d5e:	4b07      	ldr	r3, [pc, #28]	; (4d7c <system_gclk_gen_set_config+0x120>)
    4d60:	4798      	blx	r3
}
    4d62:	46c0      	nop			; (mov r8, r8)
    4d64:	46bd      	mov	sp, r7
    4d66:	b006      	add	sp, #24
    4d68:	bd80      	pop	{r7, pc}
    4d6a:	46c0      	nop			; (mov r8, r8)
    4d6c:	00004c0d 	.word	0x00004c0d
    4d70:	00004be5 	.word	0x00004be5
    4d74:	40000c08 	.word	0x40000c08
    4d78:	40000c00 	.word	0x40000c00
    4d7c:	00004bf9 	.word	0x00004bf9

00004d80 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4d80:	b580      	push	{r7, lr}
    4d82:	b082      	sub	sp, #8
    4d84:	af00      	add	r7, sp, #0
    4d86:	0002      	movs	r2, r0
    4d88:	1dfb      	adds	r3, r7, #7
    4d8a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4d8c:	46c0      	nop			; (mov r8, r8)
    4d8e:	4b0e      	ldr	r3, [pc, #56]	; (4dc8 <system_gclk_gen_enable+0x48>)
    4d90:	4798      	blx	r3
    4d92:	1e03      	subs	r3, r0, #0
    4d94:	d1fb      	bne.n	4d8e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4d96:	4b0d      	ldr	r3, [pc, #52]	; (4dcc <system_gclk_gen_enable+0x4c>)
    4d98:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4d9a:	4a0d      	ldr	r2, [pc, #52]	; (4dd0 <system_gclk_gen_enable+0x50>)
    4d9c:	1dfb      	adds	r3, r7, #7
    4d9e:	781b      	ldrb	r3, [r3, #0]
    4da0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4da2:	46c0      	nop			; (mov r8, r8)
    4da4:	4b08      	ldr	r3, [pc, #32]	; (4dc8 <system_gclk_gen_enable+0x48>)
    4da6:	4798      	blx	r3
    4da8:	1e03      	subs	r3, r0, #0
    4daa:	d1fb      	bne.n	4da4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4dac:	4b09      	ldr	r3, [pc, #36]	; (4dd4 <system_gclk_gen_enable+0x54>)
    4dae:	4a09      	ldr	r2, [pc, #36]	; (4dd4 <system_gclk_gen_enable+0x54>)
    4db0:	6852      	ldr	r2, [r2, #4]
    4db2:	2180      	movs	r1, #128	; 0x80
    4db4:	0249      	lsls	r1, r1, #9
    4db6:	430a      	orrs	r2, r1
    4db8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4dba:	4b07      	ldr	r3, [pc, #28]	; (4dd8 <system_gclk_gen_enable+0x58>)
    4dbc:	4798      	blx	r3
}
    4dbe:	46c0      	nop			; (mov r8, r8)
    4dc0:	46bd      	mov	sp, r7
    4dc2:	b002      	add	sp, #8
    4dc4:	bd80      	pop	{r7, pc}
    4dc6:	46c0      	nop			; (mov r8, r8)
    4dc8:	00004c0d 	.word	0x00004c0d
    4dcc:	00004be5 	.word	0x00004be5
    4dd0:	40000c04 	.word	0x40000c04
    4dd4:	40000c00 	.word	0x40000c00
    4dd8:	00004bf9 	.word	0x00004bf9

00004ddc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4ddc:	b580      	push	{r7, lr}
    4dde:	b086      	sub	sp, #24
    4de0:	af00      	add	r7, sp, #0
    4de2:	0002      	movs	r2, r0
    4de4:	1dfb      	adds	r3, r7, #7
    4de6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4de8:	46c0      	nop			; (mov r8, r8)
    4dea:	4b2a      	ldr	r3, [pc, #168]	; (4e94 <system_gclk_gen_get_hz+0xb8>)
    4dec:	4798      	blx	r3
    4dee:	1e03      	subs	r3, r0, #0
    4df0:	d1fb      	bne.n	4dea <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4df2:	4b29      	ldr	r3, [pc, #164]	; (4e98 <system_gclk_gen_get_hz+0xbc>)
    4df4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4df6:	4a29      	ldr	r2, [pc, #164]	; (4e9c <system_gclk_gen_get_hz+0xc0>)
    4df8:	1dfb      	adds	r3, r7, #7
    4dfa:	781b      	ldrb	r3, [r3, #0]
    4dfc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4dfe:	46c0      	nop			; (mov r8, r8)
    4e00:	4b24      	ldr	r3, [pc, #144]	; (4e94 <system_gclk_gen_get_hz+0xb8>)
    4e02:	4798      	blx	r3
    4e04:	1e03      	subs	r3, r0, #0
    4e06:	d1fb      	bne.n	4e00 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4e08:	4b25      	ldr	r3, [pc, #148]	; (4ea0 <system_gclk_gen_get_hz+0xc4>)
    4e0a:	685b      	ldr	r3, [r3, #4]
    4e0c:	04db      	lsls	r3, r3, #19
    4e0e:	0edb      	lsrs	r3, r3, #27
    4e10:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4e12:	0018      	movs	r0, r3
    4e14:	4b23      	ldr	r3, [pc, #140]	; (4ea4 <system_gclk_gen_get_hz+0xc8>)
    4e16:	4798      	blx	r3
    4e18:	0003      	movs	r3, r0
    4e1a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4e1c:	4a1f      	ldr	r2, [pc, #124]	; (4e9c <system_gclk_gen_get_hz+0xc0>)
    4e1e:	1dfb      	adds	r3, r7, #7
    4e20:	781b      	ldrb	r3, [r3, #0]
    4e22:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4e24:	4b1e      	ldr	r3, [pc, #120]	; (4ea0 <system_gclk_gen_get_hz+0xc4>)
    4e26:	685b      	ldr	r3, [r3, #4]
    4e28:	02db      	lsls	r3, r3, #11
    4e2a:	0fdb      	lsrs	r3, r3, #31
    4e2c:	b2da      	uxtb	r2, r3
    4e2e:	2313      	movs	r3, #19
    4e30:	18fb      	adds	r3, r7, r3
    4e32:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4e34:	4a1c      	ldr	r2, [pc, #112]	; (4ea8 <system_gclk_gen_get_hz+0xcc>)
    4e36:	1dfb      	adds	r3, r7, #7
    4e38:	781b      	ldrb	r3, [r3, #0]
    4e3a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4e3c:	46c0      	nop			; (mov r8, r8)
    4e3e:	4b15      	ldr	r3, [pc, #84]	; (4e94 <system_gclk_gen_get_hz+0xb8>)
    4e40:	4798      	blx	r3
    4e42:	1e03      	subs	r3, r0, #0
    4e44:	d1fb      	bne.n	4e3e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4e46:	4b16      	ldr	r3, [pc, #88]	; (4ea0 <system_gclk_gen_get_hz+0xc4>)
    4e48:	689b      	ldr	r3, [r3, #8]
    4e4a:	021b      	lsls	r3, r3, #8
    4e4c:	0c1b      	lsrs	r3, r3, #16
    4e4e:	b29b      	uxth	r3, r3
    4e50:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4e52:	4b16      	ldr	r3, [pc, #88]	; (4eac <system_gclk_gen_get_hz+0xd0>)
    4e54:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4e56:	2313      	movs	r3, #19
    4e58:	18fb      	adds	r3, r7, r3
    4e5a:	781b      	ldrb	r3, [r3, #0]
    4e5c:	2b00      	cmp	r3, #0
    4e5e:	d109      	bne.n	4e74 <system_gclk_gen_get_hz+0x98>
    4e60:	68fb      	ldr	r3, [r7, #12]
    4e62:	2b01      	cmp	r3, #1
    4e64:	d906      	bls.n	4e74 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    4e66:	4b12      	ldr	r3, [pc, #72]	; (4eb0 <system_gclk_gen_get_hz+0xd4>)
    4e68:	68f9      	ldr	r1, [r7, #12]
    4e6a:	6978      	ldr	r0, [r7, #20]
    4e6c:	4798      	blx	r3
    4e6e:	0003      	movs	r3, r0
    4e70:	617b      	str	r3, [r7, #20]
    4e72:	e00a      	b.n	4e8a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4e74:	2313      	movs	r3, #19
    4e76:	18fb      	adds	r3, r7, r3
    4e78:	781b      	ldrb	r3, [r3, #0]
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	d005      	beq.n	4e8a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    4e7e:	68fb      	ldr	r3, [r7, #12]
    4e80:	3301      	adds	r3, #1
    4e82:	697a      	ldr	r2, [r7, #20]
    4e84:	40da      	lsrs	r2, r3
    4e86:	0013      	movs	r3, r2
    4e88:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4e8a:	697b      	ldr	r3, [r7, #20]
}
    4e8c:	0018      	movs	r0, r3
    4e8e:	46bd      	mov	sp, r7
    4e90:	b006      	add	sp, #24
    4e92:	bd80      	pop	{r7, pc}
    4e94:	00004c0d 	.word	0x00004c0d
    4e98:	00004be5 	.word	0x00004be5
    4e9c:	40000c04 	.word	0x40000c04
    4ea0:	40000c00 	.word	0x40000c00
    4ea4:	00004899 	.word	0x00004899
    4ea8:	40000c08 	.word	0x40000c08
    4eac:	00004bf9 	.word	0x00004bf9
    4eb0:	00005211 	.word	0x00005211

00004eb4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4eb4:	b580      	push	{r7, lr}
    4eb6:	b084      	sub	sp, #16
    4eb8:	af00      	add	r7, sp, #0
    4eba:	0002      	movs	r2, r0
    4ebc:	6039      	str	r1, [r7, #0]
    4ebe:	1dfb      	adds	r3, r7, #7
    4ec0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4ec2:	1dfb      	adds	r3, r7, #7
    4ec4:	781b      	ldrb	r3, [r3, #0]
    4ec6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4ec8:	683b      	ldr	r3, [r7, #0]
    4eca:	781b      	ldrb	r3, [r3, #0]
    4ecc:	021b      	lsls	r3, r3, #8
    4ece:	001a      	movs	r2, r3
    4ed0:	68fb      	ldr	r3, [r7, #12]
    4ed2:	4313      	orrs	r3, r2
    4ed4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4ed6:	1dfb      	adds	r3, r7, #7
    4ed8:	781b      	ldrb	r3, [r3, #0]
    4eda:	0018      	movs	r0, r3
    4edc:	4b04      	ldr	r3, [pc, #16]	; (4ef0 <system_gclk_chan_set_config+0x3c>)
    4ede:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4ee0:	4b04      	ldr	r3, [pc, #16]	; (4ef4 <system_gclk_chan_set_config+0x40>)
    4ee2:	68fa      	ldr	r2, [r7, #12]
    4ee4:	b292      	uxth	r2, r2
    4ee6:	805a      	strh	r2, [r3, #2]
}
    4ee8:	46c0      	nop			; (mov r8, r8)
    4eea:	46bd      	mov	sp, r7
    4eec:	b004      	add	sp, #16
    4eee:	bd80      	pop	{r7, pc}
    4ef0:	00004f41 	.word	0x00004f41
    4ef4:	40000c00 	.word	0x40000c00

00004ef8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4ef8:	b580      	push	{r7, lr}
    4efa:	b082      	sub	sp, #8
    4efc:	af00      	add	r7, sp, #0
    4efe:	0002      	movs	r2, r0
    4f00:	1dfb      	adds	r3, r7, #7
    4f02:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4f04:	4b0a      	ldr	r3, [pc, #40]	; (4f30 <system_gclk_chan_enable+0x38>)
    4f06:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4f08:	4a0a      	ldr	r2, [pc, #40]	; (4f34 <system_gclk_chan_enable+0x3c>)
    4f0a:	1dfb      	adds	r3, r7, #7
    4f0c:	781b      	ldrb	r3, [r3, #0]
    4f0e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4f10:	4909      	ldr	r1, [pc, #36]	; (4f38 <system_gclk_chan_enable+0x40>)
    4f12:	4b09      	ldr	r3, [pc, #36]	; (4f38 <system_gclk_chan_enable+0x40>)
    4f14:	885b      	ldrh	r3, [r3, #2]
    4f16:	b29b      	uxth	r3, r3
    4f18:	2280      	movs	r2, #128	; 0x80
    4f1a:	01d2      	lsls	r2, r2, #7
    4f1c:	4313      	orrs	r3, r2
    4f1e:	b29b      	uxth	r3, r3
    4f20:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4f22:	4b06      	ldr	r3, [pc, #24]	; (4f3c <system_gclk_chan_enable+0x44>)
    4f24:	4798      	blx	r3
}
    4f26:	46c0      	nop			; (mov r8, r8)
    4f28:	46bd      	mov	sp, r7
    4f2a:	b002      	add	sp, #8
    4f2c:	bd80      	pop	{r7, pc}
    4f2e:	46c0      	nop			; (mov r8, r8)
    4f30:	00004be5 	.word	0x00004be5
    4f34:	40000c02 	.word	0x40000c02
    4f38:	40000c00 	.word	0x40000c00
    4f3c:	00004bf9 	.word	0x00004bf9

00004f40 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4f40:	b580      	push	{r7, lr}
    4f42:	b084      	sub	sp, #16
    4f44:	af00      	add	r7, sp, #0
    4f46:	0002      	movs	r2, r0
    4f48:	1dfb      	adds	r3, r7, #7
    4f4a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4f4c:	4b1c      	ldr	r3, [pc, #112]	; (4fc0 <system_gclk_chan_disable+0x80>)
    4f4e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4f50:	4a1c      	ldr	r2, [pc, #112]	; (4fc4 <system_gclk_chan_disable+0x84>)
    4f52:	1dfb      	adds	r3, r7, #7
    4f54:	781b      	ldrb	r3, [r3, #0]
    4f56:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4f58:	4b1b      	ldr	r3, [pc, #108]	; (4fc8 <system_gclk_chan_disable+0x88>)
    4f5a:	885b      	ldrh	r3, [r3, #2]
    4f5c:	051b      	lsls	r3, r3, #20
    4f5e:	0f1b      	lsrs	r3, r3, #28
    4f60:	b2db      	uxtb	r3, r3
    4f62:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4f64:	4a18      	ldr	r2, [pc, #96]	; (4fc8 <system_gclk_chan_disable+0x88>)
    4f66:	8853      	ldrh	r3, [r2, #2]
    4f68:	4918      	ldr	r1, [pc, #96]	; (4fcc <system_gclk_chan_disable+0x8c>)
    4f6a:	400b      	ands	r3, r1
    4f6c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4f6e:	4a16      	ldr	r2, [pc, #88]	; (4fc8 <system_gclk_chan_disable+0x88>)
    4f70:	4b15      	ldr	r3, [pc, #84]	; (4fc8 <system_gclk_chan_disable+0x88>)
    4f72:	885b      	ldrh	r3, [r3, #2]
    4f74:	b29b      	uxth	r3, r3
    4f76:	4916      	ldr	r1, [pc, #88]	; (4fd0 <system_gclk_chan_disable+0x90>)
    4f78:	400b      	ands	r3, r1
    4f7a:	b29b      	uxth	r3, r3
    4f7c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4f7e:	46c0      	nop			; (mov r8, r8)
    4f80:	4b11      	ldr	r3, [pc, #68]	; (4fc8 <system_gclk_chan_disable+0x88>)
    4f82:	885b      	ldrh	r3, [r3, #2]
    4f84:	b29b      	uxth	r3, r3
    4f86:	001a      	movs	r2, r3
    4f88:	2380      	movs	r3, #128	; 0x80
    4f8a:	01db      	lsls	r3, r3, #7
    4f8c:	4013      	ands	r3, r2
    4f8e:	d1f7      	bne.n	4f80 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4f90:	4a0d      	ldr	r2, [pc, #52]	; (4fc8 <system_gclk_chan_disable+0x88>)
    4f92:	68fb      	ldr	r3, [r7, #12]
    4f94:	b2db      	uxtb	r3, r3
    4f96:	1c19      	adds	r1, r3, #0
    4f98:	230f      	movs	r3, #15
    4f9a:	400b      	ands	r3, r1
    4f9c:	b2d9      	uxtb	r1, r3
    4f9e:	8853      	ldrh	r3, [r2, #2]
    4fa0:	1c08      	adds	r0, r1, #0
    4fa2:	210f      	movs	r1, #15
    4fa4:	4001      	ands	r1, r0
    4fa6:	0208      	lsls	r0, r1, #8
    4fa8:	4908      	ldr	r1, [pc, #32]	; (4fcc <system_gclk_chan_disable+0x8c>)
    4faa:	400b      	ands	r3, r1
    4fac:	1c19      	adds	r1, r3, #0
    4fae:	1c03      	adds	r3, r0, #0
    4fb0:	430b      	orrs	r3, r1
    4fb2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4fb4:	4b07      	ldr	r3, [pc, #28]	; (4fd4 <system_gclk_chan_disable+0x94>)
    4fb6:	4798      	blx	r3
}
    4fb8:	46c0      	nop			; (mov r8, r8)
    4fba:	46bd      	mov	sp, r7
    4fbc:	b004      	add	sp, #16
    4fbe:	bd80      	pop	{r7, pc}
    4fc0:	00004be5 	.word	0x00004be5
    4fc4:	40000c02 	.word	0x40000c02
    4fc8:	40000c00 	.word	0x40000c00
    4fcc:	fffff0ff 	.word	0xfffff0ff
    4fd0:	ffffbfff 	.word	0xffffbfff
    4fd4:	00004bf9 	.word	0x00004bf9

00004fd8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4fd8:	b580      	push	{r7, lr}
    4fda:	b084      	sub	sp, #16
    4fdc:	af00      	add	r7, sp, #0
    4fde:	0002      	movs	r2, r0
    4fe0:	1dfb      	adds	r3, r7, #7
    4fe2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4fe4:	4b0d      	ldr	r3, [pc, #52]	; (501c <system_gclk_chan_get_hz+0x44>)
    4fe6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4fe8:	4a0d      	ldr	r2, [pc, #52]	; (5020 <system_gclk_chan_get_hz+0x48>)
    4fea:	1dfb      	adds	r3, r7, #7
    4fec:	781b      	ldrb	r3, [r3, #0]
    4fee:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4ff0:	4b0c      	ldr	r3, [pc, #48]	; (5024 <system_gclk_chan_get_hz+0x4c>)
    4ff2:	885b      	ldrh	r3, [r3, #2]
    4ff4:	051b      	lsls	r3, r3, #20
    4ff6:	0f1b      	lsrs	r3, r3, #28
    4ff8:	b2da      	uxtb	r2, r3
    4ffa:	230f      	movs	r3, #15
    4ffc:	18fb      	adds	r3, r7, r3
    4ffe:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    5000:	4b09      	ldr	r3, [pc, #36]	; (5028 <system_gclk_chan_get_hz+0x50>)
    5002:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5004:	230f      	movs	r3, #15
    5006:	18fb      	adds	r3, r7, r3
    5008:	781b      	ldrb	r3, [r3, #0]
    500a:	0018      	movs	r0, r3
    500c:	4b07      	ldr	r3, [pc, #28]	; (502c <system_gclk_chan_get_hz+0x54>)
    500e:	4798      	blx	r3
    5010:	0003      	movs	r3, r0
}
    5012:	0018      	movs	r0, r3
    5014:	46bd      	mov	sp, r7
    5016:	b004      	add	sp, #16
    5018:	bd80      	pop	{r7, pc}
    501a:	46c0      	nop			; (mov r8, r8)
    501c:	00004be5 	.word	0x00004be5
    5020:	40000c02 	.word	0x40000c02
    5024:	40000c00 	.word	0x40000c00
    5028:	00004bf9 	.word	0x00004bf9
    502c:	00004ddd 	.word	0x00004ddd

00005030 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    5030:	b580      	push	{r7, lr}
    5032:	af00      	add	r7, sp, #0
	return;
    5034:	46c0      	nop			; (mov r8, r8)
}
    5036:	46bd      	mov	sp, r7
    5038:	bd80      	pop	{r7, pc}
	...

0000503c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    503c:	b580      	push	{r7, lr}
    503e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5040:	4b06      	ldr	r3, [pc, #24]	; (505c <system_init+0x20>)
    5042:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5044:	4b06      	ldr	r3, [pc, #24]	; (5060 <system_init+0x24>)
    5046:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5048:	4b06      	ldr	r3, [pc, #24]	; (5064 <system_init+0x28>)
    504a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    504c:	4b06      	ldr	r3, [pc, #24]	; (5068 <system_init+0x2c>)
    504e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5050:	4b06      	ldr	r3, [pc, #24]	; (506c <system_init+0x30>)
    5052:	4798      	blx	r3
}
    5054:	46c0      	nop			; (mov r8, r8)
    5056:	46bd      	mov	sp, r7
    5058:	bd80      	pop	{r7, pc}
    505a:	46c0      	nop			; (mov r8, r8)
    505c:	00004ab5 	.word	0x00004ab5
    5060:	000002a5 	.word	0x000002a5
    5064:	00005031 	.word	0x00005031
    5068:	00005031 	.word	0x00005031
    506c:	00005031 	.word	0x00005031

00005070 <system_interrupt_enable_global>:
{
    5070:	b580      	push	{r7, lr}
    5072:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    5074:	4b04      	ldr	r3, [pc, #16]	; (5088 <system_interrupt_enable_global+0x18>)
    5076:	2201      	movs	r2, #1
    5078:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    507a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    507e:	b662      	cpsie	i
}
    5080:	46c0      	nop			; (mov r8, r8)
    5082:	46bd      	mov	sp, r7
    5084:	bd80      	pop	{r7, pc}
    5086:	46c0      	nop			; (mov r8, r8)
    5088:	20000000 	.word	0x20000000

0000508c <main>:

volatile char buffer[7];


int main (void)
{
    508c:	b590      	push	{r4, r7, lr}
    508e:	b089      	sub	sp, #36	; 0x24
    5090:	af00      	add	r7, sp, #0
	//Board Initialization -- Code that initializes the HW and happens only once
	system_init();
    5092:	4b1b      	ldr	r3, [pc, #108]	; (5100 <main+0x74>)
    5094:	4798      	blx	r3
	InitializeSerialConsole();
    5096:	4b1b      	ldr	r3, [pc, #108]	; (5104 <main+0x78>)
    5098:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */


	system_interrupt_enable_global();
    509a:	4b1b      	ldr	r3, [pc, #108]	; (5108 <main+0x7c>)
    509c:	4798      	blx	r3
	
	SerialConsoleWriteString("ESE516 - CLI and Debug Logger\r\n");	//Order to add string to TX Buffer
    509e:	4b1b      	ldr	r3, [pc, #108]	; (510c <main+0x80>)
    50a0:	0018      	movs	r0, r3
    50a2:	4b1b      	ldr	r3, [pc, #108]	; (5110 <main+0x84>)
    50a4:	4798      	blx	r3
	
	char string[] = "CLI starter code - ESE516\r\n";
    50a6:	1d3b      	adds	r3, r7, #4
    50a8:	4a1a      	ldr	r2, [pc, #104]	; (5114 <main+0x88>)
    50aa:	ca13      	ldmia	r2!, {r0, r1, r4}
    50ac:	c313      	stmia	r3!, {r0, r1, r4}
    50ae:	ca13      	ldmia	r2!, {r0, r1, r4}
    50b0:	c313      	stmia	r3!, {r0, r1, r4}
    50b2:	6812      	ldr	r2, [r2, #0]
    50b4:	601a      	str	r2, [r3, #0]
	
	/*Simple DebugLogger Test*/
	setLogLevel(LOG_INFO_LVL); 
    50b6:	2000      	movs	r0, #0
    50b8:	4b17      	ldr	r3, [pc, #92]	; (5118 <main+0x8c>)
    50ba:	4798      	blx	r3
	LogMessage(LOG_INFO_LVL , "%s", string); //Test
    50bc:	1d3a      	adds	r2, r7, #4
    50be:	4b17      	ldr	r3, [pc, #92]	; (511c <main+0x90>)
    50c0:	0019      	movs	r1, r3
    50c2:	2000      	movs	r0, #0
    50c4:	4b16      	ldr	r3, [pc, #88]	; (5120 <main+0x94>)
    50c6:	4798      	blx	r3
	setLogLevel(LOG_ERROR_LVL); //Sets the Debug Logger to only allow messages with LOG_ERROR_LVL or higher to be printed
    50c8:	2003      	movs	r0, #3
    50ca:	4b13      	ldr	r3, [pc, #76]	; (5118 <main+0x8c>)
    50cc:	4798      	blx	r3
	LogMessage(LOG_INFO_LVL, "Performing Temperature Test\r\n"); //This should NOT print
    50ce:	4b15      	ldr	r3, [pc, #84]	; (5124 <main+0x98>)
    50d0:	0019      	movs	r1, r3
    50d2:	2000      	movs	r0, #0
    50d4:	4b12      	ldr	r3, [pc, #72]	; (5120 <main+0x94>)
    50d6:	4798      	blx	r3
	LogMessage(LOG_FATAL_LVL,"Error! Temperature over %d Degrees!\r\n", 55); //This should print
    50d8:	4b13      	ldr	r3, [pc, #76]	; (5128 <main+0x9c>)
    50da:	2237      	movs	r2, #55	; 0x37
    50dc:	0019      	movs	r1, r3
    50de:	2004      	movs	r0, #4
    50e0:	4b0f      	ldr	r3, [pc, #60]	; (5120 <main+0x94>)
    50e2:	4798      	blx	r3
	LogMessage(LOG_ERROR_LVL,"System error!\r\n"); //This should print , since they are the same level
    50e4:	4b11      	ldr	r3, [pc, #68]	; (512c <main+0xa0>)
    50e6:	0019      	movs	r1, r3
    50e8:	2003      	movs	r0, #3
    50ea:	4b0d      	ldr	r3, [pc, #52]	; (5120 <main+0x94>)
    50ec:	4798      	blx	r3
	
    LogMessage(LOG_INFO_LVL , "ESE516 CLI STARTER PROJECT STARTED\r\n"); //this should not print since it is error level now
    50ee:	4b10      	ldr	r3, [pc, #64]	; (5130 <main+0xa4>)
    50f0:	0019      	movs	r1, r3
    50f2:	2000      	movs	r0, #0
    50f4:	4b0a      	ldr	r3, [pc, #40]	; (5120 <main+0x94>)
    50f6:	4798      	blx	r3

    // Start FreeRTOS scheduler.
    vTaskStartScheduler();
    50f8:	4b0e      	ldr	r3, [pc, #56]	; (5134 <main+0xa8>)
    50fa:	4798      	blx	r3

	while(1);
    50fc:	e7fe      	b.n	50fc <main+0x70>
    50fe:	46c0      	nop			; (mov r8, r8)
    5100:	0000503d 	.word	0x0000503d
    5104:	00003705 	.word	0x00003705
    5108:	00005071 	.word	0x00005071
    510c:	0000603c 	.word	0x0000603c
    5110:	00003781 	.word	0x00003781
    5114:	000060e0 	.word	0x000060e0
    5118:	0000380d 	.word	0x0000380d
    511c:	0000605c 	.word	0x0000605c
    5120:	0000382d 	.word	0x0000382d
    5124:	00006060 	.word	0x00006060
    5128:	00006080 	.word	0x00006080
    512c:	000060a8 	.word	0x000060a8
    5130:	000060b8 	.word	0x000060b8
    5134:	0000202d 	.word	0x0000202d

00005138 <StartTasks>:
* @details
* @param[in]        None
* @return           None
*****************************************************************************/
static void StartTasks(void)
{
    5138:	b590      	push	{r4, r7, lr}
    513a:	b083      	sub	sp, #12
    513c:	af02      	add	r7, sp, #8
	

	snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
    513e:	4b17      	ldr	r3, [pc, #92]	; (519c <StartTasks+0x64>)
    5140:	4798      	blx	r3
    5142:	0003      	movs	r3, r0
    5144:	4a16      	ldr	r2, [pc, #88]	; (51a0 <StartTasks+0x68>)
    5146:	4817      	ldr	r0, [pc, #92]	; (51a4 <StartTasks+0x6c>)
    5148:	2140      	movs	r1, #64	; 0x40
    514a:	4c17      	ldr	r4, [pc, #92]	; (51a8 <StartTasks+0x70>)
    514c:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
    514e:	4b15      	ldr	r3, [pc, #84]	; (51a4 <StartTasks+0x6c>)
    5150:	0018      	movs	r0, r3
    5152:	4b16      	ldr	r3, [pc, #88]	; (51ac <StartTasks+0x74>)
    5154:	4798      	blx	r3

	//Initialize Tasks here
	
	if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
    5156:	2380      	movs	r3, #128	; 0x80
    5158:	005a      	lsls	r2, r3, #1
    515a:	4915      	ldr	r1, [pc, #84]	; (51b0 <StartTasks+0x78>)
    515c:	4815      	ldr	r0, [pc, #84]	; (51b4 <StartTasks+0x7c>)
    515e:	4b16      	ldr	r3, [pc, #88]	; (51b8 <StartTasks+0x80>)
    5160:	9301      	str	r3, [sp, #4]
    5162:	2304      	movs	r3, #4
    5164:	9300      	str	r3, [sp, #0]
    5166:	2300      	movs	r3, #0
    5168:	4c14      	ldr	r4, [pc, #80]	; (51bc <StartTasks+0x84>)
    516a:	47a0      	blx	r4
    516c:	0003      	movs	r3, r0
    516e:	2b01      	cmp	r3, #1
    5170:	d003      	beq.n	517a <StartTasks+0x42>
		SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
    5172:	4b13      	ldr	r3, [pc, #76]	; (51c0 <StartTasks+0x88>)
    5174:	0018      	movs	r0, r3
    5176:	4b0d      	ldr	r3, [pc, #52]	; (51ac <StartTasks+0x74>)
    5178:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
    517a:	4b08      	ldr	r3, [pc, #32]	; (519c <StartTasks+0x64>)
    517c:	4798      	blx	r3
    517e:	0003      	movs	r3, r0
    5180:	4a10      	ldr	r2, [pc, #64]	; (51c4 <StartTasks+0x8c>)
    5182:	4808      	ldr	r0, [pc, #32]	; (51a4 <StartTasks+0x6c>)
    5184:	2140      	movs	r1, #64	; 0x40
    5186:	4c08      	ldr	r4, [pc, #32]	; (51a8 <StartTasks+0x70>)
    5188:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
    518a:	4b06      	ldr	r3, [pc, #24]	; (51a4 <StartTasks+0x6c>)
    518c:	0018      	movs	r0, r3
    518e:	4b07      	ldr	r3, [pc, #28]	; (51ac <StartTasks+0x74>)
    5190:	4798      	blx	r3
	
}
    5192:	46c0      	nop			; (mov r8, r8)
    5194:	46bd      	mov	sp, r7
    5196:	b001      	add	sp, #4
    5198:	bd90      	pop	{r4, r7, pc}
    519a:	46c0      	nop			; (mov r8, r8)
    519c:	0000133d 	.word	0x0000133d
    51a0:	000060fc 	.word	0x000060fc
    51a4:	200033d8 	.word	0x200033d8
    51a8:	00005571 	.word	0x00005571
    51ac:	00003781 	.word	0x00003781
    51b0:	00006120 	.word	0x00006120
    51b4:	00002fb1 	.word	0x00002fb1
    51b8:	20003418 	.word	0x20003418
    51bc:	00001d99 	.word	0x00001d99
    51c0:	0000612c 	.word	0x0000612c
    51c4:	00006158 	.word	0x00006158

000051c8 <vApplicationDaemonTaskStartupHook>:
* @param[in]        None
* @return           None
*****************************************************************************/

void vApplicationDaemonTaskStartupHook (void *ucParameterToPass) //vApplicationDaemonTaskStartupHook()
{
    51c8:	b580      	push	{r7, lr}
    51ca:	b082      	sub	sp, #8
    51cc:	af00      	add	r7, sp, #0
    51ce:	6078      	str	r0, [r7, #4]
	
	//CODE HERE: Initialize any HW here
	//SerialConsoleWriteString("hi\r\n");
	
	//Initialize tasks
	StartTasks();	
    51d0:	4b02      	ldr	r3, [pc, #8]	; (51dc <vApplicationDaemonTaskStartupHook+0x14>)
    51d2:	4798      	blx	r3
	
	
}
    51d4:	46c0      	nop			; (mov r8, r8)
    51d6:	46bd      	mov	sp, r7
    51d8:	b002      	add	sp, #8
    51da:	bd80      	pop	{r7, pc}
    51dc:	00005139 	.word	0x00005139

000051e0 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
    51e0:	b580      	push	{r7, lr}
    51e2:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
    51e4:	4b02      	ldr	r3, [pc, #8]	; (51f0 <vApplicationMallocFailedHook+0x10>)
    51e6:	0018      	movs	r0, r3
    51e8:	4b02      	ldr	r3, [pc, #8]	; (51f4 <vApplicationMallocFailedHook+0x14>)
    51ea:	4798      	blx	r3
	while(1);
    51ec:	e7fe      	b.n	51ec <vApplicationMallocFailedHook+0xc>
    51ee:	46c0      	nop			; (mov r8, r8)
    51f0:	00006178 	.word	0x00006178
    51f4:	00003781 	.word	0x00003781

000051f8 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(void)
{
    51f8:	b580      	push	{r7, lr}
    51fa:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
    51fc:	4b02      	ldr	r3, [pc, #8]	; (5208 <vApplicationStackOverflowHook+0x10>)
    51fe:	0018      	movs	r0, r3
    5200:	4b02      	ldr	r3, [pc, #8]	; (520c <vApplicationStackOverflowHook+0x14>)
    5202:	4798      	blx	r3
	while(1);
    5204:	e7fe      	b.n	5204 <vApplicationStackOverflowHook+0xc>
    5206:	46c0      	nop			; (mov r8, r8)
    5208:	000061a4 	.word	0x000061a4
    520c:	00003781 	.word	0x00003781

00005210 <__udivsi3>:
    5210:	2200      	movs	r2, #0
    5212:	0843      	lsrs	r3, r0, #1
    5214:	428b      	cmp	r3, r1
    5216:	d374      	bcc.n	5302 <__udivsi3+0xf2>
    5218:	0903      	lsrs	r3, r0, #4
    521a:	428b      	cmp	r3, r1
    521c:	d35f      	bcc.n	52de <__udivsi3+0xce>
    521e:	0a03      	lsrs	r3, r0, #8
    5220:	428b      	cmp	r3, r1
    5222:	d344      	bcc.n	52ae <__udivsi3+0x9e>
    5224:	0b03      	lsrs	r3, r0, #12
    5226:	428b      	cmp	r3, r1
    5228:	d328      	bcc.n	527c <__udivsi3+0x6c>
    522a:	0c03      	lsrs	r3, r0, #16
    522c:	428b      	cmp	r3, r1
    522e:	d30d      	bcc.n	524c <__udivsi3+0x3c>
    5230:	22ff      	movs	r2, #255	; 0xff
    5232:	0209      	lsls	r1, r1, #8
    5234:	ba12      	rev	r2, r2
    5236:	0c03      	lsrs	r3, r0, #16
    5238:	428b      	cmp	r3, r1
    523a:	d302      	bcc.n	5242 <__udivsi3+0x32>
    523c:	1212      	asrs	r2, r2, #8
    523e:	0209      	lsls	r1, r1, #8
    5240:	d065      	beq.n	530e <__udivsi3+0xfe>
    5242:	0b03      	lsrs	r3, r0, #12
    5244:	428b      	cmp	r3, r1
    5246:	d319      	bcc.n	527c <__udivsi3+0x6c>
    5248:	e000      	b.n	524c <__udivsi3+0x3c>
    524a:	0a09      	lsrs	r1, r1, #8
    524c:	0bc3      	lsrs	r3, r0, #15
    524e:	428b      	cmp	r3, r1
    5250:	d301      	bcc.n	5256 <__udivsi3+0x46>
    5252:	03cb      	lsls	r3, r1, #15
    5254:	1ac0      	subs	r0, r0, r3
    5256:	4152      	adcs	r2, r2
    5258:	0b83      	lsrs	r3, r0, #14
    525a:	428b      	cmp	r3, r1
    525c:	d301      	bcc.n	5262 <__udivsi3+0x52>
    525e:	038b      	lsls	r3, r1, #14
    5260:	1ac0      	subs	r0, r0, r3
    5262:	4152      	adcs	r2, r2
    5264:	0b43      	lsrs	r3, r0, #13
    5266:	428b      	cmp	r3, r1
    5268:	d301      	bcc.n	526e <__udivsi3+0x5e>
    526a:	034b      	lsls	r3, r1, #13
    526c:	1ac0      	subs	r0, r0, r3
    526e:	4152      	adcs	r2, r2
    5270:	0b03      	lsrs	r3, r0, #12
    5272:	428b      	cmp	r3, r1
    5274:	d301      	bcc.n	527a <__udivsi3+0x6a>
    5276:	030b      	lsls	r3, r1, #12
    5278:	1ac0      	subs	r0, r0, r3
    527a:	4152      	adcs	r2, r2
    527c:	0ac3      	lsrs	r3, r0, #11
    527e:	428b      	cmp	r3, r1
    5280:	d301      	bcc.n	5286 <__udivsi3+0x76>
    5282:	02cb      	lsls	r3, r1, #11
    5284:	1ac0      	subs	r0, r0, r3
    5286:	4152      	adcs	r2, r2
    5288:	0a83      	lsrs	r3, r0, #10
    528a:	428b      	cmp	r3, r1
    528c:	d301      	bcc.n	5292 <__udivsi3+0x82>
    528e:	028b      	lsls	r3, r1, #10
    5290:	1ac0      	subs	r0, r0, r3
    5292:	4152      	adcs	r2, r2
    5294:	0a43      	lsrs	r3, r0, #9
    5296:	428b      	cmp	r3, r1
    5298:	d301      	bcc.n	529e <__udivsi3+0x8e>
    529a:	024b      	lsls	r3, r1, #9
    529c:	1ac0      	subs	r0, r0, r3
    529e:	4152      	adcs	r2, r2
    52a0:	0a03      	lsrs	r3, r0, #8
    52a2:	428b      	cmp	r3, r1
    52a4:	d301      	bcc.n	52aa <__udivsi3+0x9a>
    52a6:	020b      	lsls	r3, r1, #8
    52a8:	1ac0      	subs	r0, r0, r3
    52aa:	4152      	adcs	r2, r2
    52ac:	d2cd      	bcs.n	524a <__udivsi3+0x3a>
    52ae:	09c3      	lsrs	r3, r0, #7
    52b0:	428b      	cmp	r3, r1
    52b2:	d301      	bcc.n	52b8 <__udivsi3+0xa8>
    52b4:	01cb      	lsls	r3, r1, #7
    52b6:	1ac0      	subs	r0, r0, r3
    52b8:	4152      	adcs	r2, r2
    52ba:	0983      	lsrs	r3, r0, #6
    52bc:	428b      	cmp	r3, r1
    52be:	d301      	bcc.n	52c4 <__udivsi3+0xb4>
    52c0:	018b      	lsls	r3, r1, #6
    52c2:	1ac0      	subs	r0, r0, r3
    52c4:	4152      	adcs	r2, r2
    52c6:	0943      	lsrs	r3, r0, #5
    52c8:	428b      	cmp	r3, r1
    52ca:	d301      	bcc.n	52d0 <__udivsi3+0xc0>
    52cc:	014b      	lsls	r3, r1, #5
    52ce:	1ac0      	subs	r0, r0, r3
    52d0:	4152      	adcs	r2, r2
    52d2:	0903      	lsrs	r3, r0, #4
    52d4:	428b      	cmp	r3, r1
    52d6:	d301      	bcc.n	52dc <__udivsi3+0xcc>
    52d8:	010b      	lsls	r3, r1, #4
    52da:	1ac0      	subs	r0, r0, r3
    52dc:	4152      	adcs	r2, r2
    52de:	08c3      	lsrs	r3, r0, #3
    52e0:	428b      	cmp	r3, r1
    52e2:	d301      	bcc.n	52e8 <__udivsi3+0xd8>
    52e4:	00cb      	lsls	r3, r1, #3
    52e6:	1ac0      	subs	r0, r0, r3
    52e8:	4152      	adcs	r2, r2
    52ea:	0883      	lsrs	r3, r0, #2
    52ec:	428b      	cmp	r3, r1
    52ee:	d301      	bcc.n	52f4 <__udivsi3+0xe4>
    52f0:	008b      	lsls	r3, r1, #2
    52f2:	1ac0      	subs	r0, r0, r3
    52f4:	4152      	adcs	r2, r2
    52f6:	0843      	lsrs	r3, r0, #1
    52f8:	428b      	cmp	r3, r1
    52fa:	d301      	bcc.n	5300 <__udivsi3+0xf0>
    52fc:	004b      	lsls	r3, r1, #1
    52fe:	1ac0      	subs	r0, r0, r3
    5300:	4152      	adcs	r2, r2
    5302:	1a41      	subs	r1, r0, r1
    5304:	d200      	bcs.n	5308 <__udivsi3+0xf8>
    5306:	4601      	mov	r1, r0
    5308:	4152      	adcs	r2, r2
    530a:	4610      	mov	r0, r2
    530c:	4770      	bx	lr
    530e:	e7ff      	b.n	5310 <__udivsi3+0x100>
    5310:	b501      	push	{r0, lr}
    5312:	2000      	movs	r0, #0
    5314:	f000 f806 	bl	5324 <__aeabi_idiv0>
    5318:	bd02      	pop	{r1, pc}
    531a:	46c0      	nop			; (mov r8, r8)

0000531c <__aeabi_uidivmod>:
    531c:	2900      	cmp	r1, #0
    531e:	d0f7      	beq.n	5310 <__udivsi3+0x100>
    5320:	e776      	b.n	5210 <__udivsi3>
    5322:	4770      	bx	lr

00005324 <__aeabi_idiv0>:
    5324:	4770      	bx	lr
    5326:	46c0      	nop			; (mov r8, r8)

00005328 <__aeabi_lmul>:
    5328:	b5f0      	push	{r4, r5, r6, r7, lr}
    532a:	46ce      	mov	lr, r9
    532c:	4647      	mov	r7, r8
    532e:	0415      	lsls	r5, r2, #16
    5330:	0c2d      	lsrs	r5, r5, #16
    5332:	002e      	movs	r6, r5
    5334:	b580      	push	{r7, lr}
    5336:	0407      	lsls	r7, r0, #16
    5338:	0c14      	lsrs	r4, r2, #16
    533a:	0c3f      	lsrs	r7, r7, #16
    533c:	4699      	mov	r9, r3
    533e:	0c03      	lsrs	r3, r0, #16
    5340:	437e      	muls	r6, r7
    5342:	435d      	muls	r5, r3
    5344:	4367      	muls	r7, r4
    5346:	4363      	muls	r3, r4
    5348:	197f      	adds	r7, r7, r5
    534a:	0c34      	lsrs	r4, r6, #16
    534c:	19e4      	adds	r4, r4, r7
    534e:	469c      	mov	ip, r3
    5350:	42a5      	cmp	r5, r4
    5352:	d903      	bls.n	535c <__aeabi_lmul+0x34>
    5354:	2380      	movs	r3, #128	; 0x80
    5356:	025b      	lsls	r3, r3, #9
    5358:	4698      	mov	r8, r3
    535a:	44c4      	add	ip, r8
    535c:	464b      	mov	r3, r9
    535e:	4351      	muls	r1, r2
    5360:	4343      	muls	r3, r0
    5362:	0436      	lsls	r6, r6, #16
    5364:	0c36      	lsrs	r6, r6, #16
    5366:	0c25      	lsrs	r5, r4, #16
    5368:	0424      	lsls	r4, r4, #16
    536a:	4465      	add	r5, ip
    536c:	19a4      	adds	r4, r4, r6
    536e:	1859      	adds	r1, r3, r1
    5370:	1949      	adds	r1, r1, r5
    5372:	0020      	movs	r0, r4
    5374:	bc0c      	pop	{r2, r3}
    5376:	4690      	mov	r8, r2
    5378:	4699      	mov	r9, r3
    537a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000537c <__libc_init_array>:
    537c:	b570      	push	{r4, r5, r6, lr}
    537e:	2600      	movs	r6, #0
    5380:	4d0c      	ldr	r5, [pc, #48]	; (53b4 <__libc_init_array+0x38>)
    5382:	4c0d      	ldr	r4, [pc, #52]	; (53b8 <__libc_init_array+0x3c>)
    5384:	1b64      	subs	r4, r4, r5
    5386:	10a4      	asrs	r4, r4, #2
    5388:	42a6      	cmp	r6, r4
    538a:	d109      	bne.n	53a0 <__libc_init_array+0x24>
    538c:	2600      	movs	r6, #0
    538e:	f000 ffbd 	bl	630c <_init>
    5392:	4d0a      	ldr	r5, [pc, #40]	; (53bc <__libc_init_array+0x40>)
    5394:	4c0a      	ldr	r4, [pc, #40]	; (53c0 <__libc_init_array+0x44>)
    5396:	1b64      	subs	r4, r4, r5
    5398:	10a4      	asrs	r4, r4, #2
    539a:	42a6      	cmp	r6, r4
    539c:	d105      	bne.n	53aa <__libc_init_array+0x2e>
    539e:	bd70      	pop	{r4, r5, r6, pc}
    53a0:	00b3      	lsls	r3, r6, #2
    53a2:	58eb      	ldr	r3, [r5, r3]
    53a4:	4798      	blx	r3
    53a6:	3601      	adds	r6, #1
    53a8:	e7ee      	b.n	5388 <__libc_init_array+0xc>
    53aa:	00b3      	lsls	r3, r6, #2
    53ac:	58eb      	ldr	r3, [r5, r3]
    53ae:	4798      	blx	r3
    53b0:	3601      	adds	r6, #1
    53b2:	e7f2      	b.n	539a <__libc_init_array+0x1e>
    53b4:	00006318 	.word	0x00006318
    53b8:	00006318 	.word	0x00006318
    53bc:	00006318 	.word	0x00006318
    53c0:	0000631c 	.word	0x0000631c

000053c4 <malloc>:
    53c4:	b510      	push	{r4, lr}
    53c6:	4b03      	ldr	r3, [pc, #12]	; (53d4 <malloc+0x10>)
    53c8:	0001      	movs	r1, r0
    53ca:	6818      	ldr	r0, [r3, #0]
    53cc:	f000 f860 	bl	5490 <_malloc_r>
    53d0:	bd10      	pop	{r4, pc}
    53d2:	46c0      	nop			; (mov r8, r8)
    53d4:	20000014 	.word	0x20000014

000053d8 <memcpy>:
    53d8:	2300      	movs	r3, #0
    53da:	b510      	push	{r4, lr}
    53dc:	429a      	cmp	r2, r3
    53de:	d100      	bne.n	53e2 <memcpy+0xa>
    53e0:	bd10      	pop	{r4, pc}
    53e2:	5ccc      	ldrb	r4, [r1, r3]
    53e4:	54c4      	strb	r4, [r0, r3]
    53e6:	3301      	adds	r3, #1
    53e8:	e7f8      	b.n	53dc <memcpy+0x4>

000053ea <memset>:
    53ea:	0003      	movs	r3, r0
    53ec:	1882      	adds	r2, r0, r2
    53ee:	4293      	cmp	r3, r2
    53f0:	d100      	bne.n	53f4 <memset+0xa>
    53f2:	4770      	bx	lr
    53f4:	7019      	strb	r1, [r3, #0]
    53f6:	3301      	adds	r3, #1
    53f8:	e7f9      	b.n	53ee <memset+0x4>
	...

000053fc <_free_r>:
    53fc:	b570      	push	{r4, r5, r6, lr}
    53fe:	0005      	movs	r5, r0
    5400:	2900      	cmp	r1, #0
    5402:	d010      	beq.n	5426 <_free_r+0x2a>
    5404:	1f0c      	subs	r4, r1, #4
    5406:	6823      	ldr	r3, [r4, #0]
    5408:	2b00      	cmp	r3, #0
    540a:	da00      	bge.n	540e <_free_r+0x12>
    540c:	18e4      	adds	r4, r4, r3
    540e:	0028      	movs	r0, r5
    5410:	f000 f992 	bl	5738 <__malloc_lock>
    5414:	4a1d      	ldr	r2, [pc, #116]	; (548c <_free_r+0x90>)
    5416:	6813      	ldr	r3, [r2, #0]
    5418:	2b00      	cmp	r3, #0
    541a:	d105      	bne.n	5428 <_free_r+0x2c>
    541c:	6063      	str	r3, [r4, #4]
    541e:	6014      	str	r4, [r2, #0]
    5420:	0028      	movs	r0, r5
    5422:	f000 f98a 	bl	573a <__malloc_unlock>
    5426:	bd70      	pop	{r4, r5, r6, pc}
    5428:	42a3      	cmp	r3, r4
    542a:	d909      	bls.n	5440 <_free_r+0x44>
    542c:	6821      	ldr	r1, [r4, #0]
    542e:	1860      	adds	r0, r4, r1
    5430:	4283      	cmp	r3, r0
    5432:	d1f3      	bne.n	541c <_free_r+0x20>
    5434:	6818      	ldr	r0, [r3, #0]
    5436:	685b      	ldr	r3, [r3, #4]
    5438:	1841      	adds	r1, r0, r1
    543a:	6021      	str	r1, [r4, #0]
    543c:	e7ee      	b.n	541c <_free_r+0x20>
    543e:	0013      	movs	r3, r2
    5440:	685a      	ldr	r2, [r3, #4]
    5442:	2a00      	cmp	r2, #0
    5444:	d001      	beq.n	544a <_free_r+0x4e>
    5446:	42a2      	cmp	r2, r4
    5448:	d9f9      	bls.n	543e <_free_r+0x42>
    544a:	6819      	ldr	r1, [r3, #0]
    544c:	1858      	adds	r0, r3, r1
    544e:	42a0      	cmp	r0, r4
    5450:	d10b      	bne.n	546a <_free_r+0x6e>
    5452:	6820      	ldr	r0, [r4, #0]
    5454:	1809      	adds	r1, r1, r0
    5456:	1858      	adds	r0, r3, r1
    5458:	6019      	str	r1, [r3, #0]
    545a:	4282      	cmp	r2, r0
    545c:	d1e0      	bne.n	5420 <_free_r+0x24>
    545e:	6810      	ldr	r0, [r2, #0]
    5460:	6852      	ldr	r2, [r2, #4]
    5462:	1841      	adds	r1, r0, r1
    5464:	6019      	str	r1, [r3, #0]
    5466:	605a      	str	r2, [r3, #4]
    5468:	e7da      	b.n	5420 <_free_r+0x24>
    546a:	42a0      	cmp	r0, r4
    546c:	d902      	bls.n	5474 <_free_r+0x78>
    546e:	230c      	movs	r3, #12
    5470:	602b      	str	r3, [r5, #0]
    5472:	e7d5      	b.n	5420 <_free_r+0x24>
    5474:	6821      	ldr	r1, [r4, #0]
    5476:	1860      	adds	r0, r4, r1
    5478:	4282      	cmp	r2, r0
    547a:	d103      	bne.n	5484 <_free_r+0x88>
    547c:	6810      	ldr	r0, [r2, #0]
    547e:	6852      	ldr	r2, [r2, #4]
    5480:	1841      	adds	r1, r0, r1
    5482:	6021      	str	r1, [r4, #0]
    5484:	6062      	str	r2, [r4, #4]
    5486:	605c      	str	r4, [r3, #4]
    5488:	e7ca      	b.n	5420 <_free_r+0x24>
    548a:	46c0      	nop			; (mov r8, r8)
    548c:	2000341c 	.word	0x2000341c

00005490 <_malloc_r>:
    5490:	2303      	movs	r3, #3
    5492:	b570      	push	{r4, r5, r6, lr}
    5494:	1ccd      	adds	r5, r1, #3
    5496:	439d      	bics	r5, r3
    5498:	3508      	adds	r5, #8
    549a:	0006      	movs	r6, r0
    549c:	2d0c      	cmp	r5, #12
    549e:	d21e      	bcs.n	54de <_malloc_r+0x4e>
    54a0:	250c      	movs	r5, #12
    54a2:	42a9      	cmp	r1, r5
    54a4:	d81d      	bhi.n	54e2 <_malloc_r+0x52>
    54a6:	0030      	movs	r0, r6
    54a8:	f000 f946 	bl	5738 <__malloc_lock>
    54ac:	4a25      	ldr	r2, [pc, #148]	; (5544 <_malloc_r+0xb4>)
    54ae:	6814      	ldr	r4, [r2, #0]
    54b0:	0021      	movs	r1, r4
    54b2:	2900      	cmp	r1, #0
    54b4:	d119      	bne.n	54ea <_malloc_r+0x5a>
    54b6:	4c24      	ldr	r4, [pc, #144]	; (5548 <_malloc_r+0xb8>)
    54b8:	6823      	ldr	r3, [r4, #0]
    54ba:	2b00      	cmp	r3, #0
    54bc:	d103      	bne.n	54c6 <_malloc_r+0x36>
    54be:	0030      	movs	r0, r6
    54c0:	f000 f844 	bl	554c <_sbrk_r>
    54c4:	6020      	str	r0, [r4, #0]
    54c6:	0029      	movs	r1, r5
    54c8:	0030      	movs	r0, r6
    54ca:	f000 f83f 	bl	554c <_sbrk_r>
    54ce:	1c43      	adds	r3, r0, #1
    54d0:	d12c      	bne.n	552c <_malloc_r+0x9c>
    54d2:	230c      	movs	r3, #12
    54d4:	0030      	movs	r0, r6
    54d6:	6033      	str	r3, [r6, #0]
    54d8:	f000 f92f 	bl	573a <__malloc_unlock>
    54dc:	e003      	b.n	54e6 <_malloc_r+0x56>
    54de:	2d00      	cmp	r5, #0
    54e0:	dadf      	bge.n	54a2 <_malloc_r+0x12>
    54e2:	230c      	movs	r3, #12
    54e4:	6033      	str	r3, [r6, #0]
    54e6:	2000      	movs	r0, #0
    54e8:	bd70      	pop	{r4, r5, r6, pc}
    54ea:	680b      	ldr	r3, [r1, #0]
    54ec:	1b5b      	subs	r3, r3, r5
    54ee:	d41a      	bmi.n	5526 <_malloc_r+0x96>
    54f0:	2b0b      	cmp	r3, #11
    54f2:	d903      	bls.n	54fc <_malloc_r+0x6c>
    54f4:	600b      	str	r3, [r1, #0]
    54f6:	18cc      	adds	r4, r1, r3
    54f8:	6025      	str	r5, [r4, #0]
    54fa:	e003      	b.n	5504 <_malloc_r+0x74>
    54fc:	428c      	cmp	r4, r1
    54fe:	d10e      	bne.n	551e <_malloc_r+0x8e>
    5500:	6863      	ldr	r3, [r4, #4]
    5502:	6013      	str	r3, [r2, #0]
    5504:	0030      	movs	r0, r6
    5506:	f000 f918 	bl	573a <__malloc_unlock>
    550a:	0020      	movs	r0, r4
    550c:	2207      	movs	r2, #7
    550e:	300b      	adds	r0, #11
    5510:	1d23      	adds	r3, r4, #4
    5512:	4390      	bics	r0, r2
    5514:	1ac3      	subs	r3, r0, r3
    5516:	d0e7      	beq.n	54e8 <_malloc_r+0x58>
    5518:	425a      	negs	r2, r3
    551a:	50e2      	str	r2, [r4, r3]
    551c:	e7e4      	b.n	54e8 <_malloc_r+0x58>
    551e:	684b      	ldr	r3, [r1, #4]
    5520:	6063      	str	r3, [r4, #4]
    5522:	000c      	movs	r4, r1
    5524:	e7ee      	b.n	5504 <_malloc_r+0x74>
    5526:	000c      	movs	r4, r1
    5528:	6849      	ldr	r1, [r1, #4]
    552a:	e7c2      	b.n	54b2 <_malloc_r+0x22>
    552c:	2303      	movs	r3, #3
    552e:	1cc4      	adds	r4, r0, #3
    5530:	439c      	bics	r4, r3
    5532:	42a0      	cmp	r0, r4
    5534:	d0e0      	beq.n	54f8 <_malloc_r+0x68>
    5536:	1a21      	subs	r1, r4, r0
    5538:	0030      	movs	r0, r6
    553a:	f000 f807 	bl	554c <_sbrk_r>
    553e:	1c43      	adds	r3, r0, #1
    5540:	d1da      	bne.n	54f8 <_malloc_r+0x68>
    5542:	e7c6      	b.n	54d2 <_malloc_r+0x42>
    5544:	2000341c 	.word	0x2000341c
    5548:	20003420 	.word	0x20003420

0000554c <_sbrk_r>:
    554c:	2300      	movs	r3, #0
    554e:	b570      	push	{r4, r5, r6, lr}
    5550:	4c06      	ldr	r4, [pc, #24]	; (556c <_sbrk_r+0x20>)
    5552:	0005      	movs	r5, r0
    5554:	0008      	movs	r0, r1
    5556:	6023      	str	r3, [r4, #0]
    5558:	f7fb fb52 	bl	c00 <_sbrk>
    555c:	1c43      	adds	r3, r0, #1
    555e:	d103      	bne.n	5568 <_sbrk_r+0x1c>
    5560:	6823      	ldr	r3, [r4, #0]
    5562:	2b00      	cmp	r3, #0
    5564:	d000      	beq.n	5568 <_sbrk_r+0x1c>
    5566:	602b      	str	r3, [r5, #0]
    5568:	bd70      	pop	{r4, r5, r6, pc}
    556a:	46c0      	nop			; (mov r8, r8)
    556c:	200038d4 	.word	0x200038d4

00005570 <sniprintf>:
    5570:	b40c      	push	{r2, r3}
    5572:	b530      	push	{r4, r5, lr}
    5574:	4b16      	ldr	r3, [pc, #88]	; (55d0 <sniprintf+0x60>)
    5576:	b09d      	sub	sp, #116	; 0x74
    5578:	1e0c      	subs	r4, r1, #0
    557a:	681d      	ldr	r5, [r3, #0]
    557c:	da08      	bge.n	5590 <sniprintf+0x20>
    557e:	238b      	movs	r3, #139	; 0x8b
    5580:	2001      	movs	r0, #1
    5582:	602b      	str	r3, [r5, #0]
    5584:	4240      	negs	r0, r0
    5586:	b01d      	add	sp, #116	; 0x74
    5588:	bc30      	pop	{r4, r5}
    558a:	bc08      	pop	{r3}
    558c:	b002      	add	sp, #8
    558e:	4718      	bx	r3
    5590:	2382      	movs	r3, #130	; 0x82
    5592:	a902      	add	r1, sp, #8
    5594:	009b      	lsls	r3, r3, #2
    5596:	818b      	strh	r3, [r1, #12]
    5598:	2300      	movs	r3, #0
    559a:	9002      	str	r0, [sp, #8]
    559c:	6108      	str	r0, [r1, #16]
    559e:	429c      	cmp	r4, r3
    55a0:	d000      	beq.n	55a4 <sniprintf+0x34>
    55a2:	1e63      	subs	r3, r4, #1
    55a4:	608b      	str	r3, [r1, #8]
    55a6:	614b      	str	r3, [r1, #20]
    55a8:	2301      	movs	r3, #1
    55aa:	425b      	negs	r3, r3
    55ac:	81cb      	strh	r3, [r1, #14]
    55ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
    55b0:	ab21      	add	r3, sp, #132	; 0x84
    55b2:	0028      	movs	r0, r5
    55b4:	9301      	str	r3, [sp, #4]
    55b6:	f000 f923 	bl	5800 <_svfiprintf_r>
    55ba:	1c43      	adds	r3, r0, #1
    55bc:	da01      	bge.n	55c2 <sniprintf+0x52>
    55be:	238b      	movs	r3, #139	; 0x8b
    55c0:	602b      	str	r3, [r5, #0]
    55c2:	2c00      	cmp	r4, #0
    55c4:	d0df      	beq.n	5586 <sniprintf+0x16>
    55c6:	2300      	movs	r3, #0
    55c8:	9a02      	ldr	r2, [sp, #8]
    55ca:	7013      	strb	r3, [r2, #0]
    55cc:	e7db      	b.n	5586 <sniprintf+0x16>
    55ce:	46c0      	nop			; (mov r8, r8)
    55d0:	20000014 	.word	0x20000014

000055d4 <siprintf>:
    55d4:	b40e      	push	{r1, r2, r3}
    55d6:	b510      	push	{r4, lr}
    55d8:	b09d      	sub	sp, #116	; 0x74
    55da:	a902      	add	r1, sp, #8
    55dc:	9002      	str	r0, [sp, #8]
    55de:	6108      	str	r0, [r1, #16]
    55e0:	480b      	ldr	r0, [pc, #44]	; (5610 <siprintf+0x3c>)
    55e2:	2482      	movs	r4, #130	; 0x82
    55e4:	6088      	str	r0, [r1, #8]
    55e6:	6148      	str	r0, [r1, #20]
    55e8:	2001      	movs	r0, #1
    55ea:	4240      	negs	r0, r0
    55ec:	ab1f      	add	r3, sp, #124	; 0x7c
    55ee:	81c8      	strh	r0, [r1, #14]
    55f0:	4808      	ldr	r0, [pc, #32]	; (5614 <siprintf+0x40>)
    55f2:	cb04      	ldmia	r3!, {r2}
    55f4:	00a4      	lsls	r4, r4, #2
    55f6:	6800      	ldr	r0, [r0, #0]
    55f8:	9301      	str	r3, [sp, #4]
    55fa:	818c      	strh	r4, [r1, #12]
    55fc:	f000 f900 	bl	5800 <_svfiprintf_r>
    5600:	2300      	movs	r3, #0
    5602:	9a02      	ldr	r2, [sp, #8]
    5604:	7013      	strb	r3, [r2, #0]
    5606:	b01d      	add	sp, #116	; 0x74
    5608:	bc10      	pop	{r4}
    560a:	bc08      	pop	{r3}
    560c:	b003      	add	sp, #12
    560e:	4718      	bx	r3
    5610:	7fffffff 	.word	0x7fffffff
    5614:	20000014 	.word	0x20000014

00005618 <strcasecmp>:
    5618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    561a:	0007      	movs	r7, r0
    561c:	000e      	movs	r6, r1
    561e:	783c      	ldrb	r4, [r7, #0]
    5620:	f000 f86a 	bl	56f8 <__locale_ctype_ptr>
    5624:	2203      	movs	r2, #3
    5626:	1900      	adds	r0, r0, r4
    5628:	7843      	ldrb	r3, [r0, #1]
    562a:	4013      	ands	r3, r2
    562c:	2b01      	cmp	r3, #1
    562e:	d100      	bne.n	5632 <strcasecmp+0x1a>
    5630:	3420      	adds	r4, #32
    5632:	7835      	ldrb	r5, [r6, #0]
    5634:	f000 f860 	bl	56f8 <__locale_ctype_ptr>
    5638:	2203      	movs	r2, #3
    563a:	1940      	adds	r0, r0, r5
    563c:	7843      	ldrb	r3, [r0, #1]
    563e:	4013      	ands	r3, r2
    5640:	2b01      	cmp	r3, #1
    5642:	d100      	bne.n	5646 <strcasecmp+0x2e>
    5644:	3520      	adds	r5, #32
    5646:	1b60      	subs	r0, r4, r5
    5648:	d103      	bne.n	5652 <strcasecmp+0x3a>
    564a:	3701      	adds	r7, #1
    564c:	3601      	adds	r6, #1
    564e:	2d00      	cmp	r5, #0
    5650:	d1e5      	bne.n	561e <strcasecmp+0x6>
    5652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005654 <strlen>:
    5654:	2300      	movs	r3, #0
    5656:	5cc2      	ldrb	r2, [r0, r3]
    5658:	3301      	adds	r3, #1
    565a:	2a00      	cmp	r2, #0
    565c:	d1fb      	bne.n	5656 <strlen+0x2>
    565e:	1e58      	subs	r0, r3, #1
    5660:	4770      	bx	lr

00005662 <strncmp>:
    5662:	2300      	movs	r3, #0
    5664:	b530      	push	{r4, r5, lr}
    5666:	429a      	cmp	r2, r3
    5668:	d00a      	beq.n	5680 <strncmp+0x1e>
    566a:	3a01      	subs	r2, #1
    566c:	5cc4      	ldrb	r4, [r0, r3]
    566e:	5ccd      	ldrb	r5, [r1, r3]
    5670:	42ac      	cmp	r4, r5
    5672:	d104      	bne.n	567e <strncmp+0x1c>
    5674:	429a      	cmp	r2, r3
    5676:	d002      	beq.n	567e <strncmp+0x1c>
    5678:	3301      	adds	r3, #1
    567a:	2c00      	cmp	r4, #0
    567c:	d1f6      	bne.n	566c <strncmp+0xa>
    567e:	1b63      	subs	r3, r4, r5
    5680:	0018      	movs	r0, r3
    5682:	bd30      	pop	{r4, r5, pc}

00005684 <strncpy>:
    5684:	b570      	push	{r4, r5, r6, lr}
    5686:	0004      	movs	r4, r0
    5688:	2a00      	cmp	r2, #0
    568a:	d100      	bne.n	568e <strncpy+0xa>
    568c:	bd70      	pop	{r4, r5, r6, pc}
    568e:	780d      	ldrb	r5, [r1, #0]
    5690:	1e56      	subs	r6, r2, #1
    5692:	1c63      	adds	r3, r4, #1
    5694:	7025      	strb	r5, [r4, #0]
    5696:	3101      	adds	r1, #1
    5698:	2d00      	cmp	r5, #0
    569a:	d105      	bne.n	56a8 <strncpy+0x24>
    569c:	18a4      	adds	r4, r4, r2
    569e:	429c      	cmp	r4, r3
    56a0:	d0f4      	beq.n	568c <strncpy+0x8>
    56a2:	701d      	strb	r5, [r3, #0]
    56a4:	3301      	adds	r3, #1
    56a6:	e7fa      	b.n	569e <strncpy+0x1a>
    56a8:	001c      	movs	r4, r3
    56aa:	0032      	movs	r2, r6
    56ac:	e7ec      	b.n	5688 <strncpy+0x4>
	...

000056b0 <_vsiprintf_r>:
    56b0:	b530      	push	{r4, r5, lr}
    56b2:	b09b      	sub	sp, #108	; 0x6c
    56b4:	9100      	str	r1, [sp, #0]
    56b6:	9104      	str	r1, [sp, #16]
    56b8:	4908      	ldr	r1, [pc, #32]	; (56dc <_vsiprintf_r+0x2c>)
    56ba:	466d      	mov	r5, sp
    56bc:	9102      	str	r1, [sp, #8]
    56be:	9105      	str	r1, [sp, #20]
    56c0:	2101      	movs	r1, #1
    56c2:	2482      	movs	r4, #130	; 0x82
    56c4:	4249      	negs	r1, r1
    56c6:	81e9      	strh	r1, [r5, #14]
    56c8:	00a4      	lsls	r4, r4, #2
    56ca:	4669      	mov	r1, sp
    56cc:	81ac      	strh	r4, [r5, #12]
    56ce:	f000 f897 	bl	5800 <_svfiprintf_r>
    56d2:	2300      	movs	r3, #0
    56d4:	9a00      	ldr	r2, [sp, #0]
    56d6:	7013      	strb	r3, [r2, #0]
    56d8:	b01b      	add	sp, #108	; 0x6c
    56da:	bd30      	pop	{r4, r5, pc}
    56dc:	7fffffff 	.word	0x7fffffff

000056e0 <vsiprintf>:
    56e0:	b510      	push	{r4, lr}
    56e2:	0013      	movs	r3, r2
    56e4:	000a      	movs	r2, r1
    56e6:	0001      	movs	r1, r0
    56e8:	4802      	ldr	r0, [pc, #8]	; (56f4 <vsiprintf+0x14>)
    56ea:	6800      	ldr	r0, [r0, #0]
    56ec:	f7ff ffe0 	bl	56b0 <_vsiprintf_r>
    56f0:	bd10      	pop	{r4, pc}
    56f2:	46c0      	nop			; (mov r8, r8)
    56f4:	20000014 	.word	0x20000014

000056f8 <__locale_ctype_ptr>:
    56f8:	4b04      	ldr	r3, [pc, #16]	; (570c <__locale_ctype_ptr+0x14>)
    56fa:	681b      	ldr	r3, [r3, #0]
    56fc:	6a1b      	ldr	r3, [r3, #32]
    56fe:	2b00      	cmp	r3, #0
    5700:	d100      	bne.n	5704 <__locale_ctype_ptr+0xc>
    5702:	4b03      	ldr	r3, [pc, #12]	; (5710 <__locale_ctype_ptr+0x18>)
    5704:	33ec      	adds	r3, #236	; 0xec
    5706:	6818      	ldr	r0, [r3, #0]
    5708:	4770      	bx	lr
    570a:	46c0      	nop			; (mov r8, r8)
    570c:	20000014 	.word	0x20000014
    5710:	20000078 	.word	0x20000078

00005714 <__ascii_mbtowc>:
    5714:	b082      	sub	sp, #8
    5716:	2900      	cmp	r1, #0
    5718:	d100      	bne.n	571c <__ascii_mbtowc+0x8>
    571a:	a901      	add	r1, sp, #4
    571c:	1e10      	subs	r0, r2, #0
    571e:	d006      	beq.n	572e <__ascii_mbtowc+0x1a>
    5720:	2b00      	cmp	r3, #0
    5722:	d006      	beq.n	5732 <__ascii_mbtowc+0x1e>
    5724:	7813      	ldrb	r3, [r2, #0]
    5726:	600b      	str	r3, [r1, #0]
    5728:	7810      	ldrb	r0, [r2, #0]
    572a:	1e43      	subs	r3, r0, #1
    572c:	4198      	sbcs	r0, r3
    572e:	b002      	add	sp, #8
    5730:	4770      	bx	lr
    5732:	2002      	movs	r0, #2
    5734:	4240      	negs	r0, r0
    5736:	e7fa      	b.n	572e <__ascii_mbtowc+0x1a>

00005738 <__malloc_lock>:
    5738:	4770      	bx	lr

0000573a <__malloc_unlock>:
    573a:	4770      	bx	lr

0000573c <__ssputs_r>:
    573c:	b5f0      	push	{r4, r5, r6, r7, lr}
    573e:	688e      	ldr	r6, [r1, #8]
    5740:	b085      	sub	sp, #20
    5742:	0007      	movs	r7, r0
    5744:	000c      	movs	r4, r1
    5746:	9203      	str	r2, [sp, #12]
    5748:	9301      	str	r3, [sp, #4]
    574a:	429e      	cmp	r6, r3
    574c:	d839      	bhi.n	57c2 <__ssputs_r+0x86>
    574e:	2390      	movs	r3, #144	; 0x90
    5750:	898a      	ldrh	r2, [r1, #12]
    5752:	00db      	lsls	r3, r3, #3
    5754:	421a      	tst	r2, r3
    5756:	d034      	beq.n	57c2 <__ssputs_r+0x86>
    5758:	2503      	movs	r5, #3
    575a:	6909      	ldr	r1, [r1, #16]
    575c:	6823      	ldr	r3, [r4, #0]
    575e:	1a5b      	subs	r3, r3, r1
    5760:	9302      	str	r3, [sp, #8]
    5762:	6963      	ldr	r3, [r4, #20]
    5764:	9802      	ldr	r0, [sp, #8]
    5766:	435d      	muls	r5, r3
    5768:	0feb      	lsrs	r3, r5, #31
    576a:	195d      	adds	r5, r3, r5
    576c:	9b01      	ldr	r3, [sp, #4]
    576e:	106d      	asrs	r5, r5, #1
    5770:	3301      	adds	r3, #1
    5772:	181b      	adds	r3, r3, r0
    5774:	42ab      	cmp	r3, r5
    5776:	d900      	bls.n	577a <__ssputs_r+0x3e>
    5778:	001d      	movs	r5, r3
    577a:	0553      	lsls	r3, r2, #21
    577c:	d532      	bpl.n	57e4 <__ssputs_r+0xa8>
    577e:	0029      	movs	r1, r5
    5780:	0038      	movs	r0, r7
    5782:	f7ff fe85 	bl	5490 <_malloc_r>
    5786:	1e06      	subs	r6, r0, #0
    5788:	d109      	bne.n	579e <__ssputs_r+0x62>
    578a:	230c      	movs	r3, #12
    578c:	603b      	str	r3, [r7, #0]
    578e:	2340      	movs	r3, #64	; 0x40
    5790:	2001      	movs	r0, #1
    5792:	89a2      	ldrh	r2, [r4, #12]
    5794:	4240      	negs	r0, r0
    5796:	4313      	orrs	r3, r2
    5798:	81a3      	strh	r3, [r4, #12]
    579a:	b005      	add	sp, #20
    579c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    579e:	9a02      	ldr	r2, [sp, #8]
    57a0:	6921      	ldr	r1, [r4, #16]
    57a2:	f7ff fe19 	bl	53d8 <memcpy>
    57a6:	89a3      	ldrh	r3, [r4, #12]
    57a8:	4a14      	ldr	r2, [pc, #80]	; (57fc <__ssputs_r+0xc0>)
    57aa:	401a      	ands	r2, r3
    57ac:	2380      	movs	r3, #128	; 0x80
    57ae:	4313      	orrs	r3, r2
    57b0:	81a3      	strh	r3, [r4, #12]
    57b2:	9b02      	ldr	r3, [sp, #8]
    57b4:	6126      	str	r6, [r4, #16]
    57b6:	18f6      	adds	r6, r6, r3
    57b8:	6026      	str	r6, [r4, #0]
    57ba:	6165      	str	r5, [r4, #20]
    57bc:	9e01      	ldr	r6, [sp, #4]
    57be:	1aed      	subs	r5, r5, r3
    57c0:	60a5      	str	r5, [r4, #8]
    57c2:	9b01      	ldr	r3, [sp, #4]
    57c4:	42b3      	cmp	r3, r6
    57c6:	d200      	bcs.n	57ca <__ssputs_r+0x8e>
    57c8:	001e      	movs	r6, r3
    57ca:	0032      	movs	r2, r6
    57cc:	9903      	ldr	r1, [sp, #12]
    57ce:	6820      	ldr	r0, [r4, #0]
    57d0:	f000 fab9 	bl	5d46 <memmove>
    57d4:	68a3      	ldr	r3, [r4, #8]
    57d6:	2000      	movs	r0, #0
    57d8:	1b9b      	subs	r3, r3, r6
    57da:	60a3      	str	r3, [r4, #8]
    57dc:	6823      	ldr	r3, [r4, #0]
    57de:	199e      	adds	r6, r3, r6
    57e0:	6026      	str	r6, [r4, #0]
    57e2:	e7da      	b.n	579a <__ssputs_r+0x5e>
    57e4:	002a      	movs	r2, r5
    57e6:	0038      	movs	r0, r7
    57e8:	f000 fabf 	bl	5d6a <_realloc_r>
    57ec:	1e06      	subs	r6, r0, #0
    57ee:	d1e0      	bne.n	57b2 <__ssputs_r+0x76>
    57f0:	6921      	ldr	r1, [r4, #16]
    57f2:	0038      	movs	r0, r7
    57f4:	f7ff fe02 	bl	53fc <_free_r>
    57f8:	e7c7      	b.n	578a <__ssputs_r+0x4e>
    57fa:	46c0      	nop			; (mov r8, r8)
    57fc:	fffffb7f 	.word	0xfffffb7f

00005800 <_svfiprintf_r>:
    5800:	b5f0      	push	{r4, r5, r6, r7, lr}
    5802:	b09f      	sub	sp, #124	; 0x7c
    5804:	9002      	str	r0, [sp, #8]
    5806:	9305      	str	r3, [sp, #20]
    5808:	898b      	ldrh	r3, [r1, #12]
    580a:	000f      	movs	r7, r1
    580c:	0016      	movs	r6, r2
    580e:	061b      	lsls	r3, r3, #24
    5810:	d511      	bpl.n	5836 <_svfiprintf_r+0x36>
    5812:	690b      	ldr	r3, [r1, #16]
    5814:	2b00      	cmp	r3, #0
    5816:	d10e      	bne.n	5836 <_svfiprintf_r+0x36>
    5818:	2140      	movs	r1, #64	; 0x40
    581a:	f7ff fe39 	bl	5490 <_malloc_r>
    581e:	6038      	str	r0, [r7, #0]
    5820:	6138      	str	r0, [r7, #16]
    5822:	2800      	cmp	r0, #0
    5824:	d105      	bne.n	5832 <_svfiprintf_r+0x32>
    5826:	230c      	movs	r3, #12
    5828:	9a02      	ldr	r2, [sp, #8]
    582a:	3801      	subs	r0, #1
    582c:	6013      	str	r3, [r2, #0]
    582e:	b01f      	add	sp, #124	; 0x7c
    5830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5832:	2340      	movs	r3, #64	; 0x40
    5834:	617b      	str	r3, [r7, #20]
    5836:	2300      	movs	r3, #0
    5838:	ad06      	add	r5, sp, #24
    583a:	616b      	str	r3, [r5, #20]
    583c:	3320      	adds	r3, #32
    583e:	766b      	strb	r3, [r5, #25]
    5840:	3310      	adds	r3, #16
    5842:	76ab      	strb	r3, [r5, #26]
    5844:	0034      	movs	r4, r6
    5846:	7823      	ldrb	r3, [r4, #0]
    5848:	2b00      	cmp	r3, #0
    584a:	d147      	bne.n	58dc <_svfiprintf_r+0xdc>
    584c:	1ba3      	subs	r3, r4, r6
    584e:	9304      	str	r3, [sp, #16]
    5850:	d00d      	beq.n	586e <_svfiprintf_r+0x6e>
    5852:	1ba3      	subs	r3, r4, r6
    5854:	0032      	movs	r2, r6
    5856:	0039      	movs	r1, r7
    5858:	9802      	ldr	r0, [sp, #8]
    585a:	f7ff ff6f 	bl	573c <__ssputs_r>
    585e:	1c43      	adds	r3, r0, #1
    5860:	d100      	bne.n	5864 <_svfiprintf_r+0x64>
    5862:	e0b5      	b.n	59d0 <_svfiprintf_r+0x1d0>
    5864:	696a      	ldr	r2, [r5, #20]
    5866:	9b04      	ldr	r3, [sp, #16]
    5868:	4694      	mov	ip, r2
    586a:	4463      	add	r3, ip
    586c:	616b      	str	r3, [r5, #20]
    586e:	7823      	ldrb	r3, [r4, #0]
    5870:	2b00      	cmp	r3, #0
    5872:	d100      	bne.n	5876 <_svfiprintf_r+0x76>
    5874:	e0ac      	b.n	59d0 <_svfiprintf_r+0x1d0>
    5876:	2201      	movs	r2, #1
    5878:	2300      	movs	r3, #0
    587a:	4252      	negs	r2, r2
    587c:	606a      	str	r2, [r5, #4]
    587e:	a902      	add	r1, sp, #8
    5880:	3254      	adds	r2, #84	; 0x54
    5882:	1852      	adds	r2, r2, r1
    5884:	3401      	adds	r4, #1
    5886:	602b      	str	r3, [r5, #0]
    5888:	60eb      	str	r3, [r5, #12]
    588a:	60ab      	str	r3, [r5, #8]
    588c:	7013      	strb	r3, [r2, #0]
    588e:	65ab      	str	r3, [r5, #88]	; 0x58
    5890:	4e58      	ldr	r6, [pc, #352]	; (59f4 <_svfiprintf_r+0x1f4>)
    5892:	2205      	movs	r2, #5
    5894:	7821      	ldrb	r1, [r4, #0]
    5896:	0030      	movs	r0, r6
    5898:	f000 fa4a 	bl	5d30 <memchr>
    589c:	1c62      	adds	r2, r4, #1
    589e:	2800      	cmp	r0, #0
    58a0:	d120      	bne.n	58e4 <_svfiprintf_r+0xe4>
    58a2:	6829      	ldr	r1, [r5, #0]
    58a4:	06cb      	lsls	r3, r1, #27
    58a6:	d504      	bpl.n	58b2 <_svfiprintf_r+0xb2>
    58a8:	2353      	movs	r3, #83	; 0x53
    58aa:	ae02      	add	r6, sp, #8
    58ac:	3020      	adds	r0, #32
    58ae:	199b      	adds	r3, r3, r6
    58b0:	7018      	strb	r0, [r3, #0]
    58b2:	070b      	lsls	r3, r1, #28
    58b4:	d504      	bpl.n	58c0 <_svfiprintf_r+0xc0>
    58b6:	2353      	movs	r3, #83	; 0x53
    58b8:	202b      	movs	r0, #43	; 0x2b
    58ba:	ae02      	add	r6, sp, #8
    58bc:	199b      	adds	r3, r3, r6
    58be:	7018      	strb	r0, [r3, #0]
    58c0:	7823      	ldrb	r3, [r4, #0]
    58c2:	2b2a      	cmp	r3, #42	; 0x2a
    58c4:	d016      	beq.n	58f4 <_svfiprintf_r+0xf4>
    58c6:	2000      	movs	r0, #0
    58c8:	210a      	movs	r1, #10
    58ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    58cc:	7822      	ldrb	r2, [r4, #0]
    58ce:	3a30      	subs	r2, #48	; 0x30
    58d0:	2a09      	cmp	r2, #9
    58d2:	d955      	bls.n	5980 <_svfiprintf_r+0x180>
    58d4:	2800      	cmp	r0, #0
    58d6:	d015      	beq.n	5904 <_svfiprintf_r+0x104>
    58d8:	9309      	str	r3, [sp, #36]	; 0x24
    58da:	e013      	b.n	5904 <_svfiprintf_r+0x104>
    58dc:	2b25      	cmp	r3, #37	; 0x25
    58de:	d0b5      	beq.n	584c <_svfiprintf_r+0x4c>
    58e0:	3401      	adds	r4, #1
    58e2:	e7b0      	b.n	5846 <_svfiprintf_r+0x46>
    58e4:	2301      	movs	r3, #1
    58e6:	1b80      	subs	r0, r0, r6
    58e8:	4083      	lsls	r3, r0
    58ea:	6829      	ldr	r1, [r5, #0]
    58ec:	0014      	movs	r4, r2
    58ee:	430b      	orrs	r3, r1
    58f0:	602b      	str	r3, [r5, #0]
    58f2:	e7cd      	b.n	5890 <_svfiprintf_r+0x90>
    58f4:	9b05      	ldr	r3, [sp, #20]
    58f6:	1d18      	adds	r0, r3, #4
    58f8:	681b      	ldr	r3, [r3, #0]
    58fa:	9005      	str	r0, [sp, #20]
    58fc:	2b00      	cmp	r3, #0
    58fe:	db39      	blt.n	5974 <_svfiprintf_r+0x174>
    5900:	9309      	str	r3, [sp, #36]	; 0x24
    5902:	0014      	movs	r4, r2
    5904:	7823      	ldrb	r3, [r4, #0]
    5906:	2b2e      	cmp	r3, #46	; 0x2e
    5908:	d10b      	bne.n	5922 <_svfiprintf_r+0x122>
    590a:	7863      	ldrb	r3, [r4, #1]
    590c:	1c62      	adds	r2, r4, #1
    590e:	2b2a      	cmp	r3, #42	; 0x2a
    5910:	d13e      	bne.n	5990 <_svfiprintf_r+0x190>
    5912:	9b05      	ldr	r3, [sp, #20]
    5914:	3402      	adds	r4, #2
    5916:	1d1a      	adds	r2, r3, #4
    5918:	681b      	ldr	r3, [r3, #0]
    591a:	9205      	str	r2, [sp, #20]
    591c:	2b00      	cmp	r3, #0
    591e:	db34      	blt.n	598a <_svfiprintf_r+0x18a>
    5920:	9307      	str	r3, [sp, #28]
    5922:	4e35      	ldr	r6, [pc, #212]	; (59f8 <_svfiprintf_r+0x1f8>)
    5924:	7821      	ldrb	r1, [r4, #0]
    5926:	2203      	movs	r2, #3
    5928:	0030      	movs	r0, r6
    592a:	f000 fa01 	bl	5d30 <memchr>
    592e:	2800      	cmp	r0, #0
    5930:	d006      	beq.n	5940 <_svfiprintf_r+0x140>
    5932:	2340      	movs	r3, #64	; 0x40
    5934:	1b80      	subs	r0, r0, r6
    5936:	4083      	lsls	r3, r0
    5938:	682a      	ldr	r2, [r5, #0]
    593a:	3401      	adds	r4, #1
    593c:	4313      	orrs	r3, r2
    593e:	602b      	str	r3, [r5, #0]
    5940:	7821      	ldrb	r1, [r4, #0]
    5942:	2206      	movs	r2, #6
    5944:	482d      	ldr	r0, [pc, #180]	; (59fc <_svfiprintf_r+0x1fc>)
    5946:	1c66      	adds	r6, r4, #1
    5948:	7629      	strb	r1, [r5, #24]
    594a:	f000 f9f1 	bl	5d30 <memchr>
    594e:	2800      	cmp	r0, #0
    5950:	d046      	beq.n	59e0 <_svfiprintf_r+0x1e0>
    5952:	4b2b      	ldr	r3, [pc, #172]	; (5a00 <_svfiprintf_r+0x200>)
    5954:	2b00      	cmp	r3, #0
    5956:	d12f      	bne.n	59b8 <_svfiprintf_r+0x1b8>
    5958:	6829      	ldr	r1, [r5, #0]
    595a:	9b05      	ldr	r3, [sp, #20]
    595c:	2207      	movs	r2, #7
    595e:	05c9      	lsls	r1, r1, #23
    5960:	d528      	bpl.n	59b4 <_svfiprintf_r+0x1b4>
    5962:	189b      	adds	r3, r3, r2
    5964:	4393      	bics	r3, r2
    5966:	3308      	adds	r3, #8
    5968:	9305      	str	r3, [sp, #20]
    596a:	696b      	ldr	r3, [r5, #20]
    596c:	9a03      	ldr	r2, [sp, #12]
    596e:	189b      	adds	r3, r3, r2
    5970:	616b      	str	r3, [r5, #20]
    5972:	e767      	b.n	5844 <_svfiprintf_r+0x44>
    5974:	425b      	negs	r3, r3
    5976:	60eb      	str	r3, [r5, #12]
    5978:	2302      	movs	r3, #2
    597a:	430b      	orrs	r3, r1
    597c:	602b      	str	r3, [r5, #0]
    597e:	e7c0      	b.n	5902 <_svfiprintf_r+0x102>
    5980:	434b      	muls	r3, r1
    5982:	3401      	adds	r4, #1
    5984:	189b      	adds	r3, r3, r2
    5986:	2001      	movs	r0, #1
    5988:	e7a0      	b.n	58cc <_svfiprintf_r+0xcc>
    598a:	2301      	movs	r3, #1
    598c:	425b      	negs	r3, r3
    598e:	e7c7      	b.n	5920 <_svfiprintf_r+0x120>
    5990:	2300      	movs	r3, #0
    5992:	0014      	movs	r4, r2
    5994:	200a      	movs	r0, #10
    5996:	001a      	movs	r2, r3
    5998:	606b      	str	r3, [r5, #4]
    599a:	7821      	ldrb	r1, [r4, #0]
    599c:	3930      	subs	r1, #48	; 0x30
    599e:	2909      	cmp	r1, #9
    59a0:	d903      	bls.n	59aa <_svfiprintf_r+0x1aa>
    59a2:	2b00      	cmp	r3, #0
    59a4:	d0bd      	beq.n	5922 <_svfiprintf_r+0x122>
    59a6:	9207      	str	r2, [sp, #28]
    59a8:	e7bb      	b.n	5922 <_svfiprintf_r+0x122>
    59aa:	4342      	muls	r2, r0
    59ac:	3401      	adds	r4, #1
    59ae:	1852      	adds	r2, r2, r1
    59b0:	2301      	movs	r3, #1
    59b2:	e7f2      	b.n	599a <_svfiprintf_r+0x19a>
    59b4:	3307      	adds	r3, #7
    59b6:	e7d5      	b.n	5964 <_svfiprintf_r+0x164>
    59b8:	ab05      	add	r3, sp, #20
    59ba:	9300      	str	r3, [sp, #0]
    59bc:	003a      	movs	r2, r7
    59be:	4b11      	ldr	r3, [pc, #68]	; (5a04 <_svfiprintf_r+0x204>)
    59c0:	0029      	movs	r1, r5
    59c2:	9802      	ldr	r0, [sp, #8]
    59c4:	e000      	b.n	59c8 <_svfiprintf_r+0x1c8>
    59c6:	bf00      	nop
    59c8:	9003      	str	r0, [sp, #12]
    59ca:	9b03      	ldr	r3, [sp, #12]
    59cc:	3301      	adds	r3, #1
    59ce:	d1cc      	bne.n	596a <_svfiprintf_r+0x16a>
    59d0:	89bb      	ldrh	r3, [r7, #12]
    59d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    59d4:	065b      	lsls	r3, r3, #25
    59d6:	d400      	bmi.n	59da <_svfiprintf_r+0x1da>
    59d8:	e729      	b.n	582e <_svfiprintf_r+0x2e>
    59da:	2001      	movs	r0, #1
    59dc:	4240      	negs	r0, r0
    59de:	e726      	b.n	582e <_svfiprintf_r+0x2e>
    59e0:	ab05      	add	r3, sp, #20
    59e2:	9300      	str	r3, [sp, #0]
    59e4:	003a      	movs	r2, r7
    59e6:	4b07      	ldr	r3, [pc, #28]	; (5a04 <_svfiprintf_r+0x204>)
    59e8:	0029      	movs	r1, r5
    59ea:	9802      	ldr	r0, [sp, #8]
    59ec:	f000 f87a 	bl	5ae4 <_printf_i>
    59f0:	e7ea      	b.n	59c8 <_svfiprintf_r+0x1c8>
    59f2:	46c0      	nop			; (mov r8, r8)
    59f4:	000061d5 	.word	0x000061d5
    59f8:	000061db 	.word	0x000061db
    59fc:	000061df 	.word	0x000061df
    5a00:	00000000 	.word	0x00000000
    5a04:	0000573d 	.word	0x0000573d

00005a08 <_printf_common>:
    5a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5a0a:	0015      	movs	r5, r2
    5a0c:	9301      	str	r3, [sp, #4]
    5a0e:	688a      	ldr	r2, [r1, #8]
    5a10:	690b      	ldr	r3, [r1, #16]
    5a12:	9000      	str	r0, [sp, #0]
    5a14:	000c      	movs	r4, r1
    5a16:	4293      	cmp	r3, r2
    5a18:	da00      	bge.n	5a1c <_printf_common+0x14>
    5a1a:	0013      	movs	r3, r2
    5a1c:	0022      	movs	r2, r4
    5a1e:	602b      	str	r3, [r5, #0]
    5a20:	3243      	adds	r2, #67	; 0x43
    5a22:	7812      	ldrb	r2, [r2, #0]
    5a24:	2a00      	cmp	r2, #0
    5a26:	d001      	beq.n	5a2c <_printf_common+0x24>
    5a28:	3301      	adds	r3, #1
    5a2a:	602b      	str	r3, [r5, #0]
    5a2c:	6823      	ldr	r3, [r4, #0]
    5a2e:	069b      	lsls	r3, r3, #26
    5a30:	d502      	bpl.n	5a38 <_printf_common+0x30>
    5a32:	682b      	ldr	r3, [r5, #0]
    5a34:	3302      	adds	r3, #2
    5a36:	602b      	str	r3, [r5, #0]
    5a38:	2706      	movs	r7, #6
    5a3a:	6823      	ldr	r3, [r4, #0]
    5a3c:	401f      	ands	r7, r3
    5a3e:	d027      	beq.n	5a90 <_printf_common+0x88>
    5a40:	0023      	movs	r3, r4
    5a42:	3343      	adds	r3, #67	; 0x43
    5a44:	781b      	ldrb	r3, [r3, #0]
    5a46:	1e5a      	subs	r2, r3, #1
    5a48:	4193      	sbcs	r3, r2
    5a4a:	6822      	ldr	r2, [r4, #0]
    5a4c:	0692      	lsls	r2, r2, #26
    5a4e:	d430      	bmi.n	5ab2 <_printf_common+0xaa>
    5a50:	0022      	movs	r2, r4
    5a52:	9901      	ldr	r1, [sp, #4]
    5a54:	3243      	adds	r2, #67	; 0x43
    5a56:	9800      	ldr	r0, [sp, #0]
    5a58:	9e08      	ldr	r6, [sp, #32]
    5a5a:	47b0      	blx	r6
    5a5c:	1c43      	adds	r3, r0, #1
    5a5e:	d025      	beq.n	5aac <_printf_common+0xa4>
    5a60:	2306      	movs	r3, #6
    5a62:	6820      	ldr	r0, [r4, #0]
    5a64:	682a      	ldr	r2, [r5, #0]
    5a66:	68e1      	ldr	r1, [r4, #12]
    5a68:	4003      	ands	r3, r0
    5a6a:	2500      	movs	r5, #0
    5a6c:	2b04      	cmp	r3, #4
    5a6e:	d103      	bne.n	5a78 <_printf_common+0x70>
    5a70:	1a8d      	subs	r5, r1, r2
    5a72:	43eb      	mvns	r3, r5
    5a74:	17db      	asrs	r3, r3, #31
    5a76:	401d      	ands	r5, r3
    5a78:	68a3      	ldr	r3, [r4, #8]
    5a7a:	6922      	ldr	r2, [r4, #16]
    5a7c:	4293      	cmp	r3, r2
    5a7e:	dd01      	ble.n	5a84 <_printf_common+0x7c>
    5a80:	1a9b      	subs	r3, r3, r2
    5a82:	18ed      	adds	r5, r5, r3
    5a84:	2700      	movs	r7, #0
    5a86:	42bd      	cmp	r5, r7
    5a88:	d120      	bne.n	5acc <_printf_common+0xc4>
    5a8a:	2000      	movs	r0, #0
    5a8c:	e010      	b.n	5ab0 <_printf_common+0xa8>
    5a8e:	3701      	adds	r7, #1
    5a90:	68e3      	ldr	r3, [r4, #12]
    5a92:	682a      	ldr	r2, [r5, #0]
    5a94:	1a9b      	subs	r3, r3, r2
    5a96:	429f      	cmp	r7, r3
    5a98:	dad2      	bge.n	5a40 <_printf_common+0x38>
    5a9a:	0022      	movs	r2, r4
    5a9c:	2301      	movs	r3, #1
    5a9e:	3219      	adds	r2, #25
    5aa0:	9901      	ldr	r1, [sp, #4]
    5aa2:	9800      	ldr	r0, [sp, #0]
    5aa4:	9e08      	ldr	r6, [sp, #32]
    5aa6:	47b0      	blx	r6
    5aa8:	1c43      	adds	r3, r0, #1
    5aaa:	d1f0      	bne.n	5a8e <_printf_common+0x86>
    5aac:	2001      	movs	r0, #1
    5aae:	4240      	negs	r0, r0
    5ab0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5ab2:	2030      	movs	r0, #48	; 0x30
    5ab4:	18e1      	adds	r1, r4, r3
    5ab6:	3143      	adds	r1, #67	; 0x43
    5ab8:	7008      	strb	r0, [r1, #0]
    5aba:	0021      	movs	r1, r4
    5abc:	1c5a      	adds	r2, r3, #1
    5abe:	3145      	adds	r1, #69	; 0x45
    5ac0:	7809      	ldrb	r1, [r1, #0]
    5ac2:	18a2      	adds	r2, r4, r2
    5ac4:	3243      	adds	r2, #67	; 0x43
    5ac6:	3302      	adds	r3, #2
    5ac8:	7011      	strb	r1, [r2, #0]
    5aca:	e7c1      	b.n	5a50 <_printf_common+0x48>
    5acc:	0022      	movs	r2, r4
    5ace:	2301      	movs	r3, #1
    5ad0:	321a      	adds	r2, #26
    5ad2:	9901      	ldr	r1, [sp, #4]
    5ad4:	9800      	ldr	r0, [sp, #0]
    5ad6:	9e08      	ldr	r6, [sp, #32]
    5ad8:	47b0      	blx	r6
    5ada:	1c43      	adds	r3, r0, #1
    5adc:	d0e6      	beq.n	5aac <_printf_common+0xa4>
    5ade:	3701      	adds	r7, #1
    5ae0:	e7d1      	b.n	5a86 <_printf_common+0x7e>
	...

00005ae4 <_printf_i>:
    5ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ae6:	b08b      	sub	sp, #44	; 0x2c
    5ae8:	9206      	str	r2, [sp, #24]
    5aea:	000a      	movs	r2, r1
    5aec:	3243      	adds	r2, #67	; 0x43
    5aee:	9307      	str	r3, [sp, #28]
    5af0:	9005      	str	r0, [sp, #20]
    5af2:	9204      	str	r2, [sp, #16]
    5af4:	7e0a      	ldrb	r2, [r1, #24]
    5af6:	000c      	movs	r4, r1
    5af8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5afa:	2a6e      	cmp	r2, #110	; 0x6e
    5afc:	d100      	bne.n	5b00 <_printf_i+0x1c>
    5afe:	e08f      	b.n	5c20 <_printf_i+0x13c>
    5b00:	d817      	bhi.n	5b32 <_printf_i+0x4e>
    5b02:	2a63      	cmp	r2, #99	; 0x63
    5b04:	d02c      	beq.n	5b60 <_printf_i+0x7c>
    5b06:	d808      	bhi.n	5b1a <_printf_i+0x36>
    5b08:	2a00      	cmp	r2, #0
    5b0a:	d100      	bne.n	5b0e <_printf_i+0x2a>
    5b0c:	e099      	b.n	5c42 <_printf_i+0x15e>
    5b0e:	2a58      	cmp	r2, #88	; 0x58
    5b10:	d054      	beq.n	5bbc <_printf_i+0xd8>
    5b12:	0026      	movs	r6, r4
    5b14:	3642      	adds	r6, #66	; 0x42
    5b16:	7032      	strb	r2, [r6, #0]
    5b18:	e029      	b.n	5b6e <_printf_i+0x8a>
    5b1a:	2a64      	cmp	r2, #100	; 0x64
    5b1c:	d001      	beq.n	5b22 <_printf_i+0x3e>
    5b1e:	2a69      	cmp	r2, #105	; 0x69
    5b20:	d1f7      	bne.n	5b12 <_printf_i+0x2e>
    5b22:	6821      	ldr	r1, [r4, #0]
    5b24:	681a      	ldr	r2, [r3, #0]
    5b26:	0608      	lsls	r0, r1, #24
    5b28:	d523      	bpl.n	5b72 <_printf_i+0x8e>
    5b2a:	1d11      	adds	r1, r2, #4
    5b2c:	6019      	str	r1, [r3, #0]
    5b2e:	6815      	ldr	r5, [r2, #0]
    5b30:	e025      	b.n	5b7e <_printf_i+0x9a>
    5b32:	2a73      	cmp	r2, #115	; 0x73
    5b34:	d100      	bne.n	5b38 <_printf_i+0x54>
    5b36:	e088      	b.n	5c4a <_printf_i+0x166>
    5b38:	d808      	bhi.n	5b4c <_printf_i+0x68>
    5b3a:	2a6f      	cmp	r2, #111	; 0x6f
    5b3c:	d029      	beq.n	5b92 <_printf_i+0xae>
    5b3e:	2a70      	cmp	r2, #112	; 0x70
    5b40:	d1e7      	bne.n	5b12 <_printf_i+0x2e>
    5b42:	2220      	movs	r2, #32
    5b44:	6809      	ldr	r1, [r1, #0]
    5b46:	430a      	orrs	r2, r1
    5b48:	6022      	str	r2, [r4, #0]
    5b4a:	e003      	b.n	5b54 <_printf_i+0x70>
    5b4c:	2a75      	cmp	r2, #117	; 0x75
    5b4e:	d020      	beq.n	5b92 <_printf_i+0xae>
    5b50:	2a78      	cmp	r2, #120	; 0x78
    5b52:	d1de      	bne.n	5b12 <_printf_i+0x2e>
    5b54:	0022      	movs	r2, r4
    5b56:	2178      	movs	r1, #120	; 0x78
    5b58:	3245      	adds	r2, #69	; 0x45
    5b5a:	7011      	strb	r1, [r2, #0]
    5b5c:	4a6c      	ldr	r2, [pc, #432]	; (5d10 <_printf_i+0x22c>)
    5b5e:	e030      	b.n	5bc2 <_printf_i+0xde>
    5b60:	000e      	movs	r6, r1
    5b62:	681a      	ldr	r2, [r3, #0]
    5b64:	3642      	adds	r6, #66	; 0x42
    5b66:	1d11      	adds	r1, r2, #4
    5b68:	6019      	str	r1, [r3, #0]
    5b6a:	6813      	ldr	r3, [r2, #0]
    5b6c:	7033      	strb	r3, [r6, #0]
    5b6e:	2301      	movs	r3, #1
    5b70:	e079      	b.n	5c66 <_printf_i+0x182>
    5b72:	0649      	lsls	r1, r1, #25
    5b74:	d5d9      	bpl.n	5b2a <_printf_i+0x46>
    5b76:	1d11      	adds	r1, r2, #4
    5b78:	6019      	str	r1, [r3, #0]
    5b7a:	2300      	movs	r3, #0
    5b7c:	5ed5      	ldrsh	r5, [r2, r3]
    5b7e:	2d00      	cmp	r5, #0
    5b80:	da03      	bge.n	5b8a <_printf_i+0xa6>
    5b82:	232d      	movs	r3, #45	; 0x2d
    5b84:	9a04      	ldr	r2, [sp, #16]
    5b86:	426d      	negs	r5, r5
    5b88:	7013      	strb	r3, [r2, #0]
    5b8a:	4b62      	ldr	r3, [pc, #392]	; (5d14 <_printf_i+0x230>)
    5b8c:	270a      	movs	r7, #10
    5b8e:	9303      	str	r3, [sp, #12]
    5b90:	e02f      	b.n	5bf2 <_printf_i+0x10e>
    5b92:	6820      	ldr	r0, [r4, #0]
    5b94:	6819      	ldr	r1, [r3, #0]
    5b96:	0605      	lsls	r5, r0, #24
    5b98:	d503      	bpl.n	5ba2 <_printf_i+0xbe>
    5b9a:	1d08      	adds	r0, r1, #4
    5b9c:	6018      	str	r0, [r3, #0]
    5b9e:	680d      	ldr	r5, [r1, #0]
    5ba0:	e005      	b.n	5bae <_printf_i+0xca>
    5ba2:	0640      	lsls	r0, r0, #25
    5ba4:	d5f9      	bpl.n	5b9a <_printf_i+0xb6>
    5ba6:	680d      	ldr	r5, [r1, #0]
    5ba8:	1d08      	adds	r0, r1, #4
    5baa:	6018      	str	r0, [r3, #0]
    5bac:	b2ad      	uxth	r5, r5
    5bae:	4b59      	ldr	r3, [pc, #356]	; (5d14 <_printf_i+0x230>)
    5bb0:	2708      	movs	r7, #8
    5bb2:	9303      	str	r3, [sp, #12]
    5bb4:	2a6f      	cmp	r2, #111	; 0x6f
    5bb6:	d018      	beq.n	5bea <_printf_i+0x106>
    5bb8:	270a      	movs	r7, #10
    5bba:	e016      	b.n	5bea <_printf_i+0x106>
    5bbc:	3145      	adds	r1, #69	; 0x45
    5bbe:	700a      	strb	r2, [r1, #0]
    5bc0:	4a54      	ldr	r2, [pc, #336]	; (5d14 <_printf_i+0x230>)
    5bc2:	9203      	str	r2, [sp, #12]
    5bc4:	681a      	ldr	r2, [r3, #0]
    5bc6:	6821      	ldr	r1, [r4, #0]
    5bc8:	1d10      	adds	r0, r2, #4
    5bca:	6018      	str	r0, [r3, #0]
    5bcc:	6815      	ldr	r5, [r2, #0]
    5bce:	0608      	lsls	r0, r1, #24
    5bd0:	d522      	bpl.n	5c18 <_printf_i+0x134>
    5bd2:	07cb      	lsls	r3, r1, #31
    5bd4:	d502      	bpl.n	5bdc <_printf_i+0xf8>
    5bd6:	2320      	movs	r3, #32
    5bd8:	4319      	orrs	r1, r3
    5bda:	6021      	str	r1, [r4, #0]
    5bdc:	2710      	movs	r7, #16
    5bde:	2d00      	cmp	r5, #0
    5be0:	d103      	bne.n	5bea <_printf_i+0x106>
    5be2:	2320      	movs	r3, #32
    5be4:	6822      	ldr	r2, [r4, #0]
    5be6:	439a      	bics	r2, r3
    5be8:	6022      	str	r2, [r4, #0]
    5bea:	0023      	movs	r3, r4
    5bec:	2200      	movs	r2, #0
    5bee:	3343      	adds	r3, #67	; 0x43
    5bf0:	701a      	strb	r2, [r3, #0]
    5bf2:	6863      	ldr	r3, [r4, #4]
    5bf4:	60a3      	str	r3, [r4, #8]
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	db5c      	blt.n	5cb4 <_printf_i+0x1d0>
    5bfa:	2204      	movs	r2, #4
    5bfc:	6821      	ldr	r1, [r4, #0]
    5bfe:	4391      	bics	r1, r2
    5c00:	6021      	str	r1, [r4, #0]
    5c02:	2d00      	cmp	r5, #0
    5c04:	d158      	bne.n	5cb8 <_printf_i+0x1d4>
    5c06:	9e04      	ldr	r6, [sp, #16]
    5c08:	2b00      	cmp	r3, #0
    5c0a:	d064      	beq.n	5cd6 <_printf_i+0x1f2>
    5c0c:	0026      	movs	r6, r4
    5c0e:	9b03      	ldr	r3, [sp, #12]
    5c10:	3642      	adds	r6, #66	; 0x42
    5c12:	781b      	ldrb	r3, [r3, #0]
    5c14:	7033      	strb	r3, [r6, #0]
    5c16:	e05e      	b.n	5cd6 <_printf_i+0x1f2>
    5c18:	0648      	lsls	r0, r1, #25
    5c1a:	d5da      	bpl.n	5bd2 <_printf_i+0xee>
    5c1c:	b2ad      	uxth	r5, r5
    5c1e:	e7d8      	b.n	5bd2 <_printf_i+0xee>
    5c20:	6809      	ldr	r1, [r1, #0]
    5c22:	681a      	ldr	r2, [r3, #0]
    5c24:	0608      	lsls	r0, r1, #24
    5c26:	d505      	bpl.n	5c34 <_printf_i+0x150>
    5c28:	1d11      	adds	r1, r2, #4
    5c2a:	6019      	str	r1, [r3, #0]
    5c2c:	6813      	ldr	r3, [r2, #0]
    5c2e:	6962      	ldr	r2, [r4, #20]
    5c30:	601a      	str	r2, [r3, #0]
    5c32:	e006      	b.n	5c42 <_printf_i+0x15e>
    5c34:	0649      	lsls	r1, r1, #25
    5c36:	d5f7      	bpl.n	5c28 <_printf_i+0x144>
    5c38:	1d11      	adds	r1, r2, #4
    5c3a:	6019      	str	r1, [r3, #0]
    5c3c:	6813      	ldr	r3, [r2, #0]
    5c3e:	8aa2      	ldrh	r2, [r4, #20]
    5c40:	801a      	strh	r2, [r3, #0]
    5c42:	2300      	movs	r3, #0
    5c44:	9e04      	ldr	r6, [sp, #16]
    5c46:	6123      	str	r3, [r4, #16]
    5c48:	e054      	b.n	5cf4 <_printf_i+0x210>
    5c4a:	681a      	ldr	r2, [r3, #0]
    5c4c:	1d11      	adds	r1, r2, #4
    5c4e:	6019      	str	r1, [r3, #0]
    5c50:	6816      	ldr	r6, [r2, #0]
    5c52:	2100      	movs	r1, #0
    5c54:	6862      	ldr	r2, [r4, #4]
    5c56:	0030      	movs	r0, r6
    5c58:	f000 f86a 	bl	5d30 <memchr>
    5c5c:	2800      	cmp	r0, #0
    5c5e:	d001      	beq.n	5c64 <_printf_i+0x180>
    5c60:	1b80      	subs	r0, r0, r6
    5c62:	6060      	str	r0, [r4, #4]
    5c64:	6863      	ldr	r3, [r4, #4]
    5c66:	6123      	str	r3, [r4, #16]
    5c68:	2300      	movs	r3, #0
    5c6a:	9a04      	ldr	r2, [sp, #16]
    5c6c:	7013      	strb	r3, [r2, #0]
    5c6e:	e041      	b.n	5cf4 <_printf_i+0x210>
    5c70:	6923      	ldr	r3, [r4, #16]
    5c72:	0032      	movs	r2, r6
    5c74:	9906      	ldr	r1, [sp, #24]
    5c76:	9805      	ldr	r0, [sp, #20]
    5c78:	9d07      	ldr	r5, [sp, #28]
    5c7a:	47a8      	blx	r5
    5c7c:	1c43      	adds	r3, r0, #1
    5c7e:	d043      	beq.n	5d08 <_printf_i+0x224>
    5c80:	6823      	ldr	r3, [r4, #0]
    5c82:	2500      	movs	r5, #0
    5c84:	079b      	lsls	r3, r3, #30
    5c86:	d40f      	bmi.n	5ca8 <_printf_i+0x1c4>
    5c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5c8a:	68e0      	ldr	r0, [r4, #12]
    5c8c:	4298      	cmp	r0, r3
    5c8e:	da3d      	bge.n	5d0c <_printf_i+0x228>
    5c90:	0018      	movs	r0, r3
    5c92:	e03b      	b.n	5d0c <_printf_i+0x228>
    5c94:	0022      	movs	r2, r4
    5c96:	2301      	movs	r3, #1
    5c98:	3219      	adds	r2, #25
    5c9a:	9906      	ldr	r1, [sp, #24]
    5c9c:	9805      	ldr	r0, [sp, #20]
    5c9e:	9e07      	ldr	r6, [sp, #28]
    5ca0:	47b0      	blx	r6
    5ca2:	1c43      	adds	r3, r0, #1
    5ca4:	d030      	beq.n	5d08 <_printf_i+0x224>
    5ca6:	3501      	adds	r5, #1
    5ca8:	68e3      	ldr	r3, [r4, #12]
    5caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5cac:	1a9b      	subs	r3, r3, r2
    5cae:	429d      	cmp	r5, r3
    5cb0:	dbf0      	blt.n	5c94 <_printf_i+0x1b0>
    5cb2:	e7e9      	b.n	5c88 <_printf_i+0x1a4>
    5cb4:	2d00      	cmp	r5, #0
    5cb6:	d0a9      	beq.n	5c0c <_printf_i+0x128>
    5cb8:	9e04      	ldr	r6, [sp, #16]
    5cba:	0028      	movs	r0, r5
    5cbc:	0039      	movs	r1, r7
    5cbe:	f7ff fb2d 	bl	531c <__aeabi_uidivmod>
    5cc2:	9b03      	ldr	r3, [sp, #12]
    5cc4:	3e01      	subs	r6, #1
    5cc6:	5c5b      	ldrb	r3, [r3, r1]
    5cc8:	0028      	movs	r0, r5
    5cca:	7033      	strb	r3, [r6, #0]
    5ccc:	0039      	movs	r1, r7
    5cce:	f7ff fa9f 	bl	5210 <__udivsi3>
    5cd2:	1e05      	subs	r5, r0, #0
    5cd4:	d1f1      	bne.n	5cba <_printf_i+0x1d6>
    5cd6:	2f08      	cmp	r7, #8
    5cd8:	d109      	bne.n	5cee <_printf_i+0x20a>
    5cda:	6823      	ldr	r3, [r4, #0]
    5cdc:	07db      	lsls	r3, r3, #31
    5cde:	d506      	bpl.n	5cee <_printf_i+0x20a>
    5ce0:	6863      	ldr	r3, [r4, #4]
    5ce2:	6922      	ldr	r2, [r4, #16]
    5ce4:	4293      	cmp	r3, r2
    5ce6:	dc02      	bgt.n	5cee <_printf_i+0x20a>
    5ce8:	2330      	movs	r3, #48	; 0x30
    5cea:	3e01      	subs	r6, #1
    5cec:	7033      	strb	r3, [r6, #0]
    5cee:	9b04      	ldr	r3, [sp, #16]
    5cf0:	1b9b      	subs	r3, r3, r6
    5cf2:	6123      	str	r3, [r4, #16]
    5cf4:	9b07      	ldr	r3, [sp, #28]
    5cf6:	aa09      	add	r2, sp, #36	; 0x24
    5cf8:	9300      	str	r3, [sp, #0]
    5cfa:	0021      	movs	r1, r4
    5cfc:	9b06      	ldr	r3, [sp, #24]
    5cfe:	9805      	ldr	r0, [sp, #20]
    5d00:	f7ff fe82 	bl	5a08 <_printf_common>
    5d04:	1c43      	adds	r3, r0, #1
    5d06:	d1b3      	bne.n	5c70 <_printf_i+0x18c>
    5d08:	2001      	movs	r0, #1
    5d0a:	4240      	negs	r0, r0
    5d0c:	b00b      	add	sp, #44	; 0x2c
    5d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d10:	000061f7 	.word	0x000061f7
    5d14:	000061e6 	.word	0x000061e6

00005d18 <__ascii_wctomb>:
    5d18:	1e0b      	subs	r3, r1, #0
    5d1a:	d004      	beq.n	5d26 <__ascii_wctomb+0xe>
    5d1c:	2aff      	cmp	r2, #255	; 0xff
    5d1e:	d904      	bls.n	5d2a <__ascii_wctomb+0x12>
    5d20:	238a      	movs	r3, #138	; 0x8a
    5d22:	6003      	str	r3, [r0, #0]
    5d24:	3b8b      	subs	r3, #139	; 0x8b
    5d26:	0018      	movs	r0, r3
    5d28:	4770      	bx	lr
    5d2a:	700a      	strb	r2, [r1, #0]
    5d2c:	2301      	movs	r3, #1
    5d2e:	e7fa      	b.n	5d26 <__ascii_wctomb+0xe>

00005d30 <memchr>:
    5d30:	b2c9      	uxtb	r1, r1
    5d32:	1882      	adds	r2, r0, r2
    5d34:	4290      	cmp	r0, r2
    5d36:	d101      	bne.n	5d3c <memchr+0xc>
    5d38:	2000      	movs	r0, #0
    5d3a:	4770      	bx	lr
    5d3c:	7803      	ldrb	r3, [r0, #0]
    5d3e:	428b      	cmp	r3, r1
    5d40:	d0fb      	beq.n	5d3a <memchr+0xa>
    5d42:	3001      	adds	r0, #1
    5d44:	e7f6      	b.n	5d34 <memchr+0x4>

00005d46 <memmove>:
    5d46:	b510      	push	{r4, lr}
    5d48:	4288      	cmp	r0, r1
    5d4a:	d902      	bls.n	5d52 <memmove+0xc>
    5d4c:	188b      	adds	r3, r1, r2
    5d4e:	4298      	cmp	r0, r3
    5d50:	d308      	bcc.n	5d64 <memmove+0x1e>
    5d52:	2300      	movs	r3, #0
    5d54:	429a      	cmp	r2, r3
    5d56:	d007      	beq.n	5d68 <memmove+0x22>
    5d58:	5ccc      	ldrb	r4, [r1, r3]
    5d5a:	54c4      	strb	r4, [r0, r3]
    5d5c:	3301      	adds	r3, #1
    5d5e:	e7f9      	b.n	5d54 <memmove+0xe>
    5d60:	5c8b      	ldrb	r3, [r1, r2]
    5d62:	5483      	strb	r3, [r0, r2]
    5d64:	3a01      	subs	r2, #1
    5d66:	d2fb      	bcs.n	5d60 <memmove+0x1a>
    5d68:	bd10      	pop	{r4, pc}

00005d6a <_realloc_r>:
    5d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d6c:	0007      	movs	r7, r0
    5d6e:	000d      	movs	r5, r1
    5d70:	0016      	movs	r6, r2
    5d72:	2900      	cmp	r1, #0
    5d74:	d105      	bne.n	5d82 <_realloc_r+0x18>
    5d76:	0011      	movs	r1, r2
    5d78:	f7ff fb8a 	bl	5490 <_malloc_r>
    5d7c:	0004      	movs	r4, r0
    5d7e:	0020      	movs	r0, r4
    5d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d82:	2a00      	cmp	r2, #0
    5d84:	d103      	bne.n	5d8e <_realloc_r+0x24>
    5d86:	f7ff fb39 	bl	53fc <_free_r>
    5d8a:	0034      	movs	r4, r6
    5d8c:	e7f7      	b.n	5d7e <_realloc_r+0x14>
    5d8e:	f000 f812 	bl	5db6 <_malloc_usable_size_r>
    5d92:	002c      	movs	r4, r5
    5d94:	4286      	cmp	r6, r0
    5d96:	d9f2      	bls.n	5d7e <_realloc_r+0x14>
    5d98:	0031      	movs	r1, r6
    5d9a:	0038      	movs	r0, r7
    5d9c:	f7ff fb78 	bl	5490 <_malloc_r>
    5da0:	1e04      	subs	r4, r0, #0
    5da2:	d0ec      	beq.n	5d7e <_realloc_r+0x14>
    5da4:	0029      	movs	r1, r5
    5da6:	0032      	movs	r2, r6
    5da8:	f7ff fb16 	bl	53d8 <memcpy>
    5dac:	0029      	movs	r1, r5
    5dae:	0038      	movs	r0, r7
    5db0:	f7ff fb24 	bl	53fc <_free_r>
    5db4:	e7e3      	b.n	5d7e <_realloc_r+0x14>

00005db6 <_malloc_usable_size_r>:
    5db6:	1f0b      	subs	r3, r1, #4
    5db8:	681b      	ldr	r3, [r3, #0]
    5dba:	1f18      	subs	r0, r3, #4
    5dbc:	2b00      	cmp	r3, #0
    5dbe:	da01      	bge.n	5dc4 <_malloc_usable_size_r+0xe>
    5dc0:	580b      	ldr	r3, [r1, r0]
    5dc2:	18c0      	adds	r0, r0, r3
    5dc4:	4770      	bx	lr
    5dc6:	0000      	movs	r0, r0
    5dc8:	42000800 	.word	0x42000800
    5dcc:	42000c00 	.word	0x42000c00
    5dd0:	42001000 	.word	0x42001000
    5dd4:	42001400 	.word	0x42001400
    5dd8:	42001800 	.word	0x42001800
    5ddc:	42001c00 	.word	0x42001c00
    5de0:	706c6568 	.word	0x706c6568
    5de4:	00000000 	.word	0x00000000
    5de8:	65680a0d 	.word	0x65680a0d
    5dec:	0d3a706c 	.word	0x0d3a706c
    5df0:	694c200a 	.word	0x694c200a
    5df4:	20737473 	.word	0x20737473
    5df8:	206c6c61 	.word	0x206c6c61
    5dfc:	20656874 	.word	0x20656874
    5e00:	69676572 	.word	0x69676572
    5e04:	72657473 	.word	0x72657473
    5e08:	63206465 	.word	0x63206465
    5e0c:	616d6d6f 	.word	0x616d6d6f
    5e10:	0d73646e 	.word	0x0d73646e
    5e14:	000a0d0a 	.word	0x000a0d0a
    5e18:	6f636e49 	.word	0x6f636e49
    5e1c:	63657272 	.word	0x63657272
    5e20:	6f632074 	.word	0x6f632074
    5e24:	6e616d6d 	.word	0x6e616d6d
    5e28:	61702064 	.word	0x61702064
    5e2c:	656d6172 	.word	0x656d6172
    5e30:	28726574 	.word	0x28726574
    5e34:	202e2973 	.word	0x202e2973
    5e38:	746e4520 	.word	0x746e4520
    5e3c:	22207265 	.word	0x22207265
    5e40:	706c6568 	.word	0x706c6568
    5e44:	6f742022 	.word	0x6f742022
    5e48:	65697620 	.word	0x65697620
    5e4c:	20612077 	.word	0x20612077
    5e50:	7473696c 	.word	0x7473696c
    5e54:	20666f20 	.word	0x20666f20
    5e58:	69617661 	.word	0x69617661
    5e5c:	6c62616c 	.word	0x6c62616c
    5e60:	6f632065 	.word	0x6f632065
    5e64:	6e616d6d 	.word	0x6e616d6d
    5e68:	0d2e7364 	.word	0x0d2e7364
    5e6c:	000a0d0a 	.word	0x000a0d0a
    5e70:	6d6d6f43 	.word	0x6d6d6f43
    5e74:	20646e61 	.word	0x20646e61
    5e78:	20746f6e 	.word	0x20746f6e
    5e7c:	6f636572 	.word	0x6f636572
    5e80:	73696e67 	.word	0x73696e67
    5e84:	202e6465 	.word	0x202e6465
    5e88:	746e4520 	.word	0x746e4520
    5e8c:	27207265 	.word	0x27207265
    5e90:	706c6568 	.word	0x706c6568
    5e94:	6f742027 	.word	0x6f742027
    5e98:	65697620 	.word	0x65697620
    5e9c:	20612077 	.word	0x20612077
    5ea0:	7473696c 	.word	0x7473696c
    5ea4:	20666f20 	.word	0x20666f20
    5ea8:	69617661 	.word	0x69617661
    5eac:	6c62616c 	.word	0x6c62616c
    5eb0:	6f632065 	.word	0x6f632065
    5eb4:	6e616d6d 	.word	0x6e616d6d
    5eb8:	0d2e7364 	.word	0x0d2e7364
    5ebc:	000a0d0a 	.word	0x000a0d0a

00005ec0 <xHelpCommand>:
    5ec0:	00005de0 00005de8 00000dd5 00000000     .]...]..........
    5ed0:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
    5ee0:	00002d8c 00002d8c 00002d8c 00002e1a     .-...-...-......
    5ef0:	00002de4 00002e0e 00002d8c 00002d8c     .-.......-...-..
    5f00:	00002e1a 00002de4 65657246 534f5452     .....-..FreeRTOS
    5f10:	494c4320 540a0d2e 20657079 706c6548      CLI...Type Help
    5f20:	206f7420 77656976 6c206120 20747369      to view a list 
    5f30:	7220666f 73696765 65726574 6f632064     of registered co
    5f40:	6e616d6d 0d2e7364 0000000a 00736c63     mmands......cls.
    5f50:	3a736c63 656c4320 20737261 20656874     cls: Clears the 
    5f60:	6d726574 6c616e69 72637320 0d6e6565     terminal screen.
    5f70:	0000000a 65736572 00000074 65736572     ....reset...rese
    5f80:	52203a74 74657365 68742073 65642065     t: Resets the de
    5f90:	65636976 00000a0d 00000a0d 0000616f     vice........oa..
    5fa0:	325b6325 003e0d4b 00082008 325b6325     %c[2K.>.. ..%c[2
    5fb0:	0000004a                                J...

00005fb4 <xClearScreen>:
    5fb4:	00005f4c 00005f50 0000325d 00000000     L_..P_..]2......

00005fc4 <xResetCommand>:
    5fc4:	00005f74 00005f7c 000032a5 00000000     t_..|_...2......
    5fd4:	66666666 79206666 0021756f 20746f67     ffffff you!.got 
    5fe4:	21756f79 00000000 0c0b0a09 00000e0d     you!............
    5ff4:	000048b6 00004930 00004930 000048d4     .H..0I..0I...H..
    6004:	000048ce 000048da 000048bc 000048e0     .H...H...H...H..
    6014:	00004916 00004a0c 00004a5c 00004a5c     .I...J..\J..\J..
    6024:	00004a58 000049fe 00004a1e 000049ee     XJ...I...J...I..
    6034:	00004a30 00004a42 35455345 2d203631     0J..BJ..ESE516 -
    6044:	494c4320 646e6120 62654420 4c206775      CLI and Debug L
    6054:	6567676f 000a0d72 00007325 66726550     ogger...%s..Perf
    6064:	696d726f 5420676e 65706d65 75746172     orming Temperatu
    6074:	54206572 0d747365 0000000a 6f727245     re Test.....Erro
    6084:	54202172 65706d65 75746172 6f206572     r! Temperature o
    6094:	20726576 44206425 65726765 0d217365     ver %d Degrees!.
    60a4:	0000000a 74737953 65206d65 726f7272     ....System error
    60b4:	000a0d21 35455345 43203631 5320494c     !...ESE516 CLI S
    60c4:	54524154 50205245 454a4f52 53205443     TARTER PROJECT S
    60d4:	54524154 0a0d4445 00000000 20494c43     TARTED......CLI 
    60e4:	72617473 20726574 65646f63 45202d20     starter code - E
    60f4:	31354553 000a0d36 70616548 66656220     SE516...Heap bef
    6104:	2065726f 72617473 676e6974 73617420     ore starting tas
    6114:	203a736b 0a0d6425 00000000 5f494c43     ks: %d......CLI_
    6124:	4b534154 00000000 3a525245 494c4320     TASK....ERR: CLI
    6134:	73617420 6f63206b 20646c75 20746f6e      task could not 
    6144:	69206562 6974696e 7a696c61 0d216465     be initialized!.
    6154:	0000000a 70616548 74666120 73207265     ....Heap after s
    6164:	74726174 20676e69 3a494c43 0d642520     tarting CLI: %d.
    6174:	0000000a 6f727245 6e6f2072 6d656d20     ....Error on mem
    6184:	2079726f 6f6c6c61 69746163 6f206e6f     ory allocation o
    6194:	5246206e 54524545 0d21534f 0000000a     n FREERTOS!.....
    61a4:	6f727245 6e6f2072 61747320 6f206b63     Error on stack o
    61b4:	66726576 20776f6c 46206e6f 52454552     verflow on FREER
    61c4:	21534f54 43000a0d 534f5000 2e005849     TOS!...C.POSIX..
    61d4:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
    61e4:	31300047 35343332 39383736 44434241     G.0123456789ABCD
    61f4:	30004645 34333231 38373635 63626139     EF.0123456789abc
    6204:	00666564                                def.

00006208 <_ctype_>:
    6208:	20202000 20202020 28282020 20282828     .         ((((( 
    6218:	20202020 20202020 20202020 20202020                     
    6228:	10108820 10101010 10101010 10101010      ...............
    6238:	04040410 04040404 10040404 10101010     ................
    6248:	41411010 41414141 01010101 01010101     ..AAAAAA........
    6258:	01010101 01010101 01010101 10101010     ................
    6268:	42421010 42424242 02020202 02020202     ..BBBBBB........
    6278:	02020202 02020202 02020202 10101010     ................
    6288:	00000020 00000000 00000000 00000000      ...............
	...

0000630c <_init>:
    630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    630e:	46c0      	nop			; (mov r8, r8)
    6310:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6312:	bc08      	pop	{r3}
    6314:	469e      	mov	lr, r3
    6316:	4770      	bx	lr

00006318 <__init_array_start>:
    6318:	000000dd 	.word	0x000000dd

0000631c <_fini>:
    631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    631e:	46c0      	nop			; (mov r8, r8)
    6320:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6322:	bc08      	pop	{r3}
    6324:	469e      	mov	lr, r3
    6326:	4770      	bx	lr

00006328 <__fini_array_start>:
    6328:	000000b5 	.word	0x000000b5
