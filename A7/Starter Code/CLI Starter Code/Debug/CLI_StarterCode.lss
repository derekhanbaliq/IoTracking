
CLI_StarterCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006744  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e4  20000000  00006744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000036f4  200001e4  00006928  000201e4  2**2
                  ALLOC
  3 .stack        00002000  200038d8  0000a01c  000201e4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002b640  00000000  00000000  00020265  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000041a5  00000000  00000000  0004b8a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003f14  00000000  00000000  0004fa4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bb0  00000000  00000000  0005395e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a30  00000000  00000000  0005450e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d031  00000000  00000000  00054f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010fd9  00000000  00000000  00071f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093519  00000000  00000000  00082f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c18  00000000  00000000  00116464  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 58 00 20 01 0b 00 00 f9 0b 00 00 f9 0b 00 00     .X. ............
	...
      2c:	81 10 00 00 00 00 00 00 00 00 00 00 b1 11 00 00     ................
      3c:	f9 11 00 00 f9 0b 00 00 f9 0b 00 00 f9 0b 00 00     ................
      4c:	f9 0b 00 00 f9 0b 00 00 f9 0b 00 00 f9 0b 00 00     ................
      5c:	f9 0b 00 00 f9 0b 00 00 e1 4a 00 00 f9 4a 00 00     .........J...J..
      6c:	11 4b 00 00 29 4b 00 00 41 4b 00 00 59 4b 00 00     .K..)K..AK..YK..
      7c:	f9 0b 00 00 f9 0b 00 00 f9 0b 00 00 f9 0b 00 00     ................
      8c:	f9 0b 00 00 f9 0b 00 00 00 00 00 00 00 00 00 00     ................
      9c:	f9 0b 00 00 f9 0b 00 00 f9 0b 00 00 f9 0b 00 00     ................
      ac:	f9 0b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001e4 	.word	0x200001e4
      d4:	00000000 	.word	0x00000000
      d8:	00006744 	.word	0x00006744

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e8 	.word	0x200001e8
     108:	00006744 	.word	0x00006744
     10c:	00006744 	.word	0x00006744
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     11a:	4b10      	ldr	r3, [pc, #64]	; (15c <cpu_irq_enter_critical+0x48>)
     11c:	681b      	ldr	r3, [r3, #0]
     11e:	2b00      	cmp	r3, #0
     120:	d112      	bne.n	148 <cpu_irq_enter_critical+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     122:	f3ef 8310 	mrs	r3, PRIMASK
     126:	607b      	str	r3, [r7, #4]
  return(result);
     128:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     12a:	2b00      	cmp	r3, #0
     12c:	d109      	bne.n	142 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     12e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     130:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     134:	4b0a      	ldr	r3, [pc, #40]	; (160 <cpu_irq_enter_critical+0x4c>)
     136:	2200      	movs	r2, #0
     138:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <cpu_irq_enter_critical+0x50>)
     13c:	2201      	movs	r2, #1
     13e:	701a      	strb	r2, [r3, #0]
     140:	e002      	b.n	148 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     142:	4b08      	ldr	r3, [pc, #32]	; (164 <cpu_irq_enter_critical+0x50>)
     144:	2200      	movs	r2, #0
     146:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     148:	4b04      	ldr	r3, [pc, #16]	; (15c <cpu_irq_enter_critical+0x48>)
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	1c5a      	adds	r2, r3, #1
     14e:	4b03      	ldr	r3, [pc, #12]	; (15c <cpu_irq_enter_critical+0x48>)
     150:	601a      	str	r2, [r3, #0]
}
     152:	46c0      	nop			; (mov r8, r8)
     154:	46bd      	mov	sp, r7
     156:	b002      	add	sp, #8
     158:	bd80      	pop	{r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	20000200 	.word	0x20000200
     160:	20000000 	.word	0x20000000
     164:	20000204 	.word	0x20000204

00000168 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     168:	b580      	push	{r7, lr}
     16a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     16c:	4b0b      	ldr	r3, [pc, #44]	; (19c <cpu_irq_leave_critical+0x34>)
     16e:	681b      	ldr	r3, [r3, #0]
     170:	1e5a      	subs	r2, r3, #1
     172:	4b0a      	ldr	r3, [pc, #40]	; (19c <cpu_irq_leave_critical+0x34>)
     174:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     176:	4b09      	ldr	r3, [pc, #36]	; (19c <cpu_irq_leave_critical+0x34>)
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b00      	cmp	r3, #0
     17c:	d10a      	bne.n	194 <cpu_irq_leave_critical+0x2c>
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <cpu_irq_leave_critical+0x38>)
     180:	781b      	ldrb	r3, [r3, #0]
     182:	b2db      	uxtb	r3, r3
     184:	2b00      	cmp	r3, #0
     186:	d005      	beq.n	194 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     188:	4b06      	ldr	r3, [pc, #24]	; (1a4 <cpu_irq_leave_critical+0x3c>)
     18a:	2201      	movs	r2, #1
     18c:	701a      	strb	r2, [r3, #0]
     18e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     192:	b662      	cpsie	i
	}
}
     194:	46c0      	nop			; (mov r8, r8)
     196:	46bd      	mov	sp, r7
     198:	bd80      	pop	{r7, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	20000200 	.word	0x20000200
     1a0:	20000204 	.word	0x20000204
     1a4:	20000000 	.word	0x20000000

000001a8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b084      	sub	sp, #16
     1ac:	af00      	add	r7, sp, #0
     1ae:	0002      	movs	r2, r0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     1b4:	230f      	movs	r3, #15
     1b6:	18fb      	adds	r3, r7, r3
     1b8:	1dfa      	adds	r2, r7, #7
     1ba:	7812      	ldrb	r2, [r2, #0]
     1bc:	09d2      	lsrs	r2, r2, #7
     1be:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     1c0:	230e      	movs	r3, #14
     1c2:	18fb      	adds	r3, r7, r3
     1c4:	1dfa      	adds	r2, r7, #7
     1c6:	7812      	ldrb	r2, [r2, #0]
     1c8:	0952      	lsrs	r2, r2, #5
     1ca:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     1cc:	4b0d      	ldr	r3, [pc, #52]	; (204 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     1ce:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1d0:	230f      	movs	r3, #15
     1d2:	18fb      	adds	r3, r7, r3
     1d4:	781b      	ldrb	r3, [r3, #0]
     1d6:	2b00      	cmp	r3, #0
     1d8:	d10f      	bne.n	1fa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     1da:	230f      	movs	r3, #15
     1dc:	18fb      	adds	r3, r7, r3
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	009b      	lsls	r3, r3, #2
     1e2:	2210      	movs	r2, #16
     1e4:	4694      	mov	ip, r2
     1e6:	44bc      	add	ip, r7
     1e8:	4463      	add	r3, ip
     1ea:	3b08      	subs	r3, #8
     1ec:	681a      	ldr	r2, [r3, #0]
     1ee:	230e      	movs	r3, #14
     1f0:	18fb      	adds	r3, r7, r3
     1f2:	781b      	ldrb	r3, [r3, #0]
     1f4:	01db      	lsls	r3, r3, #7
     1f6:	18d3      	adds	r3, r2, r3
     1f8:	e000      	b.n	1fc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     1fa:	2300      	movs	r3, #0
	}
}
     1fc:	0018      	movs	r0, r3
     1fe:	46bd      	mov	sp, r7
     200:	b004      	add	sp, #16
     202:	bd80      	pop	{r7, pc}
     204:	41004400 	.word	0x41004400

00000208 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     208:	b580      	push	{r7, lr}
     20a:	b082      	sub	sp, #8
     20c:	af00      	add	r7, sp, #0
     20e:	0002      	movs	r2, r0
     210:	1dfb      	adds	r3, r7, #7
     212:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     214:	1dfb      	adds	r3, r7, #7
     216:	781b      	ldrb	r3, [r3, #0]
     218:	0018      	movs	r0, r3
     21a:	4b03      	ldr	r3, [pc, #12]	; (228 <port_get_group_from_gpio_pin+0x20>)
     21c:	4798      	blx	r3
     21e:	0003      	movs	r3, r0
}
     220:	0018      	movs	r0, r3
     222:	46bd      	mov	sp, r7
     224:	b002      	add	sp, #8
     226:	bd80      	pop	{r7, pc}
     228:	000001a9 	.word	0x000001a9

0000022c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     22c:	b580      	push	{r7, lr}
     22e:	b082      	sub	sp, #8
     230:	af00      	add	r7, sp, #0
     232:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     234:	687b      	ldr	r3, [r7, #4]
     236:	2200      	movs	r2, #0
     238:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     23a:	687b      	ldr	r3, [r7, #4]
     23c:	2201      	movs	r2, #1
     23e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     240:	687b      	ldr	r3, [r7, #4]
     242:	2200      	movs	r2, #0
     244:	709a      	strb	r2, [r3, #2]
}
     246:	46c0      	nop			; (mov r8, r8)
     248:	46bd      	mov	sp, r7
     24a:	b002      	add	sp, #8
     24c:	bd80      	pop	{r7, pc}
	...

00000250 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     250:	b580      	push	{r7, lr}
     252:	b084      	sub	sp, #16
     254:	af00      	add	r7, sp, #0
     256:	0002      	movs	r2, r0
     258:	1dfb      	adds	r3, r7, #7
     25a:	701a      	strb	r2, [r3, #0]
     25c:	1dbb      	adds	r3, r7, #6
     25e:	1c0a      	adds	r2, r1, #0
     260:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     262:	1dfb      	adds	r3, r7, #7
     264:	781b      	ldrb	r3, [r3, #0]
     266:	0018      	movs	r0, r3
     268:	4b0d      	ldr	r3, [pc, #52]	; (2a0 <port_pin_set_output_level+0x50>)
     26a:	4798      	blx	r3
     26c:	0003      	movs	r3, r0
     26e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     270:	1dfb      	adds	r3, r7, #7
     272:	781b      	ldrb	r3, [r3, #0]
     274:	221f      	movs	r2, #31
     276:	4013      	ands	r3, r2
     278:	2201      	movs	r2, #1
     27a:	409a      	lsls	r2, r3
     27c:	0013      	movs	r3, r2
     27e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     280:	1dbb      	adds	r3, r7, #6
     282:	781b      	ldrb	r3, [r3, #0]
     284:	2b00      	cmp	r3, #0
     286:	d003      	beq.n	290 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     288:	68fb      	ldr	r3, [r7, #12]
     28a:	68ba      	ldr	r2, [r7, #8]
     28c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     28e:	e002      	b.n	296 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     290:	68fb      	ldr	r3, [r7, #12]
     292:	68ba      	ldr	r2, [r7, #8]
     294:	615a      	str	r2, [r3, #20]
}
     296:	46c0      	nop			; (mov r8, r8)
     298:	46bd      	mov	sp, r7
     29a:	b004      	add	sp, #16
     29c:	bd80      	pop	{r7, pc}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	00000209 	.word	0x00000209

000002a4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b082      	sub	sp, #8
     2a8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2aa:	1d3b      	adds	r3, r7, #4
     2ac:	0018      	movs	r0, r3
     2ae:	4b0e      	ldr	r3, [pc, #56]	; (2e8 <system_board_init+0x44>)
     2b0:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     2b2:	1d3b      	adds	r3, r7, #4
     2b4:	2201      	movs	r2, #1
     2b6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2b8:	1d3b      	adds	r3, r7, #4
     2ba:	0019      	movs	r1, r3
     2bc:	2017      	movs	r0, #23
     2be:	4b0b      	ldr	r3, [pc, #44]	; (2ec <system_board_init+0x48>)
     2c0:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     2c2:	2101      	movs	r1, #1
     2c4:	2017      	movs	r0, #23
     2c6:	4b0a      	ldr	r3, [pc, #40]	; (2f0 <system_board_init+0x4c>)
     2c8:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     2ca:	1d3b      	adds	r3, r7, #4
     2cc:	2200      	movs	r2, #0
     2ce:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     2d0:	1d3b      	adds	r3, r7, #4
     2d2:	2201      	movs	r2, #1
     2d4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2d6:	1d3b      	adds	r3, r7, #4
     2d8:	0019      	movs	r1, r3
     2da:	2037      	movs	r0, #55	; 0x37
     2dc:	4b03      	ldr	r3, [pc, #12]	; (2ec <system_board_init+0x48>)
     2de:	4798      	blx	r3
}
     2e0:	46c0      	nop			; (mov r8, r8)
     2e2:	46bd      	mov	sp, r7
     2e4:	b002      	add	sp, #8
     2e6:	bd80      	pop	{r7, pc}
     2e8:	0000022d 	.word	0x0000022d
     2ec:	0000031d 	.word	0x0000031d
     2f0:	00000251 	.word	0x00000251

000002f4 <system_pinmux_get_config_defaults>:
{
     2f4:	b580      	push	{r7, lr}
     2f6:	b082      	sub	sp, #8
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	2280      	movs	r2, #128	; 0x80
     300:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     302:	687b      	ldr	r3, [r7, #4]
     304:	2200      	movs	r2, #0
     306:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     308:	687b      	ldr	r3, [r7, #4]
     30a:	2201      	movs	r2, #1
     30c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     30e:	687b      	ldr	r3, [r7, #4]
     310:	2200      	movs	r2, #0
     312:	70da      	strb	r2, [r3, #3]
}
     314:	46c0      	nop			; (mov r8, r8)
     316:	46bd      	mov	sp, r7
     318:	b002      	add	sp, #8
     31a:	bd80      	pop	{r7, pc}

0000031c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     31c:	b580      	push	{r7, lr}
     31e:	b084      	sub	sp, #16
     320:	af00      	add	r7, sp, #0
     322:	0002      	movs	r2, r0
     324:	6039      	str	r1, [r7, #0]
     326:	1dfb      	adds	r3, r7, #7
     328:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     32a:	230c      	movs	r3, #12
     32c:	18fb      	adds	r3, r7, r3
     32e:	0018      	movs	r0, r3
     330:	4b10      	ldr	r3, [pc, #64]	; (374 <port_pin_set_config+0x58>)
     332:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     334:	230c      	movs	r3, #12
     336:	18fb      	adds	r3, r7, r3
     338:	2280      	movs	r2, #128	; 0x80
     33a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     33c:	683b      	ldr	r3, [r7, #0]
     33e:	781a      	ldrb	r2, [r3, #0]
     340:	230c      	movs	r3, #12
     342:	18fb      	adds	r3, r7, r3
     344:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     346:	683b      	ldr	r3, [r7, #0]
     348:	785a      	ldrb	r2, [r3, #1]
     34a:	230c      	movs	r3, #12
     34c:	18fb      	adds	r3, r7, r3
     34e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     350:	683b      	ldr	r3, [r7, #0]
     352:	789a      	ldrb	r2, [r3, #2]
     354:	230c      	movs	r3, #12
     356:	18fb      	adds	r3, r7, r3
     358:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     35a:	230c      	movs	r3, #12
     35c:	18fa      	adds	r2, r7, r3
     35e:	1dfb      	adds	r3, r7, #7
     360:	781b      	ldrb	r3, [r3, #0]
     362:	0011      	movs	r1, r2
     364:	0018      	movs	r0, r3
     366:	4b04      	ldr	r3, [pc, #16]	; (378 <port_pin_set_config+0x5c>)
     368:	4798      	blx	r3
}
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	46bd      	mov	sp, r7
     36e:	b004      	add	sp, #16
     370:	bd80      	pop	{r7, pc}
     372:	46c0      	nop			; (mov r8, r8)
     374:	000002f5 	.word	0x000002f5
     378:	00000ab9 	.word	0x00000ab9

0000037c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     37c:	b580      	push	{r7, lr}
     37e:	b082      	sub	sp, #8
     380:	af00      	add	r7, sp, #0
     382:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     384:	687b      	ldr	r3, [r7, #4]
     386:	2200      	movs	r2, #0
     388:	701a      	strb	r2, [r3, #0]
}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	46bd      	mov	sp, r7
     38e:	b002      	add	sp, #8
     390:	bd80      	pop	{r7, pc}

00000392 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     392:	b5f0      	push	{r4, r5, r6, r7, lr}
     394:	b08d      	sub	sp, #52	; 0x34
     396:	af00      	add	r7, sp, #0
     398:	60b8      	str	r0, [r7, #8]
     39a:	60f9      	str	r1, [r7, #12]
     39c:	603a      	str	r2, [r7, #0]
     39e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     3a0:	2300      	movs	r3, #0
     3a2:	2400      	movs	r4, #0
     3a4:	623b      	str	r3, [r7, #32]
     3a6:	627c      	str	r4, [r7, #36]	; 0x24
     3a8:	2300      	movs	r3, #0
     3aa:	2400      	movs	r4, #0
     3ac:	61bb      	str	r3, [r7, #24]
     3ae:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     3b0:	233f      	movs	r3, #63	; 0x3f
     3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
     3b4:	e053      	b.n	45e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3b8:	3b20      	subs	r3, #32
     3ba:	2b00      	cmp	r3, #0
     3bc:	db04      	blt.n	3c8 <long_division+0x36>
     3be:	2201      	movs	r2, #1
     3c0:	409a      	lsls	r2, r3
     3c2:	0013      	movs	r3, r2
     3c4:	617b      	str	r3, [r7, #20]
     3c6:	e00b      	b.n	3e0 <long_division+0x4e>
     3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3ca:	2220      	movs	r2, #32
     3cc:	1ad3      	subs	r3, r2, r3
     3ce:	2201      	movs	r2, #1
     3d0:	40da      	lsrs	r2, r3
     3d2:	0013      	movs	r3, r2
     3d4:	2100      	movs	r1, #0
     3d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     3d8:	4091      	lsls	r1, r2
     3da:	000a      	movs	r2, r1
     3dc:	4313      	orrs	r3, r2
     3de:	617b      	str	r3, [r7, #20]
     3e0:	2201      	movs	r2, #1
     3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3e4:	409a      	lsls	r2, r3
     3e6:	0013      	movs	r3, r2
     3e8:	613b      	str	r3, [r7, #16]

		r = r << 1;
     3ea:	69bb      	ldr	r3, [r7, #24]
     3ec:	69fc      	ldr	r4, [r7, #28]
     3ee:	18db      	adds	r3, r3, r3
     3f0:	4164      	adcs	r4, r4
     3f2:	61bb      	str	r3, [r7, #24]
     3f4:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     3f6:	68bb      	ldr	r3, [r7, #8]
     3f8:	693a      	ldr	r2, [r7, #16]
     3fa:	401a      	ands	r2, r3
     3fc:	0015      	movs	r5, r2
     3fe:	68fb      	ldr	r3, [r7, #12]
     400:	697a      	ldr	r2, [r7, #20]
     402:	401a      	ands	r2, r3
     404:	0016      	movs	r6, r2
     406:	002b      	movs	r3, r5
     408:	4333      	orrs	r3, r6
     40a:	d007      	beq.n	41c <long_division+0x8a>
			r |= 0x01;
     40c:	69bb      	ldr	r3, [r7, #24]
     40e:	2201      	movs	r2, #1
     410:	4313      	orrs	r3, r2
     412:	61bb      	str	r3, [r7, #24]
     414:	69fb      	ldr	r3, [r7, #28]
     416:	2200      	movs	r2, #0
     418:	4313      	orrs	r3, r2
     41a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     41c:	687a      	ldr	r2, [r7, #4]
     41e:	69fb      	ldr	r3, [r7, #28]
     420:	429a      	cmp	r2, r3
     422:	d819      	bhi.n	458 <long_division+0xc6>
     424:	687a      	ldr	r2, [r7, #4]
     426:	69fb      	ldr	r3, [r7, #28]
     428:	429a      	cmp	r2, r3
     42a:	d103      	bne.n	434 <long_division+0xa2>
     42c:	683a      	ldr	r2, [r7, #0]
     42e:	69bb      	ldr	r3, [r7, #24]
     430:	429a      	cmp	r2, r3
     432:	d811      	bhi.n	458 <long_division+0xc6>
			r = r - d;
     434:	69b9      	ldr	r1, [r7, #24]
     436:	69fa      	ldr	r2, [r7, #28]
     438:	683b      	ldr	r3, [r7, #0]
     43a:	687c      	ldr	r4, [r7, #4]
     43c:	1ac9      	subs	r1, r1, r3
     43e:	41a2      	sbcs	r2, r4
     440:	000b      	movs	r3, r1
     442:	0014      	movs	r4, r2
     444:	61bb      	str	r3, [r7, #24]
     446:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     448:	6a3a      	ldr	r2, [r7, #32]
     44a:	693b      	ldr	r3, [r7, #16]
     44c:	4313      	orrs	r3, r2
     44e:	623b      	str	r3, [r7, #32]
     450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     452:	697b      	ldr	r3, [r7, #20]
     454:	4313      	orrs	r3, r2
     456:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
     458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     45a:	3b01      	subs	r3, #1
     45c:	62fb      	str	r3, [r7, #44]	; 0x2c
     45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     460:	2b00      	cmp	r3, #0
     462:	daa8      	bge.n	3b6 <long_division+0x24>
		}
	}

	return q;
     464:	6a3b      	ldr	r3, [r7, #32]
     466:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     468:	0018      	movs	r0, r3
     46a:	0021      	movs	r1, r4
     46c:	46bd      	mov	sp, r7
     46e:	b00d      	add	sp, #52	; 0x34
     470:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000472 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     472:	b580      	push	{r7, lr}
     474:	b086      	sub	sp, #24
     476:	af00      	add	r7, sp, #0
     478:	60f8      	str	r0, [r7, #12]
     47a:	60b9      	str	r1, [r7, #8]
     47c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     47e:	2316      	movs	r3, #22
     480:	18fb      	adds	r3, r7, r3
     482:	2200      	movs	r2, #0
     484:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     486:	68bb      	ldr	r3, [r7, #8]
     488:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     48a:	68bb      	ldr	r3, [r7, #8]
     48c:	085a      	lsrs	r2, r3, #1
     48e:	68fb      	ldr	r3, [r7, #12]
     490:	429a      	cmp	r2, r3
     492:	d201      	bcs.n	498 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     494:	2340      	movs	r3, #64	; 0x40
     496:	e026      	b.n	4e6 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     498:	68bb      	ldr	r3, [r7, #8]
     49a:	085b      	lsrs	r3, r3, #1
     49c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     49e:	e00a      	b.n	4b6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     4a0:	693a      	ldr	r2, [r7, #16]
     4a2:	68fb      	ldr	r3, [r7, #12]
     4a4:	1ad3      	subs	r3, r2, r3
     4a6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     4a8:	2316      	movs	r3, #22
     4aa:	18fb      	adds	r3, r7, r3
     4ac:	881a      	ldrh	r2, [r3, #0]
     4ae:	2316      	movs	r3, #22
     4b0:	18fb      	adds	r3, r7, r3
     4b2:	3201      	adds	r2, #1
     4b4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     4b6:	693a      	ldr	r2, [r7, #16]
     4b8:	68fb      	ldr	r3, [r7, #12]
     4ba:	429a      	cmp	r2, r3
     4bc:	d2f0      	bcs.n	4a0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     4be:	2316      	movs	r3, #22
     4c0:	18fb      	adds	r3, r7, r3
     4c2:	2216      	movs	r2, #22
     4c4:	18ba      	adds	r2, r7, r2
     4c6:	8812      	ldrh	r2, [r2, #0]
     4c8:	3a01      	subs	r2, #1
     4ca:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     4cc:	2316      	movs	r3, #22
     4ce:	18fb      	adds	r3, r7, r3
     4d0:	881b      	ldrh	r3, [r3, #0]
     4d2:	2bff      	cmp	r3, #255	; 0xff
     4d4:	d901      	bls.n	4da <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4d6:	2340      	movs	r3, #64	; 0x40
     4d8:	e005      	b.n	4e6 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	2216      	movs	r2, #22
     4de:	18ba      	adds	r2, r7, r2
     4e0:	8812      	ldrh	r2, [r2, #0]
     4e2:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     4e4:	2300      	movs	r3, #0
	}
}
     4e6:	0018      	movs	r0, r3
     4e8:	46bd      	mov	sp, r7
     4ea:	b006      	add	sp, #24
     4ec:	bd80      	pop	{r7, pc}
	...

000004f0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f2:	b0a1      	sub	sp, #132	; 0x84
     4f4:	af00      	add	r7, sp, #0
     4f6:	64f8      	str	r0, [r7, #76]	; 0x4c
     4f8:	64b9      	str	r1, [r7, #72]	; 0x48
     4fa:	647a      	str	r2, [r7, #68]	; 0x44
     4fc:	2243      	movs	r2, #67	; 0x43
     4fe:	18ba      	adds	r2, r7, r2
     500:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     502:	2300      	movs	r3, #0
     504:	2400      	movs	r4, #0
     506:	673b      	str	r3, [r7, #112]	; 0x70
     508:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     50a:	2300      	movs	r3, #0
     50c:	2400      	movs	r4, #0
     50e:	66bb      	str	r3, [r7, #104]	; 0x68
     510:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     512:	2300      	movs	r3, #0
     514:	2400      	movs	r4, #0
     516:	67bb      	str	r3, [r7, #120]	; 0x78
     518:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     51a:	2300      	movs	r3, #0
     51c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     51e:	2358      	movs	r3, #88	; 0x58
     520:	2240      	movs	r2, #64	; 0x40
     522:	4694      	mov	ip, r2
     524:	44bc      	add	ip, r7
     526:	4463      	add	r3, ip
     528:	781a      	ldrb	r2, [r3, #0]
     52a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     52c:	435a      	muls	r2, r3
     52e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     530:	429a      	cmp	r2, r3
     532:	d901      	bls.n	538 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     534:	2340      	movs	r3, #64	; 0x40
     536:	e0b3      	b.n	6a0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     538:	2343      	movs	r3, #67	; 0x43
     53a:	18fb      	adds	r3, r7, r3
     53c:	781b      	ldrb	r3, [r3, #0]
     53e:	2b00      	cmp	r3, #0
     540:	d13d      	bne.n	5be <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     542:	2358      	movs	r3, #88	; 0x58
     544:	2240      	movs	r2, #64	; 0x40
     546:	4694      	mov	ip, r2
     548:	44bc      	add	ip, r7
     54a:	4463      	add	r3, ip
     54c:	781b      	ldrb	r3, [r3, #0]
     54e:	b2db      	uxtb	r3, r3
     550:	613b      	str	r3, [r7, #16]
     552:	2300      	movs	r3, #0
     554:	617b      	str	r3, [r7, #20]
     556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     558:	60bb      	str	r3, [r7, #8]
     55a:	2300      	movs	r3, #0
     55c:	60fb      	str	r3, [r7, #12]
     55e:	4c52      	ldr	r4, [pc, #328]	; (6a8 <_sercom_get_async_baud_val+0x1b8>)
     560:	68ba      	ldr	r2, [r7, #8]
     562:	68fb      	ldr	r3, [r7, #12]
     564:	6938      	ldr	r0, [r7, #16]
     566:	6979      	ldr	r1, [r7, #20]
     568:	47a0      	blx	r4
     56a:	0003      	movs	r3, r0
     56c:	000c      	movs	r4, r1
     56e:	001b      	movs	r3, r3
     570:	65fb      	str	r3, [r7, #92]	; 0x5c
     572:	2300      	movs	r3, #0
     574:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     578:	603b      	str	r3, [r7, #0]
     57a:	2300      	movs	r3, #0
     57c:	607b      	str	r3, [r7, #4]
     57e:	6db8      	ldr	r0, [r7, #88]	; 0x58
     580:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     582:	683a      	ldr	r2, [r7, #0]
     584:	687b      	ldr	r3, [r7, #4]
     586:	4c49      	ldr	r4, [pc, #292]	; (6ac <_sercom_get_async_baud_val+0x1bc>)
     588:	47a0      	blx	r4
     58a:	0003      	movs	r3, r0
     58c:	000c      	movs	r4, r1
     58e:	673b      	str	r3, [r7, #112]	; 0x70
     590:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     592:	2100      	movs	r1, #0
     594:	2201      	movs	r2, #1
     596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     598:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     59a:	1ac9      	subs	r1, r1, r3
     59c:	41a2      	sbcs	r2, r4
     59e:	000b      	movs	r3, r1
     5a0:	0014      	movs	r4, r2
     5a2:	66bb      	str	r3, [r7, #104]	; 0x68
     5a4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     5a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     5a8:	0c1b      	lsrs	r3, r3, #16
     5aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     5ac:	0416      	lsls	r6, r2, #16
     5ae:	431e      	orrs	r6, r3
     5b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     5b2:	041d      	lsls	r5, r3, #16
     5b4:	0033      	movs	r3, r6
     5b6:	67bb      	str	r3, [r7, #120]	; 0x78
     5b8:	2300      	movs	r3, #0
     5ba:	67fb      	str	r3, [r7, #124]	; 0x7c
     5bc:	e06a      	b.n	694 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     5be:	2343      	movs	r3, #67	; 0x43
     5c0:	18fb      	adds	r3, r7, r3
     5c2:	781b      	ldrb	r3, [r3, #0]
     5c4:	2b01      	cmp	r3, #1
     5c6:	d165      	bne.n	694 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     5c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     5ca:	633b      	str	r3, [r7, #48]	; 0x30
     5cc:	2300      	movs	r3, #0
     5ce:	637b      	str	r3, [r7, #52]	; 0x34
     5d0:	2358      	movs	r3, #88	; 0x58
     5d2:	2240      	movs	r2, #64	; 0x40
     5d4:	4694      	mov	ip, r2
     5d6:	44bc      	add	ip, r7
     5d8:	4463      	add	r3, ip
     5da:	781b      	ldrb	r3, [r3, #0]
     5dc:	b2db      	uxtb	r3, r3
     5de:	62bb      	str	r3, [r7, #40]	; 0x28
     5e0:	2300      	movs	r3, #0
     5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
     5e4:	4c30      	ldr	r4, [pc, #192]	; (6a8 <_sercom_get_async_baud_val+0x1b8>)
     5e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     5ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
     5ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
     5ee:	47a0      	blx	r4
     5f0:	0003      	movs	r3, r0
     5f2:	000c      	movs	r4, r1
     5f4:	65bb      	str	r3, [r7, #88]	; 0x58
     5f6:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     5f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     5fa:	623b      	str	r3, [r7, #32]
     5fc:	2300      	movs	r3, #0
     5fe:	627b      	str	r3, [r7, #36]	; 0x24
     600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     602:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     604:	001a      	movs	r2, r3
     606:	0023      	movs	r3, r4
     608:	6a38      	ldr	r0, [r7, #32]
     60a:	6a79      	ldr	r1, [r7, #36]	; 0x24
     60c:	4c27      	ldr	r4, [pc, #156]	; (6ac <_sercom_get_async_baud_val+0x1bc>)
     60e:	47a0      	blx	r4
     610:	0003      	movs	r3, r0
     612:	000c      	movs	r4, r1
     614:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     616:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     618:	2380      	movs	r3, #128	; 0x80
     61a:	019b      	lsls	r3, r3, #6
     61c:	429a      	cmp	r2, r3
     61e:	d901      	bls.n	624 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     620:	2340      	movs	r3, #64	; 0x40
     622:	e03d      	b.n	6a0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     626:	61bb      	str	r3, [r7, #24]
     628:	2300      	movs	r3, #0
     62a:	61fb      	str	r3, [r7, #28]
     62c:	69b9      	ldr	r1, [r7, #24]
     62e:	69fa      	ldr	r2, [r7, #28]
     630:	000b      	movs	r3, r1
     632:	0f5b      	lsrs	r3, r3, #29
     634:	0010      	movs	r0, r2
     636:	00c0      	lsls	r0, r0, #3
     638:	63f8      	str	r0, [r7, #60]	; 0x3c
     63a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     63c:	4318      	orrs	r0, r3
     63e:	63f8      	str	r0, [r7, #60]	; 0x3c
     640:	000b      	movs	r3, r1
     642:	00db      	lsls	r3, r3, #3
     644:	63bb      	str	r3, [r7, #56]	; 0x38
     646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     648:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     64a:	001a      	movs	r2, r3
     64c:	0023      	movs	r3, r4
     64e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     652:	4c16      	ldr	r4, [pc, #88]	; (6ac <_sercom_get_async_baud_val+0x1bc>)
     654:	47a0      	blx	r4
     656:	0003      	movs	r3, r0
     658:	000c      	movs	r4, r1
     65a:	65bb      	str	r3, [r7, #88]	; 0x58
     65c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     65e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     660:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     662:	b2d9      	uxtb	r1, r3
     664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     666:	b2db      	uxtb	r3, r3
     668:	00db      	lsls	r3, r3, #3
     66a:	b2da      	uxtb	r2, r3
     66c:	2317      	movs	r3, #23
     66e:	2040      	movs	r0, #64	; 0x40
     670:	4684      	mov	ip, r0
     672:	44bc      	add	ip, r7
     674:	4463      	add	r3, ip
     676:	1a8a      	subs	r2, r1, r2
     678:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     67a:	2317      	movs	r3, #23
     67c:	2240      	movs	r2, #64	; 0x40
     67e:	4694      	mov	ip, r2
     680:	44bc      	add	ip, r7
     682:	4463      	add	r3, ip
     684:	781b      	ldrb	r3, [r3, #0]
     686:	035b      	lsls	r3, r3, #13
     688:	001a      	movs	r2, r3
     68a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     68c:	4313      	orrs	r3, r2
     68e:	67bb      	str	r3, [r7, #120]	; 0x78
     690:	2300      	movs	r3, #0
     692:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     696:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     698:	b29a      	uxth	r2, r3
     69a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     69c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     69e:	2300      	movs	r3, #0
}
     6a0:	0018      	movs	r0, r3
     6a2:	46bd      	mov	sp, r7
     6a4:	b021      	add	sp, #132	; 0x84
     6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a8:	00005759 	.word	0x00005759
     6ac:	00000393 	.word	0x00000393

000006b0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6b0:	b580      	push	{r7, lr}
     6b2:	b084      	sub	sp, #16
     6b4:	af00      	add	r7, sp, #0
     6b6:	0002      	movs	r2, r0
     6b8:	1dfb      	adds	r3, r7, #7
     6ba:	701a      	strb	r2, [r3, #0]
     6bc:	1dbb      	adds	r3, r7, #6
     6be:	1c0a      	adds	r2, r1, #0
     6c0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     6c2:	4b1a      	ldr	r3, [pc, #104]	; (72c <sercom_set_gclk_generator+0x7c>)
     6c4:	781b      	ldrb	r3, [r3, #0]
     6c6:	2201      	movs	r2, #1
     6c8:	4053      	eors	r3, r2
     6ca:	b2db      	uxtb	r3, r3
     6cc:	2b00      	cmp	r3, #0
     6ce:	d103      	bne.n	6d8 <sercom_set_gclk_generator+0x28>
     6d0:	1dbb      	adds	r3, r7, #6
     6d2:	781b      	ldrb	r3, [r3, #0]
     6d4:	2b00      	cmp	r3, #0
     6d6:	d01b      	beq.n	710 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     6d8:	230c      	movs	r3, #12
     6da:	18fb      	adds	r3, r7, r3
     6dc:	0018      	movs	r0, r3
     6de:	4b14      	ldr	r3, [pc, #80]	; (730 <sercom_set_gclk_generator+0x80>)
     6e0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     6e2:	230c      	movs	r3, #12
     6e4:	18fb      	adds	r3, r7, r3
     6e6:	1dfa      	adds	r2, r7, #7
     6e8:	7812      	ldrb	r2, [r2, #0]
     6ea:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6ec:	230c      	movs	r3, #12
     6ee:	18fb      	adds	r3, r7, r3
     6f0:	0019      	movs	r1, r3
     6f2:	2013      	movs	r0, #19
     6f4:	4b0f      	ldr	r3, [pc, #60]	; (734 <sercom_set_gclk_generator+0x84>)
     6f6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6f8:	2013      	movs	r0, #19
     6fa:	4b0f      	ldr	r3, [pc, #60]	; (738 <sercom_set_gclk_generator+0x88>)
     6fc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     6fe:	4b0b      	ldr	r3, [pc, #44]	; (72c <sercom_set_gclk_generator+0x7c>)
     700:	1dfa      	adds	r2, r7, #7
     702:	7812      	ldrb	r2, [r2, #0]
     704:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     706:	4b09      	ldr	r3, [pc, #36]	; (72c <sercom_set_gclk_generator+0x7c>)
     708:	2201      	movs	r2, #1
     70a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     70c:	2300      	movs	r3, #0
     70e:	e008      	b.n	722 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     710:	4b06      	ldr	r3, [pc, #24]	; (72c <sercom_set_gclk_generator+0x7c>)
     712:	785b      	ldrb	r3, [r3, #1]
     714:	1dfa      	adds	r2, r7, #7
     716:	7812      	ldrb	r2, [r2, #0]
     718:	429a      	cmp	r2, r3
     71a:	d101      	bne.n	720 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     71c:	2300      	movs	r3, #0
     71e:	e000      	b.n	722 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     720:	231d      	movs	r3, #29
}
     722:	0018      	movs	r0, r3
     724:	46bd      	mov	sp, r7
     726:	b004      	add	sp, #16
     728:	bd80      	pop	{r7, pc}
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	20000208 	.word	0x20000208
     730:	0000037d 	.word	0x0000037d
     734:	000052e5 	.word	0x000052e5
     738:	00005329 	.word	0x00005329

0000073c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     73c:	b580      	push	{r7, lr}
     73e:	b082      	sub	sp, #8
     740:	af00      	add	r7, sp, #0
     742:	6078      	str	r0, [r7, #4]
     744:	000a      	movs	r2, r1
     746:	1cfb      	adds	r3, r7, #3
     748:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	4a4d      	ldr	r2, [pc, #308]	; (884 <_sercom_get_default_pad+0x148>)
     74e:	4293      	cmp	r3, r2
     750:	d03f      	beq.n	7d2 <_sercom_get_default_pad+0x96>
     752:	4a4c      	ldr	r2, [pc, #304]	; (884 <_sercom_get_default_pad+0x148>)
     754:	4293      	cmp	r3, r2
     756:	d806      	bhi.n	766 <_sercom_get_default_pad+0x2a>
     758:	4a4b      	ldr	r2, [pc, #300]	; (888 <_sercom_get_default_pad+0x14c>)
     75a:	4293      	cmp	r3, r2
     75c:	d00f      	beq.n	77e <_sercom_get_default_pad+0x42>
     75e:	4a4b      	ldr	r2, [pc, #300]	; (88c <_sercom_get_default_pad+0x150>)
     760:	4293      	cmp	r3, r2
     762:	d021      	beq.n	7a8 <_sercom_get_default_pad+0x6c>
     764:	e089      	b.n	87a <_sercom_get_default_pad+0x13e>
     766:	4a4a      	ldr	r2, [pc, #296]	; (890 <_sercom_get_default_pad+0x154>)
     768:	4293      	cmp	r3, r2
     76a:	d100      	bne.n	76e <_sercom_get_default_pad+0x32>
     76c:	e05b      	b.n	826 <_sercom_get_default_pad+0xea>
     76e:	4a49      	ldr	r2, [pc, #292]	; (894 <_sercom_get_default_pad+0x158>)
     770:	4293      	cmp	r3, r2
     772:	d100      	bne.n	776 <_sercom_get_default_pad+0x3a>
     774:	e06c      	b.n	850 <_sercom_get_default_pad+0x114>
     776:	4a48      	ldr	r2, [pc, #288]	; (898 <_sercom_get_default_pad+0x15c>)
     778:	4293      	cmp	r3, r2
     77a:	d03f      	beq.n	7fc <_sercom_get_default_pad+0xc0>
     77c:	e07d      	b.n	87a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     77e:	1cfb      	adds	r3, r7, #3
     780:	781b      	ldrb	r3, [r3, #0]
     782:	2b01      	cmp	r3, #1
     784:	d00a      	beq.n	79c <_sercom_get_default_pad+0x60>
     786:	dc02      	bgt.n	78e <_sercom_get_default_pad+0x52>
     788:	2b00      	cmp	r3, #0
     78a:	d005      	beq.n	798 <_sercom_get_default_pad+0x5c>
     78c:	e075      	b.n	87a <_sercom_get_default_pad+0x13e>
     78e:	2b02      	cmp	r3, #2
     790:	d006      	beq.n	7a0 <_sercom_get_default_pad+0x64>
     792:	2b03      	cmp	r3, #3
     794:	d006      	beq.n	7a4 <_sercom_get_default_pad+0x68>
     796:	e070      	b.n	87a <_sercom_get_default_pad+0x13e>
     798:	4b40      	ldr	r3, [pc, #256]	; (89c <_sercom_get_default_pad+0x160>)
     79a:	e06f      	b.n	87c <_sercom_get_default_pad+0x140>
     79c:	4b40      	ldr	r3, [pc, #256]	; (8a0 <_sercom_get_default_pad+0x164>)
     79e:	e06d      	b.n	87c <_sercom_get_default_pad+0x140>
     7a0:	4b40      	ldr	r3, [pc, #256]	; (8a4 <_sercom_get_default_pad+0x168>)
     7a2:	e06b      	b.n	87c <_sercom_get_default_pad+0x140>
     7a4:	4b40      	ldr	r3, [pc, #256]	; (8a8 <_sercom_get_default_pad+0x16c>)
     7a6:	e069      	b.n	87c <_sercom_get_default_pad+0x140>
     7a8:	1cfb      	adds	r3, r7, #3
     7aa:	781b      	ldrb	r3, [r3, #0]
     7ac:	2b01      	cmp	r3, #1
     7ae:	d00a      	beq.n	7c6 <_sercom_get_default_pad+0x8a>
     7b0:	dc02      	bgt.n	7b8 <_sercom_get_default_pad+0x7c>
     7b2:	2b00      	cmp	r3, #0
     7b4:	d005      	beq.n	7c2 <_sercom_get_default_pad+0x86>
     7b6:	e060      	b.n	87a <_sercom_get_default_pad+0x13e>
     7b8:	2b02      	cmp	r3, #2
     7ba:	d006      	beq.n	7ca <_sercom_get_default_pad+0x8e>
     7bc:	2b03      	cmp	r3, #3
     7be:	d006      	beq.n	7ce <_sercom_get_default_pad+0x92>
     7c0:	e05b      	b.n	87a <_sercom_get_default_pad+0x13e>
     7c2:	2303      	movs	r3, #3
     7c4:	e05a      	b.n	87c <_sercom_get_default_pad+0x140>
     7c6:	4b39      	ldr	r3, [pc, #228]	; (8ac <_sercom_get_default_pad+0x170>)
     7c8:	e058      	b.n	87c <_sercom_get_default_pad+0x140>
     7ca:	4b39      	ldr	r3, [pc, #228]	; (8b0 <_sercom_get_default_pad+0x174>)
     7cc:	e056      	b.n	87c <_sercom_get_default_pad+0x140>
     7ce:	4b39      	ldr	r3, [pc, #228]	; (8b4 <_sercom_get_default_pad+0x178>)
     7d0:	e054      	b.n	87c <_sercom_get_default_pad+0x140>
     7d2:	1cfb      	adds	r3, r7, #3
     7d4:	781b      	ldrb	r3, [r3, #0]
     7d6:	2b01      	cmp	r3, #1
     7d8:	d00a      	beq.n	7f0 <_sercom_get_default_pad+0xb4>
     7da:	dc02      	bgt.n	7e2 <_sercom_get_default_pad+0xa6>
     7dc:	2b00      	cmp	r3, #0
     7de:	d005      	beq.n	7ec <_sercom_get_default_pad+0xb0>
     7e0:	e04b      	b.n	87a <_sercom_get_default_pad+0x13e>
     7e2:	2b02      	cmp	r3, #2
     7e4:	d006      	beq.n	7f4 <_sercom_get_default_pad+0xb8>
     7e6:	2b03      	cmp	r3, #3
     7e8:	d006      	beq.n	7f8 <_sercom_get_default_pad+0xbc>
     7ea:	e046      	b.n	87a <_sercom_get_default_pad+0x13e>
     7ec:	4b32      	ldr	r3, [pc, #200]	; (8b8 <_sercom_get_default_pad+0x17c>)
     7ee:	e045      	b.n	87c <_sercom_get_default_pad+0x140>
     7f0:	4b32      	ldr	r3, [pc, #200]	; (8bc <_sercom_get_default_pad+0x180>)
     7f2:	e043      	b.n	87c <_sercom_get_default_pad+0x140>
     7f4:	4b32      	ldr	r3, [pc, #200]	; (8c0 <_sercom_get_default_pad+0x184>)
     7f6:	e041      	b.n	87c <_sercom_get_default_pad+0x140>
     7f8:	4b32      	ldr	r3, [pc, #200]	; (8c4 <_sercom_get_default_pad+0x188>)
     7fa:	e03f      	b.n	87c <_sercom_get_default_pad+0x140>
     7fc:	1cfb      	adds	r3, r7, #3
     7fe:	781b      	ldrb	r3, [r3, #0]
     800:	2b01      	cmp	r3, #1
     802:	d00a      	beq.n	81a <_sercom_get_default_pad+0xde>
     804:	dc02      	bgt.n	80c <_sercom_get_default_pad+0xd0>
     806:	2b00      	cmp	r3, #0
     808:	d005      	beq.n	816 <_sercom_get_default_pad+0xda>
     80a:	e036      	b.n	87a <_sercom_get_default_pad+0x13e>
     80c:	2b02      	cmp	r3, #2
     80e:	d006      	beq.n	81e <_sercom_get_default_pad+0xe2>
     810:	2b03      	cmp	r3, #3
     812:	d006      	beq.n	822 <_sercom_get_default_pad+0xe6>
     814:	e031      	b.n	87a <_sercom_get_default_pad+0x13e>
     816:	4b2c      	ldr	r3, [pc, #176]	; (8c8 <_sercom_get_default_pad+0x18c>)
     818:	e030      	b.n	87c <_sercom_get_default_pad+0x140>
     81a:	4b2c      	ldr	r3, [pc, #176]	; (8cc <_sercom_get_default_pad+0x190>)
     81c:	e02e      	b.n	87c <_sercom_get_default_pad+0x140>
     81e:	4b2c      	ldr	r3, [pc, #176]	; (8d0 <_sercom_get_default_pad+0x194>)
     820:	e02c      	b.n	87c <_sercom_get_default_pad+0x140>
     822:	4b2c      	ldr	r3, [pc, #176]	; (8d4 <_sercom_get_default_pad+0x198>)
     824:	e02a      	b.n	87c <_sercom_get_default_pad+0x140>
     826:	1cfb      	adds	r3, r7, #3
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	2b01      	cmp	r3, #1
     82c:	d00a      	beq.n	844 <_sercom_get_default_pad+0x108>
     82e:	dc02      	bgt.n	836 <_sercom_get_default_pad+0xfa>
     830:	2b00      	cmp	r3, #0
     832:	d005      	beq.n	840 <_sercom_get_default_pad+0x104>
     834:	e021      	b.n	87a <_sercom_get_default_pad+0x13e>
     836:	2b02      	cmp	r3, #2
     838:	d006      	beq.n	848 <_sercom_get_default_pad+0x10c>
     83a:	2b03      	cmp	r3, #3
     83c:	d006      	beq.n	84c <_sercom_get_default_pad+0x110>
     83e:	e01c      	b.n	87a <_sercom_get_default_pad+0x13e>
     840:	4b25      	ldr	r3, [pc, #148]	; (8d8 <_sercom_get_default_pad+0x19c>)
     842:	e01b      	b.n	87c <_sercom_get_default_pad+0x140>
     844:	4b25      	ldr	r3, [pc, #148]	; (8dc <_sercom_get_default_pad+0x1a0>)
     846:	e019      	b.n	87c <_sercom_get_default_pad+0x140>
     848:	4b25      	ldr	r3, [pc, #148]	; (8e0 <_sercom_get_default_pad+0x1a4>)
     84a:	e017      	b.n	87c <_sercom_get_default_pad+0x140>
     84c:	4b25      	ldr	r3, [pc, #148]	; (8e4 <_sercom_get_default_pad+0x1a8>)
     84e:	e015      	b.n	87c <_sercom_get_default_pad+0x140>
     850:	1cfb      	adds	r3, r7, #3
     852:	781b      	ldrb	r3, [r3, #0]
     854:	2b01      	cmp	r3, #1
     856:	d00a      	beq.n	86e <_sercom_get_default_pad+0x132>
     858:	dc02      	bgt.n	860 <_sercom_get_default_pad+0x124>
     85a:	2b00      	cmp	r3, #0
     85c:	d005      	beq.n	86a <_sercom_get_default_pad+0x12e>
     85e:	e00c      	b.n	87a <_sercom_get_default_pad+0x13e>
     860:	2b02      	cmp	r3, #2
     862:	d006      	beq.n	872 <_sercom_get_default_pad+0x136>
     864:	2b03      	cmp	r3, #3
     866:	d006      	beq.n	876 <_sercom_get_default_pad+0x13a>
     868:	e007      	b.n	87a <_sercom_get_default_pad+0x13e>
     86a:	4b1f      	ldr	r3, [pc, #124]	; (8e8 <_sercom_get_default_pad+0x1ac>)
     86c:	e006      	b.n	87c <_sercom_get_default_pad+0x140>
     86e:	4b1f      	ldr	r3, [pc, #124]	; (8ec <_sercom_get_default_pad+0x1b0>)
     870:	e004      	b.n	87c <_sercom_get_default_pad+0x140>
     872:	4b1f      	ldr	r3, [pc, #124]	; (8f0 <_sercom_get_default_pad+0x1b4>)
     874:	e002      	b.n	87c <_sercom_get_default_pad+0x140>
     876:	4b1f      	ldr	r3, [pc, #124]	; (8f4 <_sercom_get_default_pad+0x1b8>)
     878:	e000      	b.n	87c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     87a:	2300      	movs	r3, #0
}
     87c:	0018      	movs	r0, r3
     87e:	46bd      	mov	sp, r7
     880:	b002      	add	sp, #8
     882:	bd80      	pop	{r7, pc}
     884:	42001000 	.word	0x42001000
     888:	42000800 	.word	0x42000800
     88c:	42000c00 	.word	0x42000c00
     890:	42001800 	.word	0x42001800
     894:	42001c00 	.word	0x42001c00
     898:	42001400 	.word	0x42001400
     89c:	00040003 	.word	0x00040003
     8a0:	00050003 	.word	0x00050003
     8a4:	00060003 	.word	0x00060003
     8a8:	00070003 	.word	0x00070003
     8ac:	00010003 	.word	0x00010003
     8b0:	001e0003 	.word	0x001e0003
     8b4:	001f0003 	.word	0x001f0003
     8b8:	00080003 	.word	0x00080003
     8bc:	00090003 	.word	0x00090003
     8c0:	000a0003 	.word	0x000a0003
     8c4:	000b0003 	.word	0x000b0003
     8c8:	00100003 	.word	0x00100003
     8cc:	00110003 	.word	0x00110003
     8d0:	00120003 	.word	0x00120003
     8d4:	00130003 	.word	0x00130003
     8d8:	000c0003 	.word	0x000c0003
     8dc:	000d0003 	.word	0x000d0003
     8e0:	000e0003 	.word	0x000e0003
     8e4:	000f0003 	.word	0x000f0003
     8e8:	00160003 	.word	0x00160003
     8ec:	00170003 	.word	0x00170003
     8f0:	00180003 	.word	0x00180003
     8f4:	00190003 	.word	0x00190003

000008f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     8f8:	b590      	push	{r4, r7, lr}
     8fa:	b08b      	sub	sp, #44	; 0x2c
     8fc:	af00      	add	r7, sp, #0
     8fe:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     900:	230c      	movs	r3, #12
     902:	18fb      	adds	r3, r7, r3
     904:	4a0f      	ldr	r2, [pc, #60]	; (944 <_sercom_get_sercom_inst_index+0x4c>)
     906:	ca13      	ldmia	r2!, {r0, r1, r4}
     908:	c313      	stmia	r3!, {r0, r1, r4}
     90a:	ca13      	ldmia	r2!, {r0, r1, r4}
     90c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     90e:	2300      	movs	r3, #0
     910:	627b      	str	r3, [r7, #36]	; 0x24
     912:	e00e      	b.n	932 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     914:	230c      	movs	r3, #12
     916:	18fb      	adds	r3, r7, r3
     918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     91a:	0092      	lsls	r2, r2, #2
     91c:	58d3      	ldr	r3, [r2, r3]
     91e:	001a      	movs	r2, r3
     920:	687b      	ldr	r3, [r7, #4]
     922:	429a      	cmp	r2, r3
     924:	d102      	bne.n	92c <_sercom_get_sercom_inst_index+0x34>
			return i;
     926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     928:	b2db      	uxtb	r3, r3
     92a:	e006      	b.n	93a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     92e:	3301      	adds	r3, #1
     930:	627b      	str	r3, [r7, #36]	; 0x24
     932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     934:	2b05      	cmp	r3, #5
     936:	d9ed      	bls.n	914 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     938:	2300      	movs	r3, #0
}
     93a:	0018      	movs	r0, r3
     93c:	46bd      	mov	sp, r7
     93e:	b00b      	add	sp, #44	; 0x2c
     940:	bd90      	pop	{r4, r7, pc}
     942:	46c0      	nop			; (mov r8, r8)
     944:	000061f8 	.word	0x000061f8

00000948 <system_pinmux_get_group_from_gpio_pin>:
{
     948:	b580      	push	{r7, lr}
     94a:	b084      	sub	sp, #16
     94c:	af00      	add	r7, sp, #0
     94e:	0002      	movs	r2, r0
     950:	1dfb      	adds	r3, r7, #7
     952:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     954:	230f      	movs	r3, #15
     956:	18fb      	adds	r3, r7, r3
     958:	1dfa      	adds	r2, r7, #7
     95a:	7812      	ldrb	r2, [r2, #0]
     95c:	09d2      	lsrs	r2, r2, #7
     95e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     960:	230e      	movs	r3, #14
     962:	18fb      	adds	r3, r7, r3
     964:	1dfa      	adds	r2, r7, #7
     966:	7812      	ldrb	r2, [r2, #0]
     968:	0952      	lsrs	r2, r2, #5
     96a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     96c:	4b0d      	ldr	r3, [pc, #52]	; (9a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     96e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     970:	230f      	movs	r3, #15
     972:	18fb      	adds	r3, r7, r3
     974:	781b      	ldrb	r3, [r3, #0]
     976:	2b00      	cmp	r3, #0
     978:	d10f      	bne.n	99a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     97a:	230f      	movs	r3, #15
     97c:	18fb      	adds	r3, r7, r3
     97e:	781b      	ldrb	r3, [r3, #0]
     980:	009b      	lsls	r3, r3, #2
     982:	2210      	movs	r2, #16
     984:	4694      	mov	ip, r2
     986:	44bc      	add	ip, r7
     988:	4463      	add	r3, ip
     98a:	3b08      	subs	r3, #8
     98c:	681a      	ldr	r2, [r3, #0]
     98e:	230e      	movs	r3, #14
     990:	18fb      	adds	r3, r7, r3
     992:	781b      	ldrb	r3, [r3, #0]
     994:	01db      	lsls	r3, r3, #7
     996:	18d3      	adds	r3, r2, r3
     998:	e000      	b.n	99c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     99a:	2300      	movs	r3, #0
}
     99c:	0018      	movs	r0, r3
     99e:	46bd      	mov	sp, r7
     9a0:	b004      	add	sp, #16
     9a2:	bd80      	pop	{r7, pc}
     9a4:	41004400 	.word	0x41004400

000009a8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     9a8:	b580      	push	{r7, lr}
     9aa:	b088      	sub	sp, #32
     9ac:	af00      	add	r7, sp, #0
     9ae:	60f8      	str	r0, [r7, #12]
     9b0:	60b9      	str	r1, [r7, #8]
     9b2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     9b4:	2300      	movs	r3, #0
     9b6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     9b8:	687b      	ldr	r3, [r7, #4]
     9ba:	78db      	ldrb	r3, [r3, #3]
     9bc:	2201      	movs	r2, #1
     9be:	4053      	eors	r3, r2
     9c0:	b2db      	uxtb	r3, r3
     9c2:	2b00      	cmp	r3, #0
     9c4:	d035      	beq.n	a32 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	781b      	ldrb	r3, [r3, #0]
     9ca:	2b80      	cmp	r3, #128	; 0x80
     9cc:	d00b      	beq.n	9e6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
     9ce:	69fb      	ldr	r3, [r7, #28]
     9d0:	2280      	movs	r2, #128	; 0x80
     9d2:	0252      	lsls	r2, r2, #9
     9d4:	4313      	orrs	r3, r2
     9d6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     9d8:	687b      	ldr	r3, [r7, #4]
     9da:	781b      	ldrb	r3, [r3, #0]
     9dc:	061b      	lsls	r3, r3, #24
     9de:	001a      	movs	r2, r3
     9e0:	69fb      	ldr	r3, [r7, #28]
     9e2:	4313      	orrs	r3, r2
     9e4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	785b      	ldrb	r3, [r3, #1]
     9ea:	2b00      	cmp	r3, #0
     9ec:	d003      	beq.n	9f6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     9f2:	2b02      	cmp	r3, #2
     9f4:	d110      	bne.n	a18 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     9f6:	69fb      	ldr	r3, [r7, #28]
     9f8:	2280      	movs	r2, #128	; 0x80
     9fa:	0292      	lsls	r2, r2, #10
     9fc:	4313      	orrs	r3, r2
     9fe:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	789b      	ldrb	r3, [r3, #2]
     a04:	2b00      	cmp	r3, #0
     a06:	d004      	beq.n	a12 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     a08:	69fb      	ldr	r3, [r7, #28]
     a0a:	2280      	movs	r2, #128	; 0x80
     a0c:	02d2      	lsls	r2, r2, #11
     a0e:	4313      	orrs	r3, r2
     a10:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     a12:	68fb      	ldr	r3, [r7, #12]
     a14:	68ba      	ldr	r2, [r7, #8]
     a16:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     a18:	687b      	ldr	r3, [r7, #4]
     a1a:	785b      	ldrb	r3, [r3, #1]
     a1c:	2b01      	cmp	r3, #1
     a1e:	d003      	beq.n	a28 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     a20:	687b      	ldr	r3, [r7, #4]
     a22:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     a24:	2b02      	cmp	r3, #2
     a26:	d107      	bne.n	a38 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     a28:	69fb      	ldr	r3, [r7, #28]
     a2a:	4a22      	ldr	r2, [pc, #136]	; (ab4 <_system_pinmux_config+0x10c>)
     a2c:	4013      	ands	r3, r2
     a2e:	61fb      	str	r3, [r7, #28]
     a30:	e002      	b.n	a38 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     a32:	68fb      	ldr	r3, [r7, #12]
     a34:	68ba      	ldr	r2, [r7, #8]
     a36:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     a38:	68bb      	ldr	r3, [r7, #8]
     a3a:	041b      	lsls	r3, r3, #16
     a3c:	0c1b      	lsrs	r3, r3, #16
     a3e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
     a40:	68bb      	ldr	r3, [r7, #8]
     a42:	0c1b      	lsrs	r3, r3, #16
     a44:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     a46:	69ba      	ldr	r2, [r7, #24]
     a48:	69fb      	ldr	r3, [r7, #28]
     a4a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     a4c:	22a0      	movs	r2, #160	; 0xa0
     a4e:	05d2      	lsls	r2, r2, #23
     a50:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     a52:	68fb      	ldr	r3, [r7, #12]
     a54:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     a56:	697a      	ldr	r2, [r7, #20]
     a58:	69fb      	ldr	r3, [r7, #28]
     a5a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     a5c:	22d0      	movs	r2, #208	; 0xd0
     a5e:	0612      	lsls	r2, r2, #24
     a60:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     a62:	68fb      	ldr	r3, [r7, #12]
     a64:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	78db      	ldrb	r3, [r3, #3]
     a6a:	2201      	movs	r2, #1
     a6c:	4053      	eors	r3, r2
     a6e:	b2db      	uxtb	r3, r3
     a70:	2b00      	cmp	r3, #0
     a72:	d01a      	beq.n	aaa <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     a74:	69fa      	ldr	r2, [r7, #28]
     a76:	2380      	movs	r3, #128	; 0x80
     a78:	02db      	lsls	r3, r3, #11
     a7a:	4013      	ands	r3, r2
     a7c:	d00a      	beq.n	a94 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	789b      	ldrb	r3, [r3, #2]
     a82:	2b01      	cmp	r3, #1
     a84:	d103      	bne.n	a8e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
     a86:	68fb      	ldr	r3, [r7, #12]
     a88:	68ba      	ldr	r2, [r7, #8]
     a8a:	619a      	str	r2, [r3, #24]
     a8c:	e002      	b.n	a94 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
     a8e:	68fb      	ldr	r3, [r7, #12]
     a90:	68ba      	ldr	r2, [r7, #8]
     a92:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	785b      	ldrb	r3, [r3, #1]
     a98:	2b01      	cmp	r3, #1
     a9a:	d003      	beq.n	aa4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     aa0:	2b02      	cmp	r3, #2
     aa2:	d102      	bne.n	aaa <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     aa4:	68fb      	ldr	r3, [r7, #12]
     aa6:	68ba      	ldr	r2, [r7, #8]
     aa8:	609a      	str	r2, [r3, #8]
		}
	}
}
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	46bd      	mov	sp, r7
     aae:	b008      	add	sp, #32
     ab0:	bd80      	pop	{r7, pc}
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	fffbffff 	.word	0xfffbffff

00000ab8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     ab8:	b580      	push	{r7, lr}
     aba:	b084      	sub	sp, #16
     abc:	af00      	add	r7, sp, #0
     abe:	0002      	movs	r2, r0
     ac0:	6039      	str	r1, [r7, #0]
     ac2:	1dfb      	adds	r3, r7, #7
     ac4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     ac6:	1dfb      	adds	r3, r7, #7
     ac8:	781b      	ldrb	r3, [r3, #0]
     aca:	0018      	movs	r0, r3
     acc:	4b0a      	ldr	r3, [pc, #40]	; (af8 <system_pinmux_pin_set_config+0x40>)
     ace:	4798      	blx	r3
     ad0:	0003      	movs	r3, r0
     ad2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     ad4:	1dfb      	adds	r3, r7, #7
     ad6:	781b      	ldrb	r3, [r3, #0]
     ad8:	221f      	movs	r2, #31
     ada:	4013      	ands	r3, r2
     adc:	2201      	movs	r2, #1
     ade:	409a      	lsls	r2, r3
     ae0:	0013      	movs	r3, r2
     ae2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
     ae4:	683a      	ldr	r2, [r7, #0]
     ae6:	68b9      	ldr	r1, [r7, #8]
     ae8:	68fb      	ldr	r3, [r7, #12]
     aea:	0018      	movs	r0, r3
     aec:	4b03      	ldr	r3, [pc, #12]	; (afc <system_pinmux_pin_set_config+0x44>)
     aee:	4798      	blx	r3
}
     af0:	46c0      	nop			; (mov r8, r8)
     af2:	46bd      	mov	sp, r7
     af4:	b004      	add	sp, #16
     af6:	bd80      	pop	{r7, pc}
     af8:	00000949 	.word	0x00000949
     afc:	000009a9 	.word	0x000009a9

00000b00 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     b00:	b580      	push	{r7, lr}
     b02:	b082      	sub	sp, #8
     b04:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     b06:	4b2f      	ldr	r3, [pc, #188]	; (bc4 <Reset_Handler+0xc4>)
     b08:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     b0a:	4b2f      	ldr	r3, [pc, #188]	; (bc8 <Reset_Handler+0xc8>)
     b0c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     b0e:	687a      	ldr	r2, [r7, #4]
     b10:	683b      	ldr	r3, [r7, #0]
     b12:	429a      	cmp	r2, r3
     b14:	d00c      	beq.n	b30 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     b16:	e007      	b.n	b28 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     b18:	683b      	ldr	r3, [r7, #0]
     b1a:	1d1a      	adds	r2, r3, #4
     b1c:	603a      	str	r2, [r7, #0]
     b1e:	687a      	ldr	r2, [r7, #4]
     b20:	1d11      	adds	r1, r2, #4
     b22:	6079      	str	r1, [r7, #4]
     b24:	6812      	ldr	r2, [r2, #0]
     b26:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     b28:	683a      	ldr	r2, [r7, #0]
     b2a:	4b28      	ldr	r3, [pc, #160]	; (bcc <Reset_Handler+0xcc>)
     b2c:	429a      	cmp	r2, r3
     b2e:	d3f3      	bcc.n	b18 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     b30:	4b27      	ldr	r3, [pc, #156]	; (bd0 <Reset_Handler+0xd0>)
     b32:	603b      	str	r3, [r7, #0]
     b34:	e004      	b.n	b40 <Reset_Handler+0x40>
                *pDest++ = 0;
     b36:	683b      	ldr	r3, [r7, #0]
     b38:	1d1a      	adds	r2, r3, #4
     b3a:	603a      	str	r2, [r7, #0]
     b3c:	2200      	movs	r2, #0
     b3e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     b40:	683a      	ldr	r2, [r7, #0]
     b42:	4b24      	ldr	r3, [pc, #144]	; (bd4 <Reset_Handler+0xd4>)
     b44:	429a      	cmp	r2, r3
     b46:	d3f6      	bcc.n	b36 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     b48:	4b23      	ldr	r3, [pc, #140]	; (bd8 <Reset_Handler+0xd8>)
     b4a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     b4c:	4b23      	ldr	r3, [pc, #140]	; (bdc <Reset_Handler+0xdc>)
     b4e:	687a      	ldr	r2, [r7, #4]
     b50:	21ff      	movs	r1, #255	; 0xff
     b52:	438a      	bics	r2, r1
     b54:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     b56:	4a22      	ldr	r2, [pc, #136]	; (be0 <Reset_Handler+0xe0>)
     b58:	2390      	movs	r3, #144	; 0x90
     b5a:	005b      	lsls	r3, r3, #1
     b5c:	2102      	movs	r1, #2
     b5e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     b60:	4a20      	ldr	r2, [pc, #128]	; (be4 <Reset_Handler+0xe4>)
     b62:	78d3      	ldrb	r3, [r2, #3]
     b64:	2103      	movs	r1, #3
     b66:	438b      	bics	r3, r1
     b68:	1c19      	adds	r1, r3, #0
     b6a:	2302      	movs	r3, #2
     b6c:	430b      	orrs	r3, r1
     b6e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     b70:	4a1c      	ldr	r2, [pc, #112]	; (be4 <Reset_Handler+0xe4>)
     b72:	78d3      	ldrb	r3, [r2, #3]
     b74:	210c      	movs	r1, #12
     b76:	438b      	bics	r3, r1
     b78:	1c19      	adds	r1, r3, #0
     b7a:	2308      	movs	r3, #8
     b7c:	430b      	orrs	r3, r1
     b7e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     b80:	4a19      	ldr	r2, [pc, #100]	; (be8 <Reset_Handler+0xe8>)
     b82:	7b93      	ldrb	r3, [r2, #14]
     b84:	2130      	movs	r1, #48	; 0x30
     b86:	438b      	bics	r3, r1
     b88:	1c19      	adds	r1, r3, #0
     b8a:	2320      	movs	r3, #32
     b8c:	430b      	orrs	r3, r1
     b8e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     b90:	4a15      	ldr	r2, [pc, #84]	; (be8 <Reset_Handler+0xe8>)
     b92:	7b93      	ldrb	r3, [r2, #14]
     b94:	210c      	movs	r1, #12
     b96:	438b      	bics	r3, r1
     b98:	1c19      	adds	r1, r3, #0
     b9a:	2308      	movs	r3, #8
     b9c:	430b      	orrs	r3, r1
     b9e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     ba0:	4a11      	ldr	r2, [pc, #68]	; (be8 <Reset_Handler+0xe8>)
     ba2:	7b93      	ldrb	r3, [r2, #14]
     ba4:	2103      	movs	r1, #3
     ba6:	438b      	bics	r3, r1
     ba8:	1c19      	adds	r1, r3, #0
     baa:	2302      	movs	r3, #2
     bac:	430b      	orrs	r3, r1
     bae:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     bb0:	4a0e      	ldr	r2, [pc, #56]	; (bec <Reset_Handler+0xec>)
     bb2:	6853      	ldr	r3, [r2, #4]
     bb4:	2180      	movs	r1, #128	; 0x80
     bb6:	430b      	orrs	r3, r1
     bb8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     bba:	4b0d      	ldr	r3, [pc, #52]	; (bf0 <Reset_Handler+0xf0>)
     bbc:	4798      	blx	r3

        /* Branch to main function */
        main();
     bbe:	4b0d      	ldr	r3, [pc, #52]	; (bf4 <Reset_Handler+0xf4>)
     bc0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     bc2:	e7fe      	b.n	bc2 <Reset_Handler+0xc2>
     bc4:	00006744 	.word	0x00006744
     bc8:	20000000 	.word	0x20000000
     bcc:	200001e4 	.word	0x200001e4
     bd0:	200001e4 	.word	0x200001e4
     bd4:	200038d8 	.word	0x200038d8
     bd8:	00000000 	.word	0x00000000
     bdc:	e000ed00 	.word	0xe000ed00
     be0:	41007000 	.word	0x41007000
     be4:	41005000 	.word	0x41005000
     be8:	41004800 	.word	0x41004800
     bec:	41004000 	.word	0x41004000
     bf0:	000057ad 	.word	0x000057ad
     bf4:	000054bd 	.word	0x000054bd

00000bf8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     bf8:	b580      	push	{r7, lr}
     bfa:	af00      	add	r7, sp, #0
        while (1) {
     bfc:	e7fe      	b.n	bfc <Dummy_Handler+0x4>
	...

00000c00 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
     c00:	b580      	push	{r7, lr}
     c02:	b084      	sub	sp, #16
     c04:	af00      	add	r7, sp, #0
     c06:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
     c08:	4b0a      	ldr	r3, [pc, #40]	; (c34 <_sbrk+0x34>)
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	2b00      	cmp	r3, #0
     c0e:	d102      	bne.n	c16 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
     c10:	4b08      	ldr	r3, [pc, #32]	; (c34 <_sbrk+0x34>)
     c12:	4a09      	ldr	r2, [pc, #36]	; (c38 <_sbrk+0x38>)
     c14:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
     c16:	4b07      	ldr	r3, [pc, #28]	; (c34 <_sbrk+0x34>)
     c18:	681b      	ldr	r3, [r3, #0]
     c1a:	60fb      	str	r3, [r7, #12]

	heap += incr;
     c1c:	4b05      	ldr	r3, [pc, #20]	; (c34 <_sbrk+0x34>)
     c1e:	681a      	ldr	r2, [r3, #0]
     c20:	687b      	ldr	r3, [r7, #4]
     c22:	18d2      	adds	r2, r2, r3
     c24:	4b03      	ldr	r3, [pc, #12]	; (c34 <_sbrk+0x34>)
     c26:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
     c28:	68fb      	ldr	r3, [r7, #12]
}
     c2a:	0018      	movs	r0, r3
     c2c:	46bd      	mov	sp, r7
     c2e:	b004      	add	sp, #16
     c30:	bd80      	pop	{r7, pc}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	2000020c 	.word	0x2000020c
     c38:	200058d8 	.word	0x200058d8

00000c3c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
     c3c:	b580      	push	{r7, lr}
     c3e:	b084      	sub	sp, #16
     c40:	af00      	add	r7, sp, #0
     c42:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
     c44:	2300      	movs	r3, #0
     c46:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
     c48:	687b      	ldr	r3, [r7, #4]
     c4a:	2b00      	cmp	r3, #0
     c4c:	d101      	bne.n	c52 <FreeRTOS_CLIRegisterCommand+0x16>
     c4e:	b672      	cpsid	i
     c50:	e7fe      	b.n	c50 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
     c52:	2008      	movs	r0, #8
     c54:	4b11      	ldr	r3, [pc, #68]	; (c9c <FreeRTOS_CLIRegisterCommand+0x60>)
     c56:	4798      	blx	r3
     c58:	0003      	movs	r3, r0
     c5a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
     c5c:	68bb      	ldr	r3, [r7, #8]
     c5e:	2b00      	cmp	r3, #0
     c60:	d101      	bne.n	c66 <FreeRTOS_CLIRegisterCommand+0x2a>
     c62:	b672      	cpsid	i
     c64:	e7fe      	b.n	c64 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
     c66:	68bb      	ldr	r3, [r7, #8]
     c68:	2b00      	cmp	r3, #0
     c6a:	d012      	beq.n	c92 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
     c6c:	4b0c      	ldr	r3, [pc, #48]	; (ca0 <FreeRTOS_CLIRegisterCommand+0x64>)
     c6e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
     c70:	68bb      	ldr	r3, [r7, #8]
     c72:	687a      	ldr	r2, [r7, #4]
     c74:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
     c76:	68bb      	ldr	r3, [r7, #8]
     c78:	2200      	movs	r2, #0
     c7a:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
     c7c:	4b09      	ldr	r3, [pc, #36]	; (ca4 <FreeRTOS_CLIRegisterCommand+0x68>)
     c7e:	681b      	ldr	r3, [r3, #0]
     c80:	68ba      	ldr	r2, [r7, #8]
     c82:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
     c84:	4b07      	ldr	r3, [pc, #28]	; (ca4 <FreeRTOS_CLIRegisterCommand+0x68>)
     c86:	68ba      	ldr	r2, [r7, #8]
     c88:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
     c8a:	4b07      	ldr	r3, [pc, #28]	; (ca8 <FreeRTOS_CLIRegisterCommand+0x6c>)
     c8c:	4798      	blx	r3

		xReturn = pdPASS;
     c8e:	2301      	movs	r3, #1
     c90:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
     c92:	68fb      	ldr	r3, [r7, #12]
}
     c94:	0018      	movs	r0, r3
     c96:	46bd      	mov	sp, r7
     c98:	b004      	add	sp, #16
     c9a:	bd80      	pop	{r7, pc}
     c9c:	00001281 	.word	0x00001281
     ca0:	00001141 	.word	0x00001141
     ca4:	2000000c 	.word	0x2000000c
     ca8:	00001165 	.word	0x00001165

00000cac <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
     cac:	b580      	push	{r7, lr}
     cae:	b088      	sub	sp, #32
     cb0:	af00      	add	r7, sp, #0
     cb2:	60f8      	str	r0, [r7, #12]
     cb4:	60b9      	str	r1, [r7, #8]
     cb6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
     cb8:	2301      	movs	r3, #1
     cba:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
     cbc:	4b3d      	ldr	r3, [pc, #244]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     cbe:	681b      	ldr	r3, [r3, #0]
     cc0:	2b00      	cmp	r3, #0
     cc2:	d144      	bne.n	d4e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
     cc4:	4b3b      	ldr	r3, [pc, #236]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     cc6:	4a3c      	ldr	r2, [pc, #240]	; (db8 <FreeRTOS_CLIProcessCommand+0x10c>)
     cc8:	601a      	str	r2, [r3, #0]
     cca:	e03a      	b.n	d42 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
     ccc:	4b39      	ldr	r3, [pc, #228]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     cce:	681b      	ldr	r3, [r3, #0]
     cd0:	681b      	ldr	r3, [r3, #0]
     cd2:	681b      	ldr	r3, [r3, #0]
     cd4:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
     cd6:	69bb      	ldr	r3, [r7, #24]
     cd8:	0018      	movs	r0, r3
     cda:	4b38      	ldr	r3, [pc, #224]	; (dbc <FreeRTOS_CLIProcessCommand+0x110>)
     cdc:	4798      	blx	r3
     cde:	0003      	movs	r3, r0
     ce0:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
     ce2:	68fa      	ldr	r2, [r7, #12]
     ce4:	697b      	ldr	r3, [r7, #20]
     ce6:	18d3      	adds	r3, r2, r3
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	2b20      	cmp	r3, #32
     cec:	d005      	beq.n	cfa <FreeRTOS_CLIProcessCommand+0x4e>
     cee:	68fa      	ldr	r2, [r7, #12]
     cf0:	697b      	ldr	r3, [r7, #20]
     cf2:	18d3      	adds	r3, r2, r3
     cf4:	781b      	ldrb	r3, [r3, #0]
     cf6:	2b00      	cmp	r3, #0
     cf8:	d11e      	bne.n	d38 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
     cfa:	697a      	ldr	r2, [r7, #20]
     cfc:	69b9      	ldr	r1, [r7, #24]
     cfe:	68fb      	ldr	r3, [r7, #12]
     d00:	0018      	movs	r0, r3
     d02:	4b2f      	ldr	r3, [pc, #188]	; (dc0 <FreeRTOS_CLIProcessCommand+0x114>)
     d04:	4798      	blx	r3
     d06:	1e03      	subs	r3, r0, #0
     d08:	d116      	bne.n	d38 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
     d0a:	4b2a      	ldr	r3, [pc, #168]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d0c:	681b      	ldr	r3, [r3, #0]
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	7b1b      	ldrb	r3, [r3, #12]
     d12:	b25b      	sxtb	r3, r3
     d14:	2b00      	cmp	r3, #0
     d16:	db19      	blt.n	d4c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
     d18:	68fb      	ldr	r3, [r7, #12]
     d1a:	0018      	movs	r0, r3
     d1c:	4b29      	ldr	r3, [pc, #164]	; (dc4 <FreeRTOS_CLIProcessCommand+0x118>)
     d1e:	4798      	blx	r3
     d20:	0003      	movs	r3, r0
     d22:	001a      	movs	r2, r3
     d24:	4b23      	ldr	r3, [pc, #140]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	681b      	ldr	r3, [r3, #0]
     d2a:	7b1b      	ldrb	r3, [r3, #12]
     d2c:	b25b      	sxtb	r3, r3
     d2e:	429a      	cmp	r2, r3
     d30:	d00c      	beq.n	d4c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
     d32:	2300      	movs	r3, #0
     d34:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
     d36:	e009      	b.n	d4c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
     d38:	4b1e      	ldr	r3, [pc, #120]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d3a:	681b      	ldr	r3, [r3, #0]
     d3c:	685a      	ldr	r2, [r3, #4]
     d3e:	4b1d      	ldr	r3, [pc, #116]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d40:	601a      	str	r2, [r3, #0]
     d42:	4b1c      	ldr	r3, [pc, #112]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d44:	681b      	ldr	r3, [r3, #0]
     d46:	2b00      	cmp	r3, #0
     d48:	d1c0      	bne.n	ccc <FreeRTOS_CLIProcessCommand+0x20>
     d4a:	e000      	b.n	d4e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
     d4c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
     d4e:	4b19      	ldr	r3, [pc, #100]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d50:	681b      	ldr	r3, [r3, #0]
     d52:	2b00      	cmp	r3, #0
     d54:	d00c      	beq.n	d70 <FreeRTOS_CLIProcessCommand+0xc4>
     d56:	69fb      	ldr	r3, [r7, #28]
     d58:	2b00      	cmp	r3, #0
     d5a:	d109      	bne.n	d70 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
     d5c:	687a      	ldr	r2, [r7, #4]
     d5e:	491a      	ldr	r1, [pc, #104]	; (dc8 <FreeRTOS_CLIProcessCommand+0x11c>)
     d60:	68bb      	ldr	r3, [r7, #8]
     d62:	0018      	movs	r0, r3
     d64:	4b19      	ldr	r3, [pc, #100]	; (dcc <FreeRTOS_CLIProcessCommand+0x120>)
     d66:	4798      	blx	r3
		pxCommand = NULL;
     d68:	4b12      	ldr	r3, [pc, #72]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d6a:	2200      	movs	r2, #0
     d6c:	601a      	str	r2, [r3, #0]
     d6e:	e01c      	b.n	daa <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
     d70:	4b10      	ldr	r3, [pc, #64]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d72:	681b      	ldr	r3, [r3, #0]
     d74:	2b00      	cmp	r3, #0
     d76:	d010      	beq.n	d9a <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
     d78:	4b0e      	ldr	r3, [pc, #56]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d7a:	681b      	ldr	r3, [r3, #0]
     d7c:	681b      	ldr	r3, [r3, #0]
     d7e:	689b      	ldr	r3, [r3, #8]
     d80:	68fa      	ldr	r2, [r7, #12]
     d82:	6879      	ldr	r1, [r7, #4]
     d84:	68b8      	ldr	r0, [r7, #8]
     d86:	4798      	blx	r3
     d88:	0003      	movs	r3, r0
     d8a:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
     d8c:	69fb      	ldr	r3, [r7, #28]
     d8e:	2b00      	cmp	r3, #0
     d90:	d10b      	bne.n	daa <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
     d92:	4b08      	ldr	r3, [pc, #32]	; (db4 <FreeRTOS_CLIProcessCommand+0x108>)
     d94:	2200      	movs	r2, #0
     d96:	601a      	str	r2, [r3, #0]
     d98:	e007      	b.n	daa <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
     d9a:	687a      	ldr	r2, [r7, #4]
     d9c:	490c      	ldr	r1, [pc, #48]	; (dd0 <FreeRTOS_CLIProcessCommand+0x124>)
     d9e:	68bb      	ldr	r3, [r7, #8]
     da0:	0018      	movs	r0, r3
     da2:	4b0a      	ldr	r3, [pc, #40]	; (dcc <FreeRTOS_CLIProcessCommand+0x120>)
     da4:	4798      	blx	r3
		xReturn = pdFALSE;
     da6:	2300      	movs	r3, #0
     da8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
     daa:	69fb      	ldr	r3, [r7, #28]
}
     dac:	0018      	movs	r0, r3
     dae:	46bd      	mov	sp, r7
     db0:	b008      	add	sp, #32
     db2:	bd80      	pop	{r7, pc}
     db4:	20000210 	.word	0x20000210
     db8:	20000004 	.word	0x20000004
     dbc:	00005a85 	.word	0x00005a85
     dc0:	00005a93 	.word	0x00005a93
     dc4:	00000e35 	.word	0x00000e35
     dc8:	00006248 	.word	0x00006248
     dcc:	00005ab5 	.word	0x00005ab5
     dd0:	000062a0 	.word	0x000062a0

00000dd4 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
     dd4:	b580      	push	{r7, lr}
     dd6:	b086      	sub	sp, #24
     dd8:	af00      	add	r7, sp, #0
     dda:	60f8      	str	r0, [r7, #12]
     ddc:	60b9      	str	r1, [r7, #8]
     dde:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
     de0:	4b11      	ldr	r3, [pc, #68]	; (e28 <prvHelpCommand+0x54>)
     de2:	681b      	ldr	r3, [r3, #0]
     de4:	2b00      	cmp	r3, #0
     de6:	d102      	bne.n	dee <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
     de8:	4b0f      	ldr	r3, [pc, #60]	; (e28 <prvHelpCommand+0x54>)
     dea:	4a10      	ldr	r2, [pc, #64]	; (e2c <prvHelpCommand+0x58>)
     dec:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
     dee:	4b0e      	ldr	r3, [pc, #56]	; (e28 <prvHelpCommand+0x54>)
     df0:	681b      	ldr	r3, [r3, #0]
     df2:	681b      	ldr	r3, [r3, #0]
     df4:	6859      	ldr	r1, [r3, #4]
     df6:	68ba      	ldr	r2, [r7, #8]
     df8:	68fb      	ldr	r3, [r7, #12]
     dfa:	0018      	movs	r0, r3
     dfc:	4b0c      	ldr	r3, [pc, #48]	; (e30 <prvHelpCommand+0x5c>)
     dfe:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
     e00:	4b09      	ldr	r3, [pc, #36]	; (e28 <prvHelpCommand+0x54>)
     e02:	681b      	ldr	r3, [r3, #0]
     e04:	685a      	ldr	r2, [r3, #4]
     e06:	4b08      	ldr	r3, [pc, #32]	; (e28 <prvHelpCommand+0x54>)
     e08:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
     e0a:	4b07      	ldr	r3, [pc, #28]	; (e28 <prvHelpCommand+0x54>)
     e0c:	681b      	ldr	r3, [r3, #0]
     e0e:	2b00      	cmp	r3, #0
     e10:	d102      	bne.n	e18 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
     e12:	2300      	movs	r3, #0
     e14:	617b      	str	r3, [r7, #20]
     e16:	e001      	b.n	e1c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
     e18:	2301      	movs	r3, #1
     e1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
     e1c:	697b      	ldr	r3, [r7, #20]
}
     e1e:	0018      	movs	r0, r3
     e20:	46bd      	mov	sp, r7
     e22:	b006      	add	sp, #24
     e24:	bd80      	pop	{r7, pc}
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	20000214 	.word	0x20000214
     e2c:	20000004 	.word	0x20000004
     e30:	00005ab5 	.word	0x00005ab5

00000e34 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
     e34:	b580      	push	{r7, lr}
     e36:	b084      	sub	sp, #16
     e38:	af00      	add	r7, sp, #0
     e3a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
     e3c:	230f      	movs	r3, #15
     e3e:	18fb      	adds	r3, r7, r3
     e40:	2200      	movs	r2, #0
     e42:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
     e44:	2300      	movs	r3, #0
     e46:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
     e48:	e018      	b.n	e7c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	781b      	ldrb	r3, [r3, #0]
     e4e:	2b20      	cmp	r3, #32
     e50:	d10f      	bne.n	e72 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
     e52:	68bb      	ldr	r3, [r7, #8]
     e54:	2b01      	cmp	r3, #1
     e56:	d00e      	beq.n	e76 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
     e58:	230f      	movs	r3, #15
     e5a:	18fb      	adds	r3, r7, r3
     e5c:	781b      	ldrb	r3, [r3, #0]
     e5e:	b25b      	sxtb	r3, r3
     e60:	b2db      	uxtb	r3, r3
     e62:	3301      	adds	r3, #1
     e64:	b2da      	uxtb	r2, r3
     e66:	230f      	movs	r3, #15
     e68:	18fb      	adds	r3, r7, r3
     e6a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
     e6c:	2301      	movs	r3, #1
     e6e:	60bb      	str	r3, [r7, #8]
     e70:	e001      	b.n	e76 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
     e72:	2300      	movs	r3, #0
     e74:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	3301      	adds	r3, #1
     e7a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	781b      	ldrb	r3, [r3, #0]
     e80:	2b00      	cmp	r3, #0
     e82:	d1e2      	bne.n	e4a <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
     e84:	68bb      	ldr	r3, [r7, #8]
     e86:	2b01      	cmp	r3, #1
     e88:	d109      	bne.n	e9e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
     e8a:	230f      	movs	r3, #15
     e8c:	18fb      	adds	r3, r7, r3
     e8e:	781b      	ldrb	r3, [r3, #0]
     e90:	b25b      	sxtb	r3, r3
     e92:	b2db      	uxtb	r3, r3
     e94:	3b01      	subs	r3, #1
     e96:	b2da      	uxtb	r2, r3
     e98:	230f      	movs	r3, #15
     e9a:	18fb      	adds	r3, r7, r3
     e9c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
     e9e:	230f      	movs	r3, #15
     ea0:	18fb      	adds	r3, r7, r3
     ea2:	781b      	ldrb	r3, [r3, #0]
     ea4:	b25b      	sxtb	r3, r3
}
     ea6:	0018      	movs	r0, r3
     ea8:	46bd      	mov	sp, r7
     eaa:	b004      	add	sp, #16
     eac:	bd80      	pop	{r7, pc}

00000eae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     eae:	b580      	push	{r7, lr}
     eb0:	b082      	sub	sp, #8
     eb2:	af00      	add	r7, sp, #0
     eb4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	3308      	adds	r3, #8
     eba:	001a      	movs	r2, r3
     ebc:	687b      	ldr	r3, [r7, #4]
     ebe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     ec0:	687b      	ldr	r3, [r7, #4]
     ec2:	2201      	movs	r2, #1
     ec4:	4252      	negs	r2, r2
     ec6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ec8:	687b      	ldr	r3, [r7, #4]
     eca:	3308      	adds	r3, #8
     ecc:	001a      	movs	r2, r3
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ed2:	687b      	ldr	r3, [r7, #4]
     ed4:	3308      	adds	r3, #8
     ed6:	001a      	movs	r2, r3
     ed8:	687b      	ldr	r3, [r7, #4]
     eda:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     edc:	687b      	ldr	r3, [r7, #4]
     ede:	2200      	movs	r2, #0
     ee0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	46bd      	mov	sp, r7
     ee6:	b002      	add	sp, #8
     ee8:	bd80      	pop	{r7, pc}

00000eea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     eea:	b580      	push	{r7, lr}
     eec:	b082      	sub	sp, #8
     eee:	af00      	add	r7, sp, #0
     ef0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     ef2:	687b      	ldr	r3, [r7, #4]
     ef4:	2200      	movs	r2, #0
     ef6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     ef8:	46c0      	nop			; (mov r8, r8)
     efa:	46bd      	mov	sp, r7
     efc:	b002      	add	sp, #8
     efe:	bd80      	pop	{r7, pc}

00000f00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     f00:	b580      	push	{r7, lr}
     f02:	b084      	sub	sp, #16
     f04:	af00      	add	r7, sp, #0
     f06:	6078      	str	r0, [r7, #4]
     f08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
     f0a:	687b      	ldr	r3, [r7, #4]
     f0c:	685b      	ldr	r3, [r3, #4]
     f0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     f10:	683b      	ldr	r3, [r7, #0]
     f12:	68fa      	ldr	r2, [r7, #12]
     f14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     f16:	68fb      	ldr	r3, [r7, #12]
     f18:	689a      	ldr	r2, [r3, #8]
     f1a:	683b      	ldr	r3, [r7, #0]
     f1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     f1e:	68fb      	ldr	r3, [r7, #12]
     f20:	689b      	ldr	r3, [r3, #8]
     f22:	683a      	ldr	r2, [r7, #0]
     f24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
     f26:	68fb      	ldr	r3, [r7, #12]
     f28:	683a      	ldr	r2, [r7, #0]
     f2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     f2c:	683b      	ldr	r3, [r7, #0]
     f2e:	687a      	ldr	r2, [r7, #4]
     f30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     f32:	687b      	ldr	r3, [r7, #4]
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	1c5a      	adds	r2, r3, #1
     f38:	687b      	ldr	r3, [r7, #4]
     f3a:	601a      	str	r2, [r3, #0]
}
     f3c:	46c0      	nop			; (mov r8, r8)
     f3e:	46bd      	mov	sp, r7
     f40:	b004      	add	sp, #16
     f42:	bd80      	pop	{r7, pc}

00000f44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     f44:	b580      	push	{r7, lr}
     f46:	b084      	sub	sp, #16
     f48:	af00      	add	r7, sp, #0
     f4a:	6078      	str	r0, [r7, #4]
     f4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     f4e:	683b      	ldr	r3, [r7, #0]
     f50:	681b      	ldr	r3, [r3, #0]
     f52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     f54:	68bb      	ldr	r3, [r7, #8]
     f56:	3301      	adds	r3, #1
     f58:	d103      	bne.n	f62 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     f5a:	687b      	ldr	r3, [r7, #4]
     f5c:	691b      	ldr	r3, [r3, #16]
     f5e:	60fb      	str	r3, [r7, #12]
     f60:	e00c      	b.n	f7c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f62:	687b      	ldr	r3, [r7, #4]
     f64:	3308      	adds	r3, #8
     f66:	60fb      	str	r3, [r7, #12]
     f68:	e002      	b.n	f70 <vListInsert+0x2c>
     f6a:	68fb      	ldr	r3, [r7, #12]
     f6c:	685b      	ldr	r3, [r3, #4]
     f6e:	60fb      	str	r3, [r7, #12]
     f70:	68fb      	ldr	r3, [r7, #12]
     f72:	685b      	ldr	r3, [r3, #4]
     f74:	681a      	ldr	r2, [r3, #0]
     f76:	68bb      	ldr	r3, [r7, #8]
     f78:	429a      	cmp	r2, r3
     f7a:	d9f6      	bls.n	f6a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     f7c:	68fb      	ldr	r3, [r7, #12]
     f7e:	685a      	ldr	r2, [r3, #4]
     f80:	683b      	ldr	r3, [r7, #0]
     f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     f84:	683b      	ldr	r3, [r7, #0]
     f86:	685b      	ldr	r3, [r3, #4]
     f88:	683a      	ldr	r2, [r7, #0]
     f8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     f8c:	683b      	ldr	r3, [r7, #0]
     f8e:	68fa      	ldr	r2, [r7, #12]
     f90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	683a      	ldr	r2, [r7, #0]
     f96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     f98:	683b      	ldr	r3, [r7, #0]
     f9a:	687a      	ldr	r2, [r7, #4]
     f9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	681b      	ldr	r3, [r3, #0]
     fa2:	1c5a      	adds	r2, r3, #1
     fa4:	687b      	ldr	r3, [r7, #4]
     fa6:	601a      	str	r2, [r3, #0]
}
     fa8:	46c0      	nop			; (mov r8, r8)
     faa:	46bd      	mov	sp, r7
     fac:	b004      	add	sp, #16
     fae:	bd80      	pop	{r7, pc}

00000fb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     fb0:	b580      	push	{r7, lr}
     fb2:	b084      	sub	sp, #16
     fb4:	af00      	add	r7, sp, #0
     fb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     fb8:	687b      	ldr	r3, [r7, #4]
     fba:	691b      	ldr	r3, [r3, #16]
     fbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	685b      	ldr	r3, [r3, #4]
     fc2:	687a      	ldr	r2, [r7, #4]
     fc4:	6892      	ldr	r2, [r2, #8]
     fc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     fc8:	687b      	ldr	r3, [r7, #4]
     fca:	689b      	ldr	r3, [r3, #8]
     fcc:	687a      	ldr	r2, [r7, #4]
     fce:	6852      	ldr	r2, [r2, #4]
     fd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     fd2:	68fb      	ldr	r3, [r7, #12]
     fd4:	685a      	ldr	r2, [r3, #4]
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	429a      	cmp	r2, r3
     fda:	d103      	bne.n	fe4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     fdc:	687b      	ldr	r3, [r7, #4]
     fde:	689a      	ldr	r2, [r3, #8]
     fe0:	68fb      	ldr	r3, [r7, #12]
     fe2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     fe4:	687b      	ldr	r3, [r7, #4]
     fe6:	2200      	movs	r2, #0
     fe8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     fea:	68fb      	ldr	r3, [r7, #12]
     fec:	681b      	ldr	r3, [r3, #0]
     fee:	1e5a      	subs	r2, r3, #1
     ff0:	68fb      	ldr	r3, [r7, #12]
     ff2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     ff4:	68fb      	ldr	r3, [r7, #12]
     ff6:	681b      	ldr	r3, [r3, #0]
}
     ff8:	0018      	movs	r0, r3
     ffa:	46bd      	mov	sp, r7
     ffc:	b004      	add	sp, #16
     ffe:	bd80      	pop	{r7, pc}

00001000 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1000:	b580      	push	{r7, lr}
    1002:	b084      	sub	sp, #16
    1004:	af00      	add	r7, sp, #0
    1006:	60f8      	str	r0, [r7, #12]
    1008:	60b9      	str	r1, [r7, #8]
    100a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    100c:	68fb      	ldr	r3, [r7, #12]
    100e:	3b04      	subs	r3, #4
    1010:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1012:	68fb      	ldr	r3, [r7, #12]
    1014:	2280      	movs	r2, #128	; 0x80
    1016:	0452      	lsls	r2, r2, #17
    1018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    101a:	68fb      	ldr	r3, [r7, #12]
    101c:	3b04      	subs	r3, #4
    101e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    1020:	68ba      	ldr	r2, [r7, #8]
    1022:	68fb      	ldr	r3, [r7, #12]
    1024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    1026:	68fb      	ldr	r3, [r7, #12]
    1028:	3b04      	subs	r3, #4
    102a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    102c:	4a08      	ldr	r2, [pc, #32]	; (1050 <pxPortInitialiseStack+0x50>)
    102e:	68fb      	ldr	r3, [r7, #12]
    1030:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    1032:	68fb      	ldr	r3, [r7, #12]
    1034:	3b14      	subs	r3, #20
    1036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1038:	687a      	ldr	r2, [r7, #4]
    103a:	68fb      	ldr	r3, [r7, #12]
    103c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    103e:	68fb      	ldr	r3, [r7, #12]
    1040:	3b20      	subs	r3, #32
    1042:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    1044:	68fb      	ldr	r3, [r7, #12]
}
    1046:	0018      	movs	r0, r3
    1048:	46bd      	mov	sp, r7
    104a:	b004      	add	sp, #16
    104c:	bd80      	pop	{r7, pc}
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	00001055 	.word	0x00001055

00001054 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    1054:	b580      	push	{r7, lr}
    1056:	b082      	sub	sp, #8
    1058:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    105a:	2300      	movs	r3, #0
    105c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    105e:	4b07      	ldr	r3, [pc, #28]	; (107c <prvTaskExitError+0x28>)
    1060:	681b      	ldr	r3, [r3, #0]
    1062:	3301      	adds	r3, #1
    1064:	d001      	beq.n	106a <prvTaskExitError+0x16>
    1066:	b672      	cpsid	i
    1068:	e7fe      	b.n	1068 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    106a:	b672      	cpsid	i
	while( ulDummy == 0 )
    106c:	46c0      	nop			; (mov r8, r8)
    106e:	687b      	ldr	r3, [r7, #4]
    1070:	2b00      	cmp	r3, #0
    1072:	d0fc      	beq.n	106e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    1074:	46c0      	nop			; (mov r8, r8)
    1076:	46bd      	mov	sp, r7
    1078:	b002      	add	sp, #8
    107a:	bd80      	pop	{r7, pc}
    107c:	20000010 	.word	0x20000010

00001080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    1080:	b580      	push	{r7, lr}
    1082:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    1084:	46c0      	nop			; (mov r8, r8)
    1086:	46bd      	mov	sp, r7
    1088:	bd80      	pop	{r7, pc}
    108a:	0000      	movs	r0, r0
    108c:	0000      	movs	r0, r0
	...

00001090 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1090:	4a0b      	ldr	r2, [pc, #44]	; (10c0 <pxCurrentTCBConst2>)
    1092:	6813      	ldr	r3, [r2, #0]
    1094:	6818      	ldr	r0, [r3, #0]
    1096:	3020      	adds	r0, #32
    1098:	f380 8809 	msr	PSP, r0
    109c:	2002      	movs	r0, #2
    109e:	f380 8814 	msr	CONTROL, r0
    10a2:	f3bf 8f6f 	isb	sy
    10a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    10a8:	46ae      	mov	lr, r5
    10aa:	bc08      	pop	{r3}
    10ac:	bc04      	pop	{r2}
    10ae:	b662      	cpsie	i
    10b0:	4718      	bx	r3
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	46c0      	nop			; (mov r8, r8)
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	46c0      	nop			; (mov r8, r8)
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	46c0      	nop			; (mov r8, r8)
    10be:	46c0      	nop			; (mov r8, r8)

000010c0 <pxCurrentTCBConst2>:
    10c0:	20003100 	.word	0x20003100
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    10c4:	46c0      	nop			; (mov r8, r8)
    10c6:	46c0      	nop			; (mov r8, r8)

000010c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    10c8:	b580      	push	{r7, lr}
    10ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <xPortStartScheduler+0x40>)
    10ce:	4a0e      	ldr	r2, [pc, #56]	; (1108 <xPortStartScheduler+0x40>)
    10d0:	6812      	ldr	r2, [r2, #0]
    10d2:	21ff      	movs	r1, #255	; 0xff
    10d4:	0409      	lsls	r1, r1, #16
    10d6:	430a      	orrs	r2, r1
    10d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    10da:	4b0b      	ldr	r3, [pc, #44]	; (1108 <xPortStartScheduler+0x40>)
    10dc:	4a0a      	ldr	r2, [pc, #40]	; (1108 <xPortStartScheduler+0x40>)
    10de:	6812      	ldr	r2, [r2, #0]
    10e0:	21ff      	movs	r1, #255	; 0xff
    10e2:	0609      	lsls	r1, r1, #24
    10e4:	430a      	orrs	r2, r1
    10e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    10e8:	4b08      	ldr	r3, [pc, #32]	; (110c <xPortStartScheduler+0x44>)
    10ea:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    10ec:	4b08      	ldr	r3, [pc, #32]	; (1110 <xPortStartScheduler+0x48>)
    10ee:	2200      	movs	r2, #0
    10f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    10f2:	4b08      	ldr	r3, [pc, #32]	; (1114 <xPortStartScheduler+0x4c>)
    10f4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    10f6:	4b08      	ldr	r3, [pc, #32]	; (1118 <xPortStartScheduler+0x50>)
    10f8:	4798      	blx	r3
	prvTaskExitError();
    10fa:	4b08      	ldr	r3, [pc, #32]	; (111c <xPortStartScheduler+0x54>)
    10fc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    10fe:	2300      	movs	r3, #0
}
    1100:	0018      	movs	r0, r3
    1102:	46bd      	mov	sp, r7
    1104:	bd80      	pop	{r7, pc}
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	e000ed20 	.word	0xe000ed20
    110c:	00001239 	.word	0x00001239
    1110:	20000010 	.word	0x20000010
    1114:	00001091 	.word	0x00001091
    1118:	000025ad 	.word	0x000025ad
    111c:	00001055 	.word	0x00001055

00001120 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    1120:	b580      	push	{r7, lr}
    1122:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1124:	4b05      	ldr	r3, [pc, #20]	; (113c <vPortYield+0x1c>)
    1126:	2280      	movs	r2, #128	; 0x80
    1128:	0552      	lsls	r2, r2, #21
    112a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
    112c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1130:	f3bf 8f6f 	isb	sy
}
    1134:	46c0      	nop			; (mov r8, r8)
    1136:	46bd      	mov	sp, r7
    1138:	bd80      	pop	{r7, pc}
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	e000ed04 	.word	0xe000ed04

00001140 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    1140:	b580      	push	{r7, lr}
    1142:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    1144:	b672      	cpsid	i
    uxCriticalNesting++;
    1146:	4b06      	ldr	r3, [pc, #24]	; (1160 <vPortEnterCritical+0x20>)
    1148:	681b      	ldr	r3, [r3, #0]
    114a:	1c5a      	adds	r2, r3, #1
    114c:	4b04      	ldr	r3, [pc, #16]	; (1160 <vPortEnterCritical+0x20>)
    114e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    1150:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1154:	f3bf 8f6f 	isb	sy
}
    1158:	46c0      	nop			; (mov r8, r8)
    115a:	46bd      	mov	sp, r7
    115c:	bd80      	pop	{r7, pc}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	20000010 	.word	0x20000010

00001164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    1164:	b580      	push	{r7, lr}
    1166:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    1168:	4b09      	ldr	r3, [pc, #36]	; (1190 <vPortExitCritical+0x2c>)
    116a:	681b      	ldr	r3, [r3, #0]
    116c:	2b00      	cmp	r3, #0
    116e:	d101      	bne.n	1174 <vPortExitCritical+0x10>
    1170:	b672      	cpsid	i
    1172:	e7fe      	b.n	1172 <vPortExitCritical+0xe>
    uxCriticalNesting--;
    1174:	4b06      	ldr	r3, [pc, #24]	; (1190 <vPortExitCritical+0x2c>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	1e5a      	subs	r2, r3, #1
    117a:	4b05      	ldr	r3, [pc, #20]	; (1190 <vPortExitCritical+0x2c>)
    117c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    117e:	4b04      	ldr	r3, [pc, #16]	; (1190 <vPortExitCritical+0x2c>)
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	2b00      	cmp	r3, #0
    1184:	d100      	bne.n	1188 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    1186:	b662      	cpsie	i
    }
}
    1188:	46c0      	nop			; (mov r8, r8)
    118a:	46bd      	mov	sp, r7
    118c:	bd80      	pop	{r7, pc}
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	20000010 	.word	0x20000010

00001194 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    1194:	f3ef 8010 	mrs	r0, PRIMASK
    1198:	b672      	cpsid	i
    119a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    119c:	46c0      	nop			; (mov r8, r8)
    119e:	0018      	movs	r0, r3

000011a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    11a0:	f380 8810 	msr	PRIMASK, r0
    11a4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    11a6:	46c0      	nop			; (mov r8, r8)
	...

000011b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    11b0:	f3ef 8009 	mrs	r0, PSP
    11b4:	4b0e      	ldr	r3, [pc, #56]	; (11f0 <pxCurrentTCBConst>)
    11b6:	681a      	ldr	r2, [r3, #0]
    11b8:	3820      	subs	r0, #32
    11ba:	6010      	str	r0, [r2, #0]
    11bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    11be:	4644      	mov	r4, r8
    11c0:	464d      	mov	r5, r9
    11c2:	4656      	mov	r6, sl
    11c4:	465f      	mov	r7, fp
    11c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    11c8:	b508      	push	{r3, lr}
    11ca:	b672      	cpsid	i
    11cc:	f001 f9ee 	bl	25ac <vTaskSwitchContext>
    11d0:	b662      	cpsie	i
    11d2:	bc0c      	pop	{r2, r3}
    11d4:	6811      	ldr	r1, [r2, #0]
    11d6:	6808      	ldr	r0, [r1, #0]
    11d8:	3010      	adds	r0, #16
    11da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    11dc:	46a0      	mov	r8, r4
    11de:	46a9      	mov	r9, r5
    11e0:	46b2      	mov	sl, r6
    11e2:	46bb      	mov	fp, r7
    11e4:	f380 8809 	msr	PSP, r0
    11e8:	3820      	subs	r0, #32
    11ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    11ec:	4718      	bx	r3
    11ee:	46c0      	nop			; (mov r8, r8)

000011f0 <pxCurrentTCBConst>:
    11f0:	20003100 	.word	0x20003100
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    11f4:	46c0      	nop			; (mov r8, r8)
    11f6:	46c0      	nop			; (mov r8, r8)

000011f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    11f8:	b580      	push	{r7, lr}
    11fa:	b082      	sub	sp, #8
    11fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    11fe:	4b0a      	ldr	r3, [pc, #40]	; (1228 <SysTick_Handler+0x30>)
    1200:	4798      	blx	r3
    1202:	0003      	movs	r3, r0
    1204:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    1206:	4b09      	ldr	r3, [pc, #36]	; (122c <SysTick_Handler+0x34>)
    1208:	4798      	blx	r3
    120a:	1e03      	subs	r3, r0, #0
    120c:	d003      	beq.n	1216 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    120e:	4b08      	ldr	r3, [pc, #32]	; (1230 <SysTick_Handler+0x38>)
    1210:	2280      	movs	r2, #128	; 0x80
    1212:	0552      	lsls	r2, r2, #21
    1214:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	0018      	movs	r0, r3
    121a:	4b06      	ldr	r3, [pc, #24]	; (1234 <SysTick_Handler+0x3c>)
    121c:	4798      	blx	r3
}
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	46bd      	mov	sp, r7
    1222:	b002      	add	sp, #8
    1224:	bd80      	pop	{r7, pc}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	00001195 	.word	0x00001195
    122c:	00002439 	.word	0x00002439
    1230:	e000ed04 	.word	0xe000ed04
    1234:	000011a1 	.word	0x000011a1

00001238 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    1238:	b5b0      	push	{r4, r5, r7, lr}
    123a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    123c:	4b0b      	ldr	r3, [pc, #44]	; (126c <prvSetupTimerInterrupt+0x34>)
    123e:	2200      	movs	r2, #0
    1240:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    1242:	4b0b      	ldr	r3, [pc, #44]	; (1270 <prvSetupTimerInterrupt+0x38>)
    1244:	2200      	movs	r2, #0
    1246:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    1248:	4c0a      	ldr	r4, [pc, #40]	; (1274 <prvSetupTimerInterrupt+0x3c>)
    124a:	2000      	movs	r0, #0
    124c:	4b0a      	ldr	r3, [pc, #40]	; (1278 <prvSetupTimerInterrupt+0x40>)
    124e:	4798      	blx	r3
    1250:	4b0a      	ldr	r3, [pc, #40]	; (127c <prvSetupTimerInterrupt+0x44>)
    1252:	22fa      	movs	r2, #250	; 0xfa
    1254:	0091      	lsls	r1, r2, #2
    1256:	4798      	blx	r3
    1258:	0003      	movs	r3, r0
    125a:	3b01      	subs	r3, #1
    125c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    125e:	4b03      	ldr	r3, [pc, #12]	; (126c <prvSetupTimerInterrupt+0x34>)
    1260:	2207      	movs	r2, #7
    1262:	601a      	str	r2, [r3, #0]
}
    1264:	46c0      	nop			; (mov r8, r8)
    1266:	46bd      	mov	sp, r7
    1268:	bdb0      	pop	{r4, r5, r7, pc}
    126a:	46c0      	nop			; (mov r8, r8)
    126c:	e000e010 	.word	0xe000e010
    1270:	e000e018 	.word	0xe000e018
    1274:	e000e014 	.word	0xe000e014
    1278:	0000520d 	.word	0x0000520d
    127c:	00005641 	.word	0x00005641

00001280 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1280:	b580      	push	{r7, lr}
    1282:	b084      	sub	sp, #16
    1284:	af00      	add	r7, sp, #0
    1286:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    1288:	2300      	movs	r3, #0
    128a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	2207      	movs	r2, #7
    1290:	4013      	ands	r3, r2
    1292:	d004      	beq.n	129e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	2207      	movs	r2, #7
    1298:	4393      	bics	r3, r2
    129a:	3308      	adds	r3, #8
    129c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    129e:	4b19      	ldr	r3, [pc, #100]	; (1304 <pvPortMalloc+0x84>)
    12a0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    12a2:	4b19      	ldr	r3, [pc, #100]	; (1308 <pvPortMalloc+0x88>)
    12a4:	681b      	ldr	r3, [r3, #0]
    12a6:	2b00      	cmp	r3, #0
    12a8:	d105      	bne.n	12b6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    12aa:	4b18      	ldr	r3, [pc, #96]	; (130c <pvPortMalloc+0x8c>)
    12ac:	2207      	movs	r2, #7
    12ae:	4393      	bics	r3, r2
    12b0:	001a      	movs	r2, r3
    12b2:	4b15      	ldr	r3, [pc, #84]	; (1308 <pvPortMalloc+0x88>)
    12b4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    12b6:	4b16      	ldr	r3, [pc, #88]	; (1310 <pvPortMalloc+0x90>)
    12b8:	681a      	ldr	r2, [r3, #0]
    12ba:	687b      	ldr	r3, [r7, #4]
    12bc:	18d3      	adds	r3, r2, r3
    12be:	4a15      	ldr	r2, [pc, #84]	; (1314 <pvPortMalloc+0x94>)
    12c0:	4293      	cmp	r3, r2
    12c2:	d813      	bhi.n	12ec <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    12c4:	4b12      	ldr	r3, [pc, #72]	; (1310 <pvPortMalloc+0x90>)
    12c6:	681a      	ldr	r2, [r3, #0]
    12c8:	687b      	ldr	r3, [r7, #4]
    12ca:	18d2      	adds	r2, r2, r3
    12cc:	4b10      	ldr	r3, [pc, #64]	; (1310 <pvPortMalloc+0x90>)
    12ce:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    12d0:	429a      	cmp	r2, r3
    12d2:	d90b      	bls.n	12ec <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    12d4:	4b0c      	ldr	r3, [pc, #48]	; (1308 <pvPortMalloc+0x88>)
    12d6:	681a      	ldr	r2, [r3, #0]
    12d8:	4b0d      	ldr	r3, [pc, #52]	; (1310 <pvPortMalloc+0x90>)
    12da:	681b      	ldr	r3, [r3, #0]
    12dc:	18d3      	adds	r3, r2, r3
    12de:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    12e0:	4b0b      	ldr	r3, [pc, #44]	; (1310 <pvPortMalloc+0x90>)
    12e2:	681a      	ldr	r2, [r3, #0]
    12e4:	687b      	ldr	r3, [r7, #4]
    12e6:	18d2      	adds	r2, r2, r3
    12e8:	4b09      	ldr	r3, [pc, #36]	; (1310 <pvPortMalloc+0x90>)
    12ea:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    12ec:	4b0a      	ldr	r3, [pc, #40]	; (1318 <pvPortMalloc+0x98>)
    12ee:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    12f0:	68fb      	ldr	r3, [r7, #12]
    12f2:	2b00      	cmp	r3, #0
    12f4:	d101      	bne.n	12fa <pvPortMalloc+0x7a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    12f6:	4b09      	ldr	r3, [pc, #36]	; (131c <pvPortMalloc+0x9c>)
    12f8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    12fa:	68fb      	ldr	r3, [r7, #12]
}
    12fc:	0018      	movs	r0, r3
    12fe:	46bd      	mov	sp, r7
    1300:	b004      	add	sp, #16
    1302:	bd80      	pop	{r7, pc}
    1304:	000022d1 	.word	0x000022d1
    1308:	200030fc 	.word	0x200030fc
    130c:	20000220 	.word	0x20000220
    1310:	200030f8 	.word	0x200030f8
    1314:	00002ed7 	.word	0x00002ed7
    1318:	000022e9 	.word	0x000022e9
    131c:	00005611 	.word	0x00005611

00001320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1320:	b580      	push	{r7, lr}
    1322:	b082      	sub	sp, #8
    1324:	af00      	add	r7, sp, #0
    1326:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    1328:	687b      	ldr	r3, [r7, #4]
    132a:	2b00      	cmp	r3, #0
    132c:	d001      	beq.n	1332 <vPortFree+0x12>
    132e:	b672      	cpsid	i
    1330:	e7fe      	b.n	1330 <vPortFree+0x10>
}
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	46bd      	mov	sp, r7
    1336:	b002      	add	sp, #8
    1338:	bd80      	pop	{r7, pc}
	...

0000133c <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    133c:	b580      	push	{r7, lr}
    133e:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    1340:	4b03      	ldr	r3, [pc, #12]	; (1350 <xPortGetFreeHeapSize+0x14>)
    1342:	681b      	ldr	r3, [r3, #0]
    1344:	4a03      	ldr	r2, [pc, #12]	; (1354 <xPortGetFreeHeapSize+0x18>)
    1346:	1ad3      	subs	r3, r2, r3
}
    1348:	0018      	movs	r0, r3
    134a:	46bd      	mov	sp, r7
    134c:	bd80      	pop	{r7, pc}
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	200030f8 	.word	0x200030f8
    1354:	00002ed8 	.word	0x00002ed8

00001358 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1358:	b580      	push	{r7, lr}
    135a:	b084      	sub	sp, #16
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1362:	687b      	ldr	r3, [r7, #4]
    1364:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    1366:	68fb      	ldr	r3, [r7, #12]
    1368:	2b00      	cmp	r3, #0
    136a:	d101      	bne.n	1370 <xQueueGenericReset+0x18>
    136c:	b672      	cpsid	i
    136e:	e7fe      	b.n	136e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    1370:	4b23      	ldr	r3, [pc, #140]	; (1400 <xQueueGenericReset+0xa8>)
    1372:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1374:	68fb      	ldr	r3, [r7, #12]
    1376:	681a      	ldr	r2, [r3, #0]
    1378:	68fb      	ldr	r3, [r7, #12]
    137a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    137c:	68fb      	ldr	r3, [r7, #12]
    137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1380:	434b      	muls	r3, r1
    1382:	18d2      	adds	r2, r2, r3
    1384:	68fb      	ldr	r3, [r7, #12]
    1386:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1388:	68fb      	ldr	r3, [r7, #12]
    138a:	2200      	movs	r2, #0
    138c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    138e:	68fb      	ldr	r3, [r7, #12]
    1390:	681a      	ldr	r2, [r3, #0]
    1392:	68fb      	ldr	r3, [r7, #12]
    1394:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1396:	68fb      	ldr	r3, [r7, #12]
    1398:	681a      	ldr	r2, [r3, #0]
    139a:	68fb      	ldr	r3, [r7, #12]
    139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    139e:	1e59      	subs	r1, r3, #1
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    13a4:	434b      	muls	r3, r1
    13a6:	18d2      	adds	r2, r2, r3
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    13ac:	68fb      	ldr	r3, [r7, #12]
    13ae:	2244      	movs	r2, #68	; 0x44
    13b0:	21ff      	movs	r1, #255	; 0xff
    13b2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    13b4:	68fb      	ldr	r3, [r7, #12]
    13b6:	2245      	movs	r2, #69	; 0x45
    13b8:	21ff      	movs	r1, #255	; 0xff
    13ba:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    13bc:	683b      	ldr	r3, [r7, #0]
    13be:	2b00      	cmp	r3, #0
    13c0:	d10d      	bne.n	13de <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    13c2:	68fb      	ldr	r3, [r7, #12]
    13c4:	691b      	ldr	r3, [r3, #16]
    13c6:	2b00      	cmp	r3, #0
    13c8:	d013      	beq.n	13f2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    13ca:	68fb      	ldr	r3, [r7, #12]
    13cc:	3310      	adds	r3, #16
    13ce:	0018      	movs	r0, r3
    13d0:	4b0c      	ldr	r3, [pc, #48]	; (1404 <xQueueGenericReset+0xac>)
    13d2:	4798      	blx	r3
    13d4:	1e03      	subs	r3, r0, #0
    13d6:	d00c      	beq.n	13f2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    13d8:	4b0b      	ldr	r3, [pc, #44]	; (1408 <xQueueGenericReset+0xb0>)
    13da:	4798      	blx	r3
    13dc:	e009      	b.n	13f2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    13de:	68fb      	ldr	r3, [r7, #12]
    13e0:	3310      	adds	r3, #16
    13e2:	0018      	movs	r0, r3
    13e4:	4b09      	ldr	r3, [pc, #36]	; (140c <xQueueGenericReset+0xb4>)
    13e6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    13e8:	68fb      	ldr	r3, [r7, #12]
    13ea:	3324      	adds	r3, #36	; 0x24
    13ec:	0018      	movs	r0, r3
    13ee:	4b07      	ldr	r3, [pc, #28]	; (140c <xQueueGenericReset+0xb4>)
    13f0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    13f2:	4b07      	ldr	r3, [pc, #28]	; (1410 <xQueueGenericReset+0xb8>)
    13f4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    13f6:	2301      	movs	r3, #1
}
    13f8:	0018      	movs	r0, r3
    13fa:	46bd      	mov	sp, r7
    13fc:	b004      	add	sp, #16
    13fe:	bd80      	pop	{r7, pc}
    1400:	00001141 	.word	0x00001141
    1404:	0000270d 	.word	0x0000270d
    1408:	00001121 	.word	0x00001121
    140c:	00000eaf 	.word	0x00000eaf
    1410:	00001165 	.word	0x00001165

00001414 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    1414:	b590      	push	{r4, r7, lr}
    1416:	b08b      	sub	sp, #44	; 0x2c
    1418:	af02      	add	r7, sp, #8
    141a:	60f8      	str	r0, [r7, #12]
    141c:	60b9      	str	r1, [r7, #8]
    141e:	1dfb      	adds	r3, r7, #7
    1420:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    1422:	68fb      	ldr	r3, [r7, #12]
    1424:	2b00      	cmp	r3, #0
    1426:	d101      	bne.n	142c <xQueueGenericCreate+0x18>
    1428:	b672      	cpsid	i
    142a:	e7fe      	b.n	142a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    142c:	68bb      	ldr	r3, [r7, #8]
    142e:	2b00      	cmp	r3, #0
    1430:	d102      	bne.n	1438 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    1432:	2300      	movs	r3, #0
    1434:	61fb      	str	r3, [r7, #28]
    1436:	e003      	b.n	1440 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	68ba      	ldr	r2, [r7, #8]
    143c:	4353      	muls	r3, r2
    143e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1440:	69fb      	ldr	r3, [r7, #28]
    1442:	3354      	adds	r3, #84	; 0x54
    1444:	0018      	movs	r0, r3
    1446:	4b0c      	ldr	r3, [pc, #48]	; (1478 <xQueueGenericCreate+0x64>)
    1448:	4798      	blx	r3
    144a:	0003      	movs	r3, r0
    144c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    144e:	69bb      	ldr	r3, [r7, #24]
    1450:	2b00      	cmp	r3, #0
    1452:	d00c      	beq.n	146e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    1454:	69bb      	ldr	r3, [r7, #24]
    1456:	3354      	adds	r3, #84	; 0x54
    1458:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    145a:	1dfb      	adds	r3, r7, #7
    145c:	781c      	ldrb	r4, [r3, #0]
    145e:	697a      	ldr	r2, [r7, #20]
    1460:	68b9      	ldr	r1, [r7, #8]
    1462:	68f8      	ldr	r0, [r7, #12]
    1464:	69bb      	ldr	r3, [r7, #24]
    1466:	9300      	str	r3, [sp, #0]
    1468:	0023      	movs	r3, r4
    146a:	4c04      	ldr	r4, [pc, #16]	; (147c <xQueueGenericCreate+0x68>)
    146c:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    146e:	69bb      	ldr	r3, [r7, #24]
	}
    1470:	0018      	movs	r0, r3
    1472:	46bd      	mov	sp, r7
    1474:	b009      	add	sp, #36	; 0x24
    1476:	bd90      	pop	{r4, r7, pc}
    1478:	00001281 	.word	0x00001281
    147c:	00001481 	.word	0x00001481

00001480 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    1480:	b580      	push	{r7, lr}
    1482:	b084      	sub	sp, #16
    1484:	af00      	add	r7, sp, #0
    1486:	60f8      	str	r0, [r7, #12]
    1488:	60b9      	str	r1, [r7, #8]
    148a:	607a      	str	r2, [r7, #4]
    148c:	001a      	movs	r2, r3
    148e:	1cfb      	adds	r3, r7, #3
    1490:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    1492:	68bb      	ldr	r3, [r7, #8]
    1494:	2b00      	cmp	r3, #0
    1496:	d103      	bne.n	14a0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1498:	69bb      	ldr	r3, [r7, #24]
    149a:	69ba      	ldr	r2, [r7, #24]
    149c:	601a      	str	r2, [r3, #0]
    149e:	e002      	b.n	14a6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    14a0:	69bb      	ldr	r3, [r7, #24]
    14a2:	687a      	ldr	r2, [r7, #4]
    14a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    14a6:	69bb      	ldr	r3, [r7, #24]
    14a8:	68fa      	ldr	r2, [r7, #12]
    14aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    14ac:	69bb      	ldr	r3, [r7, #24]
    14ae:	68ba      	ldr	r2, [r7, #8]
    14b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    14b2:	69bb      	ldr	r3, [r7, #24]
    14b4:	2101      	movs	r1, #1
    14b6:	0018      	movs	r0, r3
    14b8:	4b06      	ldr	r3, [pc, #24]	; (14d4 <prvInitialiseNewQueue+0x54>)
    14ba:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    14bc:	69bb      	ldr	r3, [r7, #24]
    14be:	1cfa      	adds	r2, r7, #3
    14c0:	2150      	movs	r1, #80	; 0x50
    14c2:	7812      	ldrb	r2, [r2, #0]
    14c4:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    14c6:	69bb      	ldr	r3, [r7, #24]
    14c8:	2200      	movs	r2, #0
    14ca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    14cc:	46c0      	nop			; (mov r8, r8)
    14ce:	46bd      	mov	sp, r7
    14d0:	b004      	add	sp, #16
    14d2:	bd80      	pop	{r7, pc}
    14d4:	00001359 	.word	0x00001359

000014d8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    14d8:	b590      	push	{r4, r7, lr}
    14da:	b083      	sub	sp, #12
    14dc:	af00      	add	r7, sp, #0
    14de:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    14e0:	687b      	ldr	r3, [r7, #4]
    14e2:	2b00      	cmp	r3, #0
    14e4:	d00e      	beq.n	1504 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    14e6:	687b      	ldr	r3, [r7, #4]
    14e8:	2200      	movs	r2, #0
    14ea:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    14ec:	687b      	ldr	r3, [r7, #4]
    14ee:	2200      	movs	r2, #0
    14f0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    14f2:	687b      	ldr	r3, [r7, #4]
    14f4:	2200      	movs	r2, #0
    14f6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    14f8:	6878      	ldr	r0, [r7, #4]
    14fa:	2300      	movs	r3, #0
    14fc:	2200      	movs	r2, #0
    14fe:	2100      	movs	r1, #0
    1500:	4c02      	ldr	r4, [pc, #8]	; (150c <prvInitialiseMutex+0x34>)
    1502:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    1504:	46c0      	nop			; (mov r8, r8)
    1506:	46bd      	mov	sp, r7
    1508:	b003      	add	sp, #12
    150a:	bd90      	pop	{r4, r7, pc}
    150c:	00001551 	.word	0x00001551

00001510 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1510:	b580      	push	{r7, lr}
    1512:	b086      	sub	sp, #24
    1514:	af00      	add	r7, sp, #0
    1516:	0002      	movs	r2, r0
    1518:	1dfb      	adds	r3, r7, #7
    151a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    151c:	2301      	movs	r3, #1
    151e:	617b      	str	r3, [r7, #20]
    1520:	2300      	movs	r3, #0
    1522:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    1524:	1dfb      	adds	r3, r7, #7
    1526:	781a      	ldrb	r2, [r3, #0]
    1528:	6939      	ldr	r1, [r7, #16]
    152a:	697b      	ldr	r3, [r7, #20]
    152c:	0018      	movs	r0, r3
    152e:	4b06      	ldr	r3, [pc, #24]	; (1548 <xQueueCreateMutex+0x38>)
    1530:	4798      	blx	r3
    1532:	0003      	movs	r3, r0
    1534:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	0018      	movs	r0, r3
    153a:	4b04      	ldr	r3, [pc, #16]	; (154c <xQueueCreateMutex+0x3c>)
    153c:	4798      	blx	r3

		return pxNewQueue;
    153e:	68fb      	ldr	r3, [r7, #12]
	}
    1540:	0018      	movs	r0, r3
    1542:	46bd      	mov	sp, r7
    1544:	b006      	add	sp, #24
    1546:	bd80      	pop	{r7, pc}
    1548:	00001415 	.word	0x00001415
    154c:	000014d9 	.word	0x000014d9

00001550 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1550:	b580      	push	{r7, lr}
    1552:	b08a      	sub	sp, #40	; 0x28
    1554:	af00      	add	r7, sp, #0
    1556:	60f8      	str	r0, [r7, #12]
    1558:	60b9      	str	r1, [r7, #8]
    155a:	607a      	str	r2, [r7, #4]
    155c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    155e:	2300      	movs	r3, #0
    1560:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    1566:	6a3b      	ldr	r3, [r7, #32]
    1568:	2b00      	cmp	r3, #0
    156a:	d101      	bne.n	1570 <xQueueGenericSend+0x20>
    156c:	b672      	cpsid	i
    156e:	e7fe      	b.n	156e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1570:	68bb      	ldr	r3, [r7, #8]
    1572:	2b00      	cmp	r3, #0
    1574:	d103      	bne.n	157e <xQueueGenericSend+0x2e>
    1576:	6a3b      	ldr	r3, [r7, #32]
    1578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    157a:	2b00      	cmp	r3, #0
    157c:	d101      	bne.n	1582 <xQueueGenericSend+0x32>
    157e:	2301      	movs	r3, #1
    1580:	e000      	b.n	1584 <xQueueGenericSend+0x34>
    1582:	2300      	movs	r3, #0
    1584:	2b00      	cmp	r3, #0
    1586:	d101      	bne.n	158c <xQueueGenericSend+0x3c>
    1588:	b672      	cpsid	i
    158a:	e7fe      	b.n	158a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    158c:	683b      	ldr	r3, [r7, #0]
    158e:	2b02      	cmp	r3, #2
    1590:	d103      	bne.n	159a <xQueueGenericSend+0x4a>
    1592:	6a3b      	ldr	r3, [r7, #32]
    1594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1596:	2b01      	cmp	r3, #1
    1598:	d101      	bne.n	159e <xQueueGenericSend+0x4e>
    159a:	2301      	movs	r3, #1
    159c:	e000      	b.n	15a0 <xQueueGenericSend+0x50>
    159e:	2300      	movs	r3, #0
    15a0:	2b00      	cmp	r3, #0
    15a2:	d101      	bne.n	15a8 <xQueueGenericSend+0x58>
    15a4:	b672      	cpsid	i
    15a6:	e7fe      	b.n	15a6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    15a8:	4b53      	ldr	r3, [pc, #332]	; (16f8 <xQueueGenericSend+0x1a8>)
    15aa:	4798      	blx	r3
    15ac:	1e03      	subs	r3, r0, #0
    15ae:	d102      	bne.n	15b6 <xQueueGenericSend+0x66>
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d101      	bne.n	15ba <xQueueGenericSend+0x6a>
    15b6:	2301      	movs	r3, #1
    15b8:	e000      	b.n	15bc <xQueueGenericSend+0x6c>
    15ba:	2300      	movs	r3, #0
    15bc:	2b00      	cmp	r3, #0
    15be:	d101      	bne.n	15c4 <xQueueGenericSend+0x74>
    15c0:	b672      	cpsid	i
    15c2:	e7fe      	b.n	15c2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    15c4:	4b4d      	ldr	r3, [pc, #308]	; (16fc <xQueueGenericSend+0x1ac>)
    15c6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    15c8:	6a3b      	ldr	r3, [r7, #32]
    15ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    15cc:	6a3b      	ldr	r3, [r7, #32]
    15ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    15d0:	429a      	cmp	r2, r3
    15d2:	d302      	bcc.n	15da <xQueueGenericSend+0x8a>
    15d4:	683b      	ldr	r3, [r7, #0]
    15d6:	2b02      	cmp	r3, #2
    15d8:	d12d      	bne.n	1636 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    15da:	683a      	ldr	r2, [r7, #0]
    15dc:	68b9      	ldr	r1, [r7, #8]
    15de:	6a3b      	ldr	r3, [r7, #32]
    15e0:	0018      	movs	r0, r3
    15e2:	4b47      	ldr	r3, [pc, #284]	; (1700 <xQueueGenericSend+0x1b0>)
    15e4:	4798      	blx	r3
    15e6:	0003      	movs	r3, r0
    15e8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    15ea:	6a3b      	ldr	r3, [r7, #32]
    15ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    15ee:	2b00      	cmp	r3, #0
    15f0:	d00a      	beq.n	1608 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    15f2:	683a      	ldr	r2, [r7, #0]
    15f4:	6a3b      	ldr	r3, [r7, #32]
    15f6:	0011      	movs	r1, r2
    15f8:	0018      	movs	r0, r3
    15fa:	4b42      	ldr	r3, [pc, #264]	; (1704 <xQueueGenericSend+0x1b4>)
    15fc:	4798      	blx	r3
    15fe:	1e03      	subs	r3, r0, #0
    1600:	d015      	beq.n	162e <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    1602:	4b41      	ldr	r3, [pc, #260]	; (1708 <xQueueGenericSend+0x1b8>)
    1604:	4798      	blx	r3
    1606:	e012      	b.n	162e <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1608:	6a3b      	ldr	r3, [r7, #32]
    160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    160c:	2b00      	cmp	r3, #0
    160e:	d009      	beq.n	1624 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1610:	6a3b      	ldr	r3, [r7, #32]
    1612:	3324      	adds	r3, #36	; 0x24
    1614:	0018      	movs	r0, r3
    1616:	4b3d      	ldr	r3, [pc, #244]	; (170c <xQueueGenericSend+0x1bc>)
    1618:	4798      	blx	r3
    161a:	1e03      	subs	r3, r0, #0
    161c:	d007      	beq.n	162e <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    161e:	4b3a      	ldr	r3, [pc, #232]	; (1708 <xQueueGenericSend+0x1b8>)
    1620:	4798      	blx	r3
    1622:	e004      	b.n	162e <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    1624:	69fb      	ldr	r3, [r7, #28]
    1626:	2b00      	cmp	r3, #0
    1628:	d001      	beq.n	162e <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    162a:	4b37      	ldr	r3, [pc, #220]	; (1708 <xQueueGenericSend+0x1b8>)
    162c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    162e:	4b38      	ldr	r3, [pc, #224]	; (1710 <xQueueGenericSend+0x1c0>)
    1630:	4798      	blx	r3
				return pdPASS;
    1632:	2301      	movs	r3, #1
    1634:	e05c      	b.n	16f0 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	2b00      	cmp	r3, #0
    163a:	d103      	bne.n	1644 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    163c:	4b34      	ldr	r3, [pc, #208]	; (1710 <xQueueGenericSend+0x1c0>)
    163e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1640:	2300      	movs	r3, #0
    1642:	e055      	b.n	16f0 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    1644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1646:	2b00      	cmp	r3, #0
    1648:	d106      	bne.n	1658 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    164a:	2314      	movs	r3, #20
    164c:	18fb      	adds	r3, r7, r3
    164e:	0018      	movs	r0, r3
    1650:	4b30      	ldr	r3, [pc, #192]	; (1714 <xQueueGenericSend+0x1c4>)
    1652:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    1654:	2301      	movs	r3, #1
    1656:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1658:	4b2d      	ldr	r3, [pc, #180]	; (1710 <xQueueGenericSend+0x1c0>)
    165a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    165c:	4b2e      	ldr	r3, [pc, #184]	; (1718 <xQueueGenericSend+0x1c8>)
    165e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1660:	4b26      	ldr	r3, [pc, #152]	; (16fc <xQueueGenericSend+0x1ac>)
    1662:	4798      	blx	r3
    1664:	6a3b      	ldr	r3, [r7, #32]
    1666:	2244      	movs	r2, #68	; 0x44
    1668:	5c9b      	ldrb	r3, [r3, r2]
    166a:	b25b      	sxtb	r3, r3
    166c:	3301      	adds	r3, #1
    166e:	d103      	bne.n	1678 <xQueueGenericSend+0x128>
    1670:	6a3b      	ldr	r3, [r7, #32]
    1672:	2244      	movs	r2, #68	; 0x44
    1674:	2100      	movs	r1, #0
    1676:	5499      	strb	r1, [r3, r2]
    1678:	6a3b      	ldr	r3, [r7, #32]
    167a:	2245      	movs	r2, #69	; 0x45
    167c:	5c9b      	ldrb	r3, [r3, r2]
    167e:	b25b      	sxtb	r3, r3
    1680:	3301      	adds	r3, #1
    1682:	d103      	bne.n	168c <xQueueGenericSend+0x13c>
    1684:	6a3b      	ldr	r3, [r7, #32]
    1686:	2245      	movs	r2, #69	; 0x45
    1688:	2100      	movs	r1, #0
    168a:	5499      	strb	r1, [r3, r2]
    168c:	4b20      	ldr	r3, [pc, #128]	; (1710 <xQueueGenericSend+0x1c0>)
    168e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1690:	1d3a      	adds	r2, r7, #4
    1692:	2314      	movs	r3, #20
    1694:	18fb      	adds	r3, r7, r3
    1696:	0011      	movs	r1, r2
    1698:	0018      	movs	r0, r3
    169a:	4b20      	ldr	r3, [pc, #128]	; (171c <xQueueGenericSend+0x1cc>)
    169c:	4798      	blx	r3
    169e:	1e03      	subs	r3, r0, #0
    16a0:	d11f      	bne.n	16e2 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    16a2:	6a3b      	ldr	r3, [r7, #32]
    16a4:	0018      	movs	r0, r3
    16a6:	4b1e      	ldr	r3, [pc, #120]	; (1720 <xQueueGenericSend+0x1d0>)
    16a8:	4798      	blx	r3
    16aa:	1e03      	subs	r3, r0, #0
    16ac:	d012      	beq.n	16d4 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    16ae:	6a3b      	ldr	r3, [r7, #32]
    16b0:	3310      	adds	r3, #16
    16b2:	687a      	ldr	r2, [r7, #4]
    16b4:	0011      	movs	r1, r2
    16b6:	0018      	movs	r0, r3
    16b8:	4b1a      	ldr	r3, [pc, #104]	; (1724 <xQueueGenericSend+0x1d4>)
    16ba:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    16bc:	6a3b      	ldr	r3, [r7, #32]
    16be:	0018      	movs	r0, r3
    16c0:	4b19      	ldr	r3, [pc, #100]	; (1728 <xQueueGenericSend+0x1d8>)
    16c2:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    16c4:	4b19      	ldr	r3, [pc, #100]	; (172c <xQueueGenericSend+0x1dc>)
    16c6:	4798      	blx	r3
    16c8:	1e03      	subs	r3, r0, #0
    16ca:	d000      	beq.n	16ce <xQueueGenericSend+0x17e>
    16cc:	e77a      	b.n	15c4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    16ce:	4b0e      	ldr	r3, [pc, #56]	; (1708 <xQueueGenericSend+0x1b8>)
    16d0:	4798      	blx	r3
    16d2:	e777      	b.n	15c4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    16d4:	6a3b      	ldr	r3, [r7, #32]
    16d6:	0018      	movs	r0, r3
    16d8:	4b13      	ldr	r3, [pc, #76]	; (1728 <xQueueGenericSend+0x1d8>)
    16da:	4798      	blx	r3
				( void ) xTaskResumeAll();
    16dc:	4b13      	ldr	r3, [pc, #76]	; (172c <xQueueGenericSend+0x1dc>)
    16de:	4798      	blx	r3
    16e0:	e770      	b.n	15c4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    16e2:	6a3b      	ldr	r3, [r7, #32]
    16e4:	0018      	movs	r0, r3
    16e6:	4b10      	ldr	r3, [pc, #64]	; (1728 <xQueueGenericSend+0x1d8>)
    16e8:	4798      	blx	r3
			( void ) xTaskResumeAll();
    16ea:	4b10      	ldr	r3, [pc, #64]	; (172c <xQueueGenericSend+0x1dc>)
    16ec:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    16ee:	2300      	movs	r3, #0
		}
	}
}
    16f0:	0018      	movs	r0, r3
    16f2:	46bd      	mov	sp, r7
    16f4:	b00a      	add	sp, #40	; 0x28
    16f6:	bd80      	pop	{r7, pc}
    16f8:	00002a45 	.word	0x00002a45
    16fc:	00001141 	.word	0x00001141
    1700:	00001c11 	.word	0x00001c11
    1704:	00001f15 	.word	0x00001f15
    1708:	00001121 	.word	0x00001121
    170c:	0000270d 	.word	0x0000270d
    1710:	00001165 	.word	0x00001165
    1714:	000027cd 	.word	0x000027cd
    1718:	000022d1 	.word	0x000022d1
    171c:	000027f5 	.word	0x000027f5
    1720:	00001e65 	.word	0x00001e65
    1724:	00002675 	.word	0x00002675
    1728:	00001d41 	.word	0x00001d41
    172c:	000022e9 	.word	0x000022e9

00001730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1730:	b580      	push	{r7, lr}
    1732:	b088      	sub	sp, #32
    1734:	af00      	add	r7, sp, #0
    1736:	60f8      	str	r0, [r7, #12]
    1738:	60b9      	str	r1, [r7, #8]
    173a:	607a      	str	r2, [r7, #4]
    173c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    173e:	68fb      	ldr	r3, [r7, #12]
    1740:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    1742:	69bb      	ldr	r3, [r7, #24]
    1744:	2b00      	cmp	r3, #0
    1746:	d101      	bne.n	174c <xQueueGenericSendFromISR+0x1c>
    1748:	b672      	cpsid	i
    174a:	e7fe      	b.n	174a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    174c:	68bb      	ldr	r3, [r7, #8]
    174e:	2b00      	cmp	r3, #0
    1750:	d103      	bne.n	175a <xQueueGenericSendFromISR+0x2a>
    1752:	69bb      	ldr	r3, [r7, #24]
    1754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1756:	2b00      	cmp	r3, #0
    1758:	d101      	bne.n	175e <xQueueGenericSendFromISR+0x2e>
    175a:	2301      	movs	r3, #1
    175c:	e000      	b.n	1760 <xQueueGenericSendFromISR+0x30>
    175e:	2300      	movs	r3, #0
    1760:	2b00      	cmp	r3, #0
    1762:	d101      	bne.n	1768 <xQueueGenericSendFromISR+0x38>
    1764:	b672      	cpsid	i
    1766:	e7fe      	b.n	1766 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1768:	683b      	ldr	r3, [r7, #0]
    176a:	2b02      	cmp	r3, #2
    176c:	d103      	bne.n	1776 <xQueueGenericSendFromISR+0x46>
    176e:	69bb      	ldr	r3, [r7, #24]
    1770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1772:	2b01      	cmp	r3, #1
    1774:	d101      	bne.n	177a <xQueueGenericSendFromISR+0x4a>
    1776:	2301      	movs	r3, #1
    1778:	e000      	b.n	177c <xQueueGenericSendFromISR+0x4c>
    177a:	2300      	movs	r3, #0
    177c:	2b00      	cmp	r3, #0
    177e:	d101      	bne.n	1784 <xQueueGenericSendFromISR+0x54>
    1780:	b672      	cpsid	i
    1782:	e7fe      	b.n	1782 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1784:	4b2d      	ldr	r3, [pc, #180]	; (183c <xQueueGenericSendFromISR+0x10c>)
    1786:	4798      	blx	r3
    1788:	0003      	movs	r3, r0
    178a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    178c:	69bb      	ldr	r3, [r7, #24]
    178e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1790:	69bb      	ldr	r3, [r7, #24]
    1792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1794:	429a      	cmp	r2, r3
    1796:	d302      	bcc.n	179e <xQueueGenericSendFromISR+0x6e>
    1798:	683b      	ldr	r3, [r7, #0]
    179a:	2b02      	cmp	r3, #2
    179c:	d142      	bne.n	1824 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    179e:	2313      	movs	r3, #19
    17a0:	18fb      	adds	r3, r7, r3
    17a2:	69ba      	ldr	r2, [r7, #24]
    17a4:	2145      	movs	r1, #69	; 0x45
    17a6:	5c52      	ldrb	r2, [r2, r1]
    17a8:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    17aa:	683a      	ldr	r2, [r7, #0]
    17ac:	68b9      	ldr	r1, [r7, #8]
    17ae:	69bb      	ldr	r3, [r7, #24]
    17b0:	0018      	movs	r0, r3
    17b2:	4b23      	ldr	r3, [pc, #140]	; (1840 <xQueueGenericSendFromISR+0x110>)
    17b4:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    17b6:	2313      	movs	r3, #19
    17b8:	18fb      	adds	r3, r7, r3
    17ba:	781b      	ldrb	r3, [r3, #0]
    17bc:	b25b      	sxtb	r3, r3
    17be:	3301      	adds	r3, #1
    17c0:	d124      	bne.n	180c <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    17c2:	69bb      	ldr	r3, [r7, #24]
    17c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    17c6:	2b00      	cmp	r3, #0
    17c8:	d00e      	beq.n	17e8 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    17ca:	683a      	ldr	r2, [r7, #0]
    17cc:	69bb      	ldr	r3, [r7, #24]
    17ce:	0011      	movs	r1, r2
    17d0:	0018      	movs	r0, r3
    17d2:	4b1c      	ldr	r3, [pc, #112]	; (1844 <xQueueGenericSendFromISR+0x114>)
    17d4:	4798      	blx	r3
    17d6:	1e03      	subs	r3, r0, #0
    17d8:	d021      	beq.n	181e <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    17da:	687b      	ldr	r3, [r7, #4]
    17dc:	2b00      	cmp	r3, #0
    17de:	d01e      	beq.n	181e <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    17e0:	687b      	ldr	r3, [r7, #4]
    17e2:	2201      	movs	r2, #1
    17e4:	601a      	str	r2, [r3, #0]
    17e6:	e01a      	b.n	181e <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    17e8:	69bb      	ldr	r3, [r7, #24]
    17ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    17ec:	2b00      	cmp	r3, #0
    17ee:	d016      	beq.n	181e <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17f0:	69bb      	ldr	r3, [r7, #24]
    17f2:	3324      	adds	r3, #36	; 0x24
    17f4:	0018      	movs	r0, r3
    17f6:	4b14      	ldr	r3, [pc, #80]	; (1848 <xQueueGenericSendFromISR+0x118>)
    17f8:	4798      	blx	r3
    17fa:	1e03      	subs	r3, r0, #0
    17fc:	d00f      	beq.n	181e <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    17fe:	687b      	ldr	r3, [r7, #4]
    1800:	2b00      	cmp	r3, #0
    1802:	d00c      	beq.n	181e <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    1804:	687b      	ldr	r3, [r7, #4]
    1806:	2201      	movs	r2, #1
    1808:	601a      	str	r2, [r3, #0]
    180a:	e008      	b.n	181e <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    180c:	2313      	movs	r3, #19
    180e:	18fb      	adds	r3, r7, r3
    1810:	781b      	ldrb	r3, [r3, #0]
    1812:	3301      	adds	r3, #1
    1814:	b2db      	uxtb	r3, r3
    1816:	b259      	sxtb	r1, r3
    1818:	69bb      	ldr	r3, [r7, #24]
    181a:	2245      	movs	r2, #69	; 0x45
    181c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    181e:	2301      	movs	r3, #1
    1820:	61fb      	str	r3, [r7, #28]
		{
    1822:	e001      	b.n	1828 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1824:	2300      	movs	r3, #0
    1826:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1828:	697b      	ldr	r3, [r7, #20]
    182a:	0018      	movs	r0, r3
    182c:	4b07      	ldr	r3, [pc, #28]	; (184c <xQueueGenericSendFromISR+0x11c>)
    182e:	4798      	blx	r3

	return xReturn;
    1830:	69fb      	ldr	r3, [r7, #28]
}
    1832:	0018      	movs	r0, r3
    1834:	46bd      	mov	sp, r7
    1836:	b008      	add	sp, #32
    1838:	bd80      	pop	{r7, pc}
    183a:	46c0      	nop			; (mov r8, r8)
    183c:	00001195 	.word	0x00001195
    1840:	00001c11 	.word	0x00001c11
    1844:	00001f15 	.word	0x00001f15
    1848:	0000270d 	.word	0x0000270d
    184c:	000011a1 	.word	0x000011a1

00001850 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    1850:	b580      	push	{r7, lr}
    1852:	b08a      	sub	sp, #40	; 0x28
    1854:	af00      	add	r7, sp, #0
    1856:	60f8      	str	r0, [r7, #12]
    1858:	60b9      	str	r1, [r7, #8]
    185a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    185c:	2300      	movs	r3, #0
    185e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1860:	68fb      	ldr	r3, [r7, #12]
    1862:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    1864:	6a3b      	ldr	r3, [r7, #32]
    1866:	2b00      	cmp	r3, #0
    1868:	d101      	bne.n	186e <xQueueReceive+0x1e>
    186a:	b672      	cpsid	i
    186c:	e7fe      	b.n	186c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    186e:	68bb      	ldr	r3, [r7, #8]
    1870:	2b00      	cmp	r3, #0
    1872:	d103      	bne.n	187c <xQueueReceive+0x2c>
    1874:	6a3b      	ldr	r3, [r7, #32]
    1876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1878:	2b00      	cmp	r3, #0
    187a:	d101      	bne.n	1880 <xQueueReceive+0x30>
    187c:	2301      	movs	r3, #1
    187e:	e000      	b.n	1882 <xQueueReceive+0x32>
    1880:	2300      	movs	r3, #0
    1882:	2b00      	cmp	r3, #0
    1884:	d101      	bne.n	188a <xQueueReceive+0x3a>
    1886:	b672      	cpsid	i
    1888:	e7fe      	b.n	1888 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    188a:	4b4c      	ldr	r3, [pc, #304]	; (19bc <xQueueReceive+0x16c>)
    188c:	4798      	blx	r3
    188e:	1e03      	subs	r3, r0, #0
    1890:	d102      	bne.n	1898 <xQueueReceive+0x48>
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	2b00      	cmp	r3, #0
    1896:	d101      	bne.n	189c <xQueueReceive+0x4c>
    1898:	2301      	movs	r3, #1
    189a:	e000      	b.n	189e <xQueueReceive+0x4e>
    189c:	2300      	movs	r3, #0
    189e:	2b00      	cmp	r3, #0
    18a0:	d101      	bne.n	18a6 <xQueueReceive+0x56>
    18a2:	b672      	cpsid	i
    18a4:	e7fe      	b.n	18a4 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    18a6:	4b46      	ldr	r3, [pc, #280]	; (19c0 <xQueueReceive+0x170>)
    18a8:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    18aa:	6a3b      	ldr	r3, [r7, #32]
    18ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    18ae:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    18b0:	69fb      	ldr	r3, [r7, #28]
    18b2:	2b00      	cmp	r3, #0
    18b4:	d01a      	beq.n	18ec <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    18b6:	68ba      	ldr	r2, [r7, #8]
    18b8:	6a3b      	ldr	r3, [r7, #32]
    18ba:	0011      	movs	r1, r2
    18bc:	0018      	movs	r0, r3
    18be:	4b41      	ldr	r3, [pc, #260]	; (19c4 <xQueueReceive+0x174>)
    18c0:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    18c2:	69fb      	ldr	r3, [r7, #28]
    18c4:	1e5a      	subs	r2, r3, #1
    18c6:	6a3b      	ldr	r3, [r7, #32]
    18c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    18ca:	6a3b      	ldr	r3, [r7, #32]
    18cc:	691b      	ldr	r3, [r3, #16]
    18ce:	2b00      	cmp	r3, #0
    18d0:	d008      	beq.n	18e4 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    18d2:	6a3b      	ldr	r3, [r7, #32]
    18d4:	3310      	adds	r3, #16
    18d6:	0018      	movs	r0, r3
    18d8:	4b3b      	ldr	r3, [pc, #236]	; (19c8 <xQueueReceive+0x178>)
    18da:	4798      	blx	r3
    18dc:	1e03      	subs	r3, r0, #0
    18de:	d001      	beq.n	18e4 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
    18e0:	4b3a      	ldr	r3, [pc, #232]	; (19cc <xQueueReceive+0x17c>)
    18e2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    18e4:	4b3a      	ldr	r3, [pc, #232]	; (19d0 <xQueueReceive+0x180>)
    18e6:	4798      	blx	r3
				return pdPASS;
    18e8:	2301      	movs	r3, #1
    18ea:	e062      	b.n	19b2 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    18ec:	687b      	ldr	r3, [r7, #4]
    18ee:	2b00      	cmp	r3, #0
    18f0:	d103      	bne.n	18fa <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    18f2:	4b37      	ldr	r3, [pc, #220]	; (19d0 <xQueueReceive+0x180>)
    18f4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    18f6:	2300      	movs	r3, #0
    18f8:	e05b      	b.n	19b2 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
    18fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18fc:	2b00      	cmp	r3, #0
    18fe:	d106      	bne.n	190e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    1900:	2314      	movs	r3, #20
    1902:	18fb      	adds	r3, r7, r3
    1904:	0018      	movs	r0, r3
    1906:	4b33      	ldr	r3, [pc, #204]	; (19d4 <xQueueReceive+0x184>)
    1908:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    190a:	2301      	movs	r3, #1
    190c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    190e:	4b30      	ldr	r3, [pc, #192]	; (19d0 <xQueueReceive+0x180>)
    1910:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1912:	4b31      	ldr	r3, [pc, #196]	; (19d8 <xQueueReceive+0x188>)
    1914:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1916:	4b2a      	ldr	r3, [pc, #168]	; (19c0 <xQueueReceive+0x170>)
    1918:	4798      	blx	r3
    191a:	6a3b      	ldr	r3, [r7, #32]
    191c:	2244      	movs	r2, #68	; 0x44
    191e:	5c9b      	ldrb	r3, [r3, r2]
    1920:	b25b      	sxtb	r3, r3
    1922:	3301      	adds	r3, #1
    1924:	d103      	bne.n	192e <xQueueReceive+0xde>
    1926:	6a3b      	ldr	r3, [r7, #32]
    1928:	2244      	movs	r2, #68	; 0x44
    192a:	2100      	movs	r1, #0
    192c:	5499      	strb	r1, [r3, r2]
    192e:	6a3b      	ldr	r3, [r7, #32]
    1930:	2245      	movs	r2, #69	; 0x45
    1932:	5c9b      	ldrb	r3, [r3, r2]
    1934:	b25b      	sxtb	r3, r3
    1936:	3301      	adds	r3, #1
    1938:	d103      	bne.n	1942 <xQueueReceive+0xf2>
    193a:	6a3b      	ldr	r3, [r7, #32]
    193c:	2245      	movs	r2, #69	; 0x45
    193e:	2100      	movs	r1, #0
    1940:	5499      	strb	r1, [r3, r2]
    1942:	4b23      	ldr	r3, [pc, #140]	; (19d0 <xQueueReceive+0x180>)
    1944:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1946:	1d3a      	adds	r2, r7, #4
    1948:	2314      	movs	r3, #20
    194a:	18fb      	adds	r3, r7, r3
    194c:	0011      	movs	r1, r2
    194e:	0018      	movs	r0, r3
    1950:	4b22      	ldr	r3, [pc, #136]	; (19dc <xQueueReceive+0x18c>)
    1952:	4798      	blx	r3
    1954:	1e03      	subs	r3, r0, #0
    1956:	d11e      	bne.n	1996 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1958:	6a3b      	ldr	r3, [r7, #32]
    195a:	0018      	movs	r0, r3
    195c:	4b20      	ldr	r3, [pc, #128]	; (19e0 <xQueueReceive+0x190>)
    195e:	4798      	blx	r3
    1960:	1e03      	subs	r3, r0, #0
    1962:	d011      	beq.n	1988 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1964:	6a3b      	ldr	r3, [r7, #32]
    1966:	3324      	adds	r3, #36	; 0x24
    1968:	687a      	ldr	r2, [r7, #4]
    196a:	0011      	movs	r1, r2
    196c:	0018      	movs	r0, r3
    196e:	4b1d      	ldr	r3, [pc, #116]	; (19e4 <xQueueReceive+0x194>)
    1970:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1972:	6a3b      	ldr	r3, [r7, #32]
    1974:	0018      	movs	r0, r3
    1976:	4b1c      	ldr	r3, [pc, #112]	; (19e8 <xQueueReceive+0x198>)
    1978:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    197a:	4b1c      	ldr	r3, [pc, #112]	; (19ec <xQueueReceive+0x19c>)
    197c:	4798      	blx	r3
    197e:	1e03      	subs	r3, r0, #0
    1980:	d191      	bne.n	18a6 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    1982:	4b12      	ldr	r3, [pc, #72]	; (19cc <xQueueReceive+0x17c>)
    1984:	4798      	blx	r3
    1986:	e78e      	b.n	18a6 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    1988:	6a3b      	ldr	r3, [r7, #32]
    198a:	0018      	movs	r0, r3
    198c:	4b16      	ldr	r3, [pc, #88]	; (19e8 <xQueueReceive+0x198>)
    198e:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1990:	4b16      	ldr	r3, [pc, #88]	; (19ec <xQueueReceive+0x19c>)
    1992:	4798      	blx	r3
    1994:	e787      	b.n	18a6 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    1996:	6a3b      	ldr	r3, [r7, #32]
    1998:	0018      	movs	r0, r3
    199a:	4b13      	ldr	r3, [pc, #76]	; (19e8 <xQueueReceive+0x198>)
    199c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    199e:	4b13      	ldr	r3, [pc, #76]	; (19ec <xQueueReceive+0x19c>)
    19a0:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    19a2:	6a3b      	ldr	r3, [r7, #32]
    19a4:	0018      	movs	r0, r3
    19a6:	4b0e      	ldr	r3, [pc, #56]	; (19e0 <xQueueReceive+0x190>)
    19a8:	4798      	blx	r3
    19aa:	1e03      	subs	r3, r0, #0
    19ac:	d100      	bne.n	19b0 <xQueueReceive+0x160>
    19ae:	e77a      	b.n	18a6 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    19b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    19b2:	0018      	movs	r0, r3
    19b4:	46bd      	mov	sp, r7
    19b6:	b00a      	add	sp, #40	; 0x28
    19b8:	bd80      	pop	{r7, pc}
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	00002a45 	.word	0x00002a45
    19c0:	00001141 	.word	0x00001141
    19c4:	00001cf1 	.word	0x00001cf1
    19c8:	0000270d 	.word	0x0000270d
    19cc:	00001121 	.word	0x00001121
    19d0:	00001165 	.word	0x00001165
    19d4:	000027cd 	.word	0x000027cd
    19d8:	000022d1 	.word	0x000022d1
    19dc:	000027f5 	.word	0x000027f5
    19e0:	00001e31 	.word	0x00001e31
    19e4:	00002675 	.word	0x00002675
    19e8:	00001d41 	.word	0x00001d41
    19ec:	000022e9 	.word	0x000022e9

000019f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    19f0:	b580      	push	{r7, lr}
    19f2:	b08a      	sub	sp, #40	; 0x28
    19f4:	af00      	add	r7, sp, #0
    19f6:	6078      	str	r0, [r7, #4]
    19f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    19fa:	2300      	movs	r3, #0
    19fc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    19fe:	687b      	ldr	r3, [r7, #4]
    1a00:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    1a02:	2300      	movs	r3, #0
    1a04:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    1a06:	69fb      	ldr	r3, [r7, #28]
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d101      	bne.n	1a10 <xQueueSemaphoreTake+0x20>
    1a0c:	b672      	cpsid	i
    1a0e:	e7fe      	b.n	1a0e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    1a10:	69fb      	ldr	r3, [r7, #28]
    1a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a14:	2b00      	cmp	r3, #0
    1a16:	d001      	beq.n	1a1c <xQueueSemaphoreTake+0x2c>
    1a18:	b672      	cpsid	i
    1a1a:	e7fe      	b.n	1a1a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1a1c:	4b61      	ldr	r3, [pc, #388]	; (1ba4 <xQueueSemaphoreTake+0x1b4>)
    1a1e:	4798      	blx	r3
    1a20:	1e03      	subs	r3, r0, #0
    1a22:	d102      	bne.n	1a2a <xQueueSemaphoreTake+0x3a>
    1a24:	683b      	ldr	r3, [r7, #0]
    1a26:	2b00      	cmp	r3, #0
    1a28:	d101      	bne.n	1a2e <xQueueSemaphoreTake+0x3e>
    1a2a:	2301      	movs	r3, #1
    1a2c:	e000      	b.n	1a30 <xQueueSemaphoreTake+0x40>
    1a2e:	2300      	movs	r3, #0
    1a30:	2b00      	cmp	r3, #0
    1a32:	d101      	bne.n	1a38 <xQueueSemaphoreTake+0x48>
    1a34:	b672      	cpsid	i
    1a36:	e7fe      	b.n	1a36 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1a38:	4b5b      	ldr	r3, [pc, #364]	; (1ba8 <xQueueSemaphoreTake+0x1b8>)
    1a3a:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    1a3c:	69fb      	ldr	r3, [r7, #28]
    1a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1a40:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    1a42:	69bb      	ldr	r3, [r7, #24]
    1a44:	2b00      	cmp	r3, #0
    1a46:	d01d      	beq.n	1a84 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    1a48:	69bb      	ldr	r3, [r7, #24]
    1a4a:	1e5a      	subs	r2, r3, #1
    1a4c:	69fb      	ldr	r3, [r7, #28]
    1a4e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1a50:	69fb      	ldr	r3, [r7, #28]
    1a52:	681b      	ldr	r3, [r3, #0]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d104      	bne.n	1a62 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1a58:	4b54      	ldr	r3, [pc, #336]	; (1bac <xQueueSemaphoreTake+0x1bc>)
    1a5a:	4798      	blx	r3
    1a5c:	0002      	movs	r2, r0
    1a5e:	69fb      	ldr	r3, [r7, #28]
    1a60:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a62:	69fb      	ldr	r3, [r7, #28]
    1a64:	691b      	ldr	r3, [r3, #16]
    1a66:	2b00      	cmp	r3, #0
    1a68:	d008      	beq.n	1a7c <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1a6a:	69fb      	ldr	r3, [r7, #28]
    1a6c:	3310      	adds	r3, #16
    1a6e:	0018      	movs	r0, r3
    1a70:	4b4f      	ldr	r3, [pc, #316]	; (1bb0 <xQueueSemaphoreTake+0x1c0>)
    1a72:	4798      	blx	r3
    1a74:	1e03      	subs	r3, r0, #0
    1a76:	d001      	beq.n	1a7c <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    1a78:	4b4e      	ldr	r3, [pc, #312]	; (1bb4 <xQueueSemaphoreTake+0x1c4>)
    1a7a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    1a7c:	4b4e      	ldr	r3, [pc, #312]	; (1bb8 <xQueueSemaphoreTake+0x1c8>)
    1a7e:	4798      	blx	r3
				return pdPASS;
    1a80:	2301      	movs	r3, #1
    1a82:	e08b      	b.n	1b9c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1a84:	683b      	ldr	r3, [r7, #0]
    1a86:	2b00      	cmp	r3, #0
    1a88:	d108      	bne.n	1a9c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    1a8a:	6a3b      	ldr	r3, [r7, #32]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d001      	beq.n	1a94 <xQueueSemaphoreTake+0xa4>
    1a90:	b672      	cpsid	i
    1a92:	e7fe      	b.n	1a92 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    1a94:	4b48      	ldr	r3, [pc, #288]	; (1bb8 <xQueueSemaphoreTake+0x1c8>)
    1a96:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1a98:	2300      	movs	r3, #0
    1a9a:	e07f      	b.n	1b9c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
    1a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d106      	bne.n	1ab0 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    1aa2:	230c      	movs	r3, #12
    1aa4:	18fb      	adds	r3, r7, r3
    1aa6:	0018      	movs	r0, r3
    1aa8:	4b44      	ldr	r3, [pc, #272]	; (1bbc <xQueueSemaphoreTake+0x1cc>)
    1aaa:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    1aac:	2301      	movs	r3, #1
    1aae:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1ab0:	4b41      	ldr	r3, [pc, #260]	; (1bb8 <xQueueSemaphoreTake+0x1c8>)
    1ab2:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    1ab4:	4b42      	ldr	r3, [pc, #264]	; (1bc0 <xQueueSemaphoreTake+0x1d0>)
    1ab6:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1ab8:	4b3b      	ldr	r3, [pc, #236]	; (1ba8 <xQueueSemaphoreTake+0x1b8>)
    1aba:	4798      	blx	r3
    1abc:	69fb      	ldr	r3, [r7, #28]
    1abe:	2244      	movs	r2, #68	; 0x44
    1ac0:	5c9b      	ldrb	r3, [r3, r2]
    1ac2:	b25b      	sxtb	r3, r3
    1ac4:	3301      	adds	r3, #1
    1ac6:	d103      	bne.n	1ad0 <xQueueSemaphoreTake+0xe0>
    1ac8:	69fb      	ldr	r3, [r7, #28]
    1aca:	2244      	movs	r2, #68	; 0x44
    1acc:	2100      	movs	r1, #0
    1ace:	5499      	strb	r1, [r3, r2]
    1ad0:	69fb      	ldr	r3, [r7, #28]
    1ad2:	2245      	movs	r2, #69	; 0x45
    1ad4:	5c9b      	ldrb	r3, [r3, r2]
    1ad6:	b25b      	sxtb	r3, r3
    1ad8:	3301      	adds	r3, #1
    1ada:	d103      	bne.n	1ae4 <xQueueSemaphoreTake+0xf4>
    1adc:	69fb      	ldr	r3, [r7, #28]
    1ade:	2245      	movs	r2, #69	; 0x45
    1ae0:	2100      	movs	r1, #0
    1ae2:	5499      	strb	r1, [r3, r2]
    1ae4:	4b34      	ldr	r3, [pc, #208]	; (1bb8 <xQueueSemaphoreTake+0x1c8>)
    1ae6:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1ae8:	003a      	movs	r2, r7
    1aea:	230c      	movs	r3, #12
    1aec:	18fb      	adds	r3, r7, r3
    1aee:	0011      	movs	r1, r2
    1af0:	0018      	movs	r0, r3
    1af2:	4b34      	ldr	r3, [pc, #208]	; (1bc4 <xQueueSemaphoreTake+0x1d4>)
    1af4:	4798      	blx	r3
    1af6:	1e03      	subs	r3, r0, #0
    1af8:	d12e      	bne.n	1b58 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1afa:	69fb      	ldr	r3, [r7, #28]
    1afc:	0018      	movs	r0, r3
    1afe:	4b32      	ldr	r3, [pc, #200]	; (1bc8 <xQueueSemaphoreTake+0x1d8>)
    1b00:	4798      	blx	r3
    1b02:	1e03      	subs	r3, r0, #0
    1b04:	d021      	beq.n	1b4a <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1b06:	69fb      	ldr	r3, [r7, #28]
    1b08:	681b      	ldr	r3, [r3, #0]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d10a      	bne.n	1b24 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
    1b0e:	4b26      	ldr	r3, [pc, #152]	; (1ba8 <xQueueSemaphoreTake+0x1b8>)
    1b10:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1b12:	69fb      	ldr	r3, [r7, #28]
    1b14:	685b      	ldr	r3, [r3, #4]
    1b16:	0018      	movs	r0, r3
    1b18:	4b2c      	ldr	r3, [pc, #176]	; (1bcc <xQueueSemaphoreTake+0x1dc>)
    1b1a:	4798      	blx	r3
    1b1c:	0003      	movs	r3, r0
    1b1e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
    1b20:	4b25      	ldr	r3, [pc, #148]	; (1bb8 <xQueueSemaphoreTake+0x1c8>)
    1b22:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1b24:	69fb      	ldr	r3, [r7, #28]
    1b26:	3324      	adds	r3, #36	; 0x24
    1b28:	683a      	ldr	r2, [r7, #0]
    1b2a:	0011      	movs	r1, r2
    1b2c:	0018      	movs	r0, r3
    1b2e:	4b28      	ldr	r3, [pc, #160]	; (1bd0 <xQueueSemaphoreTake+0x1e0>)
    1b30:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1b32:	69fb      	ldr	r3, [r7, #28]
    1b34:	0018      	movs	r0, r3
    1b36:	4b27      	ldr	r3, [pc, #156]	; (1bd4 <xQueueSemaphoreTake+0x1e4>)
    1b38:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1b3a:	4b27      	ldr	r3, [pc, #156]	; (1bd8 <xQueueSemaphoreTake+0x1e8>)
    1b3c:	4798      	blx	r3
    1b3e:	1e03      	subs	r3, r0, #0
    1b40:	d000      	beq.n	1b44 <xQueueSemaphoreTake+0x154>
    1b42:	e779      	b.n	1a38 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
    1b44:	4b1b      	ldr	r3, [pc, #108]	; (1bb4 <xQueueSemaphoreTake+0x1c4>)
    1b46:	4798      	blx	r3
    1b48:	e776      	b.n	1a38 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    1b4a:	69fb      	ldr	r3, [r7, #28]
    1b4c:	0018      	movs	r0, r3
    1b4e:	4b21      	ldr	r3, [pc, #132]	; (1bd4 <xQueueSemaphoreTake+0x1e4>)
    1b50:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1b52:	4b21      	ldr	r3, [pc, #132]	; (1bd8 <xQueueSemaphoreTake+0x1e8>)
    1b54:	4798      	blx	r3
    1b56:	e76f      	b.n	1a38 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    1b58:	69fb      	ldr	r3, [r7, #28]
    1b5a:	0018      	movs	r0, r3
    1b5c:	4b1d      	ldr	r3, [pc, #116]	; (1bd4 <xQueueSemaphoreTake+0x1e4>)
    1b5e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1b60:	4b1d      	ldr	r3, [pc, #116]	; (1bd8 <xQueueSemaphoreTake+0x1e8>)
    1b62:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1b64:	69fb      	ldr	r3, [r7, #28]
    1b66:	0018      	movs	r0, r3
    1b68:	4b17      	ldr	r3, [pc, #92]	; (1bc8 <xQueueSemaphoreTake+0x1d8>)
    1b6a:	4798      	blx	r3
    1b6c:	1e03      	subs	r3, r0, #0
    1b6e:	d100      	bne.n	1b72 <xQueueSemaphoreTake+0x182>
    1b70:	e762      	b.n	1a38 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    1b72:	6a3b      	ldr	r3, [r7, #32]
    1b74:	2b00      	cmp	r3, #0
    1b76:	d010      	beq.n	1b9a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
    1b78:	4b0b      	ldr	r3, [pc, #44]	; (1ba8 <xQueueSemaphoreTake+0x1b8>)
    1b7a:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    1b7c:	69fb      	ldr	r3, [r7, #28]
    1b7e:	0018      	movs	r0, r3
    1b80:	4b16      	ldr	r3, [pc, #88]	; (1bdc <xQueueSemaphoreTake+0x1ec>)
    1b82:	4798      	blx	r3
    1b84:	0003      	movs	r3, r0
    1b86:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    1b88:	69fb      	ldr	r3, [r7, #28]
    1b8a:	685b      	ldr	r3, [r3, #4]
    1b8c:	697a      	ldr	r2, [r7, #20]
    1b8e:	0011      	movs	r1, r2
    1b90:	0018      	movs	r0, r3
    1b92:	4b13      	ldr	r3, [pc, #76]	; (1be0 <xQueueSemaphoreTake+0x1f0>)
    1b94:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    1b96:	4b08      	ldr	r3, [pc, #32]	; (1bb8 <xQueueSemaphoreTake+0x1c8>)
    1b98:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    1b9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    1b9c:	0018      	movs	r0, r3
    1b9e:	46bd      	mov	sp, r7
    1ba0:	b00a      	add	sp, #40	; 0x28
    1ba2:	bd80      	pop	{r7, pc}
    1ba4:	00002a45 	.word	0x00002a45
    1ba8:	00001141 	.word	0x00001141
    1bac:	00002d11 	.word	0x00002d11
    1bb0:	0000270d 	.word	0x0000270d
    1bb4:	00001121 	.word	0x00001121
    1bb8:	00001165 	.word	0x00001165
    1bbc:	000027cd 	.word	0x000027cd
    1bc0:	000022d1 	.word	0x000022d1
    1bc4:	000027f5 	.word	0x000027f5
    1bc8:	00001e31 	.word	0x00001e31
    1bcc:	00002a7d 	.word	0x00002a7d
    1bd0:	00002675 	.word	0x00002675
    1bd4:	00001d41 	.word	0x00001d41
    1bd8:	000022e9 	.word	0x000022e9
    1bdc:	00001be5 	.word	0x00001be5
    1be0:	00002c21 	.word	0x00002c21

00001be4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    1be4:	b580      	push	{r7, lr}
    1be6:	b084      	sub	sp, #16
    1be8:	af00      	add	r7, sp, #0
    1bea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d006      	beq.n	1c02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    1bf4:	687b      	ldr	r3, [r7, #4]
    1bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1bf8:	681b      	ldr	r3, [r3, #0]
    1bfa:	2205      	movs	r2, #5
    1bfc:	1ad3      	subs	r3, r2, r3
    1bfe:	60fb      	str	r3, [r7, #12]
    1c00:	e001      	b.n	1c06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    1c02:	2300      	movs	r3, #0
    1c04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    1c06:	68fb      	ldr	r3, [r7, #12]
	}
    1c08:	0018      	movs	r0, r3
    1c0a:	46bd      	mov	sp, r7
    1c0c:	b004      	add	sp, #16
    1c0e:	bd80      	pop	{r7, pc}

00001c10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1c10:	b580      	push	{r7, lr}
    1c12:	b086      	sub	sp, #24
    1c14:	af00      	add	r7, sp, #0
    1c16:	60f8      	str	r0, [r7, #12]
    1c18:	60b9      	str	r1, [r7, #8]
    1c1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    1c1c:	2300      	movs	r3, #0
    1c1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1c20:	68fb      	ldr	r3, [r7, #12]
    1c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1c24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1c26:	68fb      	ldr	r3, [r7, #12]
    1c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d10e      	bne.n	1c4c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1c2e:	68fb      	ldr	r3, [r7, #12]
    1c30:	681b      	ldr	r3, [r3, #0]
    1c32:	2b00      	cmp	r3, #0
    1c34:	d14e      	bne.n	1cd4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1c36:	68fb      	ldr	r3, [r7, #12]
    1c38:	685b      	ldr	r3, [r3, #4]
    1c3a:	0018      	movs	r0, r3
    1c3c:	4b2a      	ldr	r3, [pc, #168]	; (1ce8 <prvCopyDataToQueue+0xd8>)
    1c3e:	4798      	blx	r3
    1c40:	0003      	movs	r3, r0
    1c42:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    1c44:	68fb      	ldr	r3, [r7, #12]
    1c46:	2200      	movs	r2, #0
    1c48:	605a      	str	r2, [r3, #4]
    1c4a:	e043      	b.n	1cd4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d119      	bne.n	1c86 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1c52:	68fb      	ldr	r3, [r7, #12]
    1c54:	6898      	ldr	r0, [r3, #8]
    1c56:	68fb      	ldr	r3, [r7, #12]
    1c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1c5a:	68bb      	ldr	r3, [r7, #8]
    1c5c:	0019      	movs	r1, r3
    1c5e:	4b23      	ldr	r3, [pc, #140]	; (1cec <prvCopyDataToQueue+0xdc>)
    1c60:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1c62:	68fb      	ldr	r3, [r7, #12]
    1c64:	689a      	ldr	r2, [r3, #8]
    1c66:	68fb      	ldr	r3, [r7, #12]
    1c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1c6a:	18d2      	adds	r2, r2, r3
    1c6c:	68fb      	ldr	r3, [r7, #12]
    1c6e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1c70:	68fb      	ldr	r3, [r7, #12]
    1c72:	689a      	ldr	r2, [r3, #8]
    1c74:	68fb      	ldr	r3, [r7, #12]
    1c76:	685b      	ldr	r3, [r3, #4]
    1c78:	429a      	cmp	r2, r3
    1c7a:	d32b      	bcc.n	1cd4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1c7c:	68fb      	ldr	r3, [r7, #12]
    1c7e:	681a      	ldr	r2, [r3, #0]
    1c80:	68fb      	ldr	r3, [r7, #12]
    1c82:	609a      	str	r2, [r3, #8]
    1c84:	e026      	b.n	1cd4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1c86:	68fb      	ldr	r3, [r7, #12]
    1c88:	68d8      	ldr	r0, [r3, #12]
    1c8a:	68fb      	ldr	r3, [r7, #12]
    1c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1c8e:	68bb      	ldr	r3, [r7, #8]
    1c90:	0019      	movs	r1, r3
    1c92:	4b16      	ldr	r3, [pc, #88]	; (1cec <prvCopyDataToQueue+0xdc>)
    1c94:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1c96:	68fb      	ldr	r3, [r7, #12]
    1c98:	68da      	ldr	r2, [r3, #12]
    1c9a:	68fb      	ldr	r3, [r7, #12]
    1c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1c9e:	425b      	negs	r3, r3
    1ca0:	18d2      	adds	r2, r2, r3
    1ca2:	68fb      	ldr	r3, [r7, #12]
    1ca4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1ca6:	68fb      	ldr	r3, [r7, #12]
    1ca8:	68da      	ldr	r2, [r3, #12]
    1caa:	68fb      	ldr	r3, [r7, #12]
    1cac:	681b      	ldr	r3, [r3, #0]
    1cae:	429a      	cmp	r2, r3
    1cb0:	d207      	bcs.n	1cc2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1cb2:	68fb      	ldr	r3, [r7, #12]
    1cb4:	685a      	ldr	r2, [r3, #4]
    1cb6:	68fb      	ldr	r3, [r7, #12]
    1cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1cba:	425b      	negs	r3, r3
    1cbc:	18d2      	adds	r2, r2, r3
    1cbe:	68fb      	ldr	r3, [r7, #12]
    1cc0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1cc2:	687b      	ldr	r3, [r7, #4]
    1cc4:	2b02      	cmp	r3, #2
    1cc6:	d105      	bne.n	1cd4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1cc8:	693b      	ldr	r3, [r7, #16]
    1cca:	2b00      	cmp	r3, #0
    1ccc:	d002      	beq.n	1cd4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    1cce:	693b      	ldr	r3, [r7, #16]
    1cd0:	3b01      	subs	r3, #1
    1cd2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    1cd4:	693b      	ldr	r3, [r7, #16]
    1cd6:	1c5a      	adds	r2, r3, #1
    1cd8:	68fb      	ldr	r3, [r7, #12]
    1cda:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    1cdc:	697b      	ldr	r3, [r7, #20]
}
    1cde:	0018      	movs	r0, r3
    1ce0:	46bd      	mov	sp, r7
    1ce2:	b006      	add	sp, #24
    1ce4:	bd80      	pop	{r7, pc}
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	00002b61 	.word	0x00002b61
    1cec:	00005809 	.word	0x00005809

00001cf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	b082      	sub	sp, #8
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	6078      	str	r0, [r7, #4]
    1cf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1cfa:	687b      	ldr	r3, [r7, #4]
    1cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d018      	beq.n	1d34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1d02:	687b      	ldr	r3, [r7, #4]
    1d04:	68da      	ldr	r2, [r3, #12]
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1d0a:	18d2      	adds	r2, r2, r3
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1d10:	687b      	ldr	r3, [r7, #4]
    1d12:	68da      	ldr	r2, [r3, #12]
    1d14:	687b      	ldr	r3, [r7, #4]
    1d16:	685b      	ldr	r3, [r3, #4]
    1d18:	429a      	cmp	r2, r3
    1d1a:	d303      	bcc.n	1d24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	681a      	ldr	r2, [r3, #0]
    1d20:	687b      	ldr	r3, [r7, #4]
    1d22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1d24:	687b      	ldr	r3, [r7, #4]
    1d26:	68d9      	ldr	r1, [r3, #12]
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1d2c:	683b      	ldr	r3, [r7, #0]
    1d2e:	0018      	movs	r0, r3
    1d30:	4b02      	ldr	r3, [pc, #8]	; (1d3c <prvCopyDataFromQueue+0x4c>)
    1d32:	4798      	blx	r3
	}
}
    1d34:	46c0      	nop			; (mov r8, r8)
    1d36:	46bd      	mov	sp, r7
    1d38:	b002      	add	sp, #8
    1d3a:	bd80      	pop	{r7, pc}
    1d3c:	00005809 	.word	0x00005809

00001d40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1d40:	b580      	push	{r7, lr}
    1d42:	b084      	sub	sp, #16
    1d44:	af00      	add	r7, sp, #0
    1d46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1d48:	4b34      	ldr	r3, [pc, #208]	; (1e1c <prvUnlockQueue+0xdc>)
    1d4a:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    1d4c:	230f      	movs	r3, #15
    1d4e:	18fb      	adds	r3, r7, r3
    1d50:	687a      	ldr	r2, [r7, #4]
    1d52:	2145      	movs	r1, #69	; 0x45
    1d54:	5c52      	ldrb	r2, [r2, r1]
    1d56:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1d58:	e022      	b.n	1da0 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    1d5a:	687b      	ldr	r3, [r7, #4]
    1d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d009      	beq.n	1d76 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	2100      	movs	r1, #0
    1d66:	0018      	movs	r0, r3
    1d68:	4b2d      	ldr	r3, [pc, #180]	; (1e20 <prvUnlockQueue+0xe0>)
    1d6a:	4798      	blx	r3
    1d6c:	1e03      	subs	r3, r0, #0
    1d6e:	d00f      	beq.n	1d90 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    1d70:	4b2c      	ldr	r3, [pc, #176]	; (1e24 <prvUnlockQueue+0xe4>)
    1d72:	4798      	blx	r3
    1d74:	e00c      	b.n	1d90 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1d76:	687b      	ldr	r3, [r7, #4]
    1d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d7a:	2b00      	cmp	r3, #0
    1d7c:	d017      	beq.n	1dae <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	3324      	adds	r3, #36	; 0x24
    1d82:	0018      	movs	r0, r3
    1d84:	4b28      	ldr	r3, [pc, #160]	; (1e28 <prvUnlockQueue+0xe8>)
    1d86:	4798      	blx	r3
    1d88:	1e03      	subs	r3, r0, #0
    1d8a:	d001      	beq.n	1d90 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    1d8c:	4b25      	ldr	r3, [pc, #148]	; (1e24 <prvUnlockQueue+0xe4>)
    1d8e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    1d90:	230f      	movs	r3, #15
    1d92:	18fb      	adds	r3, r7, r3
    1d94:	781b      	ldrb	r3, [r3, #0]
    1d96:	3b01      	subs	r3, #1
    1d98:	b2da      	uxtb	r2, r3
    1d9a:	230f      	movs	r3, #15
    1d9c:	18fb      	adds	r3, r7, r3
    1d9e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1da0:	230f      	movs	r3, #15
    1da2:	18fb      	adds	r3, r7, r3
    1da4:	781b      	ldrb	r3, [r3, #0]
    1da6:	b25b      	sxtb	r3, r3
    1da8:	2b00      	cmp	r3, #0
    1daa:	dcd6      	bgt.n	1d5a <prvUnlockQueue+0x1a>
    1dac:	e000      	b.n	1db0 <prvUnlockQueue+0x70>
						break;
    1dae:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    1db0:	687b      	ldr	r3, [r7, #4]
    1db2:	2245      	movs	r2, #69	; 0x45
    1db4:	21ff      	movs	r1, #255	; 0xff
    1db6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    1db8:	4b1c      	ldr	r3, [pc, #112]	; (1e2c <prvUnlockQueue+0xec>)
    1dba:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1dbc:	4b17      	ldr	r3, [pc, #92]	; (1e1c <prvUnlockQueue+0xdc>)
    1dbe:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    1dc0:	230e      	movs	r3, #14
    1dc2:	18fb      	adds	r3, r7, r3
    1dc4:	687a      	ldr	r2, [r7, #4]
    1dc6:	2144      	movs	r1, #68	; 0x44
    1dc8:	5c52      	ldrb	r2, [r2, r1]
    1dca:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    1dcc:	e014      	b.n	1df8 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	691b      	ldr	r3, [r3, #16]
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d017      	beq.n	1e06 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1dd6:	687b      	ldr	r3, [r7, #4]
    1dd8:	3310      	adds	r3, #16
    1dda:	0018      	movs	r0, r3
    1ddc:	4b12      	ldr	r3, [pc, #72]	; (1e28 <prvUnlockQueue+0xe8>)
    1dde:	4798      	blx	r3
    1de0:	1e03      	subs	r3, r0, #0
    1de2:	d001      	beq.n	1de8 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    1de4:	4b0f      	ldr	r3, [pc, #60]	; (1e24 <prvUnlockQueue+0xe4>)
    1de6:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    1de8:	230e      	movs	r3, #14
    1dea:	18fb      	adds	r3, r7, r3
    1dec:	781b      	ldrb	r3, [r3, #0]
    1dee:	3b01      	subs	r3, #1
    1df0:	b2da      	uxtb	r2, r3
    1df2:	230e      	movs	r3, #14
    1df4:	18fb      	adds	r3, r7, r3
    1df6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    1df8:	230e      	movs	r3, #14
    1dfa:	18fb      	adds	r3, r7, r3
    1dfc:	781b      	ldrb	r3, [r3, #0]
    1dfe:	b25b      	sxtb	r3, r3
    1e00:	2b00      	cmp	r3, #0
    1e02:	dce4      	bgt.n	1dce <prvUnlockQueue+0x8e>
    1e04:	e000      	b.n	1e08 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    1e06:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	2244      	movs	r2, #68	; 0x44
    1e0c:	21ff      	movs	r1, #255	; 0xff
    1e0e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    1e10:	4b06      	ldr	r3, [pc, #24]	; (1e2c <prvUnlockQueue+0xec>)
    1e12:	4798      	blx	r3
}
    1e14:	46c0      	nop			; (mov r8, r8)
    1e16:	46bd      	mov	sp, r7
    1e18:	b004      	add	sp, #16
    1e1a:	bd80      	pop	{r7, pc}
    1e1c:	00001141 	.word	0x00001141
    1e20:	00001f15 	.word	0x00001f15
    1e24:	000028a1 	.word	0x000028a1
    1e28:	0000270d 	.word	0x0000270d
    1e2c:	00001165 	.word	0x00001165

00001e30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    1e30:	b580      	push	{r7, lr}
    1e32:	b084      	sub	sp, #16
    1e34:	af00      	add	r7, sp, #0
    1e36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1e38:	4b08      	ldr	r3, [pc, #32]	; (1e5c <prvIsQueueEmpty+0x2c>)
    1e3a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1e40:	2b00      	cmp	r3, #0
    1e42:	d102      	bne.n	1e4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    1e44:	2301      	movs	r3, #1
    1e46:	60fb      	str	r3, [r7, #12]
    1e48:	e001      	b.n	1e4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    1e4a:	2300      	movs	r3, #0
    1e4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    1e4e:	4b04      	ldr	r3, [pc, #16]	; (1e60 <prvIsQueueEmpty+0x30>)
    1e50:	4798      	blx	r3

	return xReturn;
    1e52:	68fb      	ldr	r3, [r7, #12]
}
    1e54:	0018      	movs	r0, r3
    1e56:	46bd      	mov	sp, r7
    1e58:	b004      	add	sp, #16
    1e5a:	bd80      	pop	{r7, pc}
    1e5c:	00001141 	.word	0x00001141
    1e60:	00001165 	.word	0x00001165

00001e64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    1e64:	b580      	push	{r7, lr}
    1e66:	b084      	sub	sp, #16
    1e68:	af00      	add	r7, sp, #0
    1e6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1e6c:	4b09      	ldr	r3, [pc, #36]	; (1e94 <prvIsQueueFull+0x30>)
    1e6e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1e70:	687b      	ldr	r3, [r7, #4]
    1e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1e74:	687b      	ldr	r3, [r7, #4]
    1e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1e78:	429a      	cmp	r2, r3
    1e7a:	d102      	bne.n	1e82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    1e7c:	2301      	movs	r3, #1
    1e7e:	60fb      	str	r3, [r7, #12]
    1e80:	e001      	b.n	1e86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    1e82:	2300      	movs	r3, #0
    1e84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    1e86:	4b04      	ldr	r3, [pc, #16]	; (1e98 <prvIsQueueFull+0x34>)
    1e88:	4798      	blx	r3

	return xReturn;
    1e8a:	68fb      	ldr	r3, [r7, #12]
}
    1e8c:	0018      	movs	r0, r3
    1e8e:	46bd      	mov	sp, r7
    1e90:	b004      	add	sp, #16
    1e92:	bd80      	pop	{r7, pc}
    1e94:	00001141 	.word	0x00001141
    1e98:	00001165 	.word	0x00001165

00001e9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1e9c:	b580      	push	{r7, lr}
    1e9e:	b086      	sub	sp, #24
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	60f8      	str	r0, [r7, #12]
    1ea4:	60b9      	str	r1, [r7, #8]
    1ea6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1ea8:	68fb      	ldr	r3, [r7, #12]
    1eaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1eac:	4b15      	ldr	r3, [pc, #84]	; (1f04 <vQueueWaitForMessageRestricted+0x68>)
    1eae:	4798      	blx	r3
    1eb0:	697b      	ldr	r3, [r7, #20]
    1eb2:	2244      	movs	r2, #68	; 0x44
    1eb4:	5c9b      	ldrb	r3, [r3, r2]
    1eb6:	b25b      	sxtb	r3, r3
    1eb8:	3301      	adds	r3, #1
    1eba:	d103      	bne.n	1ec4 <vQueueWaitForMessageRestricted+0x28>
    1ebc:	697b      	ldr	r3, [r7, #20]
    1ebe:	2244      	movs	r2, #68	; 0x44
    1ec0:	2100      	movs	r1, #0
    1ec2:	5499      	strb	r1, [r3, r2]
    1ec4:	697b      	ldr	r3, [r7, #20]
    1ec6:	2245      	movs	r2, #69	; 0x45
    1ec8:	5c9b      	ldrb	r3, [r3, r2]
    1eca:	b25b      	sxtb	r3, r3
    1ecc:	3301      	adds	r3, #1
    1ece:	d103      	bne.n	1ed8 <vQueueWaitForMessageRestricted+0x3c>
    1ed0:	697b      	ldr	r3, [r7, #20]
    1ed2:	2245      	movs	r2, #69	; 0x45
    1ed4:	2100      	movs	r1, #0
    1ed6:	5499      	strb	r1, [r3, r2]
    1ed8:	4b0b      	ldr	r3, [pc, #44]	; (1f08 <vQueueWaitForMessageRestricted+0x6c>)
    1eda:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1edc:	697b      	ldr	r3, [r7, #20]
    1ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d106      	bne.n	1ef2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1ee4:	697b      	ldr	r3, [r7, #20]
    1ee6:	3324      	adds	r3, #36	; 0x24
    1ee8:	687a      	ldr	r2, [r7, #4]
    1eea:	68b9      	ldr	r1, [r7, #8]
    1eec:	0018      	movs	r0, r3
    1eee:	4b07      	ldr	r3, [pc, #28]	; (1f0c <vQueueWaitForMessageRestricted+0x70>)
    1ef0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1ef2:	697b      	ldr	r3, [r7, #20]
    1ef4:	0018      	movs	r0, r3
    1ef6:	4b06      	ldr	r3, [pc, #24]	; (1f10 <vQueueWaitForMessageRestricted+0x74>)
    1ef8:	4798      	blx	r3
	}
    1efa:	46c0      	nop			; (mov r8, r8)
    1efc:	46bd      	mov	sp, r7
    1efe:	b006      	add	sp, #24
    1f00:	bd80      	pop	{r7, pc}
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	00001141 	.word	0x00001141
    1f08:	00001165 	.word	0x00001165
    1f0c:	000026b9 	.word	0x000026b9
    1f10:	00001d41 	.word	0x00001d41

00001f14 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    1f14:	b580      	push	{r7, lr}
    1f16:	b086      	sub	sp, #24
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
    1f1c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    1f1e:	687b      	ldr	r3, [r7, #4]
    1f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1f22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    1f24:	2300      	movs	r3, #0
    1f26:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    1f28:	693b      	ldr	r3, [r7, #16]
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d101      	bne.n	1f32 <prvNotifyQueueSetContainer+0x1e>
    1f2e:	b672      	cpsid	i
    1f30:	e7fe      	b.n	1f30 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    1f32:	693b      	ldr	r3, [r7, #16]
    1f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1f36:	693b      	ldr	r3, [r7, #16]
    1f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f3a:	429a      	cmp	r2, r3
    1f3c:	d301      	bcc.n	1f42 <prvNotifyQueueSetContainer+0x2e>
    1f3e:	b672      	cpsid	i
    1f40:	e7fe      	b.n	1f40 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1f42:	693b      	ldr	r3, [r7, #16]
    1f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1f46:	693b      	ldr	r3, [r7, #16]
    1f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f4a:	429a      	cmp	r2, r3
    1f4c:	d22a      	bcs.n	1fa4 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    1f4e:	230f      	movs	r3, #15
    1f50:	18fb      	adds	r3, r7, r3
    1f52:	693a      	ldr	r2, [r7, #16]
    1f54:	2145      	movs	r1, #69	; 0x45
    1f56:	5c52      	ldrb	r2, [r2, r1]
    1f58:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    1f5a:	683a      	ldr	r2, [r7, #0]
    1f5c:	1d39      	adds	r1, r7, #4
    1f5e:	693b      	ldr	r3, [r7, #16]
    1f60:	0018      	movs	r0, r3
    1f62:	4b13      	ldr	r3, [pc, #76]	; (1fb0 <prvNotifyQueueSetContainer+0x9c>)
    1f64:	4798      	blx	r3
    1f66:	0003      	movs	r3, r0
    1f68:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    1f6a:	230f      	movs	r3, #15
    1f6c:	18fb      	adds	r3, r7, r3
    1f6e:	781b      	ldrb	r3, [r3, #0]
    1f70:	b25b      	sxtb	r3, r3
    1f72:	3301      	adds	r3, #1
    1f74:	d10d      	bne.n	1f92 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    1f76:	693b      	ldr	r3, [r7, #16]
    1f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d012      	beq.n	1fa4 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    1f7e:	693b      	ldr	r3, [r7, #16]
    1f80:	3324      	adds	r3, #36	; 0x24
    1f82:	0018      	movs	r0, r3
    1f84:	4b0b      	ldr	r3, [pc, #44]	; (1fb4 <prvNotifyQueueSetContainer+0xa0>)
    1f86:	4798      	blx	r3
    1f88:	1e03      	subs	r3, r0, #0
    1f8a:	d00b      	beq.n	1fa4 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    1f8c:	2301      	movs	r3, #1
    1f8e:	617b      	str	r3, [r7, #20]
    1f90:	e008      	b.n	1fa4 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1f92:	230f      	movs	r3, #15
    1f94:	18fb      	adds	r3, r7, r3
    1f96:	781b      	ldrb	r3, [r3, #0]
    1f98:	3301      	adds	r3, #1
    1f9a:	b2db      	uxtb	r3, r3
    1f9c:	b259      	sxtb	r1, r3
    1f9e:	693b      	ldr	r3, [r7, #16]
    1fa0:	2245      	movs	r2, #69	; 0x45
    1fa2:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    1fa4:	697b      	ldr	r3, [r7, #20]
	}
    1fa6:	0018      	movs	r0, r3
    1fa8:	46bd      	mov	sp, r7
    1faa:	b006      	add	sp, #24
    1fac:	bd80      	pop	{r7, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	00001c11 	.word	0x00001c11
    1fb4:	0000270d 	.word	0x0000270d

00001fb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    1fb8:	b590      	push	{r4, r7, lr}
    1fba:	b08d      	sub	sp, #52	; 0x34
    1fbc:	af04      	add	r7, sp, #16
    1fbe:	60f8      	str	r0, [r7, #12]
    1fc0:	60b9      	str	r1, [r7, #8]
    1fc2:	603b      	str	r3, [r7, #0]
    1fc4:	1dbb      	adds	r3, r7, #6
    1fc6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1fc8:	1dbb      	adds	r3, r7, #6
    1fca:	881b      	ldrh	r3, [r3, #0]
    1fcc:	009b      	lsls	r3, r3, #2
    1fce:	0018      	movs	r0, r3
    1fd0:	4b1d      	ldr	r3, [pc, #116]	; (2048 <STACK_SIZE+0x48>)
    1fd2:	4798      	blx	r3
    1fd4:	0003      	movs	r3, r0
    1fd6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    1fd8:	697b      	ldr	r3, [r7, #20]
    1fda:	2b00      	cmp	r3, #0
    1fdc:	d010      	beq.n	2000 <STACK_SIZE>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    1fde:	2054      	movs	r0, #84	; 0x54
    1fe0:	4b19      	ldr	r3, [pc, #100]	; (2048 <STACK_SIZE+0x48>)
    1fe2:	4798      	blx	r3
    1fe4:	0003      	movs	r3, r0
    1fe6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    1fe8:	69fb      	ldr	r3, [r7, #28]
    1fea:	2b00      	cmp	r3, #0
    1fec:	d003      	beq.n	1ff6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    1fee:	69fb      	ldr	r3, [r7, #28]
    1ff0:	697a      	ldr	r2, [r7, #20]
    1ff2:	631a      	str	r2, [r3, #48]	; 0x30
    1ff4:	e006      	b.n	2004 <STACK_SIZE+0x4>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    1ff6:	697b      	ldr	r3, [r7, #20]
    1ff8:	0018      	movs	r0, r3
    1ffa:	4b14      	ldr	r3, [pc, #80]	; (204c <STACK_SIZE+0x4c>)
    1ffc:	4798      	blx	r3
    1ffe:	e001      	b.n	2004 <STACK_SIZE+0x4>
				}
			}
			else
			{
				pxNewTCB = NULL;
    2000:	2300      	movs	r3, #0
    2002:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    2004:	69fb      	ldr	r3, [r7, #28]
    2006:	2b00      	cmp	r3, #0
    2008:	d016      	beq.n	2038 <STACK_SIZE+0x38>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    200a:	1dbb      	adds	r3, r7, #6
    200c:	881a      	ldrh	r2, [r3, #0]
    200e:	683c      	ldr	r4, [r7, #0]
    2010:	68b9      	ldr	r1, [r7, #8]
    2012:	68f8      	ldr	r0, [r7, #12]
    2014:	2300      	movs	r3, #0
    2016:	9303      	str	r3, [sp, #12]
    2018:	69fb      	ldr	r3, [r7, #28]
    201a:	9302      	str	r3, [sp, #8]
    201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    201e:	9301      	str	r3, [sp, #4]
    2020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2022:	9300      	str	r3, [sp, #0]
    2024:	0023      	movs	r3, r4
    2026:	4c0a      	ldr	r4, [pc, #40]	; (2050 <STACK_SIZE+0x50>)
    2028:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    202a:	69fb      	ldr	r3, [r7, #28]
    202c:	0018      	movs	r0, r3
    202e:	4b09      	ldr	r3, [pc, #36]	; (2054 <STACK_SIZE+0x54>)
    2030:	4798      	blx	r3
			xReturn = pdPASS;
    2032:	2301      	movs	r3, #1
    2034:	61bb      	str	r3, [r7, #24]
    2036:	e002      	b.n	203e <STACK_SIZE+0x3e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2038:	2301      	movs	r3, #1
    203a:	425b      	negs	r3, r3
    203c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    203e:	69bb      	ldr	r3, [r7, #24]
	}
    2040:	0018      	movs	r0, r3
    2042:	46bd      	mov	sp, r7
    2044:	b009      	add	sp, #36	; 0x24
    2046:	bd90      	pop	{r4, r7, pc}
    2048:	00001281 	.word	0x00001281
    204c:	00001321 	.word	0x00001321
    2050:	00002059 	.word	0x00002059
    2054:	00002169 	.word	0x00002169

00002058 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    2058:	b580      	push	{r7, lr}
    205a:	b086      	sub	sp, #24
    205c:	af00      	add	r7, sp, #0
    205e:	60f8      	str	r0, [r7, #12]
    2060:	60b9      	str	r1, [r7, #8]
    2062:	607a      	str	r2, [r7, #4]
    2064:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    2066:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2068:	6b18      	ldr	r0, [r3, #48]	; 0x30
    206a:	687b      	ldr	r3, [r7, #4]
    206c:	009b      	lsls	r3, r3, #2
    206e:	001a      	movs	r2, r3
    2070:	21a5      	movs	r1, #165	; 0xa5
    2072:	4b39      	ldr	r3, [pc, #228]	; (2158 <prvInitialiseNewTask+0x100>)
    2074:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    2076:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    207a:	687b      	ldr	r3, [r7, #4]
    207c:	4937      	ldr	r1, [pc, #220]	; (215c <prvInitialiseNewTask+0x104>)
    207e:	468c      	mov	ip, r1
    2080:	4463      	add	r3, ip
    2082:	009b      	lsls	r3, r3, #2
    2084:	18d3      	adds	r3, r2, r3
    2086:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2088:	693b      	ldr	r3, [r7, #16]
    208a:	2207      	movs	r2, #7
    208c:	4393      	bics	r3, r2
    208e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    2090:	693b      	ldr	r3, [r7, #16]
    2092:	2207      	movs	r2, #7
    2094:	4013      	ands	r3, r2
    2096:	d001      	beq.n	209c <prvInitialiseNewTask+0x44>
    2098:	b672      	cpsid	i
    209a:	e7fe      	b.n	209a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    209c:	2300      	movs	r3, #0
    209e:	617b      	str	r3, [r7, #20]
    20a0:	e013      	b.n	20ca <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    20a2:	68ba      	ldr	r2, [r7, #8]
    20a4:	697b      	ldr	r3, [r7, #20]
    20a6:	18d3      	adds	r3, r2, r3
    20a8:	7818      	ldrb	r0, [r3, #0]
    20aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    20ac:	2134      	movs	r1, #52	; 0x34
    20ae:	697b      	ldr	r3, [r7, #20]
    20b0:	18d3      	adds	r3, r2, r3
    20b2:	185b      	adds	r3, r3, r1
    20b4:	1c02      	adds	r2, r0, #0
    20b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    20b8:	68ba      	ldr	r2, [r7, #8]
    20ba:	697b      	ldr	r3, [r7, #20]
    20bc:	18d3      	adds	r3, r2, r3
    20be:	781b      	ldrb	r3, [r3, #0]
    20c0:	2b00      	cmp	r3, #0
    20c2:	d006      	beq.n	20d2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    20c4:	697b      	ldr	r3, [r7, #20]
    20c6:	3301      	adds	r3, #1
    20c8:	617b      	str	r3, [r7, #20]
    20ca:	697b      	ldr	r3, [r7, #20]
    20cc:	2b07      	cmp	r3, #7
    20ce:	d9e8      	bls.n	20a2 <prvInitialiseNewTask+0x4a>
    20d0:	e000      	b.n	20d4 <prvInitialiseNewTask+0x7c>
		{
			break;
    20d2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    20d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    20d6:	223b      	movs	r2, #59	; 0x3b
    20d8:	2100      	movs	r1, #0
    20da:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    20dc:	6a3b      	ldr	r3, [r7, #32]
    20de:	2b04      	cmp	r3, #4
    20e0:	d901      	bls.n	20e6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    20e2:	2304      	movs	r3, #4
    20e4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    20e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    20e8:	6a3a      	ldr	r2, [r7, #32]
    20ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    20ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    20ee:	6a3a      	ldr	r2, [r7, #32]
    20f0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    20f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    20f4:	2200      	movs	r2, #0
    20f6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    20f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    20fa:	3304      	adds	r3, #4
    20fc:	0018      	movs	r0, r3
    20fe:	4b18      	ldr	r3, [pc, #96]	; (2160 <prvInitialiseNewTask+0x108>)
    2100:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    2102:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2104:	3318      	adds	r3, #24
    2106:	0018      	movs	r0, r3
    2108:	4b15      	ldr	r3, [pc, #84]	; (2160 <prvInitialiseNewTask+0x108>)
    210a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    210e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2110:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2112:	6a3b      	ldr	r3, [r7, #32]
    2114:	2205      	movs	r2, #5
    2116:	1ad2      	subs	r2, r2, r3
    2118:	6abb      	ldr	r3, [r7, #40]	; 0x28
    211a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    211e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2120:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    2122:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2124:	2200      	movs	r2, #0
    2126:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2128:	6abb      	ldr	r3, [r7, #40]	; 0x28
    212a:	2250      	movs	r2, #80	; 0x50
    212c:	2100      	movs	r1, #0
    212e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2130:	683a      	ldr	r2, [r7, #0]
    2132:	68f9      	ldr	r1, [r7, #12]
    2134:	693b      	ldr	r3, [r7, #16]
    2136:	0018      	movs	r0, r3
    2138:	4b0a      	ldr	r3, [pc, #40]	; (2164 <prvInitialiseNewTask+0x10c>)
    213a:	4798      	blx	r3
    213c:	0002      	movs	r2, r0
    213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2140:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    2142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2144:	2b00      	cmp	r3, #0
    2146:	d002      	beq.n	214e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    214a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    214c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	46bd      	mov	sp, r7
    2152:	b006      	add	sp, #24
    2154:	bd80      	pop	{r7, pc}
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	0000581b 	.word	0x0000581b
    215c:	3fffffff 	.word	0x3fffffff
    2160:	00000eeb 	.word	0x00000eeb
    2164:	00001001 	.word	0x00001001

00002168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    2168:	b580      	push	{r7, lr}
    216a:	b082      	sub	sp, #8
    216c:	af00      	add	r7, sp, #0
    216e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    2170:	4b2b      	ldr	r3, [pc, #172]	; (2220 <prvAddNewTaskToReadyList+0xb8>)
    2172:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    2174:	4b2b      	ldr	r3, [pc, #172]	; (2224 <prvAddNewTaskToReadyList+0xbc>)
    2176:	681b      	ldr	r3, [r3, #0]
    2178:	1c5a      	adds	r2, r3, #1
    217a:	4b2a      	ldr	r3, [pc, #168]	; (2224 <prvAddNewTaskToReadyList+0xbc>)
    217c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    217e:	4b2a      	ldr	r3, [pc, #168]	; (2228 <prvAddNewTaskToReadyList+0xc0>)
    2180:	681b      	ldr	r3, [r3, #0]
    2182:	2b00      	cmp	r3, #0
    2184:	d109      	bne.n	219a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    2186:	4b28      	ldr	r3, [pc, #160]	; (2228 <prvAddNewTaskToReadyList+0xc0>)
    2188:	687a      	ldr	r2, [r7, #4]
    218a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    218c:	4b25      	ldr	r3, [pc, #148]	; (2224 <prvAddNewTaskToReadyList+0xbc>)
    218e:	681b      	ldr	r3, [r3, #0]
    2190:	2b01      	cmp	r3, #1
    2192:	d110      	bne.n	21b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    2194:	4b25      	ldr	r3, [pc, #148]	; (222c <prvAddNewTaskToReadyList+0xc4>)
    2196:	4798      	blx	r3
    2198:	e00d      	b.n	21b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    219a:	4b25      	ldr	r3, [pc, #148]	; (2230 <prvAddNewTaskToReadyList+0xc8>)
    219c:	681b      	ldr	r3, [r3, #0]
    219e:	2b00      	cmp	r3, #0
    21a0:	d109      	bne.n	21b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    21a2:	4b21      	ldr	r3, [pc, #132]	; (2228 <prvAddNewTaskToReadyList+0xc0>)
    21a4:	681b      	ldr	r3, [r3, #0]
    21a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    21a8:	687b      	ldr	r3, [r7, #4]
    21aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    21ac:	429a      	cmp	r2, r3
    21ae:	d802      	bhi.n	21b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    21b0:	4b1d      	ldr	r3, [pc, #116]	; (2228 <prvAddNewTaskToReadyList+0xc0>)
    21b2:	687a      	ldr	r2, [r7, #4]
    21b4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    21b6:	4b1f      	ldr	r3, [pc, #124]	; (2234 <prvAddNewTaskToReadyList+0xcc>)
    21b8:	681b      	ldr	r3, [r3, #0]
    21ba:	1c5a      	adds	r2, r3, #1
    21bc:	4b1d      	ldr	r3, [pc, #116]	; (2234 <prvAddNewTaskToReadyList+0xcc>)
    21be:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    21c0:	4b1c      	ldr	r3, [pc, #112]	; (2234 <prvAddNewTaskToReadyList+0xcc>)
    21c2:	681a      	ldr	r2, [r3, #0]
    21c4:	687b      	ldr	r3, [r7, #4]
    21c6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    21cc:	4b1a      	ldr	r3, [pc, #104]	; (2238 <prvAddNewTaskToReadyList+0xd0>)
    21ce:	681b      	ldr	r3, [r3, #0]
    21d0:	429a      	cmp	r2, r3
    21d2:	d903      	bls.n	21dc <prvAddNewTaskToReadyList+0x74>
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    21d8:	4b17      	ldr	r3, [pc, #92]	; (2238 <prvAddNewTaskToReadyList+0xd0>)
    21da:	601a      	str	r2, [r3, #0]
    21dc:	687b      	ldr	r3, [r7, #4]
    21de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    21e0:	0013      	movs	r3, r2
    21e2:	009b      	lsls	r3, r3, #2
    21e4:	189b      	adds	r3, r3, r2
    21e6:	009b      	lsls	r3, r3, #2
    21e8:	4a14      	ldr	r2, [pc, #80]	; (223c <prvAddNewTaskToReadyList+0xd4>)
    21ea:	189a      	adds	r2, r3, r2
    21ec:	687b      	ldr	r3, [r7, #4]
    21ee:	3304      	adds	r3, #4
    21f0:	0019      	movs	r1, r3
    21f2:	0010      	movs	r0, r2
    21f4:	4b12      	ldr	r3, [pc, #72]	; (2240 <prvAddNewTaskToReadyList+0xd8>)
    21f6:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    21f8:	4b12      	ldr	r3, [pc, #72]	; (2244 <prvAddNewTaskToReadyList+0xdc>)
    21fa:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    21fc:	4b0c      	ldr	r3, [pc, #48]	; (2230 <prvAddNewTaskToReadyList+0xc8>)
    21fe:	681b      	ldr	r3, [r3, #0]
    2200:	2b00      	cmp	r3, #0
    2202:	d008      	beq.n	2216 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    2204:	4b08      	ldr	r3, [pc, #32]	; (2228 <prvAddNewTaskToReadyList+0xc0>)
    2206:	681b      	ldr	r3, [r3, #0]
    2208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    220a:	687b      	ldr	r3, [r7, #4]
    220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    220e:	429a      	cmp	r2, r3
    2210:	d201      	bcs.n	2216 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
    2212:	4b0d      	ldr	r3, [pc, #52]	; (2248 <prvAddNewTaskToReadyList+0xe0>)
    2214:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    2216:	46c0      	nop			; (mov r8, r8)
    2218:	46bd      	mov	sp, r7
    221a:	b002      	add	sp, #8
    221c:	bd80      	pop	{r7, pc}
    221e:	46c0      	nop			; (mov r8, r8)
    2220:	00001141 	.word	0x00001141
    2224:	200031d8 	.word	0x200031d8
    2228:	20003100 	.word	0x20003100
    222c:	000028dd 	.word	0x000028dd
    2230:	200031e4 	.word	0x200031e4
    2234:	200031f4 	.word	0x200031f4
    2238:	200031e0 	.word	0x200031e0
    223c:	20003104 	.word	0x20003104
    2240:	00000f01 	.word	0x00000f01
    2244:	00001165 	.word	0x00001165
    2248:	00001121 	.word	0x00001121

0000224c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    224c:	b590      	push	{r4, r7, lr}
    224e:	b085      	sub	sp, #20
    2250:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    2252:	4916      	ldr	r1, [pc, #88]	; (22ac <vTaskStartScheduler+0x60>)
    2254:	4816      	ldr	r0, [pc, #88]	; (22b0 <vTaskStartScheduler+0x64>)
    2256:	4b17      	ldr	r3, [pc, #92]	; (22b4 <vTaskStartScheduler+0x68>)
    2258:	9301      	str	r3, [sp, #4]
    225a:	2300      	movs	r3, #0
    225c:	9300      	str	r3, [sp, #0]
    225e:	2300      	movs	r3, #0
    2260:	2264      	movs	r2, #100	; 0x64
    2262:	4c15      	ldr	r4, [pc, #84]	; (22b8 <vTaskStartScheduler+0x6c>)
    2264:	47a0      	blx	r4
    2266:	0003      	movs	r3, r0
    2268:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	2b01      	cmp	r3, #1
    226e:	d103      	bne.n	2278 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    2270:	4b12      	ldr	r3, [pc, #72]	; (22bc <vTaskStartScheduler+0x70>)
    2272:	4798      	blx	r3
    2274:	0003      	movs	r3, r0
    2276:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	2b01      	cmp	r3, #1
    227c:	d10d      	bne.n	229a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    227e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    2280:	4b0f      	ldr	r3, [pc, #60]	; (22c0 <vTaskStartScheduler+0x74>)
    2282:	2201      	movs	r2, #1
    2284:	4252      	negs	r2, r2
    2286:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    2288:	4b0e      	ldr	r3, [pc, #56]	; (22c4 <vTaskStartScheduler+0x78>)
    228a:	2201      	movs	r2, #1
    228c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    228e:	4b0e      	ldr	r3, [pc, #56]	; (22c8 <vTaskStartScheduler+0x7c>)
    2290:	2200      	movs	r2, #0
    2292:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2294:	4b0d      	ldr	r3, [pc, #52]	; (22cc <vTaskStartScheduler+0x80>)
    2296:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    2298:	e004      	b.n	22a4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    229a:	687b      	ldr	r3, [r7, #4]
    229c:	3301      	adds	r3, #1
    229e:	d101      	bne.n	22a4 <vTaskStartScheduler+0x58>
    22a0:	b672      	cpsid	i
    22a2:	e7fe      	b.n	22a2 <vTaskStartScheduler+0x56>
}
    22a4:	46c0      	nop			; (mov r8, r8)
    22a6:	46bd      	mov	sp, r7
    22a8:	b003      	add	sp, #12
    22aa:	bd90      	pop	{r4, r7, pc}
    22ac:	00006300 	.word	0x00006300
    22b0:	000028b5 	.word	0x000028b5
    22b4:	200031fc 	.word	0x200031fc
    22b8:	00001fb9 	.word	0x00001fb9
    22bc:	00002de9 	.word	0x00002de9
    22c0:	200031f8 	.word	0x200031f8
    22c4:	200031e4 	.word	0x200031e4
    22c8:	200031dc 	.word	0x200031dc
    22cc:	000010c9 	.word	0x000010c9

000022d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    22d0:	b580      	push	{r7, lr}
    22d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    22d4:	4b03      	ldr	r3, [pc, #12]	; (22e4 <vTaskSuspendAll+0x14>)
    22d6:	681b      	ldr	r3, [r3, #0]
    22d8:	1c5a      	adds	r2, r3, #1
    22da:	4b02      	ldr	r3, [pc, #8]	; (22e4 <vTaskSuspendAll+0x14>)
    22dc:	601a      	str	r2, [r3, #0]
}
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	46bd      	mov	sp, r7
    22e2:	bd80      	pop	{r7, pc}
    22e4:	20003200 	.word	0x20003200

000022e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    22e8:	b580      	push	{r7, lr}
    22ea:	b084      	sub	sp, #16
    22ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    22ee:	2300      	movs	r3, #0
    22f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    22f2:	2300      	movs	r3, #0
    22f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    22f6:	4b3a      	ldr	r3, [pc, #232]	; (23e0 <xTaskResumeAll+0xf8>)
    22f8:	681b      	ldr	r3, [r3, #0]
    22fa:	2b00      	cmp	r3, #0
    22fc:	d101      	bne.n	2302 <xTaskResumeAll+0x1a>
    22fe:	b672      	cpsid	i
    2300:	e7fe      	b.n	2300 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2302:	4b38      	ldr	r3, [pc, #224]	; (23e4 <xTaskResumeAll+0xfc>)
    2304:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    2306:	4b36      	ldr	r3, [pc, #216]	; (23e0 <xTaskResumeAll+0xf8>)
    2308:	681b      	ldr	r3, [r3, #0]
    230a:	1e5a      	subs	r2, r3, #1
    230c:	4b34      	ldr	r3, [pc, #208]	; (23e0 <xTaskResumeAll+0xf8>)
    230e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2310:	4b33      	ldr	r3, [pc, #204]	; (23e0 <xTaskResumeAll+0xf8>)
    2312:	681b      	ldr	r3, [r3, #0]
    2314:	2b00      	cmp	r3, #0
    2316:	d15b      	bne.n	23d0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2318:	4b33      	ldr	r3, [pc, #204]	; (23e8 <xTaskResumeAll+0x100>)
    231a:	681b      	ldr	r3, [r3, #0]
    231c:	2b00      	cmp	r3, #0
    231e:	d057      	beq.n	23d0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2320:	e02f      	b.n	2382 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2322:	4b32      	ldr	r3, [pc, #200]	; (23ec <xTaskResumeAll+0x104>)
    2324:	68db      	ldr	r3, [r3, #12]
    2326:	68db      	ldr	r3, [r3, #12]
    2328:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    232a:	68fb      	ldr	r3, [r7, #12]
    232c:	3318      	adds	r3, #24
    232e:	0018      	movs	r0, r3
    2330:	4b2f      	ldr	r3, [pc, #188]	; (23f0 <xTaskResumeAll+0x108>)
    2332:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2334:	68fb      	ldr	r3, [r7, #12]
    2336:	3304      	adds	r3, #4
    2338:	0018      	movs	r0, r3
    233a:	4b2d      	ldr	r3, [pc, #180]	; (23f0 <xTaskResumeAll+0x108>)
    233c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    233e:	68fb      	ldr	r3, [r7, #12]
    2340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2342:	4b2c      	ldr	r3, [pc, #176]	; (23f4 <xTaskResumeAll+0x10c>)
    2344:	681b      	ldr	r3, [r3, #0]
    2346:	429a      	cmp	r2, r3
    2348:	d903      	bls.n	2352 <xTaskResumeAll+0x6a>
    234a:	68fb      	ldr	r3, [r7, #12]
    234c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    234e:	4b29      	ldr	r3, [pc, #164]	; (23f4 <xTaskResumeAll+0x10c>)
    2350:	601a      	str	r2, [r3, #0]
    2352:	68fb      	ldr	r3, [r7, #12]
    2354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2356:	0013      	movs	r3, r2
    2358:	009b      	lsls	r3, r3, #2
    235a:	189b      	adds	r3, r3, r2
    235c:	009b      	lsls	r3, r3, #2
    235e:	4a26      	ldr	r2, [pc, #152]	; (23f8 <xTaskResumeAll+0x110>)
    2360:	189a      	adds	r2, r3, r2
    2362:	68fb      	ldr	r3, [r7, #12]
    2364:	3304      	adds	r3, #4
    2366:	0019      	movs	r1, r3
    2368:	0010      	movs	r0, r2
    236a:	4b24      	ldr	r3, [pc, #144]	; (23fc <xTaskResumeAll+0x114>)
    236c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    236e:	68fb      	ldr	r3, [r7, #12]
    2370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2372:	4b23      	ldr	r3, [pc, #140]	; (2400 <xTaskResumeAll+0x118>)
    2374:	681b      	ldr	r3, [r3, #0]
    2376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2378:	429a      	cmp	r2, r3
    237a:	d302      	bcc.n	2382 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    237c:	4b21      	ldr	r3, [pc, #132]	; (2404 <xTaskResumeAll+0x11c>)
    237e:	2201      	movs	r2, #1
    2380:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2382:	4b1a      	ldr	r3, [pc, #104]	; (23ec <xTaskResumeAll+0x104>)
    2384:	681b      	ldr	r3, [r3, #0]
    2386:	2b00      	cmp	r3, #0
    2388:	d1cb      	bne.n	2322 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    238a:	68fb      	ldr	r3, [r7, #12]
    238c:	2b00      	cmp	r3, #0
    238e:	d001      	beq.n	2394 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    2390:	4b1d      	ldr	r3, [pc, #116]	; (2408 <xTaskResumeAll+0x120>)
    2392:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    2394:	4b1d      	ldr	r3, [pc, #116]	; (240c <xTaskResumeAll+0x124>)
    2396:	681b      	ldr	r3, [r3, #0]
    2398:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	2b00      	cmp	r3, #0
    239e:	d00f      	beq.n	23c0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    23a0:	4b1b      	ldr	r3, [pc, #108]	; (2410 <xTaskResumeAll+0x128>)
    23a2:	4798      	blx	r3
    23a4:	1e03      	subs	r3, r0, #0
    23a6:	d002      	beq.n	23ae <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    23a8:	4b16      	ldr	r3, [pc, #88]	; (2404 <xTaskResumeAll+0x11c>)
    23aa:	2201      	movs	r2, #1
    23ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	3b01      	subs	r3, #1
    23b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	2b00      	cmp	r3, #0
    23b8:	d1f2      	bne.n	23a0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    23ba:	4b14      	ldr	r3, [pc, #80]	; (240c <xTaskResumeAll+0x124>)
    23bc:	2200      	movs	r2, #0
    23be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    23c0:	4b10      	ldr	r3, [pc, #64]	; (2404 <xTaskResumeAll+0x11c>)
    23c2:	681b      	ldr	r3, [r3, #0]
    23c4:	2b00      	cmp	r3, #0
    23c6:	d003      	beq.n	23d0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    23c8:	2301      	movs	r3, #1
    23ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    23cc:	4b11      	ldr	r3, [pc, #68]	; (2414 <xTaskResumeAll+0x12c>)
    23ce:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    23d0:	4b11      	ldr	r3, [pc, #68]	; (2418 <xTaskResumeAll+0x130>)
    23d2:	4798      	blx	r3

	return xAlreadyYielded;
    23d4:	68bb      	ldr	r3, [r7, #8]
}
    23d6:	0018      	movs	r0, r3
    23d8:	46bd      	mov	sp, r7
    23da:	b004      	add	sp, #16
    23dc:	bd80      	pop	{r7, pc}
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	20003200 	.word	0x20003200
    23e4:	00001141 	.word	0x00001141
    23e8:	200031d8 	.word	0x200031d8
    23ec:	20003198 	.word	0x20003198
    23f0:	00000fb1 	.word	0x00000fb1
    23f4:	200031e0 	.word	0x200031e0
    23f8:	20003104 	.word	0x20003104
    23fc:	00000f01 	.word	0x00000f01
    2400:	20003100 	.word	0x20003100
    2404:	200031ec 	.word	0x200031ec
    2408:	000029fd 	.word	0x000029fd
    240c:	200031e8 	.word	0x200031e8
    2410:	00002439 	.word	0x00002439
    2414:	00001121 	.word	0x00001121
    2418:	00001165 	.word	0x00001165

0000241c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    241c:	b580      	push	{r7, lr}
    241e:	b082      	sub	sp, #8
    2420:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    2422:	4b04      	ldr	r3, [pc, #16]	; (2434 <xTaskGetTickCount+0x18>)
    2424:	681b      	ldr	r3, [r3, #0]
    2426:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    2428:	687b      	ldr	r3, [r7, #4]
}
    242a:	0018      	movs	r0, r3
    242c:	46bd      	mov	sp, r7
    242e:	b002      	add	sp, #8
    2430:	bd80      	pop	{r7, pc}
    2432:	46c0      	nop			; (mov r8, r8)
    2434:	200031dc 	.word	0x200031dc

00002438 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    2438:	b580      	push	{r7, lr}
    243a:	b086      	sub	sp, #24
    243c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    243e:	2300      	movs	r3, #0
    2440:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2442:	4b4c      	ldr	r3, [pc, #304]	; (2574 <xTaskIncrementTick+0x13c>)
    2444:	681b      	ldr	r3, [r3, #0]
    2446:	2b00      	cmp	r3, #0
    2448:	d000      	beq.n	244c <xTaskIncrementTick+0x14>
    244a:	e083      	b.n	2554 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    244c:	4b4a      	ldr	r3, [pc, #296]	; (2578 <xTaskIncrementTick+0x140>)
    244e:	681b      	ldr	r3, [r3, #0]
    2450:	3301      	adds	r3, #1
    2452:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    2454:	4b48      	ldr	r3, [pc, #288]	; (2578 <xTaskIncrementTick+0x140>)
    2456:	693a      	ldr	r2, [r7, #16]
    2458:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	2b00      	cmp	r3, #0
    245e:	d117      	bne.n	2490 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    2460:	4b46      	ldr	r3, [pc, #280]	; (257c <xTaskIncrementTick+0x144>)
    2462:	681b      	ldr	r3, [r3, #0]
    2464:	681b      	ldr	r3, [r3, #0]
    2466:	2b00      	cmp	r3, #0
    2468:	d001      	beq.n	246e <xTaskIncrementTick+0x36>
    246a:	b672      	cpsid	i
    246c:	e7fe      	b.n	246c <xTaskIncrementTick+0x34>
    246e:	4b43      	ldr	r3, [pc, #268]	; (257c <xTaskIncrementTick+0x144>)
    2470:	681b      	ldr	r3, [r3, #0]
    2472:	60fb      	str	r3, [r7, #12]
    2474:	4b42      	ldr	r3, [pc, #264]	; (2580 <xTaskIncrementTick+0x148>)
    2476:	681a      	ldr	r2, [r3, #0]
    2478:	4b40      	ldr	r3, [pc, #256]	; (257c <xTaskIncrementTick+0x144>)
    247a:	601a      	str	r2, [r3, #0]
    247c:	4b40      	ldr	r3, [pc, #256]	; (2580 <xTaskIncrementTick+0x148>)
    247e:	68fa      	ldr	r2, [r7, #12]
    2480:	601a      	str	r2, [r3, #0]
    2482:	4b40      	ldr	r3, [pc, #256]	; (2584 <xTaskIncrementTick+0x14c>)
    2484:	681b      	ldr	r3, [r3, #0]
    2486:	1c5a      	adds	r2, r3, #1
    2488:	4b3e      	ldr	r3, [pc, #248]	; (2584 <xTaskIncrementTick+0x14c>)
    248a:	601a      	str	r2, [r3, #0]
    248c:	4b3e      	ldr	r3, [pc, #248]	; (2588 <xTaskIncrementTick+0x150>)
    248e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    2490:	4b3e      	ldr	r3, [pc, #248]	; (258c <xTaskIncrementTick+0x154>)
    2492:	681b      	ldr	r3, [r3, #0]
    2494:	693a      	ldr	r2, [r7, #16]
    2496:	429a      	cmp	r2, r3
    2498:	d34e      	bcc.n	2538 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    249a:	4b38      	ldr	r3, [pc, #224]	; (257c <xTaskIncrementTick+0x144>)
    249c:	681b      	ldr	r3, [r3, #0]
    249e:	681b      	ldr	r3, [r3, #0]
    24a0:	2b00      	cmp	r3, #0
    24a2:	d101      	bne.n	24a8 <xTaskIncrementTick+0x70>
    24a4:	2301      	movs	r3, #1
    24a6:	e000      	b.n	24aa <xTaskIncrementTick+0x72>
    24a8:	2300      	movs	r3, #0
    24aa:	2b00      	cmp	r3, #0
    24ac:	d004      	beq.n	24b8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    24ae:	4b37      	ldr	r3, [pc, #220]	; (258c <xTaskIncrementTick+0x154>)
    24b0:	2201      	movs	r2, #1
    24b2:	4252      	negs	r2, r2
    24b4:	601a      	str	r2, [r3, #0]
					break;
    24b6:	e03f      	b.n	2538 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    24b8:	4b30      	ldr	r3, [pc, #192]	; (257c <xTaskIncrementTick+0x144>)
    24ba:	681b      	ldr	r3, [r3, #0]
    24bc:	68db      	ldr	r3, [r3, #12]
    24be:	68db      	ldr	r3, [r3, #12]
    24c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    24c2:	68bb      	ldr	r3, [r7, #8]
    24c4:	685b      	ldr	r3, [r3, #4]
    24c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    24c8:	693a      	ldr	r2, [r7, #16]
    24ca:	687b      	ldr	r3, [r7, #4]
    24cc:	429a      	cmp	r2, r3
    24ce:	d203      	bcs.n	24d8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    24d0:	4b2e      	ldr	r3, [pc, #184]	; (258c <xTaskIncrementTick+0x154>)
    24d2:	687a      	ldr	r2, [r7, #4]
    24d4:	601a      	str	r2, [r3, #0]
						break;
    24d6:	e02f      	b.n	2538 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    24d8:	68bb      	ldr	r3, [r7, #8]
    24da:	3304      	adds	r3, #4
    24dc:	0018      	movs	r0, r3
    24de:	4b2c      	ldr	r3, [pc, #176]	; (2590 <xTaskIncrementTick+0x158>)
    24e0:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    24e2:	68bb      	ldr	r3, [r7, #8]
    24e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    24e6:	2b00      	cmp	r3, #0
    24e8:	d004      	beq.n	24f4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    24ea:	68bb      	ldr	r3, [r7, #8]
    24ec:	3318      	adds	r3, #24
    24ee:	0018      	movs	r0, r3
    24f0:	4b27      	ldr	r3, [pc, #156]	; (2590 <xTaskIncrementTick+0x158>)
    24f2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    24f4:	68bb      	ldr	r3, [r7, #8]
    24f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    24f8:	4b26      	ldr	r3, [pc, #152]	; (2594 <xTaskIncrementTick+0x15c>)
    24fa:	681b      	ldr	r3, [r3, #0]
    24fc:	429a      	cmp	r2, r3
    24fe:	d903      	bls.n	2508 <xTaskIncrementTick+0xd0>
    2500:	68bb      	ldr	r3, [r7, #8]
    2502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2504:	4b23      	ldr	r3, [pc, #140]	; (2594 <xTaskIncrementTick+0x15c>)
    2506:	601a      	str	r2, [r3, #0]
    2508:	68bb      	ldr	r3, [r7, #8]
    250a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    250c:	0013      	movs	r3, r2
    250e:	009b      	lsls	r3, r3, #2
    2510:	189b      	adds	r3, r3, r2
    2512:	009b      	lsls	r3, r3, #2
    2514:	4a20      	ldr	r2, [pc, #128]	; (2598 <xTaskIncrementTick+0x160>)
    2516:	189a      	adds	r2, r3, r2
    2518:	68bb      	ldr	r3, [r7, #8]
    251a:	3304      	adds	r3, #4
    251c:	0019      	movs	r1, r3
    251e:	0010      	movs	r0, r2
    2520:	4b1e      	ldr	r3, [pc, #120]	; (259c <xTaskIncrementTick+0x164>)
    2522:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2524:	68bb      	ldr	r3, [r7, #8]
    2526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2528:	4b1d      	ldr	r3, [pc, #116]	; (25a0 <xTaskIncrementTick+0x168>)
    252a:	681b      	ldr	r3, [r3, #0]
    252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    252e:	429a      	cmp	r2, r3
    2530:	d3b3      	bcc.n	249a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    2532:	2301      	movs	r3, #1
    2534:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2536:	e7b0      	b.n	249a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    2538:	4b19      	ldr	r3, [pc, #100]	; (25a0 <xTaskIncrementTick+0x168>)
    253a:	681b      	ldr	r3, [r3, #0]
    253c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    253e:	4916      	ldr	r1, [pc, #88]	; (2598 <xTaskIncrementTick+0x160>)
    2540:	0013      	movs	r3, r2
    2542:	009b      	lsls	r3, r3, #2
    2544:	189b      	adds	r3, r3, r2
    2546:	009b      	lsls	r3, r3, #2
    2548:	585b      	ldr	r3, [r3, r1]
    254a:	2b01      	cmp	r3, #1
    254c:	d907      	bls.n	255e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
    254e:	2301      	movs	r3, #1
    2550:	617b      	str	r3, [r7, #20]
    2552:	e004      	b.n	255e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    2554:	4b13      	ldr	r3, [pc, #76]	; (25a4 <xTaskIncrementTick+0x16c>)
    2556:	681b      	ldr	r3, [r3, #0]
    2558:	1c5a      	adds	r2, r3, #1
    255a:	4b12      	ldr	r3, [pc, #72]	; (25a4 <xTaskIncrementTick+0x16c>)
    255c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    255e:	4b12      	ldr	r3, [pc, #72]	; (25a8 <xTaskIncrementTick+0x170>)
    2560:	681b      	ldr	r3, [r3, #0]
    2562:	2b00      	cmp	r3, #0
    2564:	d001      	beq.n	256a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
    2566:	2301      	movs	r3, #1
    2568:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    256a:	697b      	ldr	r3, [r7, #20]
}
    256c:	0018      	movs	r0, r3
    256e:	46bd      	mov	sp, r7
    2570:	b006      	add	sp, #24
    2572:	bd80      	pop	{r7, pc}
    2574:	20003200 	.word	0x20003200
    2578:	200031dc 	.word	0x200031dc
    257c:	20003190 	.word	0x20003190
    2580:	20003194 	.word	0x20003194
    2584:	200031f0 	.word	0x200031f0
    2588:	000029fd 	.word	0x000029fd
    258c:	200031f8 	.word	0x200031f8
    2590:	00000fb1 	.word	0x00000fb1
    2594:	200031e0 	.word	0x200031e0
    2598:	20003104 	.word	0x20003104
    259c:	00000f01 	.word	0x00000f01
    25a0:	20003100 	.word	0x20003100
    25a4:	200031e8 	.word	0x200031e8
    25a8:	200031ec 	.word	0x200031ec

000025ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    25ac:	b580      	push	{r7, lr}
    25ae:	b082      	sub	sp, #8
    25b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    25b2:	4b2a      	ldr	r3, [pc, #168]	; (265c <vTaskSwitchContext+0xb0>)
    25b4:	681b      	ldr	r3, [r3, #0]
    25b6:	2b00      	cmp	r3, #0
    25b8:	d003      	beq.n	25c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    25ba:	4b29      	ldr	r3, [pc, #164]	; (2660 <vTaskSwitchContext+0xb4>)
    25bc:	2201      	movs	r2, #1
    25be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    25c0:	e048      	b.n	2654 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
    25c2:	4b27      	ldr	r3, [pc, #156]	; (2660 <vTaskSwitchContext+0xb4>)
    25c4:	2200      	movs	r2, #0
    25c6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    25c8:	4b26      	ldr	r3, [pc, #152]	; (2664 <vTaskSwitchContext+0xb8>)
    25ca:	681b      	ldr	r3, [r3, #0]
    25cc:	681a      	ldr	r2, [r3, #0]
    25ce:	4b25      	ldr	r3, [pc, #148]	; (2664 <vTaskSwitchContext+0xb8>)
    25d0:	681b      	ldr	r3, [r3, #0]
    25d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    25d4:	429a      	cmp	r2, r3
    25d6:	d808      	bhi.n	25ea <vTaskSwitchContext+0x3e>
    25d8:	4b22      	ldr	r3, [pc, #136]	; (2664 <vTaskSwitchContext+0xb8>)
    25da:	681a      	ldr	r2, [r3, #0]
    25dc:	4b21      	ldr	r3, [pc, #132]	; (2664 <vTaskSwitchContext+0xb8>)
    25de:	681b      	ldr	r3, [r3, #0]
    25e0:	3334      	adds	r3, #52	; 0x34
    25e2:	0019      	movs	r1, r3
    25e4:	0010      	movs	r0, r2
    25e6:	4b20      	ldr	r3, [pc, #128]	; (2668 <vTaskSwitchContext+0xbc>)
    25e8:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    25ea:	4b20      	ldr	r3, [pc, #128]	; (266c <vTaskSwitchContext+0xc0>)
    25ec:	681b      	ldr	r3, [r3, #0]
    25ee:	607b      	str	r3, [r7, #4]
    25f0:	e007      	b.n	2602 <vTaskSwitchContext+0x56>
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	2b00      	cmp	r3, #0
    25f6:	d101      	bne.n	25fc <vTaskSwitchContext+0x50>
    25f8:	b672      	cpsid	i
    25fa:	e7fe      	b.n	25fa <vTaskSwitchContext+0x4e>
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	3b01      	subs	r3, #1
    2600:	607b      	str	r3, [r7, #4]
    2602:	491b      	ldr	r1, [pc, #108]	; (2670 <vTaskSwitchContext+0xc4>)
    2604:	687a      	ldr	r2, [r7, #4]
    2606:	0013      	movs	r3, r2
    2608:	009b      	lsls	r3, r3, #2
    260a:	189b      	adds	r3, r3, r2
    260c:	009b      	lsls	r3, r3, #2
    260e:	585b      	ldr	r3, [r3, r1]
    2610:	2b00      	cmp	r3, #0
    2612:	d0ee      	beq.n	25f2 <vTaskSwitchContext+0x46>
    2614:	687a      	ldr	r2, [r7, #4]
    2616:	0013      	movs	r3, r2
    2618:	009b      	lsls	r3, r3, #2
    261a:	189b      	adds	r3, r3, r2
    261c:	009b      	lsls	r3, r3, #2
    261e:	4a14      	ldr	r2, [pc, #80]	; (2670 <vTaskSwitchContext+0xc4>)
    2620:	189b      	adds	r3, r3, r2
    2622:	603b      	str	r3, [r7, #0]
    2624:	683b      	ldr	r3, [r7, #0]
    2626:	685b      	ldr	r3, [r3, #4]
    2628:	685a      	ldr	r2, [r3, #4]
    262a:	683b      	ldr	r3, [r7, #0]
    262c:	605a      	str	r2, [r3, #4]
    262e:	683b      	ldr	r3, [r7, #0]
    2630:	685a      	ldr	r2, [r3, #4]
    2632:	683b      	ldr	r3, [r7, #0]
    2634:	3308      	adds	r3, #8
    2636:	429a      	cmp	r2, r3
    2638:	d104      	bne.n	2644 <vTaskSwitchContext+0x98>
    263a:	683b      	ldr	r3, [r7, #0]
    263c:	685b      	ldr	r3, [r3, #4]
    263e:	685a      	ldr	r2, [r3, #4]
    2640:	683b      	ldr	r3, [r7, #0]
    2642:	605a      	str	r2, [r3, #4]
    2644:	683b      	ldr	r3, [r7, #0]
    2646:	685b      	ldr	r3, [r3, #4]
    2648:	68da      	ldr	r2, [r3, #12]
    264a:	4b06      	ldr	r3, [pc, #24]	; (2664 <vTaskSwitchContext+0xb8>)
    264c:	601a      	str	r2, [r3, #0]
    264e:	4b07      	ldr	r3, [pc, #28]	; (266c <vTaskSwitchContext+0xc0>)
    2650:	687a      	ldr	r2, [r7, #4]
    2652:	601a      	str	r2, [r3, #0]
}
    2654:	46c0      	nop			; (mov r8, r8)
    2656:	46bd      	mov	sp, r7
    2658:	b002      	add	sp, #8
    265a:	bd80      	pop	{r7, pc}
    265c:	20003200 	.word	0x20003200
    2660:	200031ec 	.word	0x200031ec
    2664:	20003100 	.word	0x20003100
    2668:	00005629 	.word	0x00005629
    266c:	200031e0 	.word	0x200031e0
    2670:	20003104 	.word	0x20003104

00002674 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    2674:	b580      	push	{r7, lr}
    2676:	b082      	sub	sp, #8
    2678:	af00      	add	r7, sp, #0
    267a:	6078      	str	r0, [r7, #4]
    267c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    267e:	687b      	ldr	r3, [r7, #4]
    2680:	2b00      	cmp	r3, #0
    2682:	d101      	bne.n	2688 <vTaskPlaceOnEventList+0x14>
    2684:	b672      	cpsid	i
    2686:	e7fe      	b.n	2686 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2688:	4b08      	ldr	r3, [pc, #32]	; (26ac <vTaskPlaceOnEventList+0x38>)
    268a:	681b      	ldr	r3, [r3, #0]
    268c:	3318      	adds	r3, #24
    268e:	001a      	movs	r2, r3
    2690:	687b      	ldr	r3, [r7, #4]
    2692:	0011      	movs	r1, r2
    2694:	0018      	movs	r0, r3
    2696:	4b06      	ldr	r3, [pc, #24]	; (26b0 <vTaskPlaceOnEventList+0x3c>)
    2698:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    269a:	683b      	ldr	r3, [r7, #0]
    269c:	2101      	movs	r1, #1
    269e:	0018      	movs	r0, r3
    26a0:	4b04      	ldr	r3, [pc, #16]	; (26b4 <vTaskPlaceOnEventList+0x40>)
    26a2:	4798      	blx	r3
}
    26a4:	46c0      	nop			; (mov r8, r8)
    26a6:	46bd      	mov	sp, r7
    26a8:	b002      	add	sp, #8
    26aa:	bd80      	pop	{r7, pc}
    26ac:	20003100 	.word	0x20003100
    26b0:	00000f45 	.word	0x00000f45
    26b4:	00002d35 	.word	0x00002d35

000026b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    26b8:	b580      	push	{r7, lr}
    26ba:	b084      	sub	sp, #16
    26bc:	af00      	add	r7, sp, #0
    26be:	60f8      	str	r0, [r7, #12]
    26c0:	60b9      	str	r1, [r7, #8]
    26c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    26c4:	68fb      	ldr	r3, [r7, #12]
    26c6:	2b00      	cmp	r3, #0
    26c8:	d101      	bne.n	26ce <vTaskPlaceOnEventListRestricted+0x16>
    26ca:	b672      	cpsid	i
    26cc:	e7fe      	b.n	26cc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    26ce:	4b0c      	ldr	r3, [pc, #48]	; (2700 <vTaskPlaceOnEventListRestricted+0x48>)
    26d0:	681b      	ldr	r3, [r3, #0]
    26d2:	3318      	adds	r3, #24
    26d4:	001a      	movs	r2, r3
    26d6:	68fb      	ldr	r3, [r7, #12]
    26d8:	0011      	movs	r1, r2
    26da:	0018      	movs	r0, r3
    26dc:	4b09      	ldr	r3, [pc, #36]	; (2704 <vTaskPlaceOnEventListRestricted+0x4c>)
    26de:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    26e0:	687b      	ldr	r3, [r7, #4]
    26e2:	2b00      	cmp	r3, #0
    26e4:	d002      	beq.n	26ec <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    26e6:	2301      	movs	r3, #1
    26e8:	425b      	negs	r3, r3
    26ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    26ec:	687a      	ldr	r2, [r7, #4]
    26ee:	68bb      	ldr	r3, [r7, #8]
    26f0:	0011      	movs	r1, r2
    26f2:	0018      	movs	r0, r3
    26f4:	4b04      	ldr	r3, [pc, #16]	; (2708 <vTaskPlaceOnEventListRestricted+0x50>)
    26f6:	4798      	blx	r3
	}
    26f8:	46c0      	nop			; (mov r8, r8)
    26fa:	46bd      	mov	sp, r7
    26fc:	b004      	add	sp, #16
    26fe:	bd80      	pop	{r7, pc}
    2700:	20003100 	.word	0x20003100
    2704:	00000f01 	.word	0x00000f01
    2708:	00002d35 	.word	0x00002d35

0000270c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    270c:	b580      	push	{r7, lr}
    270e:	b084      	sub	sp, #16
    2710:	af00      	add	r7, sp, #0
    2712:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	68db      	ldr	r3, [r3, #12]
    2718:	68db      	ldr	r3, [r3, #12]
    271a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    271c:	68bb      	ldr	r3, [r7, #8]
    271e:	2b00      	cmp	r3, #0
    2720:	d101      	bne.n	2726 <xTaskRemoveFromEventList+0x1a>
    2722:	b672      	cpsid	i
    2724:	e7fe      	b.n	2724 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2726:	68bb      	ldr	r3, [r7, #8]
    2728:	3318      	adds	r3, #24
    272a:	0018      	movs	r0, r3
    272c:	4b1f      	ldr	r3, [pc, #124]	; (27ac <xTaskRemoveFromEventList+0xa0>)
    272e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2730:	4b1f      	ldr	r3, [pc, #124]	; (27b0 <xTaskRemoveFromEventList+0xa4>)
    2732:	681b      	ldr	r3, [r3, #0]
    2734:	2b00      	cmp	r3, #0
    2736:	d11d      	bne.n	2774 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    2738:	68bb      	ldr	r3, [r7, #8]
    273a:	3304      	adds	r3, #4
    273c:	0018      	movs	r0, r3
    273e:	4b1b      	ldr	r3, [pc, #108]	; (27ac <xTaskRemoveFromEventList+0xa0>)
    2740:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    2742:	68bb      	ldr	r3, [r7, #8]
    2744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2746:	4b1b      	ldr	r3, [pc, #108]	; (27b4 <xTaskRemoveFromEventList+0xa8>)
    2748:	681b      	ldr	r3, [r3, #0]
    274a:	429a      	cmp	r2, r3
    274c:	d903      	bls.n	2756 <xTaskRemoveFromEventList+0x4a>
    274e:	68bb      	ldr	r3, [r7, #8]
    2750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2752:	4b18      	ldr	r3, [pc, #96]	; (27b4 <xTaskRemoveFromEventList+0xa8>)
    2754:	601a      	str	r2, [r3, #0]
    2756:	68bb      	ldr	r3, [r7, #8]
    2758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    275a:	0013      	movs	r3, r2
    275c:	009b      	lsls	r3, r3, #2
    275e:	189b      	adds	r3, r3, r2
    2760:	009b      	lsls	r3, r3, #2
    2762:	4a15      	ldr	r2, [pc, #84]	; (27b8 <xTaskRemoveFromEventList+0xac>)
    2764:	189a      	adds	r2, r3, r2
    2766:	68bb      	ldr	r3, [r7, #8]
    2768:	3304      	adds	r3, #4
    276a:	0019      	movs	r1, r3
    276c:	0010      	movs	r0, r2
    276e:	4b13      	ldr	r3, [pc, #76]	; (27bc <xTaskRemoveFromEventList+0xb0>)
    2770:	4798      	blx	r3
    2772:	e007      	b.n	2784 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2774:	68bb      	ldr	r3, [r7, #8]
    2776:	3318      	adds	r3, #24
    2778:	001a      	movs	r2, r3
    277a:	4b11      	ldr	r3, [pc, #68]	; (27c0 <xTaskRemoveFromEventList+0xb4>)
    277c:	0011      	movs	r1, r2
    277e:	0018      	movs	r0, r3
    2780:	4b0e      	ldr	r3, [pc, #56]	; (27bc <xTaskRemoveFromEventList+0xb0>)
    2782:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2784:	68bb      	ldr	r3, [r7, #8]
    2786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2788:	4b0e      	ldr	r3, [pc, #56]	; (27c4 <xTaskRemoveFromEventList+0xb8>)
    278a:	681b      	ldr	r3, [r3, #0]
    278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    278e:	429a      	cmp	r2, r3
    2790:	d905      	bls.n	279e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    2792:	2301      	movs	r3, #1
    2794:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    2796:	4b0c      	ldr	r3, [pc, #48]	; (27c8 <xTaskRemoveFromEventList+0xbc>)
    2798:	2201      	movs	r2, #1
    279a:	601a      	str	r2, [r3, #0]
    279c:	e001      	b.n	27a2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    279e:	2300      	movs	r3, #0
    27a0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    27a2:	68fb      	ldr	r3, [r7, #12]
}
    27a4:	0018      	movs	r0, r3
    27a6:	46bd      	mov	sp, r7
    27a8:	b004      	add	sp, #16
    27aa:	bd80      	pop	{r7, pc}
    27ac:	00000fb1 	.word	0x00000fb1
    27b0:	20003200 	.word	0x20003200
    27b4:	200031e0 	.word	0x200031e0
    27b8:	20003104 	.word	0x20003104
    27bc:	00000f01 	.word	0x00000f01
    27c0:	20003198 	.word	0x20003198
    27c4:	20003100 	.word	0x20003100
    27c8:	200031ec 	.word	0x200031ec

000027cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    27cc:	b580      	push	{r7, lr}
    27ce:	b082      	sub	sp, #8
    27d0:	af00      	add	r7, sp, #0
    27d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    27d4:	4b05      	ldr	r3, [pc, #20]	; (27ec <vTaskInternalSetTimeOutState+0x20>)
    27d6:	681a      	ldr	r2, [r3, #0]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    27dc:	4b04      	ldr	r3, [pc, #16]	; (27f0 <vTaskInternalSetTimeOutState+0x24>)
    27de:	681a      	ldr	r2, [r3, #0]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	605a      	str	r2, [r3, #4]
}
    27e4:	46c0      	nop			; (mov r8, r8)
    27e6:	46bd      	mov	sp, r7
    27e8:	b002      	add	sp, #8
    27ea:	bd80      	pop	{r7, pc}
    27ec:	200031f0 	.word	0x200031f0
    27f0:	200031dc 	.word	0x200031dc

000027f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    27f4:	b580      	push	{r7, lr}
    27f6:	b086      	sub	sp, #24
    27f8:	af00      	add	r7, sp, #0
    27fa:	6078      	str	r0, [r7, #4]
    27fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    27fe:	687b      	ldr	r3, [r7, #4]
    2800:	2b00      	cmp	r3, #0
    2802:	d101      	bne.n	2808 <xTaskCheckForTimeOut+0x14>
    2804:	b672      	cpsid	i
    2806:	e7fe      	b.n	2806 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    2808:	683b      	ldr	r3, [r7, #0]
    280a:	2b00      	cmp	r3, #0
    280c:	d101      	bne.n	2812 <xTaskCheckForTimeOut+0x1e>
    280e:	b672      	cpsid	i
    2810:	e7fe      	b.n	2810 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    2812:	4b1e      	ldr	r3, [pc, #120]	; (288c <xTaskCheckForTimeOut+0x98>)
    2814:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    2816:	4b1e      	ldr	r3, [pc, #120]	; (2890 <xTaskCheckForTimeOut+0x9c>)
    2818:	681b      	ldr	r3, [r3, #0]
    281a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    281c:	687b      	ldr	r3, [r7, #4]
    281e:	685b      	ldr	r3, [r3, #4]
    2820:	693a      	ldr	r2, [r7, #16]
    2822:	1ad3      	subs	r3, r2, r3
    2824:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    2826:	683b      	ldr	r3, [r7, #0]
    2828:	681b      	ldr	r3, [r3, #0]
    282a:	3301      	adds	r3, #1
    282c:	d102      	bne.n	2834 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    282e:	2300      	movs	r3, #0
    2830:	617b      	str	r3, [r7, #20]
    2832:	e024      	b.n	287e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2834:	687b      	ldr	r3, [r7, #4]
    2836:	681a      	ldr	r2, [r3, #0]
    2838:	4b16      	ldr	r3, [pc, #88]	; (2894 <xTaskCheckForTimeOut+0xa0>)
    283a:	681b      	ldr	r3, [r3, #0]
    283c:	429a      	cmp	r2, r3
    283e:	d007      	beq.n	2850 <xTaskCheckForTimeOut+0x5c>
    2840:	687b      	ldr	r3, [r7, #4]
    2842:	685a      	ldr	r2, [r3, #4]
    2844:	693b      	ldr	r3, [r7, #16]
    2846:	429a      	cmp	r2, r3
    2848:	d802      	bhi.n	2850 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    284a:	2301      	movs	r3, #1
    284c:	617b      	str	r3, [r7, #20]
    284e:	e016      	b.n	287e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2850:	683b      	ldr	r3, [r7, #0]
    2852:	681a      	ldr	r2, [r3, #0]
    2854:	68fb      	ldr	r3, [r7, #12]
    2856:	429a      	cmp	r2, r3
    2858:	d90c      	bls.n	2874 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    285a:	683b      	ldr	r3, [r7, #0]
    285c:	681a      	ldr	r2, [r3, #0]
    285e:	68fb      	ldr	r3, [r7, #12]
    2860:	1ad2      	subs	r2, r2, r3
    2862:	683b      	ldr	r3, [r7, #0]
    2864:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    2866:	687b      	ldr	r3, [r7, #4]
    2868:	0018      	movs	r0, r3
    286a:	4b0b      	ldr	r3, [pc, #44]	; (2898 <xTaskCheckForTimeOut+0xa4>)
    286c:	4798      	blx	r3
			xReturn = pdFALSE;
    286e:	2300      	movs	r3, #0
    2870:	617b      	str	r3, [r7, #20]
    2872:	e004      	b.n	287e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    2874:	683b      	ldr	r3, [r7, #0]
    2876:	2200      	movs	r2, #0
    2878:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    287a:	2301      	movs	r3, #1
    287c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    287e:	4b07      	ldr	r3, [pc, #28]	; (289c <xTaskCheckForTimeOut+0xa8>)
    2880:	4798      	blx	r3

	return xReturn;
    2882:	697b      	ldr	r3, [r7, #20]
}
    2884:	0018      	movs	r0, r3
    2886:	46bd      	mov	sp, r7
    2888:	b006      	add	sp, #24
    288a:	bd80      	pop	{r7, pc}
    288c:	00001141 	.word	0x00001141
    2890:	200031dc 	.word	0x200031dc
    2894:	200031f0 	.word	0x200031f0
    2898:	000027cd 	.word	0x000027cd
    289c:	00001165 	.word	0x00001165

000028a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    28a0:	b580      	push	{r7, lr}
    28a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    28a4:	4b02      	ldr	r3, [pc, #8]	; (28b0 <vTaskMissedYield+0x10>)
    28a6:	2201      	movs	r2, #1
    28a8:	601a      	str	r2, [r3, #0]
}
    28aa:	46c0      	nop			; (mov r8, r8)
    28ac:	46bd      	mov	sp, r7
    28ae:	bd80      	pop	{r7, pc}
    28b0:	200031ec 	.word	0x200031ec

000028b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b082      	sub	sp, #8
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    28bc:	4b04      	ldr	r3, [pc, #16]	; (28d0 <prvIdleTask+0x1c>)
    28be:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    28c0:	4b04      	ldr	r3, [pc, #16]	; (28d4 <prvIdleTask+0x20>)
    28c2:	681b      	ldr	r3, [r3, #0]
    28c4:	2b01      	cmp	r3, #1
    28c6:	d9f9      	bls.n	28bc <prvIdleTask+0x8>
			{
				taskYIELD();
    28c8:	4b03      	ldr	r3, [pc, #12]	; (28d8 <prvIdleTask+0x24>)
    28ca:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    28cc:	e7f6      	b.n	28bc <prvIdleTask+0x8>
    28ce:	46c0      	nop			; (mov r8, r8)
    28d0:	00002969 	.word	0x00002969
    28d4:	20003104 	.word	0x20003104
    28d8:	00001121 	.word	0x00001121

000028dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    28dc:	b580      	push	{r7, lr}
    28de:	b082      	sub	sp, #8
    28e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    28e2:	2300      	movs	r3, #0
    28e4:	607b      	str	r3, [r7, #4]
    28e6:	e00c      	b.n	2902 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    28e8:	687a      	ldr	r2, [r7, #4]
    28ea:	0013      	movs	r3, r2
    28ec:	009b      	lsls	r3, r3, #2
    28ee:	189b      	adds	r3, r3, r2
    28f0:	009b      	lsls	r3, r3, #2
    28f2:	4a14      	ldr	r2, [pc, #80]	; (2944 <prvInitialiseTaskLists+0x68>)
    28f4:	189b      	adds	r3, r3, r2
    28f6:	0018      	movs	r0, r3
    28f8:	4b13      	ldr	r3, [pc, #76]	; (2948 <prvInitialiseTaskLists+0x6c>)
    28fa:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    28fc:	687b      	ldr	r3, [r7, #4]
    28fe:	3301      	adds	r3, #1
    2900:	607b      	str	r3, [r7, #4]
    2902:	687b      	ldr	r3, [r7, #4]
    2904:	2b04      	cmp	r3, #4
    2906:	d9ef      	bls.n	28e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    2908:	4b10      	ldr	r3, [pc, #64]	; (294c <prvInitialiseTaskLists+0x70>)
    290a:	0018      	movs	r0, r3
    290c:	4b0e      	ldr	r3, [pc, #56]	; (2948 <prvInitialiseTaskLists+0x6c>)
    290e:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    2910:	4b0f      	ldr	r3, [pc, #60]	; (2950 <prvInitialiseTaskLists+0x74>)
    2912:	0018      	movs	r0, r3
    2914:	4b0c      	ldr	r3, [pc, #48]	; (2948 <prvInitialiseTaskLists+0x6c>)
    2916:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    2918:	4b0e      	ldr	r3, [pc, #56]	; (2954 <prvInitialiseTaskLists+0x78>)
    291a:	0018      	movs	r0, r3
    291c:	4b0a      	ldr	r3, [pc, #40]	; (2948 <prvInitialiseTaskLists+0x6c>)
    291e:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    2920:	4b0d      	ldr	r3, [pc, #52]	; (2958 <prvInitialiseTaskLists+0x7c>)
    2922:	0018      	movs	r0, r3
    2924:	4b08      	ldr	r3, [pc, #32]	; (2948 <prvInitialiseTaskLists+0x6c>)
    2926:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    2928:	4b0c      	ldr	r3, [pc, #48]	; (295c <prvInitialiseTaskLists+0x80>)
    292a:	0018      	movs	r0, r3
    292c:	4b06      	ldr	r3, [pc, #24]	; (2948 <prvInitialiseTaskLists+0x6c>)
    292e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2930:	4b0b      	ldr	r3, [pc, #44]	; (2960 <prvInitialiseTaskLists+0x84>)
    2932:	4a06      	ldr	r2, [pc, #24]	; (294c <prvInitialiseTaskLists+0x70>)
    2934:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2936:	4b0b      	ldr	r3, [pc, #44]	; (2964 <prvInitialiseTaskLists+0x88>)
    2938:	4a05      	ldr	r2, [pc, #20]	; (2950 <prvInitialiseTaskLists+0x74>)
    293a:	601a      	str	r2, [r3, #0]
}
    293c:	46c0      	nop			; (mov r8, r8)
    293e:	46bd      	mov	sp, r7
    2940:	b002      	add	sp, #8
    2942:	bd80      	pop	{r7, pc}
    2944:	20003104 	.word	0x20003104
    2948:	00000eaf 	.word	0x00000eaf
    294c:	20003168 	.word	0x20003168
    2950:	2000317c 	.word	0x2000317c
    2954:	20003198 	.word	0x20003198
    2958:	200031ac 	.word	0x200031ac
    295c:	200031c4 	.word	0x200031c4
    2960:	20003190 	.word	0x20003190
    2964:	20003194 	.word	0x20003194

00002968 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2968:	b580      	push	{r7, lr}
    296a:	b082      	sub	sp, #8
    296c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    296e:	e01a      	b.n	29a6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    2970:	4b11      	ldr	r3, [pc, #68]	; (29b8 <prvCheckTasksWaitingTermination+0x50>)
    2972:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2974:	4b11      	ldr	r3, [pc, #68]	; (29bc <prvCheckTasksWaitingTermination+0x54>)
    2976:	68db      	ldr	r3, [r3, #12]
    2978:	68db      	ldr	r3, [r3, #12]
    297a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	3304      	adds	r3, #4
    2980:	0018      	movs	r0, r3
    2982:	4b0f      	ldr	r3, [pc, #60]	; (29c0 <prvCheckTasksWaitingTermination+0x58>)
    2984:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    2986:	4b0f      	ldr	r3, [pc, #60]	; (29c4 <prvCheckTasksWaitingTermination+0x5c>)
    2988:	681b      	ldr	r3, [r3, #0]
    298a:	1e5a      	subs	r2, r3, #1
    298c:	4b0d      	ldr	r3, [pc, #52]	; (29c4 <prvCheckTasksWaitingTermination+0x5c>)
    298e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    2990:	4b0d      	ldr	r3, [pc, #52]	; (29c8 <prvCheckTasksWaitingTermination+0x60>)
    2992:	681b      	ldr	r3, [r3, #0]
    2994:	1e5a      	subs	r2, r3, #1
    2996:	4b0c      	ldr	r3, [pc, #48]	; (29c8 <prvCheckTasksWaitingTermination+0x60>)
    2998:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    299a:	4b0c      	ldr	r3, [pc, #48]	; (29cc <prvCheckTasksWaitingTermination+0x64>)
    299c:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    299e:	687b      	ldr	r3, [r7, #4]
    29a0:	0018      	movs	r0, r3
    29a2:	4b0b      	ldr	r3, [pc, #44]	; (29d0 <prvCheckTasksWaitingTermination+0x68>)
    29a4:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    29a6:	4b08      	ldr	r3, [pc, #32]	; (29c8 <prvCheckTasksWaitingTermination+0x60>)
    29a8:	681b      	ldr	r3, [r3, #0]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d1e0      	bne.n	2970 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	46bd      	mov	sp, r7
    29b2:	b002      	add	sp, #8
    29b4:	bd80      	pop	{r7, pc}
    29b6:	46c0      	nop			; (mov r8, r8)
    29b8:	00001141 	.word	0x00001141
    29bc:	200031ac 	.word	0x200031ac
    29c0:	00000fb1 	.word	0x00000fb1
    29c4:	200031d8 	.word	0x200031d8
    29c8:	200031c0 	.word	0x200031c0
    29cc:	00001165 	.word	0x00001165
    29d0:	000029d5 	.word	0x000029d5

000029d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    29d4:	b580      	push	{r7, lr}
    29d6:	b082      	sub	sp, #8
    29d8:	af00      	add	r7, sp, #0
    29da:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    29dc:	687b      	ldr	r3, [r7, #4]
    29de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    29e0:	0018      	movs	r0, r3
    29e2:	4b05      	ldr	r3, [pc, #20]	; (29f8 <prvDeleteTCB+0x24>)
    29e4:	4798      	blx	r3
			vPortFree( pxTCB );
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	0018      	movs	r0, r3
    29ea:	4b03      	ldr	r3, [pc, #12]	; (29f8 <prvDeleteTCB+0x24>)
    29ec:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	46bd      	mov	sp, r7
    29f2:	b002      	add	sp, #8
    29f4:	bd80      	pop	{r7, pc}
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	00001321 	.word	0x00001321

000029fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    29fc:	b580      	push	{r7, lr}
    29fe:	b082      	sub	sp, #8
    2a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2a02:	4b0e      	ldr	r3, [pc, #56]	; (2a3c <prvResetNextTaskUnblockTime+0x40>)
    2a04:	681b      	ldr	r3, [r3, #0]
    2a06:	681b      	ldr	r3, [r3, #0]
    2a08:	2b00      	cmp	r3, #0
    2a0a:	d101      	bne.n	2a10 <prvResetNextTaskUnblockTime+0x14>
    2a0c:	2301      	movs	r3, #1
    2a0e:	e000      	b.n	2a12 <prvResetNextTaskUnblockTime+0x16>
    2a10:	2300      	movs	r3, #0
    2a12:	2b00      	cmp	r3, #0
    2a14:	d004      	beq.n	2a20 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    2a16:	4b0a      	ldr	r3, [pc, #40]	; (2a40 <prvResetNextTaskUnblockTime+0x44>)
    2a18:	2201      	movs	r2, #1
    2a1a:	4252      	negs	r2, r2
    2a1c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    2a1e:	e008      	b.n	2a32 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2a20:	4b06      	ldr	r3, [pc, #24]	; (2a3c <prvResetNextTaskUnblockTime+0x40>)
    2a22:	681b      	ldr	r3, [r3, #0]
    2a24:	68db      	ldr	r3, [r3, #12]
    2a26:	68db      	ldr	r3, [r3, #12]
    2a28:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    2a2a:	687b      	ldr	r3, [r7, #4]
    2a2c:	685a      	ldr	r2, [r3, #4]
    2a2e:	4b04      	ldr	r3, [pc, #16]	; (2a40 <prvResetNextTaskUnblockTime+0x44>)
    2a30:	601a      	str	r2, [r3, #0]
}
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	46bd      	mov	sp, r7
    2a36:	b002      	add	sp, #8
    2a38:	bd80      	pop	{r7, pc}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	20003190 	.word	0x20003190
    2a40:	200031f8 	.word	0x200031f8

00002a44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    2a44:	b580      	push	{r7, lr}
    2a46:	b082      	sub	sp, #8
    2a48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2a4a:	4b0a      	ldr	r3, [pc, #40]	; (2a74 <xTaskGetSchedulerState+0x30>)
    2a4c:	681b      	ldr	r3, [r3, #0]
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d102      	bne.n	2a58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    2a52:	2301      	movs	r3, #1
    2a54:	607b      	str	r3, [r7, #4]
    2a56:	e008      	b.n	2a6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2a58:	4b07      	ldr	r3, [pc, #28]	; (2a78 <xTaskGetSchedulerState+0x34>)
    2a5a:	681b      	ldr	r3, [r3, #0]
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d102      	bne.n	2a66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    2a60:	2302      	movs	r3, #2
    2a62:	607b      	str	r3, [r7, #4]
    2a64:	e001      	b.n	2a6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    2a66:	2300      	movs	r3, #0
    2a68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    2a6a:	687b      	ldr	r3, [r7, #4]
	}
    2a6c:	0018      	movs	r0, r3
    2a6e:	46bd      	mov	sp, r7
    2a70:	b002      	add	sp, #8
    2a72:	bd80      	pop	{r7, pc}
    2a74:	200031e4 	.word	0x200031e4
    2a78:	20003200 	.word	0x20003200

00002a7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    2a7c:	b580      	push	{r7, lr}
    2a7e:	b084      	sub	sp, #16
    2a80:	af00      	add	r7, sp, #0
    2a82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    2a84:	687b      	ldr	r3, [r7, #4]
    2a86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    2a88:	2300      	movs	r3, #0
    2a8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    2a8c:	687b      	ldr	r3, [r7, #4]
    2a8e:	2b00      	cmp	r3, #0
    2a90:	d056      	beq.n	2b40 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    2a92:	68bb      	ldr	r3, [r7, #8]
    2a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2a96:	4b2d      	ldr	r3, [pc, #180]	; (2b4c <xTaskPriorityInherit+0xd0>)
    2a98:	681b      	ldr	r3, [r3, #0]
    2a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a9c:	429a      	cmp	r2, r3
    2a9e:	d246      	bcs.n	2b2e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2aa0:	68bb      	ldr	r3, [r7, #8]
    2aa2:	699b      	ldr	r3, [r3, #24]
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	db06      	blt.n	2ab6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2aa8:	4b28      	ldr	r3, [pc, #160]	; (2b4c <xTaskPriorityInherit+0xd0>)
    2aaa:	681b      	ldr	r3, [r3, #0]
    2aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2aae:	2205      	movs	r2, #5
    2ab0:	1ad2      	subs	r2, r2, r3
    2ab2:	68bb      	ldr	r3, [r7, #8]
    2ab4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    2ab6:	68bb      	ldr	r3, [r7, #8]
    2ab8:	6959      	ldr	r1, [r3, #20]
    2aba:	68bb      	ldr	r3, [r7, #8]
    2abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2abe:	0013      	movs	r3, r2
    2ac0:	009b      	lsls	r3, r3, #2
    2ac2:	189b      	adds	r3, r3, r2
    2ac4:	009b      	lsls	r3, r3, #2
    2ac6:	4a22      	ldr	r2, [pc, #136]	; (2b50 <xTaskPriorityInherit+0xd4>)
    2ac8:	189b      	adds	r3, r3, r2
    2aca:	4299      	cmp	r1, r3
    2acc:	d101      	bne.n	2ad2 <xTaskPriorityInherit+0x56>
    2ace:	2301      	movs	r3, #1
    2ad0:	e000      	b.n	2ad4 <xTaskPriorityInherit+0x58>
    2ad2:	2300      	movs	r3, #0
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d022      	beq.n	2b1e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2ad8:	68bb      	ldr	r3, [r7, #8]
    2ada:	3304      	adds	r3, #4
    2adc:	0018      	movs	r0, r3
    2ade:	4b1d      	ldr	r3, [pc, #116]	; (2b54 <xTaskPriorityInherit+0xd8>)
    2ae0:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    2ae2:	4b1a      	ldr	r3, [pc, #104]	; (2b4c <xTaskPriorityInherit+0xd0>)
    2ae4:	681b      	ldr	r3, [r3, #0]
    2ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2ae8:	68bb      	ldr	r3, [r7, #8]
    2aea:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    2aec:	68bb      	ldr	r3, [r7, #8]
    2aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2af0:	4b19      	ldr	r3, [pc, #100]	; (2b58 <xTaskPriorityInherit+0xdc>)
    2af2:	681b      	ldr	r3, [r3, #0]
    2af4:	429a      	cmp	r2, r3
    2af6:	d903      	bls.n	2b00 <xTaskPriorityInherit+0x84>
    2af8:	68bb      	ldr	r3, [r7, #8]
    2afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2afc:	4b16      	ldr	r3, [pc, #88]	; (2b58 <xTaskPriorityInherit+0xdc>)
    2afe:	601a      	str	r2, [r3, #0]
    2b00:	68bb      	ldr	r3, [r7, #8]
    2b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2b04:	0013      	movs	r3, r2
    2b06:	009b      	lsls	r3, r3, #2
    2b08:	189b      	adds	r3, r3, r2
    2b0a:	009b      	lsls	r3, r3, #2
    2b0c:	4a10      	ldr	r2, [pc, #64]	; (2b50 <xTaskPriorityInherit+0xd4>)
    2b0e:	189a      	adds	r2, r3, r2
    2b10:	68bb      	ldr	r3, [r7, #8]
    2b12:	3304      	adds	r3, #4
    2b14:	0019      	movs	r1, r3
    2b16:	0010      	movs	r0, r2
    2b18:	4b10      	ldr	r3, [pc, #64]	; (2b5c <xTaskPriorityInherit+0xe0>)
    2b1a:	4798      	blx	r3
    2b1c:	e004      	b.n	2b28 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    2b1e:	4b0b      	ldr	r3, [pc, #44]	; (2b4c <xTaskPriorityInherit+0xd0>)
    2b20:	681b      	ldr	r3, [r3, #0]
    2b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2b24:	68bb      	ldr	r3, [r7, #8]
    2b26:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    2b28:	2301      	movs	r3, #1
    2b2a:	60fb      	str	r3, [r7, #12]
    2b2c:	e008      	b.n	2b40 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    2b2e:	68bb      	ldr	r3, [r7, #8]
    2b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2b32:	4b06      	ldr	r3, [pc, #24]	; (2b4c <xTaskPriorityInherit+0xd0>)
    2b34:	681b      	ldr	r3, [r3, #0]
    2b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b38:	429a      	cmp	r2, r3
    2b3a:	d201      	bcs.n	2b40 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    2b3c:	2301      	movs	r3, #1
    2b3e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    2b40:	68fb      	ldr	r3, [r7, #12]
	}
    2b42:	0018      	movs	r0, r3
    2b44:	46bd      	mov	sp, r7
    2b46:	b004      	add	sp, #16
    2b48:	bd80      	pop	{r7, pc}
    2b4a:	46c0      	nop			; (mov r8, r8)
    2b4c:	20003100 	.word	0x20003100
    2b50:	20003104 	.word	0x20003104
    2b54:	00000fb1 	.word	0x00000fb1
    2b58:	200031e0 	.word	0x200031e0
    2b5c:	00000f01 	.word	0x00000f01

00002b60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    2b60:	b580      	push	{r7, lr}
    2b62:	b084      	sub	sp, #16
    2b64:	af00      	add	r7, sp, #0
    2b66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    2b68:	687b      	ldr	r3, [r7, #4]
    2b6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    2b6c:	2300      	movs	r3, #0
    2b6e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    2b70:	687b      	ldr	r3, [r7, #4]
    2b72:	2b00      	cmp	r3, #0
    2b74:	d044      	beq.n	2c00 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    2b76:	4b25      	ldr	r3, [pc, #148]	; (2c0c <xTaskPriorityDisinherit+0xac>)
    2b78:	681b      	ldr	r3, [r3, #0]
    2b7a:	68ba      	ldr	r2, [r7, #8]
    2b7c:	429a      	cmp	r2, r3
    2b7e:	d001      	beq.n	2b84 <xTaskPriorityDisinherit+0x24>
    2b80:	b672      	cpsid	i
    2b82:	e7fe      	b.n	2b82 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    2b84:	68bb      	ldr	r3, [r7, #8]
    2b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2b88:	2b00      	cmp	r3, #0
    2b8a:	d101      	bne.n	2b90 <xTaskPriorityDisinherit+0x30>
    2b8c:	b672      	cpsid	i
    2b8e:	e7fe      	b.n	2b8e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    2b90:	68bb      	ldr	r3, [r7, #8]
    2b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2b94:	1e5a      	subs	r2, r3, #1
    2b96:	68bb      	ldr	r3, [r7, #8]
    2b98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2b9a:	68bb      	ldr	r3, [r7, #8]
    2b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2b9e:	68bb      	ldr	r3, [r7, #8]
    2ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2ba2:	429a      	cmp	r2, r3
    2ba4:	d02c      	beq.n	2c00 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2ba6:	68bb      	ldr	r3, [r7, #8]
    2ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2baa:	2b00      	cmp	r3, #0
    2bac:	d128      	bne.n	2c00 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2bae:	68bb      	ldr	r3, [r7, #8]
    2bb0:	3304      	adds	r3, #4
    2bb2:	0018      	movs	r0, r3
    2bb4:	4b16      	ldr	r3, [pc, #88]	; (2c10 <xTaskPriorityDisinherit+0xb0>)
    2bb6:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    2bb8:	68bb      	ldr	r3, [r7, #8]
    2bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2bbc:	68bb      	ldr	r3, [r7, #8]
    2bbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2bc0:	68bb      	ldr	r3, [r7, #8]
    2bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bc4:	2205      	movs	r2, #5
    2bc6:	1ad2      	subs	r2, r2, r3
    2bc8:	68bb      	ldr	r3, [r7, #8]
    2bca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    2bcc:	68bb      	ldr	r3, [r7, #8]
    2bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2bd0:	4b10      	ldr	r3, [pc, #64]	; (2c14 <xTaskPriorityDisinherit+0xb4>)
    2bd2:	681b      	ldr	r3, [r3, #0]
    2bd4:	429a      	cmp	r2, r3
    2bd6:	d903      	bls.n	2be0 <xTaskPriorityDisinherit+0x80>
    2bd8:	68bb      	ldr	r3, [r7, #8]
    2bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2bdc:	4b0d      	ldr	r3, [pc, #52]	; (2c14 <xTaskPriorityDisinherit+0xb4>)
    2bde:	601a      	str	r2, [r3, #0]
    2be0:	68bb      	ldr	r3, [r7, #8]
    2be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2be4:	0013      	movs	r3, r2
    2be6:	009b      	lsls	r3, r3, #2
    2be8:	189b      	adds	r3, r3, r2
    2bea:	009b      	lsls	r3, r3, #2
    2bec:	4a0a      	ldr	r2, [pc, #40]	; (2c18 <xTaskPriorityDisinherit+0xb8>)
    2bee:	189a      	adds	r2, r3, r2
    2bf0:	68bb      	ldr	r3, [r7, #8]
    2bf2:	3304      	adds	r3, #4
    2bf4:	0019      	movs	r1, r3
    2bf6:	0010      	movs	r0, r2
    2bf8:	4b08      	ldr	r3, [pc, #32]	; (2c1c <xTaskPriorityDisinherit+0xbc>)
    2bfa:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    2bfc:	2301      	movs	r3, #1
    2bfe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    2c00:	68fb      	ldr	r3, [r7, #12]
	}
    2c02:	0018      	movs	r0, r3
    2c04:	46bd      	mov	sp, r7
    2c06:	b004      	add	sp, #16
    2c08:	bd80      	pop	{r7, pc}
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	20003100 	.word	0x20003100
    2c10:	00000fb1 	.word	0x00000fb1
    2c14:	200031e0 	.word	0x200031e0
    2c18:	20003104 	.word	0x20003104
    2c1c:	00000f01 	.word	0x00000f01

00002c20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    2c20:	b580      	push	{r7, lr}
    2c22:	b086      	sub	sp, #24
    2c24:	af00      	add	r7, sp, #0
    2c26:	6078      	str	r0, [r7, #4]
    2c28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    2c2a:	687b      	ldr	r3, [r7, #4]
    2c2c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    2c2e:	2301      	movs	r3, #1
    2c30:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	2b00      	cmp	r3, #0
    2c36:	d05d      	beq.n	2cf4 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
    2c38:	693b      	ldr	r3, [r7, #16]
    2c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d101      	bne.n	2c44 <vTaskPriorityDisinheritAfterTimeout+0x24>
    2c40:	b672      	cpsid	i
    2c42:	e7fe      	b.n	2c42 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    2c44:	693b      	ldr	r3, [r7, #16]
    2c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2c48:	683b      	ldr	r3, [r7, #0]
    2c4a:	429a      	cmp	r2, r3
    2c4c:	d202      	bcs.n	2c54 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    2c4e:	683b      	ldr	r3, [r7, #0]
    2c50:	617b      	str	r3, [r7, #20]
    2c52:	e002      	b.n	2c5a <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    2c54:	693b      	ldr	r3, [r7, #16]
    2c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2c58:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    2c5a:	693b      	ldr	r3, [r7, #16]
    2c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c5e:	697b      	ldr	r3, [r7, #20]
    2c60:	429a      	cmp	r2, r3
    2c62:	d047      	beq.n	2cf4 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    2c64:	693b      	ldr	r3, [r7, #16]
    2c66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    2c68:	68fb      	ldr	r3, [r7, #12]
    2c6a:	429a      	cmp	r2, r3
    2c6c:	d142      	bne.n	2cf4 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
    2c6e:	4b23      	ldr	r3, [pc, #140]	; (2cfc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    2c70:	681b      	ldr	r3, [r3, #0]
    2c72:	693a      	ldr	r2, [r7, #16]
    2c74:	429a      	cmp	r2, r3
    2c76:	d101      	bne.n	2c7c <vTaskPriorityDisinheritAfterTimeout+0x5c>
    2c78:	b672      	cpsid	i
    2c7a:	e7fe      	b.n	2c7a <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    2c7c:	693b      	ldr	r3, [r7, #16]
    2c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c80:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    2c82:	693b      	ldr	r3, [r7, #16]
    2c84:	697a      	ldr	r2, [r7, #20]
    2c86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2c88:	693b      	ldr	r3, [r7, #16]
    2c8a:	699b      	ldr	r3, [r3, #24]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	db04      	blt.n	2c9a <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2c90:	697b      	ldr	r3, [r7, #20]
    2c92:	2205      	movs	r2, #5
    2c94:	1ad2      	subs	r2, r2, r3
    2c96:	693b      	ldr	r3, [r7, #16]
    2c98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    2c9a:	693b      	ldr	r3, [r7, #16]
    2c9c:	6959      	ldr	r1, [r3, #20]
    2c9e:	68ba      	ldr	r2, [r7, #8]
    2ca0:	0013      	movs	r3, r2
    2ca2:	009b      	lsls	r3, r3, #2
    2ca4:	189b      	adds	r3, r3, r2
    2ca6:	009b      	lsls	r3, r3, #2
    2ca8:	4a15      	ldr	r2, [pc, #84]	; (2d00 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    2caa:	189b      	adds	r3, r3, r2
    2cac:	4299      	cmp	r1, r3
    2cae:	d101      	bne.n	2cb4 <vTaskPriorityDisinheritAfterTimeout+0x94>
    2cb0:	2301      	movs	r3, #1
    2cb2:	e000      	b.n	2cb6 <vTaskPriorityDisinheritAfterTimeout+0x96>
    2cb4:	2300      	movs	r3, #0
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d01c      	beq.n	2cf4 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2cba:	693b      	ldr	r3, [r7, #16]
    2cbc:	3304      	adds	r3, #4
    2cbe:	0018      	movs	r0, r3
    2cc0:	4b10      	ldr	r3, [pc, #64]	; (2d04 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
    2cc2:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    2cc4:	693b      	ldr	r3, [r7, #16]
    2cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2cc8:	4b0f      	ldr	r3, [pc, #60]	; (2d08 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    2cca:	681b      	ldr	r3, [r3, #0]
    2ccc:	429a      	cmp	r2, r3
    2cce:	d903      	bls.n	2cd8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
    2cd0:	693b      	ldr	r3, [r7, #16]
    2cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2cd4:	4b0c      	ldr	r3, [pc, #48]	; (2d08 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    2cd6:	601a      	str	r2, [r3, #0]
    2cd8:	693b      	ldr	r3, [r7, #16]
    2cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2cdc:	0013      	movs	r3, r2
    2cde:	009b      	lsls	r3, r3, #2
    2ce0:	189b      	adds	r3, r3, r2
    2ce2:	009b      	lsls	r3, r3, #2
    2ce4:	4a06      	ldr	r2, [pc, #24]	; (2d00 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    2ce6:	189a      	adds	r2, r3, r2
    2ce8:	693b      	ldr	r3, [r7, #16]
    2cea:	3304      	adds	r3, #4
    2cec:	0019      	movs	r1, r3
    2cee:	0010      	movs	r0, r2
    2cf0:	4b06      	ldr	r3, [pc, #24]	; (2d0c <vTaskPriorityDisinheritAfterTimeout+0xec>)
    2cf2:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2cf4:	46c0      	nop			; (mov r8, r8)
    2cf6:	46bd      	mov	sp, r7
    2cf8:	b006      	add	sp, #24
    2cfa:	bd80      	pop	{r7, pc}
    2cfc:	20003100 	.word	0x20003100
    2d00:	20003104 	.word	0x20003104
    2d04:	00000fb1 	.word	0x00000fb1
    2d08:	200031e0 	.word	0x200031e0
    2d0c:	00000f01 	.word	0x00000f01

00002d10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    2d10:	b580      	push	{r7, lr}
    2d12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2d14:	4b06      	ldr	r3, [pc, #24]	; (2d30 <pvTaskIncrementMutexHeldCount+0x20>)
    2d16:	681b      	ldr	r3, [r3, #0]
    2d18:	2b00      	cmp	r3, #0
    2d1a:	d004      	beq.n	2d26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    2d1c:	4b04      	ldr	r3, [pc, #16]	; (2d30 <pvTaskIncrementMutexHeldCount+0x20>)
    2d1e:	681b      	ldr	r3, [r3, #0]
    2d20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    2d22:	3201      	adds	r2, #1
    2d24:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
    2d26:	4b02      	ldr	r3, [pc, #8]	; (2d30 <pvTaskIncrementMutexHeldCount+0x20>)
    2d28:	681b      	ldr	r3, [r3, #0]
	}
    2d2a:	0018      	movs	r0, r3
    2d2c:	46bd      	mov	sp, r7
    2d2e:	bd80      	pop	{r7, pc}
    2d30:	20003100 	.word	0x20003100

00002d34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    2d34:	b580      	push	{r7, lr}
    2d36:	b084      	sub	sp, #16
    2d38:	af00      	add	r7, sp, #0
    2d3a:	6078      	str	r0, [r7, #4]
    2d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2d3e:	4b21      	ldr	r3, [pc, #132]	; (2dc4 <prvAddCurrentTaskToDelayedList+0x90>)
    2d40:	681b      	ldr	r3, [r3, #0]
    2d42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2d44:	4b20      	ldr	r3, [pc, #128]	; (2dc8 <prvAddCurrentTaskToDelayedList+0x94>)
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	3304      	adds	r3, #4
    2d4a:	0018      	movs	r0, r3
    2d4c:	4b1f      	ldr	r3, [pc, #124]	; (2dcc <prvAddCurrentTaskToDelayedList+0x98>)
    2d4e:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2d50:	687b      	ldr	r3, [r7, #4]
    2d52:	3301      	adds	r3, #1
    2d54:	d10b      	bne.n	2d6e <prvAddCurrentTaskToDelayedList+0x3a>
    2d56:	683b      	ldr	r3, [r7, #0]
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d008      	beq.n	2d6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2d5c:	4b1a      	ldr	r3, [pc, #104]	; (2dc8 <prvAddCurrentTaskToDelayedList+0x94>)
    2d5e:	681b      	ldr	r3, [r3, #0]
    2d60:	1d1a      	adds	r2, r3, #4
    2d62:	4b1b      	ldr	r3, [pc, #108]	; (2dd0 <prvAddCurrentTaskToDelayedList+0x9c>)
    2d64:	0011      	movs	r1, r2
    2d66:	0018      	movs	r0, r3
    2d68:	4b1a      	ldr	r3, [pc, #104]	; (2dd4 <prvAddCurrentTaskToDelayedList+0xa0>)
    2d6a:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2d6c:	e026      	b.n	2dbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    2d6e:	68fa      	ldr	r2, [r7, #12]
    2d70:	687b      	ldr	r3, [r7, #4]
    2d72:	18d3      	adds	r3, r2, r3
    2d74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2d76:	4b14      	ldr	r3, [pc, #80]	; (2dc8 <prvAddCurrentTaskToDelayedList+0x94>)
    2d78:	681b      	ldr	r3, [r3, #0]
    2d7a:	68ba      	ldr	r2, [r7, #8]
    2d7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    2d7e:	68ba      	ldr	r2, [r7, #8]
    2d80:	68fb      	ldr	r3, [r7, #12]
    2d82:	429a      	cmp	r2, r3
    2d84:	d209      	bcs.n	2d9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2d86:	4b14      	ldr	r3, [pc, #80]	; (2dd8 <prvAddCurrentTaskToDelayedList+0xa4>)
    2d88:	681a      	ldr	r2, [r3, #0]
    2d8a:	4b0f      	ldr	r3, [pc, #60]	; (2dc8 <prvAddCurrentTaskToDelayedList+0x94>)
    2d8c:	681b      	ldr	r3, [r3, #0]
    2d8e:	3304      	adds	r3, #4
    2d90:	0019      	movs	r1, r3
    2d92:	0010      	movs	r0, r2
    2d94:	4b11      	ldr	r3, [pc, #68]	; (2ddc <prvAddCurrentTaskToDelayedList+0xa8>)
    2d96:	4798      	blx	r3
}
    2d98:	e010      	b.n	2dbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2d9a:	4b11      	ldr	r3, [pc, #68]	; (2de0 <prvAddCurrentTaskToDelayedList+0xac>)
    2d9c:	681a      	ldr	r2, [r3, #0]
    2d9e:	4b0a      	ldr	r3, [pc, #40]	; (2dc8 <prvAddCurrentTaskToDelayedList+0x94>)
    2da0:	681b      	ldr	r3, [r3, #0]
    2da2:	3304      	adds	r3, #4
    2da4:	0019      	movs	r1, r3
    2da6:	0010      	movs	r0, r2
    2da8:	4b0c      	ldr	r3, [pc, #48]	; (2ddc <prvAddCurrentTaskToDelayedList+0xa8>)
    2daa:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    2dac:	4b0d      	ldr	r3, [pc, #52]	; (2de4 <prvAddCurrentTaskToDelayedList+0xb0>)
    2dae:	681b      	ldr	r3, [r3, #0]
    2db0:	68ba      	ldr	r2, [r7, #8]
    2db2:	429a      	cmp	r2, r3
    2db4:	d202      	bcs.n	2dbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    2db6:	4b0b      	ldr	r3, [pc, #44]	; (2de4 <prvAddCurrentTaskToDelayedList+0xb0>)
    2db8:	68ba      	ldr	r2, [r7, #8]
    2dba:	601a      	str	r2, [r3, #0]
}
    2dbc:	46c0      	nop			; (mov r8, r8)
    2dbe:	46bd      	mov	sp, r7
    2dc0:	b004      	add	sp, #16
    2dc2:	bd80      	pop	{r7, pc}
    2dc4:	200031dc 	.word	0x200031dc
    2dc8:	20003100 	.word	0x20003100
    2dcc:	00000fb1 	.word	0x00000fb1
    2dd0:	200031c4 	.word	0x200031c4
    2dd4:	00000f01 	.word	0x00000f01
    2dd8:	20003194 	.word	0x20003194
    2ddc:	00000f45 	.word	0x00000f45
    2de0:	20003190 	.word	0x20003190
    2de4:	200031f8 	.word	0x200031f8

00002de8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    2de8:	b590      	push	{r4, r7, lr}
    2dea:	b085      	sub	sp, #20
    2dec:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    2dee:	2300      	movs	r3, #0
    2df0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    2df2:	4b0e      	ldr	r3, [pc, #56]	; (2e2c <xTimerCreateTimerTask+0x44>)
    2df4:	4798      	blx	r3

	if( xTimerQueue != NULL )
    2df6:	4b0e      	ldr	r3, [pc, #56]	; (2e30 <xTimerCreateTimerTask+0x48>)
    2df8:	681b      	ldr	r3, [r3, #0]
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d00b      	beq.n	2e16 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    2dfe:	490d      	ldr	r1, [pc, #52]	; (2e34 <xTimerCreateTimerTask+0x4c>)
    2e00:	480d      	ldr	r0, [pc, #52]	; (2e38 <xTimerCreateTimerTask+0x50>)
    2e02:	4b0e      	ldr	r3, [pc, #56]	; (2e3c <xTimerCreateTimerTask+0x54>)
    2e04:	9301      	str	r3, [sp, #4]
    2e06:	2302      	movs	r3, #2
    2e08:	9300      	str	r3, [sp, #0]
    2e0a:	2300      	movs	r3, #0
    2e0c:	2280      	movs	r2, #128	; 0x80
    2e0e:	4c0c      	ldr	r4, [pc, #48]	; (2e40 <xTimerCreateTimerTask+0x58>)
    2e10:	47a0      	blx	r4
    2e12:	0003      	movs	r3, r0
    2e14:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    2e16:	687b      	ldr	r3, [r7, #4]
    2e18:	2b00      	cmp	r3, #0
    2e1a:	d101      	bne.n	2e20 <xTimerCreateTimerTask+0x38>
    2e1c:	b672      	cpsid	i
    2e1e:	e7fe      	b.n	2e1e <xTimerCreateTimerTask+0x36>
	return xReturn;
    2e20:	687b      	ldr	r3, [r7, #4]
}
    2e22:	0018      	movs	r0, r3
    2e24:	46bd      	mov	sp, r7
    2e26:	b003      	add	sp, #12
    2e28:	bd90      	pop	{r4, r7, pc}
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	00003331 	.word	0x00003331
    2e30:	20003234 	.word	0x20003234
    2e34:	00006308 	.word	0x00006308
    2e38:	00002f69 	.word	0x00002f69
    2e3c:	20003238 	.word	0x20003238
    2e40:	00001fb9 	.word	0x00001fb9

00002e44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2e44:	b590      	push	{r4, r7, lr}
    2e46:	b089      	sub	sp, #36	; 0x24
    2e48:	af00      	add	r7, sp, #0
    2e4a:	60f8      	str	r0, [r7, #12]
    2e4c:	60b9      	str	r1, [r7, #8]
    2e4e:	607a      	str	r2, [r7, #4]
    2e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    2e52:	2300      	movs	r3, #0
    2e54:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    2e56:	68fb      	ldr	r3, [r7, #12]
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d101      	bne.n	2e60 <xTimerGenericCommand+0x1c>
    2e5c:	b672      	cpsid	i
    2e5e:	e7fe      	b.n	2e5e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    2e60:	4b1e      	ldr	r3, [pc, #120]	; (2edc <xTimerGenericCommand+0x98>)
    2e62:	681b      	ldr	r3, [r3, #0]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d033      	beq.n	2ed0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2e68:	2310      	movs	r3, #16
    2e6a:	18fb      	adds	r3, r7, r3
    2e6c:	68ba      	ldr	r2, [r7, #8]
    2e6e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2e70:	2310      	movs	r3, #16
    2e72:	18fb      	adds	r3, r7, r3
    2e74:	687a      	ldr	r2, [r7, #4]
    2e76:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2e78:	2310      	movs	r3, #16
    2e7a:	18fb      	adds	r3, r7, r3
    2e7c:	68fa      	ldr	r2, [r7, #12]
    2e7e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2e80:	68bb      	ldr	r3, [r7, #8]
    2e82:	2b05      	cmp	r3, #5
    2e84:	dc1a      	bgt.n	2ebc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2e86:	4b16      	ldr	r3, [pc, #88]	; (2ee0 <xTimerGenericCommand+0x9c>)
    2e88:	4798      	blx	r3
    2e8a:	0003      	movs	r3, r0
    2e8c:	2b02      	cmp	r3, #2
    2e8e:	d10a      	bne.n	2ea6 <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2e90:	4b12      	ldr	r3, [pc, #72]	; (2edc <xTimerGenericCommand+0x98>)
    2e92:	6818      	ldr	r0, [r3, #0]
    2e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2e96:	2310      	movs	r3, #16
    2e98:	18f9      	adds	r1, r7, r3
    2e9a:	2300      	movs	r3, #0
    2e9c:	4c11      	ldr	r4, [pc, #68]	; (2ee4 <xTimerGenericCommand+0xa0>)
    2e9e:	47a0      	blx	r4
    2ea0:	0003      	movs	r3, r0
    2ea2:	61fb      	str	r3, [r7, #28]
    2ea4:	e014      	b.n	2ed0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2ea6:	4b0d      	ldr	r3, [pc, #52]	; (2edc <xTimerGenericCommand+0x98>)
    2ea8:	6818      	ldr	r0, [r3, #0]
    2eaa:	2310      	movs	r3, #16
    2eac:	18f9      	adds	r1, r7, r3
    2eae:	2300      	movs	r3, #0
    2eb0:	2200      	movs	r2, #0
    2eb2:	4c0c      	ldr	r4, [pc, #48]	; (2ee4 <xTimerGenericCommand+0xa0>)
    2eb4:	47a0      	blx	r4
    2eb6:	0003      	movs	r3, r0
    2eb8:	61fb      	str	r3, [r7, #28]
    2eba:	e009      	b.n	2ed0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2ebc:	4b07      	ldr	r3, [pc, #28]	; (2edc <xTimerGenericCommand+0x98>)
    2ebe:	6818      	ldr	r0, [r3, #0]
    2ec0:	683a      	ldr	r2, [r7, #0]
    2ec2:	2310      	movs	r3, #16
    2ec4:	18f9      	adds	r1, r7, r3
    2ec6:	2300      	movs	r3, #0
    2ec8:	4c07      	ldr	r4, [pc, #28]	; (2ee8 <xTimerGenericCommand+0xa4>)
    2eca:	47a0      	blx	r4
    2ecc:	0003      	movs	r3, r0
    2ece:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    2ed0:	69fb      	ldr	r3, [r7, #28]
}
    2ed2:	0018      	movs	r0, r3
    2ed4:	46bd      	mov	sp, r7
    2ed6:	b009      	add	sp, #36	; 0x24
    2ed8:	bd90      	pop	{r4, r7, pc}
    2eda:	46c0      	nop			; (mov r8, r8)
    2edc:	20003234 	.word	0x20003234
    2ee0:	00002a45 	.word	0x00002a45
    2ee4:	00001551 	.word	0x00001551
    2ee8:	00001731 	.word	0x00001731

00002eec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    2eec:	b590      	push	{r4, r7, lr}
    2eee:	b087      	sub	sp, #28
    2ef0:	af02      	add	r7, sp, #8
    2ef2:	6078      	str	r0, [r7, #4]
    2ef4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2ef6:	4b18      	ldr	r3, [pc, #96]	; (2f58 <prvProcessExpiredTimer+0x6c>)
    2ef8:	681b      	ldr	r3, [r3, #0]
    2efa:	68db      	ldr	r3, [r3, #12]
    2efc:	68db      	ldr	r3, [r3, #12]
    2efe:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2f00:	68fb      	ldr	r3, [r7, #12]
    2f02:	3304      	adds	r3, #4
    2f04:	0018      	movs	r0, r3
    2f06:	4b15      	ldr	r3, [pc, #84]	; (2f5c <prvProcessExpiredTimer+0x70>)
    2f08:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	69db      	ldr	r3, [r3, #28]
    2f0e:	2b01      	cmp	r3, #1
    2f10:	d119      	bne.n	2f46 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2f12:	68fb      	ldr	r3, [r7, #12]
    2f14:	699a      	ldr	r2, [r3, #24]
    2f16:	687b      	ldr	r3, [r7, #4]
    2f18:	18d1      	adds	r1, r2, r3
    2f1a:	687b      	ldr	r3, [r7, #4]
    2f1c:	683a      	ldr	r2, [r7, #0]
    2f1e:	68f8      	ldr	r0, [r7, #12]
    2f20:	4c0f      	ldr	r4, [pc, #60]	; (2f60 <prvProcessExpiredTimer+0x74>)
    2f22:	47a0      	blx	r4
    2f24:	1e03      	subs	r3, r0, #0
    2f26:	d00e      	beq.n	2f46 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2f28:	687a      	ldr	r2, [r7, #4]
    2f2a:	68f8      	ldr	r0, [r7, #12]
    2f2c:	2300      	movs	r3, #0
    2f2e:	9300      	str	r3, [sp, #0]
    2f30:	2300      	movs	r3, #0
    2f32:	2100      	movs	r1, #0
    2f34:	4c0b      	ldr	r4, [pc, #44]	; (2f64 <prvProcessExpiredTimer+0x78>)
    2f36:	47a0      	blx	r4
    2f38:	0003      	movs	r3, r0
    2f3a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    2f3c:	68bb      	ldr	r3, [r7, #8]
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d101      	bne.n	2f46 <prvProcessExpiredTimer+0x5a>
    2f42:	b672      	cpsid	i
    2f44:	e7fe      	b.n	2f44 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2f46:	68fb      	ldr	r3, [r7, #12]
    2f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f4a:	68fa      	ldr	r2, [r7, #12]
    2f4c:	0010      	movs	r0, r2
    2f4e:	4798      	blx	r3
}
    2f50:	46c0      	nop			; (mov r8, r8)
    2f52:	46bd      	mov	sp, r7
    2f54:	b005      	add	sp, #20
    2f56:	bd90      	pop	{r4, r7, pc}
    2f58:	2000322c 	.word	0x2000322c
    2f5c:	00000fb1 	.word	0x00000fb1
    2f60:	000030d1 	.word	0x000030d1
    2f64:	00002e45 	.word	0x00002e45

00002f68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    2f68:	b580      	push	{r7, lr}
    2f6a:	b084      	sub	sp, #16
    2f6c:	af00      	add	r7, sp, #0
    2f6e:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
    2f70:	4b08      	ldr	r3, [pc, #32]	; (2f94 <prvTimerTask+0x2c>)
    2f72:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    2f74:	2308      	movs	r3, #8
    2f76:	18fb      	adds	r3, r7, r3
    2f78:	0018      	movs	r0, r3
    2f7a:	4b07      	ldr	r3, [pc, #28]	; (2f98 <prvTimerTask+0x30>)
    2f7c:	4798      	blx	r3
    2f7e:	0003      	movs	r3, r0
    2f80:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    2f82:	68ba      	ldr	r2, [r7, #8]
    2f84:	68fb      	ldr	r3, [r7, #12]
    2f86:	0011      	movs	r1, r2
    2f88:	0018      	movs	r0, r3
    2f8a:	4b04      	ldr	r3, [pc, #16]	; (2f9c <prvTimerTask+0x34>)
    2f8c:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    2f8e:	4b04      	ldr	r3, [pc, #16]	; (2fa0 <prvTimerTask+0x38>)
    2f90:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    2f92:	e7ef      	b.n	2f74 <prvTimerTask+0xc>
    2f94:	000055f9 	.word	0x000055f9
    2f98:	00003049 	.word	0x00003049
    2f9c:	00002fa5 	.word	0x00002fa5
    2fa0:	00003159 	.word	0x00003159

00002fa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    2fa4:	b580      	push	{r7, lr}
    2fa6:	b084      	sub	sp, #16
    2fa8:	af00      	add	r7, sp, #0
    2faa:	6078      	str	r0, [r7, #4]
    2fac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2fae:	4b1e      	ldr	r3, [pc, #120]	; (3028 <prvProcessTimerOrBlockTask+0x84>)
    2fb0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2fb2:	2308      	movs	r3, #8
    2fb4:	18fb      	adds	r3, r7, r3
    2fb6:	0018      	movs	r0, r3
    2fb8:	4b1c      	ldr	r3, [pc, #112]	; (302c <prvProcessTimerOrBlockTask+0x88>)
    2fba:	4798      	blx	r3
    2fbc:	0003      	movs	r3, r0
    2fbe:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    2fc0:	68bb      	ldr	r3, [r7, #8]
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d129      	bne.n	301a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2fc6:	683b      	ldr	r3, [r7, #0]
    2fc8:	2b00      	cmp	r3, #0
    2fca:	d10c      	bne.n	2fe6 <prvProcessTimerOrBlockTask+0x42>
    2fcc:	687a      	ldr	r2, [r7, #4]
    2fce:	68fb      	ldr	r3, [r7, #12]
    2fd0:	429a      	cmp	r2, r3
    2fd2:	d808      	bhi.n	2fe6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    2fd4:	4b16      	ldr	r3, [pc, #88]	; (3030 <prvProcessTimerOrBlockTask+0x8c>)
    2fd6:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2fd8:	68fa      	ldr	r2, [r7, #12]
    2fda:	687b      	ldr	r3, [r7, #4]
    2fdc:	0011      	movs	r1, r2
    2fde:	0018      	movs	r0, r3
    2fe0:	4b14      	ldr	r3, [pc, #80]	; (3034 <prvProcessTimerOrBlockTask+0x90>)
    2fe2:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    2fe4:	e01b      	b.n	301e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    2fe6:	683b      	ldr	r3, [r7, #0]
    2fe8:	2b00      	cmp	r3, #0
    2fea:	d006      	beq.n	2ffa <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2fec:	4b12      	ldr	r3, [pc, #72]	; (3038 <prvProcessTimerOrBlockTask+0x94>)
    2fee:	681b      	ldr	r3, [r3, #0]
    2ff0:	681b      	ldr	r3, [r3, #0]
    2ff2:	425a      	negs	r2, r3
    2ff4:	4153      	adcs	r3, r2
    2ff6:	b2db      	uxtb	r3, r3
    2ff8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2ffa:	4b10      	ldr	r3, [pc, #64]	; (303c <prvProcessTimerOrBlockTask+0x98>)
    2ffc:	6818      	ldr	r0, [r3, #0]
    2ffe:	687a      	ldr	r2, [r7, #4]
    3000:	68fb      	ldr	r3, [r7, #12]
    3002:	1ad3      	subs	r3, r2, r3
    3004:	683a      	ldr	r2, [r7, #0]
    3006:	0019      	movs	r1, r3
    3008:	4b0d      	ldr	r3, [pc, #52]	; (3040 <prvProcessTimerOrBlockTask+0x9c>)
    300a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    300c:	4b08      	ldr	r3, [pc, #32]	; (3030 <prvProcessTimerOrBlockTask+0x8c>)
    300e:	4798      	blx	r3
    3010:	1e03      	subs	r3, r0, #0
    3012:	d104      	bne.n	301e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    3014:	4b0b      	ldr	r3, [pc, #44]	; (3044 <prvProcessTimerOrBlockTask+0xa0>)
    3016:	4798      	blx	r3
}
    3018:	e001      	b.n	301e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    301a:	4b05      	ldr	r3, [pc, #20]	; (3030 <prvProcessTimerOrBlockTask+0x8c>)
    301c:	4798      	blx	r3
}
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	46bd      	mov	sp, r7
    3022:	b004      	add	sp, #16
    3024:	bd80      	pop	{r7, pc}
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	000022d1 	.word	0x000022d1
    302c:	00003089 	.word	0x00003089
    3030:	000022e9 	.word	0x000022e9
    3034:	00002eed 	.word	0x00002eed
    3038:	20003230 	.word	0x20003230
    303c:	20003234 	.word	0x20003234
    3040:	00001e9d 	.word	0x00001e9d
    3044:	00001121 	.word	0x00001121

00003048 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    3048:	b580      	push	{r7, lr}
    304a:	b084      	sub	sp, #16
    304c:	af00      	add	r7, sp, #0
    304e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3050:	4b0c      	ldr	r3, [pc, #48]	; (3084 <prvGetNextExpireTime+0x3c>)
    3052:	681b      	ldr	r3, [r3, #0]
    3054:	681b      	ldr	r3, [r3, #0]
    3056:	425a      	negs	r2, r3
    3058:	4153      	adcs	r3, r2
    305a:	b2db      	uxtb	r3, r3
    305c:	001a      	movs	r2, r3
    305e:	687b      	ldr	r3, [r7, #4]
    3060:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    3062:	687b      	ldr	r3, [r7, #4]
    3064:	681b      	ldr	r3, [r3, #0]
    3066:	2b00      	cmp	r3, #0
    3068:	d105      	bne.n	3076 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    306a:	4b06      	ldr	r3, [pc, #24]	; (3084 <prvGetNextExpireTime+0x3c>)
    306c:	681b      	ldr	r3, [r3, #0]
    306e:	68db      	ldr	r3, [r3, #12]
    3070:	681b      	ldr	r3, [r3, #0]
    3072:	60fb      	str	r3, [r7, #12]
    3074:	e001      	b.n	307a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    3076:	2300      	movs	r3, #0
    3078:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    307a:	68fb      	ldr	r3, [r7, #12]
}
    307c:	0018      	movs	r0, r3
    307e:	46bd      	mov	sp, r7
    3080:	b004      	add	sp, #16
    3082:	bd80      	pop	{r7, pc}
    3084:	2000322c 	.word	0x2000322c

00003088 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3088:	b580      	push	{r7, lr}
    308a:	b084      	sub	sp, #16
    308c:	af00      	add	r7, sp, #0
    308e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    3090:	4b0c      	ldr	r3, [pc, #48]	; (30c4 <prvSampleTimeNow+0x3c>)
    3092:	4798      	blx	r3
    3094:	0003      	movs	r3, r0
    3096:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    3098:	4b0b      	ldr	r3, [pc, #44]	; (30c8 <prvSampleTimeNow+0x40>)
    309a:	681b      	ldr	r3, [r3, #0]
    309c:	68fa      	ldr	r2, [r7, #12]
    309e:	429a      	cmp	r2, r3
    30a0:	d205      	bcs.n	30ae <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    30a2:	4b0a      	ldr	r3, [pc, #40]	; (30cc <prvSampleTimeNow+0x44>)
    30a4:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    30a6:	687b      	ldr	r3, [r7, #4]
    30a8:	2201      	movs	r2, #1
    30aa:	601a      	str	r2, [r3, #0]
    30ac:	e002      	b.n	30b4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    30ae:	687b      	ldr	r3, [r7, #4]
    30b0:	2200      	movs	r2, #0
    30b2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    30b4:	4b04      	ldr	r3, [pc, #16]	; (30c8 <prvSampleTimeNow+0x40>)
    30b6:	68fa      	ldr	r2, [r7, #12]
    30b8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    30ba:	68fb      	ldr	r3, [r7, #12]
}
    30bc:	0018      	movs	r0, r3
    30be:	46bd      	mov	sp, r7
    30c0:	b004      	add	sp, #16
    30c2:	bd80      	pop	{r7, pc}
    30c4:	0000241d 	.word	0x0000241d
    30c8:	2000323c 	.word	0x2000323c
    30cc:	00003271 	.word	0x00003271

000030d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    30d0:	b580      	push	{r7, lr}
    30d2:	b086      	sub	sp, #24
    30d4:	af00      	add	r7, sp, #0
    30d6:	60f8      	str	r0, [r7, #12]
    30d8:	60b9      	str	r1, [r7, #8]
    30da:	607a      	str	r2, [r7, #4]
    30dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    30de:	2300      	movs	r3, #0
    30e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    30e2:	68fb      	ldr	r3, [r7, #12]
    30e4:	68ba      	ldr	r2, [r7, #8]
    30e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    30e8:	68fb      	ldr	r3, [r7, #12]
    30ea:	68fa      	ldr	r2, [r7, #12]
    30ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    30ee:	68ba      	ldr	r2, [r7, #8]
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	429a      	cmp	r2, r3
    30f4:	d812      	bhi.n	311c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    30f6:	687a      	ldr	r2, [r7, #4]
    30f8:	683b      	ldr	r3, [r7, #0]
    30fa:	1ad2      	subs	r2, r2, r3
    30fc:	68fb      	ldr	r3, [r7, #12]
    30fe:	699b      	ldr	r3, [r3, #24]
    3100:	429a      	cmp	r2, r3
    3102:	d302      	bcc.n	310a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    3104:	2301      	movs	r3, #1
    3106:	617b      	str	r3, [r7, #20]
    3108:	e01b      	b.n	3142 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    310a:	4b10      	ldr	r3, [pc, #64]	; (314c <prvInsertTimerInActiveList+0x7c>)
    310c:	681a      	ldr	r2, [r3, #0]
    310e:	68fb      	ldr	r3, [r7, #12]
    3110:	3304      	adds	r3, #4
    3112:	0019      	movs	r1, r3
    3114:	0010      	movs	r0, r2
    3116:	4b0e      	ldr	r3, [pc, #56]	; (3150 <prvInsertTimerInActiveList+0x80>)
    3118:	4798      	blx	r3
    311a:	e012      	b.n	3142 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    311c:	687a      	ldr	r2, [r7, #4]
    311e:	683b      	ldr	r3, [r7, #0]
    3120:	429a      	cmp	r2, r3
    3122:	d206      	bcs.n	3132 <prvInsertTimerInActiveList+0x62>
    3124:	68ba      	ldr	r2, [r7, #8]
    3126:	683b      	ldr	r3, [r7, #0]
    3128:	429a      	cmp	r2, r3
    312a:	d302      	bcc.n	3132 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    312c:	2301      	movs	r3, #1
    312e:	617b      	str	r3, [r7, #20]
    3130:	e007      	b.n	3142 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3132:	4b08      	ldr	r3, [pc, #32]	; (3154 <prvInsertTimerInActiveList+0x84>)
    3134:	681a      	ldr	r2, [r3, #0]
    3136:	68fb      	ldr	r3, [r7, #12]
    3138:	3304      	adds	r3, #4
    313a:	0019      	movs	r1, r3
    313c:	0010      	movs	r0, r2
    313e:	4b04      	ldr	r3, [pc, #16]	; (3150 <prvInsertTimerInActiveList+0x80>)
    3140:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    3142:	697b      	ldr	r3, [r7, #20]
}
    3144:	0018      	movs	r0, r3
    3146:	46bd      	mov	sp, r7
    3148:	b006      	add	sp, #24
    314a:	bd80      	pop	{r7, pc}
    314c:	20003230 	.word	0x20003230
    3150:	00000f45 	.word	0x00000f45
    3154:	2000322c 	.word	0x2000322c

00003158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    3158:	b590      	push	{r4, r7, lr}
    315a:	b08b      	sub	sp, #44	; 0x2c
    315c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    315e:	e068      	b.n	3232 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3160:	2308      	movs	r3, #8
    3162:	18fb      	adds	r3, r7, r3
    3164:	681b      	ldr	r3, [r3, #0]
    3166:	2b00      	cmp	r3, #0
    3168:	db63      	blt.n	3232 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    316a:	2308      	movs	r3, #8
    316c:	18fb      	adds	r3, r7, r3
    316e:	689b      	ldr	r3, [r3, #8]
    3170:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3172:	69fb      	ldr	r3, [r7, #28]
    3174:	695b      	ldr	r3, [r3, #20]
    3176:	2b00      	cmp	r3, #0
    3178:	d004      	beq.n	3184 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    317a:	69fb      	ldr	r3, [r7, #28]
    317c:	3304      	adds	r3, #4
    317e:	0018      	movs	r0, r3
    3180:	4b33      	ldr	r3, [pc, #204]	; (3250 <prvProcessReceivedCommands+0xf8>)
    3182:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3184:	1d3b      	adds	r3, r7, #4
    3186:	0018      	movs	r0, r3
    3188:	4b32      	ldr	r3, [pc, #200]	; (3254 <prvProcessReceivedCommands+0xfc>)
    318a:	4798      	blx	r3
    318c:	0003      	movs	r3, r0
    318e:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    3190:	2308      	movs	r3, #8
    3192:	18fb      	adds	r3, r7, r3
    3194:	681b      	ldr	r3, [r3, #0]
    3196:	2b09      	cmp	r3, #9
    3198:	d84a      	bhi.n	3230 <prvProcessReceivedCommands+0xd8>
    319a:	009a      	lsls	r2, r3, #2
    319c:	4b2e      	ldr	r3, [pc, #184]	; (3258 <prvProcessReceivedCommands+0x100>)
    319e:	18d3      	adds	r3, r2, r3
    31a0:	681b      	ldr	r3, [r3, #0]
    31a2:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    31a4:	2308      	movs	r3, #8
    31a6:	18fb      	adds	r3, r7, r3
    31a8:	685a      	ldr	r2, [r3, #4]
    31aa:	69fb      	ldr	r3, [r7, #28]
    31ac:	699b      	ldr	r3, [r3, #24]
    31ae:	18d1      	adds	r1, r2, r3
    31b0:	2308      	movs	r3, #8
    31b2:	18fb      	adds	r3, r7, r3
    31b4:	685b      	ldr	r3, [r3, #4]
    31b6:	69ba      	ldr	r2, [r7, #24]
    31b8:	69f8      	ldr	r0, [r7, #28]
    31ba:	4c28      	ldr	r4, [pc, #160]	; (325c <prvProcessReceivedCommands+0x104>)
    31bc:	47a0      	blx	r4
    31be:	1e03      	subs	r3, r0, #0
    31c0:	d037      	beq.n	3232 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    31c2:	69fb      	ldr	r3, [r7, #28]
    31c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31c6:	69fa      	ldr	r2, [r7, #28]
    31c8:	0010      	movs	r0, r2
    31ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    31cc:	69fb      	ldr	r3, [r7, #28]
    31ce:	69db      	ldr	r3, [r3, #28]
    31d0:	2b01      	cmp	r3, #1
    31d2:	d12e      	bne.n	3232 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    31d4:	2308      	movs	r3, #8
    31d6:	18fb      	adds	r3, r7, r3
    31d8:	685a      	ldr	r2, [r3, #4]
    31da:	69fb      	ldr	r3, [r7, #28]
    31dc:	699b      	ldr	r3, [r3, #24]
    31de:	18d2      	adds	r2, r2, r3
    31e0:	69f8      	ldr	r0, [r7, #28]
    31e2:	2300      	movs	r3, #0
    31e4:	9300      	str	r3, [sp, #0]
    31e6:	2300      	movs	r3, #0
    31e8:	2100      	movs	r1, #0
    31ea:	4c1d      	ldr	r4, [pc, #116]	; (3260 <prvProcessReceivedCommands+0x108>)
    31ec:	47a0      	blx	r4
    31ee:	0003      	movs	r3, r0
    31f0:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    31f2:	697b      	ldr	r3, [r7, #20]
    31f4:	2b00      	cmp	r3, #0
    31f6:	d11c      	bne.n	3232 <prvProcessReceivedCommands+0xda>
    31f8:	b672      	cpsid	i
    31fa:	e7fe      	b.n	31fa <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    31fc:	2308      	movs	r3, #8
    31fe:	18fb      	adds	r3, r7, r3
    3200:	685a      	ldr	r2, [r3, #4]
    3202:	69fb      	ldr	r3, [r7, #28]
    3204:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    3206:	69fb      	ldr	r3, [r7, #28]
    3208:	699b      	ldr	r3, [r3, #24]
    320a:	2b00      	cmp	r3, #0
    320c:	d101      	bne.n	3212 <prvProcessReceivedCommands+0xba>
    320e:	b672      	cpsid	i
    3210:	e7fe      	b.n	3210 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3212:	69fb      	ldr	r3, [r7, #28]
    3214:	699a      	ldr	r2, [r3, #24]
    3216:	69bb      	ldr	r3, [r7, #24]
    3218:	18d1      	adds	r1, r2, r3
    321a:	69bb      	ldr	r3, [r7, #24]
    321c:	69ba      	ldr	r2, [r7, #24]
    321e:	69f8      	ldr	r0, [r7, #28]
    3220:	4c0e      	ldr	r4, [pc, #56]	; (325c <prvProcessReceivedCommands+0x104>)
    3222:	47a0      	blx	r4
					break;
    3224:	e005      	b.n	3232 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    3226:	69fb      	ldr	r3, [r7, #28]
    3228:	0018      	movs	r0, r3
    322a:	4b0e      	ldr	r3, [pc, #56]	; (3264 <prvProcessReceivedCommands+0x10c>)
    322c:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    322e:	e000      	b.n	3232 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    3230:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3232:	4b0d      	ldr	r3, [pc, #52]	; (3268 <prvProcessReceivedCommands+0x110>)
    3234:	681b      	ldr	r3, [r3, #0]
    3236:	2208      	movs	r2, #8
    3238:	18b9      	adds	r1, r7, r2
    323a:	2200      	movs	r2, #0
    323c:	0018      	movs	r0, r3
    323e:	4b0b      	ldr	r3, [pc, #44]	; (326c <prvProcessReceivedCommands+0x114>)
    3240:	4798      	blx	r3
    3242:	1e03      	subs	r3, r0, #0
    3244:	d18c      	bne.n	3160 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	46bd      	mov	sp, r7
    324a:	b009      	add	sp, #36	; 0x24
    324c:	bd90      	pop	{r4, r7, pc}
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	00000fb1 	.word	0x00000fb1
    3254:	00003089 	.word	0x00003089
    3258:	00006310 	.word	0x00006310
    325c:	000030d1 	.word	0x000030d1
    3260:	00002e45 	.word	0x00002e45
    3264:	00001321 	.word	0x00001321
    3268:	20003234 	.word	0x20003234
    326c:	00001851 	.word	0x00001851

00003270 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    3270:	b590      	push	{r4, r7, lr}
    3272:	b089      	sub	sp, #36	; 0x24
    3274:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3276:	e03e      	b.n	32f6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3278:	4b28      	ldr	r3, [pc, #160]	; (331c <prvSwitchTimerLists+0xac>)
    327a:	681b      	ldr	r3, [r3, #0]
    327c:	68db      	ldr	r3, [r3, #12]
    327e:	681b      	ldr	r3, [r3, #0]
    3280:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3282:	4b26      	ldr	r3, [pc, #152]	; (331c <prvSwitchTimerLists+0xac>)
    3284:	681b      	ldr	r3, [r3, #0]
    3286:	68db      	ldr	r3, [r3, #12]
    3288:	68db      	ldr	r3, [r3, #12]
    328a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    328c:	693b      	ldr	r3, [r7, #16]
    328e:	3304      	adds	r3, #4
    3290:	0018      	movs	r0, r3
    3292:	4b23      	ldr	r3, [pc, #140]	; (3320 <prvSwitchTimerLists+0xb0>)
    3294:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3296:	693b      	ldr	r3, [r7, #16]
    3298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    329a:	693a      	ldr	r2, [r7, #16]
    329c:	0010      	movs	r0, r2
    329e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    32a0:	693b      	ldr	r3, [r7, #16]
    32a2:	69db      	ldr	r3, [r3, #28]
    32a4:	2b01      	cmp	r3, #1
    32a6:	d126      	bne.n	32f6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    32a8:	693b      	ldr	r3, [r7, #16]
    32aa:	699a      	ldr	r2, [r3, #24]
    32ac:	697b      	ldr	r3, [r7, #20]
    32ae:	18d3      	adds	r3, r2, r3
    32b0:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    32b2:	68fa      	ldr	r2, [r7, #12]
    32b4:	697b      	ldr	r3, [r7, #20]
    32b6:	429a      	cmp	r2, r3
    32b8:	d90e      	bls.n	32d8 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    32ba:	693b      	ldr	r3, [r7, #16]
    32bc:	68fa      	ldr	r2, [r7, #12]
    32be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    32c0:	693b      	ldr	r3, [r7, #16]
    32c2:	693a      	ldr	r2, [r7, #16]
    32c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    32c6:	4b15      	ldr	r3, [pc, #84]	; (331c <prvSwitchTimerLists+0xac>)
    32c8:	681a      	ldr	r2, [r3, #0]
    32ca:	693b      	ldr	r3, [r7, #16]
    32cc:	3304      	adds	r3, #4
    32ce:	0019      	movs	r1, r3
    32d0:	0010      	movs	r0, r2
    32d2:	4b14      	ldr	r3, [pc, #80]	; (3324 <prvSwitchTimerLists+0xb4>)
    32d4:	4798      	blx	r3
    32d6:	e00e      	b.n	32f6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    32d8:	697a      	ldr	r2, [r7, #20]
    32da:	6938      	ldr	r0, [r7, #16]
    32dc:	2300      	movs	r3, #0
    32de:	9300      	str	r3, [sp, #0]
    32e0:	2300      	movs	r3, #0
    32e2:	2100      	movs	r1, #0
    32e4:	4c10      	ldr	r4, [pc, #64]	; (3328 <prvSwitchTimerLists+0xb8>)
    32e6:	47a0      	blx	r4
    32e8:	0003      	movs	r3, r0
    32ea:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    32ec:	68bb      	ldr	r3, [r7, #8]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d101      	bne.n	32f6 <prvSwitchTimerLists+0x86>
    32f2:	b672      	cpsid	i
    32f4:	e7fe      	b.n	32f4 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    32f6:	4b09      	ldr	r3, [pc, #36]	; (331c <prvSwitchTimerLists+0xac>)
    32f8:	681b      	ldr	r3, [r3, #0]
    32fa:	681b      	ldr	r3, [r3, #0]
    32fc:	2b00      	cmp	r3, #0
    32fe:	d1bb      	bne.n	3278 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    3300:	4b06      	ldr	r3, [pc, #24]	; (331c <prvSwitchTimerLists+0xac>)
    3302:	681b      	ldr	r3, [r3, #0]
    3304:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    3306:	4b09      	ldr	r3, [pc, #36]	; (332c <prvSwitchTimerLists+0xbc>)
    3308:	681a      	ldr	r2, [r3, #0]
    330a:	4b04      	ldr	r3, [pc, #16]	; (331c <prvSwitchTimerLists+0xac>)
    330c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    330e:	4b07      	ldr	r3, [pc, #28]	; (332c <prvSwitchTimerLists+0xbc>)
    3310:	687a      	ldr	r2, [r7, #4]
    3312:	601a      	str	r2, [r3, #0]
}
    3314:	46c0      	nop			; (mov r8, r8)
    3316:	46bd      	mov	sp, r7
    3318:	b007      	add	sp, #28
    331a:	bd90      	pop	{r4, r7, pc}
    331c:	2000322c 	.word	0x2000322c
    3320:	00000fb1 	.word	0x00000fb1
    3324:	00000f45 	.word	0x00000f45
    3328:	00002e45 	.word	0x00002e45
    332c:	20003230 	.word	0x20003230

00003330 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    3330:	b580      	push	{r7, lr}
    3332:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    3334:	4b10      	ldr	r3, [pc, #64]	; (3378 <prvCheckForValidListAndQueue+0x48>)
    3336:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    3338:	4b10      	ldr	r3, [pc, #64]	; (337c <prvCheckForValidListAndQueue+0x4c>)
    333a:	681b      	ldr	r3, [r3, #0]
    333c:	2b00      	cmp	r3, #0
    333e:	d115      	bne.n	336c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    3340:	4b0f      	ldr	r3, [pc, #60]	; (3380 <prvCheckForValidListAndQueue+0x50>)
    3342:	0018      	movs	r0, r3
    3344:	4b0f      	ldr	r3, [pc, #60]	; (3384 <prvCheckForValidListAndQueue+0x54>)
    3346:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    3348:	4b0f      	ldr	r3, [pc, #60]	; (3388 <prvCheckForValidListAndQueue+0x58>)
    334a:	0018      	movs	r0, r3
    334c:	4b0d      	ldr	r3, [pc, #52]	; (3384 <prvCheckForValidListAndQueue+0x54>)
    334e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    3350:	4b0e      	ldr	r3, [pc, #56]	; (338c <prvCheckForValidListAndQueue+0x5c>)
    3352:	4a0b      	ldr	r2, [pc, #44]	; (3380 <prvCheckForValidListAndQueue+0x50>)
    3354:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    3356:	4b0e      	ldr	r3, [pc, #56]	; (3390 <prvCheckForValidListAndQueue+0x60>)
    3358:	4a0b      	ldr	r2, [pc, #44]	; (3388 <prvCheckForValidListAndQueue+0x58>)
    335a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    335c:	2200      	movs	r2, #0
    335e:	210c      	movs	r1, #12
    3360:	2005      	movs	r0, #5
    3362:	4b0c      	ldr	r3, [pc, #48]	; (3394 <prvCheckForValidListAndQueue+0x64>)
    3364:	4798      	blx	r3
    3366:	0002      	movs	r2, r0
    3368:	4b04      	ldr	r3, [pc, #16]	; (337c <prvCheckForValidListAndQueue+0x4c>)
    336a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    336c:	4b0a      	ldr	r3, [pc, #40]	; (3398 <prvCheckForValidListAndQueue+0x68>)
    336e:	4798      	blx	r3
}
    3370:	46c0      	nop			; (mov r8, r8)
    3372:	46bd      	mov	sp, r7
    3374:	bd80      	pop	{r7, pc}
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	00001141 	.word	0x00001141
    337c:	20003234 	.word	0x20003234
    3380:	20003204 	.word	0x20003204
    3384:	00000eaf 	.word	0x00000eaf
    3388:	20003218 	.word	0x20003218
    338c:	2000322c 	.word	0x2000322c
    3390:	20003230 	.word	0x20003230
    3394:	00001415 	.word	0x00001415
    3398:	00001165 	.word	0x00001165

0000339c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
    339c:	b580      	push	{r7, lr}
    339e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
    33a0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    33a4:	4b03      	ldr	r3, [pc, #12]	; (33b4 <__NVIC_SystemReset+0x18>)
    33a6:	4a04      	ldr	r2, [pc, #16]	; (33b8 <__NVIC_SystemReset+0x1c>)
    33a8:	60da      	str	r2, [r3, #12]
    33aa:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    33ae:	46c0      	nop			; (mov r8, r8)
    33b0:	e7fd      	b.n	33ae <__NVIC_SystemReset+0x12>
    33b2:	46c0      	nop			; (mov r8, r8)
    33b4:	e000ed00 	.word	0xe000ed00
    33b8:	05fa0004 	.word	0x05fa0004

000033bc <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    33bc:	b580      	push	{r7, lr}
    33be:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    33c0:	4b00      	ldr	r3, [pc, #0]	; (33c4 <system_reset+0x8>)
    33c2:	4798      	blx	r3
    33c4:	0000339d 	.word	0x0000339d

000033c8 <vCommandConsoleTask>:
/******************************************************************************
* CLI Thread
******************************************************************************/
SemaphoreHandle_t xSemaphoreREAD; //initializing the semaphore	
void vCommandConsoleTask( void *pvParameters )
{
    33c8:	b580      	push	{r7, lr}
    33ca:	b086      	sub	sp, #24
    33cc:	af00      	add	r7, sp, #0
    33ce:	6078      	str	r0, [r7, #4]
xSemaphoreREAD = xSemaphoreCreateMutex();
    33d0:	2001      	movs	r0, #1
    33d2:	4b86      	ldr	r3, [pc, #536]	; (35ec <vCommandConsoleTask+0x224>)
    33d4:	4798      	blx	r3
    33d6:	0002      	movs	r2, r0
    33d8:	4b85      	ldr	r3, [pc, #532]	; (35f0 <vCommandConsoleTask+0x228>)
    33da:	601a      	str	r2, [r3, #0]
}


//REGISTER COMMANDS HERE

FreeRTOS_CLIRegisterCommand( &xClearScreen );
    33dc:	4b85      	ldr	r3, [pc, #532]	; (35f4 <vCommandConsoleTask+0x22c>)
    33de:	0018      	movs	r0, r3
    33e0:	4b85      	ldr	r3, [pc, #532]	; (35f8 <vCommandConsoleTask+0x230>)
    33e2:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xResetCommand );
    33e4:	4b85      	ldr	r3, [pc, #532]	; (35fc <vCommandConsoleTask+0x234>)
    33e6:	0018      	movs	r0, r3
    33e8:	4b83      	ldr	r3, [pc, #524]	; (35f8 <vCommandConsoleTask+0x230>)
    33ea:	4798      	blx	r3

uint8_t cRxedChar[2], cInputIndex = 0;
    33ec:	2317      	movs	r3, #23
    33ee:	18fb      	adds	r3, r7, r3
    33f0:	2200      	movs	r2, #0
    33f2:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString( pcWelcomeMessage);
    33f4:	4b82      	ldr	r3, [pc, #520]	; (3600 <vCommandConsoleTask+0x238>)
    33f6:	0018      	movs	r0, r3
    33f8:	4b82      	ldr	r3, [pc, #520]	; (3604 <vCommandConsoleTask+0x23c>)
    33fa:	4798      	blx	r3
    for( ;; )
    {
        /* This implementation reads a single character at a time.  Wait in the
        Blocked state until a character is received. */
		
		FreeRTOS_read(&cRxedChar);
    33fc:	230c      	movs	r3, #12
    33fe:	18fb      	adds	r3, r7, r3
    3400:	0018      	movs	r0, r3
    3402:	4b81      	ldr	r3, [pc, #516]	; (3608 <vCommandConsoleTask+0x240>)
    3404:	4798      	blx	r3
		
        if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
    3406:	230c      	movs	r3, #12
    3408:	18fb      	adds	r3, r7, r3
    340a:	781b      	ldrb	r3, [r3, #0]
    340c:	2b0a      	cmp	r3, #10
    340e:	d004      	beq.n	341a <vCommandConsoleTask+0x52>
    3410:	230c      	movs	r3, #12
    3412:	18fb      	adds	r3, r7, r3
    3414:	781b      	ldrb	r3, [r3, #0]
    3416:	2b0d      	cmp	r3, #13
    3418:	d131      	bne.n	347e <vCommandConsoleTask+0xb6>
        {
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString("\r\n");
    341a:	4b7c      	ldr	r3, [pc, #496]	; (360c <vCommandConsoleTask+0x244>)
    341c:	0018      	movs	r0, r3
    341e:	4b79      	ldr	r3, [pc, #484]	; (3604 <vCommandConsoleTask+0x23c>)
    3420:	4798      	blx	r3
			//Copy for last command
			isEscapeCode = false; pcEscapeCodePos = 0;
    3422:	4b7b      	ldr	r3, [pc, #492]	; (3610 <vCommandConsoleTask+0x248>)
    3424:	2200      	movs	r2, #0
    3426:	701a      	strb	r2, [r3, #0]
    3428:	4b7a      	ldr	r3, [pc, #488]	; (3614 <vCommandConsoleTask+0x24c>)
    342a:	2200      	movs	r2, #0
    342c:	701a      	strb	r2, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
    342e:	497a      	ldr	r1, [pc, #488]	; (3618 <vCommandConsoleTask+0x250>)
    3430:	4b7a      	ldr	r3, [pc, #488]	; (361c <vCommandConsoleTask+0x254>)
    3432:	2263      	movs	r2, #99	; 0x63
    3434:	0018      	movs	r0, r3
    3436:	4b7a      	ldr	r3, [pc, #488]	; (3620 <vCommandConsoleTask+0x258>)
    3438:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
    343a:	4b78      	ldr	r3, [pc, #480]	; (361c <vCommandConsoleTask+0x254>)
    343c:	2263      	movs	r2, #99	; 0x63
    343e:	2100      	movs	r1, #0
    3440:	5499      	strb	r1, [r3, r2]
            do
            {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
    3442:	4978      	ldr	r1, [pc, #480]	; (3624 <vCommandConsoleTask+0x25c>)
    3444:	4b74      	ldr	r3, [pc, #464]	; (3618 <vCommandConsoleTask+0x250>)
    3446:	2282      	movs	r2, #130	; 0x82
    3448:	0018      	movs	r0, r3
    344a:	4b77      	ldr	r3, [pc, #476]	; (3628 <vCommandConsoleTask+0x260>)
    344c:	4798      	blx	r3
    344e:	0003      	movs	r3, r0
    3450:	613b      	str	r3, [r7, #16]
                              );

                /* Write the output generated by the command interpreter to the
                console. */
				//Ensure it is null terminated
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
    3452:	4b74      	ldr	r3, [pc, #464]	; (3624 <vCommandConsoleTask+0x25c>)
    3454:	2281      	movs	r2, #129	; 0x81
    3456:	2100      	movs	r1, #0
    3458:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
    345a:	4b72      	ldr	r3, [pc, #456]	; (3624 <vCommandConsoleTask+0x25c>)
    345c:	0018      	movs	r0, r3
    345e:	4b69      	ldr	r3, [pc, #420]	; (3604 <vCommandConsoleTask+0x23c>)
    3460:	4798      	blx	r3

            } while( xMoreDataToFollow != pdFALSE );
    3462:	693b      	ldr	r3, [r7, #16]
    3464:	2b00      	cmp	r3, #0
    3466:	d1ec      	bne.n	3442 <vCommandConsoleTask+0x7a>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
    3468:	2317      	movs	r3, #23
    346a:	18fb      	adds	r3, r7, r3
    346c:	2200      	movs	r2, #0
    346e:	701a      	strb	r2, [r3, #0]
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
    3470:	4b69      	ldr	r3, [pc, #420]	; (3618 <vCommandConsoleTask+0x250>)
    3472:	2264      	movs	r2, #100	; 0x64
    3474:	2100      	movs	r1, #0
    3476:	0018      	movs	r0, r3
    3478:	4b6c      	ldr	r3, [pc, #432]	; (362c <vCommandConsoleTask+0x264>)
    347a:	4798      	blx	r3
    347c:	e0b5      	b.n	35ea <vCommandConsoleTask+0x222>
        {
		            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */
		
			if (true == isEscapeCode) {
    347e:	4b64      	ldr	r3, [pc, #400]	; (3610 <vCommandConsoleTask+0x248>)
    3480:	781b      	ldrb	r3, [r3, #0]
    3482:	2b00      	cmp	r3, #0
    3484:	d059      	beq.n	353a <vCommandConsoleTask+0x172>

				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
    3486:	4b63      	ldr	r3, [pc, #396]	; (3614 <vCommandConsoleTask+0x24c>)
    3488:	781b      	ldrb	r3, [r3, #0]
    348a:	2b03      	cmp	r3, #3
    348c:	d80c      	bhi.n	34a8 <vCommandConsoleTask+0xe0>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
    348e:	4b61      	ldr	r3, [pc, #388]	; (3614 <vCommandConsoleTask+0x24c>)
    3490:	781b      	ldrb	r3, [r3, #0]
    3492:	1c5a      	adds	r2, r3, #1
    3494:	b2d1      	uxtb	r1, r2
    3496:	4a5f      	ldr	r2, [pc, #380]	; (3614 <vCommandConsoleTask+0x24c>)
    3498:	7011      	strb	r1, [r2, #0]
    349a:	001a      	movs	r2, r3
    349c:	230c      	movs	r3, #12
    349e:	18fb      	adds	r3, r7, r3
    34a0:	7819      	ldrb	r1, [r3, #0]
    34a2:	4b63      	ldr	r3, [pc, #396]	; (3630 <vCommandConsoleTask+0x268>)
    34a4:	5499      	strb	r1, [r3, r2]
    34a6:	e005      	b.n	34b4 <vCommandConsoleTask+0xec>
				}
				else {
					isEscapeCode = false; pcEscapeCodePos = 0;
    34a8:	4b59      	ldr	r3, [pc, #356]	; (3610 <vCommandConsoleTask+0x248>)
    34aa:	2200      	movs	r2, #0
    34ac:	701a      	strb	r2, [r3, #0]
    34ae:	4b59      	ldr	r3, [pc, #356]	; (3614 <vCommandConsoleTask+0x24c>)
    34b0:	2200      	movs	r2, #0
    34b2:	701a      	strb	r2, [r3, #0]
				}
			
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
    34b4:	4b57      	ldr	r3, [pc, #348]	; (3614 <vCommandConsoleTask+0x24c>)
    34b6:	781b      	ldrb	r3, [r3, #0]
    34b8:	2b01      	cmp	r3, #1
    34ba:	d99f      	bls.n	33fc <vCommandConsoleTask+0x34>
				
					// UP ARROW SHOW LAST COMMAND
					if(strcasecmp(pcEscapeCodes, "oa"))	{
    34bc:	4a5d      	ldr	r2, [pc, #372]	; (3634 <vCommandConsoleTask+0x26c>)
    34be:	4b5c      	ldr	r3, [pc, #368]	; (3630 <vCommandConsoleTask+0x268>)
    34c0:	0011      	movs	r1, r2
    34c2:	0018      	movs	r0, r3
    34c4:	4b5c      	ldr	r3, [pc, #368]	; (3638 <vCommandConsoleTask+0x270>)
    34c6:	4798      	blx	r3
    34c8:	1e03      	subs	r3, r0, #0
    34ca:	d02f      	beq.n	352c <vCommandConsoleTask+0x164>
                            /// Delete current line and add prompt (">")
                            sprintf(pcInputString, "%c[2K\r>", 27);
    34cc:	495b      	ldr	r1, [pc, #364]	; (363c <vCommandConsoleTask+0x274>)
    34ce:	4b52      	ldr	r3, [pc, #328]	; (3618 <vCommandConsoleTask+0x250>)
    34d0:	221b      	movs	r2, #27
    34d2:	0018      	movs	r0, r3
    34d4:	4b5a      	ldr	r3, [pc, #360]	; (3640 <vCommandConsoleTask+0x278>)
    34d6:	4798      	blx	r3
				            SerialConsoleWriteString(pcInputString);
    34d8:	4b4f      	ldr	r3, [pc, #316]	; (3618 <vCommandConsoleTask+0x250>)
    34da:	0018      	movs	r0, r3
    34dc:	4b49      	ldr	r3, [pc, #292]	; (3604 <vCommandConsoleTask+0x23c>)
    34de:	4798      	blx	r3
                            /// Clear input buffer
                            cInputIndex = 0;
    34e0:	2317      	movs	r3, #23
    34e2:	18fb      	adds	r3, r7, r3
    34e4:	2200      	movs	r2, #0
    34e6:	701a      	strb	r2, [r3, #0]
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
    34e8:	4b4b      	ldr	r3, [pc, #300]	; (3618 <vCommandConsoleTask+0x250>)
    34ea:	2264      	movs	r2, #100	; 0x64
    34ec:	2100      	movs	r1, #0
    34ee:	0018      	movs	r0, r3
    34f0:	4b4e      	ldr	r3, [pc, #312]	; (362c <vCommandConsoleTask+0x264>)
    34f2:	4798      	blx	r3
                        /// Send last command
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
    34f4:	4949      	ldr	r1, [pc, #292]	; (361c <vCommandConsoleTask+0x254>)
    34f6:	4b48      	ldr	r3, [pc, #288]	; (3618 <vCommandConsoleTask+0x250>)
    34f8:	2263      	movs	r2, #99	; 0x63
    34fa:	0018      	movs	r0, r3
    34fc:	4b48      	ldr	r3, [pc, #288]	; (3620 <vCommandConsoleTask+0x258>)
    34fe:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
    3500:	4b45      	ldr	r3, [pc, #276]	; (3618 <vCommandConsoleTask+0x250>)
    3502:	0018      	movs	r0, r3
    3504:	4b4f      	ldr	r3, [pc, #316]	; (3644 <vCommandConsoleTask+0x27c>)
    3506:	4798      	blx	r3
    3508:	0003      	movs	r3, r0
    350a:	2b62      	cmp	r3, #98	; 0x62
    350c:	d806      	bhi.n	351c <vCommandConsoleTask+0x154>
    350e:	4b43      	ldr	r3, [pc, #268]	; (361c <vCommandConsoleTask+0x254>)
    3510:	0018      	movs	r0, r3
    3512:	4b4c      	ldr	r3, [pc, #304]	; (3644 <vCommandConsoleTask+0x27c>)
    3514:	4798      	blx	r3
    3516:	0003      	movs	r3, r0
    3518:	b2da      	uxtb	r2, r3
    351a:	e000      	b.n	351e <vCommandConsoleTask+0x156>
    351c:	2263      	movs	r2, #99	; 0x63
    351e:	2317      	movs	r3, #23
    3520:	18fb      	adds	r3, r7, r3
    3522:	701a      	strb	r2, [r3, #0]
						SerialConsoleWriteString(pcInputString);
    3524:	4b3c      	ldr	r3, [pc, #240]	; (3618 <vCommandConsoleTask+0x250>)
    3526:	0018      	movs	r0, r3
    3528:	4b36      	ldr	r3, [pc, #216]	; (3604 <vCommandConsoleTask+0x23c>)
    352a:	4798      	blx	r3
					}
				
					isEscapeCode = false; pcEscapeCodePos = 0;
    352c:	4b38      	ldr	r3, [pc, #224]	; (3610 <vCommandConsoleTask+0x248>)
    352e:	2200      	movs	r2, #0
    3530:	701a      	strb	r2, [r3, #0]
    3532:	4b38      	ldr	r3, [pc, #224]	; (3614 <vCommandConsoleTask+0x24c>)
    3534:	2200      	movs	r2, #0
    3536:	701a      	strb	r2, [r3, #0]
    3538:	e760      	b.n	33fc <vCommandConsoleTask+0x34>
			}
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if( cRxedChar[0] == '\r' )
    353a:	230c      	movs	r3, #12
    353c:	18fb      	adds	r3, r7, r3
    353e:	781b      	ldrb	r3, [r3, #0]
    3540:	2b0d      	cmp	r3, #13
    3542:	d100      	bne.n	3546 <vCommandConsoleTask+0x17e>
    3544:	e75a      	b.n	33fc <vCommandConsoleTask+0x34>
            {
                /* Ignore carriage returns. */
            }
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
    3546:	230c      	movs	r3, #12
    3548:	18fb      	adds	r3, r7, r3
    354a:	781b      	ldrb	r3, [r3, #0]
    354c:	2b08      	cmp	r3, #8
    354e:	d004      	beq.n	355a <vCommandConsoleTask+0x192>
    3550:	230c      	movs	r3, #12
    3552:	18fb      	adds	r3, r7, r3
    3554:	781b      	ldrb	r3, [r3, #0]
    3556:	2b7f      	cmp	r3, #127	; 0x7f
    3558:	d11c      	bne.n	3594 <vCommandConsoleTask+0x1cc>
            {
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
    355a:	2308      	movs	r3, #8
    355c:	18fb      	adds	r3, r7, r3
    355e:	4a3a      	ldr	r2, [pc, #232]	; (3648 <vCommandConsoleTask+0x280>)
    3560:	6812      	ldr	r2, [r2, #0]
    3562:	601a      	str	r2, [r3, #0]
				SerialConsoleWriteString(erase);
    3564:	2308      	movs	r3, #8
    3566:	18fb      	adds	r3, r7, r3
    3568:	0018      	movs	r0, r3
    356a:	4b26      	ldr	r3, [pc, #152]	; (3604 <vCommandConsoleTask+0x23c>)
    356c:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if( cInputIndex > 0 )
    356e:	2317      	movs	r3, #23
    3570:	18fb      	adds	r3, r7, r3
    3572:	781b      	ldrb	r3, [r3, #0]
    3574:	2b00      	cmp	r3, #0
    3576:	d037      	beq.n	35e8 <vCommandConsoleTask+0x220>
                {
                    cInputIndex--;
    3578:	2317      	movs	r3, #23
    357a:	18fb      	adds	r3, r7, r3
    357c:	781a      	ldrb	r2, [r3, #0]
    357e:	2317      	movs	r3, #23
    3580:	18fb      	adds	r3, r7, r3
    3582:	3a01      	subs	r2, #1
    3584:	701a      	strb	r2, [r3, #0]
                    pcInputString[ cInputIndex ] = 0;
    3586:	2317      	movs	r3, #23
    3588:	18fb      	adds	r3, r7, r3
    358a:	781b      	ldrb	r3, [r3, #0]
    358c:	4a22      	ldr	r2, [pc, #136]	; (3618 <vCommandConsoleTask+0x250>)
    358e:	2100      	movs	r1, #0
    3590:	54d1      	strb	r1, [r2, r3]
            {
    3592:	e029      	b.n	35e8 <vCommandConsoleTask+0x220>
                }
            }
			// ESC
			else if( cRxedChar[0] == ASCII_ESC) {
    3594:	230c      	movs	r3, #12
    3596:	18fb      	adds	r3, r7, r3
    3598:	781b      	ldrb	r3, [r3, #0]
    359a:	2b1b      	cmp	r3, #27
    359c:	d106      	bne.n	35ac <vCommandConsoleTask+0x1e4>
				isEscapeCode = true; //Next characters will be code arguments
    359e:	4b1c      	ldr	r3, [pc, #112]	; (3610 <vCommandConsoleTask+0x248>)
    35a0:	2201      	movs	r2, #1
    35a2:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
    35a4:	4b1b      	ldr	r3, [pc, #108]	; (3614 <vCommandConsoleTask+0x24c>)
    35a6:	2200      	movs	r2, #0
    35a8:	701a      	strb	r2, [r3, #0]
    35aa:	e727      	b.n	33fc <vCommandConsoleTask+0x34>
            {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
    35ac:	2317      	movs	r3, #23
    35ae:	18fb      	adds	r3, r7, r3
    35b0:	781b      	ldrb	r3, [r3, #0]
    35b2:	2b63      	cmp	r3, #99	; 0x63
    35b4:	d80e      	bhi.n	35d4 <vCommandConsoleTask+0x20c>
                {
                    pcInputString[ cInputIndex ] = cRxedChar[0];
    35b6:	2317      	movs	r3, #23
    35b8:	18fb      	adds	r3, r7, r3
    35ba:	781b      	ldrb	r3, [r3, #0]
    35bc:	220c      	movs	r2, #12
    35be:	18ba      	adds	r2, r7, r2
    35c0:	7811      	ldrb	r1, [r2, #0]
    35c2:	4a15      	ldr	r2, [pc, #84]	; (3618 <vCommandConsoleTask+0x250>)
    35c4:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
    35c6:	2317      	movs	r3, #23
    35c8:	18fb      	adds	r3, r7, r3
    35ca:	781a      	ldrb	r2, [r3, #0]
    35cc:	2317      	movs	r3, #23
    35ce:	18fb      	adds	r3, r7, r3
    35d0:	3201      	adds	r2, #1
    35d2:	701a      	strb	r2, [r3, #0]
                }

					//Order Echo
					cRxedChar[1] = 0;
    35d4:	230c      	movs	r3, #12
    35d6:	18fb      	adds	r3, r7, r3
    35d8:	2200      	movs	r2, #0
    35da:	705a      	strb	r2, [r3, #1]
					SerialConsoleWriteString(&cRxedChar[0]);
    35dc:	230c      	movs	r3, #12
    35de:	18fb      	adds	r3, r7, r3
    35e0:	0018      	movs	r0, r3
    35e2:	4b08      	ldr	r3, [pc, #32]	; (3604 <vCommandConsoleTask+0x23c>)
    35e4:	4798      	blx	r3
    35e6:	e709      	b.n	33fc <vCommandConsoleTask+0x34>
            {
    35e8:	46c0      	nop			; (mov r8, r8)
		FreeRTOS_read(&cRxedChar);
    35ea:	e707      	b.n	33fc <vCommandConsoleTask+0x34>
    35ec:	00001511 	.word	0x00001511
    35f0:	20003424 	.word	0x20003424
    35f4:	000063e4 	.word	0x000063e4
    35f8:	00000c3d 	.word	0x00000c3d
    35fc:	000063f4 	.word	0x000063f4
    3600:	00006338 	.word	0x00006338
    3604:	00003bbd 	.word	0x00003bbd
    3608:	0000364d 	.word	0x0000364d
    360c:	000063c8 	.word	0x000063c8
    3610:	20003250 	.word	0x20003250
    3614:	20003251 	.word	0x20003251
    3618:	200032b8 	.word	0x200032b8
    361c:	20003254 	.word	0x20003254
    3620:	00005ab5 	.word	0x00005ab5
    3624:	2000331c 	.word	0x2000331c
    3628:	00000cad 	.word	0x00000cad
    362c:	0000581b 	.word	0x0000581b
    3630:	200033a0 	.word	0x200033a0
    3634:	000063cc 	.word	0x000063cc
    3638:	00005a49 	.word	0x00005a49
    363c:	000063d0 	.word	0x000063d0
    3640:	00005a05 	.word	0x00005a05
    3644:	00005a85 	.word	0x00005a85
    3648:	000063d8 	.word	0x000063d8

0000364c <FreeRTOS_read>:
* @details		STUDENTS TO COMPLETE.
* @note
*****************************************************************************/

static void FreeRTOS_read(char* character)
{
    364c:	b590      	push	{r4, r7, lr}
    364e:	b083      	sub	sp, #12
    3650:	af00      	add	r7, sp, #0
    3652:	6078      	str	r0, [r7, #4]
		//vTaskSuspend( NULL );//We suspend ourselves. Please remove this when doing your code
		
		//check if the given character is empty:
		if ((character != NULL) && (character[0] == '\0'))
    3654:	687b      	ldr	r3, [r7, #4]
    3656:	2b00      	cmp	r3, #0
    3658:	d00c      	beq.n	3674 <FreeRTOS_read+0x28>
    365a:	687b      	ldr	r3, [r7, #4]
    365c:	781b      	ldrb	r3, [r3, #0]
    365e:	2b00      	cmp	r3, #0
    3660:	d108      	bne.n	3674 <FreeRTOS_read+0x28>
		{
			//if empty, we add a semaphore to block the task
			//SerialConsoleWriteString("did not read anything \r \n");
			//take the semaphore to start waiting
			xSemaphoreTake(xSemaphoreREAD, (TickType_t) 500);
    3662:	4b0a      	ldr	r3, [pc, #40]	; (368c <FreeRTOS_read+0x40>)
    3664:	681a      	ldr	r2, [r3, #0]
    3666:	23fa      	movs	r3, #250	; 0xfa
    3668:	005b      	lsls	r3, r3, #1
    366a:	0019      	movs	r1, r3
    366c:	0010      	movs	r0, r2
    366e:	4b08      	ldr	r3, [pc, #32]	; (3690 <FreeRTOS_read+0x44>)
    3670:	4798      	blx	r3
    3672:	e006      	b.n	3682 <FreeRTOS_read+0x36>
			//if the character is not empty, release the semaphore
			//SerialConsoleWriteString("not empty, the character is: \r\n");
			//SerialConsoleWriteString("Printing out character: \r\n");
			//SerialConsoleWriteString(character);
			//SerialConsoleWriteString("\r\n");
			xSemaphoreGive(xSemaphoreREAD);
    3674:	4b05      	ldr	r3, [pc, #20]	; (368c <FreeRTOS_read+0x40>)
    3676:	6818      	ldr	r0, [r3, #0]
    3678:	2300      	movs	r3, #0
    367a:	2200      	movs	r2, #0
    367c:	2100      	movs	r1, #0
    367e:	4c05      	ldr	r4, [pc, #20]	; (3694 <FreeRTOS_read+0x48>)
    3680:	47a0      	blx	r4
			//SerialConsoleWriteString("333");
			//SerialConsoleWriteString(*character); //wtf??
		//}
		
		//xSemaphoreGive(xSemaphoreREAD);
}
    3682:	46c0      	nop			; (mov r8, r8)
    3684:	46bd      	mov	sp, r7
    3686:	b003      	add	sp, #12
    3688:	bd90      	pop	{r4, r7, pc}
    368a:	46c0      	nop			; (mov r8, r8)
    368c:	20003424 	.word	0x20003424
    3690:	000019f1 	.word	0x000019f1
    3694:	00001551 	.word	0x00001551

00003698 <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    3698:	b590      	push	{r4, r7, lr}
    369a:	b087      	sub	sp, #28
    369c:	af00      	add	r7, sp, #0
    369e:	60f8      	str	r0, [r7, #12]
    36a0:	60b9      	str	r1, [r7, #8]
    36a2:	607a      	str	r2, [r7, #4]
	char clearScreen = ASCII_ESC;
    36a4:	2317      	movs	r3, #23
    36a6:	18fb      	adds	r3, r7, r3
    36a8:	221b      	movs	r2, #27
    36aa:	701a      	strb	r2, [r3, #0]
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
    36ac:	2317      	movs	r3, #23
    36ae:	18fb      	adds	r3, r7, r3
    36b0:	781b      	ldrb	r3, [r3, #0]
    36b2:	4a08      	ldr	r2, [pc, #32]	; (36d4 <xCliClearTerminalScreen+0x3c>)
    36b4:	4808      	ldr	r0, [pc, #32]	; (36d8 <xCliClearTerminalScreen+0x40>)
    36b6:	210f      	movs	r1, #15
    36b8:	4c08      	ldr	r4, [pc, #32]	; (36dc <xCliClearTerminalScreen+0x44>)
    36ba:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
    36bc:	4a06      	ldr	r2, [pc, #24]	; (36d8 <xCliClearTerminalScreen+0x40>)
    36be:	68b9      	ldr	r1, [r7, #8]
    36c0:	68fb      	ldr	r3, [r7, #12]
    36c2:	0018      	movs	r0, r3
    36c4:	4b05      	ldr	r3, [pc, #20]	; (36dc <xCliClearTerminalScreen+0x44>)
    36c6:	4798      	blx	r3
	return pdFALSE;
    36c8:	2300      	movs	r3, #0
}
    36ca:	0018      	movs	r0, r3
    36cc:	46bd      	mov	sp, r7
    36ce:	b007      	add	sp, #28
    36d0:	bd90      	pop	{r4, r7, pc}
    36d2:	46c0      	nop			; (mov r8, r8)
    36d4:	000063dc 	.word	0x000063dc
    36d8:	20003240 	.word	0x20003240
    36dc:	000059a1 	.word	0x000059a1

000036e0 <CLI_ResetDevice>:

//Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    36e0:	b580      	push	{r7, lr}
    36e2:	b084      	sub	sp, #16
    36e4:	af00      	add	r7, sp, #0
    36e6:	60f8      	str	r0, [r7, #12]
    36e8:	60b9      	str	r1, [r7, #8]
    36ea:	607a      	str	r2, [r7, #4]
	system_reset();
    36ec:	4b03      	ldr	r3, [pc, #12]	; (36fc <CLI_ResetDevice+0x1c>)
    36ee:	4798      	blx	r3
	return pdFALSE;
    36f0:	2300      	movs	r3, #0
}
    36f2:	0018      	movs	r0, r3
    36f4:	46bd      	mov	sp, r7
    36f6:	b004      	add	sp, #16
    36f8:	bd80      	pop	{r7, pc}
    36fa:	46c0      	nop			; (mov r8, r8)
    36fc:	000033bd 	.word	0x000033bd

00003700 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    3700:	b580      	push	{r7, lr}
    3702:	b082      	sub	sp, #8
    3704:	af00      	add	r7, sp, #0
    3706:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
    3708:	687b      	ldr	r3, [r7, #4]
    370a:	7c1b      	ldrb	r3, [r3, #16]
    370c:	2b00      	cmp	r3, #0
    370e:	d00b      	beq.n	3728 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	689b      	ldr	r3, [r3, #8]
    3714:	1c5a      	adds	r2, r3, #1
    3716:	687b      	ldr	r3, [r7, #4]
    3718:	68d9      	ldr	r1, [r3, #12]
    371a:	4b10      	ldr	r3, [pc, #64]	; (375c <advance_pointer+0x5c>)
    371c:	0010      	movs	r0, r2
    371e:	4798      	blx	r3
    3720:	000b      	movs	r3, r1
    3722:	001a      	movs	r2, r3
    3724:	687b      	ldr	r3, [r7, #4]
    3726:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    3728:	687b      	ldr	r3, [r7, #4]
    372a:	685b      	ldr	r3, [r3, #4]
    372c:	1c5a      	adds	r2, r3, #1
    372e:	687b      	ldr	r3, [r7, #4]
    3730:	68d9      	ldr	r1, [r3, #12]
    3732:	4b0a      	ldr	r3, [pc, #40]	; (375c <advance_pointer+0x5c>)
    3734:	0010      	movs	r0, r2
    3736:	4798      	blx	r3
    3738:	000b      	movs	r3, r1
    373a:	001a      	movs	r2, r3
    373c:	687b      	ldr	r3, [r7, #4]
    373e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    3740:	687b      	ldr	r3, [r7, #4]
    3742:	685a      	ldr	r2, [r3, #4]
    3744:	687b      	ldr	r3, [r7, #4]
    3746:	689b      	ldr	r3, [r3, #8]
    3748:	1ad3      	subs	r3, r2, r3
    374a:	425a      	negs	r2, r3
    374c:	4153      	adcs	r3, r2
    374e:	b2da      	uxtb	r2, r3
    3750:	687b      	ldr	r3, [r7, #4]
    3752:	741a      	strb	r2, [r3, #16]
 }
    3754:	46c0      	nop			; (mov r8, r8)
    3756:	46bd      	mov	sp, r7
    3758:	b002      	add	sp, #8
    375a:	bd80      	pop	{r7, pc}
    375c:	0000574d 	.word	0x0000574d

00003760 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
    3760:	b580      	push	{r7, lr}
    3762:	b082      	sub	sp, #8
    3764:	af00      	add	r7, sp, #0
    3766:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	2200      	movs	r2, #0
    376c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    376e:	687b      	ldr	r3, [r7, #4]
    3770:	689b      	ldr	r3, [r3, #8]
    3772:	1c5a      	adds	r2, r3, #1
    3774:	687b      	ldr	r3, [r7, #4]
    3776:	68d9      	ldr	r1, [r3, #12]
    3778:	4b05      	ldr	r3, [pc, #20]	; (3790 <retreat_pointer+0x30>)
    377a:	0010      	movs	r0, r2
    377c:	4798      	blx	r3
    377e:	000b      	movs	r3, r1
    3780:	001a      	movs	r2, r3
    3782:	687b      	ldr	r3, [r7, #4]
    3784:	609a      	str	r2, [r3, #8]
 }
    3786:	46c0      	nop			; (mov r8, r8)
    3788:	46bd      	mov	sp, r7
    378a:	b002      	add	sp, #8
    378c:	bd80      	pop	{r7, pc}
    378e:	46c0      	nop			; (mov r8, r8)
    3790:	0000574d 	.word	0x0000574d

00003794 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    3794:	b580      	push	{r7, lr}
    3796:	b084      	sub	sp, #16
    3798:	af00      	add	r7, sp, #0
    379a:	6078      	str	r0, [r7, #4]
    379c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    379e:	2014      	movs	r0, #20
    37a0:	4b09      	ldr	r3, [pc, #36]	; (37c8 <circular_buf_init+0x34>)
    37a2:	4798      	blx	r3
    37a4:	0003      	movs	r3, r0
    37a6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    37a8:	68fb      	ldr	r3, [r7, #12]
    37aa:	687a      	ldr	r2, [r7, #4]
    37ac:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
    37ae:	68fb      	ldr	r3, [r7, #12]
    37b0:	683a      	ldr	r2, [r7, #0]
    37b2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
    37b4:	68fb      	ldr	r3, [r7, #12]
    37b6:	0018      	movs	r0, r3
    37b8:	4b04      	ldr	r3, [pc, #16]	; (37cc <circular_buf_init+0x38>)
    37ba:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
    37bc:	68fb      	ldr	r3, [r7, #12]
 }
    37be:	0018      	movs	r0, r3
    37c0:	46bd      	mov	sp, r7
    37c2:	b004      	add	sp, #16
    37c4:	bd80      	pop	{r7, pc}
    37c6:	46c0      	nop			; (mov r8, r8)
    37c8:	000057f5 	.word	0x000057f5
    37cc:	000037d1 	.word	0x000037d1

000037d0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
    37d0:	b580      	push	{r7, lr}
    37d2:	b082      	sub	sp, #8
    37d4:	af00      	add	r7, sp, #0
    37d6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
    37d8:	687b      	ldr	r3, [r7, #4]
    37da:	2200      	movs	r2, #0
    37dc:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
    37de:	687b      	ldr	r3, [r7, #4]
    37e0:	2200      	movs	r2, #0
    37e2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	2200      	movs	r2, #0
    37e8:	741a      	strb	r2, [r3, #16]
 }
    37ea:	46c0      	nop			; (mov r8, r8)
    37ec:	46bd      	mov	sp, r7
    37ee:	b002      	add	sp, #8
    37f0:	bd80      	pop	{r7, pc}
	...

000037f4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    37f4:	b580      	push	{r7, lr}
    37f6:	b082      	sub	sp, #8
    37f8:	af00      	add	r7, sp, #0
    37fa:	6078      	str	r0, [r7, #4]
    37fc:	000a      	movs	r2, r1
    37fe:	1cfb      	adds	r3, r7, #3
    3800:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    3802:	687b      	ldr	r3, [r7, #4]
    3804:	681a      	ldr	r2, [r3, #0]
    3806:	687b      	ldr	r3, [r7, #4]
    3808:	685b      	ldr	r3, [r3, #4]
    380a:	18d3      	adds	r3, r2, r3
    380c:	1cfa      	adds	r2, r7, #3
    380e:	7812      	ldrb	r2, [r2, #0]
    3810:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	0018      	movs	r0, r3
    3816:	4b03      	ldr	r3, [pc, #12]	; (3824 <circular_buf_put+0x30>)
    3818:	4798      	blx	r3
 }
    381a:	46c0      	nop			; (mov r8, r8)
    381c:	46bd      	mov	sp, r7
    381e:	b002      	add	sp, #8
    3820:	bd80      	pop	{r7, pc}
    3822:	46c0      	nop			; (mov r8, r8)
    3824:	00003701 	.word	0x00003701

00003828 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
    3828:	b580      	push	{r7, lr}
    382a:	b084      	sub	sp, #16
    382c:	af00      	add	r7, sp, #0
    382e:	6078      	str	r0, [r7, #4]
    3830:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
    3832:	2301      	movs	r3, #1
    3834:	425b      	negs	r3, r3
    3836:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
    3838:	687b      	ldr	r3, [r7, #4]
    383a:	0018      	movs	r0, r3
    383c:	4b0d      	ldr	r3, [pc, #52]	; (3874 <circular_buf_get+0x4c>)
    383e:	4798      	blx	r3
    3840:	0003      	movs	r3, r0
    3842:	001a      	movs	r2, r3
    3844:	2301      	movs	r3, #1
    3846:	4053      	eors	r3, r2
    3848:	b2db      	uxtb	r3, r3
    384a:	2b00      	cmp	r3, #0
    384c:	d00d      	beq.n	386a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
    384e:	687b      	ldr	r3, [r7, #4]
    3850:	681a      	ldr	r2, [r3, #0]
    3852:	687b      	ldr	r3, [r7, #4]
    3854:	689b      	ldr	r3, [r3, #8]
    3856:	18d3      	adds	r3, r2, r3
    3858:	781a      	ldrb	r2, [r3, #0]
    385a:	683b      	ldr	r3, [r7, #0]
    385c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
    385e:	687b      	ldr	r3, [r7, #4]
    3860:	0018      	movs	r0, r3
    3862:	4b05      	ldr	r3, [pc, #20]	; (3878 <circular_buf_get+0x50>)
    3864:	4798      	blx	r3

		 r = 0;
    3866:	2300      	movs	r3, #0
    3868:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
    386a:	68fb      	ldr	r3, [r7, #12]
 }
    386c:	0018      	movs	r0, r3
    386e:	46bd      	mov	sp, r7
    3870:	b004      	add	sp, #16
    3872:	bd80      	pop	{r7, pc}
    3874:	0000387d 	.word	0x0000387d
    3878:	00003761 	.word	0x00003761

0000387c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
    387c:	b580      	push	{r7, lr}
    387e:	b082      	sub	sp, #8
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    3884:	687b      	ldr	r3, [r7, #4]
    3886:	7c1b      	ldrb	r3, [r3, #16]
    3888:	2201      	movs	r2, #1
    388a:	4053      	eors	r3, r2
    388c:	b2db      	uxtb	r3, r3
    388e:	2b00      	cmp	r3, #0
    3890:	d007      	beq.n	38a2 <circular_buf_empty+0x26>
    3892:	687b      	ldr	r3, [r7, #4]
    3894:	685a      	ldr	r2, [r3, #4]
    3896:	687b      	ldr	r3, [r7, #4]
    3898:	689b      	ldr	r3, [r3, #8]
    389a:	429a      	cmp	r2, r3
    389c:	d101      	bne.n	38a2 <circular_buf_empty+0x26>
    389e:	2301      	movs	r3, #1
    38a0:	e000      	b.n	38a4 <circular_buf_empty+0x28>
    38a2:	2300      	movs	r3, #0
    38a4:	1c1a      	adds	r2, r3, #0
    38a6:	2301      	movs	r3, #1
    38a8:	4013      	ands	r3, r2
    38aa:	b2db      	uxtb	r3, r3
 }
    38ac:	0018      	movs	r0, r3
    38ae:	46bd      	mov	sp, r7
    38b0:	b002      	add	sp, #8
    38b2:	bd80      	pop	{r7, pc}

000038b4 <__NVIC_SetPriority>:
{
    38b4:	b5b0      	push	{r4, r5, r7, lr}
    38b6:	b082      	sub	sp, #8
    38b8:	af00      	add	r7, sp, #0
    38ba:	0002      	movs	r2, r0
    38bc:	6039      	str	r1, [r7, #0]
    38be:	1dfb      	adds	r3, r7, #7
    38c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    38c2:	1dfb      	adds	r3, r7, #7
    38c4:	781b      	ldrb	r3, [r3, #0]
    38c6:	2b7f      	cmp	r3, #127	; 0x7f
    38c8:	d828      	bhi.n	391c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    38ca:	4c2f      	ldr	r4, [pc, #188]	; (3988 <__NVIC_SetPriority+0xd4>)
    38cc:	1dfb      	adds	r3, r7, #7
    38ce:	781b      	ldrb	r3, [r3, #0]
    38d0:	b25b      	sxtb	r3, r3
    38d2:	089b      	lsrs	r3, r3, #2
    38d4:	492c      	ldr	r1, [pc, #176]	; (3988 <__NVIC_SetPriority+0xd4>)
    38d6:	1dfa      	adds	r2, r7, #7
    38d8:	7812      	ldrb	r2, [r2, #0]
    38da:	b252      	sxtb	r2, r2
    38dc:	0892      	lsrs	r2, r2, #2
    38de:	32c0      	adds	r2, #192	; 0xc0
    38e0:	0092      	lsls	r2, r2, #2
    38e2:	5852      	ldr	r2, [r2, r1]
    38e4:	1df9      	adds	r1, r7, #7
    38e6:	7809      	ldrb	r1, [r1, #0]
    38e8:	0008      	movs	r0, r1
    38ea:	2103      	movs	r1, #3
    38ec:	4001      	ands	r1, r0
    38ee:	00c9      	lsls	r1, r1, #3
    38f0:	20ff      	movs	r0, #255	; 0xff
    38f2:	4088      	lsls	r0, r1
    38f4:	0001      	movs	r1, r0
    38f6:	43c9      	mvns	r1, r1
    38f8:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    38fa:	683a      	ldr	r2, [r7, #0]
    38fc:	0192      	lsls	r2, r2, #6
    38fe:	20ff      	movs	r0, #255	; 0xff
    3900:	4010      	ands	r0, r2
    3902:	1dfa      	adds	r2, r7, #7
    3904:	7812      	ldrb	r2, [r2, #0]
    3906:	0015      	movs	r5, r2
    3908:	2203      	movs	r2, #3
    390a:	402a      	ands	r2, r5
    390c:	00d2      	lsls	r2, r2, #3
    390e:	4090      	lsls	r0, r2
    3910:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3912:	430a      	orrs	r2, r1
    3914:	33c0      	adds	r3, #192	; 0xc0
    3916:	009b      	lsls	r3, r3, #2
    3918:	511a      	str	r2, [r3, r4]
}
    391a:	e031      	b.n	3980 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    391c:	4c1b      	ldr	r4, [pc, #108]	; (398c <__NVIC_SetPriority+0xd8>)
    391e:	1dfb      	adds	r3, r7, #7
    3920:	781b      	ldrb	r3, [r3, #0]
    3922:	001a      	movs	r2, r3
    3924:	230f      	movs	r3, #15
    3926:	4013      	ands	r3, r2
    3928:	3b08      	subs	r3, #8
    392a:	0899      	lsrs	r1, r3, #2
    392c:	4a17      	ldr	r2, [pc, #92]	; (398c <__NVIC_SetPriority+0xd8>)
    392e:	1dfb      	adds	r3, r7, #7
    3930:	781b      	ldrb	r3, [r3, #0]
    3932:	0018      	movs	r0, r3
    3934:	230f      	movs	r3, #15
    3936:	4003      	ands	r3, r0
    3938:	3b08      	subs	r3, #8
    393a:	089b      	lsrs	r3, r3, #2
    393c:	3306      	adds	r3, #6
    393e:	009b      	lsls	r3, r3, #2
    3940:	18d3      	adds	r3, r2, r3
    3942:	3304      	adds	r3, #4
    3944:	681b      	ldr	r3, [r3, #0]
    3946:	1dfa      	adds	r2, r7, #7
    3948:	7812      	ldrb	r2, [r2, #0]
    394a:	0010      	movs	r0, r2
    394c:	2203      	movs	r2, #3
    394e:	4002      	ands	r2, r0
    3950:	00d2      	lsls	r2, r2, #3
    3952:	20ff      	movs	r0, #255	; 0xff
    3954:	4090      	lsls	r0, r2
    3956:	0002      	movs	r2, r0
    3958:	43d2      	mvns	r2, r2
    395a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    395c:	683b      	ldr	r3, [r7, #0]
    395e:	019b      	lsls	r3, r3, #6
    3960:	20ff      	movs	r0, #255	; 0xff
    3962:	4018      	ands	r0, r3
    3964:	1dfb      	adds	r3, r7, #7
    3966:	781b      	ldrb	r3, [r3, #0]
    3968:	001d      	movs	r5, r3
    396a:	2303      	movs	r3, #3
    396c:	402b      	ands	r3, r5
    396e:	00db      	lsls	r3, r3, #3
    3970:	4098      	lsls	r0, r3
    3972:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3974:	431a      	orrs	r2, r3
    3976:	1d8b      	adds	r3, r1, #6
    3978:	009b      	lsls	r3, r3, #2
    397a:	18e3      	adds	r3, r4, r3
    397c:	3304      	adds	r3, #4
    397e:	601a      	str	r2, [r3, #0]
}
    3980:	46c0      	nop			; (mov r8, r8)
    3982:	46bd      	mov	sp, r7
    3984:	b002      	add	sp, #8
    3986:	bdb0      	pop	{r4, r5, r7, pc}
    3988:	e000e100 	.word	0xe000e100
    398c:	e000ed00 	.word	0xe000ed00

00003990 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3990:	b580      	push	{r7, lr}
    3992:	b082      	sub	sp, #8
    3994:	af00      	add	r7, sp, #0
    3996:	0002      	movs	r2, r0
    3998:	1dfb      	adds	r3, r7, #7
    399a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    399c:	4b06      	ldr	r3, [pc, #24]	; (39b8 <system_interrupt_enable+0x28>)
    399e:	1dfa      	adds	r2, r7, #7
    39a0:	7812      	ldrb	r2, [r2, #0]
    39a2:	0011      	movs	r1, r2
    39a4:	221f      	movs	r2, #31
    39a6:	400a      	ands	r2, r1
    39a8:	2101      	movs	r1, #1
    39aa:	4091      	lsls	r1, r2
    39ac:	000a      	movs	r2, r1
    39ae:	601a      	str	r2, [r3, #0]
}
    39b0:	46c0      	nop			; (mov r8, r8)
    39b2:	46bd      	mov	sp, r7
    39b4:	b002      	add	sp, #8
    39b6:	bd80      	pop	{r7, pc}
    39b8:	e000e100 	.word	0xe000e100

000039bc <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    39bc:	b580      	push	{r7, lr}
    39be:	b084      	sub	sp, #16
    39c0:	af00      	add	r7, sp, #0
    39c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	681b      	ldr	r3, [r3, #0]
    39c8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    39ca:	68fb      	ldr	r3, [r7, #12]
    39cc:	69db      	ldr	r3, [r3, #28]
    39ce:	1e5a      	subs	r2, r3, #1
    39d0:	4193      	sbcs	r3, r2
    39d2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    39d4:	0018      	movs	r0, r3
    39d6:	46bd      	mov	sp, r7
    39d8:	b004      	add	sp, #16
    39da:	bd80      	pop	{r7, pc}

000039dc <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    39dc:	b580      	push	{r7, lr}
    39de:	b082      	sub	sp, #8
    39e0:	af00      	add	r7, sp, #0
    39e2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    39e4:	46c0      	nop			; (mov r8, r8)
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	0018      	movs	r0, r3
    39ea:	4b04      	ldr	r3, [pc, #16]	; (39fc <_usart_wait_for_sync+0x20>)
    39ec:	4798      	blx	r3
    39ee:	1e03      	subs	r3, r0, #0
    39f0:	d1f9      	bne.n	39e6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    39f2:	46c0      	nop			; (mov r8, r8)
    39f4:	46bd      	mov	sp, r7
    39f6:	b002      	add	sp, #8
    39f8:	bd80      	pop	{r7, pc}
    39fa:	46c0      	nop			; (mov r8, r8)
    39fc:	000039bd 	.word	0x000039bd

00003a00 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    3a00:	b580      	push	{r7, lr}
    3a02:	b082      	sub	sp, #8
    3a04:	af00      	add	r7, sp, #0
    3a06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3a08:	687b      	ldr	r3, [r7, #4]
    3a0a:	2280      	movs	r2, #128	; 0x80
    3a0c:	05d2      	lsls	r2, r2, #23
    3a0e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3a10:	687b      	ldr	r3, [r7, #4]
    3a12:	2200      	movs	r2, #0
    3a14:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	22ff      	movs	r2, #255	; 0xff
    3a1a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    3a1c:	687b      	ldr	r3, [r7, #4]
    3a1e:	2200      	movs	r2, #0
    3a20:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	2200      	movs	r2, #0
    3a26:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    3a28:	687b      	ldr	r3, [r7, #4]
    3a2a:	2296      	movs	r2, #150	; 0x96
    3a2c:	0192      	lsls	r2, r2, #6
    3a2e:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    3a30:	687b      	ldr	r3, [r7, #4]
    3a32:	2224      	movs	r2, #36	; 0x24
    3a34:	2101      	movs	r1, #1
    3a36:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    3a38:	687b      	ldr	r3, [r7, #4]
    3a3a:	2225      	movs	r2, #37	; 0x25
    3a3c:	2101      	movs	r1, #1
    3a3e:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    3a40:	687b      	ldr	r3, [r7, #4]
    3a42:	2226      	movs	r2, #38	; 0x26
    3a44:	2100      	movs	r1, #0
    3a46:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	2227      	movs	r2, #39	; 0x27
    3a4c:	2100      	movs	r1, #0
    3a4e:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    3a50:	687b      	ldr	r3, [r7, #4]
    3a52:	2200      	movs	r2, #0
    3a54:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    3a56:	687b      	ldr	r3, [r7, #4]
    3a58:	2288      	movs	r2, #136	; 0x88
    3a5a:	0352      	lsls	r2, r2, #13
    3a5c:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    3a5e:	687b      	ldr	r3, [r7, #4]
    3a60:	222c      	movs	r2, #44	; 0x2c
    3a62:	2100      	movs	r1, #0
    3a64:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    3a66:	687b      	ldr	r3, [r7, #4]
    3a68:	222d      	movs	r2, #45	; 0x2d
    3a6a:	2100      	movs	r1, #0
    3a6c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    3a6e:	687b      	ldr	r3, [r7, #4]
    3a70:	2200      	movs	r2, #0
    3a72:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3a74:	687b      	ldr	r3, [r7, #4]
    3a76:	2200      	movs	r2, #0
    3a78:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    3a7a:	687b      	ldr	r3, [r7, #4]
    3a7c:	2200      	movs	r2, #0
    3a7e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    3a80:	687b      	ldr	r3, [r7, #4]
    3a82:	2200      	movs	r2, #0
    3a84:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3a86:	687b      	ldr	r3, [r7, #4]
    3a88:	2200      	movs	r2, #0
    3a8a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3a8c:	687b      	ldr	r3, [r7, #4]
    3a8e:	2200      	movs	r2, #0
    3a90:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3a92:	687b      	ldr	r3, [r7, #4]
    3a94:	2200      	movs	r2, #0
    3a96:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3a98:	687b      	ldr	r3, [r7, #4]
    3a9a:	2200      	movs	r2, #0
    3a9c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	2200      	movs	r2, #0
    3aa2:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3aa4:	687b      	ldr	r3, [r7, #4]
    3aa6:	2200      	movs	r2, #0
    3aa8:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	2213      	movs	r2, #19
    3aae:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3ab0:	687b      	ldr	r3, [r7, #4]
    3ab2:	2200      	movs	r2, #0
    3ab4:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    3ab6:	46c0      	nop			; (mov r8, r8)
    3ab8:	46bd      	mov	sp, r7
    3aba:	b002      	add	sp, #8
    3abc:	bd80      	pop	{r7, pc}
	...

00003ac0 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    3ac0:	b580      	push	{r7, lr}
    3ac2:	b084      	sub	sp, #16
    3ac4:	af00      	add	r7, sp, #0
    3ac6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ac8:	687b      	ldr	r3, [r7, #4]
    3aca:	681b      	ldr	r3, [r3, #0]
    3acc:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3ace:	687b      	ldr	r3, [r7, #4]
    3ad0:	681b      	ldr	r3, [r3, #0]
    3ad2:	0018      	movs	r0, r3
    3ad4:	4b09      	ldr	r3, [pc, #36]	; (3afc <usart_enable+0x3c>)
    3ad6:	4798      	blx	r3
    3ad8:	0003      	movs	r3, r0
    3ada:	0018      	movs	r0, r3
    3adc:	4b08      	ldr	r3, [pc, #32]	; (3b00 <usart_enable+0x40>)
    3ade:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    3ae0:	687b      	ldr	r3, [r7, #4]
    3ae2:	0018      	movs	r0, r3
    3ae4:	4b07      	ldr	r3, [pc, #28]	; (3b04 <usart_enable+0x44>)
    3ae6:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3ae8:	68fb      	ldr	r3, [r7, #12]
    3aea:	681b      	ldr	r3, [r3, #0]
    3aec:	2202      	movs	r2, #2
    3aee:	431a      	orrs	r2, r3
    3af0:	68fb      	ldr	r3, [r7, #12]
    3af2:	601a      	str	r2, [r3, #0]
}
    3af4:	46c0      	nop			; (mov r8, r8)
    3af6:	46bd      	mov	sp, r7
    3af8:	b004      	add	sp, #16
    3afa:	bd80      	pop	{r7, pc}
    3afc:	00004a9d 	.word	0x00004a9d
    3b00:	00003991 	.word	0x00003991
    3b04:	000039dd 	.word	0x000039dd

00003b08 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    3b08:	b580      	push	{r7, lr}
    3b0a:	b082      	sub	sp, #8
    3b0c:	af00      	add	r7, sp, #0
    3b0e:	6078      	str	r0, [r7, #4]
    3b10:	000a      	movs	r2, r1
    3b12:	1cfb      	adds	r3, r7, #3
    3b14:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    3b16:	687b      	ldr	r3, [r7, #4]
    3b18:	2231      	movs	r2, #49	; 0x31
    3b1a:	5c9b      	ldrb	r3, [r3, r2]
    3b1c:	b25a      	sxtb	r2, r3
    3b1e:	1cfb      	adds	r3, r7, #3
    3b20:	781b      	ldrb	r3, [r3, #0]
    3b22:	2101      	movs	r1, #1
    3b24:	4099      	lsls	r1, r3
    3b26:	000b      	movs	r3, r1
    3b28:	b25b      	sxtb	r3, r3
    3b2a:	4313      	orrs	r3, r2
    3b2c:	b25b      	sxtb	r3, r3
    3b2e:	b2d9      	uxtb	r1, r3
    3b30:	687b      	ldr	r3, [r7, #4]
    3b32:	2231      	movs	r2, #49	; 0x31
    3b34:	5499      	strb	r1, [r3, r2]

}
    3b36:	46c0      	nop			; (mov r8, r8)
    3b38:	46bd      	mov	sp, r7
    3b3a:	b002      	add	sp, #8
    3b3c:	bd80      	pop	{r7, pc}
	...

00003b40 <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole(void)
{
    3b40:	b580      	push	{r7, lr}
    3b42:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    3b44:	2380      	movs	r3, #128	; 0x80
    3b46:	009a      	lsls	r2, r3, #2
    3b48:	4b11      	ldr	r3, [pc, #68]	; (3b90 <InitializeSerialConsole+0x50>)
    3b4a:	0011      	movs	r1, r2
    3b4c:	0018      	movs	r0, r3
    3b4e:	4b11      	ldr	r3, [pc, #68]	; (3b94 <InitializeSerialConsole+0x54>)
    3b50:	4798      	blx	r3
    3b52:	0002      	movs	r2, r0
    3b54:	4b10      	ldr	r3, [pc, #64]	; (3b98 <InitializeSerialConsole+0x58>)
    3b56:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    3b58:	2380      	movs	r3, #128	; 0x80
    3b5a:	009a      	lsls	r2, r3, #2
    3b5c:	4b0f      	ldr	r3, [pc, #60]	; (3b9c <InitializeSerialConsole+0x5c>)
    3b5e:	0011      	movs	r1, r2
    3b60:	0018      	movs	r0, r3
    3b62:	4b0c      	ldr	r3, [pc, #48]	; (3b94 <InitializeSerialConsole+0x54>)
    3b64:	4798      	blx	r3
    3b66:	0002      	movs	r2, r0
    3b68:	4b0d      	ldr	r3, [pc, #52]	; (3ba0 <InitializeSerialConsole+0x60>)
    3b6a:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
    3b6c:	4b0d      	ldr	r3, [pc, #52]	; (3ba4 <InitializeSerialConsole+0x64>)
    3b6e:	4798      	blx	r3
	configure_usart_callbacks();
    3b70:	4b0d      	ldr	r3, [pc, #52]	; (3ba8 <InitializeSerialConsole+0x68>)
    3b72:	4798      	blx	r3
	NVIC_SetPriority(SERCOM4_IRQn, 10);
    3b74:	210a      	movs	r1, #10
    3b76:	200d      	movs	r0, #13
    3b78:	4b0c      	ldr	r3, [pc, #48]	; (3bac <InitializeSerialConsole+0x6c>)
    3b7a:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    3b7c:	490c      	ldr	r1, [pc, #48]	; (3bb0 <InitializeSerialConsole+0x70>)
    3b7e:	4b0d      	ldr	r3, [pc, #52]	; (3bb4 <InitializeSerialConsole+0x74>)
    3b80:	2201      	movs	r2, #1
    3b82:	0018      	movs	r0, r3
    3b84:	4b0c      	ldr	r3, [pc, #48]	; (3bb8 <InitializeSerialConsole+0x78>)
    3b86:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
    3b88:	46c0      	nop			; (mov r8, r8)
    3b8a:	46bd      	mov	sp, r7
    3b8c:	bd80      	pop	{r7, pc}
    3b8e:	46c0      	nop			; (mov r8, r8)
    3b90:	200036b4 	.word	0x200036b4
    3b94:	00003795 	.word	0x00003795
    3b98:	200034ac 	.word	0x200034ac
    3b9c:	200034b4 	.word	0x200034b4
    3ba0:	200038b8 	.word	0x200038b8
    3ba4:	00003cc5 	.word	0x00003cc5
    3ba8:	00003d3d 	.word	0x00003d3d
    3bac:	000038b5 	.word	0x000038b5
    3bb0:	200034b0 	.word	0x200034b0
    3bb4:	20003428 	.word	0x20003428
    3bb8:	00004645 	.word	0x00004645

00003bbc <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(char * string)
{
    3bbc:	b580      	push	{r7, lr}
    3bbe:	b084      	sub	sp, #16
    3bc0:	af00      	add	r7, sp, #0
    3bc2:	6078      	str	r0, [r7, #4]
	if(string != NULL)
    3bc4:	687b      	ldr	r3, [r7, #4]
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d02a      	beq.n	3c20 <SerialConsoleWriteString+0x64>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
    3bca:	2300      	movs	r3, #0
    3bcc:	60fb      	str	r3, [r7, #12]
    3bce:	e00b      	b.n	3be8 <SerialConsoleWriteString+0x2c>
		{
			circular_buf_put(cbufTx, string[iter]);
    3bd0:	4b15      	ldr	r3, [pc, #84]	; (3c28 <SerialConsoleWriteString+0x6c>)
    3bd2:	6818      	ldr	r0, [r3, #0]
    3bd4:	687a      	ldr	r2, [r7, #4]
    3bd6:	68fb      	ldr	r3, [r7, #12]
    3bd8:	18d3      	adds	r3, r2, r3
    3bda:	781b      	ldrb	r3, [r3, #0]
    3bdc:	0019      	movs	r1, r3
    3bde:	4b13      	ldr	r3, [pc, #76]	; (3c2c <SerialConsoleWriteString+0x70>)
    3be0:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
    3be2:	68fb      	ldr	r3, [r7, #12]
    3be4:	3301      	adds	r3, #1
    3be6:	60fb      	str	r3, [r7, #12]
    3be8:	687b      	ldr	r3, [r7, #4]
    3bea:	0018      	movs	r0, r3
    3bec:	4b10      	ldr	r3, [pc, #64]	; (3c30 <SerialConsoleWriteString+0x74>)
    3bee:	4798      	blx	r3
    3bf0:	0002      	movs	r2, r0
    3bf2:	68fb      	ldr	r3, [r7, #12]
    3bf4:	429a      	cmp	r2, r3
    3bf6:	d8eb      	bhi.n	3bd0 <SerialConsoleWriteString+0x14>
		}

		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    3bf8:	4b0e      	ldr	r3, [pc, #56]	; (3c34 <SerialConsoleWriteString+0x78>)
    3bfa:	2101      	movs	r1, #1
    3bfc:	0018      	movs	r0, r3
    3bfe:	4b0e      	ldr	r3, [pc, #56]	; (3c38 <SerialConsoleWriteString+0x7c>)
    3c00:	4798      	blx	r3
    3c02:	1e03      	subs	r3, r0, #0
    3c04:	d10c      	bne.n	3c20 <SerialConsoleWriteString+0x64>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    3c06:	4b08      	ldr	r3, [pc, #32]	; (3c28 <SerialConsoleWriteString+0x6c>)
    3c08:	681b      	ldr	r3, [r3, #0]
    3c0a:	4a0c      	ldr	r2, [pc, #48]	; (3c3c <SerialConsoleWriteString+0x80>)
    3c0c:	0011      	movs	r1, r2
    3c0e:	0018      	movs	r0, r3
    3c10:	4b0b      	ldr	r3, [pc, #44]	; (3c40 <SerialConsoleWriteString+0x84>)
    3c12:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    3c14:	4909      	ldr	r1, [pc, #36]	; (3c3c <SerialConsoleWriteString+0x80>)
    3c16:	4b07      	ldr	r3, [pc, #28]	; (3c34 <SerialConsoleWriteString+0x78>)
    3c18:	2201      	movs	r2, #1
    3c1a:	0018      	movs	r0, r3
    3c1c:	4b09      	ldr	r3, [pc, #36]	; (3c44 <SerialConsoleWriteString+0x88>)
    3c1e:	4798      	blx	r3
		}
	}
}
    3c20:	46c0      	nop			; (mov r8, r8)
    3c22:	46bd      	mov	sp, r7
    3c24:	b004      	add	sp, #16
    3c26:	bd80      	pop	{r7, pc}
    3c28:	200038b8 	.word	0x200038b8
    3c2c:	000037f5 	.word	0x000037f5
    3c30:	00005a85 	.word	0x00005a85
    3c34:	20003428 	.word	0x20003428
    3c38:	0000468d 	.word	0x0000468d
    3c3c:	200038b5 	.word	0x200038b5
    3c40:	00003829 	.word	0x00003829
    3c44:	000045fd 	.word	0x000045fd

00003c48 <setLogLevel>:
* @param[in]    debugLevel The debug level to be set for the debug logger
* @note
*****************************************************************************/

void setLogLevel(enum eDebugLogLevels debugLevel)
{
    3c48:	b580      	push	{r7, lr}
    3c4a:	b082      	sub	sp, #8
    3c4c:	af00      	add	r7, sp, #0
    3c4e:	0002      	movs	r2, r0
    3c50:	1dfb      	adds	r3, r7, #7
    3c52:	701a      	strb	r2, [r3, #0]
currentDebugLevel = debugLevel;
    3c54:	4b03      	ldr	r3, [pc, #12]	; (3c64 <setLogLevel+0x1c>)
    3c56:	1dfa      	adds	r2, r7, #7
    3c58:	7812      	ldrb	r2, [r2, #0]
    3c5a:	701a      	strb	r2, [r3, #0]

}
    3c5c:	46c0      	nop			; (mov r8, r8)
    3c5e:	46bd      	mov	sp, r7
    3c60:	b002      	add	sp, #8
    3c62:	bd80      	pop	{r7, pc}
    3c64:	200038b4 	.word	0x200038b4

00003c68 <LogMessage>:
* @brief
* @note
*****************************************************************************/	
char bufferMsg[80];
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
    3c68:	b40e      	push	{r1, r2, r3}
    3c6a:	b580      	push	{r7, lr}
    3c6c:	b085      	sub	sp, #20
    3c6e:	af00      	add	r7, sp, #0
    3c70:	0002      	movs	r2, r0
    3c72:	1dfb      	adds	r3, r7, #7
    3c74:	701a      	strb	r2, [r3, #0]
	if (level >= currentDebugLevel) {
    3c76:	4b0f      	ldr	r3, [pc, #60]	; (3cb4 <LogMessage+0x4c>)
    3c78:	781b      	ldrb	r3, [r3, #0]
    3c7a:	1dfa      	adds	r2, r7, #7
    3c7c:	7812      	ldrb	r2, [r2, #0]
    3c7e:	429a      	cmp	r2, r3
    3c80:	d310      	bcc.n	3ca4 <LogMessage+0x3c>
	va_list aptr;
	uint8_t ret;
	va_start(aptr, format);
    3c82:	2320      	movs	r3, #32
    3c84:	18fb      	adds	r3, r7, r3
    3c86:	60bb      	str	r3, [r7, #8]
	ret = vsprintf(bufferMsg, format, aptr);
    3c88:	68ba      	ldr	r2, [r7, #8]
    3c8a:	69f9      	ldr	r1, [r7, #28]
    3c8c:	4b0a      	ldr	r3, [pc, #40]	; (3cb8 <LogMessage+0x50>)
    3c8e:	0018      	movs	r0, r3
    3c90:	4b0a      	ldr	r3, [pc, #40]	; (3cbc <LogMessage+0x54>)
    3c92:	4798      	blx	r3
    3c94:	0002      	movs	r2, r0
    3c96:	230f      	movs	r3, #15
    3c98:	18fb      	adds	r3, r7, r3
    3c9a:	701a      	strb	r2, [r3, #0]
	va_end(aptr);
	
	SerialConsoleWriteString(bufferMsg);
    3c9c:	4b06      	ldr	r3, [pc, #24]	; (3cb8 <LogMessage+0x50>)
    3c9e:	0018      	movs	r0, r3
    3ca0:	4b07      	ldr	r3, [pc, #28]	; (3cc0 <LogMessage+0x58>)
    3ca2:	4798      	blx	r3
	}
};
    3ca4:	46c0      	nop			; (mov r8, r8)
    3ca6:	46bd      	mov	sp, r7
    3ca8:	b005      	add	sp, #20
    3caa:	bc80      	pop	{r7}
    3cac:	bc08      	pop	{r3}
    3cae:	b003      	add	sp, #12
    3cb0:	4718      	bx	r3
    3cb2:	46c0      	nop			; (mov r8, r8)
    3cb4:	200038b4 	.word	0x200038b4
    3cb8:	2000345c 	.word	0x2000345c
    3cbc:	00005b11 	.word	0x00005b11
    3cc0:	00003bbd 	.word	0x00003bbd

00003cc4 <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
    3cc4:	b580      	push	{r7, lr}
    3cc6:	b090      	sub	sp, #64	; 0x40
    3cc8:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    3cca:	003b      	movs	r3, r7
    3ccc:	0018      	movs	r0, r3
    3cce:	4b14      	ldr	r3, [pc, #80]	; (3d20 <configure_usart+0x5c>)
    3cd0:	4798      	blx	r3

	config_usart.baudrate    = 115200;
    3cd2:	003b      	movs	r3, r7
    3cd4:	22e1      	movs	r2, #225	; 0xe1
    3cd6:	0252      	lsls	r2, r2, #9
    3cd8:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    3cda:	003b      	movs	r3, r7
    3cdc:	22c4      	movs	r2, #196	; 0xc4
    3cde:	0392      	lsls	r2, r2, #14
    3ce0:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    3ce2:	003b      	movs	r3, r7
    3ce4:	2201      	movs	r2, #1
    3ce6:	4252      	negs	r2, r2
    3ce8:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    3cea:	003b      	movs	r3, r7
    3cec:	2201      	movs	r2, #1
    3cee:	4252      	negs	r2, r2
    3cf0:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    3cf2:	003b      	movs	r3, r7
    3cf4:	4a0b      	ldr	r2, [pc, #44]	; (3d24 <configure_usart+0x60>)
    3cf6:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    3cf8:	003b      	movs	r3, r7
    3cfa:	4a0b      	ldr	r2, [pc, #44]	; (3d28 <configure_usart+0x64>)
    3cfc:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
    3cfe:	46c0      	nop			; (mov r8, r8)
    3d00:	003a      	movs	r2, r7
    3d02:	490a      	ldr	r1, [pc, #40]	; (3d2c <configure_usart+0x68>)
    3d04:	4b0a      	ldr	r3, [pc, #40]	; (3d30 <configure_usart+0x6c>)
    3d06:	0018      	movs	r0, r3
    3d08:	4b0a      	ldr	r3, [pc, #40]	; (3d34 <configure_usart+0x70>)
    3d0a:	4798      	blx	r3
    3d0c:	1e03      	subs	r3, r0, #0
    3d0e:	d1f7      	bne.n	3d00 <configure_usart+0x3c>
					  &config_usart) != STATUS_OK) 
	{

	}
	
	usart_enable(&usart_instance);
    3d10:	4b07      	ldr	r3, [pc, #28]	; (3d30 <configure_usart+0x6c>)
    3d12:	0018      	movs	r0, r3
    3d14:	4b08      	ldr	r3, [pc, #32]	; (3d38 <configure_usart+0x74>)
    3d16:	4798      	blx	r3
}
    3d18:	46c0      	nop			; (mov r8, r8)
    3d1a:	46bd      	mov	sp, r7
    3d1c:	b010      	add	sp, #64	; 0x40
    3d1e:	bd80      	pop	{r7, pc}
    3d20:	00003a01 	.word	0x00003a01
    3d24:	002a0003 	.word	0x002a0003
    3d28:	002b0003 	.word	0x002b0003
    3d2c:	42001800 	.word	0x42001800
    3d30:	20003428 	.word	0x20003428
    3d34:	00004201 	.word	0x00004201
    3d38:	00003ac1 	.word	0x00003ac1

00003d3c <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
    3d3c:	b580      	push	{r7, lr}
    3d3e:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
    3d40:	490c      	ldr	r1, [pc, #48]	; (3d74 <configure_usart_callbacks+0x38>)
    3d42:	4b0d      	ldr	r3, [pc, #52]	; (3d78 <configure_usart_callbacks+0x3c>)
    3d44:	2200      	movs	r2, #0
    3d46:	0018      	movs	r0, r3
    3d48:	4b0c      	ldr	r3, [pc, #48]	; (3d7c <configure_usart_callbacks+0x40>)
    3d4a:	4798      	blx	r3
							usart_write_callback, 
							USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    3d4c:	490c      	ldr	r1, [pc, #48]	; (3d80 <configure_usart_callbacks+0x44>)
    3d4e:	4b0a      	ldr	r3, [pc, #40]	; (3d78 <configure_usart_callbacks+0x3c>)
    3d50:	2201      	movs	r2, #1
    3d52:	0018      	movs	r0, r3
    3d54:	4b09      	ldr	r3, [pc, #36]	; (3d7c <configure_usart_callbacks+0x40>)
    3d56:	4798      	blx	r3
							usart_read_callback, 
							USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    3d58:	4b07      	ldr	r3, [pc, #28]	; (3d78 <configure_usart_callbacks+0x3c>)
    3d5a:	2100      	movs	r1, #0
    3d5c:	0018      	movs	r0, r3
    3d5e:	4b09      	ldr	r3, [pc, #36]	; (3d84 <configure_usart_callbacks+0x48>)
    3d60:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    3d62:	4b05      	ldr	r3, [pc, #20]	; (3d78 <configure_usart_callbacks+0x3c>)
    3d64:	2101      	movs	r1, #1
    3d66:	0018      	movs	r0, r3
    3d68:	4b06      	ldr	r3, [pc, #24]	; (3d84 <configure_usart_callbacks+0x48>)
    3d6a:	4798      	blx	r3
}
    3d6c:	46c0      	nop			; (mov r8, r8)
    3d6e:	46bd      	mov	sp, r7
    3d70:	bd80      	pop	{r7, pc}
    3d72:	46c0      	nop			; (mov r8, r8)
    3d74:	00003de9 	.word	0x00003de9
    3d78:	20003428 	.word	0x20003428
    3d7c:	000045b5 	.word	0x000045b5
    3d80:	00003d89 	.word	0x00003d89
    3d84:	00003b09 	.word	0x00003b09

00003d88 <usart_read_callback>:
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
		Students to fill out. Please note that the code here is dummy code. It is only used to show you how some functions work.
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b082      	sub	sp, #8
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]

	//Try method 2
	//char rx2;
	//SerialConsoleReadCharacter(&rx2);
	
	SerialConsoleWriteString(&latestRx);
    3d90:	4b0f      	ldr	r3, [pc, #60]	; (3dd0 <usart_read_callback+0x48>)
    3d92:	0018      	movs	r0, r3
    3d94:	4b0f      	ldr	r3, [pc, #60]	; (3dd4 <usart_read_callback+0x4c>)
    3d96:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);
    3d98:	490d      	ldr	r1, [pc, #52]	; (3dd0 <usart_read_callback+0x48>)
    3d9a:	4b0f      	ldr	r3, [pc, #60]	; (3dd8 <usart_read_callback+0x50>)
    3d9c:	2201      	movs	r2, #1
    3d9e:	0018      	movs	r0, r3
    3da0:	4b0e      	ldr	r3, [pc, #56]	; (3ddc <usart_read_callback+0x54>)
    3da2:	4798      	blx	r3
	
	while(latestRx != NULL)
    3da4:	e00b      	b.n	3dbe <usart_read_callback+0x36>
	{
		circular_buf_put(cbufRx, (uint8_t) latestRx);
    3da6:	4b0e      	ldr	r3, [pc, #56]	; (3de0 <usart_read_callback+0x58>)
    3da8:	681a      	ldr	r2, [r3, #0]
    3daa:	4b09      	ldr	r3, [pc, #36]	; (3dd0 <usart_read_callback+0x48>)
    3dac:	781b      	ldrb	r3, [r3, #0]
    3dae:	0019      	movs	r1, r3
    3db0:	0010      	movs	r0, r2
    3db2:	4b0c      	ldr	r3, [pc, #48]	; (3de4 <usart_read_callback+0x5c>)
    3db4:	4798      	blx	r3
		SerialConsoleWriteString(&latestRx);
    3db6:	4b06      	ldr	r3, [pc, #24]	; (3dd0 <usart_read_callback+0x48>)
    3db8:	0018      	movs	r0, r3
    3dba:	4b06      	ldr	r3, [pc, #24]	; (3dd4 <usart_read_callback+0x4c>)
    3dbc:	4798      	blx	r3
	while(latestRx != NULL)
    3dbe:	4b04      	ldr	r3, [pc, #16]	; (3dd0 <usart_read_callback+0x48>)
    3dc0:	781b      	ldrb	r3, [r3, #0]
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	d1ef      	bne.n	3da6 <usart_read_callback+0x1e>
	}

}
    3dc6:	46c0      	nop			; (mov r8, r8)
    3dc8:	46bd      	mov	sp, r7
    3dca:	b002      	add	sp, #8
    3dcc:	bd80      	pop	{r7, pc}
    3dce:	46c0      	nop			; (mov r8, r8)
    3dd0:	200034b0 	.word	0x200034b0
    3dd4:	00003bbd 	.word	0x00003bbd
    3dd8:	20003428 	.word	0x20003428
    3ddc:	00004645 	.word	0x00004645
    3de0:	200034ac 	.word	0x200034ac
    3de4:	000037f5 	.word	0x000037f5

00003de8 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    3de8:	b580      	push	{r7, lr}
    3dea:	b082      	sub	sp, #8
    3dec:	af00      	add	r7, sp, #0
    3dee:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    3df0:	4b09      	ldr	r3, [pc, #36]	; (3e18 <usart_write_callback+0x30>)
    3df2:	681b      	ldr	r3, [r3, #0]
    3df4:	4a09      	ldr	r2, [pc, #36]	; (3e1c <usart_write_callback+0x34>)
    3df6:	0011      	movs	r1, r2
    3df8:	0018      	movs	r0, r3
    3dfa:	4b09      	ldr	r3, [pc, #36]	; (3e20 <usart_write_callback+0x38>)
    3dfc:	4798      	blx	r3
    3dfe:	0003      	movs	r3, r0
    3e00:	3301      	adds	r3, #1
    3e02:	d005      	beq.n	3e10 <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    3e04:	4905      	ldr	r1, [pc, #20]	; (3e1c <usart_write_callback+0x34>)
    3e06:	4b07      	ldr	r3, [pc, #28]	; (3e24 <usart_write_callback+0x3c>)
    3e08:	2201      	movs	r2, #1
    3e0a:	0018      	movs	r0, r3
    3e0c:	4b06      	ldr	r3, [pc, #24]	; (3e28 <usart_write_callback+0x40>)
    3e0e:	4798      	blx	r3
	}
	
}
    3e10:	46c0      	nop			; (mov r8, r8)
    3e12:	46bd      	mov	sp, r7
    3e14:	b002      	add	sp, #8
    3e16:	bd80      	pop	{r7, pc}
    3e18:	200038b8 	.word	0x200038b8
    3e1c:	200038b5 	.word	0x200038b5
    3e20:	00003829 	.word	0x00003829
    3e24:	20003428 	.word	0x20003428
    3e28:	000045fd 	.word	0x000045fd

00003e2c <system_gclk_chan_get_config_defaults>:
{
    3e2c:	b580      	push	{r7, lr}
    3e2e:	b082      	sub	sp, #8
    3e30:	af00      	add	r7, sp, #0
    3e32:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3e34:	687b      	ldr	r3, [r7, #4]
    3e36:	2200      	movs	r2, #0
    3e38:	701a      	strb	r2, [r3, #0]
}
    3e3a:	46c0      	nop			; (mov r8, r8)
    3e3c:	46bd      	mov	sp, r7
    3e3e:	b002      	add	sp, #8
    3e40:	bd80      	pop	{r7, pc}
	...

00003e44 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3e44:	b580      	push	{r7, lr}
    3e46:	b082      	sub	sp, #8
    3e48:	af00      	add	r7, sp, #0
    3e4a:	0002      	movs	r2, r0
    3e4c:	6039      	str	r1, [r7, #0]
    3e4e:	1dfb      	adds	r3, r7, #7
    3e50:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3e52:	1dfb      	adds	r3, r7, #7
    3e54:	781b      	ldrb	r3, [r3, #0]
    3e56:	2b01      	cmp	r3, #1
    3e58:	d00a      	beq.n	3e70 <system_apb_clock_set_mask+0x2c>
    3e5a:	2b02      	cmp	r3, #2
    3e5c:	d00f      	beq.n	3e7e <system_apb_clock_set_mask+0x3a>
    3e5e:	2b00      	cmp	r3, #0
    3e60:	d114      	bne.n	3e8c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3e62:	4b0e      	ldr	r3, [pc, #56]	; (3e9c <system_apb_clock_set_mask+0x58>)
    3e64:	4a0d      	ldr	r2, [pc, #52]	; (3e9c <system_apb_clock_set_mask+0x58>)
    3e66:	6991      	ldr	r1, [r2, #24]
    3e68:	683a      	ldr	r2, [r7, #0]
    3e6a:	430a      	orrs	r2, r1
    3e6c:	619a      	str	r2, [r3, #24]
			break;
    3e6e:	e00f      	b.n	3e90 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3e70:	4b0a      	ldr	r3, [pc, #40]	; (3e9c <system_apb_clock_set_mask+0x58>)
    3e72:	4a0a      	ldr	r2, [pc, #40]	; (3e9c <system_apb_clock_set_mask+0x58>)
    3e74:	69d1      	ldr	r1, [r2, #28]
    3e76:	683a      	ldr	r2, [r7, #0]
    3e78:	430a      	orrs	r2, r1
    3e7a:	61da      	str	r2, [r3, #28]
			break;
    3e7c:	e008      	b.n	3e90 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3e7e:	4b07      	ldr	r3, [pc, #28]	; (3e9c <system_apb_clock_set_mask+0x58>)
    3e80:	4a06      	ldr	r2, [pc, #24]	; (3e9c <system_apb_clock_set_mask+0x58>)
    3e82:	6a11      	ldr	r1, [r2, #32]
    3e84:	683a      	ldr	r2, [r7, #0]
    3e86:	430a      	orrs	r2, r1
    3e88:	621a      	str	r2, [r3, #32]
			break;
    3e8a:	e001      	b.n	3e90 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3e8c:	2317      	movs	r3, #23
    3e8e:	e000      	b.n	3e92 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3e90:	2300      	movs	r3, #0
}
    3e92:	0018      	movs	r0, r3
    3e94:	46bd      	mov	sp, r7
    3e96:	b002      	add	sp, #8
    3e98:	bd80      	pop	{r7, pc}
    3e9a:	46c0      	nop			; (mov r8, r8)
    3e9c:	40000400 	.word	0x40000400

00003ea0 <system_pinmux_get_config_defaults>:
{
    3ea0:	b580      	push	{r7, lr}
    3ea2:	b082      	sub	sp, #8
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	2280      	movs	r2, #128	; 0x80
    3eac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	2200      	movs	r2, #0
    3eb2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3eb4:	687b      	ldr	r3, [r7, #4]
    3eb6:	2201      	movs	r2, #1
    3eb8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3eba:	687b      	ldr	r3, [r7, #4]
    3ebc:	2200      	movs	r2, #0
    3ebe:	70da      	strb	r2, [r3, #3]
}
    3ec0:	46c0      	nop			; (mov r8, r8)
    3ec2:	46bd      	mov	sp, r7
    3ec4:	b002      	add	sp, #8
    3ec6:	bd80      	pop	{r7, pc}

00003ec8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3ec8:	b580      	push	{r7, lr}
    3eca:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3ecc:	4b05      	ldr	r3, [pc, #20]	; (3ee4 <system_is_debugger_present+0x1c>)
    3ece:	789b      	ldrb	r3, [r3, #2]
    3ed0:	b2db      	uxtb	r3, r3
    3ed2:	001a      	movs	r2, r3
    3ed4:	2302      	movs	r3, #2
    3ed6:	4013      	ands	r3, r2
    3ed8:	1e5a      	subs	r2, r3, #1
    3eda:	4193      	sbcs	r3, r2
    3edc:	b2db      	uxtb	r3, r3
}
    3ede:	0018      	movs	r0, r3
    3ee0:	46bd      	mov	sp, r7
    3ee2:	bd80      	pop	{r7, pc}
    3ee4:	41002000 	.word	0x41002000

00003ee8 <usart_is_syncing>:
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b084      	sub	sp, #16
    3eec:	af00      	add	r7, sp, #0
    3eee:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ef0:	687b      	ldr	r3, [r7, #4]
    3ef2:	681b      	ldr	r3, [r3, #0]
    3ef4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    3ef6:	68fb      	ldr	r3, [r7, #12]
    3ef8:	69db      	ldr	r3, [r3, #28]
    3efa:	1e5a      	subs	r2, r3, #1
    3efc:	4193      	sbcs	r3, r2
    3efe:	b2db      	uxtb	r3, r3
}
    3f00:	0018      	movs	r0, r3
    3f02:	46bd      	mov	sp, r7
    3f04:	b004      	add	sp, #16
    3f06:	bd80      	pop	{r7, pc}

00003f08 <_usart_wait_for_sync>:
{
    3f08:	b580      	push	{r7, lr}
    3f0a:	b082      	sub	sp, #8
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    3f10:	46c0      	nop			; (mov r8, r8)
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	0018      	movs	r0, r3
    3f16:	4b04      	ldr	r3, [pc, #16]	; (3f28 <_usart_wait_for_sync+0x20>)
    3f18:	4798      	blx	r3
    3f1a:	1e03      	subs	r3, r0, #0
    3f1c:	d1f9      	bne.n	3f12 <_usart_wait_for_sync+0xa>
}
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	46bd      	mov	sp, r7
    3f22:	b002      	add	sp, #8
    3f24:	bd80      	pop	{r7, pc}
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	00003ee9 	.word	0x00003ee9

00003f2c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    3f2c:	b5b0      	push	{r4, r5, r7, lr}
    3f2e:	b08c      	sub	sp, #48	; 0x30
    3f30:	af02      	add	r7, sp, #8
    3f32:	6078      	str	r0, [r7, #4]
    3f34:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	681b      	ldr	r3, [r3, #0]
    3f3a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3f3c:	687b      	ldr	r3, [r7, #4]
    3f3e:	681b      	ldr	r3, [r3, #0]
    3f40:	0018      	movs	r0, r3
    3f42:	4ba9      	ldr	r3, [pc, #676]	; (41e8 <_usart_set_config+0x2bc>)
    3f44:	4798      	blx	r3
    3f46:	0003      	movs	r3, r0
    3f48:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3f4a:	697b      	ldr	r3, [r7, #20]
    3f4c:	3314      	adds	r3, #20
    3f4e:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    3f50:	2300      	movs	r3, #0
    3f52:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    3f54:	2300      	movs	r3, #0
    3f56:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    3f58:	230a      	movs	r3, #10
    3f5a:	18fb      	adds	r3, r7, r3
    3f5c:	2200      	movs	r2, #0
    3f5e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3f60:	231f      	movs	r3, #31
    3f62:	18fb      	adds	r3, r7, r3
    3f64:	2200      	movs	r2, #0
    3f66:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3f68:	231e      	movs	r3, #30
    3f6a:	18fb      	adds	r3, r7, r3
    3f6c:	2210      	movs	r2, #16
    3f6e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    3f70:	683b      	ldr	r3, [r7, #0]
    3f72:	8a1b      	ldrh	r3, [r3, #16]
    3f74:	2280      	movs	r2, #128	; 0x80
    3f76:	01d2      	lsls	r2, r2, #7
    3f78:	4293      	cmp	r3, r2
    3f7a:	d01c      	beq.n	3fb6 <_usart_set_config+0x8a>
    3f7c:	2280      	movs	r2, #128	; 0x80
    3f7e:	01d2      	lsls	r2, r2, #7
    3f80:	4293      	cmp	r3, r2
    3f82:	dc06      	bgt.n	3f92 <_usart_set_config+0x66>
    3f84:	2b00      	cmp	r3, #0
    3f86:	d00d      	beq.n	3fa4 <_usart_set_config+0x78>
    3f88:	2280      	movs	r2, #128	; 0x80
    3f8a:	0192      	lsls	r2, r2, #6
    3f8c:	4293      	cmp	r3, r2
    3f8e:	d024      	beq.n	3fda <_usart_set_config+0xae>
    3f90:	e035      	b.n	3ffe <_usart_set_config+0xd2>
    3f92:	22c0      	movs	r2, #192	; 0xc0
    3f94:	01d2      	lsls	r2, r2, #7
    3f96:	4293      	cmp	r3, r2
    3f98:	d028      	beq.n	3fec <_usart_set_config+0xc0>
    3f9a:	2280      	movs	r2, #128	; 0x80
    3f9c:	0212      	lsls	r2, r2, #8
    3f9e:	4293      	cmp	r3, r2
    3fa0:	d012      	beq.n	3fc8 <_usart_set_config+0x9c>
    3fa2:	e02c      	b.n	3ffe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3fa4:	231f      	movs	r3, #31
    3fa6:	18fb      	adds	r3, r7, r3
    3fa8:	2200      	movs	r2, #0
    3faa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3fac:	231e      	movs	r3, #30
    3fae:	18fb      	adds	r3, r7, r3
    3fb0:	2210      	movs	r2, #16
    3fb2:	701a      	strb	r2, [r3, #0]
			break;
    3fb4:	e023      	b.n	3ffe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3fb6:	231f      	movs	r3, #31
    3fb8:	18fb      	adds	r3, r7, r3
    3fba:	2200      	movs	r2, #0
    3fbc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3fbe:	231e      	movs	r3, #30
    3fc0:	18fb      	adds	r3, r7, r3
    3fc2:	2208      	movs	r2, #8
    3fc4:	701a      	strb	r2, [r3, #0]
			break;
    3fc6:	e01a      	b.n	3ffe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3fc8:	231f      	movs	r3, #31
    3fca:	18fb      	adds	r3, r7, r3
    3fcc:	2200      	movs	r2, #0
    3fce:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3fd0:	231e      	movs	r3, #30
    3fd2:	18fb      	adds	r3, r7, r3
    3fd4:	2203      	movs	r2, #3
    3fd6:	701a      	strb	r2, [r3, #0]
			break;
    3fd8:	e011      	b.n	3ffe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3fda:	231f      	movs	r3, #31
    3fdc:	18fb      	adds	r3, r7, r3
    3fde:	2201      	movs	r2, #1
    3fe0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3fe2:	231e      	movs	r3, #30
    3fe4:	18fb      	adds	r3, r7, r3
    3fe6:	2210      	movs	r2, #16
    3fe8:	701a      	strb	r2, [r3, #0]
			break;
    3fea:	e008      	b.n	3ffe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3fec:	231f      	movs	r3, #31
    3fee:	18fb      	adds	r3, r7, r3
    3ff0:	2201      	movs	r2, #1
    3ff2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3ff4:	231e      	movs	r3, #30
    3ff6:	18fb      	adds	r3, r7, r3
    3ff8:	2208      	movs	r2, #8
    3ffa:	701a      	strb	r2, [r3, #0]
			break;
    3ffc:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3ffe:	683b      	ldr	r3, [r7, #0]
    4000:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    4002:	683b      	ldr	r3, [r7, #0]
    4004:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    4006:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4008:	683b      	ldr	r3, [r7, #0]
    400a:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    400c:	4313      	orrs	r3, r2
		config->sample_rate |
    400e:	683a      	ldr	r2, [r7, #0]
    4010:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    4012:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4014:	683a      	ldr	r2, [r7, #0]
    4016:	7e12      	ldrb	r2, [r2, #24]
    4018:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    401a:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    401c:	683a      	ldr	r2, [r7, #0]
    401e:	2126      	movs	r1, #38	; 0x26
    4020:	5c52      	ldrb	r2, [r2, r1]
    4022:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    4024:	4313      	orrs	r3, r2
    4026:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    4028:	231d      	movs	r3, #29
    402a:	18fb      	adds	r3, r7, r3
    402c:	2200      	movs	r2, #0
    402e:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    4030:	683b      	ldr	r3, [r7, #0]
    4032:	685b      	ldr	r3, [r3, #4]
    4034:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    4036:	68fb      	ldr	r3, [r7, #12]
    4038:	2b00      	cmp	r3, #0
    403a:	d01e      	beq.n	407a <_usart_set_config+0x14e>
    403c:	2280      	movs	r2, #128	; 0x80
    403e:	0552      	lsls	r2, r2, #21
    4040:	4293      	cmp	r3, r2
    4042:	d14f      	bne.n	40e4 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    4044:	683b      	ldr	r3, [r7, #0]
    4046:	2227      	movs	r2, #39	; 0x27
    4048:	5c9b      	ldrb	r3, [r3, r2]
    404a:	2201      	movs	r2, #1
    404c:	4053      	eors	r3, r2
    404e:	b2db      	uxtb	r3, r3
    4050:	2b00      	cmp	r3, #0
    4052:	d046      	beq.n	40e2 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4054:	683b      	ldr	r3, [r7, #0]
    4056:	6a1d      	ldr	r5, [r3, #32]
    4058:	693b      	ldr	r3, [r7, #16]
    405a:	b2db      	uxtb	r3, r3
    405c:	0018      	movs	r0, r3
    405e:	4b63      	ldr	r3, [pc, #396]	; (41ec <_usart_set_config+0x2c0>)
    4060:	4798      	blx	r3
    4062:	0001      	movs	r1, r0
    4064:	231d      	movs	r3, #29
    4066:	18fc      	adds	r4, r7, r3
    4068:	230a      	movs	r3, #10
    406a:	18fb      	adds	r3, r7, r3
    406c:	001a      	movs	r2, r3
    406e:	0028      	movs	r0, r5
    4070:	4b5f      	ldr	r3, [pc, #380]	; (41f0 <_usart_set_config+0x2c4>)
    4072:	4798      	blx	r3
    4074:	0003      	movs	r3, r0
    4076:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    4078:	e033      	b.n	40e2 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    407a:	683b      	ldr	r3, [r7, #0]
    407c:	2227      	movs	r2, #39	; 0x27
    407e:	5c9b      	ldrb	r3, [r3, r2]
    4080:	2b00      	cmp	r3, #0
    4082:	d014      	beq.n	40ae <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4084:	683b      	ldr	r3, [r7, #0]
    4086:	6a18      	ldr	r0, [r3, #32]
    4088:	683b      	ldr	r3, [r7, #0]
    408a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    408c:	231d      	movs	r3, #29
    408e:	18fc      	adds	r4, r7, r3
    4090:	231f      	movs	r3, #31
    4092:	18fb      	adds	r3, r7, r3
    4094:	781d      	ldrb	r5, [r3, #0]
    4096:	230a      	movs	r3, #10
    4098:	18fa      	adds	r2, r7, r3
    409a:	231e      	movs	r3, #30
    409c:	18fb      	adds	r3, r7, r3
    409e:	781b      	ldrb	r3, [r3, #0]
    40a0:	9300      	str	r3, [sp, #0]
    40a2:	002b      	movs	r3, r5
    40a4:	4d53      	ldr	r5, [pc, #332]	; (41f4 <_usart_set_config+0x2c8>)
    40a6:	47a8      	blx	r5
    40a8:	0003      	movs	r3, r0
    40aa:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    40ac:	e01a      	b.n	40e4 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    40ae:	683b      	ldr	r3, [r7, #0]
    40b0:	6a1d      	ldr	r5, [r3, #32]
    40b2:	693b      	ldr	r3, [r7, #16]
    40b4:	b2db      	uxtb	r3, r3
    40b6:	0018      	movs	r0, r3
    40b8:	4b4c      	ldr	r3, [pc, #304]	; (41ec <_usart_set_config+0x2c0>)
    40ba:	4798      	blx	r3
				status_code =
    40bc:	231d      	movs	r3, #29
    40be:	18fc      	adds	r4, r7, r3
    40c0:	231f      	movs	r3, #31
    40c2:	18fb      	adds	r3, r7, r3
    40c4:	7819      	ldrb	r1, [r3, #0]
    40c6:	230a      	movs	r3, #10
    40c8:	18fa      	adds	r2, r7, r3
    40ca:	231e      	movs	r3, #30
    40cc:	18fb      	adds	r3, r7, r3
    40ce:	781b      	ldrb	r3, [r3, #0]
    40d0:	9300      	str	r3, [sp, #0]
    40d2:	000b      	movs	r3, r1
    40d4:	0001      	movs	r1, r0
    40d6:	0028      	movs	r0, r5
    40d8:	4d46      	ldr	r5, [pc, #280]	; (41f4 <_usart_set_config+0x2c8>)
    40da:	47a8      	blx	r5
    40dc:	0003      	movs	r3, r0
    40de:	7023      	strb	r3, [r4, #0]
			break;
    40e0:	e000      	b.n	40e4 <_usart_set_config+0x1b8>
			break;
    40e2:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    40e4:	231d      	movs	r3, #29
    40e6:	18fb      	adds	r3, r7, r3
    40e8:	781b      	ldrb	r3, [r3, #0]
    40ea:	2b00      	cmp	r3, #0
    40ec:	d003      	beq.n	40f6 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    40ee:	231d      	movs	r3, #29
    40f0:	18fb      	adds	r3, r7, r3
    40f2:	781b      	ldrb	r3, [r3, #0]
    40f4:	e073      	b.n	41de <_usart_set_config+0x2b2>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    40f6:	683b      	ldr	r3, [r7, #0]
    40f8:	7e5b      	ldrb	r3, [r3, #25]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d003      	beq.n	4106 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    40fe:	683b      	ldr	r3, [r7, #0]
    4100:	7e9a      	ldrb	r2, [r3, #26]
    4102:	69bb      	ldr	r3, [r7, #24]
    4104:	739a      	strb	r2, [r3, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4106:	230a      	movs	r3, #10
    4108:	18fb      	adds	r3, r7, r3
    410a:	881a      	ldrh	r2, [r3, #0]
    410c:	69bb      	ldr	r3, [r7, #24]
    410e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    4110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4112:	68fb      	ldr	r3, [r7, #12]
    4114:	4313      	orrs	r3, r2
    4116:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    4118:	683b      	ldr	r3, [r7, #0]
    411a:	2227      	movs	r2, #39	; 0x27
    411c:	5c9b      	ldrb	r3, [r3, r2]
    411e:	2201      	movs	r2, #1
    4120:	4053      	eors	r3, r2
    4122:	b2db      	uxtb	r3, r3
    4124:	2b00      	cmp	r3, #0
    4126:	d003      	beq.n	4130 <_usart_set_config+0x204>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    412a:	2204      	movs	r2, #4
    412c:	4313      	orrs	r3, r2
    412e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4130:	683b      	ldr	r3, [r7, #0]
    4132:	7e5b      	ldrb	r3, [r3, #25]
    4134:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4136:	683b      	ldr	r3, [r7, #0]
    4138:	7f1b      	ldrb	r3, [r3, #28]
    413a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    413c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    413e:	683b      	ldr	r3, [r7, #0]
    4140:	7f5b      	ldrb	r3, [r3, #29]
    4142:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4144:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4146:	683b      	ldr	r3, [r7, #0]
    4148:	2124      	movs	r1, #36	; 0x24
    414a:	5c5b      	ldrb	r3, [r3, r1]
    414c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    414e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4150:	683b      	ldr	r3, [r7, #0]
    4152:	2125      	movs	r1, #37	; 0x25
    4154:	5c5b      	ldrb	r3, [r3, r1]
    4156:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4158:	4313      	orrs	r3, r2
	ctrlb =  
    415a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    415c:	683b      	ldr	r3, [r7, #0]
    415e:	7a9b      	ldrb	r3, [r3, #10]
    4160:	001a      	movs	r2, r3
    4162:	6a3b      	ldr	r3, [r7, #32]
    4164:	4313      	orrs	r3, r2
    4166:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    4168:	683b      	ldr	r3, [r7, #0]
    416a:	7adb      	ldrb	r3, [r3, #11]
    416c:	001a      	movs	r2, r3
    416e:	6a3b      	ldr	r3, [r7, #32]
    4170:	4313      	orrs	r3, r2
    4172:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    4174:	683b      	ldr	r3, [r7, #0]
    4176:	891b      	ldrh	r3, [r3, #8]
    4178:	2bff      	cmp	r3, #255	; 0xff
    417a:	d00b      	beq.n	4194 <_usart_set_config+0x268>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    417e:	2280      	movs	r2, #128	; 0x80
    4180:	0452      	lsls	r2, r2, #17
    4182:	4313      	orrs	r3, r2
    4184:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    4186:	683b      	ldr	r3, [r7, #0]
    4188:	891b      	ldrh	r3, [r3, #8]
    418a:	001a      	movs	r2, r3
    418c:	6a3b      	ldr	r3, [r7, #32]
    418e:	4313      	orrs	r3, r2
    4190:	623b      	str	r3, [r7, #32]
    4192:	e008      	b.n	41a6 <_usart_set_config+0x27a>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4194:	683b      	ldr	r3, [r7, #0]
    4196:	7edb      	ldrb	r3, [r3, #27]
    4198:	2b00      	cmp	r3, #0
    419a:	d004      	beq.n	41a6 <_usart_set_config+0x27a>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    419e:	2280      	movs	r2, #128	; 0x80
    41a0:	04d2      	lsls	r2, r2, #19
    41a2:	4313      	orrs	r3, r2
    41a4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    41a6:	683b      	ldr	r3, [r7, #0]
    41a8:	222c      	movs	r2, #44	; 0x2c
    41aa:	5c9b      	ldrb	r3, [r3, r2]
    41ac:	2b00      	cmp	r3, #0
    41ae:	d103      	bne.n	41b8 <_usart_set_config+0x28c>
    41b0:	4b11      	ldr	r3, [pc, #68]	; (41f8 <_usart_set_config+0x2cc>)
    41b2:	4798      	blx	r3
    41b4:	1e03      	subs	r3, r0, #0
    41b6:	d003      	beq.n	41c0 <_usart_set_config+0x294>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    41b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41ba:	2280      	movs	r2, #128	; 0x80
    41bc:	4313      	orrs	r3, r2
    41be:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    41c0:	687b      	ldr	r3, [r7, #4]
    41c2:	0018      	movs	r0, r3
    41c4:	4b0d      	ldr	r3, [pc, #52]	; (41fc <_usart_set_config+0x2d0>)
    41c6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    41c8:	69bb      	ldr	r3, [r7, #24]
    41ca:	6a3a      	ldr	r2, [r7, #32]
    41cc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    41ce:	687b      	ldr	r3, [r7, #4]
    41d0:	0018      	movs	r0, r3
    41d2:	4b0a      	ldr	r3, [pc, #40]	; (41fc <_usart_set_config+0x2d0>)
    41d4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    41d6:	69bb      	ldr	r3, [r7, #24]
    41d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    41da:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    41dc:	2300      	movs	r3, #0
}
    41de:	0018      	movs	r0, r3
    41e0:	46bd      	mov	sp, r7
    41e2:	b00a      	add	sp, #40	; 0x28
    41e4:	bdb0      	pop	{r4, r5, r7, pc}
    41e6:	46c0      	nop			; (mov r8, r8)
    41e8:	000008f9 	.word	0x000008f9
    41ec:	00005409 	.word	0x00005409
    41f0:	00000473 	.word	0x00000473
    41f4:	000004f1 	.word	0x000004f1
    41f8:	00003ec9 	.word	0x00003ec9
    41fc:	00003f09 	.word	0x00003f09

00004200 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4200:	b590      	push	{r4, r7, lr}
    4202:	b093      	sub	sp, #76	; 0x4c
    4204:	af00      	add	r7, sp, #0
    4206:	60f8      	str	r0, [r7, #12]
    4208:	60b9      	str	r1, [r7, #8]
    420a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    420c:	233b      	movs	r3, #59	; 0x3b
    420e:	18fb      	adds	r3, r7, r3
    4210:	2200      	movs	r2, #0
    4212:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4214:	68fb      	ldr	r3, [r7, #12]
    4216:	68ba      	ldr	r2, [r7, #8]
    4218:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    421a:	68fb      	ldr	r3, [r7, #12]
    421c:	681b      	ldr	r3, [r3, #0]
    421e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4220:	68fb      	ldr	r3, [r7, #12]
    4222:	681b      	ldr	r3, [r3, #0]
    4224:	0018      	movs	r0, r3
    4226:	4b86      	ldr	r3, [pc, #536]	; (4440 <usart_init+0x240>)
    4228:	4798      	blx	r3
    422a:	0003      	movs	r3, r0
    422c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4230:	3302      	adds	r3, #2
    4232:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4236:	3314      	adds	r3, #20
    4238:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    423a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    423c:	681b      	ldr	r3, [r3, #0]
    423e:	2201      	movs	r2, #1
    4240:	4013      	ands	r3, r2
    4242:	d001      	beq.n	4248 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4244:	2305      	movs	r3, #5
    4246:	e0f6      	b.n	4436 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    424a:	681b      	ldr	r3, [r3, #0]
    424c:	2202      	movs	r2, #2
    424e:	4013      	ands	r3, r2
    4250:	d001      	beq.n	4256 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4252:	231c      	movs	r3, #28
    4254:	e0ef      	b.n	4436 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4256:	2201      	movs	r2, #1
    4258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    425a:	409a      	lsls	r2, r3
    425c:	0013      	movs	r3, r2
    425e:	0019      	movs	r1, r3
    4260:	2002      	movs	r0, #2
    4262:	4b78      	ldr	r3, [pc, #480]	; (4444 <usart_init+0x244>)
    4264:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4266:	2324      	movs	r3, #36	; 0x24
    4268:	18fb      	adds	r3, r7, r3
    426a:	0018      	movs	r0, r3
    426c:	4b76      	ldr	r3, [pc, #472]	; (4448 <usart_init+0x248>)
    426e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4270:	687b      	ldr	r3, [r7, #4]
    4272:	222d      	movs	r2, #45	; 0x2d
    4274:	5c9a      	ldrb	r2, [r3, r2]
    4276:	2324      	movs	r3, #36	; 0x24
    4278:	18fb      	adds	r3, r7, r3
    427a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    427e:	b2db      	uxtb	r3, r3
    4280:	2224      	movs	r2, #36	; 0x24
    4282:	18ba      	adds	r2, r7, r2
    4284:	0011      	movs	r1, r2
    4286:	0018      	movs	r0, r3
    4288:	4b70      	ldr	r3, [pc, #448]	; (444c <usart_init+0x24c>)
    428a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    428e:	b2db      	uxtb	r3, r3
    4290:	0018      	movs	r0, r3
    4292:	4b6f      	ldr	r3, [pc, #444]	; (4450 <usart_init+0x250>)
    4294:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4296:	687b      	ldr	r3, [r7, #4]
    4298:	222d      	movs	r2, #45	; 0x2d
    429a:	5c9b      	ldrb	r3, [r3, r2]
    429c:	2100      	movs	r1, #0
    429e:	0018      	movs	r0, r3
    42a0:	4b6c      	ldr	r3, [pc, #432]	; (4454 <usart_init+0x254>)
    42a2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	7ada      	ldrb	r2, [r3, #11]
    42a8:	68fb      	ldr	r3, [r7, #12]
    42aa:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    42ac:	687b      	ldr	r3, [r7, #4]
    42ae:	2224      	movs	r2, #36	; 0x24
    42b0:	5c9a      	ldrb	r2, [r3, r2]
    42b2:	68fb      	ldr	r3, [r7, #12]
    42b4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    42b6:	687b      	ldr	r3, [r7, #4]
    42b8:	2225      	movs	r2, #37	; 0x25
    42ba:	5c9a      	ldrb	r2, [r3, r2]
    42bc:	68fb      	ldr	r3, [r7, #12]
    42be:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    42c0:	687b      	ldr	r3, [r7, #4]
    42c2:	7eda      	ldrb	r2, [r3, #27]
    42c4:	68fb      	ldr	r3, [r7, #12]
    42c6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    42c8:	687b      	ldr	r3, [r7, #4]
    42ca:	7f1a      	ldrb	r2, [r3, #28]
    42cc:	68fb      	ldr	r3, [r7, #12]
    42ce:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    42d0:	233b      	movs	r3, #59	; 0x3b
    42d2:	18fc      	adds	r4, r7, r3
    42d4:	687a      	ldr	r2, [r7, #4]
    42d6:	68fb      	ldr	r3, [r7, #12]
    42d8:	0011      	movs	r1, r2
    42da:	0018      	movs	r0, r3
    42dc:	4b5e      	ldr	r3, [pc, #376]	; (4458 <usart_init+0x258>)
    42de:	4798      	blx	r3
    42e0:	0003      	movs	r3, r0
    42e2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    42e4:	233b      	movs	r3, #59	; 0x3b
    42e6:	18fb      	adds	r3, r7, r3
    42e8:	781b      	ldrb	r3, [r3, #0]
    42ea:	2b00      	cmp	r3, #0
    42ec:	d003      	beq.n	42f6 <usart_init+0xf6>
		return status_code;
    42ee:	233b      	movs	r3, #59	; 0x3b
    42f0:	18fb      	adds	r3, r7, r3
    42f2:	781b      	ldrb	r3, [r3, #0]
    42f4:	e09f      	b.n	4436 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    42f6:	2320      	movs	r3, #32
    42f8:	18fb      	adds	r3, r7, r3
    42fa:	0018      	movs	r0, r3
    42fc:	4b57      	ldr	r3, [pc, #348]	; (445c <usart_init+0x25c>)
    42fe:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4300:	2320      	movs	r3, #32
    4302:	18fb      	adds	r3, r7, r3
    4304:	2200      	movs	r2, #0
    4306:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4308:	2320      	movs	r3, #32
    430a:	18fb      	adds	r3, r7, r3
    430c:	2200      	movs	r2, #0
    430e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    4314:	2310      	movs	r3, #16
    4316:	18fb      	adds	r3, r7, r3
    4318:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    431a:	687b      	ldr	r3, [r7, #4]
    431c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    431e:	2310      	movs	r3, #16
    4320:	18fb      	adds	r3, r7, r3
    4322:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    4324:	687b      	ldr	r3, [r7, #4]
    4326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    4328:	2310      	movs	r3, #16
    432a:	18fb      	adds	r3, r7, r3
    432c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    432e:	687b      	ldr	r3, [r7, #4]
    4330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    4332:	2310      	movs	r3, #16
    4334:	18fb      	adds	r3, r7, r3
    4336:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4338:	2347      	movs	r3, #71	; 0x47
    433a:	18fb      	adds	r3, r7, r3
    433c:	2200      	movs	r2, #0
    433e:	701a      	strb	r2, [r3, #0]
    4340:	e02c      	b.n	439c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4342:	2347      	movs	r3, #71	; 0x47
    4344:	18fb      	adds	r3, r7, r3
    4346:	781a      	ldrb	r2, [r3, #0]
    4348:	2310      	movs	r3, #16
    434a:	18fb      	adds	r3, r7, r3
    434c:	0092      	lsls	r2, r2, #2
    434e:	58d3      	ldr	r3, [r2, r3]
    4350:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4354:	2b00      	cmp	r3, #0
    4356:	d109      	bne.n	436c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4358:	2347      	movs	r3, #71	; 0x47
    435a:	18fb      	adds	r3, r7, r3
    435c:	781a      	ldrb	r2, [r3, #0]
    435e:	68bb      	ldr	r3, [r7, #8]
    4360:	0011      	movs	r1, r2
    4362:	0018      	movs	r0, r3
    4364:	4b3e      	ldr	r3, [pc, #248]	; (4460 <usart_init+0x260>)
    4366:	4798      	blx	r3
    4368:	0003      	movs	r3, r0
    436a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    436c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    436e:	3301      	adds	r3, #1
    4370:	d00d      	beq.n	438e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4374:	b2da      	uxtb	r2, r3
    4376:	2320      	movs	r3, #32
    4378:	18fb      	adds	r3, r7, r3
    437a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    437c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    437e:	0c1b      	lsrs	r3, r3, #16
    4380:	b2db      	uxtb	r3, r3
    4382:	2220      	movs	r2, #32
    4384:	18ba      	adds	r2, r7, r2
    4386:	0011      	movs	r1, r2
    4388:	0018      	movs	r0, r3
    438a:	4b36      	ldr	r3, [pc, #216]	; (4464 <usart_init+0x264>)
    438c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    438e:	2347      	movs	r3, #71	; 0x47
    4390:	18fb      	adds	r3, r7, r3
    4392:	781a      	ldrb	r2, [r3, #0]
    4394:	2347      	movs	r3, #71	; 0x47
    4396:	18fb      	adds	r3, r7, r3
    4398:	3201      	adds	r2, #1
    439a:	701a      	strb	r2, [r3, #0]
    439c:	2347      	movs	r3, #71	; 0x47
    439e:	18fb      	adds	r3, r7, r3
    43a0:	781b      	ldrb	r3, [r3, #0]
    43a2:	2b03      	cmp	r3, #3
    43a4:	d9cd      	bls.n	4342 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    43a6:	2300      	movs	r3, #0
    43a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    43aa:	e00a      	b.n	43c2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    43ac:	68fa      	ldr	r2, [r7, #12]
    43ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    43b0:	3302      	adds	r3, #2
    43b2:	009b      	lsls	r3, r3, #2
    43b4:	18d3      	adds	r3, r2, r3
    43b6:	3304      	adds	r3, #4
    43b8:	2200      	movs	r2, #0
    43ba:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    43bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    43be:	3301      	adds	r3, #1
    43c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    43c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    43c4:	2b05      	cmp	r3, #5
    43c6:	d9f1      	bls.n	43ac <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    43c8:	68fb      	ldr	r3, [r7, #12]
    43ca:	2200      	movs	r2, #0
    43cc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    43ce:	68fb      	ldr	r3, [r7, #12]
    43d0:	2200      	movs	r2, #0
    43d2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    43d4:	68fb      	ldr	r3, [r7, #12]
    43d6:	2200      	movs	r2, #0
    43d8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    43da:	68fb      	ldr	r3, [r7, #12]
    43dc:	2200      	movs	r2, #0
    43de:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    43e0:	68fb      	ldr	r3, [r7, #12]
    43e2:	2230      	movs	r2, #48	; 0x30
    43e4:	2100      	movs	r1, #0
    43e6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    43e8:	68fb      	ldr	r3, [r7, #12]
    43ea:	2231      	movs	r2, #49	; 0x31
    43ec:	2100      	movs	r1, #0
    43ee:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    43f0:	68fb      	ldr	r3, [r7, #12]
    43f2:	2232      	movs	r2, #50	; 0x32
    43f4:	2100      	movs	r1, #0
    43f6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    43f8:	68fb      	ldr	r3, [r7, #12]
    43fa:	2233      	movs	r2, #51	; 0x33
    43fc:	2100      	movs	r1, #0
    43fe:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4400:	68fb      	ldr	r3, [r7, #12]
    4402:	681b      	ldr	r3, [r3, #0]
    4404:	2227      	movs	r2, #39	; 0x27
    4406:	18bc      	adds	r4, r7, r2
    4408:	0018      	movs	r0, r3
    440a:	4b0d      	ldr	r3, [pc, #52]	; (4440 <usart_init+0x240>)
    440c:	4798      	blx	r3
    440e:	0003      	movs	r3, r0
    4410:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4412:	4a15      	ldr	r2, [pc, #84]	; (4468 <usart_init+0x268>)
    4414:	2327      	movs	r3, #39	; 0x27
    4416:	18fb      	adds	r3, r7, r3
    4418:	781b      	ldrb	r3, [r3, #0]
    441a:	0011      	movs	r1, r2
    441c:	0018      	movs	r0, r3
    441e:	4b13      	ldr	r3, [pc, #76]	; (446c <usart_init+0x26c>)
    4420:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4422:	2327      	movs	r3, #39	; 0x27
    4424:	18fb      	adds	r3, r7, r3
    4426:	781a      	ldrb	r2, [r3, #0]
    4428:	4b11      	ldr	r3, [pc, #68]	; (4470 <usart_init+0x270>)
    442a:	0092      	lsls	r2, r2, #2
    442c:	68f9      	ldr	r1, [r7, #12]
    442e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    4430:	233b      	movs	r3, #59	; 0x3b
    4432:	18fb      	adds	r3, r7, r3
    4434:	781b      	ldrb	r3, [r3, #0]
}
    4436:	0018      	movs	r0, r3
    4438:	46bd      	mov	sp, r7
    443a:	b013      	add	sp, #76	; 0x4c
    443c:	bd90      	pop	{r4, r7, pc}
    443e:	46c0      	nop			; (mov r8, r8)
    4440:	000008f9 	.word	0x000008f9
    4444:	00003e45 	.word	0x00003e45
    4448:	00003e2d 	.word	0x00003e2d
    444c:	000052e5 	.word	0x000052e5
    4450:	00005329 	.word	0x00005329
    4454:	000006b1 	.word	0x000006b1
    4458:	00003f2d 	.word	0x00003f2d
    445c:	00003ea1 	.word	0x00003ea1
    4460:	0000073d 	.word	0x0000073d
    4464:	00000ab9 	.word	0x00000ab9
    4468:	000046dd 	.word	0x000046dd
    446c:	00004a31 	.word	0x00004a31
    4470:	200038bc 	.word	0x200038bc

00004474 <system_interrupt_enter_critical_section>:
{
    4474:	b580      	push	{r7, lr}
    4476:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    4478:	4b02      	ldr	r3, [pc, #8]	; (4484 <system_interrupt_enter_critical_section+0x10>)
    447a:	4798      	blx	r3
}
    447c:	46c0      	nop			; (mov r8, r8)
    447e:	46bd      	mov	sp, r7
    4480:	bd80      	pop	{r7, pc}
    4482:	46c0      	nop			; (mov r8, r8)
    4484:	00000115 	.word	0x00000115

00004488 <system_interrupt_leave_critical_section>:
{
    4488:	b580      	push	{r7, lr}
    448a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    448c:	4b02      	ldr	r3, [pc, #8]	; (4498 <system_interrupt_leave_critical_section+0x10>)
    448e:	4798      	blx	r3
}
    4490:	46c0      	nop			; (mov r8, r8)
    4492:	46bd      	mov	sp, r7
    4494:	bd80      	pop	{r7, pc}
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	00000169 	.word	0x00000169

0000449c <usart_is_syncing>:
{
    449c:	b580      	push	{r7, lr}
    449e:	b084      	sub	sp, #16
    44a0:	af00      	add	r7, sp, #0
    44a2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    44a4:	687b      	ldr	r3, [r7, #4]
    44a6:	681b      	ldr	r3, [r3, #0]
    44a8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    44aa:	68fb      	ldr	r3, [r7, #12]
    44ac:	69db      	ldr	r3, [r3, #28]
    44ae:	1e5a      	subs	r2, r3, #1
    44b0:	4193      	sbcs	r3, r2
    44b2:	b2db      	uxtb	r3, r3
}
    44b4:	0018      	movs	r0, r3
    44b6:	46bd      	mov	sp, r7
    44b8:	b004      	add	sp, #16
    44ba:	bd80      	pop	{r7, pc}

000044bc <_usart_wait_for_sync>:
{
    44bc:	b580      	push	{r7, lr}
    44be:	b082      	sub	sp, #8
    44c0:	af00      	add	r7, sp, #0
    44c2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    44c4:	46c0      	nop			; (mov r8, r8)
    44c6:	687b      	ldr	r3, [r7, #4]
    44c8:	0018      	movs	r0, r3
    44ca:	4b04      	ldr	r3, [pc, #16]	; (44dc <_usart_wait_for_sync+0x20>)
    44cc:	4798      	blx	r3
    44ce:	1e03      	subs	r3, r0, #0
    44d0:	d1f9      	bne.n	44c6 <_usart_wait_for_sync+0xa>
}
    44d2:	46c0      	nop			; (mov r8, r8)
    44d4:	46bd      	mov	sp, r7
    44d6:	b002      	add	sp, #8
    44d8:	bd80      	pop	{r7, pc}
    44da:	46c0      	nop			; (mov r8, r8)
    44dc:	0000449d 	.word	0x0000449d

000044e0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    44e0:	b580      	push	{r7, lr}
    44e2:	b086      	sub	sp, #24
    44e4:	af00      	add	r7, sp, #0
    44e6:	60f8      	str	r0, [r7, #12]
    44e8:	60b9      	str	r1, [r7, #8]
    44ea:	1dbb      	adds	r3, r7, #6
    44ec:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    44ee:	68fb      	ldr	r3, [r7, #12]
    44f0:	681b      	ldr	r3, [r3, #0]
    44f2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    44f4:	4b0f      	ldr	r3, [pc, #60]	; (4534 <_usart_write_buffer+0x54>)
    44f6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    44f8:	68fb      	ldr	r3, [r7, #12]
    44fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    44fc:	b29b      	uxth	r3, r3
    44fe:	2b00      	cmp	r3, #0
    4500:	d003      	beq.n	450a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    4502:	4b0d      	ldr	r3, [pc, #52]	; (4538 <_usart_write_buffer+0x58>)
    4504:	4798      	blx	r3
		return STATUS_BUSY;
    4506:	2305      	movs	r3, #5
    4508:	e010      	b.n	452c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    450a:	68fb      	ldr	r3, [r7, #12]
    450c:	1dba      	adds	r2, r7, #6
    450e:	8812      	ldrh	r2, [r2, #0]
    4510:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    4512:	4b09      	ldr	r3, [pc, #36]	; (4538 <_usart_write_buffer+0x58>)
    4514:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    4516:	68fb      	ldr	r3, [r7, #12]
    4518:	68ba      	ldr	r2, [r7, #8]
    451a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    451c:	68fb      	ldr	r3, [r7, #12]
    451e:	2233      	movs	r2, #51	; 0x33
    4520:	2105      	movs	r1, #5
    4522:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    4524:	697b      	ldr	r3, [r7, #20]
    4526:	2201      	movs	r2, #1
    4528:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    452a:	2300      	movs	r3, #0
}
    452c:	0018      	movs	r0, r3
    452e:	46bd      	mov	sp, r7
    4530:	b006      	add	sp, #24
    4532:	bd80      	pop	{r7, pc}
    4534:	00004475 	.word	0x00004475
    4538:	00004489 	.word	0x00004489

0000453c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    453c:	b580      	push	{r7, lr}
    453e:	b086      	sub	sp, #24
    4540:	af00      	add	r7, sp, #0
    4542:	60f8      	str	r0, [r7, #12]
    4544:	60b9      	str	r1, [r7, #8]
    4546:	1dbb      	adds	r3, r7, #6
    4548:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    454a:	68fb      	ldr	r3, [r7, #12]
    454c:	681b      	ldr	r3, [r3, #0]
    454e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    4550:	4b16      	ldr	r3, [pc, #88]	; (45ac <_usart_read_buffer+0x70>)
    4552:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    4554:	68fb      	ldr	r3, [r7, #12]
    4556:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    4558:	b29b      	uxth	r3, r3
    455a:	2b00      	cmp	r3, #0
    455c:	d003      	beq.n	4566 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    455e:	4b14      	ldr	r3, [pc, #80]	; (45b0 <_usart_read_buffer+0x74>)
    4560:	4798      	blx	r3
		return STATUS_BUSY;
    4562:	2305      	movs	r3, #5
    4564:	e01e      	b.n	45a4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    4566:	68fb      	ldr	r3, [r7, #12]
    4568:	1dba      	adds	r2, r7, #6
    456a:	8812      	ldrh	r2, [r2, #0]
    456c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    456e:	4b10      	ldr	r3, [pc, #64]	; (45b0 <_usart_read_buffer+0x74>)
    4570:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    4572:	68fb      	ldr	r3, [r7, #12]
    4574:	68ba      	ldr	r2, [r7, #8]
    4576:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    4578:	68fb      	ldr	r3, [r7, #12]
    457a:	2232      	movs	r2, #50	; 0x32
    457c:	2105      	movs	r1, #5
    457e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    4580:	697b      	ldr	r3, [r7, #20]
    4582:	2204      	movs	r2, #4
    4584:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    4586:	68fb      	ldr	r3, [r7, #12]
    4588:	7a1b      	ldrb	r3, [r3, #8]
    458a:	2b00      	cmp	r3, #0
    458c:	d002      	beq.n	4594 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    458e:	697b      	ldr	r3, [r7, #20]
    4590:	2220      	movs	r2, #32
    4592:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    4594:	68fb      	ldr	r3, [r7, #12]
    4596:	7a5b      	ldrb	r3, [r3, #9]
    4598:	2b00      	cmp	r3, #0
    459a:	d002      	beq.n	45a2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    459c:	697b      	ldr	r3, [r7, #20]
    459e:	2208      	movs	r2, #8
    45a0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    45a2:	2300      	movs	r3, #0
}
    45a4:	0018      	movs	r0, r3
    45a6:	46bd      	mov	sp, r7
    45a8:	b006      	add	sp, #24
    45aa:	bd80      	pop	{r7, pc}
    45ac:	00004475 	.word	0x00004475
    45b0:	00004489 	.word	0x00004489

000045b4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    45b4:	b580      	push	{r7, lr}
    45b6:	b084      	sub	sp, #16
    45b8:	af00      	add	r7, sp, #0
    45ba:	60f8      	str	r0, [r7, #12]
    45bc:	60b9      	str	r1, [r7, #8]
    45be:	1dfb      	adds	r3, r7, #7
    45c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    45c2:	1dfb      	adds	r3, r7, #7
    45c4:	781b      	ldrb	r3, [r3, #0]
    45c6:	68fa      	ldr	r2, [r7, #12]
    45c8:	3302      	adds	r3, #2
    45ca:	009b      	lsls	r3, r3, #2
    45cc:	18d3      	adds	r3, r2, r3
    45ce:	3304      	adds	r3, #4
    45d0:	68ba      	ldr	r2, [r7, #8]
    45d2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    45d4:	68fb      	ldr	r3, [r7, #12]
    45d6:	2230      	movs	r2, #48	; 0x30
    45d8:	5c9b      	ldrb	r3, [r3, r2]
    45da:	b25a      	sxtb	r2, r3
    45dc:	1dfb      	adds	r3, r7, #7
    45de:	781b      	ldrb	r3, [r3, #0]
    45e0:	2101      	movs	r1, #1
    45e2:	4099      	lsls	r1, r3
    45e4:	000b      	movs	r3, r1
    45e6:	b25b      	sxtb	r3, r3
    45e8:	4313      	orrs	r3, r2
    45ea:	b25b      	sxtb	r3, r3
    45ec:	b2d9      	uxtb	r1, r3
    45ee:	68fb      	ldr	r3, [r7, #12]
    45f0:	2230      	movs	r2, #48	; 0x30
    45f2:	5499      	strb	r1, [r3, r2]
}
    45f4:	46c0      	nop			; (mov r8, r8)
    45f6:	46bd      	mov	sp, r7
    45f8:	b004      	add	sp, #16
    45fa:	bd80      	pop	{r7, pc}

000045fc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    45fc:	b580      	push	{r7, lr}
    45fe:	b084      	sub	sp, #16
    4600:	af00      	add	r7, sp, #0
    4602:	60f8      	str	r0, [r7, #12]
    4604:	60b9      	str	r1, [r7, #8]
    4606:	1dbb      	adds	r3, r7, #6
    4608:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    460a:	1dbb      	adds	r3, r7, #6
    460c:	881b      	ldrh	r3, [r3, #0]
    460e:	2b00      	cmp	r3, #0
    4610:	d101      	bne.n	4616 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    4612:	2317      	movs	r3, #23
    4614:	e010      	b.n	4638 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4616:	68fb      	ldr	r3, [r7, #12]
    4618:	79db      	ldrb	r3, [r3, #7]
    461a:	2201      	movs	r2, #1
    461c:	4053      	eors	r3, r2
    461e:	b2db      	uxtb	r3, r3
    4620:	2b00      	cmp	r3, #0
    4622:	d001      	beq.n	4628 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    4624:	231c      	movs	r3, #28
    4626:	e007      	b.n	4638 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    4628:	1dbb      	adds	r3, r7, #6
    462a:	881a      	ldrh	r2, [r3, #0]
    462c:	68b9      	ldr	r1, [r7, #8]
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	0018      	movs	r0, r3
    4632:	4b03      	ldr	r3, [pc, #12]	; (4640 <usart_write_buffer_job+0x44>)
    4634:	4798      	blx	r3
    4636:	0003      	movs	r3, r0
}
    4638:	0018      	movs	r0, r3
    463a:	46bd      	mov	sp, r7
    463c:	b004      	add	sp, #16
    463e:	bd80      	pop	{r7, pc}
    4640:	000044e1 	.word	0x000044e1

00004644 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4644:	b580      	push	{r7, lr}
    4646:	b084      	sub	sp, #16
    4648:	af00      	add	r7, sp, #0
    464a:	60f8      	str	r0, [r7, #12]
    464c:	60b9      	str	r1, [r7, #8]
    464e:	1dbb      	adds	r3, r7, #6
    4650:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    4652:	1dbb      	adds	r3, r7, #6
    4654:	881b      	ldrh	r3, [r3, #0]
    4656:	2b00      	cmp	r3, #0
    4658:	d101      	bne.n	465e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    465a:	2317      	movs	r3, #23
    465c:	e010      	b.n	4680 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    465e:	68fb      	ldr	r3, [r7, #12]
    4660:	799b      	ldrb	r3, [r3, #6]
    4662:	2201      	movs	r2, #1
    4664:	4053      	eors	r3, r2
    4666:	b2db      	uxtb	r3, r3
    4668:	2b00      	cmp	r3, #0
    466a:	d001      	beq.n	4670 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    466c:	231c      	movs	r3, #28
    466e:	e007      	b.n	4680 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    4670:	1dbb      	adds	r3, r7, #6
    4672:	881a      	ldrh	r2, [r3, #0]
    4674:	68b9      	ldr	r1, [r7, #8]
    4676:	68fb      	ldr	r3, [r7, #12]
    4678:	0018      	movs	r0, r3
    467a:	4b03      	ldr	r3, [pc, #12]	; (4688 <usart_read_buffer_job+0x44>)
    467c:	4798      	blx	r3
    467e:	0003      	movs	r3, r0
}
    4680:	0018      	movs	r0, r3
    4682:	46bd      	mov	sp, r7
    4684:	b004      	add	sp, #16
    4686:	bd80      	pop	{r7, pc}
    4688:	0000453d 	.word	0x0000453d

0000468c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    468c:	b580      	push	{r7, lr}
    468e:	b084      	sub	sp, #16
    4690:	af00      	add	r7, sp, #0
    4692:	6078      	str	r0, [r7, #4]
    4694:	000a      	movs	r2, r1
    4696:	1cfb      	adds	r3, r7, #3
    4698:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    469a:	1cfb      	adds	r3, r7, #3
    469c:	781b      	ldrb	r3, [r3, #0]
    469e:	2b00      	cmp	r3, #0
    46a0:	d002      	beq.n	46a8 <usart_get_job_status+0x1c>
    46a2:	2b01      	cmp	r3, #1
    46a4:	d007      	beq.n	46b6 <usart_get_job_status+0x2a>
    46a6:	e00d      	b.n	46c4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    46a8:	230f      	movs	r3, #15
    46aa:	18fb      	adds	r3, r7, r3
    46ac:	687a      	ldr	r2, [r7, #4]
    46ae:	2132      	movs	r1, #50	; 0x32
    46b0:	5c52      	ldrb	r2, [r2, r1]
    46b2:	701a      	strb	r2, [r3, #0]
			break;
    46b4:	e00b      	b.n	46ce <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    46b6:	230f      	movs	r3, #15
    46b8:	18fb      	adds	r3, r7, r3
    46ba:	687a      	ldr	r2, [r7, #4]
    46bc:	2133      	movs	r1, #51	; 0x33
    46be:	5c52      	ldrb	r2, [r2, r1]
    46c0:	701a      	strb	r2, [r3, #0]
			break;
    46c2:	e004      	b.n	46ce <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    46c4:	230f      	movs	r3, #15
    46c6:	18fb      	adds	r3, r7, r3
    46c8:	2217      	movs	r2, #23
    46ca:	701a      	strb	r2, [r3, #0]
			break;
    46cc:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    46ce:	230f      	movs	r3, #15
    46d0:	18fb      	adds	r3, r7, r3
    46d2:	781b      	ldrb	r3, [r3, #0]
}
    46d4:	0018      	movs	r0, r3
    46d6:	46bd      	mov	sp, r7
    46d8:	b004      	add	sp, #16
    46da:	bd80      	pop	{r7, pc}

000046dc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    46dc:	b580      	push	{r7, lr}
    46de:	b088      	sub	sp, #32
    46e0:	af00      	add	r7, sp, #0
    46e2:	0002      	movs	r2, r0
    46e4:	1dfb      	adds	r3, r7, #7
    46e6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    46e8:	1dfb      	adds	r3, r7, #7
    46ea:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    46ec:	4ba3      	ldr	r3, [pc, #652]	; (497c <_usart_interrupt_handler+0x2a0>)
    46ee:	0092      	lsls	r2, r2, #2
    46f0:	58d3      	ldr	r3, [r2, r3]
    46f2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    46f4:	69bb      	ldr	r3, [r7, #24]
    46f6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    46f8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    46fa:	69bb      	ldr	r3, [r7, #24]
    46fc:	0018      	movs	r0, r3
    46fe:	4ba0      	ldr	r3, [pc, #640]	; (4980 <_usart_interrupt_handler+0x2a4>)
    4700:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4702:	697b      	ldr	r3, [r7, #20]
    4704:	7e1b      	ldrb	r3, [r3, #24]
    4706:	b2da      	uxtb	r2, r3
    4708:	2312      	movs	r3, #18
    470a:	18fb      	adds	r3, r7, r3
    470c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    470e:	697b      	ldr	r3, [r7, #20]
    4710:	7d9b      	ldrb	r3, [r3, #22]
    4712:	b2db      	uxtb	r3, r3
    4714:	b29a      	uxth	r2, r3
    4716:	2312      	movs	r3, #18
    4718:	18fb      	adds	r3, r7, r3
    471a:	2112      	movs	r1, #18
    471c:	1879      	adds	r1, r7, r1
    471e:	8809      	ldrh	r1, [r1, #0]
    4720:	400a      	ands	r2, r1
    4722:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    4724:	69bb      	ldr	r3, [r7, #24]
    4726:	2230      	movs	r2, #48	; 0x30
    4728:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    472a:	69ba      	ldr	r2, [r7, #24]
    472c:	2131      	movs	r1, #49	; 0x31
    472e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    4730:	4013      	ands	r3, r2
    4732:	b2da      	uxtb	r2, r3
    4734:	2310      	movs	r3, #16
    4736:	18fb      	adds	r3, r7, r3
    4738:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    473a:	2312      	movs	r3, #18
    473c:	18fb      	adds	r3, r7, r3
    473e:	881b      	ldrh	r3, [r3, #0]
    4740:	2201      	movs	r2, #1
    4742:	4013      	ands	r3, r2
    4744:	d044      	beq.n	47d0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    4746:	69bb      	ldr	r3, [r7, #24]
    4748:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    474a:	b29b      	uxth	r3, r3
    474c:	2b00      	cmp	r3, #0
    474e:	d03c      	beq.n	47ca <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4750:	69bb      	ldr	r3, [r7, #24]
    4752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4754:	781b      	ldrb	r3, [r3, #0]
    4756:	b2da      	uxtb	r2, r3
    4758:	231c      	movs	r3, #28
    475a:	18fb      	adds	r3, r7, r3
    475c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    475e:	69bb      	ldr	r3, [r7, #24]
    4760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4762:	1c5a      	adds	r2, r3, #1
    4764:	69bb      	ldr	r3, [r7, #24]
    4766:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4768:	69bb      	ldr	r3, [r7, #24]
    476a:	795b      	ldrb	r3, [r3, #5]
    476c:	2b01      	cmp	r3, #1
    476e:	d113      	bne.n	4798 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4770:	69bb      	ldr	r3, [r7, #24]
    4772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4774:	781b      	ldrb	r3, [r3, #0]
    4776:	b2db      	uxtb	r3, r3
    4778:	021b      	lsls	r3, r3, #8
    477a:	b21a      	sxth	r2, r3
    477c:	231c      	movs	r3, #28
    477e:	18fb      	adds	r3, r7, r3
    4780:	2100      	movs	r1, #0
    4782:	5e5b      	ldrsh	r3, [r3, r1]
    4784:	4313      	orrs	r3, r2
    4786:	b21a      	sxth	r2, r3
    4788:	231c      	movs	r3, #28
    478a:	18fb      	adds	r3, r7, r3
    478c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    478e:	69bb      	ldr	r3, [r7, #24]
    4790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4792:	1c5a      	adds	r2, r3, #1
    4794:	69bb      	ldr	r3, [r7, #24]
    4796:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4798:	231c      	movs	r3, #28
    479a:	18fb      	adds	r3, r7, r3
    479c:	881b      	ldrh	r3, [r3, #0]
    479e:	05db      	lsls	r3, r3, #23
    47a0:	0ddb      	lsrs	r3, r3, #23
    47a2:	b29a      	uxth	r2, r3
    47a4:	697b      	ldr	r3, [r7, #20]
    47a6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    47a8:	69bb      	ldr	r3, [r7, #24]
    47aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    47ac:	b29b      	uxth	r3, r3
    47ae:	3b01      	subs	r3, #1
    47b0:	b29b      	uxth	r3, r3
    47b2:	69ba      	ldr	r2, [r7, #24]
    47b4:	1c19      	adds	r1, r3, #0
    47b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
    47b8:	2b00      	cmp	r3, #0
    47ba:	d109      	bne.n	47d0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    47bc:	697b      	ldr	r3, [r7, #20]
    47be:	2201      	movs	r2, #1
    47c0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    47c2:	697b      	ldr	r3, [r7, #20]
    47c4:	2202      	movs	r2, #2
    47c6:	759a      	strb	r2, [r3, #22]
    47c8:	e002      	b.n	47d0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    47ca:	697b      	ldr	r3, [r7, #20]
    47cc:	2201      	movs	r2, #1
    47ce:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    47d0:	2312      	movs	r3, #18
    47d2:	18fb      	adds	r3, r7, r3
    47d4:	881b      	ldrh	r3, [r3, #0]
    47d6:	2202      	movs	r2, #2
    47d8:	4013      	ands	r3, r2
    47da:	d011      	beq.n	4800 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    47dc:	697b      	ldr	r3, [r7, #20]
    47de:	2202      	movs	r2, #2
    47e0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    47e2:	69bb      	ldr	r3, [r7, #24]
    47e4:	2233      	movs	r2, #51	; 0x33
    47e6:	2100      	movs	r1, #0
    47e8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    47ea:	2310      	movs	r3, #16
    47ec:	18fb      	adds	r3, r7, r3
    47ee:	881b      	ldrh	r3, [r3, #0]
    47f0:	2201      	movs	r2, #1
    47f2:	4013      	ands	r3, r2
    47f4:	d004      	beq.n	4800 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    47f6:	69bb      	ldr	r3, [r7, #24]
    47f8:	68db      	ldr	r3, [r3, #12]
    47fa:	69ba      	ldr	r2, [r7, #24]
    47fc:	0010      	movs	r0, r2
    47fe:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4800:	2312      	movs	r3, #18
    4802:	18fb      	adds	r3, r7, r3
    4804:	881b      	ldrh	r3, [r3, #0]
    4806:	2204      	movs	r2, #4
    4808:	4013      	ands	r3, r2
    480a:	d100      	bne.n	480e <_usart_interrupt_handler+0x132>
    480c:	e0bd      	b.n	498a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    480e:	69bb      	ldr	r3, [r7, #24]
    4810:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    4812:	b29b      	uxth	r3, r3
    4814:	2b00      	cmp	r3, #0
    4816:	d100      	bne.n	481a <_usart_interrupt_handler+0x13e>
    4818:	e0b4      	b.n	4984 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    481a:	697b      	ldr	r3, [r7, #20]
    481c:	8b5b      	ldrh	r3, [r3, #26]
    481e:	b29b      	uxth	r3, r3
    4820:	b2da      	uxtb	r2, r3
    4822:	231f      	movs	r3, #31
    4824:	18fb      	adds	r3, r7, r3
    4826:	213f      	movs	r1, #63	; 0x3f
    4828:	400a      	ands	r2, r1
    482a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    482c:	231f      	movs	r3, #31
    482e:	18fb      	adds	r3, r7, r3
    4830:	781b      	ldrb	r3, [r3, #0]
    4832:	2208      	movs	r2, #8
    4834:	4013      	ands	r3, r2
    4836:	d007      	beq.n	4848 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4838:	231f      	movs	r3, #31
    483a:	18fb      	adds	r3, r7, r3
    483c:	221f      	movs	r2, #31
    483e:	18ba      	adds	r2, r7, r2
    4840:	7812      	ldrb	r2, [r2, #0]
    4842:	2108      	movs	r1, #8
    4844:	438a      	bics	r2, r1
    4846:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4848:	231f      	movs	r3, #31
    484a:	18fb      	adds	r3, r7, r3
    484c:	781b      	ldrb	r3, [r3, #0]
    484e:	2b00      	cmp	r3, #0
    4850:	d050      	beq.n	48f4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4852:	231f      	movs	r3, #31
    4854:	18fb      	adds	r3, r7, r3
    4856:	781b      	ldrb	r3, [r3, #0]
    4858:	2202      	movs	r2, #2
    485a:	4013      	ands	r3, r2
    485c:	d007      	beq.n	486e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    485e:	69bb      	ldr	r3, [r7, #24]
    4860:	2232      	movs	r2, #50	; 0x32
    4862:	211a      	movs	r1, #26
    4864:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4866:	697b      	ldr	r3, [r7, #20]
    4868:	2202      	movs	r2, #2
    486a:	835a      	strh	r2, [r3, #26]
    486c:	e036      	b.n	48dc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    486e:	231f      	movs	r3, #31
    4870:	18fb      	adds	r3, r7, r3
    4872:	781b      	ldrb	r3, [r3, #0]
    4874:	2204      	movs	r2, #4
    4876:	4013      	ands	r3, r2
    4878:	d007      	beq.n	488a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    487a:	69bb      	ldr	r3, [r7, #24]
    487c:	2232      	movs	r2, #50	; 0x32
    487e:	211e      	movs	r1, #30
    4880:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4882:	697b      	ldr	r3, [r7, #20]
    4884:	2204      	movs	r2, #4
    4886:	835a      	strh	r2, [r3, #26]
    4888:	e028      	b.n	48dc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    488a:	231f      	movs	r3, #31
    488c:	18fb      	adds	r3, r7, r3
    488e:	781b      	ldrb	r3, [r3, #0]
    4890:	2201      	movs	r2, #1
    4892:	4013      	ands	r3, r2
    4894:	d007      	beq.n	48a6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    4896:	69bb      	ldr	r3, [r7, #24]
    4898:	2232      	movs	r2, #50	; 0x32
    489a:	2113      	movs	r1, #19
    489c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    489e:	697b      	ldr	r3, [r7, #20]
    48a0:	2201      	movs	r2, #1
    48a2:	835a      	strh	r2, [r3, #26]
    48a4:	e01a      	b.n	48dc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    48a6:	231f      	movs	r3, #31
    48a8:	18fb      	adds	r3, r7, r3
    48aa:	781b      	ldrb	r3, [r3, #0]
    48ac:	2210      	movs	r2, #16
    48ae:	4013      	ands	r3, r2
    48b0:	d007      	beq.n	48c2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    48b2:	69bb      	ldr	r3, [r7, #24]
    48b4:	2232      	movs	r2, #50	; 0x32
    48b6:	2142      	movs	r1, #66	; 0x42
    48b8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    48ba:	697b      	ldr	r3, [r7, #20]
    48bc:	2210      	movs	r2, #16
    48be:	835a      	strh	r2, [r3, #26]
    48c0:	e00c      	b.n	48dc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    48c2:	231f      	movs	r3, #31
    48c4:	18fb      	adds	r3, r7, r3
    48c6:	781b      	ldrb	r3, [r3, #0]
    48c8:	2220      	movs	r2, #32
    48ca:	4013      	ands	r3, r2
    48cc:	d006      	beq.n	48dc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    48ce:	69bb      	ldr	r3, [r7, #24]
    48d0:	2232      	movs	r2, #50	; 0x32
    48d2:	2141      	movs	r1, #65	; 0x41
    48d4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    48d6:	697b      	ldr	r3, [r7, #20]
    48d8:	2220      	movs	r2, #32
    48da:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    48dc:	2310      	movs	r3, #16
    48de:	18fb      	adds	r3, r7, r3
    48e0:	881b      	ldrh	r3, [r3, #0]
    48e2:	2204      	movs	r2, #4
    48e4:	4013      	ands	r3, r2
				if (callback_status
    48e6:	d050      	beq.n	498a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    48e8:	69bb      	ldr	r3, [r7, #24]
    48ea:	695b      	ldr	r3, [r3, #20]
    48ec:	69ba      	ldr	r2, [r7, #24]
    48ee:	0010      	movs	r0, r2
    48f0:	4798      	blx	r3
    48f2:	e04a      	b.n	498a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    48f4:	697b      	ldr	r3, [r7, #20]
    48f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    48f8:	b29a      	uxth	r2, r3
    48fa:	230e      	movs	r3, #14
    48fc:	18fb      	adds	r3, r7, r3
    48fe:	05d2      	lsls	r2, r2, #23
    4900:	0dd2      	lsrs	r2, r2, #23
    4902:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4904:	69bb      	ldr	r3, [r7, #24]
    4906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4908:	220e      	movs	r2, #14
    490a:	18ba      	adds	r2, r7, r2
    490c:	8812      	ldrh	r2, [r2, #0]
    490e:	b2d2      	uxtb	r2, r2
    4910:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4912:	69bb      	ldr	r3, [r7, #24]
    4914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4916:	1c5a      	adds	r2, r3, #1
    4918:	69bb      	ldr	r3, [r7, #24]
    491a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    491c:	69bb      	ldr	r3, [r7, #24]
    491e:	795b      	ldrb	r3, [r3, #5]
    4920:	2b01      	cmp	r3, #1
    4922:	d10d      	bne.n	4940 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4924:	69bb      	ldr	r3, [r7, #24]
    4926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4928:	220e      	movs	r2, #14
    492a:	18ba      	adds	r2, r7, r2
    492c:	8812      	ldrh	r2, [r2, #0]
    492e:	0a12      	lsrs	r2, r2, #8
    4930:	b292      	uxth	r2, r2
    4932:	b2d2      	uxtb	r2, r2
    4934:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    4936:	69bb      	ldr	r3, [r7, #24]
    4938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    493a:	1c5a      	adds	r2, r3, #1
    493c:	69bb      	ldr	r3, [r7, #24]
    493e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4940:	69bb      	ldr	r3, [r7, #24]
    4942:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    4944:	b29b      	uxth	r3, r3
    4946:	3b01      	subs	r3, #1
    4948:	b29b      	uxth	r3, r3
    494a:	69ba      	ldr	r2, [r7, #24]
    494c:	1c19      	adds	r1, r3, #0
    494e:	8591      	strh	r1, [r2, #44]	; 0x2c
    4950:	2b00      	cmp	r3, #0
    4952:	d11a      	bne.n	498a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4954:	697b      	ldr	r3, [r7, #20]
    4956:	2204      	movs	r2, #4
    4958:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    495a:	69bb      	ldr	r3, [r7, #24]
    495c:	2232      	movs	r2, #50	; 0x32
    495e:	2100      	movs	r1, #0
    4960:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    4962:	2310      	movs	r3, #16
    4964:	18fb      	adds	r3, r7, r3
    4966:	881b      	ldrh	r3, [r3, #0]
    4968:	2202      	movs	r2, #2
    496a:	4013      	ands	r3, r2
					if (callback_status
    496c:	d00d      	beq.n	498a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    496e:	69bb      	ldr	r3, [r7, #24]
    4970:	691b      	ldr	r3, [r3, #16]
    4972:	69ba      	ldr	r2, [r7, #24]
    4974:	0010      	movs	r0, r2
    4976:	4798      	blx	r3
    4978:	e007      	b.n	498a <_usart_interrupt_handler+0x2ae>
    497a:	46c0      	nop			; (mov r8, r8)
    497c:	200038bc 	.word	0x200038bc
    4980:	000044bd 	.word	0x000044bd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4984:	697b      	ldr	r3, [r7, #20]
    4986:	2204      	movs	r2, #4
    4988:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    498a:	2312      	movs	r3, #18
    498c:	18fb      	adds	r3, r7, r3
    498e:	881b      	ldrh	r3, [r3, #0]
    4990:	2210      	movs	r2, #16
    4992:	4013      	ands	r3, r2
    4994:	d010      	beq.n	49b8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4996:	697b      	ldr	r3, [r7, #20]
    4998:	2210      	movs	r2, #16
    499a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    499c:	697b      	ldr	r3, [r7, #20]
    499e:	2210      	movs	r2, #16
    49a0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    49a2:	2310      	movs	r3, #16
    49a4:	18fb      	adds	r3, r7, r3
    49a6:	881b      	ldrh	r3, [r3, #0]
    49a8:	2210      	movs	r2, #16
    49aa:	4013      	ands	r3, r2
    49ac:	d004      	beq.n	49b8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    49ae:	69bb      	ldr	r3, [r7, #24]
    49b0:	69db      	ldr	r3, [r3, #28]
    49b2:	69ba      	ldr	r2, [r7, #24]
    49b4:	0010      	movs	r0, r2
    49b6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    49b8:	2312      	movs	r3, #18
    49ba:	18fb      	adds	r3, r7, r3
    49bc:	881b      	ldrh	r3, [r3, #0]
    49be:	2220      	movs	r2, #32
    49c0:	4013      	ands	r3, r2
    49c2:	d010      	beq.n	49e6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    49c4:	697b      	ldr	r3, [r7, #20]
    49c6:	2220      	movs	r2, #32
    49c8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    49ca:	697b      	ldr	r3, [r7, #20]
    49cc:	2220      	movs	r2, #32
    49ce:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    49d0:	2310      	movs	r3, #16
    49d2:	18fb      	adds	r3, r7, r3
    49d4:	881b      	ldrh	r3, [r3, #0]
    49d6:	2208      	movs	r2, #8
    49d8:	4013      	ands	r3, r2
    49da:	d004      	beq.n	49e6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    49dc:	69bb      	ldr	r3, [r7, #24]
    49de:	699b      	ldr	r3, [r3, #24]
    49e0:	69ba      	ldr	r2, [r7, #24]
    49e2:	0010      	movs	r0, r2
    49e4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    49e6:	2312      	movs	r3, #18
    49e8:	18fb      	adds	r3, r7, r3
    49ea:	881b      	ldrh	r3, [r3, #0]
    49ec:	2208      	movs	r2, #8
    49ee:	4013      	ands	r3, r2
    49f0:	d010      	beq.n	4a14 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    49f2:	697b      	ldr	r3, [r7, #20]
    49f4:	2208      	movs	r2, #8
    49f6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    49f8:	697b      	ldr	r3, [r7, #20]
    49fa:	2208      	movs	r2, #8
    49fc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    49fe:	2310      	movs	r3, #16
    4a00:	18fb      	adds	r3, r7, r3
    4a02:	881b      	ldrh	r3, [r3, #0]
    4a04:	2220      	movs	r2, #32
    4a06:	4013      	ands	r3, r2
    4a08:	d004      	beq.n	4a14 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4a0a:	69bb      	ldr	r3, [r7, #24]
    4a0c:	6a1b      	ldr	r3, [r3, #32]
    4a0e:	69ba      	ldr	r2, [r7, #24]
    4a10:	0010      	movs	r0, r2
    4a12:	4798      	blx	r3
		}
	}
#endif
}
    4a14:	46c0      	nop			; (mov r8, r8)
    4a16:	46bd      	mov	sp, r7
    4a18:	b008      	add	sp, #32
    4a1a:	bd80      	pop	{r7, pc}

00004a1c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    4a1c:	b580      	push	{r7, lr}
    4a1e:	b082      	sub	sp, #8
    4a20:	af00      	add	r7, sp, #0
    4a22:	0002      	movs	r2, r0
    4a24:	1dfb      	adds	r3, r7, #7
    4a26:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    4a28:	46c0      	nop			; (mov r8, r8)
    4a2a:	46bd      	mov	sp, r7
    4a2c:	b002      	add	sp, #8
    4a2e:	bd80      	pop	{r7, pc}

00004a30 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4a30:	b580      	push	{r7, lr}
    4a32:	b084      	sub	sp, #16
    4a34:	af00      	add	r7, sp, #0
    4a36:	0002      	movs	r2, r0
    4a38:	6039      	str	r1, [r7, #0]
    4a3a:	1dfb      	adds	r3, r7, #7
    4a3c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4a3e:	4b13      	ldr	r3, [pc, #76]	; (4a8c <_sercom_set_handler+0x5c>)
    4a40:	781b      	ldrb	r3, [r3, #0]
    4a42:	2201      	movs	r2, #1
    4a44:	4053      	eors	r3, r2
    4a46:	b2db      	uxtb	r3, r3
    4a48:	2b00      	cmp	r3, #0
    4a4a:	d015      	beq.n	4a78 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4a4c:	2300      	movs	r3, #0
    4a4e:	60fb      	str	r3, [r7, #12]
    4a50:	e00c      	b.n	4a6c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4a52:	4b0f      	ldr	r3, [pc, #60]	; (4a90 <_sercom_set_handler+0x60>)
    4a54:	68fa      	ldr	r2, [r7, #12]
    4a56:	0092      	lsls	r2, r2, #2
    4a58:	490e      	ldr	r1, [pc, #56]	; (4a94 <_sercom_set_handler+0x64>)
    4a5a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    4a5c:	4b0e      	ldr	r3, [pc, #56]	; (4a98 <_sercom_set_handler+0x68>)
    4a5e:	68fa      	ldr	r2, [r7, #12]
    4a60:	0092      	lsls	r2, r2, #2
    4a62:	2100      	movs	r1, #0
    4a64:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4a66:	68fb      	ldr	r3, [r7, #12]
    4a68:	3301      	adds	r3, #1
    4a6a:	60fb      	str	r3, [r7, #12]
    4a6c:	68fb      	ldr	r3, [r7, #12]
    4a6e:	2b05      	cmp	r3, #5
    4a70:	d9ef      	bls.n	4a52 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    4a72:	4b06      	ldr	r3, [pc, #24]	; (4a8c <_sercom_set_handler+0x5c>)
    4a74:	2201      	movs	r2, #1
    4a76:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4a78:	1dfb      	adds	r3, r7, #7
    4a7a:	781a      	ldrb	r2, [r3, #0]
    4a7c:	4b04      	ldr	r3, [pc, #16]	; (4a90 <_sercom_set_handler+0x60>)
    4a7e:	0092      	lsls	r2, r2, #2
    4a80:	6839      	ldr	r1, [r7, #0]
    4a82:	50d1      	str	r1, [r2, r3]
}
    4a84:	46c0      	nop			; (mov r8, r8)
    4a86:	46bd      	mov	sp, r7
    4a88:	b004      	add	sp, #16
    4a8a:	bd80      	pop	{r7, pc}
    4a8c:	200033a4 	.word	0x200033a4
    4a90:	200033a8 	.word	0x200033a8
    4a94:	00004a1d 	.word	0x00004a1d
    4a98:	200038bc 	.word	0x200038bc

00004a9c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4a9c:	b590      	push	{r4, r7, lr}
    4a9e:	b085      	sub	sp, #20
    4aa0:	af00      	add	r7, sp, #0
    4aa2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4aa4:	2308      	movs	r3, #8
    4aa6:	18fb      	adds	r3, r7, r3
    4aa8:	4a0b      	ldr	r2, [pc, #44]	; (4ad8 <_sercom_get_interrupt_vector+0x3c>)
    4aaa:	6811      	ldr	r1, [r2, #0]
    4aac:	6019      	str	r1, [r3, #0]
    4aae:	8892      	ldrh	r2, [r2, #4]
    4ab0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4ab2:	230f      	movs	r3, #15
    4ab4:	18fc      	adds	r4, r7, r3
    4ab6:	687b      	ldr	r3, [r7, #4]
    4ab8:	0018      	movs	r0, r3
    4aba:	4b08      	ldr	r3, [pc, #32]	; (4adc <_sercom_get_interrupt_vector+0x40>)
    4abc:	4798      	blx	r3
    4abe:	0003      	movs	r3, r0
    4ac0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4ac2:	230f      	movs	r3, #15
    4ac4:	18fb      	adds	r3, r7, r3
    4ac6:	781b      	ldrb	r3, [r3, #0]
    4ac8:	2208      	movs	r2, #8
    4aca:	18ba      	adds	r2, r7, r2
    4acc:	5cd3      	ldrb	r3, [r2, r3]
    4ace:	b25b      	sxtb	r3, r3
}
    4ad0:	0018      	movs	r0, r3
    4ad2:	46bd      	mov	sp, r7
    4ad4:	b005      	add	sp, #20
    4ad6:	bd90      	pop	{r4, r7, pc}
    4ad8:	00006404 	.word	0x00006404
    4adc:	000008f9 	.word	0x000008f9

00004ae0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4ae0:	b580      	push	{r7, lr}
    4ae2:	af00      	add	r7, sp, #0
    4ae4:	4b03      	ldr	r3, [pc, #12]	; (4af4 <SERCOM0_Handler+0x14>)
    4ae6:	681b      	ldr	r3, [r3, #0]
    4ae8:	2000      	movs	r0, #0
    4aea:	4798      	blx	r3
    4aec:	46c0      	nop			; (mov r8, r8)
    4aee:	46bd      	mov	sp, r7
    4af0:	bd80      	pop	{r7, pc}
    4af2:	46c0      	nop			; (mov r8, r8)
    4af4:	200033a8 	.word	0x200033a8

00004af8 <SERCOM1_Handler>:
    4af8:	b580      	push	{r7, lr}
    4afa:	af00      	add	r7, sp, #0
    4afc:	4b03      	ldr	r3, [pc, #12]	; (4b0c <SERCOM1_Handler+0x14>)
    4afe:	685b      	ldr	r3, [r3, #4]
    4b00:	2001      	movs	r0, #1
    4b02:	4798      	blx	r3
    4b04:	46c0      	nop			; (mov r8, r8)
    4b06:	46bd      	mov	sp, r7
    4b08:	bd80      	pop	{r7, pc}
    4b0a:	46c0      	nop			; (mov r8, r8)
    4b0c:	200033a8 	.word	0x200033a8

00004b10 <SERCOM2_Handler>:
    4b10:	b580      	push	{r7, lr}
    4b12:	af00      	add	r7, sp, #0
    4b14:	4b03      	ldr	r3, [pc, #12]	; (4b24 <SERCOM2_Handler+0x14>)
    4b16:	689b      	ldr	r3, [r3, #8]
    4b18:	2002      	movs	r0, #2
    4b1a:	4798      	blx	r3
    4b1c:	46c0      	nop			; (mov r8, r8)
    4b1e:	46bd      	mov	sp, r7
    4b20:	bd80      	pop	{r7, pc}
    4b22:	46c0      	nop			; (mov r8, r8)
    4b24:	200033a8 	.word	0x200033a8

00004b28 <SERCOM3_Handler>:
    4b28:	b580      	push	{r7, lr}
    4b2a:	af00      	add	r7, sp, #0
    4b2c:	4b03      	ldr	r3, [pc, #12]	; (4b3c <SERCOM3_Handler+0x14>)
    4b2e:	68db      	ldr	r3, [r3, #12]
    4b30:	2003      	movs	r0, #3
    4b32:	4798      	blx	r3
    4b34:	46c0      	nop			; (mov r8, r8)
    4b36:	46bd      	mov	sp, r7
    4b38:	bd80      	pop	{r7, pc}
    4b3a:	46c0      	nop			; (mov r8, r8)
    4b3c:	200033a8 	.word	0x200033a8

00004b40 <SERCOM4_Handler>:
    4b40:	b580      	push	{r7, lr}
    4b42:	af00      	add	r7, sp, #0
    4b44:	4b03      	ldr	r3, [pc, #12]	; (4b54 <SERCOM4_Handler+0x14>)
    4b46:	691b      	ldr	r3, [r3, #16]
    4b48:	2004      	movs	r0, #4
    4b4a:	4798      	blx	r3
    4b4c:	46c0      	nop			; (mov r8, r8)
    4b4e:	46bd      	mov	sp, r7
    4b50:	bd80      	pop	{r7, pc}
    4b52:	46c0      	nop			; (mov r8, r8)
    4b54:	200033a8 	.word	0x200033a8

00004b58 <SERCOM5_Handler>:
    4b58:	b580      	push	{r7, lr}
    4b5a:	af00      	add	r7, sp, #0
    4b5c:	4b03      	ldr	r3, [pc, #12]	; (4b6c <SERCOM5_Handler+0x14>)
    4b5e:	695b      	ldr	r3, [r3, #20]
    4b60:	2005      	movs	r0, #5
    4b62:	4798      	blx	r3
    4b64:	46c0      	nop			; (mov r8, r8)
    4b66:	46bd      	mov	sp, r7
    4b68:	bd80      	pop	{r7, pc}
    4b6a:	46c0      	nop			; (mov r8, r8)
    4b6c:	200033a8 	.word	0x200033a8

00004b70 <system_gclk_gen_get_config_defaults>:
{
    4b70:	b580      	push	{r7, lr}
    4b72:	b082      	sub	sp, #8
    4b74:	af00      	add	r7, sp, #0
    4b76:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    4b78:	687b      	ldr	r3, [r7, #4]
    4b7a:	2201      	movs	r2, #1
    4b7c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    4b7e:	687b      	ldr	r3, [r7, #4]
    4b80:	2200      	movs	r2, #0
    4b82:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4b84:	687b      	ldr	r3, [r7, #4]
    4b86:	2206      	movs	r2, #6
    4b88:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    4b8a:	687b      	ldr	r3, [r7, #4]
    4b8c:	2200      	movs	r2, #0
    4b8e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4b90:	687b      	ldr	r3, [r7, #4]
    4b92:	2200      	movs	r2, #0
    4b94:	725a      	strb	r2, [r3, #9]
}
    4b96:	46c0      	nop			; (mov r8, r8)
    4b98:	46bd      	mov	sp, r7
    4b9a:	b002      	add	sp, #8
    4b9c:	bd80      	pop	{r7, pc}

00004b9e <system_clock_source_osc8m_get_config_defaults>:
{
    4b9e:	b580      	push	{r7, lr}
    4ba0:	b082      	sub	sp, #8
    4ba2:	af00      	add	r7, sp, #0
    4ba4:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    4ba6:	687b      	ldr	r3, [r7, #4]
    4ba8:	2203      	movs	r2, #3
    4baa:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    4bac:	687b      	ldr	r3, [r7, #4]
    4bae:	2200      	movs	r2, #0
    4bb0:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4bb2:	687b      	ldr	r3, [r7, #4]
    4bb4:	2201      	movs	r2, #1
    4bb6:	709a      	strb	r2, [r3, #2]
}
    4bb8:	46c0      	nop			; (mov r8, r8)
    4bba:	46bd      	mov	sp, r7
    4bbc:	b002      	add	sp, #8
    4bbe:	bd80      	pop	{r7, pc}

00004bc0 <system_cpu_clock_set_divider>:
{
    4bc0:	b580      	push	{r7, lr}
    4bc2:	b082      	sub	sp, #8
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	0002      	movs	r2, r0
    4bc8:	1dfb      	adds	r3, r7, #7
    4bca:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    4bcc:	4a03      	ldr	r2, [pc, #12]	; (4bdc <system_cpu_clock_set_divider+0x1c>)
    4bce:	1dfb      	adds	r3, r7, #7
    4bd0:	781b      	ldrb	r3, [r3, #0]
    4bd2:	7213      	strb	r3, [r2, #8]
}
    4bd4:	46c0      	nop			; (mov r8, r8)
    4bd6:	46bd      	mov	sp, r7
    4bd8:	b002      	add	sp, #8
    4bda:	bd80      	pop	{r7, pc}
    4bdc:	40000400 	.word	0x40000400

00004be0 <system_apb_clock_set_divider>:
{
    4be0:	b580      	push	{r7, lr}
    4be2:	b082      	sub	sp, #8
    4be4:	af00      	add	r7, sp, #0
    4be6:	0002      	movs	r2, r0
    4be8:	1dfb      	adds	r3, r7, #7
    4bea:	701a      	strb	r2, [r3, #0]
    4bec:	1dbb      	adds	r3, r7, #6
    4bee:	1c0a      	adds	r2, r1, #0
    4bf0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4bf2:	1dfb      	adds	r3, r7, #7
    4bf4:	781b      	ldrb	r3, [r3, #0]
    4bf6:	2b01      	cmp	r3, #1
    4bf8:	d008      	beq.n	4c0c <system_apb_clock_set_divider+0x2c>
    4bfa:	2b02      	cmp	r3, #2
    4bfc:	d00b      	beq.n	4c16 <system_apb_clock_set_divider+0x36>
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d10e      	bne.n	4c20 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    4c02:	4a0b      	ldr	r2, [pc, #44]	; (4c30 <system_apb_clock_set_divider+0x50>)
    4c04:	1dbb      	adds	r3, r7, #6
    4c06:	781b      	ldrb	r3, [r3, #0]
    4c08:	7253      	strb	r3, [r2, #9]
			break;
    4c0a:	e00b      	b.n	4c24 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    4c0c:	4a08      	ldr	r2, [pc, #32]	; (4c30 <system_apb_clock_set_divider+0x50>)
    4c0e:	1dbb      	adds	r3, r7, #6
    4c10:	781b      	ldrb	r3, [r3, #0]
    4c12:	7293      	strb	r3, [r2, #10]
			break;
    4c14:	e006      	b.n	4c24 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    4c16:	4a06      	ldr	r2, [pc, #24]	; (4c30 <system_apb_clock_set_divider+0x50>)
    4c18:	1dbb      	adds	r3, r7, #6
    4c1a:	781b      	ldrb	r3, [r3, #0]
    4c1c:	72d3      	strb	r3, [r2, #11]
			break;
    4c1e:	e001      	b.n	4c24 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    4c20:	2317      	movs	r3, #23
    4c22:	e000      	b.n	4c26 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    4c24:	2300      	movs	r3, #0
}
    4c26:	0018      	movs	r0, r3
    4c28:	46bd      	mov	sp, r7
    4c2a:	b002      	add	sp, #8
    4c2c:	bd80      	pop	{r7, pc}
    4c2e:	46c0      	nop			; (mov r8, r8)
    4c30:	40000400 	.word	0x40000400

00004c34 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4c34:	b580      	push	{r7, lr}
    4c36:	b082      	sub	sp, #8
    4c38:	af00      	add	r7, sp, #0
    4c3a:	0002      	movs	r2, r0
    4c3c:	1dfb      	adds	r3, r7, #7
    4c3e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4c40:	4a08      	ldr	r2, [pc, #32]	; (4c64 <system_flash_set_waitstates+0x30>)
    4c42:	1dfb      	adds	r3, r7, #7
    4c44:	781b      	ldrb	r3, [r3, #0]
    4c46:	210f      	movs	r1, #15
    4c48:	400b      	ands	r3, r1
    4c4a:	b2d9      	uxtb	r1, r3
    4c4c:	6853      	ldr	r3, [r2, #4]
    4c4e:	200f      	movs	r0, #15
    4c50:	4001      	ands	r1, r0
    4c52:	0049      	lsls	r1, r1, #1
    4c54:	201e      	movs	r0, #30
    4c56:	4383      	bics	r3, r0
    4c58:	430b      	orrs	r3, r1
    4c5a:	6053      	str	r3, [r2, #4]
}
    4c5c:	46c0      	nop			; (mov r8, r8)
    4c5e:	46bd      	mov	sp, r7
    4c60:	b002      	add	sp, #8
    4c62:	bd80      	pop	{r7, pc}
    4c64:	41004000 	.word	0x41004000

00004c68 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4c68:	b580      	push	{r7, lr}
    4c6a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4c6c:	46c0      	nop			; (mov r8, r8)
    4c6e:	4b04      	ldr	r3, [pc, #16]	; (4c80 <_system_dfll_wait_for_sync+0x18>)
    4c70:	68db      	ldr	r3, [r3, #12]
    4c72:	2210      	movs	r2, #16
    4c74:	4013      	ands	r3, r2
    4c76:	d0fa      	beq.n	4c6e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4c78:	46c0      	nop			; (mov r8, r8)
    4c7a:	46bd      	mov	sp, r7
    4c7c:	bd80      	pop	{r7, pc}
    4c7e:	46c0      	nop			; (mov r8, r8)
    4c80:	40000800 	.word	0x40000800

00004c84 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4c84:	b580      	push	{r7, lr}
    4c86:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4c88:	4b0c      	ldr	r3, [pc, #48]	; (4cbc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4c8a:	2202      	movs	r2, #2
    4c8c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4c8e:	4b0c      	ldr	r3, [pc, #48]	; (4cc0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4c90:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4c92:	4a0a      	ldr	r2, [pc, #40]	; (4cbc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4c94:	4b0b      	ldr	r3, [pc, #44]	; (4cc4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4c96:	689b      	ldr	r3, [r3, #8]
    4c98:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4c9a:	4a08      	ldr	r2, [pc, #32]	; (4cbc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4c9c:	4b09      	ldr	r3, [pc, #36]	; (4cc4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4c9e:	685b      	ldr	r3, [r3, #4]
    4ca0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    4ca2:	4b06      	ldr	r3, [pc, #24]	; (4cbc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4ca4:	2200      	movs	r2, #0
    4ca6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4ca8:	4b05      	ldr	r3, [pc, #20]	; (4cc0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4caa:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4cac:	4a03      	ldr	r2, [pc, #12]	; (4cbc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4cae:	4b05      	ldr	r3, [pc, #20]	; (4cc4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4cb0:	681b      	ldr	r3, [r3, #0]
    4cb2:	b29b      	uxth	r3, r3
    4cb4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	46bd      	mov	sp, r7
    4cba:	bd80      	pop	{r7, pc}
    4cbc:	40000800 	.word	0x40000800
    4cc0:	00004c69 	.word	0x00004c69
    4cc4:	200033c0 	.word	0x200033c0

00004cc8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4cc8:	b580      	push	{r7, lr}
    4cca:	b082      	sub	sp, #8
    4ccc:	af00      	add	r7, sp, #0
    4cce:	0002      	movs	r2, r0
    4cd0:	1dfb      	adds	r3, r7, #7
    4cd2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4cd4:	1dfb      	adds	r3, r7, #7
    4cd6:	781b      	ldrb	r3, [r3, #0]
    4cd8:	2b08      	cmp	r3, #8
    4cda:	d841      	bhi.n	4d60 <system_clock_source_get_hz+0x98>
    4cdc:	009a      	lsls	r2, r3, #2
    4cde:	4b23      	ldr	r3, [pc, #140]	; (4d6c <system_clock_source_get_hz+0xa4>)
    4ce0:	18d3      	adds	r3, r2, r3
    4ce2:	681b      	ldr	r3, [r3, #0]
    4ce4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4ce6:	4b22      	ldr	r3, [pc, #136]	; (4d70 <system_clock_source_get_hz+0xa8>)
    4ce8:	691b      	ldr	r3, [r3, #16]
    4cea:	e03a      	b.n	4d62 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4cec:	4b21      	ldr	r3, [pc, #132]	; (4d74 <system_clock_source_get_hz+0xac>)
    4cee:	6a1b      	ldr	r3, [r3, #32]
    4cf0:	059b      	lsls	r3, r3, #22
    4cf2:	0f9b      	lsrs	r3, r3, #30
    4cf4:	b2db      	uxtb	r3, r3
    4cf6:	001a      	movs	r2, r3
    4cf8:	4b1f      	ldr	r3, [pc, #124]	; (4d78 <system_clock_source_get_hz+0xb0>)
    4cfa:	40d3      	lsrs	r3, r2
    4cfc:	e031      	b.n	4d62 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4cfe:	2380      	movs	r3, #128	; 0x80
    4d00:	021b      	lsls	r3, r3, #8
    4d02:	e02e      	b.n	4d62 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4d04:	2380      	movs	r3, #128	; 0x80
    4d06:	021b      	lsls	r3, r3, #8
    4d08:	e02b      	b.n	4d62 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4d0a:	4b19      	ldr	r3, [pc, #100]	; (4d70 <system_clock_source_get_hz+0xa8>)
    4d0c:	695b      	ldr	r3, [r3, #20]
    4d0e:	e028      	b.n	4d62 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4d10:	4b17      	ldr	r3, [pc, #92]	; (4d70 <system_clock_source_get_hz+0xa8>)
    4d12:	681b      	ldr	r3, [r3, #0]
    4d14:	2202      	movs	r2, #2
    4d16:	4013      	ands	r3, r2
    4d18:	d101      	bne.n	4d1e <system_clock_source_get_hz+0x56>
			return 0;
    4d1a:	2300      	movs	r3, #0
    4d1c:	e021      	b.n	4d62 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4d1e:	4b17      	ldr	r3, [pc, #92]	; (4d7c <system_clock_source_get_hz+0xb4>)
    4d20:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    4d22:	4b13      	ldr	r3, [pc, #76]	; (4d70 <system_clock_source_get_hz+0xa8>)
    4d24:	681b      	ldr	r3, [r3, #0]
    4d26:	2224      	movs	r2, #36	; 0x24
    4d28:	4013      	ands	r3, r2
    4d2a:	2b04      	cmp	r3, #4
    4d2c:	d109      	bne.n	4d42 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4d2e:	2000      	movs	r0, #0
    4d30:	4b13      	ldr	r3, [pc, #76]	; (4d80 <system_clock_source_get_hz+0xb8>)
    4d32:	4798      	blx	r3
    4d34:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    4d36:	4b0e      	ldr	r3, [pc, #56]	; (4d70 <system_clock_source_get_hz+0xa8>)
    4d38:	689b      	ldr	r3, [r3, #8]
    4d3a:	041b      	lsls	r3, r3, #16
    4d3c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4d3e:	4353      	muls	r3, r2
    4d40:	e00f      	b.n	4d62 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    4d42:	4b10      	ldr	r3, [pc, #64]	; (4d84 <system_clock_source_get_hz+0xbc>)
    4d44:	e00d      	b.n	4d62 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4d46:	4a0b      	ldr	r2, [pc, #44]	; (4d74 <system_clock_source_get_hz+0xac>)
    4d48:	2350      	movs	r3, #80	; 0x50
    4d4a:	5cd3      	ldrb	r3, [r2, r3]
    4d4c:	b2db      	uxtb	r3, r3
    4d4e:	001a      	movs	r2, r3
    4d50:	2304      	movs	r3, #4
    4d52:	4013      	ands	r3, r2
    4d54:	d101      	bne.n	4d5a <system_clock_source_get_hz+0x92>
			return 0;
    4d56:	2300      	movs	r3, #0
    4d58:	e003      	b.n	4d62 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    4d5a:	4b05      	ldr	r3, [pc, #20]	; (4d70 <system_clock_source_get_hz+0xa8>)
    4d5c:	68db      	ldr	r3, [r3, #12]
    4d5e:	e000      	b.n	4d62 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    4d60:	2300      	movs	r3, #0
	}
}
    4d62:	0018      	movs	r0, r3
    4d64:	46bd      	mov	sp, r7
    4d66:	b002      	add	sp, #8
    4d68:	bd80      	pop	{r7, pc}
    4d6a:	46c0      	nop			; (mov r8, r8)
    4d6c:	0000640c 	.word	0x0000640c
    4d70:	200033c0 	.word	0x200033c0
    4d74:	40000800 	.word	0x40000800
    4d78:	007a1200 	.word	0x007a1200
    4d7c:	00004c69 	.word	0x00004c69
    4d80:	00005409 	.word	0x00005409
    4d84:	02dc6c00 	.word	0x02dc6c00

00004d88 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4d88:	b580      	push	{r7, lr}
    4d8a:	b084      	sub	sp, #16
    4d8c:	af00      	add	r7, sp, #0
    4d8e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4d90:	4b1a      	ldr	r3, [pc, #104]	; (4dfc <system_clock_source_osc8m_set_config+0x74>)
    4d92:	6a1b      	ldr	r3, [r3, #32]
    4d94:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4d96:	687b      	ldr	r3, [r7, #4]
    4d98:	781b      	ldrb	r3, [r3, #0]
    4d9a:	1c1a      	adds	r2, r3, #0
    4d9c:	2303      	movs	r3, #3
    4d9e:	4013      	ands	r3, r2
    4da0:	b2da      	uxtb	r2, r3
    4da2:	230d      	movs	r3, #13
    4da4:	18fb      	adds	r3, r7, r3
    4da6:	2103      	movs	r1, #3
    4da8:	400a      	ands	r2, r1
    4daa:	0010      	movs	r0, r2
    4dac:	781a      	ldrb	r2, [r3, #0]
    4dae:	2103      	movs	r1, #3
    4db0:	438a      	bics	r2, r1
    4db2:	1c11      	adds	r1, r2, #0
    4db4:	1c02      	adds	r2, r0, #0
    4db6:	430a      	orrs	r2, r1
    4db8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	789a      	ldrb	r2, [r3, #2]
    4dbe:	230c      	movs	r3, #12
    4dc0:	18fb      	adds	r3, r7, r3
    4dc2:	01d0      	lsls	r0, r2, #7
    4dc4:	781a      	ldrb	r2, [r3, #0]
    4dc6:	217f      	movs	r1, #127	; 0x7f
    4dc8:	400a      	ands	r2, r1
    4dca:	1c11      	adds	r1, r2, #0
    4dcc:	1c02      	adds	r2, r0, #0
    4dce:	430a      	orrs	r2, r1
    4dd0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4dd2:	687b      	ldr	r3, [r7, #4]
    4dd4:	785a      	ldrb	r2, [r3, #1]
    4dd6:	230c      	movs	r3, #12
    4dd8:	18fb      	adds	r3, r7, r3
    4dda:	2101      	movs	r1, #1
    4ddc:	400a      	ands	r2, r1
    4dde:	0190      	lsls	r0, r2, #6
    4de0:	781a      	ldrb	r2, [r3, #0]
    4de2:	2140      	movs	r1, #64	; 0x40
    4de4:	438a      	bics	r2, r1
    4de6:	1c11      	adds	r1, r2, #0
    4de8:	1c02      	adds	r2, r0, #0
    4dea:	430a      	orrs	r2, r1
    4dec:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4dee:	4b03      	ldr	r3, [pc, #12]	; (4dfc <system_clock_source_osc8m_set_config+0x74>)
    4df0:	68fa      	ldr	r2, [r7, #12]
    4df2:	621a      	str	r2, [r3, #32]
}
    4df4:	46c0      	nop			; (mov r8, r8)
    4df6:	46bd      	mov	sp, r7
    4df8:	b004      	add	sp, #16
    4dfa:	bd80      	pop	{r7, pc}
    4dfc:	40000800 	.word	0x40000800

00004e00 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4e00:	b580      	push	{r7, lr}
    4e02:	b082      	sub	sp, #8
    4e04:	af00      	add	r7, sp, #0
    4e06:	0002      	movs	r2, r0
    4e08:	1dfb      	adds	r3, r7, #7
    4e0a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4e0c:	1dfb      	adds	r3, r7, #7
    4e0e:	781b      	ldrb	r3, [r3, #0]
    4e10:	2b08      	cmp	r3, #8
    4e12:	d83b      	bhi.n	4e8c <system_clock_source_enable+0x8c>
    4e14:	009a      	lsls	r2, r3, #2
    4e16:	4b21      	ldr	r3, [pc, #132]	; (4e9c <system_clock_source_enable+0x9c>)
    4e18:	18d3      	adds	r3, r2, r3
    4e1a:	681b      	ldr	r3, [r3, #0]
    4e1c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4e1e:	4b20      	ldr	r3, [pc, #128]	; (4ea0 <system_clock_source_enable+0xa0>)
    4e20:	4a1f      	ldr	r2, [pc, #124]	; (4ea0 <system_clock_source_enable+0xa0>)
    4e22:	6a12      	ldr	r2, [r2, #32]
    4e24:	2102      	movs	r1, #2
    4e26:	430a      	orrs	r2, r1
    4e28:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    4e2a:	2300      	movs	r3, #0
    4e2c:	e031      	b.n	4e92 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4e2e:	4b1c      	ldr	r3, [pc, #112]	; (4ea0 <system_clock_source_enable+0xa0>)
    4e30:	4a1b      	ldr	r2, [pc, #108]	; (4ea0 <system_clock_source_enable+0xa0>)
    4e32:	6992      	ldr	r2, [r2, #24]
    4e34:	2102      	movs	r1, #2
    4e36:	430a      	orrs	r2, r1
    4e38:	619a      	str	r2, [r3, #24]
		break;
    4e3a:	e029      	b.n	4e90 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4e3c:	4a18      	ldr	r2, [pc, #96]	; (4ea0 <system_clock_source_enable+0xa0>)
    4e3e:	4b18      	ldr	r3, [pc, #96]	; (4ea0 <system_clock_source_enable+0xa0>)
    4e40:	8a1b      	ldrh	r3, [r3, #16]
    4e42:	b29b      	uxth	r3, r3
    4e44:	2102      	movs	r1, #2
    4e46:	430b      	orrs	r3, r1
    4e48:	b29b      	uxth	r3, r3
    4e4a:	8213      	strh	r3, [r2, #16]
		break;
    4e4c:	e020      	b.n	4e90 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4e4e:	4a14      	ldr	r2, [pc, #80]	; (4ea0 <system_clock_source_enable+0xa0>)
    4e50:	4b13      	ldr	r3, [pc, #76]	; (4ea0 <system_clock_source_enable+0xa0>)
    4e52:	8a9b      	ldrh	r3, [r3, #20]
    4e54:	b29b      	uxth	r3, r3
    4e56:	2102      	movs	r1, #2
    4e58:	430b      	orrs	r3, r1
    4e5a:	b29b      	uxth	r3, r3
    4e5c:	8293      	strh	r3, [r2, #20]
		break;
    4e5e:	e017      	b.n	4e90 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4e60:	4b10      	ldr	r3, [pc, #64]	; (4ea4 <system_clock_source_enable+0xa4>)
    4e62:	681b      	ldr	r3, [r3, #0]
    4e64:	2202      	movs	r2, #2
    4e66:	431a      	orrs	r2, r3
    4e68:	4b0e      	ldr	r3, [pc, #56]	; (4ea4 <system_clock_source_enable+0xa4>)
    4e6a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    4e6c:	4b0e      	ldr	r3, [pc, #56]	; (4ea8 <system_clock_source_enable+0xa8>)
    4e6e:	4798      	blx	r3
		break;
    4e70:	e00e      	b.n	4e90 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4e72:	4a0b      	ldr	r2, [pc, #44]	; (4ea0 <system_clock_source_enable+0xa0>)
    4e74:	490a      	ldr	r1, [pc, #40]	; (4ea0 <system_clock_source_enable+0xa0>)
    4e76:	2344      	movs	r3, #68	; 0x44
    4e78:	5ccb      	ldrb	r3, [r1, r3]
    4e7a:	b2db      	uxtb	r3, r3
    4e7c:	2102      	movs	r1, #2
    4e7e:	430b      	orrs	r3, r1
    4e80:	b2d9      	uxtb	r1, r3
    4e82:	2344      	movs	r3, #68	; 0x44
    4e84:	54d1      	strb	r1, [r2, r3]
		break;
    4e86:	e003      	b.n	4e90 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4e88:	2300      	movs	r3, #0
    4e8a:	e002      	b.n	4e92 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4e8c:	2317      	movs	r3, #23
    4e8e:	e000      	b.n	4e92 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    4e90:	2300      	movs	r3, #0
}
    4e92:	0018      	movs	r0, r3
    4e94:	46bd      	mov	sp, r7
    4e96:	b002      	add	sp, #8
    4e98:	bd80      	pop	{r7, pc}
    4e9a:	46c0      	nop			; (mov r8, r8)
    4e9c:	00006430 	.word	0x00006430
    4ea0:	40000800 	.word	0x40000800
    4ea4:	200033c0 	.word	0x200033c0
    4ea8:	00004c85 	.word	0x00004c85

00004eac <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    4eac:	b580      	push	{r7, lr}
    4eae:	b082      	sub	sp, #8
    4eb0:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    4eb2:	003b      	movs	r3, r7
    4eb4:	2201      	movs	r2, #1
    4eb6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4eb8:	2300      	movs	r3, #0
    4eba:	607b      	str	r3, [r7, #4]
    4ebc:	e009      	b.n	4ed2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4ebe:	687b      	ldr	r3, [r7, #4]
    4ec0:	b2db      	uxtb	r3, r3
    4ec2:	003a      	movs	r2, r7
    4ec4:	0011      	movs	r1, r2
    4ec6:	0018      	movs	r0, r3
    4ec8:	4b05      	ldr	r3, [pc, #20]	; (4ee0 <_switch_peripheral_gclk+0x34>)
    4eca:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4ecc:	687b      	ldr	r3, [r7, #4]
    4ece:	3301      	adds	r3, #1
    4ed0:	607b      	str	r3, [r7, #4]
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	2b24      	cmp	r3, #36	; 0x24
    4ed6:	d9f2      	bls.n	4ebe <_switch_peripheral_gclk+0x12>
	}
}
    4ed8:	46c0      	nop			; (mov r8, r8)
    4eda:	46bd      	mov	sp, r7
    4edc:	b002      	add	sp, #8
    4ede:	bd80      	pop	{r7, pc}
    4ee0:	000052e5 	.word	0x000052e5

00004ee4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4ee4:	b580      	push	{r7, lr}
    4ee6:	b0a0      	sub	sp, #128	; 0x80
    4ee8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4eea:	4b27      	ldr	r3, [pc, #156]	; (4f88 <system_clock_init+0xa4>)
    4eec:	22c2      	movs	r2, #194	; 0xc2
    4eee:	00d2      	lsls	r2, r2, #3
    4ef0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4ef2:	2000      	movs	r0, #0
    4ef4:	4b25      	ldr	r3, [pc, #148]	; (4f8c <system_clock_init+0xa8>)
    4ef6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    4ef8:	4b25      	ldr	r3, [pc, #148]	; (4f90 <system_clock_init+0xac>)
    4efa:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    4efc:	237c      	movs	r3, #124	; 0x7c
    4efe:	18fb      	adds	r3, r7, r3
    4f00:	0018      	movs	r0, r3
    4f02:	4b24      	ldr	r3, [pc, #144]	; (4f94 <system_clock_init+0xb0>)
    4f04:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4f06:	237c      	movs	r3, #124	; 0x7c
    4f08:	18fb      	adds	r3, r7, r3
    4f0a:	2200      	movs	r2, #0
    4f0c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    4f0e:	237c      	movs	r3, #124	; 0x7c
    4f10:	18fb      	adds	r3, r7, r3
    4f12:	2201      	movs	r2, #1
    4f14:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4f16:	237c      	movs	r3, #124	; 0x7c
    4f18:	18fb      	adds	r3, r7, r3
    4f1a:	2200      	movs	r2, #0
    4f1c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4f1e:	237c      	movs	r3, #124	; 0x7c
    4f20:	18fb      	adds	r3, r7, r3
    4f22:	0018      	movs	r0, r3
    4f24:	4b1c      	ldr	r3, [pc, #112]	; (4f98 <system_clock_init+0xb4>)
    4f26:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4f28:	2006      	movs	r0, #6
    4f2a:	4b1c      	ldr	r3, [pc, #112]	; (4f9c <system_clock_init+0xb8>)
    4f2c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4f2e:	4b1c      	ldr	r3, [pc, #112]	; (4fa0 <system_clock_init+0xbc>)
    4f30:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    4f32:	2000      	movs	r0, #0
    4f34:	4b1b      	ldr	r3, [pc, #108]	; (4fa4 <system_clock_init+0xc0>)
    4f36:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4f38:	2100      	movs	r1, #0
    4f3a:	2000      	movs	r0, #0
    4f3c:	4b1a      	ldr	r3, [pc, #104]	; (4fa8 <system_clock_init+0xc4>)
    4f3e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    4f40:	2100      	movs	r1, #0
    4f42:	2001      	movs	r0, #1
    4f44:	4b18      	ldr	r3, [pc, #96]	; (4fa8 <system_clock_init+0xc4>)
    4f46:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    4f48:	2100      	movs	r1, #0
    4f4a:	2002      	movs	r0, #2
    4f4c:	4b16      	ldr	r3, [pc, #88]	; (4fa8 <system_clock_init+0xc4>)
    4f4e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4f50:	1d3b      	adds	r3, r7, #4
    4f52:	0018      	movs	r0, r3
    4f54:	4b15      	ldr	r3, [pc, #84]	; (4fac <system_clock_init+0xc8>)
    4f56:	4798      	blx	r3
    4f58:	1d3b      	adds	r3, r7, #4
    4f5a:	2206      	movs	r2, #6
    4f5c:	701a      	strb	r2, [r3, #0]
    4f5e:	1d3b      	adds	r3, r7, #4
    4f60:	2201      	movs	r2, #1
    4f62:	605a      	str	r2, [r3, #4]
    4f64:	1d3b      	adds	r3, r7, #4
    4f66:	2200      	movs	r2, #0
    4f68:	721a      	strb	r2, [r3, #8]
    4f6a:	1d3b      	adds	r3, r7, #4
    4f6c:	2200      	movs	r2, #0
    4f6e:	725a      	strb	r2, [r3, #9]
    4f70:	1d3b      	adds	r3, r7, #4
    4f72:	0019      	movs	r1, r3
    4f74:	2000      	movs	r0, #0
    4f76:	4b0e      	ldr	r3, [pc, #56]	; (4fb0 <system_clock_init+0xcc>)
    4f78:	4798      	blx	r3
    4f7a:	2000      	movs	r0, #0
    4f7c:	4b0d      	ldr	r3, [pc, #52]	; (4fb4 <system_clock_init+0xd0>)
    4f7e:	4798      	blx	r3
#endif
}
    4f80:	46c0      	nop			; (mov r8, r8)
    4f82:	46bd      	mov	sp, r7
    4f84:	b020      	add	sp, #128	; 0x80
    4f86:	bd80      	pop	{r7, pc}
    4f88:	40000800 	.word	0x40000800
    4f8c:	00004c35 	.word	0x00004c35
    4f90:	00004ead 	.word	0x00004ead
    4f94:	00004b9f 	.word	0x00004b9f
    4f98:	00004d89 	.word	0x00004d89
    4f9c:	00004e01 	.word	0x00004e01
    4fa0:	0000505d 	.word	0x0000505d
    4fa4:	00004bc1 	.word	0x00004bc1
    4fa8:	00004be1 	.word	0x00004be1
    4fac:	00004b71 	.word	0x00004b71
    4fb0:	0000508d 	.word	0x0000508d
    4fb4:	000051b1 	.word	0x000051b1

00004fb8 <system_apb_clock_set_mask>:
{
    4fb8:	b580      	push	{r7, lr}
    4fba:	b082      	sub	sp, #8
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	0002      	movs	r2, r0
    4fc0:	6039      	str	r1, [r7, #0]
    4fc2:	1dfb      	adds	r3, r7, #7
    4fc4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4fc6:	1dfb      	adds	r3, r7, #7
    4fc8:	781b      	ldrb	r3, [r3, #0]
    4fca:	2b01      	cmp	r3, #1
    4fcc:	d00a      	beq.n	4fe4 <system_apb_clock_set_mask+0x2c>
    4fce:	2b02      	cmp	r3, #2
    4fd0:	d00f      	beq.n	4ff2 <system_apb_clock_set_mask+0x3a>
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	d114      	bne.n	5000 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4fd6:	4b0e      	ldr	r3, [pc, #56]	; (5010 <system_apb_clock_set_mask+0x58>)
    4fd8:	4a0d      	ldr	r2, [pc, #52]	; (5010 <system_apb_clock_set_mask+0x58>)
    4fda:	6991      	ldr	r1, [r2, #24]
    4fdc:	683a      	ldr	r2, [r7, #0]
    4fde:	430a      	orrs	r2, r1
    4fe0:	619a      	str	r2, [r3, #24]
			break;
    4fe2:	e00f      	b.n	5004 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4fe4:	4b0a      	ldr	r3, [pc, #40]	; (5010 <system_apb_clock_set_mask+0x58>)
    4fe6:	4a0a      	ldr	r2, [pc, #40]	; (5010 <system_apb_clock_set_mask+0x58>)
    4fe8:	69d1      	ldr	r1, [r2, #28]
    4fea:	683a      	ldr	r2, [r7, #0]
    4fec:	430a      	orrs	r2, r1
    4fee:	61da      	str	r2, [r3, #28]
			break;
    4ff0:	e008      	b.n	5004 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4ff2:	4b07      	ldr	r3, [pc, #28]	; (5010 <system_apb_clock_set_mask+0x58>)
    4ff4:	4a06      	ldr	r2, [pc, #24]	; (5010 <system_apb_clock_set_mask+0x58>)
    4ff6:	6a11      	ldr	r1, [r2, #32]
    4ff8:	683a      	ldr	r2, [r7, #0]
    4ffa:	430a      	orrs	r2, r1
    4ffc:	621a      	str	r2, [r3, #32]
			break;
    4ffe:	e001      	b.n	5004 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5000:	2317      	movs	r3, #23
    5002:	e000      	b.n	5006 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5004:	2300      	movs	r3, #0
}
    5006:	0018      	movs	r0, r3
    5008:	46bd      	mov	sp, r7
    500a:	b002      	add	sp, #8
    500c:	bd80      	pop	{r7, pc}
    500e:	46c0      	nop			; (mov r8, r8)
    5010:	40000400 	.word	0x40000400

00005014 <system_interrupt_enter_critical_section>:
{
    5014:	b580      	push	{r7, lr}
    5016:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5018:	4b02      	ldr	r3, [pc, #8]	; (5024 <system_interrupt_enter_critical_section+0x10>)
    501a:	4798      	blx	r3
}
    501c:	46c0      	nop			; (mov r8, r8)
    501e:	46bd      	mov	sp, r7
    5020:	bd80      	pop	{r7, pc}
    5022:	46c0      	nop			; (mov r8, r8)
    5024:	00000115 	.word	0x00000115

00005028 <system_interrupt_leave_critical_section>:
{
    5028:	b580      	push	{r7, lr}
    502a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    502c:	4b02      	ldr	r3, [pc, #8]	; (5038 <system_interrupt_leave_critical_section+0x10>)
    502e:	4798      	blx	r3
}
    5030:	46c0      	nop			; (mov r8, r8)
    5032:	46bd      	mov	sp, r7
    5034:	bd80      	pop	{r7, pc}
    5036:	46c0      	nop			; (mov r8, r8)
    5038:	00000169 	.word	0x00000169

0000503c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    503c:	b580      	push	{r7, lr}
    503e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5040:	4b05      	ldr	r3, [pc, #20]	; (5058 <system_gclk_is_syncing+0x1c>)
    5042:	785b      	ldrb	r3, [r3, #1]
    5044:	b2db      	uxtb	r3, r3
    5046:	b25b      	sxtb	r3, r3
    5048:	2b00      	cmp	r3, #0
    504a:	da01      	bge.n	5050 <system_gclk_is_syncing+0x14>
		return true;
    504c:	2301      	movs	r3, #1
    504e:	e000      	b.n	5052 <system_gclk_is_syncing+0x16>
	}

	return false;
    5050:	2300      	movs	r3, #0
}
    5052:	0018      	movs	r0, r3
    5054:	46bd      	mov	sp, r7
    5056:	bd80      	pop	{r7, pc}
    5058:	40000c00 	.word	0x40000c00

0000505c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    505c:	b580      	push	{r7, lr}
    505e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    5060:	2108      	movs	r1, #8
    5062:	2000      	movs	r0, #0
    5064:	4b07      	ldr	r3, [pc, #28]	; (5084 <system_gclk_init+0x28>)
    5066:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5068:	4b07      	ldr	r3, [pc, #28]	; (5088 <system_gclk_init+0x2c>)
    506a:	2201      	movs	r2, #1
    506c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    506e:	46c0      	nop			; (mov r8, r8)
    5070:	4b05      	ldr	r3, [pc, #20]	; (5088 <system_gclk_init+0x2c>)
    5072:	781b      	ldrb	r3, [r3, #0]
    5074:	b2db      	uxtb	r3, r3
    5076:	001a      	movs	r2, r3
    5078:	2301      	movs	r3, #1
    507a:	4013      	ands	r3, r2
    507c:	d1f8      	bne.n	5070 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    507e:	46c0      	nop			; (mov r8, r8)
    5080:	46bd      	mov	sp, r7
    5082:	bd80      	pop	{r7, pc}
    5084:	00004fb9 	.word	0x00004fb9
    5088:	40000c00 	.word	0x40000c00

0000508c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    508c:	b580      	push	{r7, lr}
    508e:	b086      	sub	sp, #24
    5090:	af00      	add	r7, sp, #0
    5092:	0002      	movs	r2, r0
    5094:	6039      	str	r1, [r7, #0]
    5096:	1dfb      	adds	r3, r7, #7
    5098:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    509a:	1dfb      	adds	r3, r7, #7
    509c:	781b      	ldrb	r3, [r3, #0]
    509e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    50a0:	1dfb      	adds	r3, r7, #7
    50a2:	781b      	ldrb	r3, [r3, #0]
    50a4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    50a6:	683b      	ldr	r3, [r7, #0]
    50a8:	781b      	ldrb	r3, [r3, #0]
    50aa:	021b      	lsls	r3, r3, #8
    50ac:	001a      	movs	r2, r3
    50ae:	697b      	ldr	r3, [r7, #20]
    50b0:	4313      	orrs	r3, r2
    50b2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    50b4:	683b      	ldr	r3, [r7, #0]
    50b6:	785b      	ldrb	r3, [r3, #1]
    50b8:	2b00      	cmp	r3, #0
    50ba:	d004      	beq.n	50c6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    50bc:	697b      	ldr	r3, [r7, #20]
    50be:	2280      	movs	r2, #128	; 0x80
    50c0:	02d2      	lsls	r2, r2, #11
    50c2:	4313      	orrs	r3, r2
    50c4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    50c6:	683b      	ldr	r3, [r7, #0]
    50c8:	7a5b      	ldrb	r3, [r3, #9]
    50ca:	2b00      	cmp	r3, #0
    50cc:	d004      	beq.n	50d8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    50ce:	697b      	ldr	r3, [r7, #20]
    50d0:	2280      	movs	r2, #128	; 0x80
    50d2:	0312      	lsls	r2, r2, #12
    50d4:	4313      	orrs	r3, r2
    50d6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    50d8:	683b      	ldr	r3, [r7, #0]
    50da:	685b      	ldr	r3, [r3, #4]
    50dc:	2b01      	cmp	r3, #1
    50de:	d92c      	bls.n	513a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    50e0:	683b      	ldr	r3, [r7, #0]
    50e2:	685a      	ldr	r2, [r3, #4]
    50e4:	683b      	ldr	r3, [r7, #0]
    50e6:	685b      	ldr	r3, [r3, #4]
    50e8:	3b01      	subs	r3, #1
    50ea:	4013      	ands	r3, r2
    50ec:	d11a      	bne.n	5124 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    50ee:	2300      	movs	r3, #0
    50f0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    50f2:	2302      	movs	r3, #2
    50f4:	60bb      	str	r3, [r7, #8]
    50f6:	e005      	b.n	5104 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    50f8:	68fb      	ldr	r3, [r7, #12]
    50fa:	3301      	adds	r3, #1
    50fc:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    50fe:	68bb      	ldr	r3, [r7, #8]
    5100:	005b      	lsls	r3, r3, #1
    5102:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    5104:	683b      	ldr	r3, [r7, #0]
    5106:	685a      	ldr	r2, [r3, #4]
    5108:	68bb      	ldr	r3, [r7, #8]
    510a:	429a      	cmp	r2, r3
    510c:	d8f4      	bhi.n	50f8 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    510e:	68fb      	ldr	r3, [r7, #12]
    5110:	021b      	lsls	r3, r3, #8
    5112:	693a      	ldr	r2, [r7, #16]
    5114:	4313      	orrs	r3, r2
    5116:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5118:	697b      	ldr	r3, [r7, #20]
    511a:	2280      	movs	r2, #128	; 0x80
    511c:	0352      	lsls	r2, r2, #13
    511e:	4313      	orrs	r3, r2
    5120:	617b      	str	r3, [r7, #20]
    5122:	e00a      	b.n	513a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5124:	683b      	ldr	r3, [r7, #0]
    5126:	685b      	ldr	r3, [r3, #4]
    5128:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    512a:	693a      	ldr	r2, [r7, #16]
    512c:	4313      	orrs	r3, r2
    512e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5130:	697b      	ldr	r3, [r7, #20]
    5132:	2280      	movs	r2, #128	; 0x80
    5134:	0292      	lsls	r2, r2, #10
    5136:	4313      	orrs	r3, r2
    5138:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    513a:	683b      	ldr	r3, [r7, #0]
    513c:	7a1b      	ldrb	r3, [r3, #8]
    513e:	2b00      	cmp	r3, #0
    5140:	d004      	beq.n	514c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5142:	697b      	ldr	r3, [r7, #20]
    5144:	2280      	movs	r2, #128	; 0x80
    5146:	0392      	lsls	r2, r2, #14
    5148:	4313      	orrs	r3, r2
    514a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    514c:	46c0      	nop			; (mov r8, r8)
    514e:	4b13      	ldr	r3, [pc, #76]	; (519c <system_gclk_gen_set_config+0x110>)
    5150:	4798      	blx	r3
    5152:	1e03      	subs	r3, r0, #0
    5154:	d1fb      	bne.n	514e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5156:	4b12      	ldr	r3, [pc, #72]	; (51a0 <system_gclk_gen_set_config+0x114>)
    5158:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    515a:	4a12      	ldr	r2, [pc, #72]	; (51a4 <system_gclk_gen_set_config+0x118>)
    515c:	1dfb      	adds	r3, r7, #7
    515e:	781b      	ldrb	r3, [r3, #0]
    5160:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5162:	46c0      	nop			; (mov r8, r8)
    5164:	4b0d      	ldr	r3, [pc, #52]	; (519c <system_gclk_gen_set_config+0x110>)
    5166:	4798      	blx	r3
    5168:	1e03      	subs	r3, r0, #0
    516a:	d1fb      	bne.n	5164 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    516c:	4b0e      	ldr	r3, [pc, #56]	; (51a8 <system_gclk_gen_set_config+0x11c>)
    516e:	693a      	ldr	r2, [r7, #16]
    5170:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    5172:	46c0      	nop			; (mov r8, r8)
    5174:	4b09      	ldr	r3, [pc, #36]	; (519c <system_gclk_gen_set_config+0x110>)
    5176:	4798      	blx	r3
    5178:	1e03      	subs	r3, r0, #0
    517a:	d1fb      	bne.n	5174 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    517c:	4b0a      	ldr	r3, [pc, #40]	; (51a8 <system_gclk_gen_set_config+0x11c>)
    517e:	4a0a      	ldr	r2, [pc, #40]	; (51a8 <system_gclk_gen_set_config+0x11c>)
    5180:	6851      	ldr	r1, [r2, #4]
    5182:	2280      	movs	r2, #128	; 0x80
    5184:	0252      	lsls	r2, r2, #9
    5186:	4011      	ands	r1, r2
    5188:	697a      	ldr	r2, [r7, #20]
    518a:	430a      	orrs	r2, r1
    518c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    518e:	4b07      	ldr	r3, [pc, #28]	; (51ac <system_gclk_gen_set_config+0x120>)
    5190:	4798      	blx	r3
}
    5192:	46c0      	nop			; (mov r8, r8)
    5194:	46bd      	mov	sp, r7
    5196:	b006      	add	sp, #24
    5198:	bd80      	pop	{r7, pc}
    519a:	46c0      	nop			; (mov r8, r8)
    519c:	0000503d 	.word	0x0000503d
    51a0:	00005015 	.word	0x00005015
    51a4:	40000c08 	.word	0x40000c08
    51a8:	40000c00 	.word	0x40000c00
    51ac:	00005029 	.word	0x00005029

000051b0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    51b0:	b580      	push	{r7, lr}
    51b2:	b082      	sub	sp, #8
    51b4:	af00      	add	r7, sp, #0
    51b6:	0002      	movs	r2, r0
    51b8:	1dfb      	adds	r3, r7, #7
    51ba:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    51bc:	46c0      	nop			; (mov r8, r8)
    51be:	4b0e      	ldr	r3, [pc, #56]	; (51f8 <system_gclk_gen_enable+0x48>)
    51c0:	4798      	blx	r3
    51c2:	1e03      	subs	r3, r0, #0
    51c4:	d1fb      	bne.n	51be <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    51c6:	4b0d      	ldr	r3, [pc, #52]	; (51fc <system_gclk_gen_enable+0x4c>)
    51c8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    51ca:	4a0d      	ldr	r2, [pc, #52]	; (5200 <system_gclk_gen_enable+0x50>)
    51cc:	1dfb      	adds	r3, r7, #7
    51ce:	781b      	ldrb	r3, [r3, #0]
    51d0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    51d2:	46c0      	nop			; (mov r8, r8)
    51d4:	4b08      	ldr	r3, [pc, #32]	; (51f8 <system_gclk_gen_enable+0x48>)
    51d6:	4798      	blx	r3
    51d8:	1e03      	subs	r3, r0, #0
    51da:	d1fb      	bne.n	51d4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    51dc:	4b09      	ldr	r3, [pc, #36]	; (5204 <system_gclk_gen_enable+0x54>)
    51de:	4a09      	ldr	r2, [pc, #36]	; (5204 <system_gclk_gen_enable+0x54>)
    51e0:	6852      	ldr	r2, [r2, #4]
    51e2:	2180      	movs	r1, #128	; 0x80
    51e4:	0249      	lsls	r1, r1, #9
    51e6:	430a      	orrs	r2, r1
    51e8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    51ea:	4b07      	ldr	r3, [pc, #28]	; (5208 <system_gclk_gen_enable+0x58>)
    51ec:	4798      	blx	r3
}
    51ee:	46c0      	nop			; (mov r8, r8)
    51f0:	46bd      	mov	sp, r7
    51f2:	b002      	add	sp, #8
    51f4:	bd80      	pop	{r7, pc}
    51f6:	46c0      	nop			; (mov r8, r8)
    51f8:	0000503d 	.word	0x0000503d
    51fc:	00005015 	.word	0x00005015
    5200:	40000c04 	.word	0x40000c04
    5204:	40000c00 	.word	0x40000c00
    5208:	00005029 	.word	0x00005029

0000520c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    520c:	b580      	push	{r7, lr}
    520e:	b086      	sub	sp, #24
    5210:	af00      	add	r7, sp, #0
    5212:	0002      	movs	r2, r0
    5214:	1dfb      	adds	r3, r7, #7
    5216:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5218:	46c0      	nop			; (mov r8, r8)
    521a:	4b2a      	ldr	r3, [pc, #168]	; (52c4 <system_gclk_gen_get_hz+0xb8>)
    521c:	4798      	blx	r3
    521e:	1e03      	subs	r3, r0, #0
    5220:	d1fb      	bne.n	521a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5222:	4b29      	ldr	r3, [pc, #164]	; (52c8 <system_gclk_gen_get_hz+0xbc>)
    5224:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5226:	4a29      	ldr	r2, [pc, #164]	; (52cc <system_gclk_gen_get_hz+0xc0>)
    5228:	1dfb      	adds	r3, r7, #7
    522a:	781b      	ldrb	r3, [r3, #0]
    522c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    522e:	46c0      	nop			; (mov r8, r8)
    5230:	4b24      	ldr	r3, [pc, #144]	; (52c4 <system_gclk_gen_get_hz+0xb8>)
    5232:	4798      	blx	r3
    5234:	1e03      	subs	r3, r0, #0
    5236:	d1fb      	bne.n	5230 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5238:	4b25      	ldr	r3, [pc, #148]	; (52d0 <system_gclk_gen_get_hz+0xc4>)
    523a:	685b      	ldr	r3, [r3, #4]
    523c:	04db      	lsls	r3, r3, #19
    523e:	0edb      	lsrs	r3, r3, #27
    5240:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5242:	0018      	movs	r0, r3
    5244:	4b23      	ldr	r3, [pc, #140]	; (52d4 <system_gclk_gen_get_hz+0xc8>)
    5246:	4798      	blx	r3
    5248:	0003      	movs	r3, r0
    524a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    524c:	4a1f      	ldr	r2, [pc, #124]	; (52cc <system_gclk_gen_get_hz+0xc0>)
    524e:	1dfb      	adds	r3, r7, #7
    5250:	781b      	ldrb	r3, [r3, #0]
    5252:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5254:	4b1e      	ldr	r3, [pc, #120]	; (52d0 <system_gclk_gen_get_hz+0xc4>)
    5256:	685b      	ldr	r3, [r3, #4]
    5258:	02db      	lsls	r3, r3, #11
    525a:	0fdb      	lsrs	r3, r3, #31
    525c:	b2da      	uxtb	r2, r3
    525e:	2313      	movs	r3, #19
    5260:	18fb      	adds	r3, r7, r3
    5262:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5264:	4a1c      	ldr	r2, [pc, #112]	; (52d8 <system_gclk_gen_get_hz+0xcc>)
    5266:	1dfb      	adds	r3, r7, #7
    5268:	781b      	ldrb	r3, [r3, #0]
    526a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    526c:	46c0      	nop			; (mov r8, r8)
    526e:	4b15      	ldr	r3, [pc, #84]	; (52c4 <system_gclk_gen_get_hz+0xb8>)
    5270:	4798      	blx	r3
    5272:	1e03      	subs	r3, r0, #0
    5274:	d1fb      	bne.n	526e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5276:	4b16      	ldr	r3, [pc, #88]	; (52d0 <system_gclk_gen_get_hz+0xc4>)
    5278:	689b      	ldr	r3, [r3, #8]
    527a:	021b      	lsls	r3, r3, #8
    527c:	0c1b      	lsrs	r3, r3, #16
    527e:	b29b      	uxth	r3, r3
    5280:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    5282:	4b16      	ldr	r3, [pc, #88]	; (52dc <system_gclk_gen_get_hz+0xd0>)
    5284:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5286:	2313      	movs	r3, #19
    5288:	18fb      	adds	r3, r7, r3
    528a:	781b      	ldrb	r3, [r3, #0]
    528c:	2b00      	cmp	r3, #0
    528e:	d109      	bne.n	52a4 <system_gclk_gen_get_hz+0x98>
    5290:	68fb      	ldr	r3, [r7, #12]
    5292:	2b01      	cmp	r3, #1
    5294:	d906      	bls.n	52a4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    5296:	4b12      	ldr	r3, [pc, #72]	; (52e0 <system_gclk_gen_get_hz+0xd4>)
    5298:	68f9      	ldr	r1, [r7, #12]
    529a:	6978      	ldr	r0, [r7, #20]
    529c:	4798      	blx	r3
    529e:	0003      	movs	r3, r0
    52a0:	617b      	str	r3, [r7, #20]
    52a2:	e00a      	b.n	52ba <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    52a4:	2313      	movs	r3, #19
    52a6:	18fb      	adds	r3, r7, r3
    52a8:	781b      	ldrb	r3, [r3, #0]
    52aa:	2b00      	cmp	r3, #0
    52ac:	d005      	beq.n	52ba <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    52ae:	68fb      	ldr	r3, [r7, #12]
    52b0:	3301      	adds	r3, #1
    52b2:	697a      	ldr	r2, [r7, #20]
    52b4:	40da      	lsrs	r2, r3
    52b6:	0013      	movs	r3, r2
    52b8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    52ba:	697b      	ldr	r3, [r7, #20]
}
    52bc:	0018      	movs	r0, r3
    52be:	46bd      	mov	sp, r7
    52c0:	b006      	add	sp, #24
    52c2:	bd80      	pop	{r7, pc}
    52c4:	0000503d 	.word	0x0000503d
    52c8:	00005015 	.word	0x00005015
    52cc:	40000c04 	.word	0x40000c04
    52d0:	40000c00 	.word	0x40000c00
    52d4:	00004cc9 	.word	0x00004cc9
    52d8:	40000c08 	.word	0x40000c08
    52dc:	00005029 	.word	0x00005029
    52e0:	00005641 	.word	0x00005641

000052e4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    52e4:	b580      	push	{r7, lr}
    52e6:	b084      	sub	sp, #16
    52e8:	af00      	add	r7, sp, #0
    52ea:	0002      	movs	r2, r0
    52ec:	6039      	str	r1, [r7, #0]
    52ee:	1dfb      	adds	r3, r7, #7
    52f0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    52f2:	1dfb      	adds	r3, r7, #7
    52f4:	781b      	ldrb	r3, [r3, #0]
    52f6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    52f8:	683b      	ldr	r3, [r7, #0]
    52fa:	781b      	ldrb	r3, [r3, #0]
    52fc:	021b      	lsls	r3, r3, #8
    52fe:	001a      	movs	r2, r3
    5300:	68fb      	ldr	r3, [r7, #12]
    5302:	4313      	orrs	r3, r2
    5304:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    5306:	1dfb      	adds	r3, r7, #7
    5308:	781b      	ldrb	r3, [r3, #0]
    530a:	0018      	movs	r0, r3
    530c:	4b04      	ldr	r3, [pc, #16]	; (5320 <system_gclk_chan_set_config+0x3c>)
    530e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5310:	4b04      	ldr	r3, [pc, #16]	; (5324 <system_gclk_chan_set_config+0x40>)
    5312:	68fa      	ldr	r2, [r7, #12]
    5314:	b292      	uxth	r2, r2
    5316:	805a      	strh	r2, [r3, #2]
}
    5318:	46c0      	nop			; (mov r8, r8)
    531a:	46bd      	mov	sp, r7
    531c:	b004      	add	sp, #16
    531e:	bd80      	pop	{r7, pc}
    5320:	00005371 	.word	0x00005371
    5324:	40000c00 	.word	0x40000c00

00005328 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5328:	b580      	push	{r7, lr}
    532a:	b082      	sub	sp, #8
    532c:	af00      	add	r7, sp, #0
    532e:	0002      	movs	r2, r0
    5330:	1dfb      	adds	r3, r7, #7
    5332:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5334:	4b0a      	ldr	r3, [pc, #40]	; (5360 <system_gclk_chan_enable+0x38>)
    5336:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5338:	4a0a      	ldr	r2, [pc, #40]	; (5364 <system_gclk_chan_enable+0x3c>)
    533a:	1dfb      	adds	r3, r7, #7
    533c:	781b      	ldrb	r3, [r3, #0]
    533e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5340:	4909      	ldr	r1, [pc, #36]	; (5368 <system_gclk_chan_enable+0x40>)
    5342:	4b09      	ldr	r3, [pc, #36]	; (5368 <system_gclk_chan_enable+0x40>)
    5344:	885b      	ldrh	r3, [r3, #2]
    5346:	b29b      	uxth	r3, r3
    5348:	2280      	movs	r2, #128	; 0x80
    534a:	01d2      	lsls	r2, r2, #7
    534c:	4313      	orrs	r3, r2
    534e:	b29b      	uxth	r3, r3
    5350:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    5352:	4b06      	ldr	r3, [pc, #24]	; (536c <system_gclk_chan_enable+0x44>)
    5354:	4798      	blx	r3
}
    5356:	46c0      	nop			; (mov r8, r8)
    5358:	46bd      	mov	sp, r7
    535a:	b002      	add	sp, #8
    535c:	bd80      	pop	{r7, pc}
    535e:	46c0      	nop			; (mov r8, r8)
    5360:	00005015 	.word	0x00005015
    5364:	40000c02 	.word	0x40000c02
    5368:	40000c00 	.word	0x40000c00
    536c:	00005029 	.word	0x00005029

00005370 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5370:	b580      	push	{r7, lr}
    5372:	b084      	sub	sp, #16
    5374:	af00      	add	r7, sp, #0
    5376:	0002      	movs	r2, r0
    5378:	1dfb      	adds	r3, r7, #7
    537a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    537c:	4b1c      	ldr	r3, [pc, #112]	; (53f0 <system_gclk_chan_disable+0x80>)
    537e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5380:	4a1c      	ldr	r2, [pc, #112]	; (53f4 <system_gclk_chan_disable+0x84>)
    5382:	1dfb      	adds	r3, r7, #7
    5384:	781b      	ldrb	r3, [r3, #0]
    5386:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5388:	4b1b      	ldr	r3, [pc, #108]	; (53f8 <system_gclk_chan_disable+0x88>)
    538a:	885b      	ldrh	r3, [r3, #2]
    538c:	051b      	lsls	r3, r3, #20
    538e:	0f1b      	lsrs	r3, r3, #28
    5390:	b2db      	uxtb	r3, r3
    5392:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    5394:	4a18      	ldr	r2, [pc, #96]	; (53f8 <system_gclk_chan_disable+0x88>)
    5396:	8853      	ldrh	r3, [r2, #2]
    5398:	4918      	ldr	r1, [pc, #96]	; (53fc <system_gclk_chan_disable+0x8c>)
    539a:	400b      	ands	r3, r1
    539c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    539e:	4a16      	ldr	r2, [pc, #88]	; (53f8 <system_gclk_chan_disable+0x88>)
    53a0:	4b15      	ldr	r3, [pc, #84]	; (53f8 <system_gclk_chan_disable+0x88>)
    53a2:	885b      	ldrh	r3, [r3, #2]
    53a4:	b29b      	uxth	r3, r3
    53a6:	4916      	ldr	r1, [pc, #88]	; (5400 <system_gclk_chan_disable+0x90>)
    53a8:	400b      	ands	r3, r1
    53aa:	b29b      	uxth	r3, r3
    53ac:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    53ae:	46c0      	nop			; (mov r8, r8)
    53b0:	4b11      	ldr	r3, [pc, #68]	; (53f8 <system_gclk_chan_disable+0x88>)
    53b2:	885b      	ldrh	r3, [r3, #2]
    53b4:	b29b      	uxth	r3, r3
    53b6:	001a      	movs	r2, r3
    53b8:	2380      	movs	r3, #128	; 0x80
    53ba:	01db      	lsls	r3, r3, #7
    53bc:	4013      	ands	r3, r2
    53be:	d1f7      	bne.n	53b0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    53c0:	4a0d      	ldr	r2, [pc, #52]	; (53f8 <system_gclk_chan_disable+0x88>)
    53c2:	68fb      	ldr	r3, [r7, #12]
    53c4:	b2db      	uxtb	r3, r3
    53c6:	1c19      	adds	r1, r3, #0
    53c8:	230f      	movs	r3, #15
    53ca:	400b      	ands	r3, r1
    53cc:	b2d9      	uxtb	r1, r3
    53ce:	8853      	ldrh	r3, [r2, #2]
    53d0:	1c08      	adds	r0, r1, #0
    53d2:	210f      	movs	r1, #15
    53d4:	4001      	ands	r1, r0
    53d6:	0208      	lsls	r0, r1, #8
    53d8:	4908      	ldr	r1, [pc, #32]	; (53fc <system_gclk_chan_disable+0x8c>)
    53da:	400b      	ands	r3, r1
    53dc:	1c19      	adds	r1, r3, #0
    53de:	1c03      	adds	r3, r0, #0
    53e0:	430b      	orrs	r3, r1
    53e2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    53e4:	4b07      	ldr	r3, [pc, #28]	; (5404 <system_gclk_chan_disable+0x94>)
    53e6:	4798      	blx	r3
}
    53e8:	46c0      	nop			; (mov r8, r8)
    53ea:	46bd      	mov	sp, r7
    53ec:	b004      	add	sp, #16
    53ee:	bd80      	pop	{r7, pc}
    53f0:	00005015 	.word	0x00005015
    53f4:	40000c02 	.word	0x40000c02
    53f8:	40000c00 	.word	0x40000c00
    53fc:	fffff0ff 	.word	0xfffff0ff
    5400:	ffffbfff 	.word	0xffffbfff
    5404:	00005029 	.word	0x00005029

00005408 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5408:	b580      	push	{r7, lr}
    540a:	b084      	sub	sp, #16
    540c:	af00      	add	r7, sp, #0
    540e:	0002      	movs	r2, r0
    5410:	1dfb      	adds	r3, r7, #7
    5412:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    5414:	4b0d      	ldr	r3, [pc, #52]	; (544c <system_gclk_chan_get_hz+0x44>)
    5416:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5418:	4a0d      	ldr	r2, [pc, #52]	; (5450 <system_gclk_chan_get_hz+0x48>)
    541a:	1dfb      	adds	r3, r7, #7
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5420:	4b0c      	ldr	r3, [pc, #48]	; (5454 <system_gclk_chan_get_hz+0x4c>)
    5422:	885b      	ldrh	r3, [r3, #2]
    5424:	051b      	lsls	r3, r3, #20
    5426:	0f1b      	lsrs	r3, r3, #28
    5428:	b2da      	uxtb	r2, r3
    542a:	230f      	movs	r3, #15
    542c:	18fb      	adds	r3, r7, r3
    542e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    5430:	4b09      	ldr	r3, [pc, #36]	; (5458 <system_gclk_chan_get_hz+0x50>)
    5432:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5434:	230f      	movs	r3, #15
    5436:	18fb      	adds	r3, r7, r3
    5438:	781b      	ldrb	r3, [r3, #0]
    543a:	0018      	movs	r0, r3
    543c:	4b07      	ldr	r3, [pc, #28]	; (545c <system_gclk_chan_get_hz+0x54>)
    543e:	4798      	blx	r3
    5440:	0003      	movs	r3, r0
}
    5442:	0018      	movs	r0, r3
    5444:	46bd      	mov	sp, r7
    5446:	b004      	add	sp, #16
    5448:	bd80      	pop	{r7, pc}
    544a:	46c0      	nop			; (mov r8, r8)
    544c:	00005015 	.word	0x00005015
    5450:	40000c02 	.word	0x40000c02
    5454:	40000c00 	.word	0x40000c00
    5458:	00005029 	.word	0x00005029
    545c:	0000520d 	.word	0x0000520d

00005460 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    5460:	b580      	push	{r7, lr}
    5462:	af00      	add	r7, sp, #0
	return;
    5464:	46c0      	nop			; (mov r8, r8)
}
    5466:	46bd      	mov	sp, r7
    5468:	bd80      	pop	{r7, pc}
	...

0000546c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    546c:	b580      	push	{r7, lr}
    546e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5470:	4b06      	ldr	r3, [pc, #24]	; (548c <system_init+0x20>)
    5472:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5474:	4b06      	ldr	r3, [pc, #24]	; (5490 <system_init+0x24>)
    5476:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5478:	4b06      	ldr	r3, [pc, #24]	; (5494 <system_init+0x28>)
    547a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    547c:	4b06      	ldr	r3, [pc, #24]	; (5498 <system_init+0x2c>)
    547e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5480:	4b06      	ldr	r3, [pc, #24]	; (549c <system_init+0x30>)
    5482:	4798      	blx	r3
}
    5484:	46c0      	nop			; (mov r8, r8)
    5486:	46bd      	mov	sp, r7
    5488:	bd80      	pop	{r7, pc}
    548a:	46c0      	nop			; (mov r8, r8)
    548c:	00004ee5 	.word	0x00004ee5
    5490:	000002a5 	.word	0x000002a5
    5494:	00005461 	.word	0x00005461
    5498:	00005461 	.word	0x00005461
    549c:	00005461 	.word	0x00005461

000054a0 <system_interrupt_enable_global>:
{
    54a0:	b580      	push	{r7, lr}
    54a2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    54a4:	4b04      	ldr	r3, [pc, #16]	; (54b8 <system_interrupt_enable_global+0x18>)
    54a6:	2201      	movs	r2, #1
    54a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    54aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    54ae:	b662      	cpsie	i
}
    54b0:	46c0      	nop			; (mov r8, r8)
    54b2:	46bd      	mov	sp, r7
    54b4:	bd80      	pop	{r7, pc}
    54b6:	46c0      	nop			; (mov r8, r8)
    54b8:	20000000 	.word	0x20000000

000054bc <main>:

volatile char buffer[7];


int main (void)
{
    54bc:	b590      	push	{r4, r7, lr}
    54be:	b089      	sub	sp, #36	; 0x24
    54c0:	af00      	add	r7, sp, #0
	//Board Initialization -- Code that initializes the HW and happens only once
	system_init();
    54c2:	4b1b      	ldr	r3, [pc, #108]	; (5530 <main+0x74>)
    54c4:	4798      	blx	r3
	InitializeSerialConsole();
    54c6:	4b1b      	ldr	r3, [pc, #108]	; (5534 <main+0x78>)
    54c8:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */


	system_interrupt_enable_global();
    54ca:	4b1b      	ldr	r3, [pc, #108]	; (5538 <main+0x7c>)
    54cc:	4798      	blx	r3
	
	SerialConsoleWriteString("ESE516 - CLI and Debug Logger\r\n");	//Order to add string to TX Buffer
    54ce:	4b1b      	ldr	r3, [pc, #108]	; (553c <main+0x80>)
    54d0:	0018      	movs	r0, r3
    54d2:	4b1b      	ldr	r3, [pc, #108]	; (5540 <main+0x84>)
    54d4:	4798      	blx	r3
	
	char string[] = "CLI starter code - ESE516\r\n";
    54d6:	1d3b      	adds	r3, r7, #4
    54d8:	4a1a      	ldr	r2, [pc, #104]	; (5544 <main+0x88>)
    54da:	ca13      	ldmia	r2!, {r0, r1, r4}
    54dc:	c313      	stmia	r3!, {r0, r1, r4}
    54de:	ca13      	ldmia	r2!, {r0, r1, r4}
    54e0:	c313      	stmia	r3!, {r0, r1, r4}
    54e2:	6812      	ldr	r2, [r2, #0]
    54e4:	601a      	str	r2, [r3, #0]
	
	/*Simple DebugLogger Test*/
	setLogLevel(LOG_INFO_LVL); 
    54e6:	2000      	movs	r0, #0
    54e8:	4b17      	ldr	r3, [pc, #92]	; (5548 <main+0x8c>)
    54ea:	4798      	blx	r3
	LogMessage(LOG_INFO_LVL , "%s", string); //Test
    54ec:	1d3a      	adds	r2, r7, #4
    54ee:	4b17      	ldr	r3, [pc, #92]	; (554c <main+0x90>)
    54f0:	0019      	movs	r1, r3
    54f2:	2000      	movs	r0, #0
    54f4:	4b16      	ldr	r3, [pc, #88]	; (5550 <main+0x94>)
    54f6:	4798      	blx	r3
	setLogLevel(LOG_ERROR_LVL); //Sets the Debug Logger to only allow messages with LOG_ERROR_LVL or higher to be printed
    54f8:	2003      	movs	r0, #3
    54fa:	4b13      	ldr	r3, [pc, #76]	; (5548 <main+0x8c>)
    54fc:	4798      	blx	r3
	LogMessage(LOG_INFO_LVL, "Performing Temperature Test\r\n"); //This should NOT print
    54fe:	4b15      	ldr	r3, [pc, #84]	; (5554 <main+0x98>)
    5500:	0019      	movs	r1, r3
    5502:	2000      	movs	r0, #0
    5504:	4b12      	ldr	r3, [pc, #72]	; (5550 <main+0x94>)
    5506:	4798      	blx	r3
	LogMessage(LOG_FATAL_LVL,"Error! Temperature over %d Degrees!\r\n", 55); //This should print
    5508:	4b13      	ldr	r3, [pc, #76]	; (5558 <main+0x9c>)
    550a:	2237      	movs	r2, #55	; 0x37
    550c:	0019      	movs	r1, r3
    550e:	2004      	movs	r0, #4
    5510:	4b0f      	ldr	r3, [pc, #60]	; (5550 <main+0x94>)
    5512:	4798      	blx	r3
	LogMessage(LOG_ERROR_LVL,"System error!\r\n"); //This should print , since they are the same level
    5514:	4b11      	ldr	r3, [pc, #68]	; (555c <main+0xa0>)
    5516:	0019      	movs	r1, r3
    5518:	2003      	movs	r0, #3
    551a:	4b0d      	ldr	r3, [pc, #52]	; (5550 <main+0x94>)
    551c:	4798      	blx	r3
	
    LogMessage(LOG_INFO_LVL , "ESE516 CLI STARTER PROJECT STARTED\r\n"); //this should not print since it is error level now
    551e:	4b10      	ldr	r3, [pc, #64]	; (5560 <main+0xa4>)
    5520:	0019      	movs	r1, r3
    5522:	2000      	movs	r0, #0
    5524:	4b0a      	ldr	r3, [pc, #40]	; (5550 <main+0x94>)
    5526:	4798      	blx	r3

    // Start FreeRTOS scheduler.
    vTaskStartScheduler();
    5528:	4b0e      	ldr	r3, [pc, #56]	; (5564 <main+0xa8>)
    552a:	4798      	blx	r3

	while(1);
    552c:	e7fe      	b.n	552c <main+0x70>
    552e:	46c0      	nop			; (mov r8, r8)
    5530:	0000546d 	.word	0x0000546d
    5534:	00003b41 	.word	0x00003b41
    5538:	000054a1 	.word	0x000054a1
    553c:	00006454 	.word	0x00006454
    5540:	00003bbd 	.word	0x00003bbd
    5544:	000064f8 	.word	0x000064f8
    5548:	00003c49 	.word	0x00003c49
    554c:	00006474 	.word	0x00006474
    5550:	00003c69 	.word	0x00003c69
    5554:	00006478 	.word	0x00006478
    5558:	00006498 	.word	0x00006498
    555c:	000064c0 	.word	0x000064c0
    5560:	000064d0 	.word	0x000064d0
    5564:	0000224d 	.word	0x0000224d

00005568 <StartTasks>:
* @details
* @param[in]        None
* @return           None
*****************************************************************************/
static void StartTasks(void)
{
    5568:	b590      	push	{r4, r7, lr}
    556a:	b083      	sub	sp, #12
    556c:	af02      	add	r7, sp, #8
	

	snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
    556e:	4b17      	ldr	r3, [pc, #92]	; (55cc <StartTasks+0x64>)
    5570:	4798      	blx	r3
    5572:	0003      	movs	r3, r0
    5574:	4a16      	ldr	r2, [pc, #88]	; (55d0 <StartTasks+0x68>)
    5576:	4817      	ldr	r0, [pc, #92]	; (55d4 <StartTasks+0x6c>)
    5578:	2140      	movs	r1, #64	; 0x40
    557a:	4c17      	ldr	r4, [pc, #92]	; (55d8 <StartTasks+0x70>)
    557c:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
    557e:	4b15      	ldr	r3, [pc, #84]	; (55d4 <StartTasks+0x6c>)
    5580:	0018      	movs	r0, r3
    5582:	4b16      	ldr	r3, [pc, #88]	; (55dc <StartTasks+0x74>)
    5584:	4798      	blx	r3

	//Initialize Tasks here
	
	if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
    5586:	2380      	movs	r3, #128	; 0x80
    5588:	005a      	lsls	r2, r3, #1
    558a:	4915      	ldr	r1, [pc, #84]	; (55e0 <StartTasks+0x78>)
    558c:	4815      	ldr	r0, [pc, #84]	; (55e4 <StartTasks+0x7c>)
    558e:	4b16      	ldr	r3, [pc, #88]	; (55e8 <StartTasks+0x80>)
    5590:	9301      	str	r3, [sp, #4]
    5592:	2304      	movs	r3, #4
    5594:	9300      	str	r3, [sp, #0]
    5596:	2300      	movs	r3, #0
    5598:	4c14      	ldr	r4, [pc, #80]	; (55ec <StartTasks+0x84>)
    559a:	47a0      	blx	r4
    559c:	0003      	movs	r3, r0
    559e:	2b01      	cmp	r3, #1
    55a0:	d003      	beq.n	55aa <StartTasks+0x42>
		SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
    55a2:	4b13      	ldr	r3, [pc, #76]	; (55f0 <StartTasks+0x88>)
    55a4:	0018      	movs	r0, r3
    55a6:	4b0d      	ldr	r3, [pc, #52]	; (55dc <StartTasks+0x74>)
    55a8:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
    55aa:	4b08      	ldr	r3, [pc, #32]	; (55cc <StartTasks+0x64>)
    55ac:	4798      	blx	r3
    55ae:	0003      	movs	r3, r0
    55b0:	4a10      	ldr	r2, [pc, #64]	; (55f4 <StartTasks+0x8c>)
    55b2:	4808      	ldr	r0, [pc, #32]	; (55d4 <StartTasks+0x6c>)
    55b4:	2140      	movs	r1, #64	; 0x40
    55b6:	4c08      	ldr	r4, [pc, #32]	; (55d8 <StartTasks+0x70>)
    55b8:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
    55ba:	4b06      	ldr	r3, [pc, #24]	; (55d4 <StartTasks+0x6c>)
    55bc:	0018      	movs	r0, r3
    55be:	4b07      	ldr	r3, [pc, #28]	; (55dc <StartTasks+0x74>)
    55c0:	4798      	blx	r3
	
}
    55c2:	46c0      	nop			; (mov r8, r8)
    55c4:	46bd      	mov	sp, r7
    55c6:	b001      	add	sp, #4
    55c8:	bd90      	pop	{r4, r7, pc}
    55ca:	46c0      	nop			; (mov r8, r8)
    55cc:	0000133d 	.word	0x0000133d
    55d0:	00006514 	.word	0x00006514
    55d4:	200033d8 	.word	0x200033d8
    55d8:	000059a1 	.word	0x000059a1
    55dc:	00003bbd 	.word	0x00003bbd
    55e0:	00006538 	.word	0x00006538
    55e4:	000033c9 	.word	0x000033c9
    55e8:	20003418 	.word	0x20003418
    55ec:	00001fb9 	.word	0x00001fb9
    55f0:	00006544 	.word	0x00006544
    55f4:	00006570 	.word	0x00006570

000055f8 <vApplicationDaemonTaskStartupHook>:
* @param[in]        None
* @return           None
*****************************************************************************/

void vApplicationDaemonTaskStartupHook (void *ucParameterToPass) //vApplicationDaemonTaskStartupHook()
{
    55f8:	b580      	push	{r7, lr}
    55fa:	b082      	sub	sp, #8
    55fc:	af00      	add	r7, sp, #0
    55fe:	6078      	str	r0, [r7, #4]
	
	//CODE HERE: Initialize any HW here
	//SerialConsoleWriteString("hi\r\n");
	
	//Initialize tasks
	StartTasks();	
    5600:	4b02      	ldr	r3, [pc, #8]	; (560c <vApplicationDaemonTaskStartupHook+0x14>)
    5602:	4798      	blx	r3
	
	
}
    5604:	46c0      	nop			; (mov r8, r8)
    5606:	46bd      	mov	sp, r7
    5608:	b002      	add	sp, #8
    560a:	bd80      	pop	{r7, pc}
    560c:	00005569 	.word	0x00005569

00005610 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
    5610:	b580      	push	{r7, lr}
    5612:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
    5614:	4b02      	ldr	r3, [pc, #8]	; (5620 <vApplicationMallocFailedHook+0x10>)
    5616:	0018      	movs	r0, r3
    5618:	4b02      	ldr	r3, [pc, #8]	; (5624 <vApplicationMallocFailedHook+0x14>)
    561a:	4798      	blx	r3
	while(1);
    561c:	e7fe      	b.n	561c <vApplicationMallocFailedHook+0xc>
    561e:	46c0      	nop			; (mov r8, r8)
    5620:	00006590 	.word	0x00006590
    5624:	00003bbd 	.word	0x00003bbd

00005628 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(void)
{
    5628:	b580      	push	{r7, lr}
    562a:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
    562c:	4b02      	ldr	r3, [pc, #8]	; (5638 <vApplicationStackOverflowHook+0x10>)
    562e:	0018      	movs	r0, r3
    5630:	4b02      	ldr	r3, [pc, #8]	; (563c <vApplicationStackOverflowHook+0x14>)
    5632:	4798      	blx	r3
	while(1);
    5634:	e7fe      	b.n	5634 <vApplicationStackOverflowHook+0xc>
    5636:	46c0      	nop			; (mov r8, r8)
    5638:	000065bc 	.word	0x000065bc
    563c:	00003bbd 	.word	0x00003bbd

00005640 <__udivsi3>:
    5640:	2200      	movs	r2, #0
    5642:	0843      	lsrs	r3, r0, #1
    5644:	428b      	cmp	r3, r1
    5646:	d374      	bcc.n	5732 <__udivsi3+0xf2>
    5648:	0903      	lsrs	r3, r0, #4
    564a:	428b      	cmp	r3, r1
    564c:	d35f      	bcc.n	570e <__udivsi3+0xce>
    564e:	0a03      	lsrs	r3, r0, #8
    5650:	428b      	cmp	r3, r1
    5652:	d344      	bcc.n	56de <__udivsi3+0x9e>
    5654:	0b03      	lsrs	r3, r0, #12
    5656:	428b      	cmp	r3, r1
    5658:	d328      	bcc.n	56ac <__udivsi3+0x6c>
    565a:	0c03      	lsrs	r3, r0, #16
    565c:	428b      	cmp	r3, r1
    565e:	d30d      	bcc.n	567c <__udivsi3+0x3c>
    5660:	22ff      	movs	r2, #255	; 0xff
    5662:	0209      	lsls	r1, r1, #8
    5664:	ba12      	rev	r2, r2
    5666:	0c03      	lsrs	r3, r0, #16
    5668:	428b      	cmp	r3, r1
    566a:	d302      	bcc.n	5672 <__udivsi3+0x32>
    566c:	1212      	asrs	r2, r2, #8
    566e:	0209      	lsls	r1, r1, #8
    5670:	d065      	beq.n	573e <__udivsi3+0xfe>
    5672:	0b03      	lsrs	r3, r0, #12
    5674:	428b      	cmp	r3, r1
    5676:	d319      	bcc.n	56ac <__udivsi3+0x6c>
    5678:	e000      	b.n	567c <__udivsi3+0x3c>
    567a:	0a09      	lsrs	r1, r1, #8
    567c:	0bc3      	lsrs	r3, r0, #15
    567e:	428b      	cmp	r3, r1
    5680:	d301      	bcc.n	5686 <__udivsi3+0x46>
    5682:	03cb      	lsls	r3, r1, #15
    5684:	1ac0      	subs	r0, r0, r3
    5686:	4152      	adcs	r2, r2
    5688:	0b83      	lsrs	r3, r0, #14
    568a:	428b      	cmp	r3, r1
    568c:	d301      	bcc.n	5692 <__udivsi3+0x52>
    568e:	038b      	lsls	r3, r1, #14
    5690:	1ac0      	subs	r0, r0, r3
    5692:	4152      	adcs	r2, r2
    5694:	0b43      	lsrs	r3, r0, #13
    5696:	428b      	cmp	r3, r1
    5698:	d301      	bcc.n	569e <__udivsi3+0x5e>
    569a:	034b      	lsls	r3, r1, #13
    569c:	1ac0      	subs	r0, r0, r3
    569e:	4152      	adcs	r2, r2
    56a0:	0b03      	lsrs	r3, r0, #12
    56a2:	428b      	cmp	r3, r1
    56a4:	d301      	bcc.n	56aa <__udivsi3+0x6a>
    56a6:	030b      	lsls	r3, r1, #12
    56a8:	1ac0      	subs	r0, r0, r3
    56aa:	4152      	adcs	r2, r2
    56ac:	0ac3      	lsrs	r3, r0, #11
    56ae:	428b      	cmp	r3, r1
    56b0:	d301      	bcc.n	56b6 <__udivsi3+0x76>
    56b2:	02cb      	lsls	r3, r1, #11
    56b4:	1ac0      	subs	r0, r0, r3
    56b6:	4152      	adcs	r2, r2
    56b8:	0a83      	lsrs	r3, r0, #10
    56ba:	428b      	cmp	r3, r1
    56bc:	d301      	bcc.n	56c2 <__udivsi3+0x82>
    56be:	028b      	lsls	r3, r1, #10
    56c0:	1ac0      	subs	r0, r0, r3
    56c2:	4152      	adcs	r2, r2
    56c4:	0a43      	lsrs	r3, r0, #9
    56c6:	428b      	cmp	r3, r1
    56c8:	d301      	bcc.n	56ce <__udivsi3+0x8e>
    56ca:	024b      	lsls	r3, r1, #9
    56cc:	1ac0      	subs	r0, r0, r3
    56ce:	4152      	adcs	r2, r2
    56d0:	0a03      	lsrs	r3, r0, #8
    56d2:	428b      	cmp	r3, r1
    56d4:	d301      	bcc.n	56da <__udivsi3+0x9a>
    56d6:	020b      	lsls	r3, r1, #8
    56d8:	1ac0      	subs	r0, r0, r3
    56da:	4152      	adcs	r2, r2
    56dc:	d2cd      	bcs.n	567a <__udivsi3+0x3a>
    56de:	09c3      	lsrs	r3, r0, #7
    56e0:	428b      	cmp	r3, r1
    56e2:	d301      	bcc.n	56e8 <__udivsi3+0xa8>
    56e4:	01cb      	lsls	r3, r1, #7
    56e6:	1ac0      	subs	r0, r0, r3
    56e8:	4152      	adcs	r2, r2
    56ea:	0983      	lsrs	r3, r0, #6
    56ec:	428b      	cmp	r3, r1
    56ee:	d301      	bcc.n	56f4 <__udivsi3+0xb4>
    56f0:	018b      	lsls	r3, r1, #6
    56f2:	1ac0      	subs	r0, r0, r3
    56f4:	4152      	adcs	r2, r2
    56f6:	0943      	lsrs	r3, r0, #5
    56f8:	428b      	cmp	r3, r1
    56fa:	d301      	bcc.n	5700 <__udivsi3+0xc0>
    56fc:	014b      	lsls	r3, r1, #5
    56fe:	1ac0      	subs	r0, r0, r3
    5700:	4152      	adcs	r2, r2
    5702:	0903      	lsrs	r3, r0, #4
    5704:	428b      	cmp	r3, r1
    5706:	d301      	bcc.n	570c <__udivsi3+0xcc>
    5708:	010b      	lsls	r3, r1, #4
    570a:	1ac0      	subs	r0, r0, r3
    570c:	4152      	adcs	r2, r2
    570e:	08c3      	lsrs	r3, r0, #3
    5710:	428b      	cmp	r3, r1
    5712:	d301      	bcc.n	5718 <__udivsi3+0xd8>
    5714:	00cb      	lsls	r3, r1, #3
    5716:	1ac0      	subs	r0, r0, r3
    5718:	4152      	adcs	r2, r2
    571a:	0883      	lsrs	r3, r0, #2
    571c:	428b      	cmp	r3, r1
    571e:	d301      	bcc.n	5724 <__udivsi3+0xe4>
    5720:	008b      	lsls	r3, r1, #2
    5722:	1ac0      	subs	r0, r0, r3
    5724:	4152      	adcs	r2, r2
    5726:	0843      	lsrs	r3, r0, #1
    5728:	428b      	cmp	r3, r1
    572a:	d301      	bcc.n	5730 <__udivsi3+0xf0>
    572c:	004b      	lsls	r3, r1, #1
    572e:	1ac0      	subs	r0, r0, r3
    5730:	4152      	adcs	r2, r2
    5732:	1a41      	subs	r1, r0, r1
    5734:	d200      	bcs.n	5738 <__udivsi3+0xf8>
    5736:	4601      	mov	r1, r0
    5738:	4152      	adcs	r2, r2
    573a:	4610      	mov	r0, r2
    573c:	4770      	bx	lr
    573e:	e7ff      	b.n	5740 <__udivsi3+0x100>
    5740:	b501      	push	{r0, lr}
    5742:	2000      	movs	r0, #0
    5744:	f000 f806 	bl	5754 <__aeabi_idiv0>
    5748:	bd02      	pop	{r1, pc}
    574a:	46c0      	nop			; (mov r8, r8)

0000574c <__aeabi_uidivmod>:
    574c:	2900      	cmp	r1, #0
    574e:	d0f7      	beq.n	5740 <__udivsi3+0x100>
    5750:	e776      	b.n	5640 <__udivsi3>
    5752:	4770      	bx	lr

00005754 <__aeabi_idiv0>:
    5754:	4770      	bx	lr
    5756:	46c0      	nop			; (mov r8, r8)

00005758 <__aeabi_lmul>:
    5758:	b5f0      	push	{r4, r5, r6, r7, lr}
    575a:	46ce      	mov	lr, r9
    575c:	4647      	mov	r7, r8
    575e:	0415      	lsls	r5, r2, #16
    5760:	0c2d      	lsrs	r5, r5, #16
    5762:	002e      	movs	r6, r5
    5764:	b580      	push	{r7, lr}
    5766:	0407      	lsls	r7, r0, #16
    5768:	0c14      	lsrs	r4, r2, #16
    576a:	0c3f      	lsrs	r7, r7, #16
    576c:	4699      	mov	r9, r3
    576e:	0c03      	lsrs	r3, r0, #16
    5770:	437e      	muls	r6, r7
    5772:	435d      	muls	r5, r3
    5774:	4367      	muls	r7, r4
    5776:	4363      	muls	r3, r4
    5778:	197f      	adds	r7, r7, r5
    577a:	0c34      	lsrs	r4, r6, #16
    577c:	19e4      	adds	r4, r4, r7
    577e:	469c      	mov	ip, r3
    5780:	42a5      	cmp	r5, r4
    5782:	d903      	bls.n	578c <__aeabi_lmul+0x34>
    5784:	2380      	movs	r3, #128	; 0x80
    5786:	025b      	lsls	r3, r3, #9
    5788:	4698      	mov	r8, r3
    578a:	44c4      	add	ip, r8
    578c:	464b      	mov	r3, r9
    578e:	4351      	muls	r1, r2
    5790:	4343      	muls	r3, r0
    5792:	0436      	lsls	r6, r6, #16
    5794:	0c36      	lsrs	r6, r6, #16
    5796:	0c25      	lsrs	r5, r4, #16
    5798:	0424      	lsls	r4, r4, #16
    579a:	4465      	add	r5, ip
    579c:	19a4      	adds	r4, r4, r6
    579e:	1859      	adds	r1, r3, r1
    57a0:	1949      	adds	r1, r1, r5
    57a2:	0020      	movs	r0, r4
    57a4:	bc0c      	pop	{r2, r3}
    57a6:	4690      	mov	r8, r2
    57a8:	4699      	mov	r9, r3
    57aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000057ac <__libc_init_array>:
    57ac:	b570      	push	{r4, r5, r6, lr}
    57ae:	2600      	movs	r6, #0
    57b0:	4d0c      	ldr	r5, [pc, #48]	; (57e4 <__libc_init_array+0x38>)
    57b2:	4c0d      	ldr	r4, [pc, #52]	; (57e8 <__libc_init_array+0x3c>)
    57b4:	1b64      	subs	r4, r4, r5
    57b6:	10a4      	asrs	r4, r4, #2
    57b8:	42a6      	cmp	r6, r4
    57ba:	d109      	bne.n	57d0 <__libc_init_array+0x24>
    57bc:	2600      	movs	r6, #0
    57be:	f000 ffb1 	bl	6724 <_init>
    57c2:	4d0a      	ldr	r5, [pc, #40]	; (57ec <__libc_init_array+0x40>)
    57c4:	4c0a      	ldr	r4, [pc, #40]	; (57f0 <__libc_init_array+0x44>)
    57c6:	1b64      	subs	r4, r4, r5
    57c8:	10a4      	asrs	r4, r4, #2
    57ca:	42a6      	cmp	r6, r4
    57cc:	d105      	bne.n	57da <__libc_init_array+0x2e>
    57ce:	bd70      	pop	{r4, r5, r6, pc}
    57d0:	00b3      	lsls	r3, r6, #2
    57d2:	58eb      	ldr	r3, [r5, r3]
    57d4:	4798      	blx	r3
    57d6:	3601      	adds	r6, #1
    57d8:	e7ee      	b.n	57b8 <__libc_init_array+0xc>
    57da:	00b3      	lsls	r3, r6, #2
    57dc:	58eb      	ldr	r3, [r5, r3]
    57de:	4798      	blx	r3
    57e0:	3601      	adds	r6, #1
    57e2:	e7f2      	b.n	57ca <__libc_init_array+0x1e>
    57e4:	00006730 	.word	0x00006730
    57e8:	00006730 	.word	0x00006730
    57ec:	00006730 	.word	0x00006730
    57f0:	00006734 	.word	0x00006734

000057f4 <malloc>:
    57f4:	b510      	push	{r4, lr}
    57f6:	4b03      	ldr	r3, [pc, #12]	; (5804 <malloc+0x10>)
    57f8:	0001      	movs	r1, r0
    57fa:	6818      	ldr	r0, [r3, #0]
    57fc:	f000 f860 	bl	58c0 <_malloc_r>
    5800:	bd10      	pop	{r4, pc}
    5802:	46c0      	nop			; (mov r8, r8)
    5804:	20000014 	.word	0x20000014

00005808 <memcpy>:
    5808:	2300      	movs	r3, #0
    580a:	b510      	push	{r4, lr}
    580c:	429a      	cmp	r2, r3
    580e:	d100      	bne.n	5812 <memcpy+0xa>
    5810:	bd10      	pop	{r4, pc}
    5812:	5ccc      	ldrb	r4, [r1, r3]
    5814:	54c4      	strb	r4, [r0, r3]
    5816:	3301      	adds	r3, #1
    5818:	e7f8      	b.n	580c <memcpy+0x4>

0000581a <memset>:
    581a:	0003      	movs	r3, r0
    581c:	1882      	adds	r2, r0, r2
    581e:	4293      	cmp	r3, r2
    5820:	d100      	bne.n	5824 <memset+0xa>
    5822:	4770      	bx	lr
    5824:	7019      	strb	r1, [r3, #0]
    5826:	3301      	adds	r3, #1
    5828:	e7f9      	b.n	581e <memset+0x4>
	...

0000582c <_free_r>:
    582c:	b570      	push	{r4, r5, r6, lr}
    582e:	0005      	movs	r5, r0
    5830:	2900      	cmp	r1, #0
    5832:	d010      	beq.n	5856 <_free_r+0x2a>
    5834:	1f0c      	subs	r4, r1, #4
    5836:	6823      	ldr	r3, [r4, #0]
    5838:	2b00      	cmp	r3, #0
    583a:	da00      	bge.n	583e <_free_r+0x12>
    583c:	18e4      	adds	r4, r4, r3
    583e:	0028      	movs	r0, r5
    5840:	f000 f992 	bl	5b68 <__malloc_lock>
    5844:	4a1d      	ldr	r2, [pc, #116]	; (58bc <_free_r+0x90>)
    5846:	6813      	ldr	r3, [r2, #0]
    5848:	2b00      	cmp	r3, #0
    584a:	d105      	bne.n	5858 <_free_r+0x2c>
    584c:	6063      	str	r3, [r4, #4]
    584e:	6014      	str	r4, [r2, #0]
    5850:	0028      	movs	r0, r5
    5852:	f000 f98a 	bl	5b6a <__malloc_unlock>
    5856:	bd70      	pop	{r4, r5, r6, pc}
    5858:	42a3      	cmp	r3, r4
    585a:	d909      	bls.n	5870 <_free_r+0x44>
    585c:	6821      	ldr	r1, [r4, #0]
    585e:	1860      	adds	r0, r4, r1
    5860:	4283      	cmp	r3, r0
    5862:	d1f3      	bne.n	584c <_free_r+0x20>
    5864:	6818      	ldr	r0, [r3, #0]
    5866:	685b      	ldr	r3, [r3, #4]
    5868:	1841      	adds	r1, r0, r1
    586a:	6021      	str	r1, [r4, #0]
    586c:	e7ee      	b.n	584c <_free_r+0x20>
    586e:	0013      	movs	r3, r2
    5870:	685a      	ldr	r2, [r3, #4]
    5872:	2a00      	cmp	r2, #0
    5874:	d001      	beq.n	587a <_free_r+0x4e>
    5876:	42a2      	cmp	r2, r4
    5878:	d9f9      	bls.n	586e <_free_r+0x42>
    587a:	6819      	ldr	r1, [r3, #0]
    587c:	1858      	adds	r0, r3, r1
    587e:	42a0      	cmp	r0, r4
    5880:	d10b      	bne.n	589a <_free_r+0x6e>
    5882:	6820      	ldr	r0, [r4, #0]
    5884:	1809      	adds	r1, r1, r0
    5886:	1858      	adds	r0, r3, r1
    5888:	6019      	str	r1, [r3, #0]
    588a:	4282      	cmp	r2, r0
    588c:	d1e0      	bne.n	5850 <_free_r+0x24>
    588e:	6810      	ldr	r0, [r2, #0]
    5890:	6852      	ldr	r2, [r2, #4]
    5892:	1841      	adds	r1, r0, r1
    5894:	6019      	str	r1, [r3, #0]
    5896:	605a      	str	r2, [r3, #4]
    5898:	e7da      	b.n	5850 <_free_r+0x24>
    589a:	42a0      	cmp	r0, r4
    589c:	d902      	bls.n	58a4 <_free_r+0x78>
    589e:	230c      	movs	r3, #12
    58a0:	602b      	str	r3, [r5, #0]
    58a2:	e7d5      	b.n	5850 <_free_r+0x24>
    58a4:	6821      	ldr	r1, [r4, #0]
    58a6:	1860      	adds	r0, r4, r1
    58a8:	4282      	cmp	r2, r0
    58aa:	d103      	bne.n	58b4 <_free_r+0x88>
    58ac:	6810      	ldr	r0, [r2, #0]
    58ae:	6852      	ldr	r2, [r2, #4]
    58b0:	1841      	adds	r1, r0, r1
    58b2:	6021      	str	r1, [r4, #0]
    58b4:	6062      	str	r2, [r4, #4]
    58b6:	605c      	str	r4, [r3, #4]
    58b8:	e7ca      	b.n	5850 <_free_r+0x24>
    58ba:	46c0      	nop			; (mov r8, r8)
    58bc:	2000341c 	.word	0x2000341c

000058c0 <_malloc_r>:
    58c0:	2303      	movs	r3, #3
    58c2:	b570      	push	{r4, r5, r6, lr}
    58c4:	1ccd      	adds	r5, r1, #3
    58c6:	439d      	bics	r5, r3
    58c8:	3508      	adds	r5, #8
    58ca:	0006      	movs	r6, r0
    58cc:	2d0c      	cmp	r5, #12
    58ce:	d21e      	bcs.n	590e <_malloc_r+0x4e>
    58d0:	250c      	movs	r5, #12
    58d2:	42a9      	cmp	r1, r5
    58d4:	d81d      	bhi.n	5912 <_malloc_r+0x52>
    58d6:	0030      	movs	r0, r6
    58d8:	f000 f946 	bl	5b68 <__malloc_lock>
    58dc:	4a25      	ldr	r2, [pc, #148]	; (5974 <_malloc_r+0xb4>)
    58de:	6814      	ldr	r4, [r2, #0]
    58e0:	0021      	movs	r1, r4
    58e2:	2900      	cmp	r1, #0
    58e4:	d119      	bne.n	591a <_malloc_r+0x5a>
    58e6:	4c24      	ldr	r4, [pc, #144]	; (5978 <_malloc_r+0xb8>)
    58e8:	6823      	ldr	r3, [r4, #0]
    58ea:	2b00      	cmp	r3, #0
    58ec:	d103      	bne.n	58f6 <_malloc_r+0x36>
    58ee:	0030      	movs	r0, r6
    58f0:	f000 f844 	bl	597c <_sbrk_r>
    58f4:	6020      	str	r0, [r4, #0]
    58f6:	0029      	movs	r1, r5
    58f8:	0030      	movs	r0, r6
    58fa:	f000 f83f 	bl	597c <_sbrk_r>
    58fe:	1c43      	adds	r3, r0, #1
    5900:	d12c      	bne.n	595c <_malloc_r+0x9c>
    5902:	230c      	movs	r3, #12
    5904:	0030      	movs	r0, r6
    5906:	6033      	str	r3, [r6, #0]
    5908:	f000 f92f 	bl	5b6a <__malloc_unlock>
    590c:	e003      	b.n	5916 <_malloc_r+0x56>
    590e:	2d00      	cmp	r5, #0
    5910:	dadf      	bge.n	58d2 <_malloc_r+0x12>
    5912:	230c      	movs	r3, #12
    5914:	6033      	str	r3, [r6, #0]
    5916:	2000      	movs	r0, #0
    5918:	bd70      	pop	{r4, r5, r6, pc}
    591a:	680b      	ldr	r3, [r1, #0]
    591c:	1b5b      	subs	r3, r3, r5
    591e:	d41a      	bmi.n	5956 <_malloc_r+0x96>
    5920:	2b0b      	cmp	r3, #11
    5922:	d903      	bls.n	592c <_malloc_r+0x6c>
    5924:	600b      	str	r3, [r1, #0]
    5926:	18cc      	adds	r4, r1, r3
    5928:	6025      	str	r5, [r4, #0]
    592a:	e003      	b.n	5934 <_malloc_r+0x74>
    592c:	428c      	cmp	r4, r1
    592e:	d10e      	bne.n	594e <_malloc_r+0x8e>
    5930:	6863      	ldr	r3, [r4, #4]
    5932:	6013      	str	r3, [r2, #0]
    5934:	0030      	movs	r0, r6
    5936:	f000 f918 	bl	5b6a <__malloc_unlock>
    593a:	0020      	movs	r0, r4
    593c:	2207      	movs	r2, #7
    593e:	300b      	adds	r0, #11
    5940:	1d23      	adds	r3, r4, #4
    5942:	4390      	bics	r0, r2
    5944:	1ac3      	subs	r3, r0, r3
    5946:	d0e7      	beq.n	5918 <_malloc_r+0x58>
    5948:	425a      	negs	r2, r3
    594a:	50e2      	str	r2, [r4, r3]
    594c:	e7e4      	b.n	5918 <_malloc_r+0x58>
    594e:	684b      	ldr	r3, [r1, #4]
    5950:	6063      	str	r3, [r4, #4]
    5952:	000c      	movs	r4, r1
    5954:	e7ee      	b.n	5934 <_malloc_r+0x74>
    5956:	000c      	movs	r4, r1
    5958:	6849      	ldr	r1, [r1, #4]
    595a:	e7c2      	b.n	58e2 <_malloc_r+0x22>
    595c:	2303      	movs	r3, #3
    595e:	1cc4      	adds	r4, r0, #3
    5960:	439c      	bics	r4, r3
    5962:	42a0      	cmp	r0, r4
    5964:	d0e0      	beq.n	5928 <_malloc_r+0x68>
    5966:	1a21      	subs	r1, r4, r0
    5968:	0030      	movs	r0, r6
    596a:	f000 f807 	bl	597c <_sbrk_r>
    596e:	1c43      	adds	r3, r0, #1
    5970:	d1da      	bne.n	5928 <_malloc_r+0x68>
    5972:	e7c6      	b.n	5902 <_malloc_r+0x42>
    5974:	2000341c 	.word	0x2000341c
    5978:	20003420 	.word	0x20003420

0000597c <_sbrk_r>:
    597c:	2300      	movs	r3, #0
    597e:	b570      	push	{r4, r5, r6, lr}
    5980:	4c06      	ldr	r4, [pc, #24]	; (599c <_sbrk_r+0x20>)
    5982:	0005      	movs	r5, r0
    5984:	0008      	movs	r0, r1
    5986:	6023      	str	r3, [r4, #0]
    5988:	f7fb f93a 	bl	c00 <_sbrk>
    598c:	1c43      	adds	r3, r0, #1
    598e:	d103      	bne.n	5998 <_sbrk_r+0x1c>
    5990:	6823      	ldr	r3, [r4, #0]
    5992:	2b00      	cmp	r3, #0
    5994:	d000      	beq.n	5998 <_sbrk_r+0x1c>
    5996:	602b      	str	r3, [r5, #0]
    5998:	bd70      	pop	{r4, r5, r6, pc}
    599a:	46c0      	nop			; (mov r8, r8)
    599c:	200038d4 	.word	0x200038d4

000059a0 <sniprintf>:
    59a0:	b40c      	push	{r2, r3}
    59a2:	b530      	push	{r4, r5, lr}
    59a4:	4b16      	ldr	r3, [pc, #88]	; (5a00 <sniprintf+0x60>)
    59a6:	b09d      	sub	sp, #116	; 0x74
    59a8:	1e0c      	subs	r4, r1, #0
    59aa:	681d      	ldr	r5, [r3, #0]
    59ac:	da08      	bge.n	59c0 <sniprintf+0x20>
    59ae:	238b      	movs	r3, #139	; 0x8b
    59b0:	2001      	movs	r0, #1
    59b2:	602b      	str	r3, [r5, #0]
    59b4:	4240      	negs	r0, r0
    59b6:	b01d      	add	sp, #116	; 0x74
    59b8:	bc30      	pop	{r4, r5}
    59ba:	bc08      	pop	{r3}
    59bc:	b002      	add	sp, #8
    59be:	4718      	bx	r3
    59c0:	2382      	movs	r3, #130	; 0x82
    59c2:	a902      	add	r1, sp, #8
    59c4:	009b      	lsls	r3, r3, #2
    59c6:	818b      	strh	r3, [r1, #12]
    59c8:	2300      	movs	r3, #0
    59ca:	9002      	str	r0, [sp, #8]
    59cc:	6108      	str	r0, [r1, #16]
    59ce:	429c      	cmp	r4, r3
    59d0:	d000      	beq.n	59d4 <sniprintf+0x34>
    59d2:	1e63      	subs	r3, r4, #1
    59d4:	608b      	str	r3, [r1, #8]
    59d6:	614b      	str	r3, [r1, #20]
    59d8:	2301      	movs	r3, #1
    59da:	425b      	negs	r3, r3
    59dc:	81cb      	strh	r3, [r1, #14]
    59de:	9a20      	ldr	r2, [sp, #128]	; 0x80
    59e0:	ab21      	add	r3, sp, #132	; 0x84
    59e2:	0028      	movs	r0, r5
    59e4:	9301      	str	r3, [sp, #4]
    59e6:	f000 f923 	bl	5c30 <_svfiprintf_r>
    59ea:	1c43      	adds	r3, r0, #1
    59ec:	da01      	bge.n	59f2 <sniprintf+0x52>
    59ee:	238b      	movs	r3, #139	; 0x8b
    59f0:	602b      	str	r3, [r5, #0]
    59f2:	2c00      	cmp	r4, #0
    59f4:	d0df      	beq.n	59b6 <sniprintf+0x16>
    59f6:	2300      	movs	r3, #0
    59f8:	9a02      	ldr	r2, [sp, #8]
    59fa:	7013      	strb	r3, [r2, #0]
    59fc:	e7db      	b.n	59b6 <sniprintf+0x16>
    59fe:	46c0      	nop			; (mov r8, r8)
    5a00:	20000014 	.word	0x20000014

00005a04 <siprintf>:
    5a04:	b40e      	push	{r1, r2, r3}
    5a06:	b510      	push	{r4, lr}
    5a08:	b09d      	sub	sp, #116	; 0x74
    5a0a:	a902      	add	r1, sp, #8
    5a0c:	9002      	str	r0, [sp, #8]
    5a0e:	6108      	str	r0, [r1, #16]
    5a10:	480b      	ldr	r0, [pc, #44]	; (5a40 <siprintf+0x3c>)
    5a12:	2482      	movs	r4, #130	; 0x82
    5a14:	6088      	str	r0, [r1, #8]
    5a16:	6148      	str	r0, [r1, #20]
    5a18:	2001      	movs	r0, #1
    5a1a:	4240      	negs	r0, r0
    5a1c:	ab1f      	add	r3, sp, #124	; 0x7c
    5a1e:	81c8      	strh	r0, [r1, #14]
    5a20:	4808      	ldr	r0, [pc, #32]	; (5a44 <siprintf+0x40>)
    5a22:	cb04      	ldmia	r3!, {r2}
    5a24:	00a4      	lsls	r4, r4, #2
    5a26:	6800      	ldr	r0, [r0, #0]
    5a28:	9301      	str	r3, [sp, #4]
    5a2a:	818c      	strh	r4, [r1, #12]
    5a2c:	f000 f900 	bl	5c30 <_svfiprintf_r>
    5a30:	2300      	movs	r3, #0
    5a32:	9a02      	ldr	r2, [sp, #8]
    5a34:	7013      	strb	r3, [r2, #0]
    5a36:	b01d      	add	sp, #116	; 0x74
    5a38:	bc10      	pop	{r4}
    5a3a:	bc08      	pop	{r3}
    5a3c:	b003      	add	sp, #12
    5a3e:	4718      	bx	r3
    5a40:	7fffffff 	.word	0x7fffffff
    5a44:	20000014 	.word	0x20000014

00005a48 <strcasecmp>:
    5a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a4a:	0007      	movs	r7, r0
    5a4c:	000e      	movs	r6, r1
    5a4e:	783c      	ldrb	r4, [r7, #0]
    5a50:	f000 f86a 	bl	5b28 <__locale_ctype_ptr>
    5a54:	2203      	movs	r2, #3
    5a56:	1900      	adds	r0, r0, r4
    5a58:	7843      	ldrb	r3, [r0, #1]
    5a5a:	4013      	ands	r3, r2
    5a5c:	2b01      	cmp	r3, #1
    5a5e:	d100      	bne.n	5a62 <strcasecmp+0x1a>
    5a60:	3420      	adds	r4, #32
    5a62:	7835      	ldrb	r5, [r6, #0]
    5a64:	f000 f860 	bl	5b28 <__locale_ctype_ptr>
    5a68:	2203      	movs	r2, #3
    5a6a:	1940      	adds	r0, r0, r5
    5a6c:	7843      	ldrb	r3, [r0, #1]
    5a6e:	4013      	ands	r3, r2
    5a70:	2b01      	cmp	r3, #1
    5a72:	d100      	bne.n	5a76 <strcasecmp+0x2e>
    5a74:	3520      	adds	r5, #32
    5a76:	1b60      	subs	r0, r4, r5
    5a78:	d103      	bne.n	5a82 <strcasecmp+0x3a>
    5a7a:	3701      	adds	r7, #1
    5a7c:	3601      	adds	r6, #1
    5a7e:	2d00      	cmp	r5, #0
    5a80:	d1e5      	bne.n	5a4e <strcasecmp+0x6>
    5a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005a84 <strlen>:
    5a84:	2300      	movs	r3, #0
    5a86:	5cc2      	ldrb	r2, [r0, r3]
    5a88:	3301      	adds	r3, #1
    5a8a:	2a00      	cmp	r2, #0
    5a8c:	d1fb      	bne.n	5a86 <strlen+0x2>
    5a8e:	1e58      	subs	r0, r3, #1
    5a90:	4770      	bx	lr

00005a92 <strncmp>:
    5a92:	2300      	movs	r3, #0
    5a94:	b530      	push	{r4, r5, lr}
    5a96:	429a      	cmp	r2, r3
    5a98:	d00a      	beq.n	5ab0 <strncmp+0x1e>
    5a9a:	3a01      	subs	r2, #1
    5a9c:	5cc4      	ldrb	r4, [r0, r3]
    5a9e:	5ccd      	ldrb	r5, [r1, r3]
    5aa0:	42ac      	cmp	r4, r5
    5aa2:	d104      	bne.n	5aae <strncmp+0x1c>
    5aa4:	429a      	cmp	r2, r3
    5aa6:	d002      	beq.n	5aae <strncmp+0x1c>
    5aa8:	3301      	adds	r3, #1
    5aaa:	2c00      	cmp	r4, #0
    5aac:	d1f6      	bne.n	5a9c <strncmp+0xa>
    5aae:	1b63      	subs	r3, r4, r5
    5ab0:	0018      	movs	r0, r3
    5ab2:	bd30      	pop	{r4, r5, pc}

00005ab4 <strncpy>:
    5ab4:	b570      	push	{r4, r5, r6, lr}
    5ab6:	0004      	movs	r4, r0
    5ab8:	2a00      	cmp	r2, #0
    5aba:	d100      	bne.n	5abe <strncpy+0xa>
    5abc:	bd70      	pop	{r4, r5, r6, pc}
    5abe:	780d      	ldrb	r5, [r1, #0]
    5ac0:	1e56      	subs	r6, r2, #1
    5ac2:	1c63      	adds	r3, r4, #1
    5ac4:	7025      	strb	r5, [r4, #0]
    5ac6:	3101      	adds	r1, #1
    5ac8:	2d00      	cmp	r5, #0
    5aca:	d105      	bne.n	5ad8 <strncpy+0x24>
    5acc:	18a4      	adds	r4, r4, r2
    5ace:	429c      	cmp	r4, r3
    5ad0:	d0f4      	beq.n	5abc <strncpy+0x8>
    5ad2:	701d      	strb	r5, [r3, #0]
    5ad4:	3301      	adds	r3, #1
    5ad6:	e7fa      	b.n	5ace <strncpy+0x1a>
    5ad8:	001c      	movs	r4, r3
    5ada:	0032      	movs	r2, r6
    5adc:	e7ec      	b.n	5ab8 <strncpy+0x4>
	...

00005ae0 <_vsiprintf_r>:
    5ae0:	b530      	push	{r4, r5, lr}
    5ae2:	b09b      	sub	sp, #108	; 0x6c
    5ae4:	9100      	str	r1, [sp, #0]
    5ae6:	9104      	str	r1, [sp, #16]
    5ae8:	4908      	ldr	r1, [pc, #32]	; (5b0c <_vsiprintf_r+0x2c>)
    5aea:	466d      	mov	r5, sp
    5aec:	9102      	str	r1, [sp, #8]
    5aee:	9105      	str	r1, [sp, #20]
    5af0:	2101      	movs	r1, #1
    5af2:	2482      	movs	r4, #130	; 0x82
    5af4:	4249      	negs	r1, r1
    5af6:	81e9      	strh	r1, [r5, #14]
    5af8:	00a4      	lsls	r4, r4, #2
    5afa:	4669      	mov	r1, sp
    5afc:	81ac      	strh	r4, [r5, #12]
    5afe:	f000 f897 	bl	5c30 <_svfiprintf_r>
    5b02:	2300      	movs	r3, #0
    5b04:	9a00      	ldr	r2, [sp, #0]
    5b06:	7013      	strb	r3, [r2, #0]
    5b08:	b01b      	add	sp, #108	; 0x6c
    5b0a:	bd30      	pop	{r4, r5, pc}
    5b0c:	7fffffff 	.word	0x7fffffff

00005b10 <vsiprintf>:
    5b10:	b510      	push	{r4, lr}
    5b12:	0013      	movs	r3, r2
    5b14:	000a      	movs	r2, r1
    5b16:	0001      	movs	r1, r0
    5b18:	4802      	ldr	r0, [pc, #8]	; (5b24 <vsiprintf+0x14>)
    5b1a:	6800      	ldr	r0, [r0, #0]
    5b1c:	f7ff ffe0 	bl	5ae0 <_vsiprintf_r>
    5b20:	bd10      	pop	{r4, pc}
    5b22:	46c0      	nop			; (mov r8, r8)
    5b24:	20000014 	.word	0x20000014

00005b28 <__locale_ctype_ptr>:
    5b28:	4b04      	ldr	r3, [pc, #16]	; (5b3c <__locale_ctype_ptr+0x14>)
    5b2a:	681b      	ldr	r3, [r3, #0]
    5b2c:	6a1b      	ldr	r3, [r3, #32]
    5b2e:	2b00      	cmp	r3, #0
    5b30:	d100      	bne.n	5b34 <__locale_ctype_ptr+0xc>
    5b32:	4b03      	ldr	r3, [pc, #12]	; (5b40 <__locale_ctype_ptr+0x18>)
    5b34:	33ec      	adds	r3, #236	; 0xec
    5b36:	6818      	ldr	r0, [r3, #0]
    5b38:	4770      	bx	lr
    5b3a:	46c0      	nop			; (mov r8, r8)
    5b3c:	20000014 	.word	0x20000014
    5b40:	20000078 	.word	0x20000078

00005b44 <__ascii_mbtowc>:
    5b44:	b082      	sub	sp, #8
    5b46:	2900      	cmp	r1, #0
    5b48:	d100      	bne.n	5b4c <__ascii_mbtowc+0x8>
    5b4a:	a901      	add	r1, sp, #4
    5b4c:	1e10      	subs	r0, r2, #0
    5b4e:	d006      	beq.n	5b5e <__ascii_mbtowc+0x1a>
    5b50:	2b00      	cmp	r3, #0
    5b52:	d006      	beq.n	5b62 <__ascii_mbtowc+0x1e>
    5b54:	7813      	ldrb	r3, [r2, #0]
    5b56:	600b      	str	r3, [r1, #0]
    5b58:	7810      	ldrb	r0, [r2, #0]
    5b5a:	1e43      	subs	r3, r0, #1
    5b5c:	4198      	sbcs	r0, r3
    5b5e:	b002      	add	sp, #8
    5b60:	4770      	bx	lr
    5b62:	2002      	movs	r0, #2
    5b64:	4240      	negs	r0, r0
    5b66:	e7fa      	b.n	5b5e <__ascii_mbtowc+0x1a>

00005b68 <__malloc_lock>:
    5b68:	4770      	bx	lr

00005b6a <__malloc_unlock>:
    5b6a:	4770      	bx	lr

00005b6c <__ssputs_r>:
    5b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b6e:	688e      	ldr	r6, [r1, #8]
    5b70:	b085      	sub	sp, #20
    5b72:	0007      	movs	r7, r0
    5b74:	000c      	movs	r4, r1
    5b76:	9203      	str	r2, [sp, #12]
    5b78:	9301      	str	r3, [sp, #4]
    5b7a:	429e      	cmp	r6, r3
    5b7c:	d839      	bhi.n	5bf2 <__ssputs_r+0x86>
    5b7e:	2390      	movs	r3, #144	; 0x90
    5b80:	898a      	ldrh	r2, [r1, #12]
    5b82:	00db      	lsls	r3, r3, #3
    5b84:	421a      	tst	r2, r3
    5b86:	d034      	beq.n	5bf2 <__ssputs_r+0x86>
    5b88:	2503      	movs	r5, #3
    5b8a:	6909      	ldr	r1, [r1, #16]
    5b8c:	6823      	ldr	r3, [r4, #0]
    5b8e:	1a5b      	subs	r3, r3, r1
    5b90:	9302      	str	r3, [sp, #8]
    5b92:	6963      	ldr	r3, [r4, #20]
    5b94:	9802      	ldr	r0, [sp, #8]
    5b96:	435d      	muls	r5, r3
    5b98:	0feb      	lsrs	r3, r5, #31
    5b9a:	195d      	adds	r5, r3, r5
    5b9c:	9b01      	ldr	r3, [sp, #4]
    5b9e:	106d      	asrs	r5, r5, #1
    5ba0:	3301      	adds	r3, #1
    5ba2:	181b      	adds	r3, r3, r0
    5ba4:	42ab      	cmp	r3, r5
    5ba6:	d900      	bls.n	5baa <__ssputs_r+0x3e>
    5ba8:	001d      	movs	r5, r3
    5baa:	0553      	lsls	r3, r2, #21
    5bac:	d532      	bpl.n	5c14 <__ssputs_r+0xa8>
    5bae:	0029      	movs	r1, r5
    5bb0:	0038      	movs	r0, r7
    5bb2:	f7ff fe85 	bl	58c0 <_malloc_r>
    5bb6:	1e06      	subs	r6, r0, #0
    5bb8:	d109      	bne.n	5bce <__ssputs_r+0x62>
    5bba:	230c      	movs	r3, #12
    5bbc:	603b      	str	r3, [r7, #0]
    5bbe:	2340      	movs	r3, #64	; 0x40
    5bc0:	2001      	movs	r0, #1
    5bc2:	89a2      	ldrh	r2, [r4, #12]
    5bc4:	4240      	negs	r0, r0
    5bc6:	4313      	orrs	r3, r2
    5bc8:	81a3      	strh	r3, [r4, #12]
    5bca:	b005      	add	sp, #20
    5bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bce:	9a02      	ldr	r2, [sp, #8]
    5bd0:	6921      	ldr	r1, [r4, #16]
    5bd2:	f7ff fe19 	bl	5808 <memcpy>
    5bd6:	89a3      	ldrh	r3, [r4, #12]
    5bd8:	4a14      	ldr	r2, [pc, #80]	; (5c2c <__ssputs_r+0xc0>)
    5bda:	401a      	ands	r2, r3
    5bdc:	2380      	movs	r3, #128	; 0x80
    5bde:	4313      	orrs	r3, r2
    5be0:	81a3      	strh	r3, [r4, #12]
    5be2:	9b02      	ldr	r3, [sp, #8]
    5be4:	6126      	str	r6, [r4, #16]
    5be6:	18f6      	adds	r6, r6, r3
    5be8:	6026      	str	r6, [r4, #0]
    5bea:	6165      	str	r5, [r4, #20]
    5bec:	9e01      	ldr	r6, [sp, #4]
    5bee:	1aed      	subs	r5, r5, r3
    5bf0:	60a5      	str	r5, [r4, #8]
    5bf2:	9b01      	ldr	r3, [sp, #4]
    5bf4:	42b3      	cmp	r3, r6
    5bf6:	d200      	bcs.n	5bfa <__ssputs_r+0x8e>
    5bf8:	001e      	movs	r6, r3
    5bfa:	0032      	movs	r2, r6
    5bfc:	9903      	ldr	r1, [sp, #12]
    5bfe:	6820      	ldr	r0, [r4, #0]
    5c00:	f000 fab9 	bl	6176 <memmove>
    5c04:	68a3      	ldr	r3, [r4, #8]
    5c06:	2000      	movs	r0, #0
    5c08:	1b9b      	subs	r3, r3, r6
    5c0a:	60a3      	str	r3, [r4, #8]
    5c0c:	6823      	ldr	r3, [r4, #0]
    5c0e:	199e      	adds	r6, r3, r6
    5c10:	6026      	str	r6, [r4, #0]
    5c12:	e7da      	b.n	5bca <__ssputs_r+0x5e>
    5c14:	002a      	movs	r2, r5
    5c16:	0038      	movs	r0, r7
    5c18:	f000 fabf 	bl	619a <_realloc_r>
    5c1c:	1e06      	subs	r6, r0, #0
    5c1e:	d1e0      	bne.n	5be2 <__ssputs_r+0x76>
    5c20:	6921      	ldr	r1, [r4, #16]
    5c22:	0038      	movs	r0, r7
    5c24:	f7ff fe02 	bl	582c <_free_r>
    5c28:	e7c7      	b.n	5bba <__ssputs_r+0x4e>
    5c2a:	46c0      	nop			; (mov r8, r8)
    5c2c:	fffffb7f 	.word	0xfffffb7f

00005c30 <_svfiprintf_r>:
    5c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c32:	b09f      	sub	sp, #124	; 0x7c
    5c34:	9002      	str	r0, [sp, #8]
    5c36:	9305      	str	r3, [sp, #20]
    5c38:	898b      	ldrh	r3, [r1, #12]
    5c3a:	000f      	movs	r7, r1
    5c3c:	0016      	movs	r6, r2
    5c3e:	061b      	lsls	r3, r3, #24
    5c40:	d511      	bpl.n	5c66 <_svfiprintf_r+0x36>
    5c42:	690b      	ldr	r3, [r1, #16]
    5c44:	2b00      	cmp	r3, #0
    5c46:	d10e      	bne.n	5c66 <_svfiprintf_r+0x36>
    5c48:	2140      	movs	r1, #64	; 0x40
    5c4a:	f7ff fe39 	bl	58c0 <_malloc_r>
    5c4e:	6038      	str	r0, [r7, #0]
    5c50:	6138      	str	r0, [r7, #16]
    5c52:	2800      	cmp	r0, #0
    5c54:	d105      	bne.n	5c62 <_svfiprintf_r+0x32>
    5c56:	230c      	movs	r3, #12
    5c58:	9a02      	ldr	r2, [sp, #8]
    5c5a:	3801      	subs	r0, #1
    5c5c:	6013      	str	r3, [r2, #0]
    5c5e:	b01f      	add	sp, #124	; 0x7c
    5c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c62:	2340      	movs	r3, #64	; 0x40
    5c64:	617b      	str	r3, [r7, #20]
    5c66:	2300      	movs	r3, #0
    5c68:	ad06      	add	r5, sp, #24
    5c6a:	616b      	str	r3, [r5, #20]
    5c6c:	3320      	adds	r3, #32
    5c6e:	766b      	strb	r3, [r5, #25]
    5c70:	3310      	adds	r3, #16
    5c72:	76ab      	strb	r3, [r5, #26]
    5c74:	0034      	movs	r4, r6
    5c76:	7823      	ldrb	r3, [r4, #0]
    5c78:	2b00      	cmp	r3, #0
    5c7a:	d147      	bne.n	5d0c <_svfiprintf_r+0xdc>
    5c7c:	1ba3      	subs	r3, r4, r6
    5c7e:	9304      	str	r3, [sp, #16]
    5c80:	d00d      	beq.n	5c9e <_svfiprintf_r+0x6e>
    5c82:	1ba3      	subs	r3, r4, r6
    5c84:	0032      	movs	r2, r6
    5c86:	0039      	movs	r1, r7
    5c88:	9802      	ldr	r0, [sp, #8]
    5c8a:	f7ff ff6f 	bl	5b6c <__ssputs_r>
    5c8e:	1c43      	adds	r3, r0, #1
    5c90:	d100      	bne.n	5c94 <_svfiprintf_r+0x64>
    5c92:	e0b5      	b.n	5e00 <_svfiprintf_r+0x1d0>
    5c94:	696a      	ldr	r2, [r5, #20]
    5c96:	9b04      	ldr	r3, [sp, #16]
    5c98:	4694      	mov	ip, r2
    5c9a:	4463      	add	r3, ip
    5c9c:	616b      	str	r3, [r5, #20]
    5c9e:	7823      	ldrb	r3, [r4, #0]
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d100      	bne.n	5ca6 <_svfiprintf_r+0x76>
    5ca4:	e0ac      	b.n	5e00 <_svfiprintf_r+0x1d0>
    5ca6:	2201      	movs	r2, #1
    5ca8:	2300      	movs	r3, #0
    5caa:	4252      	negs	r2, r2
    5cac:	606a      	str	r2, [r5, #4]
    5cae:	a902      	add	r1, sp, #8
    5cb0:	3254      	adds	r2, #84	; 0x54
    5cb2:	1852      	adds	r2, r2, r1
    5cb4:	3401      	adds	r4, #1
    5cb6:	602b      	str	r3, [r5, #0]
    5cb8:	60eb      	str	r3, [r5, #12]
    5cba:	60ab      	str	r3, [r5, #8]
    5cbc:	7013      	strb	r3, [r2, #0]
    5cbe:	65ab      	str	r3, [r5, #88]	; 0x58
    5cc0:	4e58      	ldr	r6, [pc, #352]	; (5e24 <_svfiprintf_r+0x1f4>)
    5cc2:	2205      	movs	r2, #5
    5cc4:	7821      	ldrb	r1, [r4, #0]
    5cc6:	0030      	movs	r0, r6
    5cc8:	f000 fa4a 	bl	6160 <memchr>
    5ccc:	1c62      	adds	r2, r4, #1
    5cce:	2800      	cmp	r0, #0
    5cd0:	d120      	bne.n	5d14 <_svfiprintf_r+0xe4>
    5cd2:	6829      	ldr	r1, [r5, #0]
    5cd4:	06cb      	lsls	r3, r1, #27
    5cd6:	d504      	bpl.n	5ce2 <_svfiprintf_r+0xb2>
    5cd8:	2353      	movs	r3, #83	; 0x53
    5cda:	ae02      	add	r6, sp, #8
    5cdc:	3020      	adds	r0, #32
    5cde:	199b      	adds	r3, r3, r6
    5ce0:	7018      	strb	r0, [r3, #0]
    5ce2:	070b      	lsls	r3, r1, #28
    5ce4:	d504      	bpl.n	5cf0 <_svfiprintf_r+0xc0>
    5ce6:	2353      	movs	r3, #83	; 0x53
    5ce8:	202b      	movs	r0, #43	; 0x2b
    5cea:	ae02      	add	r6, sp, #8
    5cec:	199b      	adds	r3, r3, r6
    5cee:	7018      	strb	r0, [r3, #0]
    5cf0:	7823      	ldrb	r3, [r4, #0]
    5cf2:	2b2a      	cmp	r3, #42	; 0x2a
    5cf4:	d016      	beq.n	5d24 <_svfiprintf_r+0xf4>
    5cf6:	2000      	movs	r0, #0
    5cf8:	210a      	movs	r1, #10
    5cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5cfc:	7822      	ldrb	r2, [r4, #0]
    5cfe:	3a30      	subs	r2, #48	; 0x30
    5d00:	2a09      	cmp	r2, #9
    5d02:	d955      	bls.n	5db0 <_svfiprintf_r+0x180>
    5d04:	2800      	cmp	r0, #0
    5d06:	d015      	beq.n	5d34 <_svfiprintf_r+0x104>
    5d08:	9309      	str	r3, [sp, #36]	; 0x24
    5d0a:	e013      	b.n	5d34 <_svfiprintf_r+0x104>
    5d0c:	2b25      	cmp	r3, #37	; 0x25
    5d0e:	d0b5      	beq.n	5c7c <_svfiprintf_r+0x4c>
    5d10:	3401      	adds	r4, #1
    5d12:	e7b0      	b.n	5c76 <_svfiprintf_r+0x46>
    5d14:	2301      	movs	r3, #1
    5d16:	1b80      	subs	r0, r0, r6
    5d18:	4083      	lsls	r3, r0
    5d1a:	6829      	ldr	r1, [r5, #0]
    5d1c:	0014      	movs	r4, r2
    5d1e:	430b      	orrs	r3, r1
    5d20:	602b      	str	r3, [r5, #0]
    5d22:	e7cd      	b.n	5cc0 <_svfiprintf_r+0x90>
    5d24:	9b05      	ldr	r3, [sp, #20]
    5d26:	1d18      	adds	r0, r3, #4
    5d28:	681b      	ldr	r3, [r3, #0]
    5d2a:	9005      	str	r0, [sp, #20]
    5d2c:	2b00      	cmp	r3, #0
    5d2e:	db39      	blt.n	5da4 <_svfiprintf_r+0x174>
    5d30:	9309      	str	r3, [sp, #36]	; 0x24
    5d32:	0014      	movs	r4, r2
    5d34:	7823      	ldrb	r3, [r4, #0]
    5d36:	2b2e      	cmp	r3, #46	; 0x2e
    5d38:	d10b      	bne.n	5d52 <_svfiprintf_r+0x122>
    5d3a:	7863      	ldrb	r3, [r4, #1]
    5d3c:	1c62      	adds	r2, r4, #1
    5d3e:	2b2a      	cmp	r3, #42	; 0x2a
    5d40:	d13e      	bne.n	5dc0 <_svfiprintf_r+0x190>
    5d42:	9b05      	ldr	r3, [sp, #20]
    5d44:	3402      	adds	r4, #2
    5d46:	1d1a      	adds	r2, r3, #4
    5d48:	681b      	ldr	r3, [r3, #0]
    5d4a:	9205      	str	r2, [sp, #20]
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	db34      	blt.n	5dba <_svfiprintf_r+0x18a>
    5d50:	9307      	str	r3, [sp, #28]
    5d52:	4e35      	ldr	r6, [pc, #212]	; (5e28 <_svfiprintf_r+0x1f8>)
    5d54:	7821      	ldrb	r1, [r4, #0]
    5d56:	2203      	movs	r2, #3
    5d58:	0030      	movs	r0, r6
    5d5a:	f000 fa01 	bl	6160 <memchr>
    5d5e:	2800      	cmp	r0, #0
    5d60:	d006      	beq.n	5d70 <_svfiprintf_r+0x140>
    5d62:	2340      	movs	r3, #64	; 0x40
    5d64:	1b80      	subs	r0, r0, r6
    5d66:	4083      	lsls	r3, r0
    5d68:	682a      	ldr	r2, [r5, #0]
    5d6a:	3401      	adds	r4, #1
    5d6c:	4313      	orrs	r3, r2
    5d6e:	602b      	str	r3, [r5, #0]
    5d70:	7821      	ldrb	r1, [r4, #0]
    5d72:	2206      	movs	r2, #6
    5d74:	482d      	ldr	r0, [pc, #180]	; (5e2c <_svfiprintf_r+0x1fc>)
    5d76:	1c66      	adds	r6, r4, #1
    5d78:	7629      	strb	r1, [r5, #24]
    5d7a:	f000 f9f1 	bl	6160 <memchr>
    5d7e:	2800      	cmp	r0, #0
    5d80:	d046      	beq.n	5e10 <_svfiprintf_r+0x1e0>
    5d82:	4b2b      	ldr	r3, [pc, #172]	; (5e30 <_svfiprintf_r+0x200>)
    5d84:	2b00      	cmp	r3, #0
    5d86:	d12f      	bne.n	5de8 <_svfiprintf_r+0x1b8>
    5d88:	6829      	ldr	r1, [r5, #0]
    5d8a:	9b05      	ldr	r3, [sp, #20]
    5d8c:	2207      	movs	r2, #7
    5d8e:	05c9      	lsls	r1, r1, #23
    5d90:	d528      	bpl.n	5de4 <_svfiprintf_r+0x1b4>
    5d92:	189b      	adds	r3, r3, r2
    5d94:	4393      	bics	r3, r2
    5d96:	3308      	adds	r3, #8
    5d98:	9305      	str	r3, [sp, #20]
    5d9a:	696b      	ldr	r3, [r5, #20]
    5d9c:	9a03      	ldr	r2, [sp, #12]
    5d9e:	189b      	adds	r3, r3, r2
    5da0:	616b      	str	r3, [r5, #20]
    5da2:	e767      	b.n	5c74 <_svfiprintf_r+0x44>
    5da4:	425b      	negs	r3, r3
    5da6:	60eb      	str	r3, [r5, #12]
    5da8:	2302      	movs	r3, #2
    5daa:	430b      	orrs	r3, r1
    5dac:	602b      	str	r3, [r5, #0]
    5dae:	e7c0      	b.n	5d32 <_svfiprintf_r+0x102>
    5db0:	434b      	muls	r3, r1
    5db2:	3401      	adds	r4, #1
    5db4:	189b      	adds	r3, r3, r2
    5db6:	2001      	movs	r0, #1
    5db8:	e7a0      	b.n	5cfc <_svfiprintf_r+0xcc>
    5dba:	2301      	movs	r3, #1
    5dbc:	425b      	negs	r3, r3
    5dbe:	e7c7      	b.n	5d50 <_svfiprintf_r+0x120>
    5dc0:	2300      	movs	r3, #0
    5dc2:	0014      	movs	r4, r2
    5dc4:	200a      	movs	r0, #10
    5dc6:	001a      	movs	r2, r3
    5dc8:	606b      	str	r3, [r5, #4]
    5dca:	7821      	ldrb	r1, [r4, #0]
    5dcc:	3930      	subs	r1, #48	; 0x30
    5dce:	2909      	cmp	r1, #9
    5dd0:	d903      	bls.n	5dda <_svfiprintf_r+0x1aa>
    5dd2:	2b00      	cmp	r3, #0
    5dd4:	d0bd      	beq.n	5d52 <_svfiprintf_r+0x122>
    5dd6:	9207      	str	r2, [sp, #28]
    5dd8:	e7bb      	b.n	5d52 <_svfiprintf_r+0x122>
    5dda:	4342      	muls	r2, r0
    5ddc:	3401      	adds	r4, #1
    5dde:	1852      	adds	r2, r2, r1
    5de0:	2301      	movs	r3, #1
    5de2:	e7f2      	b.n	5dca <_svfiprintf_r+0x19a>
    5de4:	3307      	adds	r3, #7
    5de6:	e7d5      	b.n	5d94 <_svfiprintf_r+0x164>
    5de8:	ab05      	add	r3, sp, #20
    5dea:	9300      	str	r3, [sp, #0]
    5dec:	003a      	movs	r2, r7
    5dee:	4b11      	ldr	r3, [pc, #68]	; (5e34 <_svfiprintf_r+0x204>)
    5df0:	0029      	movs	r1, r5
    5df2:	9802      	ldr	r0, [sp, #8]
    5df4:	e000      	b.n	5df8 <_svfiprintf_r+0x1c8>
    5df6:	bf00      	nop
    5df8:	9003      	str	r0, [sp, #12]
    5dfa:	9b03      	ldr	r3, [sp, #12]
    5dfc:	3301      	adds	r3, #1
    5dfe:	d1cc      	bne.n	5d9a <_svfiprintf_r+0x16a>
    5e00:	89bb      	ldrh	r3, [r7, #12]
    5e02:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5e04:	065b      	lsls	r3, r3, #25
    5e06:	d400      	bmi.n	5e0a <_svfiprintf_r+0x1da>
    5e08:	e729      	b.n	5c5e <_svfiprintf_r+0x2e>
    5e0a:	2001      	movs	r0, #1
    5e0c:	4240      	negs	r0, r0
    5e0e:	e726      	b.n	5c5e <_svfiprintf_r+0x2e>
    5e10:	ab05      	add	r3, sp, #20
    5e12:	9300      	str	r3, [sp, #0]
    5e14:	003a      	movs	r2, r7
    5e16:	4b07      	ldr	r3, [pc, #28]	; (5e34 <_svfiprintf_r+0x204>)
    5e18:	0029      	movs	r1, r5
    5e1a:	9802      	ldr	r0, [sp, #8]
    5e1c:	f000 f87a 	bl	5f14 <_printf_i>
    5e20:	e7ea      	b.n	5df8 <_svfiprintf_r+0x1c8>
    5e22:	46c0      	nop			; (mov r8, r8)
    5e24:	000065ed 	.word	0x000065ed
    5e28:	000065f3 	.word	0x000065f3
    5e2c:	000065f7 	.word	0x000065f7
    5e30:	00000000 	.word	0x00000000
    5e34:	00005b6d 	.word	0x00005b6d

00005e38 <_printf_common>:
    5e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e3a:	0015      	movs	r5, r2
    5e3c:	9301      	str	r3, [sp, #4]
    5e3e:	688a      	ldr	r2, [r1, #8]
    5e40:	690b      	ldr	r3, [r1, #16]
    5e42:	9000      	str	r0, [sp, #0]
    5e44:	000c      	movs	r4, r1
    5e46:	4293      	cmp	r3, r2
    5e48:	da00      	bge.n	5e4c <_printf_common+0x14>
    5e4a:	0013      	movs	r3, r2
    5e4c:	0022      	movs	r2, r4
    5e4e:	602b      	str	r3, [r5, #0]
    5e50:	3243      	adds	r2, #67	; 0x43
    5e52:	7812      	ldrb	r2, [r2, #0]
    5e54:	2a00      	cmp	r2, #0
    5e56:	d001      	beq.n	5e5c <_printf_common+0x24>
    5e58:	3301      	adds	r3, #1
    5e5a:	602b      	str	r3, [r5, #0]
    5e5c:	6823      	ldr	r3, [r4, #0]
    5e5e:	069b      	lsls	r3, r3, #26
    5e60:	d502      	bpl.n	5e68 <_printf_common+0x30>
    5e62:	682b      	ldr	r3, [r5, #0]
    5e64:	3302      	adds	r3, #2
    5e66:	602b      	str	r3, [r5, #0]
    5e68:	2706      	movs	r7, #6
    5e6a:	6823      	ldr	r3, [r4, #0]
    5e6c:	401f      	ands	r7, r3
    5e6e:	d027      	beq.n	5ec0 <_printf_common+0x88>
    5e70:	0023      	movs	r3, r4
    5e72:	3343      	adds	r3, #67	; 0x43
    5e74:	781b      	ldrb	r3, [r3, #0]
    5e76:	1e5a      	subs	r2, r3, #1
    5e78:	4193      	sbcs	r3, r2
    5e7a:	6822      	ldr	r2, [r4, #0]
    5e7c:	0692      	lsls	r2, r2, #26
    5e7e:	d430      	bmi.n	5ee2 <_printf_common+0xaa>
    5e80:	0022      	movs	r2, r4
    5e82:	9901      	ldr	r1, [sp, #4]
    5e84:	3243      	adds	r2, #67	; 0x43
    5e86:	9800      	ldr	r0, [sp, #0]
    5e88:	9e08      	ldr	r6, [sp, #32]
    5e8a:	47b0      	blx	r6
    5e8c:	1c43      	adds	r3, r0, #1
    5e8e:	d025      	beq.n	5edc <_printf_common+0xa4>
    5e90:	2306      	movs	r3, #6
    5e92:	6820      	ldr	r0, [r4, #0]
    5e94:	682a      	ldr	r2, [r5, #0]
    5e96:	68e1      	ldr	r1, [r4, #12]
    5e98:	4003      	ands	r3, r0
    5e9a:	2500      	movs	r5, #0
    5e9c:	2b04      	cmp	r3, #4
    5e9e:	d103      	bne.n	5ea8 <_printf_common+0x70>
    5ea0:	1a8d      	subs	r5, r1, r2
    5ea2:	43eb      	mvns	r3, r5
    5ea4:	17db      	asrs	r3, r3, #31
    5ea6:	401d      	ands	r5, r3
    5ea8:	68a3      	ldr	r3, [r4, #8]
    5eaa:	6922      	ldr	r2, [r4, #16]
    5eac:	4293      	cmp	r3, r2
    5eae:	dd01      	ble.n	5eb4 <_printf_common+0x7c>
    5eb0:	1a9b      	subs	r3, r3, r2
    5eb2:	18ed      	adds	r5, r5, r3
    5eb4:	2700      	movs	r7, #0
    5eb6:	42bd      	cmp	r5, r7
    5eb8:	d120      	bne.n	5efc <_printf_common+0xc4>
    5eba:	2000      	movs	r0, #0
    5ebc:	e010      	b.n	5ee0 <_printf_common+0xa8>
    5ebe:	3701      	adds	r7, #1
    5ec0:	68e3      	ldr	r3, [r4, #12]
    5ec2:	682a      	ldr	r2, [r5, #0]
    5ec4:	1a9b      	subs	r3, r3, r2
    5ec6:	429f      	cmp	r7, r3
    5ec8:	dad2      	bge.n	5e70 <_printf_common+0x38>
    5eca:	0022      	movs	r2, r4
    5ecc:	2301      	movs	r3, #1
    5ece:	3219      	adds	r2, #25
    5ed0:	9901      	ldr	r1, [sp, #4]
    5ed2:	9800      	ldr	r0, [sp, #0]
    5ed4:	9e08      	ldr	r6, [sp, #32]
    5ed6:	47b0      	blx	r6
    5ed8:	1c43      	adds	r3, r0, #1
    5eda:	d1f0      	bne.n	5ebe <_printf_common+0x86>
    5edc:	2001      	movs	r0, #1
    5ede:	4240      	negs	r0, r0
    5ee0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5ee2:	2030      	movs	r0, #48	; 0x30
    5ee4:	18e1      	adds	r1, r4, r3
    5ee6:	3143      	adds	r1, #67	; 0x43
    5ee8:	7008      	strb	r0, [r1, #0]
    5eea:	0021      	movs	r1, r4
    5eec:	1c5a      	adds	r2, r3, #1
    5eee:	3145      	adds	r1, #69	; 0x45
    5ef0:	7809      	ldrb	r1, [r1, #0]
    5ef2:	18a2      	adds	r2, r4, r2
    5ef4:	3243      	adds	r2, #67	; 0x43
    5ef6:	3302      	adds	r3, #2
    5ef8:	7011      	strb	r1, [r2, #0]
    5efa:	e7c1      	b.n	5e80 <_printf_common+0x48>
    5efc:	0022      	movs	r2, r4
    5efe:	2301      	movs	r3, #1
    5f00:	321a      	adds	r2, #26
    5f02:	9901      	ldr	r1, [sp, #4]
    5f04:	9800      	ldr	r0, [sp, #0]
    5f06:	9e08      	ldr	r6, [sp, #32]
    5f08:	47b0      	blx	r6
    5f0a:	1c43      	adds	r3, r0, #1
    5f0c:	d0e6      	beq.n	5edc <_printf_common+0xa4>
    5f0e:	3701      	adds	r7, #1
    5f10:	e7d1      	b.n	5eb6 <_printf_common+0x7e>
	...

00005f14 <_printf_i>:
    5f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f16:	b08b      	sub	sp, #44	; 0x2c
    5f18:	9206      	str	r2, [sp, #24]
    5f1a:	000a      	movs	r2, r1
    5f1c:	3243      	adds	r2, #67	; 0x43
    5f1e:	9307      	str	r3, [sp, #28]
    5f20:	9005      	str	r0, [sp, #20]
    5f22:	9204      	str	r2, [sp, #16]
    5f24:	7e0a      	ldrb	r2, [r1, #24]
    5f26:	000c      	movs	r4, r1
    5f28:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5f2a:	2a6e      	cmp	r2, #110	; 0x6e
    5f2c:	d100      	bne.n	5f30 <_printf_i+0x1c>
    5f2e:	e08f      	b.n	6050 <_printf_i+0x13c>
    5f30:	d817      	bhi.n	5f62 <_printf_i+0x4e>
    5f32:	2a63      	cmp	r2, #99	; 0x63
    5f34:	d02c      	beq.n	5f90 <_printf_i+0x7c>
    5f36:	d808      	bhi.n	5f4a <_printf_i+0x36>
    5f38:	2a00      	cmp	r2, #0
    5f3a:	d100      	bne.n	5f3e <_printf_i+0x2a>
    5f3c:	e099      	b.n	6072 <_printf_i+0x15e>
    5f3e:	2a58      	cmp	r2, #88	; 0x58
    5f40:	d054      	beq.n	5fec <_printf_i+0xd8>
    5f42:	0026      	movs	r6, r4
    5f44:	3642      	adds	r6, #66	; 0x42
    5f46:	7032      	strb	r2, [r6, #0]
    5f48:	e029      	b.n	5f9e <_printf_i+0x8a>
    5f4a:	2a64      	cmp	r2, #100	; 0x64
    5f4c:	d001      	beq.n	5f52 <_printf_i+0x3e>
    5f4e:	2a69      	cmp	r2, #105	; 0x69
    5f50:	d1f7      	bne.n	5f42 <_printf_i+0x2e>
    5f52:	6821      	ldr	r1, [r4, #0]
    5f54:	681a      	ldr	r2, [r3, #0]
    5f56:	0608      	lsls	r0, r1, #24
    5f58:	d523      	bpl.n	5fa2 <_printf_i+0x8e>
    5f5a:	1d11      	adds	r1, r2, #4
    5f5c:	6019      	str	r1, [r3, #0]
    5f5e:	6815      	ldr	r5, [r2, #0]
    5f60:	e025      	b.n	5fae <_printf_i+0x9a>
    5f62:	2a73      	cmp	r2, #115	; 0x73
    5f64:	d100      	bne.n	5f68 <_printf_i+0x54>
    5f66:	e088      	b.n	607a <_printf_i+0x166>
    5f68:	d808      	bhi.n	5f7c <_printf_i+0x68>
    5f6a:	2a6f      	cmp	r2, #111	; 0x6f
    5f6c:	d029      	beq.n	5fc2 <_printf_i+0xae>
    5f6e:	2a70      	cmp	r2, #112	; 0x70
    5f70:	d1e7      	bne.n	5f42 <_printf_i+0x2e>
    5f72:	2220      	movs	r2, #32
    5f74:	6809      	ldr	r1, [r1, #0]
    5f76:	430a      	orrs	r2, r1
    5f78:	6022      	str	r2, [r4, #0]
    5f7a:	e003      	b.n	5f84 <_printf_i+0x70>
    5f7c:	2a75      	cmp	r2, #117	; 0x75
    5f7e:	d020      	beq.n	5fc2 <_printf_i+0xae>
    5f80:	2a78      	cmp	r2, #120	; 0x78
    5f82:	d1de      	bne.n	5f42 <_printf_i+0x2e>
    5f84:	0022      	movs	r2, r4
    5f86:	2178      	movs	r1, #120	; 0x78
    5f88:	3245      	adds	r2, #69	; 0x45
    5f8a:	7011      	strb	r1, [r2, #0]
    5f8c:	4a6c      	ldr	r2, [pc, #432]	; (6140 <_printf_i+0x22c>)
    5f8e:	e030      	b.n	5ff2 <_printf_i+0xde>
    5f90:	000e      	movs	r6, r1
    5f92:	681a      	ldr	r2, [r3, #0]
    5f94:	3642      	adds	r6, #66	; 0x42
    5f96:	1d11      	adds	r1, r2, #4
    5f98:	6019      	str	r1, [r3, #0]
    5f9a:	6813      	ldr	r3, [r2, #0]
    5f9c:	7033      	strb	r3, [r6, #0]
    5f9e:	2301      	movs	r3, #1
    5fa0:	e079      	b.n	6096 <_printf_i+0x182>
    5fa2:	0649      	lsls	r1, r1, #25
    5fa4:	d5d9      	bpl.n	5f5a <_printf_i+0x46>
    5fa6:	1d11      	adds	r1, r2, #4
    5fa8:	6019      	str	r1, [r3, #0]
    5faa:	2300      	movs	r3, #0
    5fac:	5ed5      	ldrsh	r5, [r2, r3]
    5fae:	2d00      	cmp	r5, #0
    5fb0:	da03      	bge.n	5fba <_printf_i+0xa6>
    5fb2:	232d      	movs	r3, #45	; 0x2d
    5fb4:	9a04      	ldr	r2, [sp, #16]
    5fb6:	426d      	negs	r5, r5
    5fb8:	7013      	strb	r3, [r2, #0]
    5fba:	4b62      	ldr	r3, [pc, #392]	; (6144 <_printf_i+0x230>)
    5fbc:	270a      	movs	r7, #10
    5fbe:	9303      	str	r3, [sp, #12]
    5fc0:	e02f      	b.n	6022 <_printf_i+0x10e>
    5fc2:	6820      	ldr	r0, [r4, #0]
    5fc4:	6819      	ldr	r1, [r3, #0]
    5fc6:	0605      	lsls	r5, r0, #24
    5fc8:	d503      	bpl.n	5fd2 <_printf_i+0xbe>
    5fca:	1d08      	adds	r0, r1, #4
    5fcc:	6018      	str	r0, [r3, #0]
    5fce:	680d      	ldr	r5, [r1, #0]
    5fd0:	e005      	b.n	5fde <_printf_i+0xca>
    5fd2:	0640      	lsls	r0, r0, #25
    5fd4:	d5f9      	bpl.n	5fca <_printf_i+0xb6>
    5fd6:	680d      	ldr	r5, [r1, #0]
    5fd8:	1d08      	adds	r0, r1, #4
    5fda:	6018      	str	r0, [r3, #0]
    5fdc:	b2ad      	uxth	r5, r5
    5fde:	4b59      	ldr	r3, [pc, #356]	; (6144 <_printf_i+0x230>)
    5fe0:	2708      	movs	r7, #8
    5fe2:	9303      	str	r3, [sp, #12]
    5fe4:	2a6f      	cmp	r2, #111	; 0x6f
    5fe6:	d018      	beq.n	601a <_printf_i+0x106>
    5fe8:	270a      	movs	r7, #10
    5fea:	e016      	b.n	601a <_printf_i+0x106>
    5fec:	3145      	adds	r1, #69	; 0x45
    5fee:	700a      	strb	r2, [r1, #0]
    5ff0:	4a54      	ldr	r2, [pc, #336]	; (6144 <_printf_i+0x230>)
    5ff2:	9203      	str	r2, [sp, #12]
    5ff4:	681a      	ldr	r2, [r3, #0]
    5ff6:	6821      	ldr	r1, [r4, #0]
    5ff8:	1d10      	adds	r0, r2, #4
    5ffa:	6018      	str	r0, [r3, #0]
    5ffc:	6815      	ldr	r5, [r2, #0]
    5ffe:	0608      	lsls	r0, r1, #24
    6000:	d522      	bpl.n	6048 <_printf_i+0x134>
    6002:	07cb      	lsls	r3, r1, #31
    6004:	d502      	bpl.n	600c <_printf_i+0xf8>
    6006:	2320      	movs	r3, #32
    6008:	4319      	orrs	r1, r3
    600a:	6021      	str	r1, [r4, #0]
    600c:	2710      	movs	r7, #16
    600e:	2d00      	cmp	r5, #0
    6010:	d103      	bne.n	601a <_printf_i+0x106>
    6012:	2320      	movs	r3, #32
    6014:	6822      	ldr	r2, [r4, #0]
    6016:	439a      	bics	r2, r3
    6018:	6022      	str	r2, [r4, #0]
    601a:	0023      	movs	r3, r4
    601c:	2200      	movs	r2, #0
    601e:	3343      	adds	r3, #67	; 0x43
    6020:	701a      	strb	r2, [r3, #0]
    6022:	6863      	ldr	r3, [r4, #4]
    6024:	60a3      	str	r3, [r4, #8]
    6026:	2b00      	cmp	r3, #0
    6028:	db5c      	blt.n	60e4 <_printf_i+0x1d0>
    602a:	2204      	movs	r2, #4
    602c:	6821      	ldr	r1, [r4, #0]
    602e:	4391      	bics	r1, r2
    6030:	6021      	str	r1, [r4, #0]
    6032:	2d00      	cmp	r5, #0
    6034:	d158      	bne.n	60e8 <_printf_i+0x1d4>
    6036:	9e04      	ldr	r6, [sp, #16]
    6038:	2b00      	cmp	r3, #0
    603a:	d064      	beq.n	6106 <_printf_i+0x1f2>
    603c:	0026      	movs	r6, r4
    603e:	9b03      	ldr	r3, [sp, #12]
    6040:	3642      	adds	r6, #66	; 0x42
    6042:	781b      	ldrb	r3, [r3, #0]
    6044:	7033      	strb	r3, [r6, #0]
    6046:	e05e      	b.n	6106 <_printf_i+0x1f2>
    6048:	0648      	lsls	r0, r1, #25
    604a:	d5da      	bpl.n	6002 <_printf_i+0xee>
    604c:	b2ad      	uxth	r5, r5
    604e:	e7d8      	b.n	6002 <_printf_i+0xee>
    6050:	6809      	ldr	r1, [r1, #0]
    6052:	681a      	ldr	r2, [r3, #0]
    6054:	0608      	lsls	r0, r1, #24
    6056:	d505      	bpl.n	6064 <_printf_i+0x150>
    6058:	1d11      	adds	r1, r2, #4
    605a:	6019      	str	r1, [r3, #0]
    605c:	6813      	ldr	r3, [r2, #0]
    605e:	6962      	ldr	r2, [r4, #20]
    6060:	601a      	str	r2, [r3, #0]
    6062:	e006      	b.n	6072 <_printf_i+0x15e>
    6064:	0649      	lsls	r1, r1, #25
    6066:	d5f7      	bpl.n	6058 <_printf_i+0x144>
    6068:	1d11      	adds	r1, r2, #4
    606a:	6019      	str	r1, [r3, #0]
    606c:	6813      	ldr	r3, [r2, #0]
    606e:	8aa2      	ldrh	r2, [r4, #20]
    6070:	801a      	strh	r2, [r3, #0]
    6072:	2300      	movs	r3, #0
    6074:	9e04      	ldr	r6, [sp, #16]
    6076:	6123      	str	r3, [r4, #16]
    6078:	e054      	b.n	6124 <_printf_i+0x210>
    607a:	681a      	ldr	r2, [r3, #0]
    607c:	1d11      	adds	r1, r2, #4
    607e:	6019      	str	r1, [r3, #0]
    6080:	6816      	ldr	r6, [r2, #0]
    6082:	2100      	movs	r1, #0
    6084:	6862      	ldr	r2, [r4, #4]
    6086:	0030      	movs	r0, r6
    6088:	f000 f86a 	bl	6160 <memchr>
    608c:	2800      	cmp	r0, #0
    608e:	d001      	beq.n	6094 <_printf_i+0x180>
    6090:	1b80      	subs	r0, r0, r6
    6092:	6060      	str	r0, [r4, #4]
    6094:	6863      	ldr	r3, [r4, #4]
    6096:	6123      	str	r3, [r4, #16]
    6098:	2300      	movs	r3, #0
    609a:	9a04      	ldr	r2, [sp, #16]
    609c:	7013      	strb	r3, [r2, #0]
    609e:	e041      	b.n	6124 <_printf_i+0x210>
    60a0:	6923      	ldr	r3, [r4, #16]
    60a2:	0032      	movs	r2, r6
    60a4:	9906      	ldr	r1, [sp, #24]
    60a6:	9805      	ldr	r0, [sp, #20]
    60a8:	9d07      	ldr	r5, [sp, #28]
    60aa:	47a8      	blx	r5
    60ac:	1c43      	adds	r3, r0, #1
    60ae:	d043      	beq.n	6138 <_printf_i+0x224>
    60b0:	6823      	ldr	r3, [r4, #0]
    60b2:	2500      	movs	r5, #0
    60b4:	079b      	lsls	r3, r3, #30
    60b6:	d40f      	bmi.n	60d8 <_printf_i+0x1c4>
    60b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    60ba:	68e0      	ldr	r0, [r4, #12]
    60bc:	4298      	cmp	r0, r3
    60be:	da3d      	bge.n	613c <_printf_i+0x228>
    60c0:	0018      	movs	r0, r3
    60c2:	e03b      	b.n	613c <_printf_i+0x228>
    60c4:	0022      	movs	r2, r4
    60c6:	2301      	movs	r3, #1
    60c8:	3219      	adds	r2, #25
    60ca:	9906      	ldr	r1, [sp, #24]
    60cc:	9805      	ldr	r0, [sp, #20]
    60ce:	9e07      	ldr	r6, [sp, #28]
    60d0:	47b0      	blx	r6
    60d2:	1c43      	adds	r3, r0, #1
    60d4:	d030      	beq.n	6138 <_printf_i+0x224>
    60d6:	3501      	adds	r5, #1
    60d8:	68e3      	ldr	r3, [r4, #12]
    60da:	9a09      	ldr	r2, [sp, #36]	; 0x24
    60dc:	1a9b      	subs	r3, r3, r2
    60de:	429d      	cmp	r5, r3
    60e0:	dbf0      	blt.n	60c4 <_printf_i+0x1b0>
    60e2:	e7e9      	b.n	60b8 <_printf_i+0x1a4>
    60e4:	2d00      	cmp	r5, #0
    60e6:	d0a9      	beq.n	603c <_printf_i+0x128>
    60e8:	9e04      	ldr	r6, [sp, #16]
    60ea:	0028      	movs	r0, r5
    60ec:	0039      	movs	r1, r7
    60ee:	f7ff fb2d 	bl	574c <__aeabi_uidivmod>
    60f2:	9b03      	ldr	r3, [sp, #12]
    60f4:	3e01      	subs	r6, #1
    60f6:	5c5b      	ldrb	r3, [r3, r1]
    60f8:	0028      	movs	r0, r5
    60fa:	7033      	strb	r3, [r6, #0]
    60fc:	0039      	movs	r1, r7
    60fe:	f7ff fa9f 	bl	5640 <__udivsi3>
    6102:	1e05      	subs	r5, r0, #0
    6104:	d1f1      	bne.n	60ea <_printf_i+0x1d6>
    6106:	2f08      	cmp	r7, #8
    6108:	d109      	bne.n	611e <_printf_i+0x20a>
    610a:	6823      	ldr	r3, [r4, #0]
    610c:	07db      	lsls	r3, r3, #31
    610e:	d506      	bpl.n	611e <_printf_i+0x20a>
    6110:	6863      	ldr	r3, [r4, #4]
    6112:	6922      	ldr	r2, [r4, #16]
    6114:	4293      	cmp	r3, r2
    6116:	dc02      	bgt.n	611e <_printf_i+0x20a>
    6118:	2330      	movs	r3, #48	; 0x30
    611a:	3e01      	subs	r6, #1
    611c:	7033      	strb	r3, [r6, #0]
    611e:	9b04      	ldr	r3, [sp, #16]
    6120:	1b9b      	subs	r3, r3, r6
    6122:	6123      	str	r3, [r4, #16]
    6124:	9b07      	ldr	r3, [sp, #28]
    6126:	aa09      	add	r2, sp, #36	; 0x24
    6128:	9300      	str	r3, [sp, #0]
    612a:	0021      	movs	r1, r4
    612c:	9b06      	ldr	r3, [sp, #24]
    612e:	9805      	ldr	r0, [sp, #20]
    6130:	f7ff fe82 	bl	5e38 <_printf_common>
    6134:	1c43      	adds	r3, r0, #1
    6136:	d1b3      	bne.n	60a0 <_printf_i+0x18c>
    6138:	2001      	movs	r0, #1
    613a:	4240      	negs	r0, r0
    613c:	b00b      	add	sp, #44	; 0x2c
    613e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6140:	0000660f 	.word	0x0000660f
    6144:	000065fe 	.word	0x000065fe

00006148 <__ascii_wctomb>:
    6148:	1e0b      	subs	r3, r1, #0
    614a:	d004      	beq.n	6156 <__ascii_wctomb+0xe>
    614c:	2aff      	cmp	r2, #255	; 0xff
    614e:	d904      	bls.n	615a <__ascii_wctomb+0x12>
    6150:	238a      	movs	r3, #138	; 0x8a
    6152:	6003      	str	r3, [r0, #0]
    6154:	3b8b      	subs	r3, #139	; 0x8b
    6156:	0018      	movs	r0, r3
    6158:	4770      	bx	lr
    615a:	700a      	strb	r2, [r1, #0]
    615c:	2301      	movs	r3, #1
    615e:	e7fa      	b.n	6156 <__ascii_wctomb+0xe>

00006160 <memchr>:
    6160:	b2c9      	uxtb	r1, r1
    6162:	1882      	adds	r2, r0, r2
    6164:	4290      	cmp	r0, r2
    6166:	d101      	bne.n	616c <memchr+0xc>
    6168:	2000      	movs	r0, #0
    616a:	4770      	bx	lr
    616c:	7803      	ldrb	r3, [r0, #0]
    616e:	428b      	cmp	r3, r1
    6170:	d0fb      	beq.n	616a <memchr+0xa>
    6172:	3001      	adds	r0, #1
    6174:	e7f6      	b.n	6164 <memchr+0x4>

00006176 <memmove>:
    6176:	b510      	push	{r4, lr}
    6178:	4288      	cmp	r0, r1
    617a:	d902      	bls.n	6182 <memmove+0xc>
    617c:	188b      	adds	r3, r1, r2
    617e:	4298      	cmp	r0, r3
    6180:	d308      	bcc.n	6194 <memmove+0x1e>
    6182:	2300      	movs	r3, #0
    6184:	429a      	cmp	r2, r3
    6186:	d007      	beq.n	6198 <memmove+0x22>
    6188:	5ccc      	ldrb	r4, [r1, r3]
    618a:	54c4      	strb	r4, [r0, r3]
    618c:	3301      	adds	r3, #1
    618e:	e7f9      	b.n	6184 <memmove+0xe>
    6190:	5c8b      	ldrb	r3, [r1, r2]
    6192:	5483      	strb	r3, [r0, r2]
    6194:	3a01      	subs	r2, #1
    6196:	d2fb      	bcs.n	6190 <memmove+0x1a>
    6198:	bd10      	pop	{r4, pc}

0000619a <_realloc_r>:
    619a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    619c:	0007      	movs	r7, r0
    619e:	000d      	movs	r5, r1
    61a0:	0016      	movs	r6, r2
    61a2:	2900      	cmp	r1, #0
    61a4:	d105      	bne.n	61b2 <_realloc_r+0x18>
    61a6:	0011      	movs	r1, r2
    61a8:	f7ff fb8a 	bl	58c0 <_malloc_r>
    61ac:	0004      	movs	r4, r0
    61ae:	0020      	movs	r0, r4
    61b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61b2:	2a00      	cmp	r2, #0
    61b4:	d103      	bne.n	61be <_realloc_r+0x24>
    61b6:	f7ff fb39 	bl	582c <_free_r>
    61ba:	0034      	movs	r4, r6
    61bc:	e7f7      	b.n	61ae <_realloc_r+0x14>
    61be:	f000 f812 	bl	61e6 <_malloc_usable_size_r>
    61c2:	002c      	movs	r4, r5
    61c4:	4286      	cmp	r6, r0
    61c6:	d9f2      	bls.n	61ae <_realloc_r+0x14>
    61c8:	0031      	movs	r1, r6
    61ca:	0038      	movs	r0, r7
    61cc:	f7ff fb78 	bl	58c0 <_malloc_r>
    61d0:	1e04      	subs	r4, r0, #0
    61d2:	d0ec      	beq.n	61ae <_realloc_r+0x14>
    61d4:	0029      	movs	r1, r5
    61d6:	0032      	movs	r2, r6
    61d8:	f7ff fb16 	bl	5808 <memcpy>
    61dc:	0029      	movs	r1, r5
    61de:	0038      	movs	r0, r7
    61e0:	f7ff fb24 	bl	582c <_free_r>
    61e4:	e7e3      	b.n	61ae <_realloc_r+0x14>

000061e6 <_malloc_usable_size_r>:
    61e6:	1f0b      	subs	r3, r1, #4
    61e8:	681b      	ldr	r3, [r3, #0]
    61ea:	1f18      	subs	r0, r3, #4
    61ec:	2b00      	cmp	r3, #0
    61ee:	da01      	bge.n	61f4 <_malloc_usable_size_r+0xe>
    61f0:	580b      	ldr	r3, [r1, r0]
    61f2:	18c0      	adds	r0, r0, r3
    61f4:	4770      	bx	lr
    61f6:	0000      	movs	r0, r0
    61f8:	42000800 	.word	0x42000800
    61fc:	42000c00 	.word	0x42000c00
    6200:	42001000 	.word	0x42001000
    6204:	42001400 	.word	0x42001400
    6208:	42001800 	.word	0x42001800
    620c:	42001c00 	.word	0x42001c00
    6210:	706c6568 	.word	0x706c6568
    6214:	00000000 	.word	0x00000000
    6218:	65680a0d 	.word	0x65680a0d
    621c:	0d3a706c 	.word	0x0d3a706c
    6220:	694c200a 	.word	0x694c200a
    6224:	20737473 	.word	0x20737473
    6228:	206c6c61 	.word	0x206c6c61
    622c:	20656874 	.word	0x20656874
    6230:	69676572 	.word	0x69676572
    6234:	72657473 	.word	0x72657473
    6238:	63206465 	.word	0x63206465
    623c:	616d6d6f 	.word	0x616d6d6f
    6240:	0d73646e 	.word	0x0d73646e
    6244:	000a0d0a 	.word	0x000a0d0a
    6248:	6f636e49 	.word	0x6f636e49
    624c:	63657272 	.word	0x63657272
    6250:	6f632074 	.word	0x6f632074
    6254:	6e616d6d 	.word	0x6e616d6d
    6258:	61702064 	.word	0x61702064
    625c:	656d6172 	.word	0x656d6172
    6260:	28726574 	.word	0x28726574
    6264:	202e2973 	.word	0x202e2973
    6268:	746e4520 	.word	0x746e4520
    626c:	22207265 	.word	0x22207265
    6270:	706c6568 	.word	0x706c6568
    6274:	6f742022 	.word	0x6f742022
    6278:	65697620 	.word	0x65697620
    627c:	20612077 	.word	0x20612077
    6280:	7473696c 	.word	0x7473696c
    6284:	20666f20 	.word	0x20666f20
    6288:	69617661 	.word	0x69617661
    628c:	6c62616c 	.word	0x6c62616c
    6290:	6f632065 	.word	0x6f632065
    6294:	6e616d6d 	.word	0x6e616d6d
    6298:	0d2e7364 	.word	0x0d2e7364
    629c:	000a0d0a 	.word	0x000a0d0a
    62a0:	6d6d6f43 	.word	0x6d6d6f43
    62a4:	20646e61 	.word	0x20646e61
    62a8:	20746f6e 	.word	0x20746f6e
    62ac:	6f636572 	.word	0x6f636572
    62b0:	73696e67 	.word	0x73696e67
    62b4:	202e6465 	.word	0x202e6465
    62b8:	746e4520 	.word	0x746e4520
    62bc:	27207265 	.word	0x27207265
    62c0:	706c6568 	.word	0x706c6568
    62c4:	6f742027 	.word	0x6f742027
    62c8:	65697620 	.word	0x65697620
    62cc:	20612077 	.word	0x20612077
    62d0:	7473696c 	.word	0x7473696c
    62d4:	20666f20 	.word	0x20666f20
    62d8:	69617661 	.word	0x69617661
    62dc:	6c62616c 	.word	0x6c62616c
    62e0:	6f632065 	.word	0x6f632065
    62e4:	6e616d6d 	.word	0x6e616d6d
    62e8:	0d2e7364 	.word	0x0d2e7364
    62ec:	000a0d0a 	.word	0x000a0d0a

000062f0 <xHelpCommand>:
    62f0:	00006210 00006218 00000dd5 00000000     .b...b..........
    6300:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
    6310:	000031a4 000031a4 000031a4 00003232     .1...1...1..22..
    6320:	000031fc 00003226 000031a4 000031a4     .1..&2...1...1..
    6330:	00003232 000031fc 65657246 534f5452     22...1..FreeRTOS
    6340:	494c4320 540a0d2e 20657079 706c6548      CLI...Type Help
    6350:	206f7420 77656976 6c206120 20747369      to view a list 
    6360:	7220666f 73696765 65726574 6f632064     of registered co
    6370:	6e616d6d 0d2e7364 0000000a 00736c63     mmands......cls.
    6380:	3a736c63 656c4320 20737261 20656874     cls: Clears the 
    6390:	6d726574 6c616e69 72637320 0d6e6565     terminal screen.
    63a0:	0000000a 65736572 00000074 65736572     ....reset...rese
    63b0:	52203a74 74657365 68742073 65642065     t: Resets the de
    63c0:	65636976 00000a0d 00000a0d 0000616f     vice........oa..
    63d0:	325b6325 003e0d4b 00082008 325b6325     %c[2K.>.. ..%c[2
    63e0:	0000004a                                J...

000063e4 <xClearScreen>:
    63e4:	0000637c 00006380 00003699 00000000     |c...c...6......

000063f4 <xResetCommand>:
    63f4:	000063a4 000063ac 000036e1 00000000     .c...c...6......
    6404:	0c0b0a09 00000e0d 00004ce6 00004d60     .........L..`M..
    6414:	00004d60 00004d04 00004cfe 00004d0a     `M...M...L...M..
    6424:	00004cec 00004d10 00004d46 00004e3c     .L...M..FM..<N..
    6434:	00004e8c 00004e8c 00004e88 00004e2e     .N...N...N...N..
    6444:	00004e4e 00004e1e 00004e60 00004e72     NN...N..`N..rN..
    6454:	35455345 2d203631 494c4320 646e6120     ESE516 - CLI and
    6464:	62654420 4c206775 6567676f 000a0d72      Debug Logger...
    6474:	00007325 66726550 696d726f 5420676e     %s..Performing T
    6484:	65706d65 75746172 54206572 0d747365     emperature Test.
    6494:	0000000a 6f727245 54202172 65706d65     ....Error! Tempe
    64a4:	75746172 6f206572 20726576 44206425     rature over %d D
    64b4:	65726765 0d217365 0000000a 74737953     egrees!.....Syst
    64c4:	65206d65 726f7272 000a0d21 35455345     em error!...ESE5
    64d4:	43203631 5320494c 54524154 50205245     16 CLI STARTER P
    64e4:	454a4f52 53205443 54524154 0a0d4445     ROJECT STARTED..
    64f4:	00000000 20494c43 72617473 20726574     ....CLI starter 
    6504:	65646f63 45202d20 31354553 000a0d36     code - ESE516...
    6514:	70616548 66656220 2065726f 72617473     Heap before star
    6524:	676e6974 73617420 203a736b 0a0d6425     ting tasks: %d..
    6534:	00000000 5f494c43 4b534154 00000000     ....CLI_TASK....
    6544:	3a525245 494c4320 73617420 6f63206b     ERR: CLI task co
    6554:	20646c75 20746f6e 69206562 6974696e     uld not be initi
    6564:	7a696c61 0d216465 0000000a 70616548     alized!.....Heap
    6574:	74666120 73207265 74726174 20676e69      after starting 
    6584:	3a494c43 0d642520 0000000a 6f727245     CLI: %d.....Erro
    6594:	6e6f2072 6d656d20 2079726f 6f6c6c61     r on memory allo
    65a4:	69746163 6f206e6f 5246206e 54524545     cation on FREERT
    65b4:	0d21534f 0000000a 6f727245 6e6f2072     OS!.....Error on
    65c4:	61747320 6f206b63 66726576 20776f6c      stack overflow 
    65d4:	46206e6f 52454552 21534f54 43000a0d     on FREERTOS!...C
    65e4:	534f5000 2e005849 302d2300 6800202b     .POSIX...#-0+ .h
    65f4:	65004c6c 46456766 31300047 35343332     lL.efgEFG.012345
    6604:	39383736 44434241 30004645 34333231     6789ABCDEF.01234
    6614:	38373635 63626139 00666564              56789abcdef.

00006620 <_ctype_>:
    6620:	20202000 20202020 28282020 20282828     .         ((((( 
    6630:	20202020 20202020 20202020 20202020                     
    6640:	10108820 10101010 10101010 10101010      ...............
    6650:	04040410 04040404 10040404 10101010     ................
    6660:	41411010 41414141 01010101 01010101     ..AAAAAA........
    6670:	01010101 01010101 01010101 10101010     ................
    6680:	42421010 42424242 02020202 02020202     ..BBBBBB........
    6690:	02020202 02020202 02020202 10101010     ................
    66a0:	00000020 00000000 00000000 00000000      ...............
	...

00006724 <_init>:
    6724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6726:	46c0      	nop			; (mov r8, r8)
    6728:	bcf8      	pop	{r3, r4, r5, r6, r7}
    672a:	bc08      	pop	{r3}
    672c:	469e      	mov	lr, r3
    672e:	4770      	bx	lr

00006730 <__init_array_start>:
    6730:	000000dd 	.word	0x000000dd

00006734 <_fini>:
    6734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6736:	46c0      	nop			; (mov r8, r8)
    6738:	bcf8      	pop	{r3, r4, r5, r6, r7}
    673a:	bc08      	pop	{r3}
    673c:	469e      	mov	lr, r3
    673e:	4770      	bx	lr

00006740 <__fini_array_start>:
    6740:	000000b5 	.word	0x000000b5
